Function.class
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=1
if (DBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
!disableBluetoothContactSharing
sublistsIndices.keySet().stream()
myNameField.getFocusableComponent()
scheduleRemoveStartingWindowLocked(wtoken)
var.isUseReferenceDirectly()
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
!comboBox.isPopupVisible() || component == null
type.getDeclaredConstructor()
logger.trace("myq ReturnCode: {}",returnCode)
new Paint()
Item.itemsList[item.itemID].getColorFromItemStack(item,0)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
Map<String,Object>
nextPos < mBoundPos
result != null && getActivity() != null
request.getContentLengthLong()
ColorProperties.getColor("selectionForeground")
IOConverter.toString(out,null)
sourceConstant.getKind()
Cheese.class
mEntryValues[which]
new IllegalStateException("Legacy advertising can't include TX power level in header")
Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
ignoreUnknown=true
checkCall(receiver)
childLeftTuple.reAddRight()
connection.local().createStream(toStreamId(i),false)
t + 1000
valueOfDateTimeOriginal != null && getAttribute(TAG_DATETIME) == null
props.getProperty(ASSERTION_RESULTS_FAILURE_MESSAGE_PROP,TRUE)
UpgradeStepRegistrator.class
wZipFilename.setText(dir)
c == Double.class || c == Double.TYPE
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new BufferCell(type.makeCellName(values[i]))
type.getDeclaredConstructor()
role instanceof String
new MaterialKey(text)
targetPoint.y - shift
processURL(message,depth,url,baseURL)
detector != null && detector.detectCountry() != null
new JarFile(mArchiveSourcePath,true,true)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
LOG.debug("It is not possible to parse file " + fileLocation)
Long.toString(bitstampOrder.getId())
Integer.parseInt(taskIdStr)
shell.setSize(740,678)
Long.parseLong(name)
mWindow == null || !mWindow.getSharedElementsUseOverlay()
telephony.isIdle(getOpPackageName())
e.getCommandResult().getErrorMessage().contains("ns not found")
slashCount >= 1
Integer.parseInt(param.getValue())
flux.onErrorResume(ex -> Flux.error(getReadError(bodyParameter,ex)))
IssueTrackingBlocksRecognizer rec
userInfo == null || !userInfo.canHaveProfile()
JournalStructureServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
Math.max(leftLen,rightLen)
getTestVector().getNumNonZeroElements()
ensureInChild(parent,FooImpl.class,Foo.class)
--remainingReleaseCount == 0 && extractor != null
new RoutingControlAction(this,newPath,true,callback)
LocalAnimation localVideo=(LocalAnimation)contentContainer.getContent(); 
outLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
parent.getOuterClass()
_jsonWebServiceServiceAction.getJSON(null,mockHttpServletRequest,mockHttpServletResponse)
inUtc || allDay
exportStatusCounts(exporter)
convert31YToMeters(yB,yA)
JDBCUtils.safeGetLong(dbResult,"id")
mService.setAppPolicy(UID_A,POLICY_NONE)
LOG.debug("Exception: ",e)
GlobalSearchScope.allScope(getProject())
sampleFormat != null
configurationManager.addContainerProvider(c)
mask.isColumnVectorOrScalar()
ConcurrentHashMap<VoiceMessageListener,Integer>
"Searching class for device type " + deviceType
l != null
new RemoteUserInfo(mCurConnection.pkg,mCurConnection.pid,mCurConnection.uid,mCurConnection.callbacks.asBinder())
id=19909
source.getName()
toArrayHelper(array,0)
new LruCache<>(3)
return true; 
worker.clear()
mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()
providers.size() > 0
localBinder.getServiceInstance().restartScan()
schemeSpecificParts != null && data != null
expectedGas=436
public static final DataNucleusTemplates DEFAULT=new DataNucleusTemplates(); 
_mockSettingsLocatorHelper.getServerSettings("com.liferay.portal")
SceneConfigReadingJob.class
timeout >= 0
checkCall(receiver)
times + BASE_FILE_NUMBER
new GitException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
visitStatement(node,context)
from >= to
/**   * Return the native Typeface object associated with this PFont (if any).  */ public Object getNative(){   if (subsetting) {     return null;   }   return typeface; } 
Math.max(leftLen,rightLen)
accountInfo.getCreationDate()
ModuleGrouperKt.isQualifiedModuleNamesEnabled(myWizardContext.getProject())
return _this; 
WordPress.getCurrentBlog().getLocalTableBlogId()
-33.86523340256843
listAdapter.notifyDataSetChanged()
selenium.isElementPresent("link=Control Panel")
iterations=1
/**   * User: anna Date: 1/10/13  */ public class JavaFXDefaultTagInspectionTest extends AbstractJavaFXQuickFixTest {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxDefaultTagInspection());   }   public void testChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testEmptyChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testStylesheets() throws Exception {     checkQuickFixNotAvailable("stylesheets");   }   @Override protected String getHint(  String tagName){     return "Unwrap '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/defaultTag/";   } } 
found=false
/**   * clockwise   */ CW(0)
user.getActualCompanyId()
logger.warn("license [{}] - grace",license.uid())
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
internalExecutor.submit(futureTask)
MTU_LENGTH_DEFAULT=4096
portletDataContext.getExportDataElement(stagedModel)
accountHandle.getComponentName().flattenToString()
components.symbolUsageValidator.validateCall(null,setter,trace,reportOn)
StringBuilder detailBuffer=new StringBuilder(); 
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
getStep(project,stepId)
getName().equals(type) || getNameWithoutPackage().equals(type)
totalNbSuggestions == MAX_NUMBER_SUGGESTIONS
LOG.info(e)
Object maxFractDigits=properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
super.dismiss()
setSelectedCell(panel,false)
pkgs.get(j)
conversation.getContactJid().split("/",2)
mPowerManager.isInteractive()
new IOException("UnknownHostException exception: " + e.getMessage(),e)
Size.kilobytes(16)
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
scheduleRemoveStartingWindowLocked(wtoken)
Integer id=Integer.parseInt(reader.getAttributeValue(null,"id")); 
dockedBounds.right + dockDividerWidth
rw.close()
return serialConsistency; 
name.endsWith(node.getText())
selenium.isElementPresent("link=Control Panel")
hasRows(newTableName)
reader.nextDouble()
binding.getKey().getTypeLiteral().getRawType()
1f / 100
selenium.isElementPresent("link=Control Panel")
assertEquals(30,count)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
BonusPackHelper.requestStringFromUrl(url,mUserAgent)
number == null || s == null
Base64.getEncoder()
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
MethodHandles.insertArguments(ci.handle,ci.handle.type().parameterCount() - 2,false,true)
minHandlingTime == 0 || minHandlingTime > handlingTime
LOGD=false
new BeanDefinitionStoreException(bd.getResourceDescription(),curName,ex.getMessage(),ex)
Optional.absent()
Thread.sleep(4000)
a.getDimension(attr,0)
Long.parseLong(name)
getTestName(false)
mNavigationBarView.inScreenPinning() || mStatusBar.isKeyguardShowing()
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle || DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.db2
new StringPreference("map_overlay",null,false)
MethodNotFoundException.class
tokens.getText()
checkCall(receiver)
logger.warn("license [{}] - expired",license.uid())
mQueryTextView.length()
settings.readLPw(null,0,false)
new InMemoryMessageRepository()
issueUpdater.setManualSeverity((DefaultIssue)context.issue(),severity(properties),context.issueChangeContext())
public WhitespaceTokenizer create(Reader input){   return new WhitespaceTokenizer(input); } 
-y
l.contains("</pre>")
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
type != null || interpolationInterval > 0
selenium.click("//li[4]/span/a/span")
definition.getAllPortTypes()
selenium.isElementPresent("link=Control Panel")
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     if (myRunContext != null) {       runnable.run();       return;     }     final boolean needsRestart=isIdleQueueEmpty();     myIdleRequests.add(runnable);     if (isFocusTransferReady()) {       flushIdleRequests();     }  else {       if (needsRestart) {         restartIdleAlarm();       }     }   } } )
this.route(request).switchIfEmpty(Mono.defer(() -> other.route(request)))
(short)0777
Long.parseLong(subSecs)
new Duration(60,TimeUnit.SECONDS)
executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
o instanceof XidImpl
mSyncStatus.valueAt(i)
createFromResourceStream(res,value,is,srcName,null)
p._eta != 0.3
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true)
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
new TestResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
(ChatRoomMessageReceivedEvent)obj
_folder == null
return mChangingDisappearingDelay; 
Assert.notNull(patterns,"Patterns must not be null")
SLIDING_TIMEOUT=60L
LOGGER.debug(msg.apply())
checkCall(receiver)
((Scorecard)serializable).getUseReasonCodes()
new GitException("Remote url " + url + " is invalid. ")
!findClass
new MockQueryExecution(2)
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final HttpClient getClient(){   return getClient(connectionTimeout); } 
lockMode == InodeTree.LockMode.READ
assertTrue(metaInject.init(spyMeta,data))
b == null || b.length == 0
ConfigPropertyVetoException ex
Long.parseLong(val)
selenium.isElementPresent("link=Control Panel")
TEST_UTIL.getAdmin()
!(value.getParent() instanceof XmlAttribute) || holder == null
new LinkedList<>(0)
mMenu.getNonActionItems()
artifact.replaceAll("(?<!solr-)analysis-","analyzers-")
dynamicType.getDeclaredConstructor()
cacheTimeout=3600000L
public Integer getWidth(){   return width; } 
return true; 
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
gi.getOriginalVertexName()
inUtc || allDay
FitNesseUtil.makeTestContext()
user.isSystem()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
CustomPrefixesActivity.class
Thread.sleep(1000)
deletionRetentionStrategyConfig == null
assertEquals(arr1,table.getBinaryByteArray(0,0))
myModel == null || text.length() == 0
volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.getMountUserId() == userId
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples,0,0,0,settings.useStereo3D())
ipnbFilePanel.getSelectedCellPanel()
Integer.parseInt(stackIdStr)
new ChooseCallAccountPopupMenu(tree,detail.getAddress(),providers)
application.getBaseContext()
ColorProperties.getColor("primaryControlDarkShadow")
server_.copyFile(selectedFiles.get(0),targetFile,true,new VoidServerRequestCallback(progress){   @Override protected void onSuccess(){     view_.selectNone();   } } )
myRole2 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
config.getInt("history.size",15)
getMyApplication().getFavorites().getFavouritePoints()
parent.getChildPosition(v)
Type.getObjectType(classNode.name)
new CallbackStub(this)
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
IOException e
mAuthorities.valueAt(i)
new Paint()
tl.set(paint,mText,start,end,dir,directions,hasTabs,tabStops)
filter.updateTypesToAccept(poiCategory)
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
GroupServiceUtil.addGroup(GroupConstants.DEFAULT_PARENT_GROUP_ID,name,description,type,StringPool.BLANK,true,true,serviceContext)
_userNotificationInterpreterClasses.isEmpty()
awsClient.deleteImage(resource.getId())
assertEquals(redVocab.getIndex(),1)
value.entrySet()
public LocalQueryRunner printPlan(){   printPlan=true;   return this; } 
Long.parseLong(value)
mBluetoothHeadset.disconnectAudio()
Build.VERSION.SDK_INT < Build.VERSION_CODES.O
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
r.curApp != null && r.curApp.curReceiver == r
return encodedMatchedUris; 
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes())
settings.ROUTER_SERVICE.getModeValue(routingHelper.getAppMode())
F.isEmpty(diffs)
pointcut.getMethodMatcher().matches(null,null,(Object[])null)
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
temporaryFolder.newFolder()
Thread.sleep(1000)
setBackground(null)
dlFileVersion.getVersion().equals(DLFileEntryConstants.VERSION_DEFAULT) || (status == WorkflowConstants.STATUS_IN_TRASH)
native_get_videoeditor_export_level(vidCodec)
i <= position
requestOptionsClassName.toString()
jedis.sadd(getSetKey(task),request.getUrl()) == 0
notifyAll()
assertThat(t).isEqualTo(e)
factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)
response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty())
9 * 60 * 1000
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
selenium.isElementPresent("link=Control Panel")
mAuthorities.valueAt(i)
JvmDeclarationOriginKt.OtherOriginFromPure(myClass)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
uncollectedPointCreator.createUnCollectedPoint(timestamp)
logger.debug("Receive queue TAKE: Length={}",recvQueue.size())
MAX_TOOLTIP_WIDTH=400
Exception e
isSubDelimiter(c)
TelephonyManager.getDefault().getCurrentPhoneType()
new JettySolrRunner(solrHomeDirectory.getAbsolutePath(),"/solr",0,null,null,true,null,sslConfig)
new DefaultSerializer<ModuleSource>(ModuleSource.class.getClassLoader())
treeWalk.close()
type.getDeclaredConstructor()
new FormAttachment(wCompression,margin)
log.debug("Double activation of navigator context")
disabledForeground(false)
position + dockDividerWidth
got == possible || got < expected
mVibratorService.vibratePattern(null,new long[]{0},0,new Binder())
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
viewCache.getObject(monitor,this,name,DB2View.class)
pushNotificationsSender.reset()
mCollapseOffset > 0
MigrationManager.instance.notifyDropUserType(ut)
knownHandlers.contains(handler)
Throwable failure=lastException; 
mp.getCount() == 1 && (mp.getBodyPart(0) instanceof LocalAttachmentBodyPart) == false
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
weekRange.add(Calendar.DATE,6)
runTasks & 0x3F
type.getDeclaredConstructor()
Throwable exception
layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,218,Short.MAX_VALUE)
/**   * Decodes a BSON byte array into a DBObject instance.  * @param bytes a document encoded as BSON  * @return the document as a DBObject  */ public static BSONObject decode(final byte[] bytes){   final InputBuffer buffer=new BasicInputBuffer(ByteBuffer.wrap(bytes));   return new DBObjectCodec(PrimitiveCodecs.createDefault()).decode(new BSONBinaryReader(buffer)); } 
i < size
new Point(6,4)
SynchronousQueue<Runnable>
bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0
wKey.indexOfString(v.getName(),2)
myModel == null || text.length() == 0
cmdbCompItem != null
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.media.omx@1.0::IOmx","android.hardware.sensors@1.0::ISensors","android.hardware.vr@1.0::IVr")
return false; 
private final QSDetailClipper mClipper; 
calendarBooking.getTitle(user.getLocale())
XContentType.SMILE.mediaType()
Thread.sleep(1000)
logger.fine(String.format("connection attempt will timeout after %d",timeout))
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0","00:12:8A")
listTypePersistence.fetchByPrimaryKey(listTypeId)
Throwable err
e.getMessage().contains("SocketTimeout") || e.getMessage().contains("ConnectException")
@InputMagicNumberIntMethodAnnotation(value=-45)
MonitoringPortlet.isMonitoringPortletResourceRequest()
StringBuilder stringBuffer=new StringBuilder(); 
UPDATE=true
pw.print(ps.getInstantApp(user.id))
dstCursor == null
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
ar2.cause()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
WindowsResourceScriptPlugin.class
threadPerHost=2
findCodecForFormat(true,format)
selenium.isElementPresent("link=Control Panel")
dstPath.toString()
new CommandLineException(result.toString())
selenium.isElementPresent("link=Control Panel")
DiagnosticFactory0.create(ERROR)
selenium.isElementPresent("link=Control Panel")
mapper.getFactory()
Integer.parseInt(stackIdStr)
LOGGER.warn(msg.apply())
/**   * Sent bytes count.  */ private final LongAdder8 sentBytesCnt=new LongAdder8(); 
DLAppLocalServiceUtil.deleteFileShortcut(classPK)
destinations[i].getPhysicalName()
assertProtonResourceLimits(0.88,0.8,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
randomNonNegativeLong()
doReopen(true)
ScriptingUtil.exec(null,portletObjects,language,script,new String[0])
constr.ipadx=5
MBeanInfoAssembler.class
inputItem.getItemDetails()
message.getConversation()
mOrderResult.remove(packageName)
parsed.isJsonNull() || parsed.isJsonPrimitive()
thrown.expect(UserCodeException.class)
r.curApp != null && r.curApp.curReceiver == r
message.isExpired()
Long.parseLong(value)
selenium.isElementPresent("link=Control Panel")
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null,null)
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l,null,null,0,0)
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
r.curApp != null && r.curApp.curReceiver == r
makeString(list,",","(",")")
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
new HashSet<RecordReplicationInfo>()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
ignite.getOrCreateCache(cacheCfg)
pattern.toString()
mNextNonWakeupDeliveryTime < nowELAPSED
new BitSetFlags(permanentGraph.nodesCount(),false)
logger.isInfoEnabled()
LOGGER.warn("Could not perform drage and drop",ioex)
localRemoveList.clear()
velocity / flingThreshold
Math.min(buffer.length,offset + length)
isControl && (scriptMode || cursorInsideToken) && !hasValuableTokens
topLevelBuildData.getMasterHostname()
USE_NOTIFICATION_LISTENER=true
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     if (!Disposer.isDisposed(myUi)) {       myUi.setDataPack(dataPack);       myProject.getMessageBus().syncPublisher(VcsLogDataHolder.REFRESH_COMPLETED).refresh(dataPack);     }   } } )
popupWindow.setContentWidth(menuWidth)
Status.createStatuseList(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
mirror.getType()
_value instanceof NotValue
mLocalAlluxioClusterResource.get().getWorker()
textDelimiterTrailing.getSelection()
indexStats.getPrimaries().getMerge().getCurrent()
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS,Manifest.permission.GET_ACCOUNTS_PRIVILEGED)
src.remaining()
delaySoFar >= mReEnableDelayMillis
DEBUG_ALL_ACTIVITIES || true
new Thread[5]
new CompositeException(t,e)
new FileWriter("/sdcard/payloadAndroid.txt")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isElementPresent("link=Control Panel")
child.resetRtlProperties()
updateRotation(0)
getPluginReferential().findLastReleasesWithDependencies(pluginKey)
Settings.Secure.getInt(mResolver,NETSTATS_ENABLED,0)
renderFrameBuffer == null && renderFrameBufferMS == null
checkCall(receiver)
Boolean.parseBoolean(attrValue)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
request.getServletPath()
enabled=true
if (VDBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
TelephonyManager.getDefault().getCurrentPhoneType()
cluster.setWifiIndicators(mWifiConnected,mWifiIconId,mWifiActivityIconId)
_availCPU + amount
crashInfo != null && crashInfo.durationMillis != -1
IllegalArgumentException.class
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes())
DEBUG=false
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod.kt")
info.getImeiForSubscriber(subId[0],mContext.getOpPackageName())
currentUser.loggedInUser()
mAlpha.cancel()
Thread.sleep(1000)
loc != null
request == null || request.getScheme() == null || !request.getScheme().startsWith("package")
4 * MB
type.getDeclaredConstructor()
output.isEmpty()
(byte)210
return true; 
List<E>
ordering.compare(info.startOffset,caretOffset) > 0 && ordering.compare(info.endOffset,caretOffset) > 0
KaleoDefinitionLocalServiceUtil.incrementKaleoDefinition(definition,kaleoDefinition.getName(),StringUtil.randomString(),_serviceContext)
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
guiResource.getImageSlaveTree()
normalizedSuffix.length()
Character.isDigit(first) || first == '-'
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
!mKey.equals(other.mKey)
new ModelContextImpl.Properties(ApplicationId.defaultId(),true,Collections.emptyList(),null,false,Zone.defaultZone(),rotations)
resp.getAssertions()
/**   * Run transport tests over the Netty in-process channel.  */ @RunWith(JUnit4.class) public class Http2NettyLocalChannelTest extends AbstractInteropTest {   /**   * Start server.   */   @BeforeClass public static void startServer(){     startStaticServer(NettyServerBuilder.forAddress(new LocalAddress("in-process-1")).flowControlWindow(65 * 1024).channelType(LocalServerChannel.class));   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return NettyChannelBuilder.forAddress(new LocalAddress("in-process-1")).negotiationType(NegotiationType.PLAINTEXT).channelType(LocalChannel.class).build();   } } 
SnitchProperties.class
ANTIVENOM(ItemID.ANTIVENOM4,GameTimerImageType.ITEM,"Anti-venom",1,ChronoUnit.MINUTES,true)
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
probability(LIKELY_PROBABILITY,hintHub.equal(objectHub))
connectionProperties.containsKey("oracle.user")
getColumnSizes()[col] == 4
/**   * Sent messages count.  */ private final LongAdder8 sentMsgsCnt=new LongAdder8(); 
OrderUtils.getPriority(((DecoratingProxy)obj).getDecoratedClass())
colon != null && colon.getStartOffset() + 1 < node.getStartOffset() + node.getTextLength()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
selenium.isElementPresent("link=Control Panel")
KBFolderServiceUtil.getKBFolder(getParentResourcePrimKey())
Assert.assertEquals(getNotAllowedExceptionMessage("hello"),e.getCause().getMessage())
findAvailablePort(2000,10000)
tracesDir.mkdirs()
m.size()
Class.forName(name,false,getClass().getClassLoader())
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",false))
matcher.find()
Site.me().setRetryTimes(3).setSleepTime(1000)
getServiceForUserLocked(userId)
log.warn("Couldn't get resource: " + filename)
BungeeCord.instance.pluginManager.onLogin(event)
platform.map(version::compareTo).orElse(0) < 0
LogAdapter.createLog(name)
new HashTestServer(0,-1,60,SessionCache.NEVER_EVICT)
new TextPaint()
Object listener
socialActivitySetFinder.countByRelationType(userId,type)
textVersion.substring(0,textVersion.getIndex("#"))
info.getNaiForSubscriber(subId[0],mContext.getOpPackageName())
Collection<SkyKey>
invalidateDataSource(monitor,dataSource,false)
selenium.isElementPresent("link=Control Panel")
parts.length < 2
attrib.isNormal()
assertEquals(4,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())
lessThanOrEqualTo(3600000L)
Throwable e
item(MITHRIL_PLATEBODY)
N > 1
(!url.startsWith("http://")) && (!url.startsWith("https://")) && (!url.startsWith("file://"))&& (!url.startsWith("data:"))&& (!url.startsWith("error:"))
mServiceMap.get(userId)
telephony.isIdle(getOpPackageName())
value == null || value.equals(getString(R.string.protocol_odk_default))
log.info("caught exception",e)
resultSet.getInt(index)
this.loggingSystem.initialize(this.initializationContext,null,null)
Map<String,String>
for (IMethodInterceptor methodInterceptor : m_methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
state == _JavaDocLexer.COMMENT_DATA || myTokenEndOffset < myBufferEndOffset && (myBuffer[myTokenEndOffset] == '@' || myBuffer[myTokenEndOffset] == '{')
varX("name",ClassHelper.STRING_TYPE)
LOG.assertTrue(!myDisposed,"Access to psi files should not be performed after disposal")
NativeFormatPlugin p
id >= holdingColor.length
Throwable e
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
mState != STATE_INITIALIZED
new RepositoryElementsManager(psiManager,myRepositoryManager)
@NotNull
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
mPowerManager.isInteractive()
!"locale".equals(element.getKey())
Matchers.<Map.Entry<String,String>>containsInAnyOrder(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
dataType.endsWith("Boolean") || dataType.equals("boolean")
TIMEOUT_BUFFER=20L
new AnchorScrollingLogger()
HdmiCec.getTypeFromAddress(curAddress)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
doInvoke(args.first(),(args=args.rest()).first(),args.rest())
_state.getState() == HttpChannelState.State.IDLE
new CsvFilter("")
r.curApp != null && r.curApp.curReceiver == r
new V(8,new BooleanSetting(true))
LOGGER.isDebugEnabled()
checkCall(receiver)
proxy.getHost()
SCAN_STATUS_COMPLETE=2
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
i > 0
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0 && (sysUiFl & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0
ess.getSettings().getCurrencyPlural()
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA")
selenium.isElementPresent("link=Control Panel")
curComp.equals(service)
TestEmployeeTable.class.getSimpleName()
currentDateTime.plusSeconds(this.skewAllowance)
new Camera(settings.getWidth(),settings.getHeight())
Integer.toHexString(flags)
UIUtil.isUnderGTKLookAndFeel() || UIUtil.isUnderNimbusLookAndFeel()
componentRealm.importFrom(componentRealm.getParentRealm().getId(),"org.codehaus.plexus.util.xml.pull")
Throwable e
getEffectiveHstsEnforced()
@Nullable
curr != null
localY2 * cos
resultEndpoint.setResultWaitTime(5000)
body.getContentType().mediaType()
response.getContentAsByteArray()
sec.getConfigurator()
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
mTextColorLink.getColorForState(ds.drawableState,0)
StaticApplicationContextServiceFetcher.this
mStartDelay == 0 || mSeekFraction >= 0
index >= 0
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,10)
request.getPathInfo()
new Paint(Paint.ANTI_ALIAS_FLAG)
LOGGER.debug("[{}] has loaded the CAS application context",event.getServletContext().getServerInfo())
method.getMethodInfo2()
assertEquals(6,beanCount)
CalendarBookingServiceUtil.addCalendarBooking(calendarId,childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
!getLocationEnabled()
packet.getFrom().split("/",2)
mTrustListeners.remove(i)
r.get(11)
portlet.getRootPortletId()
offset + i
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)
log.error("Problem in JSR223 script ",e)
operationJSONObjectBuilder.field(TYPE).stringValue(OPERATION)
new PlainMenuItem(iconId,null,text,needLinks,isUrl,false,null,onClickListener)
externalMediaDir.getPath()
SemVer.parseFromText(version)
keySet.isEmpty()
log.error("Problem in JSR223 script ",e)
String.format(Locale.getDefault(),"Time taken: %02d:%02d:%02d.%03d",hours,minutes,seconds,milliseconds)
comp.exitUtil()
selenium.isElementPresent("link=Control Panel")
!AuthFactory.supportsScram()
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
sizeNeeded > items.length
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
thisVisible || !isVisible
GL20.glGetProgramiv(program,pname,params)
Integer.parseInt(displayIdStr)
loaded.getLoaded().getDeclaredConstructor()
hasNonClassAnnotations()
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
Map<RealmObject,RealmObject>
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f)
Boolean.valueOf(setting)
LinkageError e
selenium.isElementPresent("link=Control Panel")
endBounds.height()
signedResults.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
getIntent() != null && getIntent().getExtras() != null
position / duration >= maxRateBytesPerMs
Element.F64_2(mRS)
mActionBarTop.getVisibility() != GONE
schedule(pingServerRunnable,nextPingIn,TimeUnit.SECONDS)
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
Integer.parseInt(stackIdStr)
frequencyKhz <= 30000
H2O.CLOUD.free_mem() / 2
List<TaggedWord>
isBookmarksList()
config.getMaxEntriesLocalHeap()
focusable.isAccessibilityFocusable()
selenium.isElementPresent("link=Control Panel")
timeout != null && timeout > 0
String message
assertFalse(constraints.isEmpty())
verbosity.shouldPrintOutput()
mUserManagerHelper.getAllUsers()
setProperty(IMPLEMENTATION,implementation,DEFAULT_IMPLEMENTATION)
rhs == null || !rhs.isValid()
Character.isWhitespace(origText.charAt(i))
uncompressedProto.length < 2570000
!"".equals(textArr[10])
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
ByteBuffer.allocate(4)
Math.abs(delta_loss)
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.get()
iconSize * DisplayMetrics.DENSITY_HIGH >= availableHeight
Thread.sleep(1000)
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
str.startsWith("/") || str.isEmpty()
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
selenium.click("//li[4]/span/a/span")
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
allocate && spaceLeft == 0
assertEquals(row.getField(0),3L)
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
-2
mAdapter == null || !mIsAttached
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,true)
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
dir.setMaxSizeInBytes(3)
return checksumtypeDescs; 
mExpandedGroup != -1 && mExpandedGroup != groupPosition
context == null || context == EGL_NO_CONTEXT
count > 0
new CallbackStub(this)
SearchSourceBuilder.fromXContent(parser,context,aggParsers,suggesters)
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
Build.VERSION.SDK_INT < 24
metadata.getFaceRectangles()
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
Slog.e(TAG,"Starting rect for app requested, but none available",new Throwable())
instance.startAction_New(getDefaultTitle(),null,false)
IccUtils.cdmaBcdByteToInt((byte)0x8c)
Assert.assertEquals(permissions.size(),1)
UIUtils.createComposite(panel,2)
final ClientState clientState=(ClientState)msg.obj; 
name != null && name.getElementType() == JSTokenTypes.IDENTIFIER
jobStateClone.clearExceptions()
FilterBuilders.existsFilter(RuleDocument.FIELD_CHARACTERISTIC_KEY)
new Edge(module,moduleOrderEntry,shouldRecurse)
new Date(1)
FieldAccess.forField(delegateField).read()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
new MessageGroupHashBucket(1024,64)
TableNotFoundException e
row("p_comment",null,7.0,0.0,null,null,null)
Server server
entry.cacheContentViews(mContext,notification.getNotification())
manager.getUserDictionary().getEditableWords()
blenderVersion >= 250
Validator.isNotNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
line.split(" *= *",2)
mCallback.onInputUpdated(inputId)
mAccessibilityController.isAccessibilityEnabled()
appliesTo_.length > 2
new ArrayList<>(0)
Sets.newLinkedHashSet()
DEBUG=false
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
segments.add(segment)
stopwatch.elapsed(MILLISECONDS)
parameters == null || parameters.isEmpty()
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
mHandler.obtainMessage(MSG_RESULT,status,0,currentPackage)
MARKER_FILE_VERSION=3
matcher.lookingAt()
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
Long.parseLong(val)
JDBCUtils.safeGetString(dbResult,"PROCESS")
result.getWarnings()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportFromCompanionObject.kt")
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().switchIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
serviceTester.systemRunning()
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY,CppFileTypes.VERSIONED_SHARED_LIBRARY)
new StringBuilder(245)
getProperties().requestCacheEnabled()
mPowerManager.isInteractive()
loaded.getLoaded().getDeclaredConstructor()
skyDaylightBrightness=0.6f
mockResultSet.getInt(1)
sourceHeight > 0
logger.debug("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
opened != -1
networkOperator != null && !networkOperator.isEmpty()
src.onTouchEvent(e)
new Byte(getByteValue(workingMemory,object))
!e.awaitTermination(24,TimeUnit.HOURS)
sr.getLastStartId()
Color.fromRGB(0x7B2FBE)
proxyHTTPSPort.setText(Integer.toString(Preferences.getInteger("proxy.https.port",8443)))
scrollWebElementIntoView(webElement)
XContentType.JSON.mediaType()
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS
DeprecationLogger.nagUserOfDeprecatedBehaviour("Do not remove a task dependency from a Task instance.")
new RuntimeException(e)
LOG.warn("Can not get java doc HTML text from autocomplete context menu in editor")
longitude >= MIN_LONGITUDE
(input & 0x80) != 0
@Mock private PanProfile mPanProfile; 
FBUtilities.getBroadcastAddress()
l.onResume(request,response)
cs[c].setNA(r)
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,false)
new RoutingControlAction(this,newPath,true,callback)
serviceTester.systemRunning()
@Specialization public String change(){   FrameInstance frameInstance=Truffle.getRuntime().getStackTrace().iterator().next();   Frame frame=frameInstance.getFrame(FrameAccess.READ_WRITE,false);   FrameSlot slot=frame.getFrameDescriptor().findOrAddFrameSlot("hello");   frame.setObject(slot,"world");   return null; } 
JournalArticleFinderUtil.findByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
schemeSpecificParts != null && data != null
minZ != 0f || maxZ != 0f
mDataAuthorities == null || data == null
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
cs[0].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
propValue == null || CommonUtils.equalObjects(propValue,defValue)
mStartActivity.task == null || mStartActivity.task == parent
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
presentation.updateValueView()
log.warn(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
assertRemoveSubsystemResources(servicesB)
propResource.get(BOOT_TIME).asBoolean(false)
parent != mHostView && parent.getParent() != null && parent.mAttachInfo != null
cc.getLazy()
new BufferedImage(region.width,region.height,page.getType())
parser.nextText()
this.beanFactory.containsBeanDefinition(beanName)
S
Simple.forClass(SkylarkNestedSet.class)
DataBufferUtils.read(is,this.bufferFactory,3)
((Number)s.first()).floatValue()
docData.length() > 0 && docData.charAt(0) == 65279
value.toLowerCase().startsWith(constraintLowerCase)
odbcUrl.lastIndexOf(project)
" firstActiveTime=" + firstActiveTime
grid(0).cache(null)
LOG.debug(msg,e)
remaining == 0
assertEquals(6,scannedBeanCount)
type.getDeclaredConstructor()
cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)
message.get("org.apache.cxf.ws.rm.inbound") == null && message.get("javax.xml.ws.addressing.context.inbound") != null
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends Activity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK) {       final String input=intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT);       new StringInputParser(input){         @Override protected void handlePaymentIntent(        final PaymentIntent paymentIntent){           SendCoinsActivity.start(SendCoinsQrActivity.this,paymentIntent);           SendCoinsQrActivity.this.finish();         }         @Override protected void handleDirectTransaction(        final Transaction transaction) throws VerificationException {           final WalletApplication application=getWalletApplication();           application.processDirectTransaction(transaction);           SendCoinsQrActivity.this.finish();         }         @Override protected void error(        final int messageResId,        final Object... messageArgs){           dialog(SendCoinsQrActivity.this,dismissListener,0,messageResId,messageArgs);         }         private final OnClickListener dismissListener=new OnClickListener(){           @Override public void onClick(          final DialogInterface dialog,          final int which){             SendCoinsQrActivity.this.finish();           }         } ;       } .parse();     }  else {       finish();     }   } } 
sleep(10_000)
tw.close()
WordPress.getCurrentBlog().getLocalTableBlogId()
IndexReader.open(benchmark.getRunData().getDirectory())
LOG.error(result.getDescription(),t)
mapConfig.getBackupCount()
mSelectedItemIdentifier != 0L
Messages.showInfoMessage(myProject,"Dependencies were successfully collected in \"" + ToolWindowId.DEPENDENCIES + "\" toolwindow",FindBundle.message("find.pointcut.applications.not.found.title"))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
!isBottomRightVisible
mTmpRect.height() > 0 && mTmpRect.width() > 0
event.getRawY()
route.isBluetooth()
generator.toJson(json.toString())
TelephonyManager.getDefault().getCurrentPhoneType()
TelephonyManager.getDefault().getCurrentPhoneType()
DIARY_QUEST_GROUP_ID=119
internalCluster().getDataNodeInstance(SystemCollectSource.class)
Beans.newDuration(tgc.getRememberMeMaxAge()).getSeconds()
near.getAndRemove(1)
listToUpdate.add(attrs.getValue("data-wpid"))
playerState >= HTML5VideoView.STATE_PREPARED
LOCATION_PATTERN.matcher(output)
style[j] instanceof WPImageSpan
createDouble(buffer.length(),init,workspace)
mHandlerCaller == null
ufsPath.toString()
inetAddresses == null || inetAddresses.isEmpty()
T value=null; 
highlightingTypes.put(INFORMATION_MARKER,new ExpectedHighlightingSet(INFORMATION_MARKER,HighlightInfoType.INFO,HighlightSeverity.INFO,false,checkWeakWarnings))
complete()
state == null || state.equals("") || state.equals("available")
new File(myConfig.getScriptName())
private static void hookResources() throws Throwable {   if (Build.VERSION.SDK_INT <= 16) {     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=1;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,callbackGetTopLevelResources);     }   }  else   if (Build.VERSION.SDK_INT <= 18) {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       try {         findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;         GET_TOP_LEVEL_RES_PARAM_CONFIG=3;         GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       }  catch (      NoSuchMethodError ignored2) {         try {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,String.class,boolean.class,callbackGetTopLevelResources);         }  catch (        NoSuchMethodError ignored3) {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         }       }     }   }  else {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     GET_TOP_LEVEL_RES_PARAM_BINDER=4;     try {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);       GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;       GET_TOP_LEVEL_RES_PARAM_CONFIG=3;       GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       GET_TOP_LEVEL_RES_PARAM_BINDER=5;     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);     }   }   XC_MethodHook.Unhook paranoidWorkaround=null;   try {     paranoidWorkaround=findAndHookMethod(Resources.class,"paranoidHook",XC_MethodReplacement.DO_NOTHING);   }  catch (  NoSuchMethodError ignored) {   }   Resources systemResources=new XResources(Resources.getSystem(),null);   setStaticObjectField(Resources.class,"mSystem",systemResources);   if (paranoidWorkaround != null)   paranoidWorkaround.unhook();   XResources.init(); } 
props.getProperty(PRINT_FIELD_NAMES_PROP,TRUE)
initialCapacity > 1 << 30
projectFilesystem.isFile(buckFile)
RuntimeException e
logger.debug("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
handler.update(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
u1.version() == 1 && u2.version() == 1
new JavaRecursiveElementWalkingVisitor(){   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     super.visitReferenceElement(reference);     final PsiElement resolved=reference.resolve();     if (resolved != null && !reported.contains(resolved) && !CommonRefactoringUtil.isAncestor(resolved,scopes) && !(resolved instanceof LightElement) && !haveElementInScope(resolved)) {       if (resolved instanceof PsiMethod) {         for (        PsiMethod superMethod : ((PsiMethod)resolved).findDeepestSuperMethods()) {           if (haveElementInScope(superMethod))           return;         }       }       final String scopeDescription=RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(reference),true);       final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.in.module.2",RefactoringUIUtil.getDescription(resolved,true),scopeDescription,CommonRefactoringUtil.htmlEmphasize(targetModule.getName()));       conflicts.putValue(reference,CommonRefactoringUtil.capitalize(message));       reported.add(resolved);     }   }   private boolean haveElementInScope(  PsiElement resolved){     if (PsiSearchScopeUtil.isInScope(resolveScope,resolved)) {       return true;     }     if (!resolved.getManager().isInProject(resolved)) {       if (resolved instanceof PsiMember) {         final PsiClass containingClass=((PsiMember)resolved).getContainingClass();         if (containingClass != null) {           final String fqn=containingClass.getQualifiedName();           if (fqn != null) {             final PsiClass classFromTarget=JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope);             if (classFromTarget != null) {               if (resolved instanceof PsiMethod) {                 return classFromTarget.findMethodsBySignature((PsiMethod)resolved,true).length > 0;               }               if (resolved instanceof PsiField) {                 return classFromTarget.findFieldByName(((PsiField)resolved).getName(),false) != null;               }               if (resolved instanceof PsiClass) {                 return classFromTarget.findInnerClassByName(((PsiClass)resolved).getName(),false) != null;               }             }           }         }       }       if (resolved instanceof PsiClass) {         final String fqn=((PsiClass)resolved).getQualifiedName();         return fqn != null && JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope) != null;       }     }     return false;   } } 
resources.getDimensionPixelSize(R.dimen.close_handle_height)
blog.getLocalTableBlogId()
? super K
GL.glBindTexture(target,texture)
return true; 
new Paint()
parent.getChildPosition(child)
Log.debug(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
MUCOwner iq=new MUCOwner(); 
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false,false)
Long.parseLong(value)
Key.make(_file + DeepWaterModel.CACHE_MARKER)
parsePrimaryConstructorParameterList()
Boolean.parseBoolean(System.getProperty("cassandra.native.epoll.enabled","true"))
_assertAttibutes(sourcesJSONArray.getJSONObject(1),100,50)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
_log.warn(ioe,ioe)
mValues[8]
new Paint(Paint.ANTI_ALIAS_FLAG)
ne(Expressions.constant(constant))
new SAXException(e.getMessage(),e)
setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
from > to
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
dictionary.put(words[0],words[2])
mUiHandler.postDelayed(pae,timeout)
SystemProperties.getBoolean("persist.demo.hdmirotationlock",false)
fingerprintIsEnabled()
getProxyClient(proxyPort).stop(ignoreFailure)
(program.length() > 0) && program.charAt(program.length() - 1) != '\n'
webRequest.getServletContext()
new BuildCancelledException()
getTestName(true)
list.append(pi)
policy != null && !policy.inferred
child.getMeasuredWidth()
selenium.isElementPresent("link=Site Name")
footerRow != null
passwd.getBytes(StringUtils.UTF8)
mCallback.onInputUpdated(inputId)
ctx.nextInboundMessageBuffer()
T[]
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
shouldUpdateDefaultPaymentMethod
completionLatch.await(2500,TimeUnit.MILLISECONDS)
Integer.parseInt(attrValue)
mClearPaint.setColor(0x0000ff00)
context.getOpPackageName()
!mShowLockscreenNotifications
exchange.setRequestHeader("Authorization",_basicAuth)
source.isInteractive()
Math.min(titleRight,subtitleRight)
selenium.isElementPresent("link=Control Panel")
addIndices != null
new Font(nodeFontName,nodeFontStyle,nodeFontSize)
Math.min(titleRight,subtitleRight)
oldClusterVersion.before(Version.V_6_0_0_alpha1)
return mAppearingDelay; 
fieldType.storeTermVectorOffsets()
SSLParametersImpl.getDefaultX509TrustManager()
sm.getString("namingContext.nameNotBound",name,name.get(0))
getMeasuredWidth()
classes.add(0,cls)
new GroupTest(false)
getConnectTimeout()
format.getName()
logger.warn("Couldn't read file: " + file)
private String mViewIdResourceName; 
return true; 
FutureTask<?>
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE || mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET
callButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
synchronized (mAuthorities) {   writeStatusLocked(); } 
StringBuffer sb=new StringBuffer(html); 
n.doubleValue()
callButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
w.mHasSurface && !w.mAppFreezing && w.mLayoutSeq == mLayoutSeq
slow=false
getService().hasClipboardText()
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples,0,0,0,settings.useStereo3D())
SystemProperties.getBoolean("persist.quickstep.scrub.enabled",true)
CharSequence url
highlightValue(highlight,false)
session.saveWithoutFlush(model)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
cachedDevice != null && cachedDevice.getName() != null
((GrParameter)parameter).getDeclaredType()
file.getPath()
new TextPaint()
LinkedHashSet<>
mView.postOnAnimation(mAnimationStarter)
filterNotTypes.length()
assertEvaluate(buildFile).moduleLookup("txts")
mService.removeNetwork(netId,mContext.getOpPackageName())
Environment.getOemDirectory()
(Repository)ethereum.getRepository()
ess.getSettings().getCurrencyPlural()
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(builder)
Key.class.getName()
matched && matcher.groupCount() > 0
new IncorrectOperationException(getClass().getName())
IllegalArgumentException.class
checkCall(receiver)
new Dialog(this)
GridGgfsTestUtils.jsonToMap(x)
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public CharSequence getAndroidCarrierNameForSubscription(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
BUKKIT_VERSION=2420
setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw_)
new Paint()
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
Throwable e
handleStartServer()
DEBUG=false
process.destroyForcibly()
Element[]
nextProcessId=1
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,fout)
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
LLVMMetadata m2
ApplicationManager.getApplication() != null && !ApplicationManager.getApplication().isDisposed()
checkDatabaseConnection(monitor)
((EventFactHandle)((ObjectVariableContextEntry)context).left).getEndTimestamp()
S extends Capability
functor != 0 && mWebView.getViewRootImpl()
telephony.getMergedSubscriberIds(mContext.getOpPackageName())
event.getRawY()
public PatternReplaceFilter create(TokenStream input){   return new PatternReplaceFilter(input,p,replacement,all); } 
updateCondition.isInternal()
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
rackIdToNodes.getOrDefault(rid,Collections.emptyList())
mAdapter != null && mDataSetObserver != null
GL11.glGetTexParameterfv(target,pname,params)
setValue(object,value.intValue())
minSimilar > 1
timeout * 10
getTestName(true)
visibleTerminal.getCaption()
appInfo.uid
rootReference.root.isComplete()
reportType % 0x10
n.doubleValue()
generateFluentSetters()
GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))
Thread.sleep(1000)
mUiHandler.removeCallbacks(pae)
new PartitionParser(stepName,allowStartIfCompleteValue)
public T valueOf(TreeNodeOnVcsRevision o){   return myBaseColumn.valueOf(o.getRevision()); } 
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
buffer.limit()
i=3
getNodeAddresses(node,U.sameMacs(locNode,node))
asDoubleReg(input)
NavigateAction.prepareAppModeView(map,selected,true,(ViewGroup)confirmDialog.findViewById(R.id.TopBar),true,new View.OnClickListener(){   @Override public void onClick(  View v){     if (selected.size() > 0) {       view.getSettings().APPLICATION_MODE.set(selected.iterator().next());       listAdapter.notifyDataSetChanged();     }   } } )
ev.mStateSamples.length >= NS
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
etp.setSummary(etp.getText())
Arg args
context == null || context == EGL_NO_CONTEXT
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
SortedQueue<Node>
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
selenium.isElementPresent("link=Control Panel")
resolve(jsUsers)
DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel(); 
args.length > 1
Response.ok(null,MediaType.TEXT_PLAIN)
outState.putBoolean(KEY_SHOULD_RESOLVE,mShouldResolve)
assertEquals(3,StringUtil.countMatches(drl,"import "))
selenium.isElementPresent("link=Control Panel")
pId + BASE_FILE_NUMBER
NavigatePointFragment.this.getContext()
constraint.hasCondition()
app.getSettings().FAST_ROUTE_MODE.getModeValue(params.mode)
RESOLUTION_PATTERN.matcher(output)
retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
incrementAppWidgetServiceRefCount(appWidgetId,fc)
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
Base.getContentFile("modes/java")
MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
new CountDownLatch(2)
info.getRegionNameAsString()
log.error("Article " + title,es)
createContractFromJson(contractName,json)
vb.getData().limit()
indexMappingsDir.exists()
project.getUserData(CONTENT_SCOPE_KEY)
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).variables(parameters.getVariables())
new IllegalArgumentException("Can't find a valid Maven project in the repository for the artifact [" + artifact.getGroupId() + ":"+ artifact.getArtifactId()+ ":"+ artifact.getVersion()+ "].")
VerboseTimeout.builder().withTimeout(1000,TimeUnit.SECONDS)
ASYNC_PRODUCER_THREAD.getStackTrace()
mProfileCursor == null || mProfileCursor.getCount() == 0
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).getSeconds()
new VisorCacheV4()
colors.getThemeAttributeId(i,0)
DEBUG=false
nameDefinitionMultimap.keys()
return false; 
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
isPrimitive(resultType)
selenium.isElementPresent("link=Control Panel")
mAppToken.isVisible()
getConfigurables()
a.willChangeBounds()
assertEquals(2,unindexedFieldNames.size())
JOrphanUtils.valueOf(getBoolean(value))
this.soundButton
Math.min(1.0,type.getProbability() / (1.0 - probabilityB))
id=20
assertEquals(7,ti.nrOfInvocations)
findModule(moduleName)
target.getDestinationLinkAddress()
ImageUtils.optimizeImage(this,path,3000,85)
parameters.length <= limit
new StringBuilder(50)
GL20.glUniform4fv(location,v)
propertiesComponent == null || propertiesComponent.isDefaultCreated()
activityNdx <= topActivityNdx
return true; 
new NameSegment(p,s)
otherSuperMethod.getTypeParameters()
application.getBaseContext()
from >= to
logger.debug("Cannot handle repeat command ({})",e.getMessage())
playerState >= HTML5VideoView.STATE_PREPARED
StringBuilder buffer=new StringBuilder(pattern.length() * repeats); 
MAX_ITEMS=500
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).switchIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
databaseLocker == null && isUseDatabaseLock()
expandedItemsList.valueAt(i)
DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT_MS_DEFAULT=5000L
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.USER_CURRENT)
strategiesBuilder::customMessageWriter
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
lock.isHeldByCurrentThread()
Localization.lang("Look up document identifier")
addBuildConfigSpectiStrategy(parametersBuilder,imageText)
savedNetwork.setParams(newParams)
display.getRealMetrics(mDisplayMetrics)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
RajLog.e("LoaderOBJ","File decode error")
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
Nd4j.createUninitializedDetached(shape)
log.error("Unable to save data for operation '" + op + "'",ex)
mPowerManager.isInteractive()
Throwable e
tfs.getFile(fileId)
ccCompilationContextInfo != null
selenium.isElementPresent("link=Control Panel")
super.executeInternal()
LOGGER.trace("Cache expiration duration after updates is set to [{}]",currentDuration)
mOuterRadius * 0.9f
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
!newDefaultSubIdObj.equals(mDefaultSubId)
? super T
XmppStringUtils.parseBareJid(from)
selenium.isElementPresent("link=Control Panel")
inQuotes.substring(spaceIndex)
stopwatch.elapsed(MILLISECONDS)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
Watcher<DeploymentConfig>
targetDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
mSupportsBearing ? 1 : 0
? super T
ChannelOption<Boolean>
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } 
selenium.isElementPresent("link=Control Panel")
Numeric.toHexStringWithPrefixSafe(filterId)
mono.onErrorResume(ex -> Mono.error(getReadError(bodyParameter,ex)))
assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())
Throwable e
selenium.isElementPresent("link=Control Panel")
CollectionUtils.isEmpty(elements)
cursor.getCurrentValueEndPosition()
new IllegalStateException(sm.getString("coyoteResponse.sendError.ise"))
Disposer.register(myProject,myDisposable)
types == null || types.length == 0
spoon.saveToRepository(transMeta,false)
Slog.w(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
TimeUnit.SECONDS.sleep(4)
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
f.isHidden()
drawGeometry(g)
new File(parent,inoName)
jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,false)
structuralLock.isHeldByCurrentThread()
String.format("EsRecordWriter instance [%s] assigned to [%s]",currentInstance,uri)
qualifiedName(node)
processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
worldEdit.getBlockRegistry().parseFromListInput(component,context)
mockServerLogger.info("resetting all expectations and request logs" + NEW_LINE)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new DTree(_train,_ncols,_mtry,_mtry_per_tree,rseed,_parms)
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static ImportControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
mActionBar != null && mActionBar.isOverflowReserved()
tmpMap.size()
mService != null
items[21]
assertEquals(0,responseBody.get("bucket_count"))
leftTuple.setStagePrevious(last)
rcvdBytesCnt.longValue()
new IllegalArgumentException("unable to find a replica shard assigned to node [" + request.getCurrentNode() + "]")
Math.min(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
findCodecForFormat(true,format)
sampleFactory.getDeclaredConstructor()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
VERSION=42
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
metastore.getHost()
type.getDeclaredConstructor()
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_IE_DRIVER_EXECUTABLE
!(numBits > 1 && numBits < 8)
onDetachedFromWindow()
first > 0 && first < listApp.size()
System.getenv(Tokens.FAUNUS_HOME)
mEntryValues[which]
ServiceLoader.load(Collector.class,getClass().getClassLoader())
r.getResponse().sendError(503,"Remotely closed")
client != null && client.autofillClientIsFillUiShowing()
final Exception x
getHomeButton()
getTupledSet()
ContainerUtil.newIdentityHashMap()
cacheMapTileCount=9
publicType.getSimpleName()
mPowerManager.isInteractive()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
typeSettingsProperties.toString()
new MutableFloat("2.0")
url != null
transformedLine == null || transformedLine.isEmpty()
conf.getRestBaseURL()
uniqueField.getType().toExternal(doc.getField(uniqueField.getName()))
uid == Process.SHELL_UID && (pkgSetting.pkgFlags & ApplicationInfo.FLAG_TEST_ONLY) == 0
Condition<Id>
t.equalsIgnoreCase(type)
new Intent(Intent.ACTION_USER_PRESENT)
root.isDownloads()
@Override public Word2VecMojoWriter getMojo(){   return new Word2VecMojoWriter(this); } 
DiagnosticType.warning("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
selenium.isElementPresent("link=Control Panel")
HdmiCec.getTypeFromAddress(curAddress)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
Thread.sleep(1000)
node instanceof WildcardQueryNode || node instanceof ParametricRangeQueryNode
new Paint()
LOG.warn("Storage directory " + rootPath + " does not exist")
mMccStr == null
recordSetVersion2.getVersion()
toEventData(key)
i + skip < textLengthToProcess
60L + 120L
/**   * {@inheritDoc}  */ public Integer getTo(){   return Integer.valueOf(to); } 
this.mGLState.setDitherEnabled(renderOptions.isDithering())
out.writeBytes(mask)
current.getSuperClass()
sr.getLastStartId()
mDisplayContent.mDividerControllerLocked.getWidth()
HTREEMAP_DIR_SHIFT=6
(DERString)encoded
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
isAllowed()
executeSimpleCommand(STLS_COMMAND)
!useDisplayListProperties
locations.get(0).distanceTo(start) > 50
setFloatingLabelInternal(mode)
List<Callable<HTTPSampleResult>>
StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)
loaded.getLoaded().getDeclaredConstructor()
new ConnectionException(sm.getString("http2Parser.headers.wrongFrameType",connectionId,Integer.toString(headersCurrentStream),frameType),Http2Error.COMPRESSION_ERROR)
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
configMap.putAll(map)
new Attribute("implementationPackage",implementationPackage)
mSearchFab.setScaleY(1.0f)
new Settings(getContext().getFilesDir(),new Object())
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
1 << 15
result.getName()
mService.disconnect(mContext.getOpPackageName())
r.scheduleConfigurationChanged(taskConfig,true)
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
buildPages.getTypesWithoutHash()
new Paint()
jdbcTemplate.queryForObject(sql,int.class)
aa.getAllFlags()
findById(type,1)
log.debug("Not supported by dialect",ignore.getMessage())
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().switchIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
viewToClick != null && viewToClick.isAttachedToWindow()
typeSettingsProperties.toString()
mTrustListeners.remove(i)
Integer.parseInt(nextArgRequired())
dlg.setPositiveButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
SystemProperties.getBoolean("persist.vr.use_standby_to_exit_vr_mode",true)
value < mean + statisticalDeviationFactor * std
Integer.parseInt(leftStr)
decodeLast(ctx,e.getChannel(),replayable,state)
manifest.getRequirePlugins()
EqualityComparer<TKey>
mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
(Integer)o * 1000L
shouldBackup=true
final var user=new UserResource(); 
wKey.indexOfString(v.getName(),2)
if (override) {   if (sb.charAt(sb.length() - 1) == ';') {     sb.deleteCharAt(sb.length() - 1);     sb.append(" !important;");   }  else {     Timber.d("AnkiFont.getCSS() - unable to set a font attribute important while override is set.");   } } 
mBatteryStatus=BATTERY_STATUS_UNKNOWN
asList(DERBY,FIREBIRD,ORACLE,SQLSERVER,SYBASE)
{0,0,1,1,1,2,2,2,2}
mPanProfile.isProfileReady()
!locale.getLanguage().equals(casProperties.getLocale().getDefaultValue())
new HttpMediaTypeNotAcceptableException(producibleMediaTypes)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
selenium.isElementPresent("link=Control Panel")
CacheData<RealmObject>
final String fpCat=(p.category != null) ? p.category : ""; 
response.setStatus(500)
bedtime - SystemClock.uptimeMillis()
Number rate
idGenerator.generateUuid()
testClass.getSimpleName()
timeStampVector.getMutator().setSafe(index,value)
!willBeDestroyed || ApplicationManager.getApplication().isUnitTestMode()
SSL.getErrorString(stackError)
new IllegalStateException("Legacy advertising can't include TX power level in header")
final CharSequence url
scheduleRemoveStartingWindowLocked(wtoken)
buildPages.getTypesWithoutHash()
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
driver.evaluate(threadId,frameIndex,stringExpression)
bookmarksFolderFinder.countF_E_ByG_F(groupId,folderId,queryDefinition)
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,mContext.getOpPackageName(),callbackIntent)
storedHash == null || TextUtils.isEmpty(credential)
view != null && view.getParent() == this
@NotNull
mService.disconnect(src)
uri.indexOf("http://") == -1 && uri.indexOf("https://") == -1
buffer.readableBytes() < 8
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
resolveMethodByThrowable(exception)
logger.info("SSTables for user defined compaction are already being compacted.")
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0 && (sysUiFl & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0
mQuery.appendSpaceSeparated("WHERE")
LocaleUtil.getSiteDefault()
propEditor != null && !type.isArray()
event.getRawY()
source.getCharacters()
data.contains("black") || data.contains("tuxedo")
DataBufferUtils.read(channel,this.bufferFactory,2)
return type; 
assetUri.getAssetName().toLowerCase()
handleSecurityPermissionEndpoints(child,permConfig)
ScriptingCompilerConfigurationExtensionKt.configureScriptDefinitions(scriptTemplates,configuration,this.getClass().getClassLoader(),messageCollector,new HashMap<>())
gen.addLoadImmediate(Register.R0,123456789)
uri.toString()
win.isDrawnLw() || win.hasAppShownWindows()
props.getProperty(propName)
chargeUAh > 0 && level > 0
processLine(text,false)
LOG.info("Node " + path + " already exists and this is not a "+ "retry")
loaded.getLoaded().getDeclaredConstructor()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
assertFalse(killRes)
mIam.getStackInfo(WINDOWING_MODE_FULLSCREEN,ACTIVITY_TYPE_STANDARD)
LensPositionSelectors.lensPosition(LensPosition.FRONT)
origin > other
new Paint()
Trans != NO_TRANSPOSE
checkCall(receiver)
parseColor(dnc)
Trans != NO_TRANSPOSE
Validator.isBlank(body)
!isLost && this.service != null
msbFragmentCollection.getMsbFragmentCollectionId()
super.onDestroy()
hostTimeStamp=-1
attribute instanceof PreInvocationAttribute
sendMessageAtFrontOfQueue(CMD_STOP_AP)
nextArg()
state.getItemCount() <= 0
_log.warn(ioe,ioe)
assertTrue(dr.isFailure())
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
ServiceAnnouncingChatHandlerProvider.class
inputItem.getItemDetails()
{0,0,1,1,1,2,2,2,2}
this.beanFactory.containsBeanDefinition(beanName)
menu == null || mAccount == null
rematchAllNetworksAndRequests(networkAgent,oldScore)
info.crashInfo.stackTrace.length() > 30000
type instanceof GraphQLTypeReference || typeMap.containsKey(type.getName())
!selectorName.startsWith("--")
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
perfRule.assertDurationAround(duration,3600L)
ObjectUtils.tryCast(myContentElementType,IFileElementType.class)
LOG.debug(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
holder.createWarningAnnotation(element,composeTooltipString(descriptor,deprecated))
mTextColorLink.getColorForState(ds.drawableState,0)
gl.glCopyTexSubImage2D(target,level,x,y,xOffset,yOffset,width,height)
tracesDir.mkdirs()
getTelecomService().getVoiceMailNumber(accountHandle)
ConcurrentHashMap<VoiceMessageListener,Integer>
input.getExecPath()
Long.parseLong(args[2])
temp_descs.get(j)
Thread.sleep(2000)
oppositeWindow == w || oppositeWindow != null && oppositeWindow.getOwner() == w
pir.key.activity != null && pir.key.activity.pendingResults != null
type.getDeclaredConstructor()
Thread.sleep(1000)
service.getCharacteristic(charUuid.getUuid(),charInstId)
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_INT)
assertThat(map).containsExactly(p)
mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
selenium.isElementPresent("link=Control Panel")
key.flip()
-1
filter == null || unfilteredAppPaths == null
Preconditions.checkNotNull(manager,"manager")
this.get(0)
LOG.debug("Terminating channel to the remote gRPC server")
file.getOriginalFilename()
type.getDeclaredConstructor()
new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
group != null && this == group.mInternalConnection
mService.queryDisplayStatus(getCallbackWrapper(callback))
session.getRemote().sendStringByFuture(command.format())
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error))
super.hashCode()
new Scale(1,0.01,0,0)
LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort())
UserHandle.myUserId()
buildPages.getTypesWithoutHash()
from >= to
@Override public FunctionProperty clone(){   FunctionProperty prop=(FunctionProperty)super.clone();   prop.cacheValue=cacheValue;   prop.testIteration=testIteration;   prop.function=function;   return prop; } 
CreateClassOrInterfaceFix.getApplicableTemplates(FLEX_TEMPLATES_EXTENSIONS,context.getProject())
nextTokenIs(b,IDENTIFIER)
getColors(which,TYPE_DARK)
Localization.lang("Library")
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,false)
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ indexUserDescription+ "]"
1
Slog.w(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
collection.setLazy(false)
List<CallServiceInfo>
IccUtils.cdmaBcdByteToInt((byte)0x8c)
@Nullable
pv.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_highlight_bg))
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
uri.getAssetName().toLowerCase()
deferUpdateBounds(HOME_STACK_ID)
defaultDndAccess != null
Options.DumpOnError.getValue(GLOBAL) || Options.Dump.getValue(GLOBAL) != null
imageHolder.getStyleClass().add("page")
indexLock.writeLock()
field.tokenStream(docMapper.mappers().indexAnalyzer())
changeAffiliationByAdmin(jid,"owner",null)
1
sSoundPaths.containsKey(mQa) && mNextToPlay < sSoundPaths.get(mQa).size()
Boolean.parseBoolean(attrValue)
GraphDatabaseSetting<Long>
StringBuilder sb=new StringBuilder(); 
packageName.isEmpty()
order.getSide().equalsIgnoreCase("buy")
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
~0x0000000000000007L
ColorProperties.getColor("tabTitle")
in.readStringFixed(8)
selenium.isElementPresent("link=Control Panel")
!myComposite.equals(composite)
nextPos < mBoundPos
tw.close()
return CONCURRENT; 
projectsEntryPersistence.update(projectsEntry,false)
counter < max
isTextEditable() && isSuggestionsEnabled() && !(this instanceof ExtractEditText)
DTOMapperImpl.class
new Paint()
Trans != NO_TRANSPOSE
artifact.getExecPath()
hideMenu()
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
DataStreamSink<OUT>
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
MultiValueMap<String,Object>
JspUtil.makeJavaIdentifier(poolName)
usersResource != null
GL.glPolygonOffset(factor,units)
!name.equals(that.name)
new MarketOrder(orderType,tradeableAmount,tradableIdentifier,transactionCurrency)
selenium.isElementPresent("link=Control Panel")
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.2800,9.7190,ef),currIdx.findClosest(49.8960,10.3890,ef),76411,1406)
selenium.isElementPresent("link=Control Panel")
!mQuietEnable
Preconditions.checkNotNull(manager,"manager")
q.removeFirst()
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
String.format(Locale.ROOT,"User [%s] doesn't exist",username)
graphStack.push(lockingTx)
(byte)0xe2
Math.max(leftLen,rightLen)
Log.setTraceEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
!mNavigationBarView.isQuickScrubEnabled()
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
Arrays.binarySearch(_id,0,_sparseLen,i)
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
mDownloadXtraDataPending=true
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
return false; 
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_PASSWORD,true)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
UpgradeStepRegistrator.class
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
mod.getJvmArgs()
Long.parseLong(val)
settings.setTextSize(WebSettings.TextSize.LARGEST)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
deltaY >= 0
loaded.getLoaded().getDeclaredConstructor()
ps == null || ps.getUserState().get(userId) == null || !ps.getUserState().get(userId).isEnabled(mInstantAppInstallerActivity,0)
appendValue(value,sb,variables)
mLargePaint.setColor(0x7f00ff00)
this.getTheSocket()
new byte[14]
drawable != mBackgroundDrawable || mBackgroundResource != 0
Color.fromRGB(0x51301A)
getter.getType()
interactor.startCommand(packageName,callback,mCommand,mArgs)
DEFAULT_VERIFY_ENABLE=false
selenium.isElementPresent("link=Control Panel")
public Integer getPort(){   return this.port; } 
ENABLED.get()
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
LOG.error("clear parameter error",ex)
Slog.i(TAG,"Failed to build intent for " + packageName)
assertTrue(model.getUniqueItems())
data.remaining()
b2c.convert(bc,cc,true)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
ImmutableMap<String,String>
component instanceof JTree || component instanceof JTextField
obj instanceof IntelliJLookAndFeelInfo
merge(new byte[]{flags},payload,signature)
IdeBorderFactory.createTitledBorderSimpleWithoutIndent(ApplicationBundle.message("title.preview"))
c.getDomain() == null && getDomain() != null
expected == char.class || expected == Character.class
XContentType.SMILE.mediaType()
KING_BLACK_DRAGON(NpcID.KING_BLACK_DRAGON,9,ChronoUnit.SECONDS,ItemID.PRINCE_BLACK_DRAGON)
mUiHandler.postDelayed(pae,timeout)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
Assert.assertEquals(3,visitor.getConditions().size())
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
List<Data>
postAgg.getName().equalsIgnoreCase(metricName)
super.getEqProvider(path)
assertEquals(4,ti.nrOfInvocations)
cs == null || cs.length() == 0
i != null && locations != null && i.routePointOffset < locations.size()
id=19907
anchorView.getApplicationWindowToken()
Integer.parseInt(stackIdStr)
Character.toUpperCase(ch)
getLocalPort()
timeNanos >= DateTimeUtils.NANOS_PER_DAY
mapperContextRootRedirectEnabled=true
new String(bytes,0,i,UTF_8)
this.convertLocalToSceneCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
public Builder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } 
TelephonyManager.getDefault().getCurrentPhoneType()
id >= holdingColor.length
page < 0
c.getOpenCount()
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
taken > 150
MathUtils.PI * (this.width * this.height) / 4
renderNotebookv2(sourceDoc,input.getFormat(),null)
getLogger().warn("Unknown classloader [CCE]: " + e.getMessage())
rhs.getScore()
public MTThemes selectedTheme=MTThemes.OCEANIC; 
val > mMaxValue || result.length() > String.valueOf(mMaxValue).length()
LOG.debug("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
initialCapacity > 1 << 30
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
@Nullable JComponent label
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
selenium.isElementPresent("link=Control Panel")
drawer.addDrawerListener(toggle)
instance2.getLifecycleService().shutdown()
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
um.getUsers(true)
lp.resolveLayoutDirection(layoutDirection)
platformVersion < M
absEdge.getTarget(view.getViewId())
minLearningRate=0.0001
subModule.update(persistencePackage)
new IllegalArgumentException("Could not parse '" + input + "'",e)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),null,ScaleType.CENTER_CROP)
singleParameterInfo
Proxy.getInvocationHandler(other).getClass().getName()
selenium.isElementPresent("link=Control Panel")
s.cancel()
new IllegalArgumentException("a refresh request cannot be sent to an older version")
/**   * Returns an immutable  {@link Message} based on the fields that set in this builder.   */ public abstract M build(); 
state.value == rotationLocked && state.contentDescription != null
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",false,"Stop DBeaver running instance")
SHUTDOWN_VIBRATE_MS > 0 && context != null
rightTuple.setStagePrevious(last)
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
preambleLength=14
logger.warn("{}",builder)
nextValue <= 0xFC
delaySoFar >= mReEnableDelayMillis
bssid == null || !BSSID_PATTERN.matcher(bssid).matches()
_buildTemplateWithGradle("service","service-dependency-management","--service","com.liferay.portal.kernel.events.LifecycleAction","--dependency-management-enabled")
performDexOpt(packageName,instructionSet,false)
openFileDescriptor == null || !openFileDescriptor.getFile().isValid()
d != null
from > to
createFromResourceStream(null,null,is,srcName,null)
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
{1,0,0,0,0,0,0,0,0,0}
mCryptConnector.execute("cryptfs","deleteuserkey",userHandle)
MigrationManager.instance.notifyDropUserType(ut)
assertMockEndpointsSatisfied()
formatTimeMs(fullWifiLockOnTime / 1000)
serializer.serializeInsert(metadata,entity,columns,values,subQuery)
atan(arr,Nd4j.copyOnOps)
getMeasuredWidth()
synchronized (shardLocks) {   ImmutableSet.Builder<ShardId> builder=ImmutableSet.builder();   return builder.addAll(shardLocks.keySet()).build(); } 
new MediaController(mContext,token)
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
scrollWebElementIntoView(webElement)
NeoStore.setRecord(pageCache,neoStore,NeoStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,LOG_HEADER_SIZE)
lowers != null
@RunWith(MockitoJUnit45Runner.class) public class JUnit45ExampleTest extends ExampleTestCase { } 
from > to
xtw.writeCData(customProperty.getSimpleValue())
super.dispatchTouchEvent(cancel)
objectColumnCache.values()
lock.isHeldByCurrentThread()
procs.getInt("NULLABLE")
new LinkedHashMap()
doTestNoDocValues(type)
results.expectedMessageCount(3)
driver.findElementByPartialLinkText("Rickrolling")
mappers.mapper().searchQuoteAnalyzer()
DEFAULT_WIDTH=0x00010000
EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)
CompositeType.isStaticName(c.name())
selenium.isElementPresent("link=Control Panel")
format == DecodeFormat.ALWAYS_ARGB_8888 || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
isFastScrollAlwaysVisible()
out.writeInt(sampleCount)
Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
Collection<FunctionDesc>
NumberFormatException expected
_typeSettingsProperties.toSortedString()
DfsSearchResult.subOne(in.readVLong())
private Integer _errorCode=null; 
DISPLAY_TASKS_PORTRAIT=7
(!mIsExpanding || mHintAnimationRunning) && !mQsExpanded && mStatusBar.getBarState() != StatusBarState.SHADE && !mDozing
aeron.addExclusivePublication(controlRequestChannel,controlRequestStreamId)
sessionToken == null || !sessionToken.equals(stateParam)
mConnectionById.containsKey(callId)
Cheese.class
isDoubleCategory(typeRe)
Validator.isNotNull(value) && value.equalsIgnoreCase("assetCategories") && name.startsWith(prefix)
id=10854
config instanceof UnknownRunConfiguration
entry.notification.cloneLight()
LayoutLocalServiceUtil.addLayout(group.getCreatorUserId(),group.getGroupId(),privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,name,StringPool.BLANK,StringPool.BLANK,LayoutConstants.TYPE_PORTLET,false,friendlyURL,serviceContext)
_typeSettingsProperties.toString()
return true; 
isFocused()
@UriPath
worker.setNoData(nod != null ? RangeFactory.create(nod,nod) : null)
_connector.getResponse("XXXXXXXXXXXX\n\n")
!isTooLarge(vFile,contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)
new CountDownLatch(2)
i <= depth[depthIndex]
canPerformRequestOverConnection(mParentAccessibilityViewId)
user.getWorld().getFullTime()
ix > ixz
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Assert.assertNotNull(request.getContentType())
ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
DLFileShortcutLocalServiceUtil.getDLFileShortcut(primaryKey)
locationRequest.setFastestInterval(fastestUpdateInterval)
mBottomRightStrip=drawable
config.getClass().getName()
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
sourceScope.getGlobalSearchScope()
displayContent.getDockedStackVisibleForUserLocked()
JobQueueUtils.getFeedbackQueueName(jobClientNodeGroup)
editedGroup != null && editedGroup.getClass() == KeywordGroup.class
DBUtils.getDefaultContext(object,false)
new LayerView(this,0x0f0000ff)
product.encode()
endElement == null || !endElement.isValid()
m.getProgress()
Long.parseLong(args[2])
change.isMoved()
Throwable e
getSettings()
dist == 0 || dist > p.dist
mv.visitVarInsn(ALOAD,resultIdx)
setValue(object,value.intValue())
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
loaded.getLoaded().getDeclaredConstructor()
Measures.nDCG(results,test)
assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(13,containsApplicationLog)
mNavigationBarView.getPaddingLeft()
v.makeCopy(null)
selenium.isElementPresent("link=Control Panel")
new Scanner(f,"UTF-8")
getWrapper(rightRedirect)
converterRegistry.addConverter(new EnumToStringConverter((ConversionService)converterRegistry))
@Override public final DivideByOnConditionStep and(String sql){   return and(condition(sql)); } 
pixel >>> 8
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
IssueTrackingBlocksRecognizer rec
any()
dh != mBackgroundHeight
match.getJSONArray("types")
newWidth - BORDER_THICKNESS
private void showMatch(final Server server,final CommandSender sender,final String match) throws PlayerNotFoundException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(match);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     showExp(sender,player);   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
!stopped.get()
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Thread.sleep(1000)
order.getSide().equalsIgnoreCase("buy")
allDeleted || cacheFileList.length == 0
e.toString()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
mCanSeekBack=mCanSeekForward=true
fileInfo.getUfsPath()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
d < 0.025f
this.thrown.expect(IllegalStateException.class)
assertPlanEquals(expectedPlan,actualPlan)
payload.put(getClientVersion())
(target.getModifiers() & Modifier.STATIC) == 0
src[i]
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new WorldPoint(2975,3811,0)
FLYING(0f,4f,true,false,false,3f,true)
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName)
configuration.getSuperTypeAnnotation()
expression == null || primaryIndexes.size() > indexes.size()
row == null || row.size() == 0
logger.fine("reconnect attempt error")
/**   * @return a String for the summary of the preference.  */ public CharSequence getSummary(){   return null; } 
keychainLock.lock()
OptionalIdentifiedDefinition<RoutesDefinition>
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(10)
Simple.forClass(MutableList.class)
m.getDeclaringClass()
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
new QueryException(e,"Error in building dependency graph")
type != OrderRootType.CLASSES
RestartStrategies.fixedDelayRestart(1,0)
getListView() != null && getListView().getFirstVisiblePosition() > 0
mMountTable.resolve(getPath(dir)).toString()
tracesDir.mkdirs()
genericTypes.length * 2 + 1
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
e.toString()
limitOrder.getType() == OrderType.BID || limitOrder.getType() == OrderType.EXIT_ASK
DEFAULT_DATA_SIZE_PER_COLUMN=50
mMccStr == null
entityMetadata.getVersionProperty()
mAuthorities.valueAt(i)
child.resetRtlProperties()
context.castMode(NEVER).formatSeparator().keyword("limit").sql(' ').visit(offsetOrZero).sql(", ").visit(numberOfRowsOrMax)
status().isFound()
paramType.getSimpleName()
telephony.isOffhook(getOpPackageName())
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.9)
GL.glDrawArrays(mode,first,count)
Throwable e
assertPlanEquals(expectedPlan,actualPlan)
Throwable e
isSubDelimiter(c)
defaultFloat=UNSET
width <= 0
protected Jar addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask,File inputFile,Task compileTask,final Task generateTask){   Project project=buildWSDLTask.getProject();   String taskName=GradleUtil.getTaskName(buildWSDLTask.getName(),inputFile);   Jar jar=GradleUtil.addTask(project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (buildWSDLTask.isIncludeSource()) {     jar.into("OSGI-OPT/src",new Closure<Void>(project){       @SuppressWarnings("unused") public void doCall(      CopySpec copySpec){         copySpec.from(generateTask.getOutputs());       }     } );   }   jar.setDestinationDir(buildWSDLTask.getDestinationDir());   String wsdlName=FileUtil.stripExtension(inputFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
rootView != null
mTextColorLink.getColorForState(ds.drawableState,0)
instruction.getRegister()
tests.add(0,clazz.getGenericsTypes()[0].getType())
sourceIterator.batch()
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
Executors.newCachedThreadPool()
BlockingManager.getInstance().getCachedBlockedContacts(account)
VtexApis.REPLIES_URL + topicId
selenium.isElementPresent("link=Control Panel")
log.warn("Query failed to parse : '{}'",executionInput.getQuery())
serializer.serializeInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).verifyComplete()
new IgniteCheckedException("Failed to perform cache operation (cache topology is not valid): " + U.maskName(cacheCtx.name()),err)
connector.apply(context)
selenium.isElementPresent("link=Control Panel")
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
LOG.warn(e)
Character.isLetterOrDigit(c)
clist.clearUserDefinedDisplayName(metaContact)
noteReleaseWifiLock(wifiLock)
new Paint(Paint.ANTI_ALIAS_FLAG)
ISOChronology.getInstanceUTC()
FBUtilities.getBroadcastAddress()
selenium.isElementPresent("link=Control Panel")
mParent == null
endpoints.add(entry.getValue())
z / vz
idGenerator.generateUuid()
this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)
new Paint()
@Bean @Primary RepositoryImpl repository(){   return new RepositoryImpl(systemProperties(),keyValueDataSource(),keyValueDataSource(),this); } 
myNameField.getFocusableComponent()
mMccStr == null
priorityWayEncoder.getBits()
FunctionTypesKt.isExtensionFunctionType(upperBoundType)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_velocityEngine,_templateContextHelper,false)
messageId.getEntryLocator()
rootView.getId()
Lists.newCopyOnWriteArrayList()
context.getString(R.string.notification_new_messages_title,newMessages)
!chunk.isOpCode() && (chunk.data != null) && chunk.data.length >= MINIMUM_BLOOM_DATA_LENGTH
mod.getJvmArgs()
logger.debug("mmap address is: " + Pointer.nativeValue(addr))
!components.isInstalled(service,"CLIENT")
setFloatingLabelInternal(mode)
new HashCollisionNode(edit,hash,count,array)
(BeanDefinitionRegistry)beanFactory
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
(SubscribeForm)actionForm
dest.writeInt(mTxPower)
appView.canGoBack()
new String(_byteStore.get(dictId),UTF_8)
node.getLifecycleService().shutdown()
manifest.getRequirePlugins()
mDataAuthorities == null || data == null
BaseNoGui.getTargetBoard()
selenium.isElementPresent("link=Control Panel")
/**   * Ignore binary payloads by default  */ boolean logMultipart() default true; 
disjPred.isAlwaysTrue()
ThreadFactoryBuilder.create().withName(THREAD_NAME)
getString(R.string.agps_data_last_downloaded,"null")
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).subscriberContext(withUser)
selenium.isElementPresent("link=Control Panel")
mConnector.execute("resolver","clearifaceforuidrange",iface,uid_start,uid_end)
channel.getRTCPPort()
myRole2 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
getViewAtRelativeIndex(1)
syncOperation.delay <= 0
sendObjectInfoResult.getCompressedSizeLong()
@Override
Validator.isNull(PropsValues.MOBILE_DEVICE_TYPE)
String.format(formatStr,container.getContainerID(),openStatus,data.getDBPath(),data.getContainerPath(),"",datanodeDetails.getHostName(),datanodeDetails.getHostName())
LOG.warn("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
@Autowired GraphTraversalService graphTraversalService; 
props.getArray(PropsKeys.TRANSACTIONAL_CACHE_NAMES)
id=10853
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
sendMessageAtFrontOfQueue(CMD_STOP_AP)
responseFilters != null
loaded.getLoaded().getDeclaredConstructor()
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
JblasBackend.class
new Rect(left,top,right,bottom)
service.getDomain().id()
selenium.isElementPresent("link=Control Panel")
getDelegate().getDefaultCipherSuites()
rows.get(lastIndex).key.key.equals(finishKeyBytes)
CacheData<RealmObject>
return _this; 
loadModel(file)
NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,true)
PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME,sql,"DEFAULT",results,columnMetas,sqlException)
@Override
caller.isSystem()
Log.err("Caught exception: " + error.toString())
U.error(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
log.logError(toString(),"File [" + realFilename + "] doesn't exist!")
sentence.length() <= 30
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
name.length() - 1
createTestBlockCapsule(1533529947843L + 3000L * i,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
MESSAGES.failToReplicateAttribute(name,value.getClass().getCanonicalName())
getPlayerPosition().y
presentation.updateValueView()
startGridsMultiThreaded(NODES_CNT)
object2StaticBuffer(expectedValue)
-473630329
dialect.supportsQuotedMixedCase() || dialect.supportsUnquotedMixedCase()
Double.parseDouble(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
entry.getValue()
(Number)version
author.getLastOnly()
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_folder_name"))
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
super.dispatchTouchEvent(cancel)
assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
GroupServiceUtil.addGroup(name,description,type,StringPool.BLANK,true,true,serviceContext)
new TextField<String>(textFieldId,String.class)
keyboardFocusManager.removePropertyChangeListener("focusOwner",focusListener)
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
((VarcharType)type).getLengthSafe()
selenium.isElementPresent("link=Control Panel")
Throwable e
assertEquals(56,StringUtil.countMatches(drl,"rule \""))
final StringBuilder buf=new StringBuilder(); 
mockBigtableSource.getRanges()
selenium.isElementPresent("link=Control Panel")
mSyncStatus.valueAt(i)
_connector.getResponse("GET /foo?data=102400 HTTP/1.0\n\n")
getZoomLevel(false)
Exception e
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
processLink(curi,codebase,context)
accountsList.get(j)
message.getPresence().getResourcepart()
hex.toUpperCase()
_log.warn(ioe,ioe)
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
writeString(writer,fieldName,String.valueOf(reader.getShort()))
compound.getTag("tile_pos")
public Builder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
selenium.isElementPresent("link=Control Panel")
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
FieldsWriter<S,?>
loaded.getLoaded().getDeclaredConstructor()
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus pauseState(){   return pause; } 
mQsDensityContainer.getX()
view.getFloatZoom()
checkCall(receiver)
Assert.assertEquals(new InetSocketAddress(defaultHostname,20000),masterAddress)
jdk == null || !(jdk.getSdkType() instanceof IdeaJdk)
returnCursor != null && returnCursor.getCount() > 0
@Nullable private final P params; 
return limit; 
timeFormatter.format(value)
StatBuckets.prettyUptimeStr(secs)
tw.close()
onDetachedFromWindow()
heightMode != MeasureSpec.EXACTLY && heightMode != MeasureSpec.AT_MOST
sendMessageAtFrontOfQueue(CMD_STOP_AP)
new InputStreamBody(content.getStream(),content.getContentType(),content.getName())
LOG.warn("Process %s exited with error code %d",buckPyProcess,exitCode)
mapper.getTypeFactory().constructType(AuthConfig.class)
readLock.lock()
spellParser.isParsing()
LOGGER.warn("Could not execute exportToClipboard",ex)
Log.warn("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
sections.get(section)
pongReceived()
new Dimension(500,400)
columnSums.sum(1)
m.size()
c <= 'Z'
options.getGroupByInstances()
Exception ex
winAnimator.prepareSurfaceLocked(recoveringMemory)
new HdfsFileStatus(0,false,1,1024,false,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,new FileEncryptionInfo(suite,version,new byte[suite.getAlgorithmBlockSize()],new byte[suite.getAlgorithmBlockSize()],"fakeKey","fakeVersion"),(byte)0)
this.convertLocalToSceneCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
new StandardProvenanceEventRecord.Builder().setEventType(ProvenanceEventType.REPLAY).addChildUuid(newFlowFileUUID).addParentUuid(parentUUID).setFlowFileUUID(parentUUID).setAttributes(Collections.<String,String>emptyMap(),flowFileRecord.getAttributes()).setCurrentContentClaim(event.getContentClaimContainer(),event.getContentClaimSection(),event.getContentClaimIdentifier(),event.getContentClaimOffset(),event.getFileSize())
mHotspotBounds.set(left,top,right,bottom)
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)
Throwable e
equalTo(4)
mPowerManager.isInteractive()
parts.length < 2
TelephonyManager.getDefault().getCurrentPhoneType()
node1.isEquivalentTo(node1)
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
writeRepeatedBoolImpl(id,val)
containsString("cookieManagerShared")
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
i % dictionarySize
new TreeItem(databasesItem,SWT.NONE)
assertEquals(3,loader.getPlugins().size())
rs.isLast()
mHost.onShouldSaveFragmentState(f)
surfaceHolder.setSizeFromLayout()
LOGGER.warn("Could not execute sendAsEmail",ex)
mWM.isKeyguardLocked()
statement.execute()
notifyAll()
dstCursor == null
Object transformationResult=JsonPath.read(source,JSonPathExpression); 
searcher.get().getRawReader()
Throwable err
playerList.remove(configGroup)
m.getDeclaringClass()
new BalloonImpl(new JLabel("FUCK"),Color.black,MessageType.ERROR.getPopupBackground(),true,true,true,true,true,0,true,null,false,500,25,0,0,false,"This is the title",new Insets(2,2,2,2),true,false,Layer.normal)
-13
LOGGER.debug("Application registered itself as {}",response.getBody())
dlFileShortcutLocalService.deleteFileShortcut(fileShortcutId)
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
mSelector.setHotspot(x,y)
request.getContentLengthLong()
intervalFraction * (nextValue - prevValue)
new IntPreference("map_transparency",255,false)
Bytes.toString(qualifierName,start,end)
e.toString()
dockedBounds.right + dockDividerWidth
popupWindow.setContentWidth(menuWidth)
mButton != null && !hasCustomClickListener
TYPE_ATSC_M_H=0x00030300
!PlatformUtils.isIntelliJ()
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
waitForDecommission(CCMBridge.IP_PREFIX + '5',c.cluster,60)
addr.intValueSafe()
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
inner.innerSetException((Throwable)result,true)
mNwService.getInterfaceConfig(mTetherInterfaceName)
mCollapseOffset > 0
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
new AccountCapsule(toAddress,AccountType.Normal)
getServiceForUserLocked(userId)
temp.reAddLeft()
log.error("Problem in JSR223 script ",e)
mActiveStreamType == -1 || streamType != mActiveStreamType
IS_USED_QUALIFIED_OUTSIDE_PACKAGE_MASK=0x800
Long.parseLong(value)
List<ArtifactRepository>
greaterThanOrEqualTo(0L)
localPort == 0 && platform != null
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
E edge
logger.warn("{} invalid: {}",getEntityClass().getSimpleName(),msg)
new HashMap(1)
user.getSystemId() == null || user.getSystemId().equals("")
stack.peek()
ContainerUtil.newLinkedHashSet(actions)
getPlayerPosition().y
new Dialog(this)
ddmStructureLocalService.deleteStructure(ddmStructure.getStructureId())
SERIAL_VERSION_UID=510L
beanFactory.getBeanNamesForType(IntegrationMBeanExporter.class,false,false)
Bytes.toBytes(tableNameOrRegionName)
terminal.receivedSendToTerminal(event.getInputText())
noteTmp.isLocked()
Map<String,Object>
(!(getParent() instanceof ViewRootImpl)) && (mPrivateFlags & IS_ROOT_NAMESPACE) != 0
(PropertyName)o
Thread.sleep(1000)
type == null || type == JAXBElement.class
context.getMainLooper()
tupleInfo != null && tupleInfo.getMessageId() != null
IOException e
outLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
collection(StreamImpl.class).update(match,modify,false,true)
application.getBaseContext()
calendar.set(Calendar.DAY_OF_WEEK,4)
equalTo(5)
new TextPaint()
CodeStyle.getProjectOrDefaultSettings(project)
this.uncollectedPointCreator
new RuntimeException()
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
selenium.isElementPresent("link=Control Panel")
writer.flush()
indexLock.writeLock()
node.actor.getY() <= high && !selectedNodes.contains(node,true)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
mMenu.getNonActionItems()
selenium.click("//li[4]/span/a/span")
entity.addComponent(delayedComponent)
computeRealHorizontalScrollRange()
startupManager.runWhenProjectIsInitialized(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
report(n,MISPLACED_ANNOTATION,"@abstract","only functions or methods can be abstract")
group.getGroupId()
Throwable e
VERSION=6
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Cool this annotation!")
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
Integer.parseInt(taskIdStr)
mResolver.start()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
out.writeInt(sampleCount)
Float.parseFloat(value.toString())
new StackState(1f,255)
!value.iterator().hasNext()
field.getTypeDesc()
mCameraUser.submitRequest(request,false)
actualTarget != null && SwingUtilities.getWindowAncestor(actualTarget) == null
changes.serializeToJSON(null)
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
mPrivateInput == null || mReplyHeader.responseCode == -1
volume.getMtpReserveSpace() * 1024L * 1024L
insertByIndex(severityGroupNode,root)
!readThrough
new TwoDimTable("Confusion Matrix (Act/Pred)",rowHeader,colHeader,colType,colFormat)
mQsDensityContainer.getLayoutParams()
type.getDeclaredConstructor()
Long.parseLong(args[2])
Integer.toHexString(flags)
Formatter.getInstance().getNoneIndent()
P params
selenium.isElementPresent("link=Control Panel")
!SettingsUtils.hasJobTransportPoolingKey(settings)
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
new ForAdvice.ForMethodEnter(instrumentedMethod,adviceMethod,exitType)
(PrivateDataProvider)privateDataProviders.get(key)
Assert.assertFalse(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize() || inventory.getStackInSlot(i).stackSize >= inventory.getInventoryStackLimit()
verifyPosition(decoder,binary("02080000251848470afa010262daa690013aa4046da83745f8812560df010001126a"))
AppLog.d(T.EDITOR,message)
tracesDir.mkdirs()
ENABLE_LAUNCH_DESK_DOCK_APP=true
this.optimizedDispatch || isSlave()
bulkInsertableMap.containsKey(persistentObjectClass)
ANXV2.getWalletHistory(ANXExchange.getExchangeSpecification().getApiKey(),signatureCreator,new CurrentTimeNonceFactory(),"BTC",null,null,null)
selenium.isElementPresent("link=Control Panel")
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
contentWritten == 0
Boolean.parseBoolean(BytesUtil.readUTFString(buffer))
new Volume.MemoryVol(true,0)
concatRef.isEightBits=true
Log.d(TAG,status)
oldStatus != null && oldStatus == status
getProblems(domElement,includeXmlProblems)
node1.isEquivalentToTyped(node2)
map != null && isSortedByDistance
REQUIREPASS
stoppedCaches.values()
assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
runtime().config.useCompressedClassPointers
mAttributes.getAllFlags()
clearIndex()
mAms.mWaitForNetworkTimeoutMs=2000
!"true".equalsIgnoreCase(value)
buf.writeShort(0)
UnsatisfiedLinkError ex
absolutePath.contains("/test/") || fileName.endsWith("DBUpgrader.java") || fileName.endsWith("Test.java")|| fileName.endsWith("UpgradeTableListener.java")|| content.contains("Callable<Void>")
previousPhaseName != null
Long.parseLong(deadline)
generateFluentSetters()
qualifiedName(node)
classMapper.realClass(reader.getNodeName())
result.getErrors()
Math.min(desiredTileWidth,desiredTileHeight)
return false; 
testClass.getSimpleName()
log.debug("Double activation of SQL context")
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
Map<String,Object>
/**   * @author Vitaliy.Bibaev  */ public interface ProducerStreamCall extends StreamCall, TypeAfterAware { } 
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.BUILDING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNode)
ft.commitAllowingStateLoss()
mConnectionById.containsKey(callId)
public Long getMeasureId(){   return measureId; } 
/**   * Needed for statistics.   */ private final LongAdder8 canceledJobsCnt=new LongAdder8(); 
endpoint.getCurrentThreadsBusy() >= limit
new RoutingControlAction(this,newPath,true,callback)
new EnterSelectionDialog(shell,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).onErrorResume(exceptionHandler)
Slog.e(TAG,message,th)
fragmentEntryPersistence.countByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
Math.min(titleRight,subtitleRight)
result.expectedMinimumMessageCount(3)
isNavBarVirtKey && !down && !canceled
mFlexItemInEdit.setAlignSelf(AlignItems.STRETCH)
new IllegalArgumentException("the text is null")
c == Short.class || c == Short.TYPE
prefsWriter.apply()
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
mService.reconnect()
sharedElements.get(localName)
field.getDeclaringClass()
groupsById.remove(cachedGroupId)
featureType.getQualifiedName()
/**   * Hook some methods which we want to create an easier interface for developers.  */ private static void initXbridgeZygote() throws Throwable {   final HashSet<String> loadedPackagesInProcess=new HashSet<String>(1);   findAndHookMethod(ActivityThread.class,"handleBindApplication","android.app.ActivityThread.AppBindData",new XC_MethodHook(){     protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ActivityThread activityThread=(ActivityThread)param.thisObject;       ApplicationInfo appInfo=(ApplicationInfo)getObjectField(param.args[0],"appInfo");       ComponentName instrumentationName=(ComponentName)getObjectField(param.args[0],"instrumentationName");       if (instrumentationName != null) {         XposedBridge.log("Instrumentation detected, disabling framework for " + appInfo.packageName);         disableHooks=true;         return;       }       CompatibilityInfo compatInfo=(CompatibilityInfo)getObjectField(param.args[0],"compatInfo");       if (appInfo.sourceDir == null)       return;       setObjectField(activityThread,"mBoundApplication",param.args[0]);       loadedPackagesInProcess.add(appInfo.packageName);       LoadedApk loadedApk=activityThread.getPackageInfoNoCheck(appInfo,compatInfo);       XResources.setPackageNameForResDir(appInfo.packageName,loadedApk.getResDir());       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=appInfo.packageName;       lpparam.processName=(String)getObjectField(param.args[0],"processName");       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=appInfo;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);       if (appInfo.packageName.equals(INSTALLER_PACKAGE_NAME))       hookXposedInstaller(lpparam.classLoader);     }   } );   findAndHookMethod("com.android.server.ServerThread",null,Build.VERSION.SDK_INT < 19 ? "run" : "initAndLoop",new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       loadedPackagesInProcess.add("android");       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName="android";       lpparam.processName="android";       lpparam.classLoader=BOOTCLASSLOADER;       lpparam.appInfo=null;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);     }   } );   hookAllConstructors(LoadedApk.class,new XC_MethodHook(){     @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {       LoadedApk loadedApk=(LoadedApk)param.thisObject;       String packageName=loadedApk.getPackageName();       XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());       if (packageName.equals("android") || !loadedPackagesInProcess.add(packageName))       return;       if ((Boolean)getBooleanField(loadedApk,"mIncludeCode") == false)       return;       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=packageName;       lpparam.processName=AndroidAppHelper.currentProcessName();       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=loadedApk.getApplicationInfo();       lpparam.isFirstApplication=false;       XC_LoadPackage.callAll(lpparam);     }   } );   findAndHookMethod("android.app.ApplicationPackageManager",null,"getResourcesForApplication",ApplicationInfo.class,new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ApplicationInfo app=(ApplicationInfo)param.args[0];       XResources.setPackageNameForResDir(app.packageName,app.uid == Process.myUid() ? app.sourceDir : app.publicSourceDir);     }   } );   if (!new File(BASE_DIR + "conf/disable_resources").exists()) {     try {       hookResources();     }  catch (    Exception e) {       log("Errors during resources initialization");       logResourcesDebugInfo();       throw e;     }   }  else {     disableResources=true;   } } 
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
configurations.maybeCreate(Dependency.DEFAULT_CONFIGURATION)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
dest.writeInt(mSubId)
jobStateClone.clearExceptions()
value.toLowerCase().startsWith(constraintLowerCase)
System.setProperty(COPROCESSOR_LOCAL_JAR,path)
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
pathWrapper.setWaypoints(points)
targetDatabase.setObjectQuotingStrategy(originalStrategy)
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask,null)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
loaded.getDeclaredConstructor()
answer == null || comparator.compare(value,answer) > 0
USE_DISPLAY_LIST_PROPERTIES=false
ctx.writeAndFlush("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
reactContext.runOnNativeModulesQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
mock.expectedMinimumMessageCount(2)
new TextField<String>(BrokerConfiguration.BROKER_URL_KEY,String.class)
mGnssCallback != null
isDelegateLastClassLoaderName(classloaderName)
fLines.addElement(st.nextToken())
IOException ex
m.getModifiers()
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",false,false,false)
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
Slog.w(TAG,"Session failed to close due to remote exception",e)
StepVerifier.create(Flux.just(1).then()).verifyComplete()
mDragState == STATE_IDLE
topLevelBuildData.getMasterHostname()
childLeftTuple.reAddLeft()
ufsPath.toString()
DEBUG=false
selenium.isElementPresent("link=Control Panel")
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw_)
new SpinnerWidget(RuntimeEnvironment.application,formEntryPrompt,false)
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,true); 
mFrameTransformation.printShortString(pw)
Strings.toString(this,true)
e.printStackTrace(System.out)
origin.realComponent().doubleValue() < other
numDataDims == 1
logger.warn("Couldn't write to file: " + filename)
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; 
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
chatButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
reply.getJMSCorrelationID()
level.toUpperCase(Locale.ROOT)
Math.max(o.outWidth / targetWidth,o.outHeight / targetHeight)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
webRequest.getNativeResponse(HttpServletResponse.class)
logger.debug("InterruptedException during playing a notification sound")
appearance.getFloat(attr,0)
mUiHandler.postDelayed(pae,timeout)
Thread.sleep(1)
slow=false
Matchers.<Map.Entry<String,String>>containsInAnyOrder(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
mMenuView.setBackground(null)
Throwable e
Cheese.class
public JobMeta getManagedObject(){   return jobMeta; } 
mService.setAppPolicy(UID_A,POLICY_NONE)
!trimmedPreviousLine.startsWith(").") && (trimmedLine.length() + previousLineLength) < getMaxLineLength()
!mKey.equals(other.mKey)
ModalityState.defaultModalityState()
CryptoUtils.loadCertificate(is,new char[]{'p','a','s','s','w','o','r','d'},"morpit",null)
RedisRunner.shutDownDefaultRedisServerInstance()
targetConfig.trimConfigurations()
return type; 
stmt.execute(sqlQuery)
testError("class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }",BASE_CLASS_ERROR)
addOrReplace(feedbackPanel)
file.getFile()
args != null && args.length > 0
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
ll.reverseRecursiveEasy(head)
mHomeStackResizable && adjustedForIme && !mIsInMinimizeInteraction
iconsCache.getIcon(R.drawable.ic_action_keyboard,R.color.coordinate_input_keyboard_icon_color)
ctx.getMapViewTrackingUtilities()
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.service",upgradeProcesses,1,1,false)
answer == null || comparator.compare(value,answer) > 0
ocvmat.convertTo(cvmat,CV_8UC(3),255.0,0.0)
sm.getString("standardSession.setAttribute.ise",getIdInternal())
!TextUtils.isEmpty(text)
file.getAbsolutePath()
Assert.assertEquals(dlFileVersions.toString(),4,dlFileVersions.size())
targetJar.isFile()
synchronized (this) {   classCache.clear(); } 
mService.mDisplayContents.valueAt(i)
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
Config.defaults()
ThrowableFunction<A,V>
min.getX() <= box.max.getX()
dstPath.toString()
useedStorageSize - originStorageUsage
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
new ContinueProcessOperation(commandContext,execution,true)
new MockNode(nodeSettings,Version.CURRENT,Arrays.asList(ShieldPlugin.class,licensePluginClass()))
mappers.mapper().searchQuoteAnalyzer()
verify(instrumentation,times(2)).isRedefineClassesSupported()
new FileSystemWebDavServer(cryptoFileSystem())
value.equals(values[i])
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
args[0].trim().length() < 2
String message
RequestConfig.custom().setConnectTimeout(httpClientConfig.getConnTimeout())
Throwable ex
Watcher<DeploymentConfig>
ONE_MINUTE=1800
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
BATCH_SIZE=100
CollectionResult<Tuple>
mapping.set(j,groupCount + indicatorCount + newAggCallList.size())
startElement != endElement && nextSibling != null
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } )
@Test public void testTakeWithLimits() throws OutOfCapacityException, BrokenBarrierException, InterruptedException {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(ResourceManager.QUERY_WORKER_CONFIG_KEY,40);   conf.setProperty(ResourceManager.QUERY_RUNNER_CONFIG_KEY,10);   conf.setProperty(ResourceLimitPolicy.TABLE_THREADS_SOFT_LIMIT,20);   conf.setProperty(ResourceLimitPolicy.TABLE_THREADS_HARD_LIMIT,80);   PolicyBasedResourceManager rm=new PolicyBasedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   TestSchedulerGroup testGroupOne=groupFactory.groupMap.get(groupOne);   TestSchedulerGroup testGroupTwo=groupFactory.groupMap.get(groupTwo);   testGroupOne.addReservedThreads(rm.getTableThreadsSoftLimit() + 1);   QueueReader reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   testGroupTwo.addReservedThreads(testGroupOne.totalReservedThreads() + 1);   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupOne);   testGroupOne.addReservedThreads(rm.getTableThreadsHardLimit());   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   testGroupTwo.addReservedThreads(rm.getTableThreadsHardLimit());   reader=new QueueReader(queue);   reader.startAndWaitForQueueWakeup();   assertEquals(reader.readQueries.size(),0);   sleepForQueueWakeup(queue);   assertEquals(reader.readQueries.size(),0);   testGroupTwo.releasedReservedThreads(testGroupTwo.totalReservedThreads());   sleepForQueueWakeup(queue);   assertEquals(reader.readQueries.size(),1); } 
javaBeanSerializer.getFieldValues(javaObject,json)
candidate.getSelected().getPublishedAs()
Exception e
sendMessageAtFrontOfQueue(CMD_STOP_AP)
LOG.error("Could not load JDK7 class with a JDK7+ JVM, falling back to no-op implementation.")
new BindFBO(SCENE_OPAQUE_FBO)
CompilerDirectives.inCompilationRoot()
new Fragment(id,"iconFragment",selectLayers)
Long.parseLong(value)
loaded.getLoaded().getDeclaredConstructor()
messenger.requestSmsObsolete(res)
holder.setGone(loadEndViewId,visible)
matcher.end(1)
new FavoriteImageDrawable(a,color,withShadow)
queue.poll(15,TimeUnit.SECONDS)
lookup=Resources.REQUEST_QUEUE
mState.mPivotYRel != relative
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateMessageParam",m.getName(),m.getClass().getName()))
LOG.debug("Consumer subtask {} is trying to discover new partitions ...",getRuntimeContext().getIndexOfThisSubtask())
DummyResource.class
doGetI18String(key,locale)
Slog.w(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
getNetworkPolicies(mContext.getOpPackageName())
@Override public HttpResponseMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
new Exception("data still remaining in inflater",e)
caller.isSystem()
EqualityComparer<TKey>
model.getName()
days(25)
si.id == id && si.taskRemoved == taskRemoved
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
isNavBarVirtKey && !down && !canceled
(SupportingToken)pa
rhs.getScore()
size >= 0
logger.fine(String.format("destroying socket (%s)",this.nsp))
re.iterator()
refreshRotationLockTile()
super.dispatchTouchEvent(cancel)
this.tvShows.removeAll(tvShows)
V_5_0_0_ID=5000099
mView.postOnAnimation(mAnimationStarter)
mConnectionById.containsKey(callId)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
this(true,16,arrayType); 
Number value=iterator.next(); 
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
!context().getSettingsModule().isNotificationsEnabled()
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout,minConnectionEventLen,maxConnectionEventLen)
internedAnnotationSetRefItems.get(annotationSetRefKey)
p.containsKey("gt06.timezone")
hasColumn("KBArticle","kbTemplateId")
matcher.group(12)
from > to
"DROP INDEX " + PATTERN_ITEM_INDEX
ExternalSystemModulePropertyManager.getInstance(module).setExternalModuleType(GradleConstants.GRADLE_SOURCE_SET_MODULE_TYPE_KEY)
getGlobalOptions().setManualOrder(enabled)
connectionProperties.containsKey("oracle.password")
i >= speedBumpIndex
body.addAfter(target,afterAnchor)
PsiMember element
getSpringStatus()
intervalFraction * (nextValue - prevValue)
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractAclCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
selector.select(10)
mNaturallyPortrait ? "true" : "false"
lineCount == 5
selenium.isElementPresent("link=Control Panel")
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
keychainLock.lock()
intervalFraction * (nextValue - prevValue)
mChildrenExpanded ? mDividerHeight : mChildPadding
deployments.get(deploymentName)
proxyRequest.getRegion()
Thread.sleep(2500)
executableTypes.size() == 1 && !target.getType().hasImplicitSourceTypes()
ep.getLoaderForClass()
schemeSpecificParts != null && data != null
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title",ui.getDisplayName())
externalMediaDir.getPath()
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
Slog.i(TAG,"Failed to build intent for " + packageName)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
data == null || mData != data
new IllegalStateException("Advertising can't be both connectable and anonymous")
loaded.getLoaded().getDeclaredConstructor()
verifyAttributes(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
TelephonyManager.getDefault().getCurrentPhoneType()
lp.resolveLayoutDirection(layoutDirection)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
assertEquals(9,definitions.size() - hostAlertCount)
log.warn(exception.getMessage())
(javaClass.getAccessFlags() & org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) != 0
mGnssCallback != null
hasRows(oldTableName)
DATABASE_TYPE_MSSQL.equals(databaseType)
this(texName,false); 
Math.max(1000L,connectionTimeout)
this.httpHandler.handle(request,response).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
pRegexMatch != null && regexReplace != null
src.onTouchEvent(e)
conf.getRestBaseURL()
c.setLong("hbase.hregion.memstore.flush.size",25000)
refreshRotationLockTile()
remaining == 0
gavin.getStudentNumber()
service.getName()
LeveledManifest.class
AttributeUtils.getDefault().getMax(column,valuesArray)
mLargePaint.setColor(0x7f00ff00)
Ints.min(completedSplits.get(),startedSplits.get(),splits)
1
!task.isFreeformTask() || includeFreeformTasks
TopAndRecentlyPlayedTracksLoader.getTopTracks(getApplicationContext())
totalNbSuggestions == MAX_NUMBER_SUGGESTIONS
getDelegate().getDefaultCipherSuites()
mGnssCallback != null
schemeSpecificParts != null && data != null
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new PackageConfig("namespacePackage")
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
rowSelected >= 0 && rowSelected < table.getRowCount() - 1
Thread.sleep(1000)
bundle.containsKey("ongoing") || bundle.getBoolean("ongoing")
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
!mIsOnInnerCircle && hour != 0
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate","TABLE_SCHEMA=hive_test.default; TABLE_NAME=partition_pruning_test")
logger.error("Caught exception in file upload",e)
mFinishing && mSupportHardware && mHwCenterX != null
Slog.d(TAG,"showSaveLocked(): no mStructure")
XMLHandler.getTagValue(jobnode,"shared_objects_file")
ps.setString(1,structureId)
StringEscapeUtils.escapeXml10(atts.getValue(i))
XmppStringUtils.parseBareJid(user)
ImmutableList.copyOf(listeners)
(uptime - days) * 24
@Override public T getAsset(){   return null; } 
UnsafeUtils.set8(_mem,8,bias)
selenium.isElementPresent("link=Control Panel")
Exception ex
resources == null || resources.isEmpty()
myBuilder.restoreEolsState()
ATLAS_MAP_ENTRY_FIELD_COUNT=3
addWarn(msg,e)
GitBranch.list(myProject,myDir,true,true,branches,null)
downloaderProvider.downloadPart(fileUrl,fileOffset,blockSize,fileReference.getFileSize(),new FileDownloadCallback(){   @Override public void onDownloaded(  final byte[] data){     self().send(new Runnable(){       @Override public void run(){         downloaded++;         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " completed");         }         if (!outputFile.write(fileOffset,data,0,data.length)) {           reportError();           return;         }         currentDownloads--;         reportProgress(downloaded / (float)blocksCount);         checkQueue();       }     } );   }   @Override public void onDownloadFailure(){     self().send(new Runnable(){       @Override public void run(){         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " failure");         }         reportError();       }     } );   } } )
tx != null
mDelegate.getView(position,wv.mItem,parent)
new Color(mParams.getCustomBackgroundColor(),true)
mPanProfile.isProfileReady()
StringUtil.join(modulesWithKtFiles,new Function<Module,String>(){   @Override public String fun(  Module module){     return module.getName();   } } ,", ")
-3
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
parsedResult.getType()
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
xAmount != 0
superClass == Object.class || superClass == null
/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static ImportControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException("syntax error in url " + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to find " + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } 
Thread.sleep(1000)
new Button("cancel"){   public void onSubmit(){     doReturn();   } } 
pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)
connector.accept(new ConnectEventAction(action),true)
createFromResourceStream(res,value,is,srcName,null)
headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")
"Center loss is " + intraClassScore
new AngularUiRouterEdge(templateNode,node,"provides")
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true)
@Deprecated
i.getLongExtra(Constants.INTENT_KEY,0)
i < MAX_AUDIO_PORTS
norms=true
new Semaphore(0)
tests.add(0,objectExpressionType.getGenericsTypes()[0].getType())
!hasCollapsibleActionView()
getJSDocType(operation)
material.getMaxDurability() < 1
partition.getParameters()
LOGGER.warn("Could not find DropTargetDropEvent class",e)
supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS)
selenium.click("//li[4]/span/a/span")
ATLAS_MAP_ENTRY_FIELD_COUNT=3
List<Exception>
logger.debug("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
type.getDeclaredConstructor()
assertRuntimeProductionSearchScope("m1",getProjectPath() + "/m1/src/main/java",getProjectPath() + "/m2/src/main/java",getRepositoryPath() + "/junit/junit/4.0/junit-4.0.jar")
delegate.open(filename,idType,highIdSupplier,maxId)
SamplingProfiler.newThreadGroupThreadSet(group)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags)
mPositionAnimator.isStarted()
from >= to
new TextPaint()
-3
UNIT_FIELD.getPreferredName()
getLogger().debug("Checking " + model.getId() + " for extensions.")
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
!FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning()
Throwable e
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
DEBUG=false
line.startsWith("fatal") || line.startsWith("error: ") || line.startsWith("Cannot rebase")
getService().hasClipboardText()
SLOPE_PROXIMITY=100
UISettings.getInstance().getShowEditorToolTip()
KtPsiUtil.getEnclosingElementForLocalDeclaration(this,true)
frequencyKhz <= 30000
selenium.isElementPresent("link=Control Panel")
mNotificationsUtilsWrapper.mapJsonToFormattableContent(bodyArray.getJSONObject(i + 1))
logger.info("Plugin class " + pluginClass)
FileUtils.setPermissions(file.getBaseFile().getPath(),0640,SYSTEM_UID,PACKAGE_INFO_GID)
collector.getRangeCounters(range)
Map<String,Object>
builder.build()
pdlMarker.done(PARAMETERS_LIST)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
public static XQueryBuilder xquery(File file,String characterSet) throws IOException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
mode != null && !mode.isEmpty()
result.getType()
e.isAltPressed()
note == null || mAddNote
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL || (atomicityMode() == CacheAtomicityMode.ATOMIC && nearEnabled())
countNewlines(headerFragment + lhsFragment + thenFragment) + 1
Cheese.class
new FloatValue(Float.parseFloat(text))
return false; 
myNameField.getFocusableComponent()
propertyValue.getName().replaceFirst(prefix + PREFIX_SEPERATOR,"")
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
Integer.valueOf(value)
a.getFont(attr)
messenger.signUpObsolete(name,null,false)
yx*=ly
services == null || services.size() == 0
Log.e(TAG,"This will become an error",ex)
glyph.setSize(sizeSlider.getValue())
apex.stagePackage(mResolvedBaseFile.toString())
new ObjectMapper().readerFor(IspResponse.class)
getParameterValues(request,param,null)
N node
sendResourcesChangedBroadcast(true,true,pkgList,uidArray,null)
SCHEMA(35,false)
LocalBroadcastManager.getInstance(getContext()).sendBroadcastSync(intent)
proxyHTTPSPort.setText("")
DEBUG=false
request.getManager().loadMaterial(text)
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ I parseLiteral(Object input); 
log.error(message)
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector))
VERSION=27
Double value
FitNesseRunner.initContext(new File(ContextConfigurator.DEFAULT_CONFIG_FILE),fitNesseRootPath,ContextConfigurator.DEFAULT_ROOT,port)
result.getExitCode() == 0
value.length() < MAX_LENGTH
/**   * Implements all the default JDBC operations that are used by the JDBCPersistenceAdapter. <p/> Subclassing is encouraged to override the default implementation of methods to account for differences in JDBC Driver implementations. <p/> The JDBCAdapter inserts and extracts BLOB data using the getBytes()/setBytes() operations. <p/> The databases/JDBC drivers that use this adapter are: <ul> <li></li> </ul>  * @org.apache.xbean.XBean element="oracleJDBCAdapter"  * @version $Revision: 1.2 $  */ public class OracleJDBCAdapter extends BlobJDBCAdapter {   public void setStatements(  Statements statements){     statements.setLongDataType("NUMBER");     super.setStatements(statements);   }   protected byte[] getBinaryData(  ResultSet rs,  int index) throws SQLException {     Blob aBlob=rs.getBlob(index);     if (aBlob == null) {       return null;     }     return aBlob.getBytes(1,(int)aBlob.length());   } } 
new AssetUri(AssetType.UI_ELEMENT,uri)
log.error("Filtering key {} due to exception",k,e)
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
builder.setView(setupView()).setTitle(R.string.title_sync)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
Float.parseFloat(strings[i])
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
importedFolder.getModel()
managedType.getRawClass()
Map<String,String>
new GHRequest(start,end).setVehicle(algoVehicle.toString()).setType(algoTypeStr)
tracesDir.mkdirs()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Environment.getOemDirectory()
relevant && canSetPlaceholder() && errorDrawable != null
CompositeType.isStaticName(c.name())
mPhones.contains(phone)
regUser * trusteeWeightValue * trusteeFactorValue* trusteeFactorValue
task.abort()
SHORT_CF_NAMES_DEFAULT=false
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,true))
sa.getBoolean(com.android.internal.R.styleable.AndroidManifestApplication_testOnly,false)
DEBUG=false
/**   * Returns the next pseudorandom  {@link ArrayValue} of duration elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of duration elements.  */ public DurationArray nextDurationArray(){   return Values.durationArray(nextDurationArrayRaw(minArray(),maxArray())); } 
connections[i] != null && connections[i].getRequestId() == request.getRequestId()
XmppStringUtils.parseBareJid(user)
TextUtils.isEmpty(recipientIds[i]) || recipientIds[i].equals("-1")
new Max(0)
PApplet.degrees(angle)
selenium.click("//li[4]/span/a/span")
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
Assume.assumeTrue("JDK is not 7",JavaDetector.isJDK7())
public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
reportError(context,"encoding %s as an ARRAY was unexpected",type)
!value.isNull()
DefaultGroovyMethods.getRootLoader(Environment.class.getClassLoader()) != null
RowKey.prefixKeyWithSalt(key)
accountHandle.getComponentName().flattenToString()
new AlertDialog.Builder(this)
setIntegerPart(String.valueOf(integerPart))
input.doubleValue() != value.doubleValue()
new InputStreamReader(in,"UTF-8")
new InitialThreadLocal<Boolean>(PortletPreferencesThreadLocal.class + "._strict",false)
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
resources[i].getFilename().equals(groovyFile)
Character.isJavaIdentifierPart(buffer.charAt(i))
start > length
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
Slog.w(TAG,"Session failed to close due to remote exception",e)
dest.writeInt(mSubId)
EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)
status().isFound()
cell == null || cell.recon == null
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getScheduledThreadPoolExecutor().scheduleWithFixedDelay(new Runnable(){   public void run(){     cleanup();   } } ,cleanupPeriod,cleanupPeriod,TimeUnit.MILLISECONDS)
Color.blue(color)
getCategoriesAndThreads(category.getGroupId(),category.getCategoryId(),WorkflowConstants.STATUS_IN_TRASH)
mLastNotificationMillis=-rateLimitMillis
AvroValue<GenericRecord>
mActiveAgents.remove(info)
var.isUseReferenceDirectly()
Integer.parseInt(parts[1],16)
constraints.weightx=0.5f
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
constr.gridy=2
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
error == null && mEditPostActivityHook != null
parser.nextHexInt()
s.charAt(i) > ' '
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Response.ok(null,MediaType.TEXT_PLAIN)
isColumnVector()
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle","jboss-har")
_typeSettingsProperties.toString()
service.getName()
EnhancedSwitchMigrationInspection::inspectVariableAssigningSwitch
loaded.getDeclaredConstructor()
RowKey.prefixKeyWithSalt(key_b)
childLeftTuple.reAddRight()
platformVersion < M
LOGGER.warn("Could not execute cut",ex)
states.length >= 3
new java.util.Date(System.currentTimeMillis() - 24 * 3600 * 1000)
"Second position set to " + pos2 + "."
new InternalTestCluster("network",randomLong(),createTempDir(),2,2,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX,true)
Collectors.toCollection(LinkedHashSet::new)
numDataPoints - 1.0
_freemarkerEngineConfiguration.resourceModificationCheck()
history2.getHistoryEntryId()
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
/**   * Returns an  {@code AfterFirst} {@code Trigger} with the given subtriggers.  */ public static AfterFirst of(OnceTrigger... triggers){   return new AfterFirst(Arrays.<Trigger>asList(triggers)); } 
TelephonyManager.getDefault().getCurrentPhoneType()
Results.json()
key != null
cursor == null || !cursor.moveToFirst()
(propertySource != this) && !propertySource.getName().contains("plugin") && propertySource instanceof EnumerablePropertySource
if (isPresent) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
ObjectHeaderImpl.readHeaderFromObjectCarefully(obj)
assertTrue(message.getPayload() instanceof Collection<?>)
Arrays.asList("test","lukas","sa","root@localhost","postgres","dbo","dba","dba@lukas-hp","dba@lukas-omni27")
loaded.getLoaded().getDeclaredConstructor()
dynamicType.getLoaded().getDeclaredConstructor()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
tracesDir.mkdirs()
copyProfileConfigFiles(outFile,file)
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
selenium.isElementPresent("link=Control Panel")
refreshRotationLockTile()
type.getDeclaredConstructor()
new Max(0)
components.symbolUsageValidator.validateCall(resolvedCall,descriptor,trace,expression)
endFunction("get_column_statistics_by_table: ",statsObj != null,null)
currentTextFile + ".txt"
AnticompactionTask.class
body != null && body.getChildCount() > 0
PsiTreeUtil.getNextSiblingOfType(curItem,XmlTag.class)
storedHash == null || TextUtils.isEmpty(credential)
lineArgs[4]
startActivity(mAdapter.intentForPosition(0))
weekRange.add(Calendar.DATE,6)
getXMLProperty(parent + "." + propName)
selenium.click("//li[4]/span/a/span")
!TextSecurePreferences.isPushRegistered(this) || !TextSecurePreferences.isWebrtcCallingEnabled(this) || isGroupConversation()
imageView.setImageDrawable(drawable)
type.getDeclaredConstructor()
Exception e
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
ap.getSsidStr()
Long.parseLong(val)
UserHandle.myUserId()
assertEquals(1,resultList.size())
mCallback.onInputUpdated(inputId)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
mTextColorLink.getColorForState(ds.drawableState,0)
(SubscribeForm)actionForm
selenium.isElementPresent("link=Control Panel")
structuralLock.isHeldByCurrentThread()
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/handlers/basic/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
Foo<Number>
@NotNull
index.retrieve(between(TransactionIndex.TIMESTAMP,beginInMilliseconds,endInMilliseconds))
myIgnoreInstanceRefsInClosure=false
host.getSocketAddress()
ids1.size()
columnFamily()
deltaY <= 0
getJSDocType(cp)
32 + (int)(10000 * new Random().nextDouble())
cursor == null || !cursor.moveToFirst()
incrementAppWidgetServiceRefCount(appWidgetId,fc)
getService().hasClipboardText()
addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR)
display.getRealMetrics(mDisplayMetrics)
selenium.isElementPresent("link=Control Panel")
statistics.addGetTimeNanos(System.nanoTime() - start)
this(patchContent,true); 
!file.exists()
assertThat(response).isEqualTo("Ok.\n")
Trans != NO_TRANSPOSE
i > 0
System.nanoTime()
PsiPolyVariantReference reference=(PsiPolyVariantReference)configureByFile(getTestName(true) + ".kt"); 
className.getValue()
myFixture.checkResultByFile(baseName + "_after.py",true)
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),0,0,0,0,settings.useStereo3D())
m.size()
ACRA.log.w(LOG_TAG,"Could not send crash Toast",e)
tag2.getText()
@Child protected RepeatingNode repeatingNode; 
telephony.isOffhook(getOpPackageName())
@Override public TABLE getParentObject(){   return table; } 
_freemarkerEngineConfiguration.resourceModificationCheck()
list.append(pi)
logger.getLogger().warning("Shut down master")
expandableView.getIntrinsicHeight()
makeInteractions(test,false,InteractionPair.generatePairwiseInteractionsFromList(interactionIndexes),true,true,false)
e.toString()
isFinishing()
methodName.length() <= position || Character.isUpperCase(methodName.charAt(position - 1))
_connector.getResponse("METHOD /foo HTTP/9\n\n")
mSyncStatus.valueAt(i)
WordPress.getCurrentBlog().getLocalTableBlogId()
tok.getToken()
telephony.isIdle(getOpPackageName())
Exception e
new ELResolver[8]
new Paint(Paint.ANTI_ALIAS_FLAG)
IccUtils.cdmaBcdByteToInt((byte)0x8c)
selenium.isElementPresent("link=Control Panel")
AudioSystem.isMicrophoneMuted()
E extends Exception
stateMap.get("CurrentTrackMetaData") != null && !stateMap.get("CurrentTrackMetaData").isEmpty()
now == currentPage || dotCenterX == null
copy.isInternal()
dbStat.setInt(1,sessionType.getPid())
new IllegalStateException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
_log.warn(ioe,ioe)
return true; 
Integer.parseInt(stackIdStr)
mRepeat > 0
el.getPropertyAsString(HTTPSampler.METHOD)
str == null || start >= str.length()
return 0; 
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
@Nullable
selenium.isElementPresent("link=Control Panel")
routes.SessionsController.index("")
loaded.getLoaded().getDeclaredConstructor()
mMat[5]
longSize >= 960
services == null || services.size() == 0
endpoints.addAll(entry.getValue())
o2.getPriority()
mBluetoothLock.readLock().unlock()
mAlpha.cancel()
return facebookProperties; 
new IssueIndexer(esTester.client(),null,new IssueIteratorFactory(null))
mPlayer.getCurrentPosition() * 1000L
BackupManagerServiceInterface svc=mService; 
searchHit.getThumbImageURL()
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE
m.setContent(OutputStream.class,os)
i < rank() && size(i) == 1
userRecord != null && userRecord.mClientRecords != null
assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(7)
getSettings()
mUserPaddingEnd > 0
!mRenderNode.isPivotExplicitlySet()
log.debug("Double activation of navigator context")
new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,true)
decoder.readNullableString()
builder.scope("openid","profile","email")
diff.add('-' + item)
iconSize * DisplayMetrics.DENSITY_MEDIUM >= availableHeight
new Paint()
path == null || !path.startsWith("/")
(fieldValues == null) || fieldValues.isEmpty()
nextNonWakeup != 0 && mNextNonWakeup != nextNonWakeup
true || DEBUG_WALLPAPER
onDetachedFromWindows()
return true; 
selenium.isElementPresent("link=Control Panel")
SelectTimeZonePacificStandardTimeCPMATest.class
LOG.warn("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
mDrawerLayout.openDrawer(mSliderLayout)
LinkageError e
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper,false)
Uri uri
id > 0 && id < ForgeDirection.values().length
this(parameters,new StringBuilder(),true); 
params.appendExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
super.onUpdate(stepLength)
taskNames.contains(taskName) || taskNames.contains(project.getPath() + ":" + taskName)
checkCall(receiver)
Integer.toHexString(realQuality)
path.startsWith(FileSystemItem.HOME_PREFIX) || path.startsWith("/") || path.matches("^[a-zA-Z]:\\/.*")
BundleFactoryOutputReceiverFactory.create(bundleFactory,stage.getComponents(),outputs::add)
jsonObject.get("error").toString()
i < size
Mono.subscriberContext()
ANIMATE_TRANSITIONS=false
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public SkylarkInfo create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
new RouteCalculationResult(res,null,params,null,true)
createIntent().setAction(ACTION_FIND_DEVICE).putExtra(EXTRA_FIND_START,start)
assertEquals(7,ti.nrOfInvocations)
arrayExpression == null || rightHandSide == null
worldVertices.length != localVertices.length
lastPull == node && !node.hasNoUsages()
buf.halfOpenElement("url")
formatPoshiXML(newContent)
node == null || v == node.view
(sbn.getNotification().flags & Notification.FLAG_AUTOGROUP_SUMMARY) == 0
myHeight - myDelegate.getIconHeight()
LOG.warn("src link in the context java doc window does not attached")
JournalArticleLocalServiceUtil.updateArticle(userId,groupId,0,journalArticleId,journalArticle.getVersion(),getMap(articleDefaultLocale,title),descriptionMap,content,ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
mHeadsUpNotificationView.releaseAndClose()
Reflection.methodHandle(type,"sizeOf")
ev.mDataSamples.length >= ND
@Specialization protected LLVMBoxedPrimitive fromByte(byte value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
DEFAULT_GROUP_OWNER_INTENT=6
StringBuffer result=new StringBuffer(); 
client == null || client.getGameState() != GameState.LOGGED_IN
new NTCredentials(username,auth.getPass(),LOCALHOST,domain)
rats.setConf(editConfig.getText())
mavenBundle("info.cukes","cucumber-jvm-deps")
showSelectionToggleButton.setSelected(true)
Boolean.parseBoolean(literalOption)
file.getName()
defaultCometSupport(defaultToBlocking)
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),12)
UDecoder.URLDecode(candidate,connector.getURIEncoding())
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ I parseLiteral(Object input); 
FRAME_STATS_COUNT=16
getTestName(true)
new Paint()
ActivityRecord r=(ActivityRecord)it.next(); 
Integer.parseInt(nextArgRequired())
MAX_DIMEN_FOR_ROUNDING=1920
Class.forName(className)
@Specialization protected LLVMBoxedPrimitive fromBoolean(boolean value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
final IgniteKernal grid=(IgniteKernal)ignite; 
doTestCompletionVariants("av10.xml","fill_parent","match_parent","wrap_content","@android:","@dimen/myDimen")
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
new TaipProtocolDecoder(new TaipProtocol())
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION,false)
String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n",SCHEMA_NAME,TABLE_NAME,"col0","value0","pk1","keyvalue1")
cn == null || cn.length() == 0
"Failed to generate [" + extraSource + "]"
expect(cluster.getClusterName()).andReturn("cluster").times(1)
args.length > index
LOGGER.warn("Could not perform drage and drop",nfe)
log.debug("In OSGi: using programmatically wired maven parser")
LinkedHashMap<>
sleep(200)
Throwable e
targetInfo != null && targetInfo.metaData != null
Map<String,Object>
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
new ExecutionEnvironment(env.getRunProfile(),env.getExecutionTarget(),env.getProject(),env.getRunnerSettings(),env.getConfigurationSettings(),null,null)
String dateObject=firstMessageElement.getAttributes().getAttribute("date").toString(); 
r - scrollX
scheduleRemoveStartingWindowLocked(wtoken)
IllegalArgumentException.class
getWrappedEngine().release(decrement)
latch.awaitFirst()
spendTime < 2010
getter.getType()
device == AudioSystem.DEVICE_OUT_HDMI || device == AudioSystem.DEVICE_OUT_HDMI_ARC
new SampleItem()
@Override public AbstractConfigValue get(int index){   return value.get(index); } 
127 + (USE_OLD_HISTORY ? 1000 : 0)
library.getName()
new BaseAnalysisActionDialog(dialogTitle,"Analyze scope",myProject,analysisScope,name,true,analysisUIOptions,element)
@ConditionalOnEnabledHealthIndicator("mongo")
second.get(j)
minSimilar > 1
ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
ap.getSsidStr()
expr.or(right)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"dbinfo",pw)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
-26
internalTransaction.getTransferToAddress()
create.isInternal()
dist <= bestdist
current.compareTo(position) < 0
NSNumber.numberWithLongLong(val)
serialVersionUID=1975269372645791816L
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public CharSequence loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
input.getOutputPropertyName()
resultSet.getInt(index)
/**   * Replace the characters from startPos, inclusive, until endPos, exclusive, with the given string.  * @param startPos The position from which to start replacing, inclusive  * @param endPos The position at which to end replacing, exclusive  * @param replaceWith The string to replace with  */ public static SuggestedFix replace(int startPos,int endPos,String replaceWith){   return builder().replace(startPos,endPos,replaceWith).build(); } 
Boolean.parseBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
handler.pause()
checkRegister(sourceRegisterType,ReferenceCategories)
selenium.click("//li[4]/span/a/span")
tokens.getText()
System.currentTimeMillis() >= firstDate
new SQLException("Error downloading gallery image " + imageUri,e)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
Log_OC.d(TAG,"Initializing Fragments in onAccountChanged..")
attributes.getAllFlags()
mBiometricUnlock.stop()
letters[1]
header.findViewById(R.id.avatar_bgrnd)
new StrutsSpringObjectFactory("constructor",null,null,msc,null,"true",null)
new NameAlias(nameAlias)
new ConnectionException(sm.getString("frameType.checkStream",this),Http2Error.PROTOCOL_ERROR)
assertEquals(arr1,table.getBinaryByteArray(0,0))
URLUtils.currentUrlStartsWith(toString())
mSelectPhotoView.getSelectFiles() != null && mSelectPhotoView.getSelectFiles().size() > 0
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
Throwable e
debugProcess.isDetached()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
mCurrIconRow != null && mCurrIconRow.isVisible()
UserHandle.myUserId()
new SpannedString(new CustomSpanned(first),true)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
LOGGER.debug(msg.apply())
DLStoreUtil.deleteFile(companyId,REPOSITORY_ID,path)
mappedCatalog != null && !StringUtils.isBlank(mappedCatalog.getName())
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static CharSequence get(CharSequence self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
new IngestInfo(Collections.emptyList())
position.offset(mLeft,mTop)
timeDifferenceMilliseconds < maxTolerateTimeDifferenceMilliseconds
mSimpleCard.getVisibility() != View.VISIBLE || (mCard != null && mCard.getVisibility() == View.VISIBLE)
result.indexOf('}',pos_start)
DateTimeUtils.createGregorianCalendar(DateTimeUtils.UTC)
LOG.warn("Failed to delete path from UFS: {}",e.getMessage())
getConnectTimeout()
channel.writeAndFlush(res)
ev.mDataSamples.length >= ND
_typeSettingsProperties.toString()
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_configuration,_templateContextHelper,false)
Nd4j.create(this.data,this.arrayShape)
resource.getPath().contains("LanguageTool.uno.jar")
super.execute(executor,processStarter,patchers)
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
hasColumn("MicroblogsEntry","creatorClassNameId")
new File(projectDirectory,"pom.xml").isFile()
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",false)
selenium.isElementPresent("link=Control Panel")
a.getFont(attr)
checkCall(receiver)
InheritableThreadLocal<JMeterContext>
WordPress.getCurrentBlog().getLocalTableBlogId()
realm.checkIfValid()
SVID_SHIFT_WIDTH=8
restRequest.param("metric","")
rect == null || urls.size() > 1
request.getContentType().startsWith("application/x-www-form-urlencoded")
index >= 0
masterComponents.length > 1
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
(i - blockStart) > 0
display.getRealMetrics(dm)
pMotionEvent.getY(1)
Slog.w(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
ColorProperties.getColor("scrollBarDarkShadow")
ClassLoader filteringClassLoader=getSystemFilteringClassLoader(defaultClassLoaderFactory,java9Compatible); 
Messages.getString(key,param1,param2,param3,param4)
JiveGlobals.getPropertyEncryptor().encrypt(value)
request.getPathInfo()
lastIme != null
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs(),TypeDescriptors.longs())
en.getString(in)
FunctionTypesKt.isExtensionFunctionType(supertype)
Utils.createInformativeDialog(context,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.dialog_import_error))
checkCall(receiver)
value()
input.getTargetStepDefinitions()
getUpstreamBranchName()
quality.samplingRate == this.samplingRate && quality.bitRate == this.bitRate
item.send(new StringType(modeString))
SpannableStringBuilder content=new SpannableStringBuilder(); 
id=19911
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
assertEquals(0.21979375165014595,mse,1e-8)
response.get(ROLLED_BACK)
TypeRemapper.createFrom(typeRemapper,additionalTypeMappings,isInliningLambda && !this.isInliningLambda)
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,true,false)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
type.getDeclaredConstructor()
InsertReturningStep<R>
typeSettingsProperties.toSortedString()
BackupManagerServiceInterface svc=mService; 
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
mTouchMode == TOUCH_INIT_MODE && (canZoomIn() || canZoomOut())
disable2ForUser(what,token,pkg,mCurrentUserId)
window != null && !(window instanceof JFrame)
getService().hasClipboardText()
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
LinkageError e
hr != null && normalMode
field.getTypeDesc()
new File(this.file,child)
initLocale || !mProcessesReady
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
getShortName()
~HIDDEN
PyExpression newExpression=createExpression(project,name,declaration).getExpression(); 
dbText.getText()
wms.getGeoServer().getGlobal()
cache.clear()
isSubDelimiter(c)
popup.requestFocusInWindow()
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=6
millis >= 28 * DateUtils.MILLIS_PER_DAY
mock.expectedMessageCount(1)
firstItemVisible && lastItemVisible && lv.getChildCount() > 0
Thread.sleep(1000)
logger.fine("Creating extern file for exports")
winAnimator.prepareSurfaceLocked(recoveringMemory)
setTargetBuildConfigurations(buildable,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
LOG.debug("did not find superclass names when mapping inheritance....")
mCallback.onInputUpdated(inputId)
e.printStackTrace(System.out)
tracesDir.mkdirs()
SCAN_STATUS_COMPLETE=2
mService.setAppPolicy(UID_A,POLICY_NONE)
this.cleanedUrl
TransitiveInfoCollection.class
assertThat(pod).hasName("cheese")
startActivity(intent)
mDataNotSet || mData == null || mData.getYValCount() <= 0
wifiConfig == null || wifiConfig.isValid()
trade.getLimit()
this.controller.saveService(data)
ImmutableList<Integer>
MAX_PERCENT_DIFFERENCE=0.3
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
sizeModeClass.equals("ScaledSizeMode")
UIUtil.isActionClick(e,MouseEvent.MOUSE_RELEASED)
PyReferenceExpression.class
innerCache.put(key,value)
selenium.isElementPresent("link=Control Panel")
activeSyncAccountIds.add(syncAccount.getSyncAccountId())
new IllegalStateException("Advertising can't be both connectable and scannable")
m_data.getFixString((int)m_length,charsetName)
LinkedHashMap<String,String>
from >= to
d instanceof URLDetail
tag.setLabelposition("left")
isActive() && mInfo != null
assertEquals(3,hostAlertCount)
appearance.getInt(attr,0)
!mConnected || !UsbManager.containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_ACCESSORY)
selenium.isElementPresent("link=Control Panel")
_logger == null
size > Message.MAX_SIZE || size < 0
new UnsupportedOperationException("read-only")
routeName + "-" + cheWorkspacesRoutingSuffix
prev.stream()
TYPE_ADD_VOTE=10004
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
poList[2]
new SolrException(500,"error parsing event listeners",e,false)
logger.debug("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
logger.info("defineClass pluginClass:{} cl:{}",className,classLoader)
TreeState.write(cursor,5,7,7,8,9,10,11,12,13)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=false
new URLClassLoader(classpath.toArray(new URL[classpath.size()]),null)
new CountDownLatch(2)
new RuntimeException("One thread threw an exception",exception.get())
assertEquals(10,set.size())
!compactionStarted.getAndSet(true)
SecurityActions.getModuleClassLoader(module)
(status & 0x02000000) != 0
assertEquals(1,failures.size())
CommonCodeStyleSettings settings=getJavaSettings(); 
JiveGlobals.getBooleanProperty("stream.management.active",true)
"Surface(native-token=" + mSurfaceControl + ")"
context == null || context == EGL_NO_CONTEXT
io.getCount(buf) < idx
logger.info("Starting Jetty Azkaban Executor...")
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-date-time elements.  */ public LocalDateTimeArray nextLocalDateTimeArray(){   return Values.localDateTimeArray(nextLocalDateTimeArrayRaw(minArray(),maxArray())); } 
jobIds == null || jobIds.isEmpty()
enabled=false
JvmDeclarationOriginKt.OtherOriginFromPure(myClass,valuesFunction)
planDetailJson.getProduct()
pm.queryIntentServicesAsUser(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
RecentsVerticalScrollView.super.removeView(view)
temporaryFolder.newFolder()
assertEquals(false,StringUtils.isNumeric(""))
lineArgs[2]
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17_1","JDK17_2","JDK18")
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
Long.parseLong(nfcid2,16)
tw.close()
LOG.warn("Async Kafka commit failed.",cause)
getPath("checks/javadoc/Input_02.java")
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).onErrorMap(this::mapError)
lock.isHeldByCurrentThread()
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
err == 0
writeValue(writer,this.map.get(key),indentFactor,indent)
type.equalsIgnoreCase("boolean") || type.equalsIgnoreCase("bool")
++n >= columns.size()
IndexerImpl.addMessage(companyId,groupId,categoryId,threadId,messageId,title,content)
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
MORE_DEBUG && okay && mAgent != null
getPageItems(PaginationRequest.of(10,1),_group.getGroupId(),_acceptLanguage,getThemeDisplay(_group,LocaleUtil.getDefault()),new Filter(_filterParser.parse("contains(title,'title')")),Sort.emptySort())
body.isEmpty()
mMountTable.resolve(getPath(lastInode)).toString()
out.getVersion().before(Version.V_1_4_0)
!executorService.isTerminated()
new KettleRowException("Couldn't find hop '" + from + "' for reading from")
routingTable.getRoute(packet.getFrom()).process(reply)
ModalityKt.isFinalClass(this)
SamplingProfiler.newThreadGroupThreadSet(group)
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default",e)
e.toString()
mSmallBatteryDevice ? 15 : 30
logger.error("Caught exception in file upload",e)
JavaSdkImpl.getMockJdk15("java 1.5")
Arrays.asList("dn1","dn2","dn3")
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .start()
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     updateAllEditors();   } } ,myProject.getDisposed())
address.getHost()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),UNSET)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new ParameterSpec(valueName,array,false,Cardinality.ONE)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
selenium.isElementPresent("link=Control Panel")
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
~PFLAG3_FITTING_SYSTEM_WINDOWS
Long.parseLong(time)
1
rangeTable.getRowCount(session)
selenium.isElementPresent("link=Control Panel")
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
targetType instanceof ModuleBasedBuildTargetType
new EclipseWtpmodulesWriter(getLog()).write(outputDir,project,reactorArtifacts,sourceDirs,localRepository)
new TaskRunnerFactory("ActiveMQ Session Task",ThreadPriorities.INBOUND_CLIENT_SESSION,false,1000)
mNextNonWakeupDeliveryTime < nowELAPSED
log.debug("Testing debug(msg,null)")
!newDefaultSubIdObj.equals(mDefaultSubId)
(BigDecimal)config.get("location")
selenium.isElementPresent("link=Control Panel")
notation.map(new Transformer<ArtifactFile,Object>(){   @Override public ArtifactFile transform(  Object value){     ArtifactFile artifactFile;     if (value instanceof FileSystemLocation) {       FileSystemLocation location=(FileSystemLocation)value;       artifactFile=new ArtifactFile(location.getAsFile(),module.getVersion());     }  else     if (value instanceof File) {       artifactFile=new ArtifactFile((File)value,module.getVersion());     }  else {       throw new InvalidUserDataException(String.format("Cannot convert provided value (%s) to a file.",value));     }     return artifactFile;   } } )
Slog.w(TAG,"Invalid wallpaper data")
from("direct:b").delay(4000)
!SystemInfo.isFileSystemCaseSensitive
hasRows(newTableName)
DBG=false
appearance.getFloat(attr,0)
typeSettingsProperties.toString()
mWM.isKeyguardLocked()
sp.edit().putBoolean(PREF_USER_REFUSED_SIGN_IN,refused).apply()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENT_DETAILS))
Boolean.parseBoolean(conf.get("mapreduce.job.is-mem-hungry"))
type.getDeclaredConstructor()
insertAfterCursor(editor,context)
1 << 3
versionMatch.group(1)
SceneApplication.getApplication().getRenderer().readFrameBufferWithFormat(offBuffer,cpuBuf,Format.BGRA8)
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
connectedHeaders.setVersion("1.2")
AtmosphereRequest.newInstance()
ssl.hasDefined(CommonAttributes.PROTOCOL)
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
ScanResult.is5GHz(frequency)
new ClassicTableTypeMapping()
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile,false)
onDetachedFromWindow()
idleTime=60000
@Override public void setting(int identifier,long value) throws ConnectionException {   trace.append("0-Settings-[" + identifier + "]-["+ value+ "]\n");   remoteSettings.set(identifier,value); } 
i % dictionarySize
application.map(version::compareTo).orElse(0) < 0
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
XContentType.YAML.mediaType()
nrRecordsReference++
typTypeStr != null && !typTypeStr.isEmpty()
adjustedEndTimeUs=endTimeUs
data.position()
mFacetCategoryMap.get(category)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
assertEquals(11,events.size())
ORIENTATION_SETTLE_TIME_MS=250
telephony.getMergedSubscriberIds(mContext.getOpPackageName())
ImmutableList<Boolean>
private RunningProcessList mRunningProcessList=new RunningProcessList(); 
interceptor.doIntercept(invocation)
clazzes_.remove(HIDDEN_STYLE)
excludeDirPathMatcherList.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
numPoints / 2.0
app().gitblit()
s5dir + ".dir"
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
mPowerManager.isInteractive()
getContext().registerReceiver(mReceiver,filter,null,mHandler)
XmppStringUtils.parseBareJid(user)
new KMLNetworkLinkTransformer(wms,mapContent)
!isNodeHealing(node.getNodeId())
Long.parseLong(val)
socket.closeLatch.await(10,TimeUnit.SECONDS)
tag.getReferencedObjectId()
connectionProperties.containsKey("oracle.password")
option.getJavaType()
ProjectInspectionProfileManagerImpl.getInstanceImpl(project)
newConnection(this)
assertEquals(3,tool.check("I can give you more a detailed description.").size())
FSA.read(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
mMenu.getNonActionItems()
RT.count(s)
ExecutionStrategyParameters oldParameters
selenium.isElementPresent("link=Control Panel")
new ByteBuddy(ClassFileVersion.JAVA_V8).subclass(Object.class).implement(Class.forName(DEFAULT_METHOD_INTERFACE)).implement(Class.forName(CONFLICTING_DEFAULT_METHOD_INTERFACE)).method(named("foo")).intercept(DefaultMethodCall.prioritize(Class.forName(DEFAULT_METHOD_INTERFACE))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_NO)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
speed < 83
classPropertyFetcher.getPropertyType(property,true)
hasColumn("MicroblogsEntry","receiverUserId")
assertEquals(tick8,results_overlapped_by.get(0))
(NotificationListener)null
selenium.isElementPresent("link=Control Panel")
oldVb.getBufferType() == VertexBuffer.Type.Index || oldVb.getBufferType() == VertexBuffer.Type.HWBoneIndex || oldVb.getBufferType() == VertexBuffer.Type.HWBoneWeight
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
val=2
entry.notification.cloneLight()
topPanel.addView(mCustomTitleView,0,lp)
Integer.parseInt(time.split(":")[0])
mLocalDirtyRect.set(0,0,width,height)
assertNotNull(message + ": expected should not be null",expected)
LinkageError e
list.add(idx,v)
ai.uid < Process.FIRST_APPLICATION_UID
filteredItems.get(index)
e.toString()
vb.getData().rewind()
id=10850
taskService.createTaskQuery().orderByExecutionId()
new PreFlexRWSegmentInfoFormat()
city.getId()
taken > 150
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBeforeOrEqualsTo(new Date())
getSitesCount() <= 1
new LinkedHashMap<>(0)
sstable.markObsolete()
mIconError != 0
ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
Exception ex
depthError("modelY")
softReboot()
items[19]
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).descriptionAndTooltip(message)
BTraceUtils.setIntrusionLevel(1)
!cmdKey.equals("-help") && !cmdKey.equals("-failover") && !cmdKey.equals("-transitionToObserver")
auditStrategy.addEntityAtRevisionRestriction(globalCfg,qb,rootParameters,INDEX_ENTITY_ALIAS + "." + revisionPropertyPath,INDEX_ENTITY_ALIAS + "." + verEntCfg.getRevisionEndFieldName(),false,indexIdData,revisionPropertyPath,originalIdPropertyName,INDEX_ENTITY_ALIAS,INDEX_ENTITY_ALIAS_DEF_AUD_STR,true)
!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
PsiMethod constructor
mapper.getTypeFactory().constructType(AuthConfig.class)
msgType < values.length
realm.checkIfValid()
info.crashInfo.stackTrace.length() > 30000
c.networkId == netId && c.SSID.equals(config.SSID)
Assert.assertEquals(21,as.getAllGlobalProperties().size())
grantAlias == null || "".equals(grantAlias)
Long.parseLong(args[ai])
setReplyTo(replyTos)
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("DHE-DSS-DES-CBC3-SHA",KeyExchange.EDH,Authentication.DSS,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA")
slot_name_value_pair(context,fc)
status().isFound()
@Nullable
index >= 0
dstCursor == null
case MESSAGE: 
input.getPeekPosition()
new NagiosNscaStub(25668,"secret")
activeFrom.getTime()
logger.debug("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
leftExpression.getText()
exists
moduleRegistry.getModule("gradle-test-kit").getImplementationClasspath()
clusterSet.getClusterCount() < initialClusterCount && points.size() > 0
mScaleType.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
super.resolveLayoutDirection(layoutDirection)
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
assertEquals("Unable to read 2 bytes, got 0",ex.getCause().getMessage())
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage")
appearance.getFloat(attr,0)
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
getDialect() instanceof PostgreSQLDialect || getDialect() instanceof HSQLDialect
data.getSenderId() != myUid() || data.getUnreadCount() > 0
resultTargetUser != null && !resultTargetUser.isEmpty()
offset=0
heartbeatIntervalSeconds < 0
new int[8573]
selenium.isElementPresent("link=Control Panel")
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
getLastCustomNonConfigurationInstance()
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47))
mAttributes.getAllFlags()
RtlUtils.isLtr(english2)
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
put(null,url,params,responseHandler)
refresh()
poList[2]
Integer.parseInt(stackIdStr)
e.toString()
Collection<PostgreTableBase>
new AssertionError("type=" + type)
_connector.getResponse("GET /foo?data=42 HTTP/1.0\n\n")
bytesValue.length <= 55
60L + 120L
retriever.getFrameAtTime(-1)
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
entry == null || entry.get() == null
enclosingHeight - height - insetBottom
index >= 5
dir=0
StringUtils.isNotBlank(value) && WebUtils.isRememberMeAuthenticationEnabled(requestContext)
rawType.getFullyQualifiedName(DBPEvaluationContext.DDL)
log.debug("Performing lookup: %s --> %s",ips,retVal)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
mActiveStreamType == -1 || streamType != mActiveStreamType
selenium.isElementPresent("link=Control Panel")
getTupledSet()
!mIsOnInnerCircle && hour != 0
readWifiSleepPolicy()
!newDefaultSubIdObj.equals(mDefaultSubId)
aeron.addExclusivePublication(controlRequestChannel,controlRequestStreamId)
patch.getPath()
if (VDBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
NodeUtil.getFunctionNameNode(fn)
getTimeout(ticketToAdd)
c * c
Long.parseLong(val)
Map<RealmObject,RealmObject>
target.getContext().isInContext(nodeName)
clientState.getRawKeyspace()
V extends Identifier
unsafe.compareAndSetByte(container,byteOffset,(byte)17,(byte)121)
V
type.getDeclaredConstructor()
addWarn(msg,e)
private final DomAnchor myParent; 
Slog.w(TAG,"Invalid wallpaper data")
CodeStyleSettings.class.getField(name)
ListDataSink.get(1)
className.lastIndexOf(CONTROLLER_SUFFIX)
postfix.startsWith("id")
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_NO)
fragmentEntryPersistence.findByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
StepVerifier.create(Flux.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).verifyError(IllegalStateException.class)
clock.compare(newClock)
this.args.getNetNodeId()
amount.toPlainString()
Long.valueOf(p.getProperty("numberid.id"))
FunctionTypesKt.isFunctionType(((ClassDescriptor)containingDeclaration).getDefaultType())
parameters != null && parameters.size() > 0
sampleOffset * 1000L
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
lock.release()
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
localY2 * cos
message.getConversation()
StatBuckets.prettyUptimeStr(secs)
type.getDeclaredConstructor()
settings.isAutoCommitOnCherryPick() != myAutoCommitOnCherryPick.isSelected()
StringUtil.contains(text,end,next,startChar)
Slog.w(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
mParent == null
LOG.info("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
Slog.w(TAG,"Could not read " + path,e)
getStickyFooterPosition(identifier)
List<Number>
delegate.toJson(writer,new Envelope<>(value))
selenium.isElementPresent("link=Control Panel")
LOGGER.warn(e.getMessage(),e)
Assert.assertEquals("Wrong messages count: " + messages.size(),1,messages.size())
DiagnosticType.error("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
count == 0 && position == buffer.length
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).switchIfEmpty(createSession(exchange))
sizeNeeded > items.length
size > maxListFill
MAX_LENGTH=200
Object tag
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
new CountDownLatch(2)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY)
processInstance.getProcessDefinitionId()
AutoImportFix.createFactory()
shouldAutoCancel(sbn) || mRemoteInputManager.getKeysKeptForRemoteInput().contains(notificationKey)
new StringBuffer(input.length())
this(parameters,new StringBuilder(),true); 
name.lastIndexOf('.')
connectionProperties.containsKey("oracle.url")
getCol().getDecks().id(deckName,false)
logger.warn("Operation failed for accountId='{}' accountExternalKey='{}' error='{}'",paymentStateContext.getAccount().getId(),paymentStateContext.getAccount().getExternalKey(),e.getMessage())
TRIES_TO_DOWNLOAD=15
url.substring(pathStartIndexInUrl)
LOG.info(e)
producer.requested > 0 && q.count() == 0
mWm.freezeRotation(-1)
lp.resolveLayoutDirection(layoutDirection)
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
_name + ".DEBUG"
type == Sensor.TYPE_TEMPERATURE || type == Sensor.TYPE_AMBIENT_TEMPERATURE
mJobs.valueAt(i)
fb.limit()
selenium.isElementPresent("link=Control Panel")
trimDirectiveWhitespacesValue=value
randomAlphaOfLengthBetween(6,20)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted)
PoolResources.elastic("tcp-client-pool")
Collections.unmodifiableList(customNonFilteredExtensions)
saveJSONObject(json,filename,null)
mBiometricUnlock.stop()
log.logError(toString(),"File [" + realFilename + "] doesn't exist!")
pId + BASE_FILE_NUMBER
anchorView.getApplicationWindowToken()
/**   * <p>A  {@code TaskOutputs} represents the outputs of a task.</p><p>You can obtain a  {@code TaskOutputs} instance using {@link org.gradle.api.Task#getOutputs()}.</p>  */ @HasInternalProtocol public interface TaskOutputs extends CompatibilityAdapterForTaskOutputs {   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given closure is executed at task execution time. The closure is passed the task as a parameter. If the closure returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateClosure The closure to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Closure upToDateClosure);   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given spec is evaluated at task execution time. If the spec returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateSpec The spec to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Spec<? super Task> upToDateSpec);   /**   * <p>Cache the results of the task only if the given closure returns true.  The closure will be evaluated at task execution time, not during configuration.  The closure will be passed a single parameter, this task. If the closure returns false, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param closure code to execute to determine if the results of the task should be cached.  */   @Incubating void cacheIf(  Closure closure);   /**   * <p>Cache the results of the task only if the given spec is satisfied. The spec will be evaluated at task execution time, not during configuration. If the Spec is not satisfied, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param spec specifies if the results of the task should be cached.  */   @Incubating void cacheIf(  Spec<? super Task> spec);   /**   * Returns true if this task has declared any outputs. Note that a task may be able to produce output files and still have an empty set of output files.  * @return true if this task has declared any outputs, otherwise false.  */   boolean getHasOutput();   /**   * Returns the output files of this task.  * @return The output files. Returns an empty collection if this task has no output files.  */   FileCollection getFiles();   /**   * Registers some output files for this task.  * @param paths The output files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder files(  Object... paths);   /**   * Registers some output file for this task.  * @param path The output file. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder file(  Object path);   /**   * Registers an output directory for this task.  * @param path The output directory. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder dir(  Object path); } 
settings.readLPw(null,0,false)
Environment.getOemDirectory()
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this))
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while","type")
initialCapacity > 1 << 30
selenium.isElementPresent("link=Control Panel")
notificationManager.cancelAsUser(NOTIFICATION_ID,id,UserHandle.ALL)
new IllegalArgumentException(Localizer.getMessage("org.apache.jasper.compiler.ELParser.invalidQuotesForStringLiteral",input))
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
new SnippetInstaller(runtime,new Assumptions(false),target)
this.remainingHighlightTicks
selenium.isElementPresent("link=Control Panel")
r != null && !r.finishing
retriever.getFrameAtTime(-1)
new FPSAnimator(window,60)
ClassLoader.class.getDeclaredMethod("findLibrary",new Class[]{String.class})
onPackageAppeared(pkgList[i],mChangeType)
reportExceptions(result,basedir,true)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
sstable.markObsolete()
timeout >= 0
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
new Paint()
mListView.getListChildAt(index)
163 + (USE_OLD_HISTORY ? 1000 : 0)
returnFalseIfFailed(code,"super." + superMtd,BUF_VAR,"reader")
myStorage.isMapped() || isDirty()
mappers.mapper().searchQuoteAnalyzer()
_logloss / _wsum
params.getSimulatedPlatformVersion()
getDialogTitle()
mBluetoothService.notifyIncomingA2dpConnection(address,true)
checkCall(receiver)
ImmutableList<Map<String,Object>>
Throwable e
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=1000
w1.getGradient(i,alpha,alpha)
markerYear == currentYear || markerYear == 1970
w1.getGradient(target,label - expTable[(int)((f + MAX_EXP) * (expTable.length / MAX_EXP / 2))],this.alpha)
Appender<?>
am.getClass().getField("mContext")
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0 || (win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD)
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout,minConnectionEventLen,maxConnectionEventLen)
url.toServiceStringWithoutResolving()
oldObject=event.getOldObject()
_typeSettingsProperties.toSortedString()
_formatWriteFeaturesToChange != 0
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
fragment == null || fragment.getActivity() == null
compensationRange.contains(compensation)
aInfo != null && (aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
input.getOutputPropertyName()
new GdxRuntimeException("Failure reading Vorbis.",e)
ref.getAuthorIdent()
obj instanceof NativeTestObject
javaVersion < 8
OPEN_READ
eq(0L)
JNIDecoder.matches(out,getMatchingOutputFormats(inputFormat))
Integer.parseInt(attrValue)
Representor<T,S>
new SpockTimeoutError(seconds,msg,e)
String fsUuid
logger.debug("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
containerLog.error(sm.getString("dataSourceRealm.getPassword.exception",username),e)
getTestName(true)
temporaryFolder.newFolder()
selenium.isElementPresent("link=Control Panel")
mock.expectedMinimumMessageCount(3)
endPos < bufEnd
turnImminent=0
InetAddress.getByName("127.0.0.1")
masm.movq(AMD64.r13,object)
selenium.isElementPresent("link=Control Panel")
future.channel().writeAndFlush(request)
sendMessage(1500)
return true; 
sampleFormat != null
IndexReader.open(store)
mAttributes.getAllFlags()
new IndexWriter(dir2,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
origin.realComponent().doubleValue() <= other
adapter.item(R.string.layer_overlay).selected(overlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_up_dark,R.drawable.ic_action_up_light).listen(listener).position(14)
ColorProperties.getColor("controlColor")
!ldapAuthConfiguration.enabled()
new GridDhtPartitionDemander(cctx,demandLock)
visitedArtifacts.select(Specs.satisfyAll(),transformer.getFromAttributes(),element -> {   return dependencies.contains(element); } ,false)
desiredX >= 0 && !ApplicationManager.getApplication().isUnitTestMode()
selenium.isElementPresent("link=Control Panel")
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
sshd.stop(true)
terrainQuadGrid.getTerrainQuadAt(temp)
position(f1)
case MACOSX: 
JPAQuery<?>
MethodNotFoundException.class
query.startsWith("about:")
loopButton.isActivated()
input.size(0)
GridComponentType.HADOOP.create(ctx,true)
properties.containsKey(STRING_RECENT_SEARCHES)
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getOutput()
mf.getColumnNameInSql()
this.identityProvider.getAlias()
verify(mWifiService,never()).stopLocalOnlyHotspot(anyString())
string.length() / maxIdxPerLine + 2
Long.parseLong(attrValue)
setFloatingLabelInternal(mode)
alluxioUriToLoad.getPath()
DefaultCacheKeysFactory.staticGetCollectionId(cacheKey)
new Paint()
v == BlockingSubscriber.TERMINATED
dynamicType.getLoaded().getDeclaredConstructor()
FileAlreadyExistException.class
selenium.isElementPresent("link=Control Panel")
return true; 
selenium.isElementPresent("link=Control Panel")
new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"))
item.isDownloaded() || app.getDownloadThread().isDownloading(item)
Observable.defer(() -> sync.update(mangaSync))
(KvCoder)inputCoder
coverageDataManager.addCoverageSuite(config.getGeneratedName() + " Coverage Results",fileProvider,config.getPatterns(),new Date().getTime(),null,config.getCoverageRunner(),config.isTrackPerTestCoverage() && !config.isSampling(),!config.isSampling())
minLearningRate=0.0001
converter.compile("/data/MultiSheetDST.xls","Another Sheet","/templates/test_template1.drl",11,2)
this.configuration.getMappedStatement(id,false)
SCAN_STATUS_PARTIAL=1
loaded.getLoaded().getDeclaredConstructor()
(baseDir == null) || !baseDir.exists()
UpgradeStepRegistrator.class
super.onAttachedToWindow()
_mtime(getDir())
position >= 0 && !playingQueue.isEmpty()
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
getMeasuredWidth()
new SAXParseException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),e)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
ATLAS_MAP_ENTRY_FIELD_COUNT=3
container.lookup(BuildContextManager.ROLE,"default")
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true)
ignoreResourceNotFound=true
ps.setNString(i,parameter)
LOGGER.error("Something went wront : {}",element,errorMessage)
dlFileShortcutLocalService.deleteFileShortcut(fileShortcutId)
ONE_MINUS_DST_ALPHA(7)
mapper.getTypeFactory().constructType(InspectContainerResponse.class)
!isEnabled() || getVisibility() == VISIBLE
IServiceManager.getService()
JsonUtf8Writer.string(buffer,strings[i])
Thread.sleep(1000)
appearance.getFloat(attr,0)
Thread.sleep(1000)
req.getContentLengthLong()
Exception e
isTerminated()
a.getDimension(attr,0)
IllegalArgumentException.class
enabled=false
selenium.isElementPresent("link=Control Panel")
mCurrentVrCompositorService == null
Thread.sleep(5000)
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
DataManager.getInstance().getDataContext(editor.getComponent())
new CrypticClue("Search the upstairs drawers of a house in a village where pirates are known to have a good time.","Pirate",348,new WorldPoint(2809,3165,1),"The house in the southeast corner of Brimhaven, northeast of Davon's Amulet Store. Kill any Pirate located around Brimhaven to obtain the key.")
hasColumn("MicroblogsEntry","creatorClassNameId")
LOG.info("Node " + path + " already exists and this is not a "+ "retry")
previousAnnotation.compareToIgnoreCase(annotation)
!mNetworkAvailable
connection.zrevrangeByLex(key,max,min)
node1.isEquivalentTo(node2)
Long.parseLong(attrValue)
Set<String>
entry.notification.cloneLight()
tmpnames[i]
m.getDeclaringClass()
formatTimeMs(fullWifiLockOnTime / 1000)
con.commit(false)
selenium.isElementPresent("link=Control Panel")
resultEndpoint.assertIsSatisfied(10000)
textureView != null && Build.VERSION.SDK_INT >= 14
mPowerManager.wakeUp(SystemClock.uptimeMillis(),"android.policy:FINGERPRINT")
r.curApp != null && r.curApp.curReceiver == r
mQsDensityContainer.getX()
List<InternalTransactionPojo>
Math.max(implicitOffset - 1,0)
this.getDrawnBoundingBoxE6().getLatitudeSpanE6()
selenium.isElementPresent("link=Control Panel")
new IllegalStateException("Result is already complete: failed")
!(exception ? throwable instanceof RuntimeException : throwable == null)
level >= 95
DEFAULT_CAPACITY=1000
context.proxyOf(entity,true)
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFSystem,false,false)
theAcceptButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"))
Integer.class
mStackScroller.getChildAtRawPosition(x,y)
public Builder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
destination.length - offset
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
ClassFileExtraction.of(Foo.class,Bar.class,AgentBuilderDefaultApplicationSuperTypeLoadingTest.class)
remaining == 0
private T myCurrentTree; 
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
/**   * Get the <i>i</i>th oldest event currently in the buffer. If <em>i</em> is outside the range 0 to the number of elements currently in the buffer, then <code>null</code> is returned.  */ public E get(int i){   if (i < 0 || i >= numElems)   return null;   return ea[(first + i) % maxSize]; } 
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES,UserHandle.getUserId(getCallingUid()))
!isVideoScalingModeSupported(mode)
Throwable err
account.getId()
annotationHelper.printAnnotationError(element,"%s annotated element should not have a private constructor")
new byte[12]
this.assignmentManager.isRegionInTransition(regionInfo) != null
this.remoteRepositories=remoteRepositories
String.class
oriMenu.isVisible() || TextUtils.isEmpty(oriUrl)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
new MultiSearchResponse(new MultiSearchResponse.Item[]{new MultiSearchResponse.Item(response,null)},randomNonNegativeLong())
Stream.of("CYPHER 3.1","CYPHER 3.4")
counter > max
Thread.sleep(1000)
log.debug("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
logger.warn("{} {}",errorCode,message)
(color & 0x00FFFFFF) | (alpha << 24)
mUiHandler.postDelayed(pae,timeout)
selenium.isElementPresent("link=Control Panel")
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
request.getDecodedRequestURI()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
page.getMembersByIdx(0).shouldBeNamed("admin","Administrator").shouldHaveGroups(2)
logger.warn("Error creating pool to " + host,t)
new IllegalStateException(sm.getString("coyoteResponse.sendError.ise"))
executeWrappedCommandProtocol(databaseName,getCommand(),createCommandDecoder(),connection,binding.getReadPreference(),commandTransformer(source))
order.isCurrent() || order.isFuture()
selenium.isElementPresent("link=Control Panel")
logger.trace("Trying to map {} to {}",t,path)
mServerFile.getModificationTimestamp() != mLocalFile.getModificationTimestampAtLastSyncForData()
i > 0
LongStream.rangeClosed(min,max)
ASHMEM_SIZE=464
lp.resolveLayoutDirection(layoutDirection)
parameter.getType()
mState.mPivotXRel != relative
mon.startsWith("okt") || mon.startsWith("oct")
matcher.find()
pubnub.getConfiguration().getProxySelector()
logger.debug("Cannot handle shuffle command ({})",e.getMessage())
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
mImm.showStatusIconInternal(mToken,getPackageName(),iconResId)
seconds * 1000L
obj == proxiedObj
PASSWORD_SCRYPT_N=11
LOG.warn("Memory Usage for the Broker (" + memLimit / (1024 * 1024) + " mb) is more than the maximum available for the JVM: " + jvmLimit / (1024 * 1024) + " mb - resetting to 70% of maximum available: " + (usage.getMemoryUsage().getLimit() / (1024 * 1024)) + " mb")
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
PrivacyManager.getRestricted(getApplicationContext(),xAppInfo.getUid(),true)
this.indexBlockSize=8192
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
id=14
type.getDeclaredConstructor()
onDetachedFromWindows()
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)
textEndOffset > document.getTextLength()
matrix != null && applyMatrix
selenium.isElementPresent("link=Control Panel")
_dlPortletInstanceSettings != null
512 * 1024 * 1024
TcpChannel channel
new Paint()
LAST_VERSION=554
statistics.addRemoveTimeNanos(System.nanoTime() - start)
SimpleModule module=new SimpleModule().addAbstractTypeMapping(IContainer.class,MyContainer.class); 
out.writeData(function)
new GridServicesImpl(ctx,this)
!file.delete()
Thread.sleep(1000)
logger.debug("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER && child.isVisibleLw()
Site.me().setRetryTimes(3).setSleepTime(1000)
@SystemApi
Map<String,Object>
preciseExchangeAmount - exchangeAmount >= 0.000001f || preciseExchangeAmount - exchangeAmount <= -0.000001f
protected abstract Block getBlock(); 
n < colP.getInt(i)
STATUS_DRAW=0x1
assertEquals(3,result.getAuthorities().size())
context.registerSubsystem(SUBSYSTEM_NAME,1,1)
Thread.sleep(1000)
mDataAuthorities == null || data == null
level >= 95
stores.next().getIdentityMap()
event.getFile() != null && event.getFile().getLength() < 0
LOG.warn("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
printf(") at %p (",returnAddress.rawValue())
startBounds.height()
KeyValueBinding attributeBinding
clipItem.coerceToText(mContext)
group.getGroupId()
shape.getMin().y
schemeSpecificParts != null && data != null
new TreePrinter<>(node,layout,stableGen,unstableGen).printTree(cursor,System.out,true,true)
callerPrincipalCallback != null
Integer.parseInt(matcher.group(1))
tvShowFragment != null && tvShowDraggableFragment != null
mConnector.execute("volume","format",vol.id,"auto")
assertEquals(9,tokens.size())
-110
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,"struct",className)
config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)
diff >= 86100
public class CourierNew extends BasicFontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
botToken == null
from > to
System.nanoTime()
type.getDeclaredConstructor()
heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask
mDisplay.getRealMetrics(mDisplayMetrics)
telephony.isIdle(getOpPackageName())
Log_OC.e(TAG,"Trying to share a NULL OCFile")
NetworkUtils.checkConnection(getActivity())
private ErrorPageFilter filter=new ErrorPageFilter(); 
this.restTemplate.postForEntity(webhookUrl,message,Void.class)
telephony.isIdle(getOpPackageName())
mGnssCallback != null
new ServletHolder(getTransactionCountByBlockNumServlet)
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
qname.equals(CommonClassNames.JAVA_LANG_STRING)
@Override public Variable emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new AMD64ArrayEqualsOp(this,kind,result,array1,array2,asAllocatable(length)));   return result; } 
i >>> 48
TelephonyManager.getDefault().getCurrentPhoneType()
reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
testClass.getSimpleName()
owner == null || resultType instanceof PsiPrimitiveType
relatedProduct.getRelatedProduct()
toolchainBuilder.addUnfilteredCxxFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
TreeSet<String>
typeSettingsProperties.toString()
this.logger.isDebugEnabled()
Arrays.asList("txt","text","yml","properties","csv","json","xml","atom","rss","png","jpe","jpeg","jpg","gif","wbmp","bmp")
lock.isHeldByCurrentThread()
!myIsDisposed && editor.getComponent().isShowing() && !editor.isViewer()
a.lastIndexOf(':')
addr.getHostAddress()
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "weight".equals(key)|| "label".equals(key)
return 2; 
assertEquals("Response header " + name,value,result.getResponse().getHeader(name))
project == null || project.isDisposed()
!mDreamsEnabledOnBatteryConfig
myFixture.testCompletionVariants("/jsp/actionLink-completionvariants-no-namespace.jsp","/","/WEB-INF","/actionLink-completionvariants-no-namespace.jsp","/actionLink/","/rootActionLink.action")
updateChildren()
bridgeMethod.getActualModifiers(true,getVisibility())
dirDirtyRecursively(myProject.getBaseDir(),true)
config != null && !config.isEmpty()
holder == null || holder.provider == null
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") DeploymentUnitProcessingException sessionTypeNotSpecified(String bean); 
SecurityUtil.remove(s)
HeaderSpec.this
Boolean.parseBoolean(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
getResultHandler(result).handleResult(exchange,result).onErrorResume(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
drawable != null
exp instanceof ConnectTransportException || exp.getCause() instanceof ConnectTransportException
collector.getRangeCounters(range)
TelephonyManager.getDefault().getCurrentPhoneType()
type.isEmpty()
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
onDetachedFromWindow()
SKELETONS_VERSION=15
activeEditor.checkModified(true)
answer == null || comparator.compare(value,answer) < 0
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
MultiFields.getFields(index2)
sep < 0 || sep > j
loaded.getLoaded().getDeclaredConstructor()
put("1.7",CompilerOptions_VERSION_1_7)
holder == null || holder.provider == null
return true; 
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
eq(false)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
movementComponent.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
e_("")
realm.checkIfValid()
timeNanos >= DateTimeUtils.NANOS_PER_DAY
mSupportsBearing ? 1 : 0
enableRefreshTime=true
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(builder)
settings.setTextSize(WebSettings.TextSize.SMALLER)
loadAnimator(fragment,transition,false,transitionStyle)
stream.transportReportStatus(status,true,new Metadata())
mAuthorities.valueAt(i)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
myElementHint != null && getCurrentItem() != null
assertClusterSizeEventually(2,nodes[0])
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValueExact()
other.getClass().getName()
Thread.sleep(250)
mCurrentVrCompositorService == null
responseClass == Void.class || responseClass == Void.TYPE
new RepresentorImpl.BuilderImpl<>(typeClass,nameFunction,biConsumer,relatedCollectionsSupplier)
typeInfo.keySet()
loaded.getLoaded().getDeclaredConstructor()
impl.getClass().getDeclaredMethod("join",InetAddress.class)
metadata.getPropertyClosureIterator()
FBUtilities.getLocalAddress()
Math.min(desired,heightSize)
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask,null)
DEBUG=false
ExportImportConfigurationParameterMapFactoryUtil.buildFullPublishParameterMap()
final ClientState clientState=(ClientState)msg.obj; 
final SimulatedDpad mSimulatedDpad; 
T item
matchesToValidate.get(0)
pos1.getBlockY()
Math.abs(path.getDistance() - distance) > 4
a.getDimension(attr,0)
new StoreFile(this.fs,linkFilePath,testConf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,0,null,false)
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
AMQ6000Test.class
mRepeat > 0
Long.parseLong(val)
private static HeadlessEnvironment env; 
Cheese.class
origin.realComponent().doubleValue() >= other
UserHandle.myUserId()
Throwable e
event.getRawX()
selenium.isElementPresent("link=Control Panel")
timeout=10000
position <= firstPos
Thread.sleep(1000)
new ShowArticleOnTouchListener(helpFileName,activity,title)
AssetTagFinderUtil.countByG_N(_scopeGroup.getGroupId(),assetTagName)
contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
gatt.enableAdvertisingSet(this.advertiserId,enable,timeout)
progress < 5000
new TimedTransRunner("test/org/pentaho/di/run/sortedmerge/SortedMergeSimple.ktr",LogWriter.LOG_LEVEL_ERROR,AllRunTests.getOldTargetDatabase(),AllRunTests.getNewTargetDatabase(),1000000)
Preconditions.checkNotNull(manager,"manager")
lhs == null || !lhs.isValid()
selenium.isElementPresent("link=Control Panel")
loaded.getLoaded().getDeclaredConstructor()
next_write_buffers.remove(0)
encoded != Integer.MAX_VALUE
selenium.isElementPresent("link=Control Panel")
Timber.i("Dismiss dialogs")
Throwable exception
searchUICore.search(text,updateResult,new ResultMatcher<SearchResult>(){   SearchResultCollection regionResultCollection=null;   SearchCoreAPI regionResultApi=null;   List<SearchResult> results=new ArrayList<>();   @Override public boolean publish(  SearchResult object){     if (paused || cancelPrev) {       if (results.size() > 0) {         getResultCollection().addSearchResults(results,true,true);       }       return false;     } switch (object.objectType) { case SEARCH_API_FINISHED:       final SearchCoreAPI searchApi=(SearchCoreAPI)object.object;     final List<SearchResult> apiResults;   final SearchPhrase phrase=object.requiredSearchPhrase; final SearchCoreAPI regionApi=regionResultApi; final SearchResultCollection regionCollection=regionResultCollection; final boolean hasRegionCollection=(searchApi == regionApi && regionCollection != null); if (hasRegionCollection) { apiResults=regionCollection.getCurrentSearchResults(); }  else { apiResults=results; } regionResultApi=null; regionResultCollection=null; results=new ArrayList<>(); showApiResults(apiResults,phrase,hasRegionCollection); break; case SEARCH_API_REGION_FINISHED: regionResultApi=(SearchCoreAPI)object.object; final SearchPhrase regionPhrase=object.requiredSearchPhrase; regionResultCollection=new SearchResultCollection(regionPhrase).addSearchResults(results,true,true); showRegionResults(regionResultCollection); break; case PARTIAL_LOCATION: break; default : results.add(object); } return false; } @Override public boolean isCancelled(){ return paused || cancelPrev; } } )
new IntervalData(target,lirGenRes,registerAllocationConfig)
tableHistory.getHistoryIds(Model.getSingleton().getSession().getSessionId())
Measures.nDCG(results,test)
msg.payload().duplicate()
center.getZ()
get(PLUGIN_GO_PROVIDED_PATH)
users.toArray(new String[users.size()])
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
removeModelSpecificMarkup(base,namePattern)
slotId <= 0
RectF r=(RectF)o; 
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
fourCC.equalsIgnoreCase("TTML") || fourCC.equalsIgnoreCase("DFXP")
getEffectiveHstsEnforced()
LocalFileSystem.getInstance().findFileByIoFile(file)
JSONValue.parseWithException(value)
note == null || mAddNote
scope.getVariable(name)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character","AnyObject")
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
side.getCapitalized()
Gdx.files.internal(fileName).pathWithoutExtension()
sDefaults.putBoolean(KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL,false)
Slog.w(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
in.markReaderIndex().readByte()
ResourceFilterImpl.class
new TraceBasedLocalRedeclarationChecker(trace,overloadChecker)
line.substring(0,p).trim().toLowerCase(Locale.US)
Throwable err
portletDataContext.getBooleanParameter(NAMESPACE,"record-sets")
!ON_TOP
new FormAttachment(wSeq,-margin)
Arrays.asList(HTTPConstants.GET,HTTPConstants.HEAD,HTTPConstants.OPTIONS,HTTPConstants.TRACE)
assertEquals(2,beanInfo.getAttributes().length)
this.data=newData
contentType != null && charset == null
getService().animateCollapseNotifications()
"$" + name
telephony.isIdle(getOpPackageName())
parent instanceof AppWidgetHostView || parent == null
type.getDeclaredConstructor()
Log_OC.d(TAG,"onSaveInstanceState()")
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
id=38
mWM.removeViewImmediate(mView)
available > 0 || !read
hasColumn("Calendar","timeZoneId")
Thread.sleep(500)
_log.warn(ioe,ioe)
Helpers.msgLong(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
scrollWebElementIntoView(webElement)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(streamid,id)
delegates.tabs.findTabMapEntry(jobMeta)
String message
@Override public Number reduce(List<Number> combinedResultList){   long reducedValue=0;   for (  MutableLongValue value : combinedResultList) {     reducedValue+=value.longValue();   }   return new MutableLongValue(reducedValue); } 
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
availScrollRange != 0
log.warn("Expected " + s.getStyleId() + " to have <w:basedOn ??")
mStackScroller.getChildAtRawPosition(x,y)
Long.parseLong(attrValue)
return true; 
attributeValue.endsWith(type)
mSyncStatus.valueAt(i)
Assert.assertNotEquals(last,next)
selenium.click("//li[4]/span/a/span")
getMyApplication().getSelectedGpxHelper().selectGpxFile(model.getGpx(),false,false)
mapLayerConfiguration.setOpacityFactor(((float)cachedOverlayTransparency) / 255.0f)
FluentIterable.from(method.getAnnotations())
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
postfix.startsWith("id")
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
new IllegalArgumentException(sm.getString("pojoMethodMapping.invalidType",value,type.getName()))
mUserPaddingEnd >= 0
type.getDeclaredConstructor()
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
CommonPreference<Boolean>
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
args.length > 1 && args[1] instanceof String
ap.getSsidStr()
selenium.isElementPresent("link=Control Panel")
Exception iae
!hasNextChunk()
session.getPlaybackType() == MediaSession.PLAYBACK_TYPE_REMOTE && mRvc != null
analysis.getType(aggregate)
displayList != null && displayList.isValid()
config.properties().get(REDIS_SHARED_POOL) != null
getContext().enforceCallingPermission(android.Manifest.permission.DUMP,message)
new Intent(Intent.ACTION_USER_PRESENT)
portletDataContextClone.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Log.d(TAG,"setSubtitleAnchor in MediaPlayer")
Thread.currentThread().interrupt()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
addr.getHostAddress()
vb.getData().limit()
/**   * @author Sergey.Malenkov  */ public class GradientViewport extends JBViewport {   private final Insets myInsets;   private final boolean myAlways;   public GradientViewport(  Component view,  Insets insets,  boolean forScrollBars){     myInsets=new Insets(insets.top,insets.left,insets.bottom,insets.right);     myAlways=forScrollBars;     setView(view);   }   protected Component getHeader(){     return null;   }   @Nullable protected Color getViewColor(){     Component view=getView();     return view == null ? null : view.getBackground();   }   @Override public void paint(  Graphics g){     super.paint(g);     paintGradient(g);   }   protected void paintGradient(  Graphics g){     g=g.create();     try {       Color background=getViewColor();       Component header=getHeader();       if (header != null) {         header.setBounds(0,0,getWidth(),header.getPreferredSize().height);         if (background != null) {           g.setColor(background);           g.fillRect(header.getX(),header.getY(),header.getWidth(),header.getHeight());         }       }       if (g instanceof Graphics2D && background != null && !Registry.is("ui.no.bangs.and.whistles")) {         paintGradient((Graphics2D)g,background,0,header == null ? 0 : header.getHeight());       }       if (header != null) {         header.paint(g);       }     }   finally {       g.dispose();     }   }   private void paintGradient(  Graphics2D g2d,  Color background,  int x1,  int y1){     Component view=getView();     if (background != null && view != null) {       int x2=x1, x3=getWidth() - x2, x4=x3;       int y2=y1, y3=getHeight() - y2, y4=y3;       if (myInsets.left > 0 && view.getX() < 0) {         x2+=myInsets.left;       }       if (myInsets.top > 0 && view.getY() < 0) {         y2+=myInsets.top;       }       if (myInsets.right > 0 && view.getX() > getWidth() - view.getWidth()) {         x3-=myInsets.right;       }       if (myInsets.bottom > 0 && view.getY() > getHeight() - view.getHeight()) {         y3-=myInsets.bottom;       }       Component parent=myAlways ? null : getParent();       if (parent instanceof JScrollPane) {         JScrollPane pane=(JScrollPane)parent;         JScrollBar vBar=pane.getVerticalScrollBar();         if (vBar != null && vBar.isVisible()) {           if (vBar.getX() < getX()) {             x2=x1;           }  else {             x3=x4;           }         }         JScrollBar hBar=pane.getHorizontalScrollBar();         if (hBar != null && hBar.isVisible()) {           if (hBar.getY() < getY()) {             y2=y1;           }  else {             y3=y4;           }         }       }       Color transparent=ColorUtil.toAlpha(background,0);       if (x1 != x2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x2,y1,transparent));         g2d.fillPolygon(new int[]{x1,x2,x2,x1},new int[]{y1,y2,y3,y4},4);       }       if (x3 != x4) {         g2d.setPaint(new GradientPaint(x3,y1,transparent,x4,y1,background));         g2d.fillPolygon(new int[]{x4,x3,x3,x4},new int[]{y1,y2,y3,y4},4);       }       if (y1 != y2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x1,y2,transparent));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y1,y2,y2,y1},4);       }       if (y3 != y4) {         g2d.setPaint(new GradientPaint(x1,y3,transparent,x1,y4,background));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y4,y3,y3,y4},4);       }     }   } } 
selenium.click("//li[4]/span/a/span")
isLockscreenPublicMode(userId)
Boolean.parseBoolean(getOptional("kylin.query.disable-cube-noagg-sql","false"))
link.bone.getWorldBindRotation()
level >= 95
loaded.getLoaded().getDeclaredConstructor()
"Center loss is " + intraClassScore
param.setThrowable(new FileNotFoundException("XPrivacy"))
lexerEngine.equalAny(Symbol.LT_GT,Symbol.BANG_EQ,Symbol.BANG_GT,Symbol.BANG_LT,DefaultKeyword.LIKE)
override.asString()
calendar.set(Calendar.YEAR,2030)
getActivity()
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now),listenerName)
JDBCUtils.safeGetString(dbResult,"PROCESS")
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
mDataAuthorities == null || data == null
OperationSetPersistentPresenceGibberishImpl persistentPresence=new OperationSetPersistentPresenceGibberishImpl(this); 
ArraysUtil.toString(extensionArray)
UpgradeStepRegistrator.class
servers == null || servers.isEmpty()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
destination.isQueue()
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
Localization.menuTitle("Push entries to external application (%0)",appName)
r2.getName()
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()|| shardingRule.getDataSourceRule().getDefaultDataSource().isPresent()
connector.setPort(9080)
ctx.writeAndFlush("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
configuration.family()
mTask != null && mTask.icon != null
TelephonyManager.getDefault().getCurrentPhoneType()
removeUserGroupIds.isEmpty()
Integer.toHexString(realQuality)
DEBUG=false
expandableView.getIntrinsicHeight()
params.getSimulatedPlatformVersion()
DEFAULT_ALLOW_CALLS=true
mBluetoothGatt.registerScanner(this,mWorkSource)
dpToPx(64f)
dkSign.getSignatureId()
assetTagLocalService.checkTags(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
event.getRawX()
DEBUG=false
validateHasRequiredPropertyElements(element,filePath)
maxTotalConnections <= 0
canWrite(clazz,mediaType)
BackupManagerServiceInterface svc=mService; 
row("p_comment",null,7.0,0.0,null,null,null)
new RuntimeException(e)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
field.getType()
verify(connection,exception)
UserHandle.myUserId()
!disableBluetoothContactSharing
urlToLoad.getText().toString().equals("")
scores.getAlgorithm()
classes.size()
SSLParametersImpl.getDefaultX509TrustManager()
mCryptoPerformanceMap.get(userId)
tfs.ls(Constants.PATH_SEPARATOR,true)
targetClass != null && field != null
solve(false)
ev.mStateSamples.length >= NS
setValue(object,value.intValue())
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
event.getX()
sizeModeClass.equals("ProportionalSizeMode")
filename == null || filename.trim().equals("")
StringBuilder padding=new StringBuilder("\t"); 
resource.toURI()
FastMath.min(origin,num.doubleValue())
new UnsupportedOperationException(getClass().getName())
service.asBinder().pingBinder()
needRefresh=true
Trans != NO_TRANSPOSE
PermissionCacheUtil.clearResourceCache()
LOG.debug("Connecting to port {}...",port)
disable2ForUser(what,token,pkg,mCurrentUserId)
map_keys=new RapidsStringsV3(fr.keySet().toArray(new String[]{}))
mEditor.startSelectionActionMode()
servletRequestContext.getOriginalRequest()
loaded.getLoaded().getDeclaredConstructor()
clusterProperties.getMaxRedirects()
{abiOverride}
15 * 60 * 1000
Proxy.getInvocationHandler(proxy).getClass().getName()
mUiHandler.postDelayed(pae,timeout)
from >= to
!channel.isOpen()
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,velocityContext,_velocityEngine,_templateContextHelper,false)
new CompositeException(t,e)
sr.isForeground || sr.fgRequired
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
allowedIdentifiersCheckDigitsInts[i]
CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)
FILES_BYTES * 1000.0
/**   * Helper method, has same effect as <pre>return enhance(cls, interfaces, ih, loader, null);</pre>  * @see #enhance(Class,Class[],MethodInterceptor,ClassLoader,Method,MethodFilter)  */ public static Factory enhance(Class cls,Class interfaces[],Callback callback,ClassLoader loader){   return enhanceHelper(cls,interfaces,callback,loader,null); } 
app().gitblit()
log.info("jmeterthread.startearlier=true (see jmeter.properties)")
mQsDensityContainer.getLayoutParams()
contents.getBytes("UTF-8")
readHex(in,28,true)
getPath("InputDefaultConfig.java")
display.getRealMetrics(dm)
Boolean.valueOf(viewContext.getProperties().get(PROPERTY_SLIDER_SECURITY_ENABLED))
getBoolean(ASYNC_CLIENT + "acceptAnyCertificate",false)
listener.onTestIgnored(test)
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
note.getAlarm() != null && !note.isReminderFired()
mAppToken.isVisible()
WordPress.getCurrentBlog().getLocalTableBlogId()
startGridsMultiThreaded(NODES_CNT)
attributes.getAllFlags()
setFullscreen(true)
RecentsHorizontalScrollView.super.removeView(view)
14 * Bytes.SIZEOF_LONG
mRS.nMeshGetIndices(mID,idxIDs,primitives,idxCount)
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
required=true
assertCorrectionsByOrder(rule,"Rytmus","Rhythmus","Remus")
PropertyValuesAnimationAdapter<T>
loaded.getLoaded().getDeclaredConstructor()
remaining == 0
new UnderFileStatus("dummy",0L,isDirectory,0L,"owner","group",(short)077)
ApplicationManager.getApplication().invokeAndWait(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
timeoutMs > 0
mRefreshView.getBottom() >= mRefreshViewHeight + 20
setResult(RESULT_FIRST_USER)
proxy.getHost()
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
id=21
pluginContainer.lookup(ComponentConfigurator.ROLE,"basic",pluginRealm)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
intervalFraction * (nextValue - prevValue)
Timber.e(e,"Failed to initialize local key store")
Thread.sleep(1000)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IllegalArgumentException {   return JSON.writeValueAsString(object); } 
concreteInterface.getInterfaces()
query.elements()
_buildTemplateWithGradle("war-mvc-portlet","war-mvc-dependency-management","--dependency-management-enabled")
req.getPieceRange()
AbstractCallTargetNode directCall=(AbstractCallTargetNode)invoke.callTarget(); 
zkClient.destroy()
List<URLDetail>
displayList != null && displayList.isValid()
new MavenArtifactSearcher(true)
PsiBundle.message("cannot.resolve.symbol")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
@Override public CacheDataSource createDataSource(){   return new CacheDataSource(cache,upstreamFactory.createDataSource(),cacheReadDataSourceFactory.createDataSource(),cacheWriteDataSinkFactory.createDataSink(),flags,eventListener); } 
setVerticalAlignment(CENTER)
resultTargetUser != null && !resultTargetUser.isEmpty()
d1.setRemoveAbandonedTimeout(2)
SCHEMA_VERSION=1000
request.getPathInfo()
annotationHelper.printAnnotationError(element,"%s annotated element should not have a private constructor")
@InputIntMethodAnnotation(42)
clazz == null || !(clazz instanceof JSQualifiedNamedElement)
m.getDeclaringClass()
mMccStr == null
i=1
newReader == null || newReader == this.reader
private View frame=null; 
Boolean.parseBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
MAX=5
mDatabaseHandler == null || mDatabaseHandler.isClosed()
stackIterator.remove()
new AnAction("Top | Bottom","",VcsUtil.ourNotDot){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=false;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourNotDot : VcsUtil.ourDot);   } } 
blog.getLocalTableBlogId()
settingId != null && runtimeInfos != null
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
!getLocationEnabled()
intervalFraction * (nextValue - prevValue)
new PacketDecoder(jsonSupport,ackManager)
user.getUsername()
store.setConfigFile(usersFile)
PULL_TIME=167
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
editorFactory.create("simple",getTerminal(),System.in,System.out)
substitution == null
!fields.contains(name)
mPowerManager.isInteractive()
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
Predicate<CharSequence>
toByteBuffer(index,length)
position + dockDividerWidth
Debug.e("Texture asset not found, " + pAssetPath,e)
this.func_180475_a(scoreobjective1,res)
DEBUG_LOG_ENABLED=false
new ObjectMapper().readerFor(DiskBalancerCluster.class)
ONE_MINUS_DST_ALPHA(7)
logger.debug("Line-in of {} is not connected",getUDN())
createDouble(buffer.length(),init,workspace)
Long.parseLong(id)
win.mAppToken != null ? win.mAppToken.mAppStopped : true
DISABLE_TIMEOUT=20000
attributeMap.get(attributeName)
DefaultTransactionExecutor.class
Long.parseLong(stats.get("size").toString())
"Camera resolution: " + cameraResolution
getLineCount(myDocument2)
Object tag
LOGGER.info("Using proxy address [{}]",proxy)
selenium.click("//li[4]/span/a/span")
MAX_LENGTH=200
resource.toURI()
T o=latest[index]; 
new ThingUID(thingTypeUID,bridgeUID,light.getId())
MIN_NET_ID=100
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
TelephonyManager.getDefault().getCurrentPhoneType()
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,LiferayRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
getClient().prepareSearch(resolveIndexName()).setTypes(IndexAuditTrail.DOC_TYPE).fields(fieldList())
return 61; 
type.getDeclaredConstructor()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
isAvailable(oldStatus)
annotations.remove(node)
Time.currentTimeMillis()
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"gfxinfo",pw)
_start >= 0
XContentType.YAML.mediaType()
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class,true)
boolean value() default true; 
TunablyAggressiveChaosMonkey chaos=new TunablyAggressiveChaosMonkey(ctx); 
type.getDeclaredConstructor()
getKeyDesc(keyRowMeta,keyNrs,one)
state.value == rotationLocked && state.contentDescription != null
Vector<Servlet>
stat.st_mode.intValue()
onFailure(statusCode,headers,handler)
InputType.recurrent(convNIn,length)
selenium.isElementPresent("link=Control Panel")
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
new IllegalArgumentException("Mouse or keyboard cannot be null")
256 * 256 * 12.8
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
CreateGrid(1,2)
methodsToImplement(type,methods)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
logger.debug("copy {} to {}",srcFile.getAbsolutePath(),destPath)
(Number)array[this.index]
getConfig()
RESULT_TIMEOUT=5000
that.getPath() == null && getPath() != null
Preconditions.checkState(state.discoveredInputs != null,"discoverInputs() returned null on action %s",action)
curRowNum >= segmentSize && segmentSize > 0
config.getIdleConnectionInPoolTimeoutInMs()
new SimpleDateFormat(format,JSON.defaultLocale)
this.instanceManager != null && this.scheduler != null
Helpers.exec(j4p,"setProfileFabs(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
builder.breakOp(" ")
timeStampVector.getMutator().setSafe(index,value)
new Paint()
new ImportControl(pkg,regex)
userPreferences.getBoolean(context.getString(R.string.pref_share_contacts_key),true)
mRecomputeLauncherService.shutdown()
getDelegate().getDefaultCipherSuites()
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
wms.getGeoServer().getGlobal()
mGnssCallback != null
builder.length() == 0 && s != null
Variable emitBitScanReverse(Value operand); 
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
testRunner.addTestListener(itl)
k < FILES
MethodConstant.ofPrivileged(instrumentedMethod.asDefined())
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue) && !CommonUtils.equalObjects(oldValue,value)
mComment.getId()
selectedIndicatorHeight >= 0
getModel().getColumnCount()
!txEnabled() || portableEnabled()
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
Exception.class
!mHasCallback || mCurrentViewId == null
DEBUG=false
loaded.getLoaded().getDeclaredConstructor()
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
parsedResult.getType()
settings.getPosition()
parts.length > 1
ArraySet<UidRange>
VectorAllocator.getAllocator(vv,200)
RetryHandlingBlockMasterClient.class
context == null || context == EGL_NO_CONTEXT
SamplingProfiler.newThreadGroupThreadSet(group)
SVID_SHIFT_WIDTH=8
null == mImage || shadow
mQSPanel != null && mQSPanel.getHost() != null
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
Build.VERSION.SDK_INT < 14
m.size()
@Override @NotNull protected T handlePostfixInsert(@NotNull InsertionContext context,@NotNull PrefixExpressionContext expressionContext){   Project project=expressionContext.expression.getProject();   JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);   PsiElementFactory elementFactory=psiFacade.getElementFactory();   PrefixExpressionContext fixedContext=expressionContext.fixExpression();   PsiStatement targetStatement=fixedContext.getContainingStatement();   assert targetStatement != null;   PsiElement expressionCopy=fixedContext.expression.copy();   TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression);   @SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement);   return replaced; } 
st.setNCharacterStream(index,characterStream.asReader(),characterStream.getLength())
fragmentTransaction.add(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
private MultiplePermissionsListener listener; 
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
mIconError != 0
new int[101]
desktopSharingButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
selenium.isElementPresent("link=Control Panel")
grammar.getTokenDisplayNames()
invocation.addAttachments(context)
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
entity.addComponent(delayedComponent)
emitReturnNoVal()
assertLength(1,builder.getErrors())
demoted.getPolicyWeight()
hazelcastFactory.newHazelcastClient(newClientConfig())
cause instanceof LinkageError
new RelationIndexStatusReport(false,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
StringBuilder sb=new StringBuilder(); 
public StandardFilter create(TokenStream input){   return new StandardFilter(input); } 
private Text wDirectory; 
(mOomMinFreeHigh[5] * 7) / 4
"Invalid modules directory: " + bundlesDir
dst.limit()
"Content-Type".equalsIgnoreCase(name)
highJson.getDouble(i)
InputType.convolutionalFlat(height,width,channels)
settings.readLPw(null,0,false)
new MapProducerCapabilities(false,false,false,true,null)
distance(bottomLeft,topLeft)
waitForDownWithWait(CCMBridge.IP_PREFIX + '2',c.cluster,10)
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(1000)
format.getName()
selenium.isElementPresent("link=Control Panel")
sTestCaseCounter == 0
RecentsVerticalScrollView.super.removeView(view)
simple.getToReceivedDate()
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group)
tagService.getTagsAsString(task.getId(),true)
60L + 120L
c == null || c == interfaceClass
StringBuffer builder
assertEquals(6358481l,received.get(0)[1])
new Interval(2,6,3)
mFragments.mCurState < Fragment.CONTENT && mFragments.mActivity != null
info.getLine1NumberForSubscriber(subId,mContext.getOpPackageName())
new RecordReaderDataSetIterator(rr,null,batchSize,labelIndex,labelIndex,numPossibleLabels,-1,regression)
flags_=6
Math.max(leftLen,rightLen)
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
Assert.assertEquals(0,fastJsonConfig.getFeatures().length)
entry.rxPackets == 0 && entry.txPackets == 0
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX,true)
NetworkUtils.checkConnection(getActivity())
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
segs == null
case 14: 
lp.viewType == ITEM_VIEW_TYPE_HEADER_OR_FOOTER
contentHolder.getChildren().setAll(content)
"DROP INDEX " + PATTERN_ITEM_INDEX
isRunning()
/**   * Retrieves X.  * @return a value  */ public T1 getX(){   return null; } 
watch.taken()
Assert.assertEquals(120L,ownerCapsuleNew.getFreeNetUsage())
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
DEBUG=false
assertEquals(324,error)
graph.getEdgesAndMetaEdges()
b.getAtmosphereResources().contains(r)
pathParameterMap != null
qdgraphics=new QDGraphics(QDConstants.k32BGRAPixelFormat,qdrect)
diskThresholdSettings.getFreeDiskThresholdFloodStage()
addDaysAndCheckForCompletion(4,NextEvent.PAYMENT_ERROR)
simpleEl.element("simple-trigger-value")
createContractFromJson(contractName,json)
Log.w(TAG,"releaseInfoLock error",e)
logger.debug("File descriptor is: " + fd)
convert31YToMeters(yB,yA)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
Object[]
assertDurationLessThan(stopDate - firstStopLogDate,10_000)
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
Exception e
typeSettingsProperties.toSortedString()
types.get(i)
(spoon.getRepository() != null) && (transMeta.getObjectId() != null) && (spoon.getRepository().getTransformationLock(transMeta.getObjectId()) != null)
anyInt()
DEFAULT_LOCK_TIMEOUT=600000
Thread.sleep(1000)
new IllegalStateException(sm.getString("coyoteResponse.setBufferSize.ise"))
NavigatePointFragment.this.getContext()
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
location.getRawSchemeSpecificPart()
return type; 
(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
mService.factoryReset(mContext.getOpPackageName())
this.exchanges.remove(requestId)
mCurrentVrCompositorService == null
!token.hasVisible && !mClosingApps.contains(token) && !token.mDeferRemoval
NumberUtils.decodeHighUnsignedNibble(encodedInstruction[5])
activity == null || activity.isFinishing()
runningTasks.remove(assignedTask)
parameters2.size()
WEB_SYNC_MANAGER=false
mService.factoryReset(mContext.getOpPackageName())
useSmDefault=true
Throwable e
mccMncs != null
selenium.isElementPresent("link=Control Panel")
Assert.assertEquals(editor.getMarkersQuantity(WARNING_OVERVIEW),12)
selenium.isElementPresent("link=Control Panel")
type.getDeclaredConstructor()
id=10848
type.createBlockBuilder(new BlockBuilderStatus(),4)
selenium.isElementPresent("link=Control Panel")
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
requestFocusInWindow()
selenium.isElementPresent("link=Control Panel")
Exception e
selenium.isElementPresent("link=Control Panel")
Long.parseLong(delay)
mDisplay.getRealMetrics(mDisplayMetrics)
out.writeByte(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
Set<K>
blackHoleGenerator.getDeclaredConstructor()
mMccStr == null
target.getDestinationLinkAddress()
private final QSDetailClipper mClipper; 
Exception t2
myLayeredPane.getSize()
!FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)
value.toString().getBytes(StandardCharsets.UTF_16)
public KeywordTokenizer create(Reader input){   return new KeywordTokenizer(input); } 
assertEquals(2480,res.getTime(0,1) / 1000,30)
SmsHeader.toByteArray(header).length + 2
args.toArray()
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize()
mapper.getFactory()
_rate_decay != 1
GL20.glUniform2iv(location,v)
mAdapter != null && mDataSetObserver != null
negative.contains(word)
mWidth - mMinWidth
logger.trace("rapidRefreshFutureEnd stopping")
triggerProto.getAfterEndOfWindow()
cfs.getSSTables().size() > 1 || !cfs.getTracker().getCompacting().isEmpty()
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
version == null || version.equals("")
new IndexWriter(indexStore,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
private final QSDetailClipper mClipper; 
stts.readInt()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding())
t.toString()
errVisitor.getJspSourceNode() instanceof Node.Scriptlet || errVisitor.getJspSourceNode() instanceof Node.Declaration
mService.disableNetwork(netId,mContext.getOpPackageName())
task.topRunningActivityLocked() != null && task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
(serviceContext == null) || !serviceContext.isSignedIn()
drReplicate(drType,null,updateVer,topVer)
type.getDeclaredConstructor()
!componentSystems.hasNext()
((Context)entry.value).destroySubcontext(name.getSuffix(1))
getSelectedIconColorRes()
Constant.isDevBuild() && !SwingUtilities.isEventDispatchThread() && !Thread.currentThread().getName().startsWith("ZAP")&& !Thread.currentThread().getName().startsWith("DirBuster")
new byte[20]
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,160}
minutes >= 2 || (minutes > 0 && seconds == 0)
new AndroidInstrumentationInfo(targetApk,instrumentationApk)
items[20]
resId == R.string.local_index_unselect_gpx_file || resId == R.string.local_index_select_gpx_file
hasCapability(GPS_CAPABILITY_MSB)
downloadFragment == null || downloadFragment.getDownloadActivity() == null
Messages.getString("BaseStep.SafeMode.Exception.MixingLayout","" + (i + 1),referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
testBit(access,Opcodes.ACC_PROTECTED)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
this.constraints.updateFromTuple(workingMemory,leftTuple)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
ap.getSsidStr()
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).bold("#")
formatTimeMs(fullWifiLockOnTime / 1000)
d.getURIPath()
exception.getMessage()
recalculateRouteInBackground(lastFixedLocation,finalLocation,currentGPXRoute)
json.length() - 1
@Override public Response header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
constructor.newInstance(conf,keyPrefix,options,writer,charset,fs)
DLFileEntry.class
!mQuietEnable
mapper.writeValueAsBytes(segment)
raw.getOutParameters()
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
Mono.subscriberContext()
Log.w(TAG,"Unable to resolve SystemUI's UID.",e)
uri.getAssetName().toLowerCase()
Simple.forClass(skylarkType)
ONE_MINUS_DST_ALPHA(7)
selenium.isElementPresent("link=Control Panel")
CompletableFuture<Void>
@Specialization protected LLVMBoxedPrimitive fromDouble(double value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
popupWindow.setContentWidth(menuWidth)
DEBUG=false
CassandraRecordSetProvider.class
Log.e(TAG,"This will become an error",ex)
loaded.getLoaded().getDeclaredConstructor()
new StyleChart.Builder().width(CHART_WIDTH_PX,LengthUnit.Px).height(CHART_HEIGHT_PX,LengthUnit.Px).margin(LengthUnit.Px,60,60,75,10)
regenerateBackground()
realm.getColumnIndices()
fragmentCollectionPersistence.findByGroupId(groupId,start,end,orderByComparator)
!TextUtils.isEmpty(defaultRingtoneName)
IndexReader.open(dir)
setValue(object,value.intValue())
private String getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
Exception ex
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
StringBuilder sb=new StringBuilder(); 
newReader == null || newReader == this.reader
methodExists(altName,fieldNode,false)
DISPLAY_TASKS_PORTRAIT=7
!reportWhenNoStatementFollow
buffer.putDouble(bo,value)
maxSize < (used / 1024 / 1024)
assertEquals(1,configsInJars.size())
status().isSeeOther()
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
complete.expectedBodiesReceivedInAnyOrder("finish","stop","faulted","except")
@InputMagicNumberIntMethodAnnotation(value=43)
log.warn(sm.getString("contextConfig.role.runas",runAs))
!hasOnClickListeners()
public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
socketFile.toString().length() >= 104
Boolean.valueOf(value)
selenium.isElementPresent("link=Control Panel")
new ToolbarActionBar(toolbar)
Nd4j.create(new int[]{1,nParams},'c')
new PyDebugValue(slice,value.getType(),null,value.getValue(),value.isContainer(),value.isReturnedVal(),value.isErrorOnEval(),parent,value.getFrameAccessor())
matchAxisFilter != 0 || wrapAxisFilter != 0
mUiHandler.removeCallbacks(pae)
oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
group != null && this == group.mInternalConnection
mMccStr == null
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
prob <= phi
VMDebug.attachAgent(library,classLoader)
userId != UserHandle.getCallingUserId() && checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
i.view_count >= 1000
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
nodeEngine.getSharedService(LockService.SERVICE_NAME)
ACRA.log.w(LOG_TAG,"Error while converting " + key.name() + " to JSON.",e)
new NameAlias(nameAlias)
queueLength.asString()
makeString(list,",","(",")",-1)
buffer.flip()
mFlexItemInEdit.setAlignSelf(AlignItems.FLEX_START)
ParserUtils.eatElement(builder,PARAMETER)
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
appearance.getFloat(attr,0)
mLteSignalStrength > 31
new GormAwareDataBindingListener(tmpBindingResult)
Thread.sleep(1000)
!_informAdministrator || !_log.isWarnEnabled()
Object[]
targetInfo != null && targetInfo.metaData != null
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SUCCESSFUL,getHttpStatusSeries(result))
new IllegalStateException("Encountered null sequence records for input index " + i)
FRAME_STATS_COUNT=16
private final MediaDriverBroadcastReceiver mediaDriverBroadcastReceiver; 
longSize >= 960
mAdapter != null && mDataSetObserver != null
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_configuration,_templateContextHelper,false)
generateRandomStringArray(2,4,false,false)
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
log.makeAlert(e,"Failed to remove segment")
-37.0f
this.session.users().getServiceAccount(client)
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
"Stream " + importerName
UClass sourceClass=UastUtils.findContaining(sourcePsi,UClass.class); 
factor >= 1.0
info.getURL()
StringBuilder sb=new StringBuilder(); 
mService.factoryReset(mContext.getOpPackageName())
waitLatch.await()
parameterTokens.set(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
format(conf,true)
list.append(ai)
Truffle.getRuntime().getCallerFrame()
internalRemovePlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
/**   * Allows subclass to override Conection if required.  */ protected Connection newConnection(EndPoint endpoint){   return new HttpConnection(this,endpoint,getServer()); } 
LensPositionSelectors.front()
ImageUtil.getUserHeight(myImage)
hasRows(newTableName)
setParams().xx()
Assert.assertEquals(container2,info.getContainerName())
controller.createAction("component").setDescription("Get the pending tasks, in-progress tasks and the last executed task of a given component (usually a project).<br>" + "Requires one of the following permissions:" + "<ul>"+ "<li>'Administer System'</li>"+ "<li>'Administer' rights on the specified component</li>"+ "</ul>"+ "Either '%s' or '%s' must be provided, not both.<br>"+ "Since 6.1, field \"logs\" is deprecated and its value is always false.",PARAM_COMPONENT_ID,PARAM_COMPONENT_KEY)
button.getText()
mStartup || isTaskRoot()
HEADER.getBytes(Constants.UTF8)
info.getVoiceMailAlphaTagForSubscriber(subId,mContext.getOpPackageName())
VERSION=42
result.wasNull() || s == null
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false,false)
Path classpath=getClasspath(); 
Element.F64_2(mRS)
resolveTypeParametersForCallableDescriptor(propertyDescriptor,writableScope,typeParameters,trace)
internalTransaction.getTransferToAddress()
Thread.currentThread()
heartbeatIntervalSeconds < 0
p.matcher(s)
model.getClass().getSimpleName()
@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } 
wtfilter.setWidth(70)
selenium.isElementPresent("link=Control Panel")
map.substitute(path,SystemInfo.isFileSystemCaseSensitive)
UpgradeStepRegistrator.class
CHECKIN_VERSION=29
@NonNull
session.getRemote().sendStringByFuture(command.format())
@Nullable
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
Loader.loadClass(klass,mName)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
!context.maySwitchToAST(this) && stub != null
display.getRealMetrics(dm)
volatile DirectoryReader reader; 
"Surface(native-token=" + mSurfaceControl + ")"
VERSION=13
getClientConnectionManager()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
selenium.isElementPresent("link=Control Panel")
new String(bytes,"UTF-8")
mListener.getConnectionId() != -1 && request.mConnectionID != null
FsDatasetImpl.LOG.warn("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
type.getDeclaredConstructor()
List<Number>
id=39
return mConversationPrefs; 
matchAxisFilter != 0 || wrapAxisFilter != 0
Slog.e(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
TestUtils.randomByte() + 128
/**   * Returns the error code.  * @return The error code.  */ public Integer getErrorCode(){   return _errorCode; } 
UpgradeStepRegistrator.class
return true; 
ImmutableList<Map<String,Object>>
private final PagingUnsupportedResultListener pagingUnsupportedResultListener; 
H2O.waitForCloudSize(x,30000)
initialCapacity > 1 << 30
mOneShot=false
resources.getDimensionPixelSize(R.dimen.close_handle_height)
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,"Expected %s to be a module body, or %s to be the global scope.",n,scope)
Log_OC.d(TAG,"Got to start sync")
RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authn,false)
mQsDensityContainer.getX()
selenium.click("//li[4]/span/a/span")
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(13)
sslPrincipal.getName()
EditorHelper.normalizeOffset(editor,res,true)
messageType2.set(message2,"message","Hello World")
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED,UserHandle.USER_CURRENT)
json.writeObjectFieldStart("custom")
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
e instanceof ItemFrame
new MediaController(mContext,token)
mMccStr == null
assertEquals(9,set.size())
b.entrySet()
e.toString()
super.recyclePoolItem(pPoolItem)
properties.containsKey("flyway.url")
"System property " + LEGACY_SSTABLE_PROP + " not set"
ses.init()
base - newZoom
Set paramNames
LOG.warn("Failed to get next entry from " + jarFileName + ": "+ ioEx)
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
group.getGroupId()
IllegalStateException nsee
public Builder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
parser.parseLight(GroovyElementTypes.OPEN_BLOCK,builder)
ignite.getOrCreateNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_INT)
invalidate()
mRefreshView.getBottom() >= mRefreshViewHeight
value < maximumValue
j < inputStream.getGroupingFields().getKeysCount()
obtainMessage(MSG_TIMEOUT,state,0)
T value
assumeTrue("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
dist == 0 || dist > p.dist
formatTimeMs(fullWifiLockOnTime / 1000)
delegatedResourceAccountIndexCapsule.getFromAccountsList()
getPreferenceStore()
holder == null || holder.provider == null
connection.zrevrangeByLex(key,max,min)
obj.getIss()
mStackScroller.getChildAtRawPosition(x,y)
NOTIFICATION_LED_OFF_TIME=2000
nodeManager.getWorkerNodes()
partitions != null && partitions.size() > 0
matcher.find()
WordPress.getCurrentBlog().getLocalTableBlogId()
Math.min(timestamp,dp_to_keep.kv.timestamp())
subscriptionMap.remove(sub)
TelephonyManager.getDefault().getCurrentPhoneType()
((XmlNSDescriptorImpl)data).getElementDescriptor(localName,namespace,visited,reference)
reader.document(doc,visitor)
NestedSetBuilder.linkOrder()
ft.add(R.id.layout_fragment_container,readerFragment,tagForFragment)
selenium.isElementPresent("link=Control Panel")
DiagnosticFactory3.create(ERROR,INCOMPATIBLE_DECLARATION)
disable2ForUser(what,token,pkg,mCurrentUserId)
Thread.sleep(500)
log.info("Reset to factory defaults : onErrorDropped")
Long.parseLong(val)
e.getPresentation().setEnabledAndVisible(false)
AbstractTreeNode treeNode=(AbstractTreeNode)defaultMutableTreeNode.getUserObject(); 
Throwable exc
display.getRealMetrics(dm)
new KeyValuePair("no-workflow",LanguageUtil.get(locale,"no-workflow"))
versionString(VersionedValue.STATUS_LEFT,makeTokenString(tokens),Long.toString(expireTime))
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mPolicy != null && wasPowered
putProject(null,folder,true,true)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
Assert.assertEquals(new InetSocketAddress("RemoteMaster1",10000),masterAddress)
dynamicType.getLoaded().getDeclaredConstructor()
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
mListener.getConnectionId() != -1 && request.mConnectionID != null
Integer.toString(gramSize)
currencyPair.counter.getCurrencyCode().toUpperCase()
LOG.debug("Couldn't run process with PTY",t,logContent)
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
new IllegalStateException("Cannot initialize dumper; unexpected JDK implementation. " + "Please run Retrolambda using the Java agent (enable forking in the Maven plugin).",e)
info.getRegionNameAsString()
btceDepth.getBids()
new byte[10]
cache.context().statisticsEnabled()
selenium.isElementPresent("link=Control Panel")
itemActionLayout > 0
file.contentsToByteArray()
IccUtils.cdmaBcdByteToInt((byte)0x8c)
IssuesBySeverity.class
mState.mPivotX != pivotX
type.getDeclaredConstructor()
seg.acquiredPages.remove(pageId)
row2 * layerTileHeight
(NotificationListener)null
lp.resolveLayoutDirection(layoutDirection)
DEBUG=false
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
PatchedRouteInfo r; 
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
str == null || start >= str.length()
method.getDeclaringClass().isAssignableFrom(XAConnection.class)
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
Messages.showErrorDialog(myMainPanel,"Error updating package list: " + e.getMessage(),"Reload List of Packages")
Throwable e
currentPropertyJoinTableOverride != null
log.trace("Failed to deploy!!",res2.cause())
ATLAS_MAP_ENTRY_FIELD_COUNT=3
dlFileEntryFinder.filterFindByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
private final Integer parentId; 
getAffiliatesByAdmin("owner")
Throwable exception
new IllegalArgumentException("'level' cannot be null")
WebStorage.getInstance().deleteAllData()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
RowSqlType.builder().withIntegerField("f_int").withVarcharField("sub_string")
random().nextInt(999) + 2
_layoutRevisionLocalService.getLayoutRevisionsByStatus(WorkflowConstants.STATUS_PENDING)
FREQUENT_RESTARTS_THRESHOLD=0
value.length() < MAX_LENGTH
declareMethods(standardClasses,arrayListFQName,"size","add","get","isEmpty","set","remove","addAll","contains","clear","iterator")
getHomeButton()
_log.warn(ioe,ioe)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
searcher.get().getRawReader()
telephony.getNeighboringCellInfo(mContext.getOpPackageName(),mContext.getApplicationInfo().targetSdkVersion)
rep.getJobEntryAttributeString(id_jobentry,"success_condition")
subjectConfData.getNotOnOrAfter().isBeforeNow()
private JTextArea myDetailsPane; 
selenium.isElementPresent("link=Control Panel")
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
object1.getName()
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
throwable.getMessage()
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
Ordered.HIGHEST_PRECEDENCE + 20
context.init(servletContext,httpServletRequest,httpServletResponse)
!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
ViewPortletSMTest.class
Preconditions.checkNotNull(worker,"worker")
ConstantNode.forConstant(Constant.NULL_OBJECT,null)
_nonceQueue.remove(nonce)
close.setContentDescription("Close Button")
m.getModifiers()
args[0].trim().length() < 2
dest.mkdirs()
!task.isFreeformTask() || includeFreeformTasks
secondCacheCfg.setMemoryPolicyName(POLICY_40MB_EVICTION)
messageBus.replace(createSynchronousDestination(destinationName),false)
ChronicleEngineEndpoint endpoint=(ChronicleEngineEndpoint)getEndpoint(); 
mValues[8]
new IllegalStateException("Failed to create temp directory",e)
IOUtils.closeQuietly(is)
b == null || b.length == 0
S extends Capability
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
new Rect(left,top,right,bottom)
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPythonTarget {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
new ConstantTopologyChangeWorker(TOP_CHANGE_THREAD_CNT)
Throwable e
timeoutNs / Time.NS_PER_MS
VMRuntime.is64BitInstructionSet(getPreferredInstructionSet())
ap.getSsidStr()
System.currentTimeMillis() - start + 750
completion.onErrorResume(ex -> handler.handle(exchange,ex))
logger.fine(String.format("sending ack %s",args))
clusteringSize + 1
Slog.w(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
mValues[8]
HttpEntity.class.isAssignableFrom(parameterType)
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false),true)
type.getDeclaredConstructor()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
m.getDeclaringClass()
activeFrom == null
new CompoundShelfFileProcessor("shelf")
mDataAuthorities == null || data == null
IllegalStateException.class
words.length >= 1 && words[0].length() > 0
new ToggleAutoTestAction(getEnvironment())
notebook.createNote(null)
info != null
registerForEvent(true,false)
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
RoleLocalServiceUtil.loadGetRole(companyId,name)
BluetoothConnectReceiver.class
toObject(dataValue)
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id)
Arg args
new IllegalStateException("Could not access Field '" + classField.getName() + "'",e)
IClientConfigKey<String>
tFAgentStatMapper.map(agentStatBo)
new ClusterConfiguration(initialConfig.getName(),initialConfig.getMemberURIs())
!isBottomRightVisible
getFragmentManager()
queryString.getBytes("UTF-8")
startOffset >= pages.size()
uri.getEncodedQuery()
handleDnsConfigurationChange(usedNetworkType)
redefined.getDeclaredConstructor()
serviceDataUuid == null || mServiceData == null
Messages.OK != result
holder == null || holder.provider == null
PrivacyManager.getRestrictions(true)
element instanceof AntProject || element instanceof AntCall || element instanceof AntAnt
uri.getRawSchemeSpecificPart()
settings.setTextSize(WebSettings.TextSize.LARGER)
entry.notification.cloneLight()
disable2ForUser(what,token,pkg,mCurrentUserId)
AppLog.d(T.EDITOR,cm.message() + " -- From line " + cm.lineNumber()+ " of "+ cm.sourceId())
mConnectionById.containsKey(callId)
bedtime - SystemClock.uptimeMillis()
new RemoteUserInfo(mCurConnection.pkg,mCurConnection.pid,mCurConnection.uid,mCurConnection.callbacks.asBinder())
pm.queryIntentServicesAsUser(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
typeSettingsProperties.toString()
StateManagementUtils.createClearForkedExecutionMojoBinding()
viewDefinition.getName()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
LOG.debug(ex.getLocalizedMessage(),ex)
status().isSeeOther()
super.getBetweenProvider(path)
dest.writeInt(mSubId)
analysis.getType(windowFunction)
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mFormEntryModel.getCaptionHierarchy(index)
lock.isHeldByCurrentThread()
recipient.getExpireMessages() * 1000L
AndroidExcludedRefs.createAppDefaults()
Stream.of(BRIDGE_TYPE,THING_TYPE_PRESENCE_SENSOR,THING_TYPE_DAYLIGHT_SENSOR,THING_TYPE_POWER_SENSOR,THING_TYPE_LIGHT_SENSOR,THING_TYPE_TEMPERATURE_SENSOR,THING_TYPE_SWITCH)
mObsoleteAgents.remove(info)
Throwable e
getCustomInitBinderArgumentResolvers()
parts.length < 2
selenium.isElementPresent("link=Control Panel")
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
request.createInputStream()
_log.warn(ioe,ioe)
service.getDomain().id()
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
selenium.isElementPresent("link=Control Panel")
Preconditions.checkState(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
!(orderParams instanceof CancelOrderByIdParams) || !(orderParams instanceof CancelOrderByCurrencyPair)
mAnswer.setBackground(null)
networkInfo == null || networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
provider.shouldNotBeCached()
e.getKind().isClass() || e.getKind().isInterface()
config.getClass().getName()
retVal=(x == constValue)
DataStreamSink<OUT>
location.getX() < 1627
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
DiagnosticType.warning("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
column.getLabel()
TypeConversionUtil.boxingConversionApplicable(declaredParamType,actualArgType) || (declaredParamType != null && actualArgType == null)
CLOSURE_DO_CALL_METHOD.equals(methodName) || CLOSURE_CALL_METHOD.equals(methodName)
GridGgfsTestUtils.jsonToMap(x)
Environment.getOemDirectory()
Arg args
status().isSeeOther()
indexNameExpressionResolver().concreteIndexNames(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
type.getDeclaredConstructor()
incomingDir.mkdirs()
mTxtLog.setText(llog)
new Scanner(f,"UTF-8")
type.getDeclaredConstructor()
mono.onErrorResume(ex -> Mono.error(getReadError(bodyParameter,ex)))
DEBUG=false
analyzedSentence.getTokensWithoutWhitespace()
sender.sendMessage(_("inventoryClearedAll"))
DBG=false
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
pir.key.activity != null && pir.key.activity.pendingResults != null
!mShouldTranslateContents
writer.writeLongArray("arr",arr,idx)
view.addCallback(listener.callback)
DeclaredType fooTypeMirror=types.getDeclaredType(fooElement); 
appearance.getInt(attr,0)
JSInjectionController.getConcatenationText(value)
readySegment.getDateRangeEnd() > segment.getDateRangeStart()
line >= document.getLineCount()
duration.getHours()
expandableView.getIntrinsicHeight()
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
mQsDensityContainer.getX()
mappers.mapper().searchQuoteAnalyzer()
mFacetCategoryMap.get(category)
doubleVal(doc)
delegate.upsert(entity)
return false; 
System.nanoTime()
Streams.fileIn(f)
config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
return true; 
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
LOGGER.error("Error during file import",e3)
new LFWLoader(imgDim,imageTransform,numExamples,useSubset)
T args
U
focusedStack == null || focusedStack.getTaskCount() == 0
setDeploymentServerId(contextValue)
GradleDistributionLocator createGradleDistributionLocator(){   return new DefaultGradleDistributionLocator(); } 
mImm.setInputMethodInternal(mToken,id)
assertEquals(0.314813341867078,mse,1e-8)
mAttributes.getAllFlags()
localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
DEFAULT_VERIFY_ENABLE=true
Map<String,Object>
mainFile.getExecPathString()
connection.psubscribe(jedisPubSub,patterns)
@NonNull
messageParts[4]
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
DataStreamSink<OUT>
memOffsetData.intValueSafe()
indexWriter.forceMergeDeletes(false)
redeliveryDelayResult > maximumRedeliveryDelay
Thread.sleep(1000)
entry.getValue()
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
intervalFraction * (nextValue - prevValue)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
input.getDeltaMs()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
item.getName().equals(name)
stack.peek()
getHeadNodeId(upNodeIndex)
Assert.assertEquals(120L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
ProjectBundle.message("project.roots.jdk.banner.text",myProjectJdk.getName())
new ALPNServerConnectionFactory()
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize() || inventory.getStackInSlot(i).stackSize >= inventory.getInventoryStackLimit()
status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null
!deferEnsuringVisibility
createDouble(buffer.length(),init,workspace)
ParceledListSlice.emptyList()
DiagnosticFactory0.create(ERROR)
"com.google.android.gms".equals(mPackageName) || "com.google.android.syncadapters.contacts".equals(mPackageName)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
mapSource.getName()
beforeMethodInvocation(suspendContext,myMethod,internalEvaluate)
callbacks.onHardwarePreDraw(canvas)
status().isFound()
logger.fine("Computing Control Flow Graph")
new SolrException(500,"analyzer without class or tokenizer & filter list")
mGnssCallback != null
foundExistingGitUrl=false
DirectoryReader reader=writer.getReader(); 
PlatformUtils.isIntelliJ() || PlatformUtils.isRubyMine()
LOGGER.warn("Could not copy cite key",ex)
lastTerm.get()
connections.containsKey(manager)
Boolean.class
MathUtils.convertLongToInt(remainingBytes)
mLteSignalStrength > 31
n.longValue()
loaded.getLoaded().getDeclaredConstructor()
maxRowsPerFrame=5000
withoutMvnPrefix.startsWith("http:") || withoutMvnPrefix.startsWith("https:")
RuntimeException ex
new IllegalStateException()
lastTerm.get()
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
CONSTELLATION_TYPE_SHIFT_WIDTH=4
grid.context().cache().dynamicDestroyCache(cache.getName(),true,true,false)
hostsInPool.incrementAndGet()
SystemProperties.getBoolean("debug.choreographer.animdraw",false)
f.getAttrs().getMTime() * 1000L
field.getCommonType()
obj == null
!strand.isAlive()
retry.attempt()
BroadcasterFactory.getDefault().lookup(mapping,true)
a.getDimension(attr,0)
questionMark >= 0 && !url.contains("?databaseName=")
!value.isValid()
return false; 
(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())
return _this; 
getOverrideConfiguration()
implement(Foo.class,MethodDelegation.to(Foo.class)).getLoaded().getDeclaredConstructor()
Number value2
id=10807
mParent == null
getMeasuredWidth()
schematicEntity.buildWithoutChecks(localWorld,FakeWorld.BLUEPRINT_OFFSET)
QualifiedNamesUtil.isSubpackageOf(fqName,fqn)
AbstractBottomUpTraversal<TargetNode<?>,RuntimeException>
V extends Identifier
route.setDelay(5000)
classFile.matcher(file.getName()).matches()
retVal.setProperty(entry.getKey(),value)
List<Element>
mCard.getVisibility() != View.VISIBLE || (mSimpleCard != null && mSimpleCard.getVisibility() == View.VISIBLE)
_folder == null
Throwable e1
assertPlanEquals(expectedPlan,actualPlan)
heightMode == MeasureSpec.UNSPECIFIED
new Paint()
HeaderSpec.this
ConfiguredTargetValue.key(label,hostConfiguration)
cause instanceof VirtualMachineError
SslContextFactory.getDisabledTrustManager()
currentFile.getPath()
this(deploymentName,maxSessions,false); 
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
logger.info("Installing Filter {}",filterName)
new Paint()
logger.debug("copy {} to {}",srcFile.getAbsolutePath(),destPath)
LOG.info(e)
Log.e(TAG,"This will become an error",ex)
Sets.newLinkedHashSet()
recompile(source,name,oldClass)
public SubType orderBy(OrderSpecifier<?>... o){   query.orderBy(o);   return self; } 
this.get(0)
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id)
assertThat(o.takeNext()).isNotNull()
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
desc.getVersion()
getConversionByClass(value.getClass(),logicalType)
fb.limit()
KEEP_ALIVE_LENGTH=8
statusRef != null
idx >= biomes.length
subCursor.getString(COLUMN_VALUE)
!(nestedMap instanceof GrailsParameterMap) && remainderOfKey.indexOf('.') > -1
devicePort.type() == AudioManager.DEVICE_OUT_HDMI || devicePort.type() == AudioManager.DEVICE_OUT_HDMI_ARC
value >= 0 && metricsPublishers != null
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,true)
myInjectedFile.getVirtualFile()
-1
incomingMessage.getMessagePayloadByte(1)
guiResource.getImageJobGraph()
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
new Vector2i(areaHint.x,availableHeight)
!isCorrect
audioManager.getRingerModeInternal()
ds.getFeatures()
callTimeoutMillis=6000
Error e
users.get(j)
methodNode != null && closureExpression == null
cc.getLazy()
mRedrawClip.isEmpty() || view.getParent() == null
in.readVLong()
inverterRealtimeResponse == null || inverterRealtimeResponse.getBody() == null || inverterRealtimeResponse.getBody().getData() == null
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
builder.toString()
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
UpgradeStepRegistrator.class
status().isSeeOther()
version.equals("5") || version.equals("6") || version.equals("7")
assertEquals(1.2918350219726562,score,1e-4)
partialUri.toLowerCase()
JsonObject.createObjectMapper().getFactory()
loaded.getLoaded().getDeclaredConstructor()
ufsPath.toString()
targetPrincipal == null || targetPrincipal.getName() == null
Character.isSurrogate(tmpBuffer[len - 1])
accounts.length > 0 && mNavigationView != null
fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.INVOICE_ADJUSTMENT,NextEvent.INVOICE_ADJUSTMENT)
codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
logger.debug("Cannot update the group coordinator ({})",e.getMessage())
proxyFactory.createClass().getDeclaredConstructor()
0 * ONE_HOUR
new HttpMediaTypeNotAcceptableException(producibleMediaTypes)
entry.getValue()
VersionedFlowSnapshotMetadataSetEntity.class
nextNextInfo.distanceTo < TURN_IN_DISTANCE_END
qp.isExclusiveMinimum()
JwsSignatureProvider signer
logger.debug(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
e.toString()
ISOChronology.getInstanceUTC()
T actor
"enable.network.classloader=" + false
CacheService.instance.keyCache.getInternal(key)
error(log,e.getMessage())
new ValidatingDispatcher(threadPool.getThreadContext(),dispatcher,settings)
MAXIMUM_AVAILABLE_FREE_DOWNLOADS=16
!content.readable()
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equalsIgnoreCase(contentType)
XmppStringUtils.parseBareJid(userJID)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
_siteNavigationMenuPortletInstanceConfiguration.siteNavigationMenuType()
replaces="doIntrinsicCachedLLVMTruffleObject"
mMenu.getNonActionItems()
Map<String,Object>
hashInd == -1 || hashInd < 8
(CacheEntryEventFilter)in.readObject()
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
Long.parseLong(value)
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
ctClass.hasAnnotation(Entity.class)
node.decrementReferenceCount()
DEFAULT_OCTREE_WIDTH=50000
logger.info("Plugin class " + pluginClass)
Network.createServer(5110,5110)
LOG.error("Halting process: ShellBolt died.",exception)
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
? extends Throwable
JSONValue.parseWithException(isr)
hz1.getLifecycleService().shutdown()
Thread.sleep(1500)
new Paint()
showRecentApps(true,false)
XContentType.JSON.mediaType()
destroy()
m21 * m02
modified=true
cache.put(new Element(key,element))
chain.getEarliestKeyCreationTime() >= keyRotationTimestamp
telephony.isOffhook(getOpPackageName())
ensureStableCluster(4)
addToSet(mVisibleTrackedIds,id)
args.length > 0 && Util.isInt(args[0])
mService.stopLocalOnlyHotspot()
onDetachedFromWindow()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
cursor.getCurrentValueEndPosition()
isBookmarksList()
StringBuilder ret
mUiHandler.removeCallbacks(pae)
obtainMessage(MSG_TIMEOUT,state,0)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
!supportsNewLinesInSQL()
return repositoryPath; 
DEBUG=false
strippedQuotesLine.contains(StringPool.EQUAL)
new Origin(origin,nativeGetQuotaForOrigin(origin),nativeGetUsageForOrigin(origin))
this.route(request).switchIfEmpty(Mono.defer(() -> other.route(request)))
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
promise.setFailure(new ClosedChannelException())
!mRenderNode.isPivotExplicitlySet()
assertEquals(6,pluginList.size())
log.debug("Error invalidating SSH tunnel",e)
new BooleanQuery(true)
connection.hlen(key)
fullIdeArtifact.getBaseVersion()
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:10500}")
new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(false)
view.getTag(R.id.glide_tag)
LOG.isDebugEnabled()
Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor()
handoffExecutor != null
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mMime.toLowerCase().startsWith("video/") || mMime.equalsIgnoreCase(MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC)
t.replace(R.id.frame,new SampleListFragment())
myPalmId=palmId
StringBuilder buffer=new StringBuilder("["); 
event.getRawX()
createForeignKeyColumn(qb,attribute,false)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
debug(Log.IGNORED,ignored)
address != null
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
learningRate=0.005
new ObjectMapper().readerFor(IspResponse.class)
q.setTimeout(timeoutParam.intValue())
Exception e
callback != null && mLastTimeReadUs != 0
DEBUG=false
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
outputRowMeta.mergeRowMeta(data.fileRowMeta[i],meta.getName())
userRecord != null && userRecord.mClientRecords != null
this.xpath.setInitialText(xpath)
sr.getLastStartId()
callback.onPulseFinished()
processResult.getStderr()
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
args.length >= 2
options.setLanguageOut(LanguageMode.ECMASCRIPT5)
Object command
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())
FastMath.min(origin,num.floatValue())
Pattern.compile("^" + Pattern.quote(file.getAbsolutePath()) + "\\s*:\\s*\\d+\\s*:\\s*(?:warning:\\s*)?(.*)$",Pattern.DOTALL)
new ConversionException("Expected a proto but was: " + body.mimeType())
selenium.isElementPresent("link=Control Panel")
e.getCause() instanceof ReflectiveOperationException
c.close()
queueLength.asString()
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName(),res.getString(R.string.app_name))
CONNECTION_TIMEOUT_SECONDS=60
PropertyListParser.saveAsXML(x,outputFile)
x > 10
mGnssCallback != null
dataBuilder.addLinesBuilder().setLine(i).setScmRevision("REVISION_" + i).setScmAuthor("a_guy").setSource("this is not java code " + i).setUtLineHits(i).setUtConditions(i + 1).setUtCoveredConditions(i).setItLineHits(i).setItConditions(i + 1).setItCoveredConditions(i).setOverallLineHits(i).setOverallConditions(i + 1).setOverallCoveredConditions(i).setScmDate(150000000L).setHighlighting("2,9,k;9,18,k").addAllDuplication(Arrays.asList(19,33,141))
type.getDeclaredConstructor()
parent != null && parent.getDocStringExpression() == null
selenium.isElementPresent("link=Control Panel")
avatar == null || avatar.getFullImage() == null
result.cancel()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,true)
info.getXferAddr()
mTo == 0
!StringUtils.isEmpty(obj.getAud())
this.thrown.expectMessage("File must not be null")
ValidURLConstraint.class
info.getNaiForSubscriber(subId[0],mContext.getOpPackageName())
javaLibsByIdentity.containsKey(javaLibrary)
StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName())
@Override protected Block getBlock(){   return blockBuilder; } 
getDelegate().getDefaultCipherSuites()
m.getDeclaringClass()
InsertReturningStep<R>
BackupManagerServiceInterface svc=mService; 
_typeSettingsProperties.toSortedString()
Throwable e
logger.debug("Queue length is {} - deferring HEAL.",zController.getSendQueueLength())
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
script_params.addParametersString(myConfig.getParams())
BeanPropertiesUtil.getStringSilent(model,_keyProperty)
new ArrayList<>(IgniteCacheTestSuite3.suite(ignoredTests))
type.getDeclaredConstructor()
Boolean.TRUE.equals(getAttribute(CASE_INSENSITIVE))
((ResolvedJavaType)obj).toJavaName()
lastGoodQuery.getOriginalQuery()
varX("listener",vclClassNode)
mock.expectedBodiesReceivedInAnyOrder("Hello World")
user.getActualCompanyId()
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
actor.addCaptureListener(listener)
sender.getHostString()
StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler),Tracing.instance.get())
nodeEngine.getSharedService(LockService.SERVICE_NAME)
new MessagingException("Cannot open folder: " + e.getMessage(),e)
stepElement.getAttribute(ID_ATTR)
!traceOn
new int[681]
contact.getUser()
mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()
cluster.setWifiIndicators(mWifiConnected,mWifiIconId,mWifiActivityIconId)
colors.getThemeAttributeId(i,0)
position < -1f || position > 1f ? 0f : 1f - (scale - 1f)
List<URLDetail>
event.getChangeColumns()
new Packet()
WordPress.getCurrentBlog().getLocalTableBlogId()
new Paint()
Address mainAddressCopy=(Address)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
ticks * ticksInGap
dropAllTables()
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
this.csrfTokenRepository.generateToken(exchange).delayUntil(token -> this.csrfTokenRepository.saveToken(exchange,token))
appearance.getFloat(attr,0)
i.remove()
T
context == null || context == EGL_NO_CONTEXT
supportSession=false
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
Log.debug(this + " JVM BUG(s) - recreating selector " + _jvmFix1+ " times, cancelled keys "+ _jvmFix0+ " times")
new StringBuilder(50)
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,true)
Throwable e
Float.parseFloat(strings[i])
child.getProperties().isStreamPartitionedOn(partitioningRequirement)
builder200.build()
new IllegalStateException("Legacy advertising can't include TX power level in header")
1
type.getDeclaredConstructor()
new UrlClassLoader(urls,null,false,false,true)
app.getSettings().SHOW_CAMERAS
assertEquals(7250,peer.getPingTime())
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
typeSettingsProperties.toString()
colors.getThemeAttributeId(i,0)
dir.mkdirs()
Mockito.verify(mockTMasterEvaluator,Mockito.timeout(1000).times(1))
ZWaveSwitchAllCommandClass.class
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
new Intent(ACTION_QUICK_CONTACT)
entityRenderMap.put(info.target,info.renderer)
mResolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
new IndexWriter(d,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
TYPE_ATSC_M_H=0x00030300
new Paint()
indexBuf.getData().limit()
logger.finest("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(),jpa,"timestamp",msg.getTimestamp())
status.augmentDescription(msg)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).toProcessor()
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)
getTelecomService().silenceRinger(mContext.getOpPackageName())
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).doAfterTerminate(() -> commentIsPosting.onNext(false))
BackupManagerServiceInterface svc=mService; 
@Specialization protected LLVMBoxedPrimitive fromInt(int value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
getTokenDisplayNames()
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)
portrait && planRouteContext.isMarkersListOpened() && hideMarkersListFirst
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractAclCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
RenderingRuleProperty.createOutputIntProperty(OBJECT_TYPE)
assertThat(context.getExtensions()).hasSize(39)
mIconAttrId != 0
person.getPersonVoidReason()
targetDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
STUB_VERSION=49
testStatus.equals("FIXED") || testStatus.equals("PASSED") || testStatus.equals("SKIPPED")
new IllegalArgumentException("cannot set max pool size to a value less than the current max value(=" + i + ")")
headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
colors.getThemeAttributeId(i,0)
updateCntr0 == null ? 0 : updateCntr0
ImmutableList.copyOf(result)
Slog.d(TAG,"FLP HAL not supported")
wrapDetails(sku,quantity,request)
selenium.isElementPresent("link=Control Panel")
yvel == 0.f || Math.abs(xvel) > Math.abs(yvel)
new WorldPoint(2473,3420,2)
assertTrue(removed)
hold <= 0 || pendingElements.size() > 0
GL.glGenTextures(n,textures,Memory.getPosition(textures))
stack.get(stack.size() - 4).longValueSafe()
(UnsubscribeForm)actionForm
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
id=10834
Thread.sleep(1000)
other.getClass().getName()
constraints.weightx=0.5f
objects.length() <= slots
selenium.click("//li[4]/span/a/span")
from >= to
log.info("Cannot fetch column count for cursor : " + e.getMessage())
Box.createHorizontalGlue()
isGreaterOrEqual(platformVersion,M)
(JobFound)result
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
!ObjectUtils.isEmpty(getLocations()) || !ObjectUtils.isEmpty(getClasses())
!secondaryOk || getReplicaSetStatus() == null
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
assertEquals(4,builder.getErrors().getErrors().length)
createCustomStudySession(new JSONArray(),new Object[]{sb.toString(),Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},true)
read.location().getValueKind()
ImmutableSet<ImplementationMethodDescriptor>
metadataDao.persist(metadata)
mCallback.onInputUpdated(inputId)
mNavigationBarView.getPaddingLeft()
IndexerImpl.addMessage(companyId,groupId,categoryId,threadId,messageId,title,content)
((StringLiteral)literal).getValue()
lineNumber=1
alarm.getType()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
makeTypeWithArguments(rightNode)
odi.close()
Assert.notNull(cache,"No cache with name '" + cacheName + "' found.")
@Mock private PanProfile mPanProfile; 
Log.w(TAG,e.getMessage(),e)
resourceHandlerChain != null
getMyApplication().getFavorites().getFavouritePoints()
namespaceDescriptor.getFqName()
timeout >= 0
assertTrue("Message did not contain writer: " + e.getMessage(),e.getMessage().toLowerCase().indexOf("writer") >= 0)
routes.BuffersResource()
return 22; 
LOGGER.warn("Could not copy BibTex key",ex)
anchor != null && anchor.getElementType() == GroovyTokenTypes.mSH_COMMENT
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
logger.trace("Creating Object {}",count.getAndIncrement())
code == null || code.length() == 0
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
getWrapper(rightRedirect)
!value.isNull()
Assert.assertEquals(values,expected)
ThirdEyeUtils.getTimestampTimeSpecFromDatasetConfig(datasetConfig)
@GUIMenuSortOrder(1)
new GitException("Tag " + tagName + " not found. ")
errorType != ApiHelper.ErrorType.NO_ERROR
i < 11
_typeSettingsProperties.toString()
selenium.isElementPresent("link=Control Panel")
Integer.toHexString(flags)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_DISABLED,0,null,false)
mWM.isKeyguardLocked()
d != null
selenium.isElementPresent("link=Control Panel")
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")","")
Deactivate(app)
ignite.log().warning("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
((BCECPrivateKey)privKey).getD()
RedisRunner.shutDownDefaultRedisServerInstance()
selenium.click("//li[4]/span/a/span")
incomingMessage.getMessagePayloadByte(0)
new LinkedHashMap<>(0)
parameter.name()
offlineTableConfig == null || offlineTableConfig.getValidationConfig() == null
new StringBuilder(560)
LOGGER.lifecycle(exception.apply().toString())
renderedObject.getId() % 2 == 1
Assert.assertTrue("reload-required".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))
return false; 
toTypeID != null && !"/type/object".equals(toTypeID)
MoreCollectors.toImmutableSet()
Environment.getOemDirectory()
blog.getLocalTableBlogId()
ObjectConverter.toBool(scriptValue)
logger.trace("attempting to login")
new Paint(Paint.ANTI_ALIAS_FLAG)
StorageService.instance.initClient(0)
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
(flags & 0x01) != 0
l.getInt() != null || l.getHex() != null
UserHandle.myUserId()
FunctionTypesKt.isFunctionTypeOrSubtype(((ClassDescriptor)container).getDefaultType())
Environment.getOemDirectory()
getConnectTimeout()
PApplet.splitTokens(transform)
0f
mLoadingTile == null && mLoadingBackgroundColor != Color.TRANSPARENT
"Content-Type".equalsIgnoreCase(name)
CompletableFuture<Void>
final LongAdder8 cnt=new LongAdder8(); 
new ClusterConfiguration("whatever","cluster://1","cluster://2")
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)
Arrays.hashCode(connectors)
m.getTablePerHierarchy()
annotations.remove(node)
TEST_UTIL.getAdmin()
getTestName(true)
!hasPermission(permission)
LOG.warn("Promotion of block " + blockId + " failed.")
setImageDrawable(icon,false)
EPS_THRESHOLD=1e-5
mIsLongClickable=false
type == QUADS || type == QUADS
callback != null && mLastTimeReadUs != 0
mainSourceSet.getOutput()
getSubstring(0,1000)
CONTENT_SCOPE_KEY.getValue(project)
SQLObjectEditor<GenericProcedure,GenericStructContainer>
UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)
endpoints.addAll(entry.getValue())
mView.postOnAnimation(mAnimationStarter)
messageRecord.isEndSession()
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString())
type.getDeclaredConstructor()
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("DHE-RSA-DES-CBC3-SHA",KeyExchange.EDH,Authentication.RSA,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA")
Assert.assertEquals(ReportUtils.calculateFuel(startPosition,endPosition),0.0,0.01)
Integer.parseInt(bottomStr)
source.getAddress() == null || source.getAddress().length() == 0
portalTopLevelBuildData.getTopLevelMasterHostname()
Object key=next.getKey(); 
ParamUtil.getBoolean(serviceContext,"layoutPrototypeLinkEnabled")
dest.writeInt(mSubId)
mDisplayContent.mDividerControllerLocked.getWidth()
selenium.isElementPresent("link=Control Panel")
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
this.getClass().getSimpleName()
rootView.getId()
origin.realComponent().doubleValue() <= other
DataStreamSink<OUT>
getNotificationInterface().getInterruptionFilterFromListener(mWrapper)
routes.SessionsController.index("")
sqlRouteResult.getSqlParsedResult().getType()
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
Response.ok(null,MediaType.TEXT_PLAIN)
this.mChildren.remove(pEntityMatcher,Entity.PARAMETERCALLABLE_DETACHCHILD)
/**   * Create the AnalyzedToken used for whitespace and other non-words. Use <code>null</code> as the POS tag for this token.  */ public AnalyzedTokenReadings createNullToken(String token,int startPos); 
Throwable e
performDexOpt(packageName,instructionSet,false)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
instructionStart + 6
Watcher<DeploymentConfig>
mSelector.setHotspot(x,y)
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
super.visitVariable(variable)
nativeDraw(canvas,color,extras,false)
Slog.w(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
firstExc == null
!getLocationEnabled()
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
a.length > count()
endPos < bufEnd
parent.setAxisIndex(0)
offset=8
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
arg.indexOf('.') >= 0 || arg.equals("android")
164 + (USE_OLD_HISTORY ? 1000 : 0)
reloadAndWait()
appleConfiguration.getSingleArchPlatform()
new StatusBarIconView(getContext(),null,null)
account.getWebAddress()
w <= 0 || h <= 0
msg.hasCacheMetrics(nodeId)
ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
buildJSLoaderModulesServlet(Collections.<String,Object>singletonMap("applyVersioning",Boolean.TRUE))
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
Assert.assertFalse(_clusterInvokeAcceptor.accept(context))
log.debug("Received ping --> {}",payload)
wrapper.wrapSummary(attribute,request)
prop.getParamValue()
dbManager.getGenesisBlockId()
@CheckForNull @Override public Long getVersion(){   return version; } 
typeSettingsProperties.toString()
diffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT),filePath,revisions[1],revisions[0])
StringBuilder buf=new StringBuilder(); 
SearchListFragment.newInstance(s)
public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } 
0.3 / Math.sqrt(N)
mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION
group.shutdownGracefully(0,10,TimeUnit.SECONDS)
action == MouseEvent.RELEASE
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
_vendorMySQL || _vendorPostgreSQL || _vendorSQLServer|| _vendorSybase
XSourcePositionImpl.doCreateOpenFileDescriptor(project,this)
Long.parseLong(value)
new GroovyParser().parseLight(GroovyElementTypes.EXPRESSION,builder)
loadExternalSettingLinks(preferenceCategoryMore)
myChild2.getElementType() == ElementType.BLOCK_STATEMENT || myChild2.getElementType() == ElementType.CODE_BLOCK
assertEquals(1,counter)
UpgradeStepRegistrator.class
days(25)
advised.getDeclaredConstructor()
Boolean.parseBoolean(getOptional("kylin.htrace.trace-every-query","false"))
updateChildren()
outputDir.getAbsolutePath()
merc.getDistribution()
TableModelCell tableCell
logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt)
new MongoSynchronization(holderToUse,mongo)
DeploymentDescription.getReplaceDeploymentOperation(locale)
PrefGetter.getNotificationTaskDuration(this) == -1
context.isPersistentField(f) && getMappedByFromAnnotation(f).equals(persistentField.getName()) && isAssignable(persistentField.getDeclaringClass(),inferFieldTypeName(f))
refreshRotationLockTile()
tag.getReferencedObjectId()
"Invalid modules directory: " + bundlesDir
Bukkit.getOperators()
Localization.menuTitle("Push entries to external application (%0)",appName)
ServiceLoader.load(ConfigurationBuilderFactory.class,getClass().getClassLoader())
crPluggableScmMaterial.getFilterIgnores()
stack.peek()
Throwable exception
DEBUG_CAMERA_LIFT=false
new PacketDecoder(new JacksonJsonSupport(),ackManager)
settings.readLPw(null,0,false)
(breakpoint != null) && (breakpoint.getType().isSuspendThreadSupported()) && (breakpoint.getSuspendPolicy() == SuspendPolicy.ALL)
shortSizeDp >= 600
n.getValue().getKey() == null
note.getTitle()
_typeSettingsProperties.toSortedString()
node.getTreeParent() != null && node.getTextLength() > 0
fail("IllegalArgumentException is expected")
pw.print(ps.getInstantApp(user.id))
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).isEqualTo("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
log.error("Problem in JSR223 script ",e)
i=1
assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(6)
params.appendExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
activeSyncAccountIds.add(syncAccount.getSyncAccountId())
@Autowired RoutingService routingService; 
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
logError(message)
currentToken.hasType("operator","comment","numeric","text","punctuation")
selenium.isElementPresent("link=Control Panel")
new QuickAdapter(0)
second.get(j)
TESTS=40
Assert.assertNotEquals(last,next)
getMethod(restrictionName,methodName).isRestartRequired()
context.formatNewLine()
flags.add(STATICMETHOD)
privObj.getObjectName().equals("masking_test_druid") || privObj.getObjectName().startsWith("masking_test_druid_n")
Thread.sleep(1000)
new Paint()
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase|| database instanceof DB2Database
node.getAttributes()
endsWith("/home/source")
return 10000; 
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
subModule.update(persistencePackage)
@GUIMenuSortOrder(5)
native_get_videoeditor_export_level(vidCodec)
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteArray,true,indexBoolean,indexSession)
formatWebXML(fileName,newContent)
MAX_PORT_DEFAULT_VALUE=60000
currentTx.concatenate(matrixTx)
loaded.getLoaded().getDeclaredConstructor()
new Xrb28ProtocolDecoder(Xrb28Protocol.this)
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this))
close.setContentDescription("Close Button")
AssetTagFinderUtil.countByG_N(_scopeGroup.getGroupId(),assetTagName)
durableSubscriptions.remove(key)
moveInputMethodWindowsIfNeededLocked(false) || displayed
WAIT_FOR_NETWORK_TIMEOUT_DEFAULT_MS=0
!cctx.rebalanceEnabled() || locPart.state() == MOVING
BlockBasedSource<T>
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
Log.error("Error deleting vCard of username: " + username,e)
new GdxRuntimeException("Error during Vorbis decoding.",e)
assertEquals("test-bin",new String(serialized[0],US_ASCII))
selenium.isElementPresent("link=Control Panel")
dest.writeInt(mTxPower)
PatchedRouteInfo r; 
appearance.getPreference(3)
dest.writeTypedArray(remoteInputs,flags)
new ModelNode().set(60000L)
9 * 60 * 1000
createTextAttributesKey("KOTLIN_ANNOTATION")
WaitUtils.waitForPageToLoad()
win.isWinVisibleLw() && !winAnimator.isAnimationSet() && winAnimator.applyAnimationLocked(transit,false)
logger.fine("Renamed " + instancesRenamed + " instances of "+ propsRenamed+ " properties.")
mWm.addAppToken(0,null,0,0,0,false,false)
location != null && mHandler != null
length > string.length() && meta.isPadded()
--i
TypeParameterDescriptorImpl.createWithDefaultBound(classDescriptor,Collections.<AnnotationDescriptor>emptyList(),false,Variance.OUT_VARIANCE,Name.identifier("T" + (j + 1)),j)
second.get(j)
log.warnf("Duplicate @At mapping ? path=" + path)
Validate.notNull(ret,"Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString())
ObjectHeaderImpl.readHeaderFromObjectCarefully(obj)
namespaceMap.putIfAbsent(typeToRead.getSchemaType().getNamespaceURI(),"ns1")
wifiConfig == null || wifiConfig.isValid()
30 * 60 * 1000
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
new EntryTitleException("Blogs entry title must be a non null string")
!mScreenOnEarly
m.getDeclaringClass()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
actionBuilder.setStderr(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
src.remaining()
ByteBufferUtil.string(value)
Assert.assertEquals(threshErr2,error,1e-2)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
!disableBluetoothContactSharing
StringBuilder buffer=new StringBuilder("("); 
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
DiagnosticFactory0<KtElement>
av1 != null
DEFAULT_TETHER_OFFLOAD_DISABLED=0
querySkuDetails(ITEM_TYPE_SUBS,inv,moreSubsSkus)
collectCount <= lim
target.isVectorOrScalar()
source.getAddress()
LOG.warn("Storage directory " + rootPath + " does not exist")
Color.fromRGB(0x287697)
OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT=1000
startActivityAsUser(intent,UserHandle.CURRENT)
CONSTELLATION_TYPE_SHIFT_WIDTH=4
spec.getReflection()
ParallelFields fields
id=10843
jobStateClone.clearExceptions()
rootView.getId()
8 * Constants.MB
realm.checkIfValid()
mService.setAppPolicy(UID_A,POLICY_NONE)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
BUTTON_QUIESCENT_ALPHA=0.70f
LOG.warn("Failed to find " + baseDirectory.getAbsolutePath())
applyDefaultViewName(processedRequest,mv)
mPwCollection.getGroupedPwPairsSortedByRank(Utils.newDistanceComparator())
GlobalContext.getInstance().getAppTheme() == R.style.AppTheme_Four && getResources().getBoolean(R.bool.is_phone)
sTestCaseCounter == 0
this(icon,title,intent,new Bundle(),null,true); 
declaredMethods[i].isBridge() || name.indexOf('+') >= 0
mimeType == null || context == null
resTarget.withAppendedFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
childSubscription.set(scheduler.schedule(parentAction,parentAction))
mjCtx.getOldMapJoin() == null || setReducer
SamplingProfiler.newThreadGroupThreadSet(group)
Thread.sleep(1000)
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
JsonParseException jse
log.logError(BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,null,AllocationId.newInitializing(),true)
!getLocationEnabled()
mFlexItemInEdit.setAlignSelf(AlignItems.CENTER)
selenium.isElementPresent("link=Control Panel")
getActiveFgCall().getPhone().startDtmf(c)
type.getDeclaredConstructor()
assertPhoneNumberNotEqual("123123","0123123",false)
obj.getRequiredTokens()
private static Factory enhanceHelper(Class cls,final Class[] interfaces,final Callbacks callbacks,ClassLoader loader,final CallbackFilter filter){   final Class base=(cls == null) ? Object.class : cls;   Object key=KEY_FACTORY.newInstance(base,interfaces,filter);   return cache.get(loader,key,new FactoryCache.AbstractCallback(){     public BasicCodeGenerator newGenerator(){       return new EnhancerGenerator(base,interfaces,filter,callbacks);     }     public Object newInstance(    Object factory,    boolean isNew){       if (isNew) {         ((Factory)factory).setCallbacks(callbacks);         return factory;       }  else {         return ((Factory)factory).newInstance(callbacks);       }     }   } ); } 
FileTemplateUtil.mergeTemplate(attributes,airDescriptorContentTemplate,true)
ConcurrentHashMap<Object,AggregationStrategy>
extensionsMap.put(mimeType,extensions)
Thread.sleep(800)
ColorProperties.getColor("controlColor")
lastPos > mBoundPos
Slog.d(TAG,"showSaveLocked(): no mStructure")
remoteFormat != null
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new IndexWriter(dir,true,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
statistics.addRemoveTimeNanos(System.nanoTime() - start)
logger.debug("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
ImmutableList<ObjectType>
super.execute(executor,processStarter,patchers)
WeighingService.weigh(WEIGHER_KEY,elementComputable,new ProximityLocation(context,contextModule,processingContext))
generateFluentSetters()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
clusterProperties.getMaxRedirects()
type.getDeclaredConstructor()
BackupManagerServiceInterface svc=mService; 
sNotificationData.currentMediaItem > sNotificationData.totalMediaItems
start + emoji.length()
private final TaskOutputPacker delegate; 
assertEquals("rt",cfg.resultType)
mInjector.getUserManager().removeUserEvenWhenDisallowed(userId)
public CharStreamAwareCJKTokenizer create(Reader input){   return new CharStreamAwareCJKTokenizer((CharStream)input); } 
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
new Paint(Paint.ANTI_ALIAS_FLAG)
lookupService.lookupPrincipalByName(user)
setInputMethodEnabledLocked(info.getId(),true)
PyReferenceExpression.class
from >= to
Long.parseLong(value)
CACHE_MANAGER.addCacheIfAbsent(storageCache)
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"))
subsidyDecreaseBlockCount=150
loadAnimator(fragment,transition,false,transitionStyle)
orgReplica.applyIndexOperationOnReplica(3,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id2",new BytesArray("{}"),XContentType.JSON),u -> { } )
mInner.cancel()
selenium.isElementPresent("link=Control Panel")
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
UastUtils.isUastChildOf(((UBinaryExpression)parent).getRightOperand(),expression,false)
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true,false)
new URLClassLoader(new URL[]{aDir.toURI().toURL(),bDir.toURI().toURL()},CompileKotlinAgainstKotlinTest.class.getClassLoader())
getKeyDesc(keyRowMeta,keyNrs,two)
return closeNotifyTimeoutMillis; 
OfflineMetaRepair.class
state.addNullness(false,y)
GenericCommand<Object>
V extends Identifier
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new Byte(getByteValue(workingMemory,object))
XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),true)
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally&& !"__proto__".equals(propertyName)
new IllegalStateException("Failed to create temporary folder in " + workingPath,e)
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
visitStatement(node,context)
new HashMap<>()
FastMath.min(origin,num.floatValue())
store.setZkSessionTimeout("15s")
secondaryInputBind.setDescription(bind.description())
Operators.onRejectedExecution(ree)
UnsafeUtils.set8(_mem,8,bias)
os.copiedByteArray()
HEADER=234243482
appName != null && searchManager.getSearchableInfo(appName) != null
context == null || context == EGL_NO_CONTEXT
!scriptHost.toLowerCase().equals(host.toLowerCase())
log.debug("Can't set auto-commit state: " + e.getMessage())
new Integer(post.getId())
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
i=100
Assertions.assertThrows(EmptyStackException.class,() -> stack.peek())
hasCapability(GPS_CAPABILITY_MSB)
iterator.atEnd() || iterator.getStart() != offset
new Intent(Intent.ACTION_USER_PRESENT)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
mPanProfile.isProfileReady()
Thread.sleep(1000)
ApplicationManager.getApplication().invokeAndWait(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
WebStorage.getInstance().deleteAllData()
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
BACKGROUND_DEXOPT_JOB=800
dockedBounds.left - dockDividerWidth
getCurrentTab().handleHTMLCopy()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),filteredBlacklistedSubdirectories)
mediaVideoItem.getHeight() / 2
nullabilityOfB.refine(nullabilityOfA)
selenium.isElementPresent("link=Control Panel")
dest.writeInt(txPower)
imageHeight / targetHeight
Optional<ImmutableZkWorker>
/**   * Returns first child <b>element</b> node or <code>null</code> if no element children exist.  */ public Element getFirstChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[0]; } 
Strings.isNullOrBlank(kubernetesContainerName)
selenium.isElementPresent("link=Control Panel")
token.getExpiresIn()
reply.setError(PacketError.Condition.not_authorized)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
appName != null && searchManager.getSearchableInfo(appName) != null
Throwable e
FUNCTOR_PROCESS_DELAY=4
file.getAbsolutePath()
d.setAutoMirrored(false)
Simple.forClass(MutableList.class)
rematchAllNetworksAndRequests(networkAgent,oldScore)
setUpTaskList()
values[i] == value
dlFileEntryFinder.filterCountByG_U_F_M(groupId,0,folderIds,mimeTypes,new QueryDefinition(WorkflowConstants.STATUS_ANY))
lightContribution[LIGHT_AMBIENT_B]
config != Config.ARGB_8888 || colorSpace == ColorSpace.get(ColorSpace.Named.SRGB)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
analyzer.analyze(parser.createStatement(sql),false)
item == null || !item.isValid()
new ArrayList<>(0)
compoundResult.isSuccess()
_fileEntryDisplayContextHelper.isCheckedOutByOther()
msgInfoHolder != null && msgInfoHolder.selected != selected
!saveActions.equals(new SaveActions(enabled.isSelected(),formatterString))
mMat[5]
uri != null
BackupManagerServiceInterface svc=mService; 
anchorView.getApplicationWindowToken()
status().isFound()
getPropertyAsString(POLICY,HC4CookieHandler.DEFAULT_POLICY_NAME)
encoder.writeNullableString(event.getMessage())
ByteBuffer.allocate(DEFAULT_NET_BUFFER_SIZE)
mInTouchMode=true
GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))
config.setFast(false)
keyed=true
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
segmentsEntryRelPersistence.findBySegmentsEntryId(segmentsEntryId)
nextRenderId=32
type.getDeclaredConstructor()
String.format(Locale.ROOT,"User [%s] doesn't exist",username)
public class TimesNewRoman extends BasicFontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } 
item.setTypeText(notice)
invoice.getCreditAdjAmount()
mUiHandler.removeCallbacks(pae)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
outputDir.mkdirs()
new DefaultFileMetadata(FileType.RegularFile,bfa.lastModifiedTime().toMillis(),bfa.size())
Lists.newArrayList()
hideIdColumn == null ? true : hideIdColumn
(Item)this
Objects::nonNull
FormatUtils.toString(center.getDate(),true)
myIconOpaque=false
SVID_SHIFT_WIDTH=8
DISPLAY_TASKS_PORTRAIT=7
new Paint()
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ curFocus+ "}}"
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
30 * 365
assertEquals(4,repos.length)
dumpErrorCountThreshold=2
file == null || !file.isValid()
mDark && mPulsing ? 0.8f : 1
viewStateIndex|=VIEW_STATE_SELECTED
JavaSourceCodehausPackagesSuite.suite()
mBackdrop.animate().alpha(0.002f)
mAuthorities.valueAt(i)
IllegalStateException.class
ProtobufUtil.createSnapshotDesc(snapshot)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
Predicates.and(Predicates.containsPattern(".*/src/.+\\.py[c]{0,1}$"),Predicates.not(Predicates.containsPattern("third_party/")),Predicates.not(Predicates.containsPattern("integration_test/")))
ColorProperties.getColor("menuDisabledForeground")
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
value=data[byteOffset]
p.getName().equals(name) || p.getKey().equalsIgnoreCase(name)
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
MAX_DIMEN_FOR_ROUNDING=1920
numStats > 1
isDisposed() || myProject.isDisposed() || !fileEditor.isValid()
Integer.parseInt(row.getValue(partitionCol).toString())
_endp.isOpen() && (more_in_buffer || progress) && connection == this
selenium.isElementPresent("link=Control Panel")
count > 3000
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
splits.length <= i
SLIDING_TIMEOUT=60L
selenium.isElementPresent("link=Control Panel")
this.getDefaultReadOnly()
n.getNodeData().getLabel().toLowerCase().equals(str)
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
oldVersion < 1030005
setColors(color)
Primitive.longObjectMap(8)
test("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
SystemClock.uptimeMillis()
appWindowToken == null || !appWindowToken.isVisible()
STMT_CACHE_CLEANUP_TIMEOUT * 10
!Values.UPGRADE.equalsIgnoreCase(connection)
ImmutableList.of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"),new ArithmeticPostAggregator("a4","quotient",ImmutableList.of(new FieldAccessPostAggregator(null,"a1"),new ConstantPostAggregator(null,0.25))))
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true,false)
Bytes.toBytes(tableNameOrRegionName)
visibility != View.VISIBLE && mZoomManager != null
proxyHTTPSPort.setText("")
client.getData()
logger.warn("{}",general)
mockRegionInfo.isMetaTable()
ChangesUtil.getAfterPath(change)
type.getDeclaredConstructor()
(device=1 << i) != AudioSystem.DEVICE_OUT_DEFAULT
dynamicType.getLoaded().getDeclaredConstructor()
Throwable e
createHandlerResult(swivelCredential,this.principalFactory.createPrincipal(uid))
mAuthorities.valueAt(i)
mapLayerConfiguration.setOpacityFactor(((float)cachedMapTransparency) / 255.0f)
new RelativeCoordinatesProvider(hRef,hDelta,vRef,vDelta)
sub.next(dataBuffer)
Long.parseLong(stats.get("size").toString())
T[]
assertEquals(302,status.getStatusCode())
logicalExpressionStack.remove(logicalExpressionStack.size() - 1)
mGnssCallback != null
(i & RSV_BITMASK) != 0
mSelectResponse != null && mSelectResponse.length > 0
origin <= other
items[26]
LOGGER.warn("Could not execute sendAsEmail",ex)
csFoldingEnabled=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
Slog.w(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
TextSecureCommunicationFactory.createManager(context,e164number,password)
i == -1 || nsname.equals("/")
scope == null || scope.equals("provided")
folder.getAbsolutePath()
new Paint()
DEFAULT_EXPIRE_AT=80
removeCallbacksAndMessages(null)
selenium.isElementPresent("link=Control Panel")
mProviderRequest.reportLocation && !mDisableGps && isEnabled()
TagViewWrapperActivity.class
compressedProto.length < 390200
HeaderSpec.this
metadata.getFaceRectangles()
setupStrokePaint(paint,opacity)
ignitionEventHandler != null
value()
selenium.isElementPresent("link=Control Panel")
Math.min(desired,heightSize)
DirectoryReader r2=DirectoryReader.openIfChanged(r); 
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicatePongMessageParam",m.getName(),m.getClass().getName()))
copy(c.getDistributionManagement(),t.getDistributionManagement(),isChildMostSpecialized,c.getArtifactId(),c)
bestState.score()
new CatchupServer(platformModule.logging.getInternalLogProvider(),platformModule.logging.getUserLogProvider(),localDatabase::storeId,platformModule.dependencies.provideDependency(TransactionIdStore.class),platformModule.dependencies.provideDependency(LogicalTransactionStore.class),localDatabase::dataSource,localDatabase::isAvailable,null,config,platformModule.monitors,new CheckpointerSupplier(platformModule.dependencies),fileSystem,pageCache)
ref != null && ref.trim().length() > 0
result.getProject()
deopt2.action()
view.getTag(R.id.glide_tag)
graphModel.isMixed()
new IllegalArgumentException(checkedValue + " should not be null")
BufferUtil.toDetailString(prefilled)
"Cannot guess file extension for invalid MIME type: '" + mimeType + "'"
new LayerView(this,0x0f0000ff)
m.getLineNumber() < 461
currentBlog.getLocalTableBlogId()
openSparkInterpreter(false)
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
accountInfo.getCreationDate()
new ListenerInfo("https",sslServer.getLocalAddress(),openListener,xnioSsl,sslServer)
selenium.isElementPresent("link=Control Panel")
new ConcurrentHashMap<Class<?>,Boolean>(256)
useAutoinc=false
refreshRotationLockTile()
w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER
firstSlash <= 0
mIconAttrId != 0
loaded.getLoaded().getDeclaredConstructor()
k < FILES
i >= BY_WOOL_DATA.length
mPackageUsage.write(false)
selenium.isElementPresent("link=Control Panel")
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
components.afterEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
accountCapsule.putFreeAssetNetUsage(tokenName,newFreeAssetNetUsage)
resourceCollector.addIntResourceIfNotPresent(RType.ATTR,rawAttrName)
info == null || info.transactionStatus == null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
e2.getPointerCount()
parentId != null
total()
height - (int)maxY
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
createBeanNameELResolver(true)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).getAndSet(value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()),layout.getName())
user.isSystem()
mActionBarTop.getVisibility() != GONE
HttpStatus.FORBIDDEN.name()
new ShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
new RationalTanhDerivative(x,y,z,n)
id=10845
mSaveToDiskTask.getStatus()
t instanceof InvalidToken || t.getCause() instanceof InvalidToken
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
id=9
mDataAuthorities == null || data == null
selenium.isElementPresent("link=Control Panel")
assertEquals(4,TestAdvice.names.size())
assertEquals(12717,(long)stats.getCrawledBytes().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
mMccStr == null
Iterator<Cell>
selenium.click("//li[4]/span/a/span")
generatePomXML(kfs,releaseId)
future.isDone()
removeCallbacksAndMessages(null)
LocaleUtil.getSiteDefault()
m21 * m02
Messages.showErrorDialog(component,getErrorTextFromException(e),title)
mode != IControllable.Mode.Unknown && mode != IControllable.Mode.Mode
IndexReader.open(benchmark.getRunData().getDirectory())
Object faultSerialVersionUID=penv.get(ToolConstants.CFG_FAULT_SERIAL_VERSION_UID); 
events.add(0,event)
new UnsupportedOperationException("read-only")
element.getLocalName()
left != right
plugin != null && plugin.canServeUri(uri,homeDir)
DBG_CAMERA_LIFT=false
parameter.name()
UpgradeStepRegistrator.class
FastMath.min(origin,num.floatValue())
case GETHOMEDIRECTORY: 
fragmentEntryPersistence.findByG_FCI_S(groupId,fragmentCollectionId,status,start,end,orderByComparator)
ins != null
model.startsWith(brand)
selenium.isElementPresent("link=Control Panel")
(low + high) >>> 1
wp.getRunAdvance(mChars,start,end,contextStart,contextEnd,runIsRtl,end)
new HighlightInfoTypeImpl(HighlightSeverity.INFORMATION,CodeInsightColors.TODO_DEFAULT_ATTRIBUTES)
strangeVocab.getElementFrequency()
greaterThanOrEqualTo(0L)
getEffectiveHstsEnforced()
new FileNotFoundException(getURL() == null ? "null" : getURL().toString())
Map<RealmObject,RealmObject>
dataType.toString()
COOKIE_SYNC_MANAGER=false
preMergedCustomer.isRegistered()
assertThat(countWithAllDateFieldsNull).isEqualTo(2)
actual.currentContext()
mShowsDialog
mode == MODELVIEW
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SUCCESSFUL,getHttpStatusSeries(result))
tableCache.getAllObjects(monitor,this)
body.invoke(_super(),onDetachedFromWindowMethod)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
mPowerManager.isInteractive()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
DUMP_TIMEOUT_MS=100000
new LightweightThread(null,null,this)
NUM_OUTPUT_BUFFERS=8
isActive() && mInfo != null
dynamicType.getLoaded().getDeclaredConstructor()
setValue(object,value.intValue())
defaultMaxRowsInMemory=75000
availableEIPList.iterator()
1
PathUtils.concatPath(dst,child)
new Dimension(800,600)
callTimeoutMs=10000
Validator.isNotNull(entry.getUrlTitle())
mValues[8]
new LiferayRepository(repositoryService,dlRepositoryLocalService,dlRepositoryService,repositoryId)
e.toString()
BufferUtil.zeroBuffer(1)
hz1.getLifecycleService().shutdown()
metadata.getFaces()
GridCacheProjection<String,String>
new IndexWriter(index,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
propValue == null || CommonUtils.equalObjects(propValue,defValue)
realm.checkIfValid()
deltaY >= 0
d.addWelcomePages(file)
PRIORITY_MAX=3
mSyncStatus.valueAt(i)
boundingBox.getLatSouthE6() / 1e6
jdk.getHomeDirectory() == null || jdk.getBinPath() == null
replaces="doCachedTypeCachedOffset"
IllegalArgumentException.class
-30
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),true)
String.format(Locale.ROOT,"Warning:  Could not parse [%s] for roles verification. Please revise and fix it. Nonetheless, the user will still be associated with all specified roles",rolesFile.toAbsolutePath())
mMccStr == null
supportProvider.getPushDownHandler()
incomingMessage.setTransactionCanceled(true)
_writeNestedList(nestedListFieldFunction,list,itemJsonObjectBuilder,null)
new GoKeywordCompletionProvider(KEYWORD_PRIORITY,"type","for","const","var","return","if","switch","go","defer","goto")
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
HashBasedTable<String,String,byte[]>
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
intervalFraction * (nextValue - prevValue)
mMat[5]
selenium.isElementPresent("link=Control Panel")
chatCommandManager.registerCommandAsync(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
public static final OpenJPATemplates DEFAULT=new OpenJPATemplates(); 
new StatsListener(ss,1)
ColorProperties.getColor("textColor")
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
a.getFont(attr)
mRepeat > 0
builder.startObject("upgraded_indices")
this.permanent=true
menu.getMapActivity().getContextMenu().close()
Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
10 * 1024 * 1024
THREADS_PER_CLIENT=4
renderUpdate(errorChannel,results)
value.toLowerCase().startsWith(constraintLowerCase)
new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider,null)
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L,"2011-05-01").setLast(true))).isFalse()
StringBuilder buffer=new StringBuilder(pattern.length() * repeats); 
configureAST(expressionStatement,code)
Assert.assertFalse(_clusterInvokeAcceptor.accept(context))
ZonedDateTime.parse("1956-10-04T19:28:34.123+01:00[Europe/Paris]")
deferUpdateBounds(HOME_STACK_ID)
JNIExceptionHandlerReturnNullHandle.class
is(8)
savedInstanceState.getInt(KEY_PAGE,-1)
Validator.isNull(referringPortletResource) || !PortletConstants.getRootPortletId(referringPortletResource).equals(PortletKeys.ASSET_PUBLISHER)
generator.toJson(json.toString())
LinkedHashSet<>
mMat[5]
metadata.getFaces()
"wrong partition, expected: " + getPartitionId() + " but found:"+ partitionId
table.outerJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
return true; 
getLogger()
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).toProcessor()
width - (int)maxX
channel != null && channel.isIdle()
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).subscriberContext(withUser)
FluentIterable.from(Default.class.getDeclaredClasses())
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
UpgradeStepRegistrator.class
currentFuel == null && fuel != null
shuffleWithNonExistentUuids(project1.uuid(),project3.uuid())
n.floatValue()
!showNotifications.isNull()
imageView.setImageDrawable(drawable)
metricName.toString()
assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)
counter > max
realm.checkIfValid()
dependentMeasureRef.equals(that.getDependentMeasureRef())
selenium.isElementPresent("link=Control Panel")
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,false,"cancelNotificationWithTag",pkg)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION,false)
policy != null && !policy.inferred
method.getReturnType().getName()
sourceHeight > 0
requestedProvider.get().isAvailable(service)
PRODUCT_FORMATS.size() + 4
selenium.isElementPresent("link=Control Panel")
MessageNotifier.updateNotification(context,masterSecret,true,true,reminderCount + 1)
getVFile(name)
mCollapseOffset > 0
!isPartialUpdate || id.views == null
tabAlias.equalsIgnoreCase(tableAlias)
dest.writeInt(mSubId)
Integer.parseInt(stackIdStr)
targetType.getDeclaredConstructor()
!tagData.containsNonNullValue(TagData.NAME) || tagData.getValue(TagData.NAME).length() == 0
logger.error("Failed to load config file {}, falling back on default config",configPath)
type.getDeclaredConstructor()
logger.trace("Removing: {}",r)
modulePath.split(File.pathSeparator)[0]
out.writeInt(sampleCount)
new Paint(Paint.ANTI_ALIAS_FLAG)
mActivityLogContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
loaded.getLoaded().getDeclaredConstructor()
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
mBluetoothLock.readLock().unlock()
component.setObfuscated(object.get("obfuscated").getAsBoolean())
i >= speedBumpIndex
ApplicationConfiguration.build(ElasticsearchStubConfiguration.class).run("--server.port=" + PORT,"--spring.database.url=jdbc:hsqldb:mem:acceptancetestdb")
LOG.warn(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
telephony.isIdle(getOpPackageName())
getUserStateLocked(resolvedUserId)
return 0; 
Assert.assertEquals(select.size(),0)
value.length() < MAX_LENGTH
child.mLayerType != LAYER_TYPE_NONE
assertEquals(strangeVocab.getIndex(),0)
Log.w(TAG,e.getMessage(),e)
logger.error(msg)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
sharedPreferences.getBoolean(key,false)
DEBUG=false
selenium.isElementPresent("link=Control Panel")
new RuntimeException("to length:" + to.length + " from length:"+ from.length)
initialCapacity > 1 << 30
LOG.warn(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
return false; 
animateType != 8
3 * 60 * 1000L
new StackManager(new File(singleStack.replace(StackManager.PATH_DELIMITER,File.separator)),null,osFamily,false,metaInfoDao,actionMetadata,stackDao)
selenium.isElementPresent("link=Control Panel")
mActiveAgents.remove(info)
new ConcurrentHashMap<String,Boolean>(256)
this.address=member
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
mServiceMap.get(userId)
2 - iteration
new org.deeplearning4j.nn.graph.vertex.impl.NormalizeVertex(graph,name,idx,dimension,eps)
applicationsContext.unbindService(TokenRefreshServiceConnection.this)
isInputViewShown()
mCallback.onInputUpdated(inputId)
if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
Application.SDK_INT >= 14 && SettingsManager.eventsPersistent()
selenium.isElementPresent("link=Control Panel")
syncedFolderItem.isEnabled()
epsi(otherArr)
TestJsonRequest.doJsonRequest(client,true)
mInner.cancel()
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName)
LOG.info(e)
realm.checkIfValid()
storeRepo.getAllNodeStores()
services == null || services.size() == 0
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
!Files.isReadable(file)
Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl),"'" + defaultFailureUrl + "' is not a valid redirect URL")
new LayerVisitor(region,minimumBlockY(region),maximumBlockY(region),ground)
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,null,content,"general",structureId,templateId,StringPool.BLANK,1,1,2008,0,0,0,0,0,0,0,true,0,0,0,0,0,true,true,false,StringPool.BLANK,null,null,StringPool.BLANK,serviceContext)
conf.getKernelSize()
mMatchMode=matchMode
tests.add(0,clazz.getGenericsTypes()[0].getType())
metadata.getFaces()
type.getDeclaredConstructor()
telephony.isIdle(getOpPackageName())
private final ByteArrayOutputStream outStream=new ByteArrayOutputStream(1024); 
_traceInfo.get(key)
annotations == null || annotations.isEmpty()
batch.getSample().getRequiredBatchMemorySize() * 4
keyPressedCount > 0
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
file == null || file.getVirtualFile() == null
mBackdrop.animate().alpha(0.002f)
decoderMatch != null && decoderMatch.hasMatches()
memoryReservation.addAndGet(bytes)
m22 != 1
colDesc.getUpgradedType()
client != null && client.autofillClientIsFillUiShowing()
new RuntimeException(e.getMessage(),e)
typeSettingsProperties.toString()
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
selenium.isElementPresent("link=Control Panel")
4 + uids.length
Context.getEncounterService().saveEncounter(encounter)
id=42
!PyPackageUtil.hasManagement(packages)
internalPath != null && internalPath.exists()
status < 0
z.next_in[z.next_in_index++] != 0
c == Integer.class || c == Integer.TYPE
mViewPager.setOffscreenPageLimit(3)
getVoiceUsed()
mBondState.setBondState(address.toUpperCase(),state,reason)
IndexSettingsModule.newIndexSettings(index,Settings.EMPTY)
checkCall(receiver)
new GitMaterialConfig(new UrlArgument(git.getUrl()),gitBranch,null,git.isAutoUpdate(),filter,false,crScmMaterial.getDirectory(),toMaterialName(materialName),git.shallowClone())
AsyncHttpClientConfig.class
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
LOG.info(e)
powerQuery[i] == 0.0d && internalNextPower[i] > 0
DISPLAY_TASKS_PORTRAIT + 1
entity.func_70012_b(packet.scaledX,packet.scaledY,packet.scaledZ,packet.scaledYaw,packet.scaledPitch)
maxMergeAtOnceExplicit != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED) || ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)
LOG.warn("The given country from the response: " + billToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
mavenRepoLocal == null && activeProfile != null
verifyPosition(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
UserHandle.myUserId()
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
selenium.isElementPresent("link=Control Panel")
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
SystemKeyspace.getLocalHostId()
suiteClass.getSimpleName()
rm.getColumnDisplaySize(i)
mPowerManager.isInteractive()
colors.getThemeAttributeId(i,0)
setFlag(FLAG_AUTO_CANCEL,autoCancel)
Thread.sleep(1000)
conf.getDouble("mult")
verifyNothing(decoder,text("$PHO0,6091,233606.000,A,0902.9855,N,06944.3654,W,0.0,43.8,141112,,,A/00010,00000/0/224000//"))
overlayPackage.isStaticOverlay || mDefaultOverlays.contains(overlayPackage.packageName)
id=16503
code.length > 65535
MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA)
Integer.valueOf(value)
selenium.isElementPresent("link=Control Panel")
newName.equalsIgnoreCase(code[i].getPrettyName())
fragmentCollectionPersistence.countByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
apnContext.getWaitingApns()
NODE_START_CHECK_LIMIT=25
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.MOBILE_DATA_ALWAYS_ON,1)
selenium.isElementPresent("link=Control Panel")
DLAppLocalServiceUtil.updateFolder(folder.getFolderId(),folder.getParentFolderId(),"New Name",RandomTestUtil.randomString(),serviceContext)
previousParameterName.compareToIgnoreCase(parameterName)
IdentifiedDataSerializable event
change.isMoved()
media != null && media.getMediaType() == MediaType.AUDIO
transform(matrix,source,width,height,true,recycle)
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallbackDeferring(new MetricCB())
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
selenium.isElementPresent("link=Control Panel")
partSpec.size()
theme
settings.getInteger(Keys.git.packedGitOpenFiles,cfg.getPackedGitOpenFiles())
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
labels.size()
ENTER_DOZE_HIDE_WALLPAPER_DELAY=4500
transfer.getId()
IndexReader.open(store)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
maxContentTextLength=40
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
Serializable result
result.getErrors()
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),13)
i=0
countNewlines(fragment) + 1
selenium.isElementPresent("link=Control Panel")
assertTrue(Jodd.isModuleLoaded(PETITE))
HashCode.fromLong(hashCode())
mState.mPivotY != pivotY
updateStreetName(false,calculateTextState())
height >= seaLevel
myDebugger.close()
HttpStatus.SC_OK != statusCode && HttpStatus.SC_ACCEPTED != statusCode && HttpStatus.SC_CREATED != statusCode && HttpStatus.SC_NO_CONTENT != statusCode
/**   * Link to wiki, autogenerated using the name identifier.  */ AUTOGENERATED
this.input.slice(sliceDescription,offset,length)
mode != null && !mode.isEmpty()
args.length > 0
Matchers.<Map.Entry<String,String>>containsInAnyOrder(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
child.getMeasuredWidth()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
BundleFactoryOutputReceiverFactory.create(bundleFactory,stage.getComponents(),outputs::add)
RedissonMultimap.this.keySize()
String.format(Locale.ROOT,"%-15s: %s",username,Arrays.stream(markedRoles).map(s -> s == null ? "-" : s).collect(Collectors.joining(",")))
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
checkNotNull(checker.getAnnotation(BugPattern.class),"BugCheckers must be annotated with @BugPattern")
bukkit.setRawNote(we.getNote())
intervalFraction * (nextValue - prevValue)
new IllegalStateException("Advertising can't be both connectable and anonymous")
editor.commit()
mUiHandler.postDelayed(pae,timeout)
display.getRealMetrics(mDisplayMetrics)
selenium.isElementPresent("link=Control Panel")
@QueryParam("interval")
spec.getReflection()
javaWriter.emitSingleLineComment("foo")
!mbMessage.isDiscussion()
mFlexItemInEdit.setAlignSelf(AlignItems.FLEX_END)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
String.class
return true; 
super.onActivityCreated(icicle)
selenium.isElementPresent("link=Control Panel")
superClazz.getSuperclass()
pressedView.post(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
actual_train_samples_per_iteration / correction <= 10 * tspiGuess && actual_train_samples_per_iteration / correction >= 0.1 * tspiGuess
Map<String,Object>
9 * 60 * 1000
fluidFuel.getBlockID()
ThirdEyeUtils.getTimestampTimeSpecFromDatasetConfig(datasetConfig)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
public class BackupManagerService implements BackupManagerServiceInterface {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
routes.InputTypesResource()
callback.onPulseFinished()
index >= 0
Boolean.parseBoolean(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).doAfterTerminate(() -> isFormSubmitting.onNext(false))
new IndexWriter(directory,autoCommit,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
Long.valueOf(p.getProperty("numberid.id"))
log.error(sm.getString("hostConfig.deployDescriptor.error",xml),e)
new TextField<String>(TopicConfiguration.TOPIC_NAME_KEY,String.class)
new IntPreference("max_level_download_tile",20)
FilterBuilders.existsFilter(RuleDocument.FIELD_CHARACTERISTIC_KEY)
_log.warn(ioe,ioe)
cacheScaled5.setColors(red)
currentCountry.getCountryShortName()
lastModified < headerValue + 1000
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
matchAxisFilter != 0 || wrapAxisFilter != 0
selenium.isElementPresent("link=Control Panel")
hitTestImpl(child,localPoint.x,localPoint.y,viewSelector,allowViewGroupResult)
Thread.sleep(1000)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
mAttributes.getAllFlags()
mAppOpsManager.noteOpNoThrow(opCode,uid,packageName)
isShowing()
mUserPaddingStart > 0
mBluetoothHeadset.connectAudio()
String.class
loaded.getLoaded().getDeclaredConstructor()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_COMPRESS))
tp.go(fd,opts.dumpUnreachable ? 30000 : 5000)
json.writeObjectFieldStart("custom")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
client.getGameState() != GameState.LOADING && client.getGameState() != GameState.LOGGED_IN
messenger.requestSmsObsolete(res)
new SolrException(500,"error parsing event listevers",e,false)
lastBatchId != null && lastBatchId.equals(msgId)
lambdas.size() > ordinal
Log.w(mTag,"Adjusting remote volume without a controller!")
file == null || beforeDir == null || afterDir == null
onCreateView(context,appWidgetId,appWidget)
enSearch.executeQuery()
getInitializerGroovy()
assertEquals(5,ti.nrOfInvocations)
longSize >= 960
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
new Pair<>(name,expressions().values().iterator().next())
application.map(version::compareTo).orElse(0) > 0
modIcon.getWidth()
RowMutation rm=new RowMutation("Keyspace1",dk.key,cf); 
callTimeout=5000
longSize >= 640
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
/**   * {@code BuildCacheService} decorator that stages files locally from a remote build cache. This provides a separation betweena build cache problem and a  {@code BuildCacheEntryReader} or {@code BuildCacheEntryWriter} problem.  */ public class StagingBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private final RoleAwareBuildCacheService delegate;   private final boolean stageCacheEntries;   private final TemporaryFileProvider temporaryFileProvider;   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  boolean stageCacheEntries,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.stageCacheEntries=stageCacheEntries;     this.temporaryFileProvider=temporaryFileProvider;   }   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  RoleAwareBuildCacheService delegate){     this(temporaryFileProvider,!(delegate instanceof DirectoryBuildCacheService),delegate);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (stageCacheEntries) {       return super.load(key,new StagingBuildCacheEntryReader(reader,temporaryFileProvider));     }  else {       return super.load(key,reader);     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (stageCacheEntries) {       super.store(key,new StagingBuildCacheEntryWriter(writer,temporaryFileProvider));     }  else {       super.store(key,writer);     }   }   /**   * Reads the cache entry to a local file from the build cache and then reads the cache entry from the local file.  */ private static class StagingBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader reader;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryReader(    BuildCacheEntryReader reader,    TemporaryFileProvider temporaryFileProvider){       this.reader=reader;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void readFrom(    InputStream input) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         stageCacheEntry(input,destination);         readCacheEntry(destination);       }   finally {         destination.delete();       }     }     private void stageCacheEntry(    InputStream input,    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         IOUtils.copyLarge(input,fileOutputStream);       }   finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void readCacheEntry(    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         reader.readFrom(fileInputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileInputStream);       }     }   }   /**   * Writes the new cache entry to a local file and then pushes the local file to the delegate build cache.  */ private static class StagingBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter writer;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryWriter(    BuildCacheEntryWriter writer,    TemporaryFileProvider temporaryFileProvider){       this.writer=writer;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void writeTo(    OutputStream output) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         writeCacheEntry(destination);         unstageCacheEntry(output,destination);       }   finally {         destination.delete();       }     }     private void writeCacheEntry(    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         writer.writeTo(fileOutputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void unstageCacheEntry(    OutputStream output,    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         IOUtils.copyLarge(fileInputStream,output);       }   finally {         IOUtils.closeQuietly(fileInputStream);       }     }   } } 
page=DATABASE_TABLES_AND_USER
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
Math.max(Runtime.getRuntime().availableProcessors() - 1,2)
new DeadCodeEliminationPhase(Required)
new EditSessionBlockChangeDelegate(editSession)
wrapped.equals(pongMessageHandler)
now < prefs.getLong(Constants.PREF_LAST_UPDATE_CHECK,0) + Constants.UPDATE_MIN_FREQUENCY
mAuthorities.valueAt(i)
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
MVCCModel value=new MockMVCCModel(_VERSION_1); 
VfsUtilCore.getRelativePath(mainClassFile,sourceRoot,'/')
requestHeaderRegex == null || requestHeaderRegex.length() == 0
new ShowHabitMenuBehavior(habitList,habit,taskRunner,screen,system,commandRunner)
status().isSeeOther()
? extends Reader
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
version > 1
localLOGV || true
handshake == 0 || status == SocketStatus.ERROR
mGnssCallback != null
hasColumn(oldTableName,"commentId")
LOGGER.warn("Could not execute unmarkEntries",ex)
Log_OC.d(TAG,"Got to start sync")
ll.reverseRecursiveEasy(head)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
!allowStateLoss
outState.putBoolean(KEY_SHOULD_RESOLVE,mShouldResolve)
(ErrorMessage)authResponse
new HandlerThread(THREAD_NAME,android.os.Process.THREAD_PRIORITY_BACKGROUND)
mLteSignalStrength > 31
selenium.isElementPresent("link=Control Panel")
XContentType.YAML.mediaType()
loaded.getLoaded().getDeclaredConstructor()
aClass.findClassAttribute(name,true)
(sms.getUserData() == null) && (SmsEnvelope.TELESERVICE_MWI != teleService) && (SmsEnvelope.TELESERVICE_VMN != teleService)
selenium.isElementPresent("link=Control Panel")
consoles.waitJDTLSStartedMessage()
BaseBulletTest.init()
mock.expectedBodiesReceivedInAnyOrder("c","b","a")
selenium.isElementPresent("link=Control Panel")
Slog.e(TAG,sb.toString())
animation.setDuration(300L)
new MccEntry(204,"nl",2,"Europe/Amsterdam","nl")
e.printStackTrace(System.out)
checkCallerIsSystemOrShell()
RCTCamera.getInstance().setFlashMode(_cameraType,flashMode)
navigationList[index]
mHost.onShouldSaveFragmentState(f)
Cli.<Runnable>builder("presto")
SQLObjectEditor<GenericProcedure,GenericStructContainer>
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_MTP) || UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_PTP)
getDelegate().getDefaultCipherSuites()
TelephonyManager.getDefault().getCurrentPhoneType()
selenium.isElementPresent("link=Control Panel")
dest.writeInt(mSubId)
event.getEntity() instanceof Wither
Stream.of("CYPHER 3.1","CYPHER 3.4")
group != null && this == group.mInternalConnection
invalidateOptionsMenu()
eKernel.length == 3
INVISIBILITY(14,PotionEffectType.INVISIBILITY,1)
{CUSTOM_STUDY_NEW,CUSTOM_STUDY_REV,DECK_OPTIONS,MORE_OPTIONS}
Trans != NO_TRANSPOSE
testClass.getSimpleName()
session.flush()
cmisCriterions.size() * 2 + 1
annotationHolder.createWarningAnnotation(expression,"Cannot resolve target pattern")
selenium.isElementPresent("link=Control Panel")
w.println(paddingText)
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
Character.isUnicodeIdentifierPart(ch) || ch == '{' || ch == '<' || ch == '['
RtlUtils.isPunctuations(punctuation2)
mWM.isKeyguardLocked()
SERVICELOG.warn("Async error occurred: " + e,e)
enabled=false
DestinationFactoryManagerImpl.class
mVectorState == null || mVectorState.mVPathRenderer == null
PsiLiteralUtil.parseDouble(text)
LOG_KEY_EVENTS=false
mStackScroller.getChildAtRawPosition(x,y)
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
SelectTimeZonePacificStandardTimeCPMATest.class
ACRA.log.w(LOG_TAG,"Unknown json subtree type, see issue #186")
new ConcurrentHashMap<String,InjectionMetadata>(256)
packet.getFrom().split("/",2)
holder.addCallback(callback)
loaded.getLoaded().getDeclaredConstructor()
StringBuilder buffer=new StringBuilder(); 
context == null || context == EGL_NO_CONTEXT
new IncorrectOperationException(getClass().getName())
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
display.getRealMetrics(dm)
server.getClass()
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),t)
getEffectiveHstsEnforced()
super(project,true); 
myProjectView.isAbbreviatePackageNames(myPaneId)
sUseRenderThread=false
assertSameLines("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>foo</groupId>\r\n"+ "    <artifactId>bar</artifactId>\r\n"+ "    <version>baz</version>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
eventFunc.equals("conf_api_sub_transfer") || eventFunc.equals("conference_api_sub_transfer")
myNameField.getFocusableComponent()
Integer.toHexString(realQuality)
listener == null
Slog.d(TAG,"Unable to bind FusedProxy.")
new ConcurrentMapCache("")
findAnnotationAttributes(element,annotationType,false,false)
CompilerDirectives.inInterpreterOrLowTier()
container.getNeighborTile(from) instanceof IRedstoneEngine
logger.error(e.getMessage(),e)
new IllegalArgumentException("Command not found in bolt message: " + shellMsg)
List<UsageInfo>
bucket=1
List<UIDMeta>
builder.getTokenType() == JavaTokenType.LT && context != Context.CODE_BLOCK
!p.isNoSelectedType() || p.getLastWord().isEmpty()
bitstampAuthenticated.getBitcoinCashDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
rs.getInt(1) > 0
rs.getNString(columnIndex)
isBookmarksList()
outputPath.endsWith(DexStore.JAR.getExtension()) || outputPath.endsWith("classes.dex")
GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",60,SECONDS)
testMaterialize("testCacheSnippet",0.75,1)
new Paint()
Map<String,AstyanaxKeyColumnValueStore>
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
selenium.isElementPresent("link=Control Panel")
matcher.find()
mUiHandler.removeCallbacks(pae)
@NotNull Id getCommit(); 
new Group(provider.getGroupName(),provider.getOpenIcon(),provider.getIcon())
cache1.getAndRemove(1)
new Schema(1000,"de.greenrobot.daoexample")
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
selenium.isElementPresent("link=Control Panel")
mf.getColumnNameInSql()
fakeData != null && currentSegmentIndex < fakeData.segments.size()
old + 21
pathParameterMap != null
new ItemStack(Items.slime_ball)
@Nullable
Preconditions.checkState(state.discoveredInputs != null,"discoverInputs() returned null on action %s",action)
metaClass.pickMethod(name,arguments)
tblObj.getPath()
new ScheduledJob(job,jobName,delay,period)
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis)
mRenderer.getViewportHeight()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
1f / 100
mMat[7]
new XStream(new PropertyReflectionProvider())
sTextLayoutBuilder.setTextDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
MAX_LOW_POWER_STATS_SIZE=2048
input.getSourceFileFieldName()
Matchers.greaterThanOrEqualTo(1)
isFastScrollAlwaysVisible()
targetBoard == null || !targetBoard.getId().equals(split[2])
ContentType.parse(request.getContentType())
length <= Bytes.SIZEOF_LONG && length > 0
!mIsSummaryWithChildren || !mChildrenExpanded || (getNotificationChildren().size() == 1 && isClearable())
parts.length < 2
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
selenium.isElementPresent("link=Control Panel")
new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown"),true)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
otherWriter.write(line)
scriptField.setInitialText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
BigQueryTornadoesITOptions.class
cc.getLazy()
setValue(object,value.intValue())
len % (1024 * 1024) / 10000
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
cfg.setIdentity(identity)
assertThat(request.getBody().readUtf8()).isIn("<my-object><message>hello world</message><count>10</count></my-object>","<my-object><count>10</count><message>hello world</message></my-object>")
mService.mDisplayContents.valueAt(displayNdx)
@Nullable
mObsoleteAgents.valueAt(i)
dest.writeInt(mSubId)
updateBreakResponseBtn()
@Nullable
selectorSlider.getComponent()
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
selenium.isElementPresent("link=Control Panel")
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
Conv2DConfig.builder().kH(kernel[0])
!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new TaskStatusUpdateEvent(counters,progress,stats,true)
c.writeAndFlush("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
@NonNull Uri uri
assertRestrictBackgroundOn()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
proc != null && proc.thread != null
/**   * Integration tests for GRPC over HTTP2 using the Netty framework.  */ @RunWith(JUnit4.class) public class Http2NettyTest extends AbstractInteropTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer(){     try {       startStaticServer(NettyServerBuilder.forPort(serverPort).flowControlWindow(65 * 1024).sslContext(GrpcSslContexts.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     try {       return NettyChannelBuilder.forAddress(TestUtils.testServerAddress(serverPort)).sslContext(GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()).build();     }  catch (    Exception ex) {       throw new RuntimeException(ex);     }   } } 
target.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
Math.min(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
new HashCollisionNode(edit,hash,count,array)
Preconditions.checkNotNull(options,"fragment options unavailable: " + optionsClass.getName())
intervalFraction * (nextValue - prevValue)
LOG.warn(e)
memberRequestPersistence.update(memberRequest,false)
myRole1 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
res.startsWith("android") || res.startsWith("Vtok") || res.startsWith("Talk.v")
!match && compareRecover
realm.checkIfValid()
ensureStableCluster(3,nodes.get(1))
Thread.sleep(1000)
julLogger.severe("Hello world")
return _this; 
options.setTaskOverlay(true,true)
Foundation.log("[info] " + tag + ": "+ message)
statistics.addPutTimeNanos(System.nanoTime() - start)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
lib.returnStringVarArgs2("","Test")
conversation.getContactJid().split("/",2)
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFUser,true,false)
fetchDefaultLayout(groupId,privateLayout)
Integer.parseInt(displayIdStr)
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
nodeConfig.setExecutorServiceWorkers(Collections.singletonMap("test",1))
Thread.sleep(30000)
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
wordDetector.getCursorOffset()
!phones.isValid()
findCodecForFormat(true,format)
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
new TextPaint()
MacWrapper.class
countNewlines(fragment) + 2
Double.parseDouble(m.group(2))
Log.w(TAG,e.getMessage(),e)
c <= values.length()
getFluid().getFluid().getLocalizedName(getFluid())
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
UpgradeStepRegistrator.class
getWholePanel()
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
MonitoringPortlet.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
node.getLocalName()
out.println(indent + "public void setup() {")
intBuffer.clear()
response.getStatus().getCode() / 100
loaded.getLoaded().getDeclaredConstructor()
mUiHandler.postDelayed(pae,timeout)
type.isAssignableFrom(number.getClass())
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
anyInt()
matchAxisFilter != 0 || wrapAxisFilter != 0
_assertAttibutes(sourcesJSONArray.getJSONObject(1),200,50)
"Unknown or Unsupported Option '" + key + "'"
locale.getLocaleCode()
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(13)
path.findFileByRelativePath(className.replace('.','/') + ".class")
context.createCallContextNoAccountId(createdBy,reason,comment,request)
Timber.v(e,"Temporary failure - retrying with new token")
triggerManager.getRules(CHANGE,item,oldState,newState)
ExpectedTypesProvider.getInstance(project).getExpectedTypes((PsiExpression)element.getParent(),true)
ds.numExamples()
Throwable e
new GenerationException("Couldn't parse type: " + typeDefinition,e)
asyncWriteFuture.cancel(false)
getLog().debug("Module name is " + moduleName)
revIdx < myParametersNotNull.length
setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
strings.length >= 5
AnalyticsDataFactory.clearAnalyticsData()
result.isEmpty() || !(result.get(0) instanceof Separator)
HashMap<Menu.Item,ZLApplication.Menubar.PlainItem>
Assert.notNull(cache,"No cache with name '" + cacheName + "' found.")
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
super.visitAntDomElement(element)
Long.parseLong(args[ai])
tree != null && tree.getLink() != null
StringUtil.first(oldDefaultList.getName(),30,true)
event.isCancelled()
MimeTypeUtil.isVideo(mFile)
Integer.parseInt(attrValue)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
sm.getString("http." + statusCode)
analysis.getTypeWithCoercions(aggregate)
getNextWindowIndex()
payload.writeBytes((byte[])each)
gauge == null || gauge.getValue() == null
new DeleteResponse(shardId,delete.type(),delete.id(),randomInt(20),randomIntBetween(0,Integer.MAX_VALUE),true)
SYNC_OK=0
AndroidInstrumentationInfo instrumentationProvider=instrumentation.get(AndroidInstrumentationInfo.PROVIDER); 
anyLong()
1 << 27
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
commitIfNecessary(sessionToUse,message)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
group.isCompany()
mAms.mWaitForNetworkTimeoutMs=2000
new VectorDrawableAnimatorUI(this)
myProblemElements.isEmpty()
new Paint(Paint.ANTI_ALIAS_FLAG)
getMeasuredWidth()
from.getItem().shouldCauseReequipAnimation(from,to,changed)
final ClientState clientState=(ClientState)msg.obj; 
((MasterSlaveDataSource)dataSource).getMasterDataSource()
selenium.isElementPresent("link=Control Panel")
info == null || info.transactionStatus == null
childLeftTuple.reAddLeft()
conferenceInfo.appendChild(users)
mimeType == null || context == null
responseRaw(p)
Cheese.class
public static DurationArray durationArray(TemporalAmount[] values){   DurationValue[] durations=new DurationValue[values.length];   for (int i=0; i < values.length; i++) {     durations[i]=durationValue(values[i]);   }   return new DurationArray(durations); } 
host1.getSocketAddress()
field.getType().toJavaName()
logger.info("OAuth clients imported: " + clients)
Object[]
new RanChangeSet("classpath:/db/file.log","1","author",null,null,null,null,null,null,null,null,null)
fetchParent.fetch("skuMedia",JoinType.LEFT)
meta.getEnclosure()
JBUI.Borders.empty(EMPTY_BORDER_THICKNESS,EMPTY_BORDER_THICKNESS)
fileSystem.renameFile(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
getActivity()
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
error.expectedMinimumMessageCount(1)
channel.sendHeaders()
Headers.FORWARDED.asString()
cursor == null || !cursor.moveToFirst()
JavaAssistUtils.toPinpointParameterType(parameterTypes)
logger.debug("InterruptedException during playing a notification sound")
ImageUtil.getUserHeight(myImage)
telephony.getNeighboringCellInfo(mContext.getOpPackageName(),mContext.getApplicationInfo().targetSdkVersion)
selenium.isElementPresent("link=Control Panel")
id=16507
extraSpace + 6
parts.length < 2
return ctx; 
mCallback.onInputUpdated(inputId)
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
Measures.nDCG(results,test)
stmt.execute(sql)
factCount=5000
10 * 1
controller.system().equals(SystemName.cd) || deploymentId.zoneId().region().value().equals("aws-us-east-1a")
showRecentApps(true,false)
mSyncStatus.valueAt(i)
pageBucketReceiver.setBucket(bucketIdx,bucket,true,pagingUnsupportedResultListener)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,false)
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,transactionSPI)
HdmiCec.getTypeFromAddress(curAddress)
JettyWebSocketClient.WS_URI.getDisplayName()
getOrCreate(entry.getKey())
mObsoleteAgents.remove(info)
Throwable e
Resources.getResource(AbstractLuaScriptStarter.class,STARTER)
getConnector()
caretColumn >= value.getIndent()
clusterGlobalLock.writeLock()
maxActiveSessions == null && servletContainerService != null
SemVer.parseFromText(text)
isStarted() || isStarting()
fm.beginTransaction().remove(samples)
buffer.flip()
Exception e
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,count)
logger.warn("Couldn't write to file: " + filename)
final T view
session != null && session.getStreamID() != null
root.isDownloads()
PlatformTestCase.autodetectPlatformPrefix()
builder.getErrors().getErrors()[3]
nativeLibraryDir.getPath()
sm.getString("namingContext.nameNotBound",name,name.get(0))
basicGraph.getShortestPath(root,t,false)
typeSettingsProperties.toString()
public class XpathRegressionFallThroughTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
selenium.isElementPresent("link=Control Panel")
tm != null && tm.getNeighboringCellInfo() != null
Exception e
return true; 
entry.notification.cloneLight()
complete()
DefaultFileMetadata.directory()
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
StrictMath.log(df)
assertEquals(2,files.length)
kbase.newStatefulKnowledgeSession(conf)
new Paint()
mColumn + (x - 0.5f) * 4 + 1.25f
new Paint(Paint.ANTI_ALIAS_FLAG)
new S_Command("00FE30",1,20.0)
GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)
System.getProperty(key,"")
addView(root,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
dbSqlSessionFactory.getDatabaseCatalog() != null && dbSqlSessionFactory.getDatabaseCatalog().length() > 0
stepLightIdleStateLocked("s:shell")
new UnsupportedOperationException("PLAIN doesn't support wrap or unwrap operation")
List<String>
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
oauth20AuthenticationRequestServiceSelectionStrategy()
new LinkedHashMap(request.getParameterMap())
Integer.parseInt(taskIdStr)
sourceScope.getGlobalSearchScope()
mEditor.startSelectionActionMode()
this.constraints.updateFromFactHandle(workingMemory,handle)
Path classpath=getClasspath(); 
host.getSocketAddress()
Assert.assertEquals(122L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
checkNotNullOrEmpty(uri,"URI should not be null")
m[M30]
targets.length > 0
tnCount=70
stack == null || stack.mStackId != DOCKED_STACK_ID
dests.size() == 1 && joinTree.getNoOuterJoin()
selenium.isElementPresent("link=Control Panel")
uri.toString()
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
mapLayerConfiguration.setOpacityFactor(((float)cachedMapTransparency) / 255.0f)
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
resolver.acquireUnstableContentProviderClient(uri)
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
DEBUG=false
showRecentApps(true,false)
colors.getThemeAttributeId(i,0)
scheduleUpdate(10)
DurationType.getMillisType()
new File(uri.getPath().replace("camera_photos/",""))
mAppToken.isVisible()
ISOChronology.getInstanceUTC()
cs[c].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
resolveMethodByThrowable(exception)
assertEquals(1,resultList.size())
addPortletPreferences(portletPreferencesRow)
getParents(directory,owner).find(dir -> Comparing.equal(element,dir))
uri.getAssetName().toLowerCase()
selenium.isElementPresent("link=Control Panel")
child.mLayerType != LAYER_TYPE_NONE
format == null || "".equals(format)
mPanProfile.isProfileReady()
LOGGER.isDebugEnabled()
appearance.getInt(attr,0)
candidate.getArgumentMapping()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
setSDesEncryptionOnDescription(mediaType,description,null)
MavenHelpers.getOrCreateElementBuilder(build,"from")
accessor.valueOrNull()
tw.close()
m.getTablePerHierarchy()
frustum.update(invProjectionView)
executableFlow.getStatus()
assertEquals("Should have exact number of build phases",4,target.getBuildPhases().size())
ConcurrentReferenceHashMap<PropertyDescriptor,TypeDescriptor>
for (Object object : c) {   list.add(JSONUtil.wrap(object,ignoreNullValue)); } 
DirectoryReader reader2=DirectoryReader.openIfChanged(reader); 
File canonicalFile
getService().animateCollapseNotifications()
Localization.lang("Open SPIRES entry")
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
file.getFileNameOnly()
ItemStack.areItemStackTagsEqual(stack,result)
LOGGER.lifecycle(msg.apply())
typeSettingsProperties.toString()
rootDir.file("build.gradle").writelns("apply plugin: 'java'","dependencies { compile gradleApi() }",String.format("jar.destinationDir = file('%s')",FilenameUtils.separatorsToUnix(jarFile.getParent())),String.format("jar.archiveName = '%s'",jarFile.getName()),"new URL(\"jar:file://valid_jar_url_syntax.jar!/\").openConnection().setDefaultUseCaches(false)")
keyPattern.getDefaultValue() == null || keyPattern.getDefaultValue().isEmpty()
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope)
BackupManagerServiceInterface svc=mService; 
"Error: Could not get/register id for this client: " + client + " caused by "+ e
ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties")
e.getMessage()
new CommandLineException("Failed to execute operation.",e)
PRIORITY_MAX=3
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())
mDeviceProvisionedController.isCurrentUserSetup()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(element)).descriptionAndTooltip(message)
dstCursor == null
data.contains("red") || data.contains("orange") || data.contains("tabby")
mSyncStatus.valueAt(i)
halfTextureSize != 0 && scaleX > 0 && scaleY > 0
TypeEvalContext.slow()
_freemarkerEngineConfiguration.resourceModificationCheck()
new RuntimeException("Error loading DataSet at path " + pds.getPath() + " - DataSet may be corrupt or invalid."+ " Spark DataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
StringBuilder ret=new StringBuilder(100); 
times + BASE_FILE_NUMBER
assertPlanEquals(expectedPlan,actualPlan)
getConnectTimeout()
assertMockEndpointsSatisfied()
System.nanoTime()
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1))
TextUtils.isEmpty(title)
new IndexWriter(indexStore,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
this.thrown.expect(IllegalStateException.class)
!paused.get()
SerializedString name
mValues[8]
l.contains("<pre>")
!interactive || end == 0
e.getMessage().equals("Error decoding XML-RPC response")
return batchSize; 
Boolean.parseBoolean(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)
display.getRealMetrics(mDisplayMetrics)
@LargeTest
topicRegistrations == null || topicRegistrations.isEmpty()
Tuple2.of(timeoutPattern4,12L)
recipient.isMmsGroupRecipient()
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
BaseMessages.getString(PKG,"AutoDoc.Exception.UnknownFileTypeValue",fileType)
!resTable.getAnalysisMode()
setValue(object,value.intValue())
new Paint()
Thread.sleep(2000)
new GitException(ERROR_UPDATE_REMOTE_NAME_MISSING)
new EnterSelectionDialog(shell,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
!mScreenOnEarly
@Override public Response headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
logger.trace("{} recovery [phase2] to {}: start took [{}]",request.shardId(),request.targetNode(),stopWatch.totalTime())
this.targetValidator.validateValue(beanType,propertyName,value,groups)
expected.size() != actual.size()
"Unknown id: " + id
!newDefaultSubIdObj.equals(mDefaultSubId)
telephony.isRadioOn(getOpPackageName())
GridSystemProperties.getBoolean(GG_UPDATE_NOTIFIER,true)
writeOwners.size()
IndexReader.open(benchmark.getRunData().getDirectory())
(ret == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION,false)
mHandle != null
this(0L,null); 
menuGroup.add(new CommitUsingExecutorAction(executor))
selenium.isElementPresent("link=Control Panel")
ServiceLoader.load(ConfigurationBuilderFactory.class,getClass().getClassLoader())
Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,0)
new IllegalStateException("Advertising can't be both connectable and anonymous")
scheme.equals("tel") || scheme.equals("sip")
logger.finest("Optimized Selector: " + selector.getClass().getName())
name.equals("Devices") || name.equals("UUIDs")
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
localAddress != null && getParent() == null
from > to
checkCall(receiver)
apnContext.getWaitingApns()
context.getDataSource()
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
mState == STATE_UNINITIALIZED
n.floatValue()
" firstActiveTime=" + firstActiveTime
timeout=10000
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
lnumber <= 1
mSelectResponse != null && mSelectResponse.length > 0
greaterThanOrEqualTo(0L)
scheduleRemoveStartingWindowLocked(wtoken)
getPreferences().put(key,value)
child.getProperties().isStreamPartitionedOn(partitioningRequirement)
LOG.info("Could not find default spell checking inspection")
DEBUG=false
clob.getCharacterStream()
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler),Integer.MAX_VALUE)
Long.parseLong(attrValue)
getConnection().setInstanceFollowRedirects(followRedirects)
time != -1 && Math.abs(mLastModified * 1000 - time) >= 86400000
outStream.toString(StandardCharsets.UTF_8.name())
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
tree.getRowCount()
intBuffer.clear()
encounter.getObsAtTopLevel(true)
theAcceptButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"))
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
formatter.format("%s",toString(Verbosity.Id))
Appender<?>
startActivity(mAdapter.intentForPosition(0))
Thread.sleep(1000)
mRepeat > 0
mAuthorities.valueAt(i)
mAttributes.getAllFlags()
isArrayClass() || isInterface()
/**   * Gets the value of the miterlimit property.  * @return possible object is {@link BigDecimal }  */ public String getMiterlimit(){   return miterlimit; } 
mAppToken.isVisible()
FBReader.Instance != null && myControlPanel != null
checkCall(receiver)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalStateException cannotCloseTransactionContainerEntityManger(); 
selenium.isElementPresent("link=Control Panel")
newGraph.unique(new LocalNode(0,getObject().stamp()))
void setting(int identifier,long value) throws ConnectionException ; 
m.size()
!isMute
setZrtpEncryptionOnDescription(mediaType,description,null)
new EventSelectionModel(sortedForGrouping)
rightTuple.setStagePrevious(last)
/**   * Gets data center replication pause state  {@code null} if replication is not paused.  * @return Data center replication pause state {@code null} if replication is not paused.  */ @Nullable public GridDrStatus pauseState(); 
dest.writeInt(txPower)
frame.setLocation(frameLoc.x,30)
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
disabledForeground(false)
new ApiException(ApiException.Type.BAD_FORMAT,e)
userComponents.valueAt(j)
var.setValueType(guessType(value))
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
halfTextureSize != 0 && scaleX > 0 && scaleY > 0
Assert.fail("createDirectory was expected to fail with FileAlreadyExistsException")
ranges != null
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
powerFlowResponse == null || powerFlowResponse.getBody() == null || powerFlowResponse.getBody().getData() == null || powerFlowResponse.getBody().getData().getSite() == null
range.getTo()
buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,Character.class) || buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,char.class)
logger.info(e)
typeSettingsProperties.toSortedString()
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
NodeTraversal.traverseEs6(compiler,scriptRoot,this)
new RStudioThemedFrame(url,true,"allow-same-origin",null,null,false,true)
ProductSummaryWrapper wrapper=(ProductSummaryWrapper)context.getBean(ProductSummaryWrapper.class.getName()); 
dynamicType.getDeclaredConstructor()
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public CharSequence loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
c == Double.class || c == Double.TYPE
LOGGER.warn("Could not open external file",ex)
mPrivateInput == null || mReplyHeader.responseCode == -1
clusterListeners.size() == 0 && managerTemplate instanceof DeltaManager
managedType.getRawClass()
dest.writeInt(mSubId)
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile,false)
Foundation.log("[info] " + tag + ": "+ message)
getMockEndpoint("mock:line").expectedMinimumMessageCount(0)
timeMs <= 0 || timeMs >= 24 * 60 * 60* 1000
Integer.parseInt(displayIdStr)
RandomDocumentPicks.randomIngestDocument(random(),Collections.emptyMap())
counter > max
MonitoringPortlet.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
collisionPoints.get(0)
scan.getResourcesFound()
file.toURI()
Log_OC.e(TAG,"\t file is NULL")
typeSettingsProperties.toSortedString()
new UnsupportedOperationException("can't remove from a ReflectionDBObject")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
new StringBuilder(560)
selectedPos <= lastPos
public T parseNotation(Object notation){   assert canParse(notation) : "This parser only parses instances of " + typeToken.getName();   return parseType(typeToken.cast(notation)); } 
Throwable e
id=10860
frequencyKhz <= 30000
prevLen > 1
logger.warn("{}",builder.toString())
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
DBG=true
Integer.parseInt(topStr)
String.format(Locale.ROOT," Time: %6.2fms",queryTime * 1.e-6 / run)
askForPermissions(new String[]{Manifest.permission.CAMERA},2)
private final ByteArrayOutputStream outStream=new ByteArrayOutputStream(1024); 
psiMethod.getReturnType()
interfacesToImplement.contains(interfaceToImplement)
graph.unique(new FloatingReadNode(klassNode,location,null,stamp))
new EntryContentException("Blogs entry content must be a non null string")
FacetUtilsKt.getOrCreateFacet(getModule(),modelsProvider,false,null,false)
modelNode.hasDefined(LOCAL)
isTestOnReturn()
discoLatch.await(3000,MILLISECONDS)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
@NotNull GitLocalBranch source
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Iterable<TransitiveInfoCollection>
ourXWindowIDEA94683FocusBug && isFocused() && !myRequestFocus&& prevOwner != null && Registry.is("actionSystem.xWindow.remove.focus.from.nonFocusable.popups")
useHash=false
dockedBounds.top - dockDividerWidth
AtmosphereResponse.newInstance()
new GitException("Invalid reference to commit for merge " + request.getCommit())
new EmptyRepository.MyRepositoryElementsManager(psiManager,myRepositoryManager)
AbstractStoreHandler<DelayedEntry>
ModalityState.any()
NUM_DOCS_PER_TYPE=2000
public class HorizontalBarChart extends BarChart {   public HorizontalBarChart(  Context context){     super(context);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);   }   @Override protected void init(){     super.init();     setDrawXLabels(false);     setDrawYLabels(true);     mTrans=new ColumnToBarTransformer();     mValuePaint.setTextAlign(Paint.Align.LEFT);   }   /**   * Prepares a bar for drawing on the specified x-index and y-position. Also prepares the shadow-bar if enabled.  * @param x the x-position  * @param y the y-position  * @param barspace the space between bars  */   @Override protected void prepareBar(  float x,  float y,  float barspace){     super.prepareBar(x,y,barspace);     float spaceHalf=barspace / 2f;     float top=x + spaceHalf;     float bottom=x + 1f - spaceHalf;     mBarRect.set(0,top,y,bottom);     mTrans.rectValueToPixel(mBarRect,mPhaseY);     if (mDrawBarShadow) {       mBarShadow.set(mBarRect.left,mOffsetTop,mBarRect.right,getHeight() - mOffsetBottom);     }   }   @Override protected void drawXLabels(  float yPos){     if (!mDrawXLabels)     return;     mXLabelPaint.setTextAlign(Paint.Align.RIGHT);     float[] position=new float[]{0f,0f};     int step=mData.getDataSetCount();     for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {       position[1]=i * step + i * mData.getGroupSpace() + mData.getGroupSpace() / 2f;       if (mXLabels.isCenterXLabelsEnabled())       position[1]+=(step / 2f);       mTrans.pointValuesToPixel(position);       if (position[1] >= mOffsetTop && position[1] <= getHeight() - mOffsetBottom) {         String label=mData.getXVals().get(i);         mDrawCanvas.drawText(label,mOffsetLeft - 10,position[1],mXLabelPaint);       }     }   }   private static String TALL_VALUE="100%";   @Override protected float getPositiveYOffset(  boolean drawAboveValueBar){     Rect bounds=new Rect();     mValuePaint.getTextBounds(TALL_VALUE,0,TALL_VALUE.length(),bounds);     return bounds.height() / 2;   }   @Override protected float getNegativeYOffset(  boolean drawAboveValueBar){     return getPositiveYOffset(drawAboveValueBar);   }   /**   * Sets up the y-axis labels. Computes the desired number of labels between the two given extremes. Unlike the papareXLabels() method, this method needs to be called upon every refresh of the view.  * @return  */   @Override protected void prepareYLabels(){     mYLabels=new XLabelsAsYLabels();   } private class XLabelsAsYLabels extends YLabels {     /**   * Returns the longest formatted label (in terms of characters) the y-labels contain.  * @return  */     @Override public String getLongestLabel(){       String longest="";       for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {         String text=mData.getXVals().get(i);         if (longest.length() < text.length())         longest=text;       }       return longest;     }     /**   * Returns the formatted y-label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).  * @param index  * @return  */     @Override public String getFormattedLabel(    int index){       super.getFormattedLabel(index);       if (index < 0)       return "";       return mData.getXVals().get(index);     }   } } 
e.getKeyCode()
System.nanoTime()
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
pm.performDexOpt(pkg,null,true)
allocSize=32
user.getActualCompanyId()
hz1.getLifecycleService().shutdown()
type.getPresentableText()
selenium.isElementPresent("link=Control Panel")
framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)
selenium.click("//li[4]/span/a/span")
"access-control/default is missing operations: " + defaults
srcFile.isDirectory()
selenium.isElementPresent("link=Control Panel")
/**   * The lower value in the range.  * @return the lower value in the range.  */ T getFrom(); 
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
parentClass.getClassName()
i >= 1
msbFragmentCollection.getMsbFragmentCollectionId()
mBiometricUnlock.stop()
LOGGER.warn("Could not execute markEntries",ex)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
in.readData()
p.getNumberValue()
String message
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12451.87,12451.87)
log.debug("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(256)
DataStreamSink<OUT>
Thread.sleep(10)
channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))
origin < other
TelephonyManager.getDefault().getCurrentPhoneType()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
final T view
pw.print(ps.getInstantApp(user.id))
dest.writeInt(mSubId)
thingType != null && thingType.getConfigDescriptionURI() != null
jitter=0.3
getParentByStub()
@Override public PostgreTableBase getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
mAnimator.getPhaseX()
parent instanceof PyListLiteralExpression || parent instanceof PyParenthesizedExpression || parent instanceof PySetLiteralExpression|| parent instanceof PyKeyValueExpression|| parent instanceof PyNamedParameter|| parent instanceof PyArgumentList
false || mSpew
inputPath.toFile()
sizeNeeded > items.length
appleConfiguration.getSingleArchPlatform()
T deserialize(byte[] b); 
this.sessionFixationAuthenticationStrategy
new QSDetailClipper(mDetail)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
DEBUG || true
Throwable e
logger.trace("Session created")
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",false,new ServiceContext())
intent.resolveType(getContentResolver())
enabled=true
mAimsicdService.getCellTracker().updateNeighboringCells()
mulNegLong(x,y) | mulZeroSubLong(y,x) | mulSubZeroLong(x,y)
selenium.isElementPresent("link=Control Panel")
!mKey.equals(other.mKey)
super.getEqProvider(path)
typeInfo.keySet()
mCurrentDate.get(Calendar.MONTH) != month
ConcurrentMap<K,V>
log.d(LOG_TAG,"ACRA processName='" + processName + "'")
new Paint()
rImpl.getRequest()
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
View.class
commandLineArguments.isLocal() || commandLineArguments.isDebug()
SENDER_POSITION_TYPE_ID=2
rep.getAccountManagement()
logger.info("SSTables for user defined compaction are already being compacted.")
AMStoreUtil.getFileVersionPath(fileVersion,configurationUuid)
this.getClass().getName()
endpointA.expectedBodiesReceivedInAnyOrder("A blue car!","A blue car, again!")
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
LOG.info(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
serialVersionUID=490895073
Integer.getInteger("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
from >= to
new SimpleDateFormat("HH:mm MMM d yyyy",Locale.ENGLISH)
15 * 60 * 1000
selenium.isElementPresent("link=Control Panel")
resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)
statistics.addGetTimeNanos(System.nanoTime() - start)
CommonUtils.truncateString(query.getQuery(),512)
writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
setEnabledFunctions(null,true,false)
Object[]
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElements),false);   } } ,project.getDisposed())
UpgradeStepRegistrator.class
privateJDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
isColumnVector()
new Paint()
mClocks.uptimeMillis()
tempPinnedTaskBounds != null && stack.isAnimatingBoundsToFullscreen()
openConnection(false)
createMessage(7,"ABC",3,3,replyChannel,null)
shortNameWithVariant.contains("-") && !shortNameWithVariant.endsWith("-ANY") && Language.REAL_LANGUAGES.length > 1
testPackage.getFormattedSuccessRate()
e.toString()
params.get(key)
mLinearLayout.setVisibility(View.VISIBLE)
httpClient.closeAsynchronously()
DefaultJavaLibrary rule=createJavaLibraryBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(graphBuilder); 
fMethodDescriptions.putIfAbsent(method,description)
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
new WorldPoint(3238,3169,0)
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,0,null,false)
super.saveExisting(item)
minorVersion=0
Throwable t
@ConditionalOnEnabledHealthIndicator("diskspace")
mWM.removeViewImmediate(mView)
timeDifferenceMilliseconds < maxTolerateTimeDifferenceMilliseconds
table.hasSearchIndex(table.getColumnIndex("columnString"))
LOG.warn("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
!Config.supportOmemo()
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),stop_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),launcherStop_.getElement())
mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()
checkCall(receiver)
timeoutLatch.await(2500,TimeUnit.MILLISECONDS)
selenium.isElementPresent("link=Control Panel")
ret.message().get(0)
searchType.convertToIds(requiredCandidates,myIndex.getByteSeqEum())
id=10832
mIsClickable=false
msg.getType() == Message.Type.error || msg.getBody() == null
methodNode != null && closureExpression == null
hasColumn("KBComment","helpful")
JDBCUtils.safeGetLong(dbResult,"time")
checkCall(receiver)
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
MINOR_ALPHA=.42f
getCubeManager().mergeSegments(cube,newSeg.getDateRangeStart(),newSeg.getDateRangeEnd(),true)
DBG=true
TelephonyManager.getDefault().getCurrentPhoneType()
planDetailJson.getPlan()
customResourceLocator(url)
Thread.sleep(1000)
nl.size() >= minMatch
new Paint()
loaded.getLoaded().getDeclaredConstructor()
SamplingProfiler.newThreadGroupThreadSet(group)
parent instanceof PsiMethodCallExpression
new RequestSignUp(modules.getPreferences().getString(KEY_TRANSACTION_HASH),name,sex,null)
httpclient.query(query)
eKernel.length == 3
System.arraycopy(value,0,chars,length,value.length)
new InternetAddress(email_address)
child.resetRtlProperties()
ColorProperties.getColor("desktopBackgroundColor")
docsInSegment.get() >= 7
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
this.messageService.monoPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
loaded.getLoaded().getDeclaredConstructor()
public class XpathRegressionLeftCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
response.getContentAsByteArray()
transactionalMap.set(key,value)
System.out.println("--")
resultList.last()
AvailabilityRequirement requirement
methodsToImplement(type,methods)
entry.notification.cloneLight()
r != null && r.isHomeActivity()
new SQLException("Unknown error","00000",-1)
mEditText.append(mValue)
Formatter.getInstance().createContinuationIndent()
Throwable ex
topCallFrameView == null || topCallFrameView.getCallFrame() != topCallFrame
logger.warn("Invalid state {}",r)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE || mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET
Calendar.getInstance(timeIsGivenInThisTimeZone)
option.getJavaType()
Class.forName(metadata.getInheritedFromType()).isAssignableFrom(entity.getClass()) || entity.getClass().isAssignableFrom(Class.forName(metadata.getInheritedFromType()))
mCol.getDb().getDatabase().endTransaction()
msg.what=SHOW_ZOOM_BUTTON_MSG_ID
logger.trace("Received MyQ  JSON: {}",dataString)
previousPropertyName.compareToIgnoreCase(propertyName)
return true; 
mBackdrop.animate().alpha(0.002f)
internalViewSchema instanceof StructSchema
hz1.getLifecycleService().shutdown()
new ConcurrentHashMap<String,InjectionMetadata>(256)
Integer autoCommitInterval
value.setScale(1,RoundingMode.HALF_EVEN).doubleValue()
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
super.executeInternal()
ids.getIDs().length > 50
builder.and(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
public static Object replaceExecuteVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _executeMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _executeMap.containsKey(matcher.group(1))) {     String varValue=getStringFromExecuteMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
new FilesListComparator(){   @Override public int doItemCompare(  FileSystemItem arg0,  FileSystemItem arg1){     if (arg0 == parentPath_)     return 1;  else     if (arg1 == parentPath_)     return -1;  else     return arg0.getExtension().compareTo(arg1.getExtension());   } } 
new IOException("Test IOException")
schedulerName.equals(BOUNDED_FCFS_ALGORITHM)
super(false); 
acrComparator.compare(prevRow,compactedRow) >= 0
Exception e
TopEntity top1=new TopEntity(); 
pd == activePresentationDescriptor && activePresentationDescriptor.getPresentationType().isPersistent()
tracesDir.mkdirs()
mService.getProfiles(UserHandle.myUserId(),true)
mf.getColumnNameInSql()
destroyScripts[i]
new GitException(ERROR_ADD_REMOTE_NAME_MISSING)
selenium.isElementPresent("link=Control Panel")
context.getOpPackageName()
LOGGER.isDebugEnabled()
UserHandle.myUserId()
input.get(b,off,toRead)
countDownLatch.await()
FastMath.min(origin,num.floatValue())
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT) || order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT_MAKER)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
mPendingFocusChangedEvent
new SqlQuery(Person.class,"salary >= ? and salary <= ?")
Nd4j.create(this.data,this.arrayShape)
mShouldLogContentAppeared=false
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
meta.getEncoding()
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
new Paint()
remoteCache.get(key)
getPluginReferential().findLastReleasesWithDependencies(pluginKey)
new MethodHandler(methodKey,groupId,type,start,end)
new IllegalArgumentException(error)
item != null && !item.isDisposed()
Exception e
sqlType == Types.NUMERIC || sqlType == Types.DECIMAL
selenium.isElementPresent("link=Control Panel")
Assertions.assertThrows(EmptyStackException.class,() -> stack.peek())
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commitAllowingStateLoss()
mapper.setAttributePrefix("ROLE_")
"Trying to use view with tag " + parentTag + " as a parent, but its Manager doesn't extends ViewGroupManager"
new INodeDirectory(dirNode,true)
typeSettingsProperties.toString()
field.createField(fieldType.indexedToReadable(indexedValue),1.0f)
assertViolations(result,0,1,0)
vals.length != _sparseLen
configTimeRegionFactoryHolder.remove()
iobj.getType() != null
Throwable e
remaining == 0
e.getMessage().startsWith("fields stored in the db can't have . in them")
getBackgroundLocalFileFetchToEncodeMemorySequence()
mContentView.findViewById(android.R.id.list)
Assertions.assertNotNull(mModules.get(moduleInterface),moduleInterface.getSimpleName())
logger.debug("Couldn't get interpreter editor setting")
targetSdkVersion != -1
myVcsConfiguration.CHANGED_ON_SERVER_INTERVAL * 60000L
fluids.containsKey(fluid.getName())
Cleaner.create(mFileDescriptor,new Closer(mFileDescriptor,mMemoryRegistration))
resolver.acquireUnstableContentProviderClient(uri)
getKeyFromGrant(grantAlias)
BackgroundTask.wrap(() -> renderPage(page))
marketDataService.getBitfinexTrades("btcusd",System.currentTimeMillis() / 1000 - 120)
initLocale || !mProcessesReady
mCryptConnector.execute("cryptfs","deleteuserkey",userHandle)
Thread.currentThread().hashCode()
id=79
sb.getParts() != null && sb.getParts().size() == 1
Byte.toUnsignedLong(seed[0])
params.getBuckEventBus()
waitForJobExecutorToProcessAllJobs(5000,500)
selenium.isElementPresent("link=Control Panel")
randomAlphaOfLength(11)
client.getData()
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
GlobalSearchScope.allScope(getProject())
mpline.substring(0,p).trim().toLowerCase(Locale.US)
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
dest.writeInt(mSubId)
realm.getColumnIndices()
Class<S>
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
getServiceForUserLocked(userId)
targetDatabase.getObjectQuotingStrategy()
finishAndRemoveTask()
new InvalidTopologyException("Unable to retrieve cluster topology for cluster. This is most likely a " + "result of trying to scale a cluster via the API which was created using " + "the Ambari UI. At this time only clusters created via the API using a "+ "blueprint can be scaled with this API.  If the cluster was originally created "+ "via the API as described above, please file a Jira for this matter.")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,true)
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=true
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("DH-DSS-DES-CBC3-SHA",KeyExchange.DHd,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA")
(!p.matcher(definedType.getType()).matches()) && (definedType.getLength() == 0 || !p.matcher(definedType.getType() + "(" + definedType.getLength()+ ")").matches()) && (definedType.getScale() != 0 || !p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ","+ definedType.getScale()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ", "+ definedType.getScale()+ ")").matches())&& (StringUtils.isBlank(definedType.getUserType()) || !p.matcher(definedType.getUserType()).matches() && !p.matcher(definedType.getQualifiedUserType().toString().replace("\"","")).matches())
-26
type.getGenericType()
HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,method.getModifierList()) == null && !(aClass instanceof PsiAnonymousClass)
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
Throwable ignored
@Override public HttpResponseMessage getDefaultOutput(HttpResponseMessage input){   return input; } 
session.flush()
new ReferenceVariantsHelper(bindingContext,visibilityFilter).getReferenceVariants(callNameExpression,new DescriptorKindFilter(DescriptorKindFilter.FUNCTIONS_MASK | DescriptorKindFilter.CLASSIFIERS_MASK,Collections.<DescriptorKindExclude>emptyList()),false,nameFilter)
Optional.ofNullable(target)
context.getAssets().addAssetPathAsSharedLibrary(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
UpgradeStepRegistrator.class
mActiveStreamType == -1 || streamType != mActiveStreamType
lastListener == null
testClass.getSimpleName()
@Override public Response schema(Property property){   throw new RuntimeException("Not implemented"); } 
stepDone()
gavin.getStudentNumber()
collection.setOnScrollListener(onScrollListener)
new KBArticlePriorityException("Invalid article priority: " + priority)
element != null && element.getKind() != ElementKind.CONSTRUCTOR
filename.endsWith(ext)
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
node1.isEquivalentToTyped(node2)
String message
stackIterator.remove()
Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
initialCapacity > 1 << 30
getMockEndpoint("mock:" + i).expectedMessageCount(200)
appMode.getMapIconId()
handleImpl.getObject()
webView.findNext(false)
pendingInactive.addAll(inactive.values())
selenium.isElementPresent("link=Control Panel")
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
resourceUrl.toString()
CharSequence url
irrCubeMap.getImage()
behindFraction * GRADIENT_SCRIM_ALPHA_BUSY
ds.getFeatures()
new IllegalArgumentException(JSON_BUILDER + "invalid element on the stack")
bundle != null && bundle.containsKey(key)
FlatJoinFunction.class
OAuthConstants.BEARER_TOKEN_TYPE.equalsIgnoreCase(tokenType)
selenium.isElementPresent("link=Control Panel")
tupleOrigin != null && tuples.containsKey(tupleOrigin)
a == null || a.isFinishing()
index > widgets.length
dlFileShortcut.getFileShortcutId()
getSpringStatus()
ColorProperties.getColor("sliderGradientDark")
new FallbackStringToObjectConverter()
new RFXComException("Send failed, reason: " + e.getMessage(),e)
footerRow != null
state.getTypeMapper().mapType(type)
mFrameTransformation.printShortString(pw)
commandExecutor.writeAsync(getName(),codec,RedisCommands.GEOADD,getName(),convert(longitude),convert(latitude),member)
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
newGraph.unique(new LocalNode(0,getObject().stamp()))
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
c.networkId == netId && c.SSID.equals(config.SSID)
ExampleItemWriter.class
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
slash < 0 || slash == path.length() - 1
typeSettingsProperties.toString()
LOGGER.warn("Could not open external file",ex)
toRemove != null
DISPLAY_TASKS_PORTRAIT=7
(flags & 0x04) != 0
num.set(j,numbers.get(keys[j]))
TelephonyManager.getDefault().getCurrentPhoneType()
Long.parseLong(timeout)
BTraceUtils.setIntrusionLevel(0)
ContainerUtil.newIdentityHashMap()
iconicsDrawable.iconText(mPlainIcon)
this.traceHandlers.remove(traceHandler)
options.put("updated",true)
Resources.getApplicationProperty("defaultGroupName")
hasColumn("MicroblogsEntry","receiverUserId")
um.getUsers(true)
Utils.readLong(binary,8)
selenium.isElementPresent("link=Control Panel")
N node
Thread.sleep(200)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.AVG,Pooling2D.Divisor.INCLUDE_PADDING,0.0,outH,outW,output)
executor.scheduleAtFixedRate(this,period,period,unit)
alarm.getType()
writeRepeatedBoolImpl(id,val)
NotificationManager.getInstance().onMessageNotification(messageItem)
reads=true
runtime.lookupType(parameters.get(index),(HotSpotResolvedObjectType)accessingClass,false)
value < maximumValue
mService.mAppOps.noteOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
lastModifiedNow <= (System.currentTimeMillis() - this.minimumTimeoutForEmptyGroups)
upgradeVersion=37
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
a.length > count()
@Override public final DivideByOnConditionStep on(String sql,QueryPart... parts){   and(sql,parts);   return this; } 
centerButton(mButtonNegative)
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
request.getContentType().startsWith("application/x-www-form-urlencoded")
nextIdx + 1
callback.onDownloadFailure(0,0)
barrier.await(2,TimeUnit.SECONDS)
61L + 122L
imageView.setImageDrawable(drawable)
group.isUser() || group.isCompany() || group.isUserGroup()
l.onResume(request,response)
grammar.getTokenDisplayNames()
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
ConduitInitiatorManagerImpl.class
store.forceBlockingFlush()
logger.error("Caught exception while processing get request",e)
assertEquals(16,rows.size())
assertEquals(0,StringUtil.getOccurrenceCount(text,"checkExpressionValueIsNotNull"))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
ppiY / 2.54f
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
project.members(IContainer.INCLUDE_HIDDEN)
display.getRealMetrics(dm)
@Override public final Field createField(SchemaField field,Object val,float boost){   throw new IllegalStateException("should be calling createFields because isPolyField() is true"); } 
PrintAttributes.enforceValidDuplexMode(currentMode)
typesToMatch.length > 1
readSync.wait(100)
@InputMagicNumberIntMethodAnnotation(-44)
selenium.isElementPresent("link=Control Panel")
new XExpressionImpl(expression.getExpression().trim(),expression.getLanguage(),expression.getCustomInfo(),expression.getMode())
id=20
SOURCE_PATH.deref()
m.size()
settings.readLPw(null,0,false)
new Paint(Paint.ANTI_ALIAS_FLAG)
uri == null || LauncherActivity.isLaunchUri(uri)
saveTaskDefinition(taskDefinition)
servers == null || servers.isEmpty()
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
DEFAULT_PORT=8081
elementToHighlight == null || elementToHighlight.getTextRange().getLength() == 0
new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)
mMccStr == null
uri == null || uri.length() == 0
AssetVocabularyUtil.fetchByG_N(groupId,vocabulary.getName())
mAppOpsManager.noteOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
_buildTemplateWithGradle("activator","activator-dependency-management","--dependency-management-enabled")
XmlUtils.readIntAttribute(parser,ATTR_DATABASE_VERSION)
SCAN_STATUS_PARTIAL=1
Throwable e
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack,WrappedStack.class)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
Integer.parseInt(rightStr)
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
disable2ForUser(what,token,pkg,mCurrentUserId)
Bytes.toBytes(tableNameOrRegionName)
replicaId < nReplicas
this.context.getLogAggregationStatusForApps().add(finalReport)
UtilActivator.getSystrayService().checkInitialized()
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
mSyncStatus.valueAt(i)
ColorProperties.getColor("selectionBackground")
statistics.addGetTimeNanos(System.nanoTime() - start)
new UnsupportedOperationException(getClass().getName())
content.contains(customCopyright)
findState > 0
effects.equals(hEffects.effects)
ISODateTimeFormat.dateTime().withOffsetParsed()
from >= to
case READ_REPLICA: 
pending.get()
mShowcaseRect.left == cx - dw / 2 && mShowcaseRect.top == cy - dh / 2
Thread.currentThread().hashCode()
selenium.isElementPresent("link=Control Panel")
mAppOpsManager.noteOpNoThrow(opCode,callingUid,opPackageName)
mSyncStatus.valueAt(i)
!src.isEnabled() || src.isLongClickable()
mImage.getFrameCount() <= 1
CopyOnWriteArrayList<EntryListener<?,?>>
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
WindowedValue.valueInGlobalWindow(4,PaneInfo.NO_FIRING)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public String getViewIdResourceName(){   return mViewIdResourceName; } 
dest.writeTypedArray(remoteInputs,flags)
new String(jsonExpectation,Charset.forName(CharEncoding.UTF_8))
suiteClass.getSimpleName()
!StringUtil.isEmpty(scheme)
input.getDouble(0) < 0.05
mView.postOnAnimation(mAnimationStarter)
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ assertName+ " />"
req.getPieceRange()
new ShardingConnection(xaDataSourceMap,shardingContext,TransactionType.XA)
SamplingProfiler.newThreadGroupThreadSet(group)
assertTrue(message.getPayload() instanceof Collection<?>)
new PlaybackServiceStarter(context,media).startWhenPrepared(true)
new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"))
value.entrySet()
Log.severe("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
actionForm.getMultipartRequestHandler()
m.getContent(InputStream.class)
selenium.isElementPresent("link=Control Panel")
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_ACCESS_SETTINGS,true)
XmppStringUtils.parseBareJid(user)
it.setJavadocComment("Cool this annotation!")
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisible)
msbFragmentEntry.getMsbFragmentEntryId()
myCache1.get("myKey1").getObjectValue()
getTestName(true)
dynamicType.getLoaded().getDeclaredConstructor()
storedOverlayInfos.valueAt(i)
rs.getMetaData()
calendar.add(Calendar.DATE,-1)
isGreaterOrEqual(platformVersion,M)
GL20.glUniform3iv(location,v)
Encr.decryptPassword(r.searchValue("PASSWORD").getString())
KotlinTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
mBindingServices.isEmpty()
selenium.isElementPresent("link=Control Panel")
rs.isLast()
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.CLIENT_ERROR,getHttpStatusSeries(result))
!mShowLockscreenNotifications
@Override
ormEntity.getMetadataComplete()
hasColumn(tableName,columnName)
in.readFully(serCondition)
ONE_MINUS_DST_ALPHA(7)
myCache1.get("myKey1").getObjectValue()
!getLocationEnabled()
TypeEvalContext.slow()
myMavenProjectsManager.doInitComponent(false)
media != null && media.getMediaType() == MediaType.AUDIO
SamplingProfiler.newThreadGroupThreadSet(group)
context.getDataSource()
swap instanceof FileSwapSpaceSpi
defaultSelectors(executor)
signature != null && signature.getReturnType() != null
edge.setDirection(edgeDefault)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
FORBIDDEN_INDEX_SETTING.equals(name)
targetType.getDeclaredConstructor()
storedHash == null || TextUtils.isEmpty(credential)
selenium.isElementPresent("link=Control Panel")
ImmutableList<String>
from > to
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
lock.isHeldByCurrentThread()
~View.SYSTEM_UI_TRANSPARENT
Double.compare(c1,c2)
OracleDataType.class
mActiveStreamType == -1 || streamType != mActiveStreamType
bindingConfig != null && converterHandler != null
buffer.getUint8()
public StopFilter create(TokenStream input){   return new StopFilter(input,stopWords,ignoreCase); } 
lastConnectionFailure.get()
LOGGER.error("Unknown {} : {}",OAuthConstants.CLIENT_ID,clientId)
PermissionUtils.areLocationPermissionsGranted(this)
i=0
hasRows(oldTableName)
assertEquals(14,beanCount)
split.length > 6 && split[6].length() > 0
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
result.setEncodingAndType(st.getResponseSOAPContext().getContentType())
appName != null && searchManager.getSearchableInfo(appName) != null
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
startNode != null || justScanInScope
second.get(j)
action != KeyEvent.ACTION_UP
Throwable e
timeout=1800000
systemId.length()
optionsOverride.getLambdaRole()
companyAssetCategory.getCategoryId()
Integer.parseInt(rightStr)
user.getSystemId() == null || user.getSystemId().equals("")
returnPoshiElement.createReadableBlock(readableBlock)
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
childLeftTuple.reAddLeft()
entry.getValue()
new ObjectMapper().readerFor(Map.class)
mOneShot=false
LOG.warn(String.format("%d ms elapsed since build job marked as finished, but still missing finished status from some workers.",elapseMillisSinceFirstFinishedStatus))
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
portlet.getPortletId()
mUiHandler.removeCallbacks(pae)
WordPress.getCurrentBlog().getLocalTableBlogId()
writeStartElement(null,localName,null)
logger.info("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
_log.warn(ioe,ioe)
this.acquireCameraInstance(cameraType)
Throwable ex
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new ServletException("non-HTTP request or response",e)
new BigInteger(1,buf)
vcs == null || vcs.getDiffProvider() == null
executeConnectAsync=true
dz >= 1
doTestWithLanguageLevel(getTestName(false),inspection,LanguageLevel.PYTHON27)
Integer.parseInt(nid[0],16)
isAvailable(oldStatus)
MAP.put(UPPER_BOUND_VIOLATED,"Type argument is not within its bounds: should be subtype of ''{0}''",RENDER_TYPE,RENDER_TYPE)
Object configHtmlCacheDisabled=configProps.get("disableHtmlCache"); 
DEFAULT_MAX_UNION_SIZE=30
snapshot != null && isForPlayback
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Thread.sleep(1000)
!(layer instanceof FrozenLayer) && layer.type() == Layer.Type.CONVOLUTIONAL
nodes.hasLabel(bazLabel)
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID|| value instanceof Boolean
timeFieldSpec.getOutGoingTimeColumnName()
orderedGroups.size() > n
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   GridCacheProjectionImpl<K,V> prev=gate.enter(prj);   try {     return delegate.drPauseState();   }   finally {     gate.leave(prev);   } } 
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
adapter == IResultSetController.class || adapter == ResultSetViewer.class
RecyclableBufferedInputStream bis=new RecyclableBufferedInputStream(is,tempBytes[0]); 
s.charAt(0) == 'z' || s.charAt(0) == 'Z'
ApplicationManager.getApplication().isUnitTestMode() ? 1 : 2
waitFor(pin,mode,-1)
target.getDestinationLinkAddress()
selectedPageLabel_.removeClassName("selected")
DEBUG_RC=false
Long.parseLong(val)
ModuleIdentifier.fromString(moduleName)
Throwable e
if (enabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
mParent == null
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults,numResults)
insertImport(importStatement,element,importElement.getAsName(),true)
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
sleepTime=4000
new ShowcaseViewBuilder(activity)
PhoneNumberUtils.is12Key(number.charAt(i))
Trans != NO_TRANSPOSE
CheckEmptyTagInspection.class
c.close()
type == SplineType.CatmullRom && !getControlPoints().isEmpty()
spdy || spdyPlain || h2|| h2c|| ajp
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
child.resetRtlProperties()
clone != null || index.containsKey(object)
typeArg instanceof PsiWildcardType && !((PsiWildcardType)typeArg).isBounded() || typeArg != null && TypeConversionUtil.erasure(typeArg).equalsToText(CommonClassNames.JAVA_LANG_OBJECT)
temp_descs.get(j)
JavaFile.fromRelativePath(sourceRelativePath,false).getDeprecatedKey()
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon")
element.getText()
List<Number>
Integer.toHexString(flags)
System.out.println()
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
view.getClusteredLayerDegree(absNode)
p1.isTerminated()
assertNotSame(saved,result)
mGnssCallback != null
logger.debug("Error connecting to Plex",e)
checkCall(receiver)
Integer.parseInt(attrValue)
cache.flushAndForce()
System.currentTimeMillis()
/**   * Titan graph database implementation of the Blueprint's interface. Use  {@link TitanFactory} to open and configure TitanGraph instances.  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  * @see TitanFactory  * @see TitanTransaction  */ @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_INTEGRATE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_PERFORMANCE) @Graph.OptIn("org.janusgraph.blueprints.process.traversal.strategy.TitanStrategySuite") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.structure.VertexPropertyTest$VertexPropertyAddition",method="shouldHandleSetVertexProperties",reason="Titan can only handle SET cardinality for properties when defined in the schema.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldOnlyAllowReadingVertexPropertiesInMapReduce",reason="Titan simply throws the wrong exception -- should not be a ReadOnly transaction exception but a specific one for MapReduce. This is too cumbersome to refactor in Titan.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldProcessResultGraphNewWithPersistVertexProperties",reason="The result graph should return an empty iterator when vertex.edges() or vertex.vertices() is called.") public interface TitanGraph extends Transaction {   /**   * Opens a new thread-independent  {@link TitanTransaction}. <p/> The transaction is open when it is returned but MUST be explicitly closed by calling  {@link org.janusgraph.core.TitanTransaction#commit()}or  {@link org.janusgraph.core.TitanTransaction#rollback()} when it is no longer needed.<p/> Note, that this returns a thread independent transaction object. It is not necessary to call this method to use Blueprint's standard transaction framework which will automatically start a transaction with the first operation on the graph.  * @return Transaction object representing a transactional context.  */   public TitanTransaction newTransaction();   /**   * Returns a  {@link TransactionBuilder} to construct a new thread-independent {@link TitanTransaction}.  * @return a new TransactionBuilder  * @see TransactionBuilder  * @see #newTransaction()  */   public TransactionBuilder buildTransaction();   /**   * Returns the management system for this graph instance. The management system provides functionality to change global configuration options, install indexes and inspect the graph schema. <p /> The management system operates in its own transactional context which must be explicitly closed.  * @return  */   public TitanManagement openManagement();   /**   * Checks whether the graph is open.  * @return true, if the graph is open, else false.  * @see #close()  */   public boolean isOpen();   /**   * Checks whether the graph is closed.  * @return true, if the graph has been closed, else false  */   public boolean isClosed();   /**   * Closes the graph database. <p/> Closing the graph database causes a disconnect and possible closing of the underlying storage backend and a release of all occupied resources by this graph database. Closing a graph database requires that all open thread-independent transactions have been closed - otherwise they will be left abandoned.  * @throws TitanException if closing the graph database caused errors in the storage backend  */   @Override public void close() throws TitanException ;   /**   * The version of this Titan graph database  * @return  */   public static String version(){     return TitanConstants.VERSION;   }   public static void main(  String[] args){     System.out.println("Titan " + Titan.version() + ", Apache TinkerPop "+ Gremlin.version());   } } 
getExecutionException()
assertOpenEventually(latch)
Class.forName(className,false,tccl)
new CommandLineException("The result couldn't be retrieved (perhaps the task was cancelled",e)
post.setRequestHeader(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
optionalClient.orElse(null)
e.toString()
ColorProperties.getColor("buttonGradientLight")
cache.localPeek(key)
lp.resolveLayoutDirection(layoutDirection)
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
currencyPair.counter.getCurrencyCode().toUpperCase()
DurationType.getAverageYearMonthType()
pId + BASE_FILE_NUMBER
mDataAuthorities == null || data == null
getLogger()
GlobalSearchScope.allScope(project)
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
Object maxIntDigits=properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
new AnalyzedToken(word,currTag,lemma,pos)
c == Long.class || c == Long.TYPE
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
origin.realComponent().doubleValue() < other
info.prefixedName()
Validate.notNull(soloInstances)
descriptorDecoder.originalChannel()
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
serialVersionUID=1903538293
LOG.info("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
mCaCerts != null && mCaCerts.length > 0
System.currentTimeMillis() + 1_800
display.getRealMetrics(mDisplayMetrics)
LOG.debug(e)
dataOffset >= data.length
CHECKIN_VERSION=31
new RoutePlannerFrontEnd()
loaded.getLoaded().getDeclaredConstructor()
LOGGER.warn("Groovy script [{}] returned no value for username attribute. Fallback to default [{}]",this.groovyScript,principal.getId())
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
mapper.getTypeFactory().constructType(AuthConfig.class)
new GroupTest(true)
title.substring(0,17)
src.copy(src.getConfig(),true)
stagingTypeSettingsProperties.toString()
identifierHelper().toIdentifier(resultSet.getString("TABLE_NAME"),tableName.isQuoted())
if (dockOnTopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
type.getDeclaredConstructor()
Thread.sleep(200)
Integer.parseInt(attrValue)
@NonNull
conf.getInt("rabbitmq.port",5672)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
logger.warn("Configuration for influxdb not yet loaded or broken.")
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } ,myProject,null)
assertEquals("val-2",mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE))
NavigatePointFragment.this.getContext()
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
annotationHelper.printAnnotationError(element,"%s annotated element should have an empty constructor")
Throwable e
mSyncStatus.valueAt(i)
checkArgument(prestoTypeParameters.size() == fieldTypes.size(),"Schema mismatch, metastore schema for row column %s has %s fields but parquet schema has %s fields",columnName,prestoTypeParameters.size(),fieldTypes.size())
Assert.assertEquals(select.size(),0)
Preconditions.checkNotNull(blockIds,"blockIds")
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
JSTypeUtils.areTypesCompatible(setterType,type,null,function)
MessagingService.instance().sendRR(message,target,handler,false)
loadedTextures.size()
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
selenium.click("//li[4]/span/a/span")
InputMethodManager.getInstance()
attachViewToParent(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
setValue(object,value.intValue())
msbFragmentCollection.getMsbFragmentCollectionId()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
node.getAttributes()
readySegment.getDateRangeEnd() > segment.getDateRangeStart()
partialUri.toLowerCase()
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription(),target.isInterface())
new Paint(Paint.ANTI_ALIAS_FLAG)
String superclass
hStack.getScrollHeight() + vLayout.getScrollHeight() + 10
id=10867
containsString("State")
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
false && canHaveDisplayList() && canvas.isHardwareAccelerated()
LOG.warn(e)
ddmTemplateModel.setCacheable(true)
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
arg.indexOf('.') >= 0 || arg.equals("android")
type.getDeclaredConstructor()
Boolean.parseBoolean(attrValue)
engine.execute(query).dumpToString()
sendMessageAtFrontOfQueue(CMD_STOP_AP)
new NullPointerException("Emitter got a null throwable. Null values are generally not allowed in 2.x operators and sources.")
connectPromise.tryFailure(t)
Assert.assertTrue(semaphore.acquire(3,TimeUnit.SECONDS))
case PLAYER_JOIN: 
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
devicePort.type() == AudioManager.DEVICE_OUT_HDMI || devicePort.type() == AudioManager.DEVICE_OUT_HDMI_ARC
timeSinceEarliestUnpaidInvoiceEqualsOrExceeds == null
response.getRawStatusCode()
isBlacklisted(i,nowMs)
element == null || element instanceof PsiEmptyStatement
rhs.getScore()
docErrors.entry(i)
log.error(message)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
builder.length() == 0 && s != null
Throwable e
holder.setGone(getLoadingViewId(),visible)
T userObject
textLanguage.getShortName()
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
sep < 0 || sep > j
new GitException("Remote url " + url + " is invalid. ")
new PageRequest(0,1)
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
maxRows >= 0
excludeDirPathMatcherList.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
final LongAdder8 msgCntr=new LongAdder8(); 
tag.getName()
type.getDeclaredConstructor()
selenium.click("//li[4]/span/a/span")
(InvocationTargetException)unwrapped
JBIterable.from(getSelectedValuesList())
is(15)
!itemChannelLinkRegistry.getLinks(channelUID).isEmpty()
StringBuilder output=new StringBuilder(); 
dockedBounds.right + dockDividerWidth
!oldPluginMd.getConfiguration().equals(pluginMd.getConfiguration())
enclosingHeight - height - insetBottom
putBytes(v)
current >= 0
RectF r=(RectF)o; 
mStartDelay == 0 || mSeekFraction >= 0
node.internalOrder()
SVNURL.parseURIEncoded(myUrl)
UpgradeStepRegistrator.class
Preconditions.checkArgument(argv.length == 2,"usage: value(\"attr\", \"value\")")
conceptAnswer.getAnswerConcept()
scheduleRemoveStartingWindowLocked(wtoken)
final StringBuilder replacement=new StringBuilder(tag.getText()); 
type.getDeclaredConstructor()
RequestContext.create(ksession.getClass().getClassLoader())
new Paint(Paint.ANTI_ALIAS_FLAG)
DatabaseDescriptor.getRangeRpcTimeout()
logger.debugf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
dist <= bestdist
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
childSubscription.set(scheduler.schedule(parentAction,parentAction))
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
URI.create(super.getHeader(name)).getRawPath()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
setBackground(null)
10 * 1000
input.mark(bufferSize)
mFrameSlots.remove(name)
systemId.length()
ImageUtilities.createBufferedImageForDisplay(capture.getNextFrame())
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
ListWithDefault<T>
appName != null && searchManager.getSearchableInfo(appName) != null
vocabularySettingsHelper.getRequiredClassTypePKs()
((ViewGroup)viewHolder.view).addView(mView)
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=2
t.join(0)
anyInt()
assertEquals(10,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
Environment.getOemDirectory()
t.getState() == Thread.State.RUNNABLE
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS
LocalEjbReceiver.clone(resultCloner,exception)
args.toArray()
new NameAlias(nameAlias)
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
getExternalName(annotation.getOwner())
Math.min(titleRight,subtitleRight)
moveInputMethodWindowsIfNeededLocked(false) || displayed
JBUI.scale(4)
context.var("long",2)
private final QSDetailClipper mClipper; 
level >= 95
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).switchIfEmpty(EMPTY_FORM_DATA)
@NonNull
lock.isHeldByCurrentThread()
new GroovyRuntimeException("Unable to load logging class",e)
devicePort.type() == AudioManager.DEVICE_OUT_HDMI || devicePort.type() == AudioManager.DEVICE_OUT_HDMI_ARC
((getAdditionalInformation() != null) && ((database instanceof PostgresDatabase) || (database instanceof OracleDatabase))) || (database instanceof HsqlDatabase) || (database instanceof H2Database)
getRestricted(null,uid,sRestrictionName,null,false,false)
editor == null || editor.getComponent().getRootPane() == null
n.doubleValue()
CodeStyleSettings.class.getField(value)
mValues[8]
exchange.setRequestHeader("Authorization",_basicAuth)
IOException e
assertEquals(d.getColumnCount(),25)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
assetUri.getAssetName().toLowerCase()
AbstractBottomUpTraversal<TargetNode<?>,RuntimeException>
ESTestCase.randomAlphaOfLengthBetween(5,10)
public @JsonProperty("method") String method; 
selenium.isElementPresent("link=Control Panel")
(long)mCachedGroupId[i] << 32L
hasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
now >= deadline
file == null || !file.isInLocalFileSystem()
/**   * The resource.   */ private R mResource; 
new SimpleProxyPool(httpProxyList,false)
i >= 0
opti >= args.length
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
dlg.getListView().addFooterView(footerView,null,false)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
mock.expectedMinimumMessageCount(2)
ignite.getOrCreateNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY,String.class)
objectFactory.newInstance(DefaultSwiftExecutable.class,name + "Executable",projectLayout,objectFactory,getModule(),true,false,getSwiftSource(),configurations,getImplementationDependencies())
CANCELED_WAIT_TIMEOUT=3000
new Handler(IoThread.getHandler().getLooper()){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
type.getDeclaredConstructor()
Object... selected
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:10500}")
@NotNull Id id
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
Object[]
inflater.inflate(R.layout.mainfrag,container,false)
text.substring(idx + 1)
new FormAttachment(spacer,20)
order.getSize()
taskService.createTaskQuery().orderByExecutionId()
selenium.isElementPresent("link=Control Panel")
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
cs[c].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
!client && !disabled && !tribeNodeClient&& complianceConfig.logExternalConfig()
log.debug("Not in OSGi: using plexus based maven parser")
holder.getListener().onCaptureSequenceAborted(CameraDeviceImpl.this,requestId,lastFrameNumber)
is2D() && len != 4
Map<String,U>
new IllegalStateException()
LOG.warn("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
engine.execute(query).dumpToString()
responseHelper.invokeCancel(callback)
(status & 0x08000000) != 0
BeanUtil.setDeclaredProperty(target,parameter,value)
assertEquals(19,commits.size())
targetConfig.trimConfigurations()
RandomStringUtils.randomAlphanumeric(20)
targetMeta.convertData(sourceMetaCopy,r[rowcolumn])
m[M30]
consumeToken(b,IDENTIFIER)
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
hasRows(oldTableName)
revWalk.close()
result >= TimeUnit.DAYS.toNanos(1)
return 0; 
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
String.format((Locale)null,"%.4f",s.getValue())
SVID_SHIFT_WIDTH=8
!super.equals(obj)
new ProjectConfigurablesGroup(project,false)
replyMsg.toString().getBytes()
fieldAnnotations != null
A
attributes.getAllFlags()
t != null && t.length() > 0
sStatsd.informDeviceShutdown(true)
source.isNodeDescendant(target)
type.getDeclaredConstructor()
updateRulesForGlobalChangeLocked(true)
final URLDetail webd=(URLDetail)d; 
execute("DROP INDEX " + indexName)
new PebbleMorpheuzSample(recording_base_timestamp + index * 600,deviceId,userId,intensity)
counter > max
info.parentPrefab.exists()
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
process.waitFor(5,TimeUnit.MINUTES)
getExecutionException()
declaringClass.getSimpleName()
width - 2
getConnector()
onHold & ON_HOLD_LOCALLY
Thread.sleep(401)
uri.getRawPath()
mMat[7]
Math.min(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
serviceDataUuid == null || mServiceData == null
selenium.isElementPresent("link=Control Panel")
getXmppConnection().getAttempt() >= 3
event.getRawX()
group.getAvatar() != null && group.getAvatar().getFullImage() != null
Platform.isAIX()
threadSafe=true
indexBuf.getData().limit()
enabled=true
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,false)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_folder_name"))
ti.setText(2,jobEntry.wildcard[i])
mBondState.setBondState(address.toUpperCase(),state,reason)
String.valueOf(0.09)
type.getDeclaredConstructor()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,19,getLayoutLog())
Throwable exception
serialVersionUID=1164829031
selenium.isElementPresent("link=Control Panel")
SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
public Trade read() throws Exception {   if (counter < limit) {     counter++;     return new Trade("isin" + counter,counter,new BigDecimal(counter),"customer" + counter);   }   return null; } 
db.hashMapCreate("cache")
gridDim > 768
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
Criterion.and(MetadataCriteria.withKey(TagMetadata.KEY),Metadata.DELETION_DATE.eq(0),TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.in(tagUuids))
implementationMethodDescriptors.build()
LOG.debug("Registered pre-upgrade check {}",upgradeCheck.getClass())
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
currLine < mPrevLine
content().duplicate()
rows != null && rows.length != 0
1000 * 60
getLocalPort()
final LongAdder8 cntr=new LongAdder8(); 
assertEquals(12,beanCount)
logger.debug(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
testClass.getSimpleName()
mListener.getConnectionId() != -1 && request.mConnectionID != null
b == null
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
WordPress.getCurrentBlog().getLocalTableBlogId()
mUiHandler.removeCallbacks(pae)
_connector.getResponse("GET /foo HTTP/1.1\n\n")
mappers.mapper().searchQuoteAnalyzer()
value.toLowerCase().startsWith(constraintLowerCase)
new DateTime(Long.parseLong(firstTimestamp) * 1000,DateTimeZone.UTC)
Thread.sleep(1000)
setVisibility(GONE)
LOGGER.info("Intercepted " + method.getFullMethodName())
host.setHeaderView(mExpandIndicator)
Allocation.createFromBitmap(mRS,outb,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
user.getTimeZone().getOffset(System.currentTimeMillis())
id=10800
SecurityUtils.isAuthorizationEnabled(configuration)
data == null || method.toLowerCase().equals("get") || method.toLowerCase().equals("head")
assertPlanEquals(expectedPlan,actualPlan)
idx[j] > 0
Long.parseLong(deadline)
TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MULT,PyTokenTypes.OR,PyTokenTypes.AND)
ACRA.log.i(LOG_TAG,"ACRA is disabled for " + context.getPackageName() + " - forwarding uncaught Exception on to default ExceptionHandler")
internalCluster().getDataNodeInstance(ClusterService.class)
keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE
st.setObject(index,javaTypeDescriptor.unwrap(value,UUID.class,options),getSqlType())
selenium.isElementPresent("link=Control Panel")
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
!messageReference.equals(account.getUuid(),folder,uid)
selenium.isElementPresent("link=Control Panel")
systemId.length()
Assert.assertEquals("Unexpected token type: methodStub",msg)
LOG.warn(e)
d.getMinimumHeight()
graphModel.getUndirectedGraphVisible()
mMccStr == null
Stream.of("CYPHER 3.1","CYPHER 3.4")
handleJAXBException(e,false)
mService.disableNetwork(netId,mContext.getOpPackageName())
portalTopLevelBuildData.getBuildURL()
view.isScrollbarShown()
log.warn("Query failed to parse : '{}'",executionInput.getQuery())
4 + maskLength
mMenuView.setBackground(null)
RowKey.prefixKeyWithSalt(key)
table.fields()
@NotNull Id getId(); 
sanitizeName(name)
System.identityHashCode(o)
new RuntimeException("Error when launching multilang subprocess",e)
mBackdrop.animate().alpha(0.002f)
Boolean.parseBoolean(resizeableStr)
version.getUpdate().getAsInt() >= 151
clusterService.getIndexerFailures(1,0)
region == null || !region.isValid()
DiagnosticFactory0.create(ERROR)
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).switchIfEmpty(createSession(exchange))
cursor == null
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.get()
!isRotationEnabled
-0.5f
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
Stream.of("CYPHER 3.1","CYPHER 3.4")
lastJetty.toString()
delta + end
curComp.equals(service)
vis.fontAction(ascii)
FIXED_VIEWPORT=17
Response.ok(null,MediaType.TEXT_PLAIN)
new HashSet<Class<?>>(5)
new NameValuePair[4]
lineCount == 5
assertEquals(13,beanCount)
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
new Error("unexpeced missing SHA-1 digest",ex)
new JoddExtractor()
otherWriter.write(line)
inflightRepository != null
mListNavLayout != null
ensureExpectedToken(XContentParser.Token.FIELD_NAME,parser.currentToken(),parser::getTokenLocation)
boardPort.getPrefs().getOrExcept("iserial")
selenium.isElementPresent("link=Control Panel")
file.getFile()
dataSourceContainer.getDriver().getFullName()
query.field("relyOnPrevCycle").equal(false)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}",numFields)
getOrCreateContainer().forceUnlock(dataKey)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
parsedResult.getType()
value.toLowerCase().startsWith(constraintLowerCase)
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport() || useGridLayout()
platformVersion < M
mDrawBitmap == null || mDrawBitmap.getWidth() != mViewPortHandler.getChartWidth() || mDrawBitmap.getHeight() != mViewPortHandler.getChartHeight()
result.getType()
viewStateIndex|=VIEW_STATE_SELECTED
expected == long.class || expected == Long.class
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
Assert.assertEquals(41,classes.size())
assertEquals("We have all the items via GameData",392,Item.REGISTRY.getKeys().size())
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID|| value instanceof Boolean
material.getMaterialDef().getName().contains("Lighting") && mesh.getFloatBuffer(Type.Normal) == null
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false,false)
new DropTableEvent(tbl,success,deleteData,this)
Long.parseLong(attrValue)
EhcacheCacheListenerAdapter<Serializable,Object>
store.delete(key,message.getHeaders().getId())
usersStats.getMax()
mCanSeekBack=mCanSeekForward=true
tester.nodeRepository().getNodes(NodeType.tenant,Node.State.ready)
matchAxisFilter != 0 || wrapAxisFilter != 0
ALIGN_GROUP_FIELD_DECLARATIONS=false
layoutAlgorithm.getStackTransform(t,stackScroll,mTmpTransform,null)
CollectionItemInfo.obtain(position,1,0,1,isHeading,isSelected)
GridFailFastNodeFailureDetectionSelfTest.class
LOG.fine("received message " + (TopologyMaster.PublishMetrics)message)
Preconditions.checkNotNull(hostname,"hostname")
context.containsMetaEntity(fqcn)
final JobIdentifier jobRuntimeInformation=jobIdentifier; 
mAppToken.isVisible()
assertTrue(user.isGeoEnabled())
context.getMainLooper()
service.asBinder().pingBinder()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
mAppliedTemporaryAutoBrightnessAdjustment=false
"set responseContext to be" + resContext
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
stepLightIdleStateLocked("s:shell")
ArrayList<Long>
format.width * format.height <= MediaCodecUtil.maxH264DecodableFrameSize()
new String(text.getBytes(),0,text.getLength())
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
mMime.toLowerCase().startsWith("video/") || mMime.equalsIgnoreCase(MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC)
random.nextInt(8)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
new LinkedHashSet<>(0)
Hooks.resetOnLastOperator()
new QSDetailClipper(mDetail)
StateManagementUtils.createEndForkedExecutionMojoBinding()
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
type.getDeclaredConstructor()
logger.warn("Channel error",cause)
mPrivateInput == null || mReplyHeader.responseCode == -1
SamplingProfiler.newThreadGroupThreadSet(group)
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
attributes.getAllFlags()
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
dh != mBackgroundHeight
getTree().getRowCount()
tests.add(0,objectExpressionType.getGenericsTypes()[0].getType())
new LayerView(this,0x0f0000ff)
super.getView(position,contextualUndoView.getContentView(),contextualUndoView)
GUIManagerLwjgl.class
IllegalArgumentException.class
@Override public String getMethod(){   return method; } 
b("(")
pressedView.post(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)
logger.debug("Cannot play track ({})",e.getMessage())
accountHandle.getComponentName().flattenToString()
type=100
keychainLock.unlock()
new StepPluginMeta(AbortMeta.class,"Abort",Messages.getString("BaseStep.TypeLongDesc.Abort"),Messages.getString("BaseStep.TypeTooltipDesc.Abort"),"ABR.png",CATEGORY_TRANSFORM)
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
TestSuiteEnvironment.getServerAddressNode1()
return this; 
Log.w(TAG,e.getMessage(),e)
log.warn(sm.getString("contextConfig.role.auth",roles[j]))
mLocalWorkerAddress.getDataPort()
getAsText(fieldValue,locale)
args.length > 1 && args[1] instanceof String
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
mService.mAppTransition.isTransitionSet()
dest.writeTypedArray(remoteInputs,flags)
log.warn("Error parsing command line: " + e.getMessage())
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx,false)
new IntRangeValidator(1,true,true)
b.getTypeByte()
USE_DISPLAY_LIST_PROPERTIES=false
win.isDrawnLw() || win.hasAppShownWindows()
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
data == null || mData != data
handshakeFuture == null
FlushModeType.COMMIT.equals(session.getFlushMode()) || session.isClosed()
ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties")
hasColumn("Calendar","timeZoneId")
appBundle != null && appBundle.exists() == false
createFromResourceStream(res,value,is,srcName,null)
isSupportsAlterColumnType()
Exception t
killBillClient.completePayment(completeTransactionByPaymentExternalKey,pluginProperties,createdBy,reason,comment)
bean.getCollectionTime()
flexItem.getMarginRight()
blockChainSummary.size() == 1 && blockChainSummary.get(0).getNum() == 0
@Deprecated
series.Index.toPlainString()
ServiceManager.addService(Context.INPUT_SERVICE,inputManager,false,DUMP_FLAG_PRIORITY_CRITICAL)
fdoProvider.getFdoMode() != FdoMode.OFF || fdoProvider.getPrefetchHintsArtifact() != null
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
new Notification(R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
FileUtil.loadFile(new File(name + ".txt"),"UTF-8")
mGnssCallback != null
LOG.fine("Found operation: " + ori.getMethod().getName())
_typeSettingsProperties.toSortedString()
Id
connection.getHost()
Mono.subscriberContext()
out.writeFloat(mProgress)
delaySoFar >= mReEnableDelayMillis
file.getAbsolutePath()
MultiValueMap<String,Object>
showRecentApps(true,false)
stateMap.get("EnqueuedTransportURIMetaData") != null && !stateMap.get("EnqueuedTransportURIMetaData").isEmpty()
GL20.glUniform1iv(location,toIntBuffer(v,offset,count))
DEFAULT_DB_CACHE_COUNT=200
loaded.getLoaded().getDeclaredConstructor()
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
knownActions.contains(handler)
offset >= leftParen.getTextRange().getEndOffset()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new AnnotationHolderImpl(new AnnotationSession(file),true)
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
return 405; 
value + MINIMUM_BACKLIGHT
parameter.name()
ATLAS_MAP_ENTRY_FIELD_COUNT=3
remaining == 0
(Relationship)container
max() <= 32
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
old + 9
mVibratorService.vibrate(null,2000,new Binder())
clob.getCharacterStream()
className.lastIndexOf("org.openmrs.")
TelephonyManager.getDefault().getCurrentPhoneType()
isStringFieldType(field,adminPresentation)
channel.getRTCPPort()
quality.samplingRate == this.samplingRate && quality.bitRate == this.bitRate
mBackdrop.animate().alpha(0.002f)
logger.fine("reconnect success")
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
executionStats.getStartedSplits()
(AgendaEventListener)this
assertProtonResourceLimits(0.88,0.8,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
peers.stopAndWait()
FileTemplateManager.getInstance()
kernelHeight > (inHeight + 2 * padHeight)
subtypeProps == null || subtypeProps.isEmpty()
mQsDensityContainer.getX()
selenium.isElementPresent("link=Control Panel")
mFacetCategoryMap.get(category)
final ClientState clientState=(ClientState)msg.obj; 
amenity.getId() % 2 == 0
dest.writeInt(mSubId)
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
targetSdkVersion != -1
public PorterStemFilter create(TokenStream input){   return new PorterStemFilter(input); } 
settings.readLPw(null,0,false)
writeOwners.size()
Log.setTraceEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
hash != 0 && hash == this.lastDeviceListNotificationHash
klass.getDeclaredFieldsUnchecked(false,declaredFields)
pathURL.toURI().getSchemeSpecificPart()
DateUtils.getLocalTime()
return false; 
mActiveAgents.remove(info)
"year".equalsIgnoreCase(currentToken) || "years".equalsIgnoreCase(currentToken)
getTestName(true)
groupIndex.numOrd()
type.getDeclaredConstructor()
getUserStateLocked(resolvedUserId)
PUBLIC_STATUS_BAR_VISIBILITY_MASK
lastMaxBytes[0]=jvmMaxBytes
numErrors != 0
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new HTreeMap<K,Object>(engine,false,defaultSerializer,serializer,null)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
temp_descs.get(j)
e.toString()
logger.warn("InfluxDB is not yet connected")
stream.rstStream()
ignite.jcache(CACHE_NAME)
mCallback.onInputUpdated(inputId)
FileUtils.write(fileWithBom,"\uFEFF","UTF-8")
pointF.y=1.0f
new IOException("ExifInterface does not support saving attributes for the current input.")
Long.parseLong(attrValue)
readLock.lock()
TestSuiteEnvironment.getServerAddressNode1()
LensPositionSelectors.lensPosition(LensPosition.FRONT)
a.getBoolean(R.styleable.View_fadeScrollbars,true)
loaded.getLoaded().getDeclaredConstructor()
FileFilter fileFilter; 
((VarcharType)type).getLengthSafe()
!canPTR
assertEquals(1,results.size())
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES,UserHandle.getUserId(getCallingUid()))
StorageService.instance.initClient(0)
Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
_node.getNodeId()
result.expectedMinimumMessageCount(3)
filterNotTypes.length()
Assert.assertNotNull(ex.getCause())
c.setNickname(nickName)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
startingWindow != null && ttoken.startingView != null
specWidthMode == MeasureSpec.EXACTLY || specWidthMode == MeasureSpec.AT_MOST
SHUTDOWN_VIBRATE_MS > 0 && context != null
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
WSSec.getInboundWSSec(secProps,MessageUtils.isRequestor(soapMessage))
telephony.isRadioOn(getOpPackageName())
min.x <= max.x
energyProcessor.calculateGlobalEnergyLimit(account)
rhs.getScore()
mUiHandler.removeCallbacks(pae)
candidatePriority < highestPriority
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
hStack.getScrollHeight() + vLayout.getScrollHeight() + 10
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
replacements.add(replacement,Replacements.CoalescePolicy.EXISTING_FIRST)
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
DEBUG_WINDOW_STATE=false
Namespace.CURRENT.getUriString()
playerData.getCurrencyBalanceList()
commands_.vcsRevert()
discoveredFileCollectionSnapshotter.registerSerializers(serializerRegistry)
assertEquals("throughput",88.28044896,model.getThroughput(),0.00000001)
mCallback.onInputUpdated(inputId)
(byte)0xe2
c > 0
logger.finest("Optimized Selector: " + selector.getClass().getName())
ack.getLastMessageId().getEntryLocator()
LOG.finest("Client: segment " + segments[j] + " at "+ addr)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY)
methodAnnotations != null
CodeInsightUtilBase.preparePsiElementForWrite(cls_stmt_list)
this.messageService.fluxPostAuthorizeFindById(1L).subscriberContext(withUser)
mccMncs != null
primaryKey == null || primaryKey.cardinality() == 0
initialCapacity > 1 << 30
Map<String,Object>
IndexReader.open(benchmark.getRunData().getDirectory())
selenium.isElementPresent("link=Control Panel")
Character.isJavaIdentifierPart(buffer.charAt(i))
new Max(0)
clientConfig.getRegistryFetchIntervalSeconds() * 2000
dest.writeInt(mSubId)
new IndexWriter(directory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
LOG.debug("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
selenium.isElementPresent("link=Control Panel")
mNextNonWakeupDeliveryTime < nowELAPSED
schemeSpecificParts != null && data != null
Exception e
is(0)
ConstantNode.forLong(load.displacement(),graph)
Utils.createInformativeDialog(context,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
actionHandler.execute(editor,null,DataManager.getInstance().getDataContext())
text.split("\\n",-1)
AbstractBottomUpTraversal<T,RuntimeException>
Assert.assertEquals(2,hits.getLength())
StringBuilder buffer=new StringBuilder(); 
hStack.getScrollWidth() + 10
pw.print(ps.getInstantApp(user.id))
i <= 10
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
scanner.acceptsInput(fqn)
getLlvmReturnType()
super.onDestroy()
replaces="doDirect"
exec("p4","-d",workingDir,"sync","-f","@" + parseLong(revision))
hz1.getLifecycleService().shutdown()
return false; 
VERSION_INT=1000011
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logger.debug("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
GuiPackage.getInstance().updateCurrentGui()
url == null
RuntimeVersion.isAtLeast11()
sm.getString("serverContainer.duplicatePaths",path,sec.getEndpointClass(),sec.getEndpointClass())
name.contains(".")
doGetI18String(key,locale)
mUiHandler.removeCallbacks(pae)
JwsSignatureVerifier validator
selenium.isElementPresent("link=Control Panel")
log.debug(throwable,"Query %s failed",queryId)
displayList != null && displayList.isValid()
ImmutableSet.of(new AnagramClue("This anagram reveals who to speak to next: A BAKER","Baraek",new WorldPoint(3217,3434,0),"Varrock square","5"),new AnagramClue("This anagram reveals who to speak to next: A BASIC ANTI POT","Captain Tobias",new WorldPoint(3026,3216,0),"Port Sarim","7"),new AnagramClue("This anagram reveals who to speak to next: A HEART","Aretha",new WorldPoint(1814,3851,0),"Soul altar","2"),new AnagramClue("This anagram reveals who to speak to next: A ZEN SHE","Zenesha",new WorldPoint(2652,3295,0),"Platebody Southern Ardougne centre square"),new AnagramClue("This anagram reveals who to speak to next: ACE MATCH ELM","Cam The Camel",new WorldPoint(3300,3231,0),"North of the glider in Al Kharid"),new AnagramClue("This anagram reveals who to speak to next: AHA JAR","Jaraah",new WorldPoint(3359,3276,0),"Duel Arena hosptial"),new AnagramClue("This anagram reveals who to speak to next: AN PAINT TONIC","Captain Ninto",new WorldPoint(2865,9877,0),"Bar under White Wolf Mountain"),new AnagramClue("This anagram reveals who to speak to next: ARC O LINE","Caroline",new WorldPoint(2715,3302,0),"North Witchaven next to the row boat","11"),new AnagramClue("This anagram reveals who to speak to next: ARE COL","Oracle",new WorldPoint(3013,3501,0),"Ice Mountain West of Edgeville","48"),new AnagramClue("This anagram reveals who to speak to next: ARMCHAIR THE PELT","Charlie the Tramp",new WorldPoint(3209,3392,0),"South entrance of Varrock","0"),new AnagramClue("This anagram reveals who to speak to next: ARR! SO I AM A CRUST, AND?","Ramara du Croissant",new WorldPoint(2339,3677,0),"Piscatoris Fishing Colony"),new AnagramClue("This anagram reveals who to speak to next: AT HERG","Regath",new WorldPoint(1719,3723,0),"General Store, Arceuus, Zeah","25"),new AnagramClue("This anagram reveals who to speak to next: A BAS","Saba",new WorldPoint(2858,3577,0),"Death Plateau"),new AnagramClue("This anagram reveals who to speak to next: AREA CHEF TREK","Father Aereck",new WorldPoint(3243,3208,0),"Lumbridge Church","19 or 20"),new AnagramClue("This anagram reveals who to speak to next: BAIL TRIMS","Brimstail",new WorldPoint(2402,3419,0),"West of Stronghold Slayer Cave"),new AnagramClue("This anagram reveals who to speak to next: BAKER CLIMB","Brambickle",new WorldPoint(2783,3861,0),"Trollweiss mountain"),new AnagramClue("This anagram reveals who to speak to next: BLUE GRIM GUIDED","Lumbridge Guide",new WorldPoint(3232,3232,0),"Lumbridge"),new AnagramClue("This anagram reveals who to speak to next: BY LOOK","Bolkoy",new WorldPoint(2529,3162,0),"Tree Gnome Village general store","13"),new AnagramClue("This anagram reveals who to speak to next: CAR IF ICES","Sacrifice",new WorldPoint(2209,3056,0),"Zul-Andra"),new AnagramClue("This anagram reveals who to speak to next: CAREER IN MOON","Oneiromancer",new WorldPoint(2150,3866,0),"Astral altar","25"),new AnagramClue("This anagram reveals who to speak to next: C ON GAME HOC","Gnome Coach",new WorldPoint(2395,3486,0),"Gnome Ball course","6"),new AnagramClue("This anagram reveals who to speak to next: COOL NERD","Old Crone",new WorldPoint(3462,3557,0),"East of the Slayer Tower","619"),new AnagramClue("This anagram reveals who to speak to next: COPPER ORE CRYPTS","Prospector Percy",new WorldPoint(3061,3377,0),"Motherlode Mine","12"),new AnagramClue("This anagram reveals who to speak to next: DED WAR","Edward",new WorldPoint(3284,3943,0),"Inside Rogue's Castle"),new AnagramClue("This anagram reveals who to speak to next: DEKAGRAM","Dark Mage",new WorldPoint(3039,4835,0),"Centre of the Abyss","13"),new AnagramClue("This anagram reveals who to speak to next: DO SAY MORE","Doomsayer",new WorldPoint(3230,3230,0),"East of Lumbridge Castle","95"),new AnagramClue("This anagram reveals who to speak to next: DIM THARN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28 or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR HITMAN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28, Light box or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR WARDEN FUNK","Drunken Dwarf",new WorldPoint(2913,10221,0),"East Side of Keldagrim"),new AnagramClue("This anagram reveals who to speak to next: DRAGONS LAMENT","Strange old Man",new WorldPoint(3564,3288,0),"Barrows","40"),new AnagramClue("This anagram reveals who to speak to next: DT RUN B","Brundt the Chieftain",new WorldPoint(2658,3670,0),"Rellekka, main hall","4"),new AnagramClue("This anagram reveals who to speak to next: DUO PLUG","Dugopul",new WorldPoint(2803,2744,0),"Graveyard on Ape Atoll"),new AnagramClue("This anagram reveals who to speak to next: EEK ZERO OP","Zoo keeper",new WorldPoint(2613,3269,0),"Ardougne Zoo","40"),new AnagramClue("This anagram reveals who to speak to next: EL OW","Lowe",new WorldPoint(3233,3423,0),"Varrock archery store"),new AnagramClue("This anagram reveals who to speak to next: ERR CURE IT","Recruiter",new WorldPoint(2541,3305,0),"West Ardougne centre square","20"),new AnagramClue("This anagram reveals who to speak to next: FORLUN","Runolf",new WorldPoint(2512,10256,0),"Miscellania & Etceteria Dungeon"),new AnagramClue("This anagram reveals who to speak to next: GOBLIN KERN","King Bolren",new WorldPoint(2541,3170,0),"Tree Gnome Village"),new AnagramClue("This anagram reveals who to speak to next: GOT A BOY","Gabooty",new WorldPoint(2790,3066,0),"Centre of Tai Bwo Wannai","11"),new AnagramClue("This anagram reveals who to speak to next: GULAG RUN","Uglug Nar",new WorldPoint(2442,3051,0),"West of Jiggig"),new AnagramClue("This anagram reveals who to speak to next: GOBLETS ODD TOES","Otto Godblessed",new WorldPoint(2501,3487,0),"Otto's Grotto","2"),new AnagramClue("This anagram reveals who to speak to next: HALT US","Luthas",new WorldPoint(2938,3152,0),"Banana plantation, Karamja","33 (or none)"),new AnagramClue("This anagram reveals who to speak to next: HE DO POSE. IT IS CULTRRL, MK?","Riki the sculptor's model",new WorldPoint(2904,10206,0),"East Keldagrim, south of kebab seller."),new AnagramClue("This anagram reveals who to speak to next: HEORIC","Eohric",new WorldPoint(2900,3565,0),"Top floor of Burthorpe Castle","36"),new AnagramClue("This anagram reveals who to speak to next: HIS PHOR","Horphis",new WorldPoint(1639,3812,0),"Arceuus Library, Zeah","1"),new AnagramClue("This anagram reveals who to speak to next: I AM SIR","Marisi",new WorldPoint(1813,3488,0),"Allotment patch, South coast Zeah","5"),new AnagramClue("This anagram reveals who to speak to next: ICY FE","Fycie",new WorldPoint(2630,2997,0),"East Feldip Hills"),new AnagramClue("This anagram reveals who to speak to next: I DOOM ICON INN","Dominic Onion",new WorldPoint(2609,3116,0),"Nightmare Zone","9,500"),new AnagramClue("This anagram reveals who to speak to next: I EAT ITS CHART HINTS DO U","Shiratti the Custodian",new WorldPoint(3427,2927,0),"North of fountain, Nardah"),new AnagramClue("This anagram reveals who to speak to next: I EVEN","Nieve",new WorldPoint(2432,3422,0),"The slayer master in Gnome Stronghold","2"),new AnagramClue("This anagram reveals who to speak to next: I FAFFY RUN","Fairy Nuff",new WorldPoint(3201,3169,0),"North of the bank in Zanaris"),new AnagramClue("This anagram reveals who to speak to next: IM N ZEZIM","Immenizz",new WorldPoint(2592,4324,0),"The Imp inside Puro-Puro"),new AnagramClue("This anagram reveals who to speak to next: KAY SIR","Sir Kay",new WorldPoint(2760,3496,0),"The courtyard in Camelot Castle","6"),new AnagramClue("This anagram reveals who to speak to next: LEAKEY","Kaylee",new WorldPoint(2957,3370,0),"Rising Sun Inn in Falador","18"),new AnagramClue("This anagram reveals who to speak to next: LAND DOOMD","Odd Old Man",new WorldPoint(3359,3506,0),"Limestone mine northeast of Varrock"),new AnagramClue("This anagram reveals who to speak to next: LARK IN DOG","King Roald",new WorldPoint(3220,3476,0),"Ground floor of Varrock castle","24"),new AnagramClue("This anagram reveals who to speak to next: LOW LAG","Gallow",new WorldPoint(1805,3566,0),"Vinery in the Great Kourend","12"),new AnagramClue("This anagram reveals who to speak to next: LADDER MEMO GUV","Guard Vemmeldo",new WorldPoint(2447,3418,0),"Gnome Stronghold Bank","3"),new AnagramClue("This anagram reveals who to speak to next: MAL IN TAU","Luminata",new WorldPoint(3508,3237,0),"Near Burgh de Rott entrance"),new AnagramClue("This anagram reveals who to speak to next: ME AM THE CALC","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: MACHETE CLAM","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena","6"),new AnagramClue("This anagram reveals who to speak to next: ME IF","Femi",new WorldPoint(2461,3382,0),"Gates of Tree Gnome Stronghold"),new AnagramClue("This anagram reveals who to speak to next: MOLD LA RAN","Old Man Ral",new WorldPoint(3602,3209,0),"Meiyerditch"),new AnagramClue("This anagram reveals who to speak to next: MOTHERBOARD","Brother Omad",new WorldPoint(2606,3211,0),"Monastery south of Ardougne","129"),new AnagramClue("This anagram reveals who to speak to next: MUS KIL READER","Radimus Erkle",new WorldPoint(2726,3368,0),"Legends' Guild"),new AnagramClue("This anagram reveals who to speak to next: MY MANGLE LAL","Lammy Langle",new WorldPoint(1688,3540,0),"Hosidius House spirit tree patch"),new AnagramClue("This anagram reveals who to speak to next: NO OWNER","Oronwen",new WorldPoint(1162,3178,0),"Lletya Seamstress shop in Lletya","20"),new AnagramClue("This anagram reveals who to speak to next: NOD MED","Edmond",new WorldPoint(2566,3332,0),"Behind the most NW house in East Ardougne","3"),new AnagramClue("This anagram reveals who to speak to next: O BIRDZ A ZANY EN PC","Cap'n Izzy no Beard",new WorldPoint(2807,3191,0),"Brimhaven Agility Arena","33"),new AnagramClue("This anagram reveals who to speak to next: OK CO","Cook",new WorldPoint(3207,3214,0),"Ground floor of Lumbridge Castle","9"),new AnagramClue("This anagram reveals who to speak to next: OR ZINC FUMES WARD","Wizard Frumscone",new WorldPoint(2594,3086,0),"Downstairs in the Wizards' Guild"),new AnagramClue("This anagram reveals who to speak to next: OUR OWN NEEDS","Nurse Wooned",new WorldPoint(1575,3590,0),"Shayzien House Infirmary","19"),new AnagramClue("This anagram reveals who to speak to next: PACINNG A TAIE","Captain Ginea",new WorldPoint(1561,3602,0),"Building east of Shayzien combat ring","113"),new AnagramClue("This anagram reveals who to speak to next: PEAK REFLEX","Flax keeper",new WorldPoint(2744,3444,0),"Flax field south of Seers Village","676"),new AnagramClue("This anagram reveals who to speak to next: PEATY PERT","Party Pete",new WorldPoint(3047,3376,0),"Falador Party Room"),new AnagramClue("This anagram reveals who to speak to next: PROFS LOSE WRONG PIE","Professor Onglewip",new WorldPoint(3113,3162,0),"Ground floor of Wizards Tower"),new AnagramClue("This anagram reveals who to speak to next: QUIT HORRIBLE TYRANT","Brother Tranquility",new WorldPoint(3681,2963,0),"Mos Le'Harmless or Harmony Island","7"),new AnagramClue("This anagram reveals who to speak to next: QUE SIR","Squire",new WorldPoint(2975,3343,0),"Falador Castle Courtyard","654"),new AnagramClue("This anagram reveals who to speak to next: R AK MI","Karim",new WorldPoint(3273,3181,0),"Al Kharid Kebab shop","5"),new AnagramClue("This anagram reveals who to speak to next: RAT MAT WITHIN","Martin Thwait",new WorldPoint(2906,3537,0),"Rogues' Den","2"),new AnagramClue("This anagram reveals who to speak to next: RED ART TANS","Trader Stan",new WorldPoint(3041,3193,0),"Port Sarim Charter ship"),new AnagramClue("This anagram reveals who to speak to next: RATAI","Taria",new WorldPoint(2940,3223,0),"Rimmington bush patch","7"),new AnagramClue("This anagram reveals who to speak to next: R SLICER","Clerris",new WorldPoint(1761,3850,0),"Arceuus mine, Zeah","738"),new AnagramClue("This anagram reveals who to speak to next: SAND NUT","Dunstan",new WorldPoint(2919,3574,0),"Anvil in north east Burthorpe","8"),new AnagramClue("This anagram reveals who to speak to next: SEQUIN DIRGE","Queen Sigrid",new WorldPoint(2612,3867,0),"Throne room of Etceteria Castle."),new AnagramClue("This anagram reveals who to speak to next: SLAM DUSTER GRAIL","Guildmaster Lars",new WorldPoint(1649,3498,0),"Woodcutting guild, Zeah"),new AnagramClue("This anagram reveals who to speak to next: SLIDE WOMAN","Wise Old Man",new WorldPoint(3088,3253,0),"Draynor Village","28"),new AnagramClue("This anagram reveals who to speak to next: SNAH","Hans",new WorldPoint(3218,3219,0),"Lumbridge Castle courtyard"),new AnagramClue("This anagram reveals who to speak to next: SNAKES SO I SAIL","Lisse Isaakson",new WorldPoint(2351,3801,0),"Neitiznot","2"),new AnagramClue("This anagram reveals who to speak to next: TAMED ROCKS","Dockmaster",new WorldPoint(1822,3739,0),"Piscarilius House, NE of General store","5"),new AnagramClue("This anagram reveals who to speak to next: TEN WIGS ON","Wingstone",new WorldPoint(3389,2877,0),"Between Nardah & Agility Pyramid"),new AnagramClue("This anagram reveals who to speak to next: THEM CAL CAME","Cam the Camel",new WorldPoint(3300,3231,0),"Just outside of the Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: THICKNO","Hickton",new WorldPoint(2822,3442,0),"Catherby fletching shop","2"),new AnagramClue("This anagram reveals who to speak to next: TWENTY CURE IRON","New recruit Tony",new WorldPoint(1498,3544,0),"Shayzien House's Graveyard"),new AnagramClue("This anagram reveals who to speak to next: UNLEASH NIGHT MIST","Sigli the Huntsman",new WorldPoint(2660,3654,0),"Rellekka","302"),new AnagramClue("This anagram reveals who to speak to next: VESTE","Steve",new WorldPoint(2432,3423,0),"Upstairs Wyvern Area or Stronghold Slayer Cave","2"),new AnagramClue("This anagram reveals who to speak to next: VEIL VEDA","Evil Dave",new WorldPoint(3079,9892,0),"Doris' basement, Edgeville","666"),new AnagramClue("This anagram reveals who to speak to next: WOO AN EGG KIWI","Awowogei",new WorldPoint(2802,2764,0),"Ape Atoll","24"),new AnagramClue("This anagram reveals who to speak to next: YAWNS GY","Ysgawyn",new WorldPoint(2340,3167,0),"Lletya"),new AnagramClue("This anagram reveals who to speak to next: MAJORS LAVA BADS AIR","Ambassador Alvijar",new WorldPoint(2736,5351,1),"Dorgesh-Kaan, NE Middle Level","2505"))
executeRunnableDismissingKeyguard(runnable,null,false,false)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
UserHandle.myUserId()
msg.getHistoryRef().getHistoryType()
ConcurrentMap<Method,List<String>>
t.start()
new DatagramDnsQuery(null,addr,1)
Constants.TEST ? 0 : 10000000
Generics.newTreeMap()
!"".equals(callBeep.canPlayType("audio/ogg;"))
((SQLDataSource)dataSource).getSQLDialect().storesUnquotedCase()
WordPress.wpDB.getShownAccounts()
nextTokenIs(b,IDENTIFIER)
this.messageService.fluxPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
Preconditions.checkArgument(!(msDir == null && s3Dir == null),"The path does not exist in metadata store and on s3.")
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
createdBy == null || createdBy.equals("parquet-mr")
UNSIGNED_BYTE_MAX_VALUE=0xff
LOGGER.warn("Could not execute copy",ex)
heartbeatIntervalSeconds < 0
InheritableThreadLocal<Map<String,CacheEntry>>
mSyncStatus.valueAt(i)
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","entry","extern","goto","inline","register","restrict","signed","sizeof","struct","typedef","union","unsigned","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
endPos < bufEnd
holder.textView.setBackgroundDrawable(null)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
days >= 2 || (days > 0 && hours == 0)
list.append(pi)
fileName.substring(lastDotIndex + 1)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
log.debug(throwable,"Query %s failed",queryId)
mf.getColumnNameInSql()
assertTrue(runtimeOptions.isMonochrome())
PROTOCOL_VERSION=2
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
checkDatabaseConnection(monitor)
mService.mDisplayContents.valueAt(displayNdx)
!getLocationEnabled()
one.setAxisIndex(LEAF)
any()
gatt.setPeriodicAdvertisingEnable(this.advertiserId,enable)
level < 0 || values.length == 0
cursor == null || !cursor.moveToFirst()
from >= to
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,true)
Exception e
stack.peek()
!BACKUP_ENABLED || !fileToBackup.exists()
rs.isLast()
m.size()
mEntryValues[which]
prep.setBinaryStream(2,new ByteArrayInputStream(buff),-1)
mLocalWorkerAddress.getDataPort()
DLServiceUtil.addFile(companyId,portletId,article.getGroupId(),repositoryId,dirName + "/" + fileName,0,StringPool.BLANK,new String[0],bytes)
dialog.dismiss()
WikiPageLocalServiceUtil.renamePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
ORIENTATION_SETTLE_TIME_MS=250
s.charAt(0)
Validator.isNotNull(_uploadMessage)
!isPartialUpdate || id.views == null
String key
RedisSessionExpirationPolicy.class
archiverManager.getUnArchiver(srcFile)
mTestStream.getFlushedBytes()
getList().getSize() == 0 && getActivity() != null
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
origin <= other
return true; 
format("max-age=%s",300)
Integer.parseInt(topStr)
getViewRootImpl() == null || !getViewRootImpl().isInLayout()
speed < 53
_connector.getResponse("METHOD /foo HTTP/9\n\n")
InputLaunchResponse.class
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
Thread.sleep(1000)
InspectionToolWrapper wrapper=InspectionToolRegistrar.wrapTool(tool); 
request.getPathInfo()
handleDnsConfigurationChange(usedNetworkType)
result.addUnsafeEnchantments(getEnchantments())
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
mMime.toLowerCase().startsWith("video/") || mMime.equalsIgnoreCase(MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC)
Slog.w(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.")
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false,runtimeOnlyFlags)
MIN_CONNECTIVITY_COUNT=1
RelativePoint.getSouthWestOf(link)
new NullSafeComparator<>(comparator,true)
AudioSystem.isMicrophoneMuted()
((10 - isOnline) - (10 - targetIsOnline)) * 100000000
new int[26]
platformVersion < M
Response.ok(null,MediaType.TEXT_PLAIN)
@ConditionalOnEnabledHealthIndicator("mail")
assertEquals(12,definitions.size())
actor.addListener(listener)
when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(4)
(mOomMinFreeHigh[5] * 7) / 4
numErrors != 0
volatileSet((int)i & mask,item)
readIntPref(FONTSIZE_KEY,mFontSize,288)
searchDisplay.initSearch("search clear crash workaround",false)
list.append(pi)
telephony.isOffhook(getOpPackageName())
new Notification(R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
LOGGER.warn("Could not find DropTargetDropEvent class",e)
SHOW_ON_APP_LAUNCH=2
mHeader.callOnClick()
settings.username != null && !settings.username.isEmpty()
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
new DatePickerDialog(getActivity(),DatePickerDialog.THEME_HOLO_LIGHT,getConstructorListener(),y,m,d)
Slog.w(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
child.disposeUIResources()
mFs.mkdirs(new Path(path))
!TextUtils.isEmpty(addresses)
"A task is in the ABORTED state but stage is " + currentState
sliceInput.getRetainedSize()
updateRulesForGlobalChangeLocked(true)
OverridingMethodsSearch.search(method,method.getUseScope(),false)
mContext.startActivityAsUser(intent,UserHandle.CURRENT)
E edge
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
splashImageView != null && splashImageView.getParent() != null
doTestWithRuntime()
result.getWarnings()
/**   * {@inheritDoc}  */ public Integer get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
ShutdownOperations.addOperation(new Runnable(){   public void run(){     wrappedResponseHolder.remove();   } } ,true)
selenium.isElementPresent("link=Control Panel")
_maxTransactionActive=1
mActiveAgents.remove(info)
new Paint()
new OsmBugsLocalUtil(activity,plugin.getDBBug())
userState.mIsAccessibilityEnabled || userState.mIsDisplayMagnificationEnabled
mAuthorities.valueAt(i)
namespaceMap.putIfAbsent(typeToRead.getSchemaType().getNamespaceURI(),"ns1")
from > to
result.ocFile.getMimeType()
MAKIBESF68(41)
ran.nextInt(250)
valuesFromClass=SwingConstants.class
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
!TextUtils.isEmpty(addresses)
klass.getDeclaredFieldsUnchecked(false,declaredFields)
toSetIn.length() <= 1
@Nullable
this.thrown.expectMessage("File must exist")
scheduleRemoveStartingWindowLocked(wtoken)
properties.exists(MainVcsLogUiProperties.BEK_SORT_TYPE)
mTitleTextView != null && !contextText.equals("")
SupervisedModel rawModel=makeSupervisedModel(); 
ByteBuffer.allocate(DEFAULT_NET_BUFFER_SIZE)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
telephony.isIdle(getOpPackageName())
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
Collections.addAll(lastTypePoiAdditionalsCategories,parser.getAttributeValue("","poi_additional_category").split(","))
new MatParamTexture(VarType.Texture2D,paramName,texture,null)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
type.getDeclaredConstructor()
ByteBuffer.allocate(mPreviewWidth * mPreviewHeight * 4)
@Specialization protected String escapingString(String escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return escapingValue; } 
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","type")
new IndexAnalyzers(indexSettings,namedAnalyzer,namedAnalyzer,namedAnalyzer,Collections.emptyMap(),Collections.emptyMap())
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
this.thrown.expectMessage("File must not be null")
t.start()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION,false)
constructor.getParameterTypes()
new ClientAdminThread(null,null,sendBuffer,null)
Assert.assertEquals(200,statusCode)
assertCorrection(rule,"Eisnbahn","Eisbahn","Eisenbahn")
onDetachedFromWindow()
switch (dispatchState) { case Connected:   setState(receiveState.onDispatchEndOfStream(),State.Stopped); break; default : throw new IllegalStateException(String.format("Connection is in unexpected dispatch state %s.",dispatchState)); } 
monochrome=false
@InputIntMethodAnnotation(value=43)
!mRenderNode.isPivotExplicitlySet()
Map<JsName,JsFunction>
application.getBaseContext()
httpResponseCode != 204
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
new Dimension(700,430)
request.setHeader(h.getKey(),h.getValue())
mLayoutParams != null && mLayoutParams.width >= 0
new EntryEvent(packet.getName(),null,(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
dataTypeName.replaceFirst("\\s*\\{.*","")
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
new InternetExplorerWebDriverImpl(projectDirName,portalURL)
c.getLiquid() != null && c.getLiquid().amount != 0
disable2ForUser(what,token,pkg,mCurrentUserId)
getMyApplication().getFavorites().getFavouritePoints()
StringBuffer sb=new StringBuffer("Connection "); 
mEditSessionQuestions.setText(String.valueOf(repLimit))
DEFAULT_ADDRESS_BBOX_RADIUS * 5
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
id=13
RESULT_TIMEOUT=5000
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
isEmpty(s)
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).validityChanged(arr)
mActiveStreamType == -1 || streamType != mActiveStreamType
mapper.setAttributePrefix("ROLE_")
ctClass.toClass(clazz.getClassLoader(),null)
upnpBox.isSelected()
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
DirectoryReader reader=IndexReader.open(directory); 
BeanPropertiesUtil.getStringSilent(model,_keyProperty)
LOG.info("touchbar-server isn't running, skip nst loading")
AUTH_TYPE_NEGOTIATE.equals(this.authType)
showRecentApps(true,false)
propertyIterator.hasNext()
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.","Ursache waren die hohe Arbeitslosigkeit und die Wohnungsnot.","Ursache waren unter anderem die hohe Arbeitslosigkeit und die Wohnungsnot.","Er ahnt nicht, dass sie und sein Sohn ein Paar sind.","Die Ursachen der vorliegenden Durchblutungsstörung sind noch unbekannt.","Der See und das Marschland sind ein Naturschutzgebiet","Details, Dialoge, wie auch die Typologie der Charaktere sind frei erfunden.","Die internen Ermittler und auch die Staatsanwaltschaft sind nun am Zug.")
populateUi()
FieldsWriter<S,?>
YogaNode.jni_YGNodeSetOwner(child.mNativePointer,0)
minY + maxY
packet.getAttribute("from").split("/",2)
descriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
context == null || context == EGL_NO_CONTEXT
windowToken != null && !mHideLockScreen
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
layoutFriendlyURLLocalService.updateLayoutFriendlyURLs(user.getCompanyId(),groupId,plid,privateLayout,friendlyURLMap,serviceContext)
dlFileShortcut.getFileShortcutId()
Nd4j.createUninitializedDetached(shape)
PortletURLFactoryUtil.create(request,PortletKeys.EXPORT_IMPORT,plid,PortletRequest.RENDER_PHASE)
int retries() default 2; 
new Paint()
getEmptyCellElement()
10 / hardness
".".equals(relativePath) || relativePath == null
Throwable e
GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)
protected Block createSimpleChild(final ASTNode child,final Indent indent,final Wrap wrap,final Alignment alignment){   return new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent,null,isPreserveSpace()); } 
Trans != NO_TRANSPOSE
calendar.getTimeZone().getRawOffset()
categoryTypes.size() > 4
type.getDeclaredConstructor()
param.setThrowable(xparam.getThrowable())
Arrays.asList("net.bull","java")
BaseCompanySettingsVerifyProcess.class
CachedConstructor constructor=(CachedConstructor)chooseMethod("<init>",constructors,arguments,false); 
Exception e
mOrderResult.remove(packageName)
!((Player)target).isOnline()
new StructureViewModelBase(myPsiFile,new YAMLStructureViewElement(myPsiFile)).withSorters(Sorter.ALPHA_SORTER).withSuitableClasses(YAMLFile.class,YAMLDocument.class,YAMLKeyValue.class)
logger.error("Problem while CH preparation " + name,ex)
Arrays.fill(this.state,FREE)
i > 0
titleTable.getPrefWidth()
parent.getExactOverriddenJoinColumn(propertyName)
ensureGreen()
factory.get(mResultClass,NO_ANNOTATIONS,retrofit)
config.trustStoreLocation == null
writeString(writer,fieldName,reader.getDate().toDateStr())
HighlightInfo.newHighlightInfo(type).range(refElement).descriptionAndTooltip(message)
ne(Expressions.constant(constant))
new PagesListSetNextRecord(cacheId,prevId,nextId)
itemTop >= headerBottom
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
mWidth=100
buf.halfOpenElement("conference")
listTypePersistence.fetchByPrimaryKey(listTypeId)
StringBuilder sb=new StringBuilder(); 
-100
canvas.saveLayer(mRect.left - rad,mRect.top - rad,mRect.right + rad,mRect.bottom + rad,mLayerPaint)
mDisplay.getRealMetrics(mDisplayMetrics)
attribute.getDefinition().getMarshaller()
entry.cacheContentViews(mContext,notification.getNotification())
RequestConfig.custom().setConnectTimeout(httpClientConfig.getConnTimeout())
element != null && concurrentSet.containsKey(element)
Integer.parseInt(taskIdStr)
id=10861
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
volume.getMtpReserveSpace() * 1024L * 1024L
isUnique
binding.getKey().getTypeLiteral().getRawType()
mcGroup.getMetaUID()
previousException.compareToIgnoreCase(currentException)
maxValue >= low
new CountDownLatch(2)
file == null || beforeDir == null || afterDir == null
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
LocalFileSystem.getInstance().findFileByIoFile(file)
mMatchMode=matchMode
LOG.warn("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
makeReplyMessage(pathname)
new FreeMarkerTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_configuration,_templateContextHelper,false)
mRedrawClip.isEmpty() || view.getParent() == null
selenium.isElementPresent("link=Control Panel")
new SimpleDateFormat(format,Locale.US)
user.getUserId()
native_get_videoeditor_export_level(vidCodec)
mainSourceSet.getOutput()
javaVersion < 8
mRemote.transact(GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
assertStatus(a,f,true)
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
Context.getEncounterService().saveEncounter(encounter)
event.getRawY()
fT.replace(R.id.feeditemlistFragment,filf)
mContext.sendBroadcast(intent)
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
selenium.isElementPresent("link=Control Panel")
Key.class.getName()
maxPageSize + 1
" firstActiveTime=" + firstActiveTime
worldPath.resolve(getChunkFilename(chunkPos))
new StrictModeViolationDialog(mUiContext,ActivityManagerService.this,res,proc)
selenium.waitForVisible("//iframe[contains(@title,'Rich Text Editor')]")
TimeUnit.SECONDS.toMillis(5)
showRecentApps(true,false)
killBillClient.updateSubscriptionBCD(updatedSubscription,null,DEFAULT_WAIT_COMPLETION_TIMEOUT_SEC,createdBy,reason,comment)
table != null && table.columns != null
Throwable e
preparedStatement.setNCharacterStream(paramIndex,tmpReader)
old + 10
freezeThisOneIfNeeded != null && !mWindowPlacerLocked.mOrientationChangeComplete
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
apnContext.getWaitingApns()
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,true); 
metadata.getFaceRectangles()
Looper.prepareMainLooper()
j < arguments.length
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
revWalk.close()
assertPhoneNumberNotEqual("123123","0123123",false)
rootSaveDir.mkdirs()
loaded.getLoaded().getDeclaredConstructor()
@Override public TABLE getParentObject(){   return table; } 
type.getDeclaredConstructor()
i < size
properties.containsKey("flyway.url")
lock.isHeldByCurrentThread()
PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,list)
nextInfo == null || nextInfo.directionInfo == null
selenium.isElementPresent("link=Control Panel")
0 != mUnwantedNetworkCapabilities
selenium.isElementPresent("link=Control Panel")
req.getSession().getMaxInactiveInterval() * 1000L
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket","crap")
for (MediaType mediaType : result) {   if (mediaType.isConcrete()) {     return mediaType;   }  else   if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {     return MediaType.APPLICATION_OCTET_STREAM;   } } 
checkNotEmpty(className,EMPTY_STRING_MSG)
Throwable e
Slog.w(TAG,"Session failed to close due to remote exception",e)
DateTimeException e
CaseInsensitiveString pipelineName=new CaseInsensitiveString("upstream"); 
env.dynamicLookup(PARSE_CONTEXT)
logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt)
Foundation.log("[debug] " + tag + ": "+ message)
Status.createStatuseList(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
new RoutingControlAction(this,newPath,true,callback)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
Rule.getRules(true,ActivityForwarding.this)
expanded.toString().replaceAll("\\$\\$","\\$")
Class bindingTargetType
metadata.getFaces()
public ISOLatin1AccentFilter create(TokenStream input){   return new ISOLatin1AccentFilter(input); } 
GridCacheEntry<String,String>
config.addProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
ddmStructureLocalService.fetchStructure(dlFileEntryType.getGroupId(),"auto_" + fileEntryTypeId)
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
getActivity() == null || !WordPress.hasValidWPComCredentials(getActivity().getApplicationContext())
return 1000; 
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logPageUrl != null && logPageUrl.length() > 0
useCustomAapt=true
timeSinceFirst > DateUtilities.ONE_DAY * 3
RowKey.prefixKeyWithSalt(key)
times + BASE_FILE_NUMBER
localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
!get(key).equals(that.get(key))
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,createdBy,reason,comment)
PyReferenceExpression.class
interactor.startCommand(packageName,callback,mCommand,mArgs)
@Nullable
StringEntity entity=new StringEntity(new ObjectMapper().writeValueAsString(object),"utf-8"); 
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),UNSET)
log.info("Hooking new default : onNextDropped")
mDataAuthorities == null || data == null
from >= to
name.equals(blacklistName) || name.startsWith(blacklistName)
mRecyclerView.smoothScrollBy(hScroll,vScroll)
new StringBundler(6)
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
Object model
Thread.sleep(1000)
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id)
new CrypticClue("This crate holds a better reward than a broken arrow.",CRATE_356,new WorldPoint(2671,3437,0),"Inside the Ranging Guild. Search the crate behind the northern most building.")
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
LOGD=false
UpgradeStepRegistrator.class
wCompression.getText()
physicalFile == null || !physicalFile.exists()
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
poi_tag != null && poiParentCategory.length() > 0
JMeterUtils.getPropDefault("backend_graphite.send_interval",1)
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
_connector.getResponse("GET /foo?status=206 HTTP/1.0\n\n")
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
analysis.getTypeWithCoercions(windowFunction)
"Virtual file is null for " + myFile
assertEquals(2495,res.getTime(1,2) / 1000,50)
((Activity)getContext()).finish()
Map<Integer,HostedConnection>
LOAD_FACTOR=0.75f
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
copy1DRangeFromUnchecked(0,mType.getCount(),i)
asLongReg(result)
public TransMeta getManagedObject(){   return transMeta; } 
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
metadata.getFaceRectangles()
ParamUtil.getString(portletRequest,DISCOUNT_TYPE,"all")
Cat.w(t)
mService.mAppOps.startOpNoThrow(mAppOp,uid,packageName,true)
mPositionScroller.startWithOffset(position,offset)
context.getMainLooper()
this.thrown.expectMessage("File must exist")
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
type.getDeclaredConstructor()
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,NO_TYPES,Arrays.asList(expected),map(),NO_EXTEND_DECLARATIONS)
setDisabledIcon(ic)
new HgMaterialConfig(new HgUrlArgument(hg.getUrl()),hg.isAutoUpdate(),toFilter(crScmMaterial),false,hg.getDirectory(),toMaterialName(materialName))
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
KotlinTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null,null)
t.equalsIgnoreCase(type)
pyClass.getQualifiedName()
final WikiPage parent
id=17
cppFile.writeString(buffer.toString(),false,"UTF-8")
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent|| !mPipManager.isPipShown()
mono.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
String message
Thread.sleep(800)
new Paint()
selenium.isElementPresent("link=Control Panel")
ColorRGBA.White.mult(0.02f)
constraintSystem.getTypeParameterDescriptors()
LOGGER.error("Error during file import",e3)
handshake == 0 || status == SocketStatus.ERROR
findAllAndRemove(query,null,collectionName)
LOG.info("Found spell checking wrapper is not local " + spellCheckingWrapper)
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())
renderManager.render(tpf,true)
assertEquals("One propagated header is expected.",6,headers.toArray().length)
orgReplica.applyIndexOperationOnReplica(0,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id",new BytesArray("{}"),XContentType.JSON),u -> { } )
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
endTime + EVENT_TIME_TOLERANCE
connectPromise.tryFailure(t)
_logger.get().log(Level.WARNING,"Server seen down: " + _addr,e)
new int[127]
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),parentFolderId,name)
verify(workspaceFilesCleaner,timeout(2000))
platformVersion < M
((DartUriElement)parentParent).getUriStringAndItsRange().second.getStartOffset()
configureReadBufferForWrite()
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
Integer.parseInt(bottomStr)
"content".equals(scheme) || "android.resource".equals(scheme)
realm.getColumnIndices()
/**   * An attachment provider that locates the attach API directly from the system class loader.  */ enum ForModularizedVm implements AttachmentProvider {/**   * The singleton instance.  */ INSTANCE; /**   * {@inheritDoc}  */ public Accessor attempt(){   return Accessor.Simple.of(ClassLoader.getSystemClassLoader()); } } 
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getGlobalSearchScope()
connection.getRequestId() <= lastRequestID + 1
Messages.getString("Spoon.ExportResourceZipFileExists.Message",zipFilename)
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
exc.getXMPPError() != null && exc.getXMPPError().getCode() == 409
attachmentsDir.getAbsolutePath()
serviceDataUuid == null || mServiceData == null
MAX_BATCH_SIZE=250
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
BackupManagerServiceInterface svc=mService; 
Class.forName(name,false,getClass().getClassLoader())
id.required()
arg2.charAt(arg2.length() - 1) == quotedChar && arg2.length() > 1
Integer.parseInt(v)
realPointerIndex >= AndroidInput.NUM_TOUCHES
webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class)
specHeightMode == MeasureSpec.EXACTLY || specHeightMode == MeasureSpec.AT_MOST
patientState.getState().getUuid()
LOG.info(e)
new InterpreterExpectations("",false)
logger.warn("{} {}",errorCode,message)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
Long.parseLong(timeString)
url == null
mLayout.getPaint().getTextWidths(mTransformed,offsetStart,offsetEnd,widths)
mMccStr == null
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
Slog.w(TAG,"Could not read " + path,e)
LOG.warn("Transport ({}) failed {} attempting to automatically reconnect: {}",connectedTransportURI,(reconnectOk ? "," : ", not"),e)
SmartEnterProcessors.INSTANCE.allForLanguage(fixture.getFile().getLanguage())
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
mAdapter == null || !mIsAttached
getEffectiveHstsEnforced()
addFileType("WEBP",FILE_TYPE_WEBP,"image/webp")
JsAstUtils.pureFqn(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
info.getVoiceMailNumberForSubscriber(subId,mContext.getOpPackageName())
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } ,executionService.getInternalExecutor())
_connector.getResponse("XXXXXXXXXXXX\n\n")
subModule.update(persistencePackage)
asList(DERBY,FIREBIRD,ORACLE,SYBASE)
RESULT_TIMEOUT=5000
RowKey.prefixKeyWithSalt(key_a)
conf.getInt(THRIFT_MAX_MESSAGE_LENGTH_IN_MB,16)
LAST_VERSION=362
loggerLevel=(String)level
selenium.click("//li[4]/span/a/span")
!mediaPlaylist.hasEndTag && targetPositionUs > mediaPlaylist.getEndTimeUs()
_committedTo != lastCompletedOffset
mDuration >= 0 && mTransitions != null
new StringBuilder(28)
softmax.get(point(i),point(box),all(),point(y),point(x))
getOwnerAddress()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new RuntimeException("Error loading MultiDataSet at path " + pds.getPath() + " - MultiDataSet may be corrupt or invalid."+ " Spark MultiDataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
selenium.isElementPresent("link=Control Panel")
info.getGroupIdLevel1ForSubscriber(subId,mContext.getOpPackageName())
indexBuf.getData().limit()
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,false)
lab.equals("N2") || lab.equals("AB")
status().isFound()
shouldFilter && sourceFile.length() > 10 * 1024 * 1024
someBatchInterval * 5
Native.open(embedded.getAbsolutePath(),openFlags)
new InstrumentationSpec(FileTypeSet.of(JavaSemantics.JAVA_SOURCE)).withSourceAttributes("srcs").withDependencyAttributes("deps","data","exports","runtime_deps","binary_under_test")
removeTopicTask(this.message.getMessageId())
hasGuestViewPermission(layout)
defaultDndAccess != null
photo.writableBytes()
selenium.isElementPresent("link=Control Panel")
assertEquals(9775l,(long)sourceStats.get("novel"))
JMeterUtils.getPropDefault("proxy.pause",5000)
(FieldType)unsafe.getObjectVolatile(owner,offset)
singleModelJSONObjectBuilder.field(HYDRA_OPERATION)
((IWorkbenchPropertyPage)prefPage).setElement(originalDataSource)
dep.getName()
((GrReferenceList)e).getReferenceElementsGroovy()
aProject.getTasks().configureEach(captureReportingTasks)
isInputViewShown()
ImmutableList.of(new Identifier("a"),new Identifier("b"))
LOGGER.isDebugEnabled()
c.getSimpleName()
Pair.of(pair.getRight(),pair.getLeft())
setNetworkTimeout(connection,originalTimeout)
WeakSafeReadWriteLock strongReference
new AdaDeltaUpdater()
printLine("Unable to connect due to unrecognised server certificate")
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title2,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,null,serviceContext)
mImm.showStatusIconInternal(mToken,getPackageName(),iconResId)
WordPress.getCurrentBlog().getLocalTableBlogId()
_layoutElements != null
~View.SYSTEM_UI_TRANSPARENT
public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); 
player.teleport(playerLocation,TeleportCause.COMMAND)
LOG.warn("register druid-driver mbean error",ex)
mValues[8]
randomIntBetween(1,10)
log.error("Error while closing command context",exception)
Thread.sleep(1000)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   return cache.drPauseState(); } 
logger.debug("Cannot remove group member ({})",e.getMessage())
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(3,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
addon.updateBuildingInfo()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
@Nullable
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
Trans != NO_TRANSPOSE
LOG.error("Halting process: ShellBolt died.",exception)
unbox(watched,movie.watched)
Math.max(o.outWidth / targetWidth,o.outHeight / targetHeight)
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
removedGenerator.equals(next.getClass())
new Random()
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
new ForgeCommand()
FBUtilities.getLocalAddress()
VertexProgram.createVertexProgram(graph,ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
(diff == 2) && (previousLineLeadingTabCount > 0) && line.endsWith(StringPool.SEMICOLON)&& !previousLine.contains(StringPool.TAB + "try (")
Integer.parseInt(taskIdStr)
id=17
new SynthesizedAnnotationInvocationHandler(annotation,annotatedElement,getAttributeAliasMap(annotationType))
vpms.add(0,vpm)
accountCapsule.putLatestAssetOperationTimeMap(tokenName,latestAssetOperationTime)
ArrayList<>
BuildConfigSpecBuilder parametersBuilder=new BuildConfigSpecBuilder(); 
Long.valueOf(p.getProperty("numberid.id"))
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
this.doIntrospect(extendedInterfaces,matchedInterfaces)
parser.getName().equals("body") && parser.getDepth() <= depth
parameters != null
new UnsupportedOperationException(getClass().getName())
ThriftValidation.validateColumnFamily(keyspace,cfname,false)
mCallback=null
mRepeat > 0
si.targetPermissionUid >= 0 && si.intent != null
filter.setAngle(mAngle)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
new IllegalStateException("Result is already complete: failed")
configuration.numEvents*=10000
callback.onPulseFinished()
mAdapter.unregisterDataSetObserver(mObserver)
scores.getAlgorithm()
rhs.getScore()
_activeBC.proxPen(_beta)
result.getContentType().startsWith(PresContentClient.CONTENT_TYPE)
metric instanceof MetricsRate || metric instanceof MetricsString || metric instanceof MetricsHistogram|| metric instanceof ExactCounterMetric
telephony.isOffhook(getOpPackageName())
hasColumn(tableName,columnName)
mAdapter == null || !mIsAttached
mAppToken.isVisible()
mouse().alt().pressAt(1,1)
cursor.checkAndClearBoundsFlag()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
response.getRawStatusCode()
type.getDeclaredConstructor()
dockedBounds.right + dockDividerWidth
logger.debug("Error connecting to Plex",e)
LOG.debug(ex.getLocalizedMessage(),ex)
new RunnableAdapter<T>(task)
-uid
assertEquals(3,StringUtil.countMatches(drl,"import "))
tablelist == null || tablelist.getItems() == null
imageView.setImageDrawable(drawable)
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
profilesXml.isFile()
channel.getId()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
selenium.isElementPresent("link=Control Panel")
mView.postOnAnimation(mAnimationStarter)
userInfo.getWebsite()
granted.equals(NULL_ROLE)
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
new RelationshipLinkbackStage(topic,config,neoStore.getRelationshipStore(),nodeRelationshipCache,nextRelationshipId,relationshipStage.getNextRelationshipId(),true)
syncOperation.delay <= 0
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
getPreferences().getBoolean("allow_message_correction",false)
mGesturesPopup != null && mGesturesPopup.isShowing()
getMainAreaHeight()
Locale.getDefault().toLanguageTag()
context.getMainLooper()
users.get(j)
id=15
mWidth - mMinWidth
catalog.getStyleByName(info.getWorkspace(),info.getName())
ServerError.getCode(res)
app.configuration().getString("timezone","")
statistics.addPutTimeNanos(System.nanoTime() - start)
delegate.requireChild(element)
rhs.getScore()
longSize >= 960
mAuthorities.valueAt(i)
dateTimeFormatter.format(value)
level >= 95
image.pixelWidth != pixelWidth
Assert.fail("Some completion variants are missed " + missedVariants)
analysis.getTypeWithCoercions(aggregate)
new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())
ClassLoader loggingClassLoader=classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(),loggingSpec); 
packet.getAttribute("from").split("/",2)
Slog.w(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
CollectionResult<Tuple>
getGravity(objectId,gravity)
element.getLocalName()
ObjectHelper.loadClass(name,loader)
Boolean.parseBoolean(attrValue)
mAppOpsManager.noteOpNoThrow(opCode,callingUid,opPackageName)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccessor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
uri.append(AMPERSAND)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
name == null || name.isEmpty()
VideoContent.createRemoteVideo(fileReference,baseVideoContent.getW(),baseVideoContent.getH(),baseVideoContent.getDuration(),baseVideoContent.getFastThumb())
selenium.isElementPresent("link=Control Panel")
Map<String,FilterBuilder>
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
mContext.sendStickyBroadcastAsUser(intent,UserHandle.ALL)
timeMs <= 0 || timeMs >= 24 * 60 * 60* 1000
ISOChronology.getInstance(PARIS)
assertEquals(avDegree,0.5)
@Override public AbstractConfigValue get(Object key){   if (key instanceof String)   return peek((String)key);  else   return null; } 
PApplet.degrees(angle)
JAXRSUtils.getStructuredParams(theQuery,"&",false,false).getFirst(CALLBACK_PARAM)
new AlertDialog.Builder(ctx)
WebSocketEventListener.class.cast(l).onClose(event)
hintedMessage.getMessageId()
AWAKE_INTERVAL_DEFAULT_MS=10000
serviceInfo.getRequiredServices() == null || serviceInfo.getRequiredServices().size() == 0
hashList.get(1)
dynamicType.getDeclaredConstructor()
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
one.setAxisIndex(3)
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
DomainSocket.validateSocketPathSecurity0("/foo",1)
map.substitute(path,SystemInfo.isFileSystemCaseSensitive)
@SuppressWarnings("unused") public JobsV3 fetch(int version,JobsV3 s){   Key key=s.job_id.key();   Value val=DKV.get(key);   if (null == val)   throw new IllegalArgumentException("Job is missing");   Iced ice=val.get();   if (!(ice instanceof Job))   throw new IllegalArgumentException("Must be a Job not a " + ice.getClass());   Job j=(Job)ice;   Jobs jobs=new Jobs();   jobs._jobs=new Job[1];   jobs._jobs[0]=(Job)ice;   s.jobs=new JobV3[1];   if (j instanceof ModelBuilder) {     s.jobs[0]=new ModelBuilderJobV3().fillFromImpl(j);   }  else {     try {       s.jobs[0]=(JobV3)Schema.schema(version,j).fillFromImpl(j);     }  catch (    H2ONotFoundArgumentException e) {       s.jobs[0]=new JobV3().fillFromImpl(j);     }   }   return s; } 
expiresOn.getTime()
Number value=iterator.next(); 
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP,KEY_SIMPLEPERF_CMD)
return false; 
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR))
suppression.equals(toolId) || suppression.equalsIgnoreCase(SuppressionUtil.ALL)
Response.ok(null,MediaType.TEXT_PLAIN)
MAX_MODULES=97
bs.getName()
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
name == null || name.isEmpty()
OptionBuilder.create(CMD_HOST)
!isPrivateMessagingContact
jscx.initStandardObjects(null,false)
commander.downloadAvatar(imageView,accountList.get(i).getAvatar_url(),i,listView)
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),11,FontStyle.Plain,true)
rhs.getScore()
ssl.hasDefined(CommonAttributes.CA_CERTIFICATE_FILE)
Integer.parseInt(time.split(":")[1])
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
super.onDetachedFromWindow()
out.writeInt(sampleCount)
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key)
schemeSpecificParts != null && data != null
IOException ex
count <= 0
IgniteInternalFuture<Object>
is(false)
entry.notification.cloneLight()
private final String target; 
Integer.parseInt(quantifier)
new RuntimeException("Missing required attribute: " + attributeName)
FileDownloadUtils.formatString("range[%d-)",currentOffset)
file.toURL()
JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())
assertEquals(2,verifier.getErrors().size())
Slog.w(TAG,"Session failed to close due to remote exception",e)
isOffhook || AudioSystem.isStreamActive(AudioSystem.STREAM_VOICE_CALL)
Func1<Throwable,Observable<R>>
{4,5,5,11,6,5,7,7,11,11}
mService.removeNetwork(netId,mContext.getOpPackageName())
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
mainFile.getExecPathString()
last > first && first >= 0
selenium.isElementPresent("link=Control Panel")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
row.slider.setProgress(newProgress,true)
region == null || !region.isValid()
String value
toolchainInfo != null
viewToClick != null && viewToClick.isAttachedToWindow()
performDexOpt(packageName,instructionSet,false)
getMeasuredWidth()
mOpenTags.peek()
uri == null || "thing".equals(uri.getScheme()) == false
mConnectionById.containsKey(callId)
1
new BadRequestException(null,null,null,errors)
o.getRate()
artifact.getName().getType()
c == Character.class || c == Character.TYPE
hasFocus() && showClearButton && !TextUtils.isEmpty(getText())&& isEnabled()
selenium.isElementPresent("link=Control Panel")
Optional.ofNullable(BuckAddDependencyIntention.create(referenceElement,psiClass))
writer.getSourceFile(2)
@Mock private PanProfile mPanProfile; 
ContainerUtil.list("origin/master","origin/remote_branch")
blog.getLocalTableBlogId()
return 20_000; 
info.getLine1AlphaTagForSubscriber(subId,mContext.getOpPackageName())
mAppOpsManager.noteOpNoThrow(opCode,callingUid,opPackageName)
new ConnectionException(sm.getString("http2Parser.headers.wrongStream",connectionId,Integer.toString(headersCurrentStream),Integer.toString(streamId)),Http2Error.COMPRESSION_ERROR)
return false; 
HdmiCec.getTypeFromAddress(curAddress)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
mBackgroundScaledBitmap == null
selection != null && selection != ""
tagService.rename(uuid,text)
myUi._select(newSelection,new Runnable(){   public void run(){     final Set<Object> hangByParent=new HashSet<Object>();     processUnsuccessfulSelections(newSelection,new Function<Object,Object>(){       public Object fun(      final Object o){         if (myUi.isInStructure(o) && !adjusted.get(o).value(o)) {           hangByParent.add(o);         }  else {           addAdjustedSelection(o,adjusted.get(o),null);         }         return null;       }     } ,originallySelected);     processHangByParent(hangByParent).notify(result);   } } ,false,true,true)
logger.warn("{}",general)
_connector.getResponse("GET /foo?data=42 HTTP/1.0\n\n")
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
LOGGER.warning("Unable to load image using TGA loader!")
JsonRecordHiveMapper.class
ctx != null && ctx.getSettings().AUDIO_STREAM_GUIDANCE.get() == 0
new MediaController(mContext,token)
!LineMarkerSettings.getSettings().isEnabled(new ColorLineMarkerProvider())
bi treeGen=new ha(); 
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
DataStreamSink<OUT>
copy.replaceFirst("@" + maybeUserName,"")
endPosition.set(Position.KEY_ODOMETER,51000)
formatInfo.getFormat() == 7
_typeSettingsProperties.toString()
!detectionHandler.isErrorDetected()
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615e00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
bm.createAshmemBitmap()
regenerateBackground()
JournalArticle.class
val != null && val > 0
realm.checkIfValid()
getLocalizationXmlFromPreferences(preferences,portletRequest,parameter,null,defaultValue)
selenium.isElementPresent("link=Control Panel")
pgl.loadFragmentShader(fragURL)
factory.terminateAll()
i == 0 && (post.blog.isFullSizeImage() == false && !post.blog.isScaledImage()) || post.blog.getMaxImageWidth().equals("Original Size")
log.infof("started ResourceAdapterService %s",context.getController().getName())
new IllegalArgumentException("the annotation is null")
new MediaController(mContext,token)
message != null && message.getEncryption() == Message.ENCRYPTION_OTR
this.sizeY=sizeY
public Object getBean() throws NoBeanAvailableException {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,cPreviewSteps,executedSteps.size(),false,null,props)
onDetachedFromWindows()
assertThat(getField(graphite,"port")).isEqualTo(2003)
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
i=1
selenium.isElementPresent("link=Control Panel")
columnNames.size() + 2
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
item(GREEN_ROBE_TOP)
namespaces.isDefined()
enabled=true
input != null && input.isAttached()
attribute == null || attribute.getMetaAttribute().isReadOnly()
types.contains(metadata.getInheritedFromType()) || instance.getClass().getName().equals(metadata.getInheritedFromType())
customer.getId()
LOGGER.error("Code expired : {}",code)
makeReplyMessage(pathname)
Throwable e
selenium.isElementPresent("link=Control Panel")
b.entrySet()
!isVideoScalingModeSupported(mode)
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
actualHeight > reqHeight
fields.getOrDefault("last_seen",0)
new FlywayException("Unable to instantiate class: " + className,e)
callerPackage == null
StringBuffer sb=new StringBuffer(); 
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.MAX,Pooling2D.Divisor.INCLUDE_PADDING,0.0,outH,outW,output)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Site Name")
historicState(item,timestamp,serviceName)
LinkedHashMap<String,StandardFileType>
_buildTemplateWithGradle("war-hook","war-hook-dependency-management","--dependency-management-enabled")
nameDefinitionMultimap.keySet()
PublisherPeek<T>
Action<JarBinarySpecInternal>
getAttributes(link,SystemInfo.areSymLinksSupported)
factory.getProxy(getClass().getClassLoader())
Throwable e
DIODE(356)
spawnSettings.containsKey(id)
getOwnerAddress()
Response.ok(null,MediaType.TEXT_PLAIN)
basicInvocation.potentialResponse != null
logger.error(msg)
ai.uid < Process.FIRST_APPLICATION_UID
result.getReceipt().getEnergyUsageTotal()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
HIVE_TABLE_OFFLINE(2,USER_ERROR)
field.getType()
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
object == null
!hasPermission(permission)
!isRemoteRegionRequested
TEMPLATE_PARAMS_FIELD.getPreferredName()
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
filteredPods == null || filteredPods.isEmpty()
new Tag(text,line,this)
v.isUnknownType() || v == Indexer.idx.builtins.None
mUiHandler.postDelayed(pae,timeout)
((aLatitudeE6 < this.mLatNorthE6) && (aLatitudeE6 > this.mLatSouthE6)) && ((aLongitudeE6 < this.mLonEastE6) && (aLongitudeE6 > this.mLonWestE6))
WindowedValue.valueInGlobalWindow(4,PaneInfo.NO_FIRING)
selenium.isElementPresent("link=Control Panel")
Environment.getOemDirectory()
pFromY - pToY
Proxy.getInvocationHandler(proxy).getClass().getName()
expandableView.getIntrinsicHeight()
entry.type != DownloadActivityType.SRTM_FILE && entry.type != DownloadActivityType.HILLSHADE_FILE
graphVersion.incNodeAndEdgeVersion()
!ref.virtualMachine().canGetInstanceInfo()
mParent == null
stream.rstStream()
endTracksTo("main")
services=9
mWidth - mMinWidth
-1
CAMERASERVER_UID=1047
e.toString()
NativeFormatPlugin[]
Integer.parseInt(attrValue)
scanner.acceptsInput(fqn)
!myDisposed
fragmentCollectionPersistence.findByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
query.getSliceStart()
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24))
new DeleteByQueryWrapper(rewritten,schema)
colIndex > columnTypes.length
dbStat.setInt(1,sessionType.getPid())
r - scrollX
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
TokenSet.create(IpnbPyTokenTypes.IPNB_REFERENCE,IpnbPyTokenTypes.IPNB_TARGET)
dlFileEntry.isInTrash()
table != null && table.getTableSpec().getColumnCount() <= 0
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
Throwable e
nodeEngine.getSharedService(LockService.SERVICE_NAME)
AbstractCollection self
Arrays.hashCode(valSrcQueries)
state.isAlive()
DiagnosticFactory0.create(ERROR)
fingerprintIsEnabled()
argumentsLength == 0
loaded.getLoaded().getDeclaredConstructor()
U.resolveWorkDirectory(U.defaultWorkDirectory(),"marshaller",false)
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null,null)
ApiConsumerHelper.findMethod(endpoint,this)
new ResolveTakenPictureAsyncTask(data,promise,options,cacheDirectory,RNCameraView.this)
sentences.size() > 0 && sentences.get(0).entityMentions() != null
selenium.isElementPresent("link=Control Panel")
TAuthor_ID()
mView.postOnAnimation(mAnimationStarter)
audioManager.getRingerModeInternal()
driver.findElementByPartialLinkText("Rickrolling")
FieldsWriter<S,?>
parentTag == null && namespace.equals(XmlUtil.XHTML_URI)
PhoneNumberUtils.is12Key(number.charAt(i))
List<PsiElement>
e.update(recid,2L,Serializer.LONG)
deleteCondition.isInternal()
is(1)
return revision; 
private T actor; 
addUpdateRequest()
value > 180
smppClient.scheduleReconnect()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
new Node.JspAttribute(tai,qName,uri,localName,value,true,el,dynamic)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY) || isEmulator
fieldExpression != null
yamlFactory.createParser(input)
request.getContentLengthLong()
assertTrue("Exit Statuses are supposed to be in: " + exitStatuses + ", but the actual exit status code is: "+ status.getExitStatus(),exitStatuses.contains(status.getExitStatus()))
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
scheduler.scheduleAtFixedRate(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
Math.max(1,amount)
times + BASE_FILE_NUMBER
if (isPresent) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
module.getProject()
isSimple=false
selenium.isElementPresent("link=Control Panel")
new IllegalArgumentException("the ast is null")
ContainerUtil.newHashSet(EDITOR_TOOLBAR,PROJECT_VIEW_TOOLBAR,TESTTREE_VIEW_TOOLBAR,MAIN_TOOLBAR,TOOLBAR,RUNNER_TOOLBAR,ANT_EXPLORER_TOOLBAR,ANT_MESSAGES_TOOLBAR,COMPILER_MESSAGES_TOOLBAR,TODO_VIEW_TOOLBAR,STRUCTURE_VIEW_TOOLBAR,USAGE_VIEW_TOOLBAR,DEBUGGER_TOOLBAR,CALL_HIERARCHY_VIEW_TOOLBAR,METHOD_HIERARCHY_VIEW_TOOLBAR,TYPE_HIERARCHY_VIEW_TOOLBAR,JAVADOC_TOOLBAR,FILE_HISTORY_TOOLBAR,FILEHISTORY_VIEW_TOOLBAR,LVCS_DIRECTORY_HISTORY_TOOLBAR,CHANGES_VIEW_TOOLBAR,PHING_EXPLORER_TOOLBAR,PHING_MESSAGES_TOOLBAR,ANALYZE_STACKTRACE_PANEL_TOOLBAR,DIFF_TOOLBAR)
mActivities.remove(id)
mVibratorService.vibratePattern(null,new long[]{0},0,new Binder())
Type.LONG_TYPE.equals(typeInStack) || Type.DOUBLE_TYPE.equals(typeInStack)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
rect == null || urls.size() > 1
status.getCode().getNumber()
new Requirement(Skill.SLAYER,85)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
targetInfo != null && targetInfo.metaData != null
Object listener
/**   * Abstract persistence provider that provides a method to actually handle formatting moneys.  * @author Andre Azzolini (apazzolini)  */ public abstract class AbstractMoneyFieldPersistenceProvider extends FieldPersistenceProviderAdapter {   public String getFormattedDisplayValue(  BigDecimal value,  Locale locale,  Currency currency){     NumberFormat format=NumberFormat.getCurrencyInstance(locale);     format.setCurrency(currency);     return format.format(value);   }   public String getFormattedValue(  BigDecimal value){     NumberFormat format=NumberFormat.getInstance();     format.setMaximumFractionDigits(2);     format.setMinimumFractionDigits(2);     return format.format(value);   } } 
times + BASE_FILE_NUMBER
@NotNull T value
existingLayout == null
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
FastMath.min(origin,num.floatValue())
origin.realComponent().doubleValue() <= other
return true; 
loaded.getLoaded().getDeclaredConstructor()
logger.debug("Error connecting to Plex",e)
logger.fine("Recording function information")
(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout
USE_DISPLAY_LIST_PROPERTIES=false
mService.setEnableAutoJoinWhenAssociated(enabled)
Time.currentTimeMillis()
myCardModel.getQuestionAlign()
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL || (atomicityMode() == CacheAtomicityMode.ATOMIC && nearEnabled())
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
ctx.grid().forCacheNodes(name())
Map<String,Object>
List<Class<?>>
window != null && myRestoreWindowSize != null
tagName.equals(TAG_FORWARDING_INTENT_FILTERS) || tagName.equals(TAG_CROSS_PROFILE_INTENT_FILTERS)
!mTileState
props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,1)
win.isDrawnLw() || win.hasAppShownWindows()
status.getLastModificationTimeMs()
CompilerDirectives.inCompilationRoot()
mono.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
mChildren.get(i).render(camera,vpMatrix,projMatrix,vMatrix,mMMatrix,pickerInfo)
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
ignoreUnknown=true
nativeSetFlags(mNativeObject,sc.mNativeObject,0,SURFACE_OPAQUE)
Long.parseLong(value)
Thread.sleep(1000)
new StepMeta(stepID,stepName,tii)
Log.debug(this + " Busy selector - injecting delay " + _paused+ " times")
Ref.create(-1)
generateFluentSetters()
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
goalStartXp <= 0 || currentXp > goalEndXp
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED)
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(256)
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize()
finishAndRemoveTask()
pluginManifest.setRequirePlugins(metadata.getRequiredPlugins().toArray(new String[]{}))
bounds.getEndOffset() <= textRange.getStartOffset()
onFailed(x)
disables.contains(a.getName())
new MissingPropertyException("The property '" + name + "' is missing from the binding.",name,Binding.class)
LOGGER.debug("onStartCommand({}) called while currentCommandExecution = {}",execution,currentCommandExecution)
clock.compare(newClock)
ParamUtil.getString(resourceRequest,Constants.CMD)
new ArrayList<FileInputSplit>()
mService.disableNetwork(netId)
config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)
display.getRealMetrics(dm)
type.getDeclaredConstructor()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Log_OC.d(TAG,"onPause() start")
selenium.isElementPresent("link=Control Panel")
statistics.addPutTimeNanos(System.nanoTime() - start)
JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())
completion.switchOnError(ex -> handler.handle(exchange,ex))
Id
allocator.getFlowController().prepareActionAllWrite(input,weights,weightGradView,biasGradView,delta,epsNext)
32 * 1024
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper,false)
metadata.getFaceRectangles()
ormEntity.getMetadataComplete()
delayMs <= 0
getMeasuredWidth()
List<PdfComment>
cls.getAccessFlags().isSynthetic() && cls.getFields().isEmpty() && cls.getMethods().isEmpty()&& cls.getInnerClasses().isEmpty()
mapExpressionStatement(node)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"meminfo",pw)
synchronized (runningZKTasks) {   runningZKTasks.remove(id); } 
Thread.sleep(1000)
((t - 1) * t * t) / 2.0
JarFile.class
new ArrayList<Object>(literalList.size())
EMERGENCY_ASSISTANCE_ENABLED=true
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
copyProps.remove(PoolingConnectionProvider.POOLING_PROVIDER)
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),createCommandDecoder(),connection,binding.getReadPreference(),transformer(source))
Exception.class
marketDataService.getBittrexTrades(pairString)
each.getPath()
bos.toString("UTF-8")
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)
new StringBuilder(1024)
LOG.warn("Temporary Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the temporary data directory: " + tmpDirPath + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space - resetting to maximum available " + dirFreeSpace / (1024 * 1024) + " mb.")
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
selenium.isElementPresent("link=Control Panel")
GenericAttributeValue<Boolean>
finishAndRemoveTask()
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
pmmlScorecard.getUseReasonCodes()
new Paint(Paint.ANTI_ALIAS_FLAG)
mPlayer.getCurrentPosition() * 1000L
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
node == null || v == node.view
UIUtils.createComposite(panel,2)
action != KeyEvent.ACTION_UP
i < 25
routerChain.notifyFullInvokers(invokers,getUrl())
mCameraUser.submitRequest(request,true)
StringBuilder buffer=new StringBuilder("SynchronizedAttributeAccessor: ["); 
entry.getKey().startsWith("sun.") || entry.getKey().startsWith("awt.") || entry.getKey().contains(".awt.")
GL20.glGetShaderiv(shader,pname,params)
appearance.getFloat(attr,0)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0 || !reportToActivity
type.getDeclaredConstructor()
mGesturesPopup != null && mGesturesPopup.isShowing()
LOG.debug("Looking for service: " + service + ". Current token is "+ token)
file.getMimetype() == null || !file.getMimetype().equals("DIR")
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
FunctionTypesKt.isFunctionTypeOrSubtype(((ClassDescriptor)container).getDefaultType())
ab.get1U()
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
10 * 1024L * 1024L
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
(BeanDefinitionRegistry)beanFactory
USE_DISPLAY_LIST_PROPERTIES=false
csFoldingEnabled=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
readWifiSleepPolicy()
loaded.getLoaded().getDeclaredConstructor()
instance.managementService.destroy()
grpCtx.config().getRebalanceDelay() == -1
/**   * {@link Builder#replace(Tree,String)}   */ public static SuggestedFix replace(Tree tree,String replaceWith){   return builder().replace(tree,replaceWith).build(); } 
DEBUG=false
log.debug("Error extracting parameters meta data",e)
WEB_SYNC_MANAGER=false
filterTypes.length()
Matchers.anyLong()
telephony.isOffhook(getOpPackageName())
thumbData != null && exifThumbWidth >= fullThumbWidth
LOGGER.info("Cached resource {} is up-to-date (lastModified: {}).",location,cached.getExternalLastModified())
new Paint()
new IOException("Storing a directory is not yet supported.")
Boolean.parseBoolean(resizeableStr)
List<ArtifactRepository>
TEST=true
DAY_POSITION_IN_LONG=10_000
token.equals(":") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
LongStream.rangeClosed(min,max)
@Override public final AnalyzedGermanTokenReadings createNullToken(final String token,final int startPos){   return new AnalyzedGermanTokenReadings(new AnalyzedGermanToken(token,null,startPos)); } 
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
1
new InfoData(null,awayMsg,MY_CAPS,null)
!mKey.equals(other.mKey)
i.getTouchIconUrl() == null
/**   * Constrains search results to only match those which also match a provided query.  Results are cached, so that searches after the first on the same index using this filter are much faster.  * @version $Id$  * @deprecated use a CachingWrapperFilter with QueryWrapperFilter  */ public class QueryFilter extends CachingWrapperFilter {   /**   * Constructs a filter which only matches documents matching <code>query</code>.  */   public QueryFilter(  Query query){     super(query);   }   public boolean equals(  Object o){     return super.equals((QueryFilter)o);   }   public int hashCode(){     return super.hashCode() ^ 0x923F64B9;   } } 
new ClusterStateUpdateResponse(false)
await().atMost(2,TimeUnit.SECONDS)
mGnssCallback != null
builder.humanReadableField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
selenium.isElementPresent("link=Control Panel")
derefStub()
openSession.closeAndClearTokenInformation()
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,true,false,factory)
data.getBytes(response.getCharacterEncoding())
Stream.of("CYPHER 3.1","CYPHER 3.4")
new StreamException(sm.getString("http2Parser.processFrame.unexpectedType",expected,frameType),Http2Error.PROTOCOL_ERROR,streamId)
partialUri.toLowerCase()
ItemAdapter<IItem>
Simple.forClass(Tuple.class)
matcher.find()
"cache." + propertiesName + ".size"
out.writeInt(this.connectionAddress.getPort())
pv.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector))
myChild2.getElementType() == ElementType.BLOCK_STATEMENT || myChild2.getElementType() == ElementType.CODE_BLOCK
new IllegalArgumentException(String.format("Cannot determine specified query - doesn't appear to be URI or JSON based and location [%s] cannot be opened",query))
ticks * ticksInGap
dfa == null || dfa.states.isEmpty()
resources.size() >= maxSuspendResource.get()
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsWrite")
getProperties().requestCacheEnabled()
Thread.sleep(1000)
ITERATIONS=3
isAssignableFrom0(supertypeName,iface,cl)
mReadOwners != null && includingOwners
JsonNode::isNumber
@SuppressWarnings("MethodDoesntCallSuperMethod") @Override public CDATA clone(){   CDATA text=new CDATA();   text.value=value;   return text; } 
LOG.error("Cannot get the live nodes: {}",e.getMessage())
remainingAmount != null && originalAmount != null
DEFAULT_VERIFY_ENABLE=false
mNetd.setDnsConfigurationForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
ruleContext.throwWithRuleError("Xcode version must be specified to use an Apple CROSSTOOL")
createMessageConsumer(session,destinationName,messageSelector,false,null)
logger.debug("An exception occurred while formatting a date",e)
startActivityAsUser(intent,UserHandle.CURRENT)
XMLInputFactory.newInstance()
addProperty(prop,true)
Response.ok(null,MediaType.TEXT_PLAIN)
listener.wait(1000)
testModules("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
selenium.isElementPresent("link=Control Panel")
new StrictModeViolationDialog(mUiContext,ActivityManagerService.this,res,proc)
maxLevel <= levelFloor
final LongAdder8 execCnt=new LongAdder8(); 
@NotNull ContainingClass owner
mResolver.stop()
IllegalStateException.class
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
mGnssCallback != null
rt == Boolean.TYPE && !(ret instanceof Boolean)
viewerPanel.layout()
getServiceForUserLocked(userId)
!classFilter.contains(classID)
method.invoke(node)
public Long getId(){   return id; } 
mStorageManager.triggerMediaScan(file.getStoragePath())
editorFactory.create("simple",getTerminal(),System.in,System.out)
intervalFraction * (nextValue - prevValue)
comp.requestFocusInWindow()
DBUtils.removeDownloadInfo(info.galleryBase.gid)
group != null && this == group.mInternalConnection
selenium.isElementPresent("link=Control Panel")
TelephonyManager.getDefault().getCurrentPhoneType()
this.recyclerView.setNestedScrollingEnabled(false)
fLines.addElement(st.nextToken())
PatchedRouteInfo r; 
ExceptionUtils.handleThrowable(tt)
enclosing == null
SingleMapBlock.class
Utils.writeUtf8File(outputDirectory,getFileName(cls),xsb.toXML())
mBarChart.addTiming(section,2,parseResult.runDuration / 1000f)
assertTrue(Modifier.isFinal(modifiers))
position + dockDividerWidth
HashMap<String,String>
new LinkedFileViewModel(linkedFile,entry,databaseContext,dialogService,taskExecutor)
message.get(Message.REQUESTOR_ROLE)
mode != null && !mode.isEmpty()
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
Ddeml.INSTANCE.DdeFreeDataHandle(hData)
Exception e
getService().hasClipboardText()
performDexOpt(pkg.packageName,null,true,causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT,false)
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).switchIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
nodes.hasLabel(bazLabel)
selenium.isElementPresent("link=Control Panel")
Mapper.class
myDetailsHolder.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
checkCall(receiver)
query.getSliceStart()
id=10847
new ProgressDialog(this,R.style.ProgressDialogTheme)
Collection<GridDrStateTransferDescriptor>
focusable.isAccessibilityFocusable()
cluster.close()
target.toString()
packageMatch[1]
this.mChildScene == null || !this.mChildSceneModalUpdate
query.elements()
parsedResult.getType()
ref_val.contains("HTTP error 403")
vs == 0xFE0E || testCase.mVariationSelectors.contains(vs)
String message
selenium.isElementPresent("link=Control Panel")
mSelectResponse != null && mSelectResponse.length > 0
i < 1000
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
rImpl.getRequest()
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
/**   * Returns a duplicate of this resource record.  */ @Override public DnsResource duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } 
cached.get(key)
selenium.isElementPresent("link=Control Panel")
name == null || name.isEmpty()
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
frame.removeWindowFocusListener(myIdeFrameFocusListener)
!isClosureRBrace(element) || !isClosureContainLF(element)
selenium.isElementPresent("link=Control Panel")
super.resolveLayoutDirection(layoutDirection)
Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
mSyncStatus.valueAt(i)
logger.debug("Cannot play URI ({})",e.getMessage())
sub.next(dataBuffer)
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
Slog.d(TAG,"Unable to bind ActivityRecognitionProxy.")
value.equals("")
typeSettingsProperties.toSortedString()
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
end == 0 || end >= mYVals.size()
view.setVisibility(View.VISIBLE)
state.getTypes().isSubtype(argType,jUnit4ClassRunnerType)
(int)timeoutMs / 1000
edges.setInt(edgePointer + E_ADDITIONAL,value)
logger.debug("license [{}] - valid",license.uid())
WordPress.getCurrentBlog().getLocalTableBlogId()
pathParts[1] != null && pathParts[1].length() > 1
result.getReceipt().getEnergyUsageTotal()
selenium.isElementPresent("link=Control Panel")
context.formatNewLine()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
new IllegalStateException("Result is already complete: succeeded")
provider.findValueSerializer(delegateType,property)
display.equals(taskRect) || taskRect.isEmpty()
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
materialScrollBar.addIndicator(new CustomIndicator(this),true)
ColorProperties.getColor("controlDarkShadow")
accountPermissionUpdateContract.getPermissionsCount() != 2
ethLog.getError()
ConfigPropertyVetoException ex
baseCodeAddress >= 0
FileSystemMaster.class
jobsLogs.jobsLog()
new LinkedHashMap<>(0)
mapCopy.getName()
Log.e(TAG,"Found activity " + r + " in proc activity list using "+ r.app+ " instead of expected "+ app)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
PetiteReferenceType[]
XmppStringUtils.parseBareJid(key)
startActivity(in)
recipient.toShortString()
displayList != null && displayList.isValid()
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
INSTANCE.rand(shape,Nd4j.getRandom())
StaticApplicationContextServiceFetcher.this
_log.warn(sb.toString())
getJSDocType(cm,var)
mSharedElements.size()
descriptor.getDependencies()
allOf(withId(R.id.fab_expand_menu_button),withParent(withId(R.id.fab)))
outLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
Assert.assertEquals(4,results.size())
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).onErrorMap(this::mapError)
JiveGlobals.getPropertyEncryptor().encrypt(value)
createFromResourceStream(res,value,is,srcName,null)
format.getDescription()
public void runMayThrow() throws ExecutionException {   if (Schema.instance.getKSMetaData(mutation.getKeyspaceName()) == null)   return;   if (clr.pointInTimeExceeded(mutation))   return;   final Keyspace keyspace=Keyspace.open(mutation.getKeyspaceName());   Mutation newMutation=null;   for (  PartitionUpdate update : clr.replayFilter.filter(mutation)) {     if (Schema.instance.getCF(update.metadata().cfId) == null)     continue;     ReplayPosition rp=clr.cfPositions.get(update.metadata().cfId);     if (segmentId > rp.segment || (segmentId == rp.segment && entryLocation > rp.position)) {       if (newMutation == null)       newMutation=new Mutation(mutation.getKeyspaceName(),mutation.key());       newMutation.add(update);       clr.replayedCount.incrementAndGet();     }   }   if (newMutation != null) {     assert !newMutation.isEmpty();     Uninterruptibles.getUninterruptibly(Keyspace.open(newMutation.getKeyspaceName()).applyFromCommitLog(newMutation));     clr.keyspacesRecovered.add(keyspace);   } } 
mUiHandler.postDelayed(pae,timeout)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
parent.getValue() != null && parent.getValue() instanceof RecursiveTreeObject && ((RecursiveTreeObject<?>)parent.getValue()).getGroupedColumn() != null
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
this.targetValidator.validateValue(beanType,propertyName,value,groups)
db.hashMapCreate("cache")
paintInnerRect.setColor(0xddFFFFFF)
command.getDeviceId()
-X_MIN_VELOCITY
dist >= maxDist
final CharSequence subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo); 
expected=50331652
diskThresholdSettings.getFreeDiskThresholdFloodStage()
GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))
fb.limit()
Integer.parseInt(stackIdStr)
!serialNumber.equals(null)
a.getInteger(R.styleable.MaterialCalendarView_mcv_selectionMode,SELECTION_MODE_SINGLE)
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","two","three")
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
LOGGER.isTraceEnabled()
"User with email address " + emailAddress + " does not exist for company "+ companyId
case 13: 
headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
file.getName()
entry.notification.cloneLight()
new Paint()
mediaVideoItem.getHeight() / 2
mWidth - mMinWidth
new RagManager()
new ConnectionException(sm.getString("http2Parser.processFrameContinuation.notExpected",connectionId,Integer.toString(streamId)),Http2Error.PROTOCOL_ERROR)
conf.getDouble("fuzz")
Integer.parseInt(rightStr)
filePath == null || context == null
_freemarkerEngineConfiguration.resourceModificationCheck()
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
SVID_SHIFT_WIDTH=8
mGnssCallback != null
(NoteDrawerCategoryAdapterViewHolder)convertView.getTag()
this.getOwnerAddress()
return other; 
msg.getSpannableString()
bs.max() <= 32
dot == -1
mNwService.getInterfaceConfig(mTetherInterfaceName)
mService.saveConfiguration(mContext.getOpPackageName())
this.httpHeaderNames.put(KEYCLOAK_USERNAME,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
selenium.isElementPresent("link=Control Panel")
endpoint.keepAliveTimeSeconds()
new AssertionError("expected ], got " + currentToken + " syntax:"+ syntax)
isSelected(node)
new IllegalStateException("Legacy advertising can't include TX power level in header")
new IllegalStateException("Encountered null records for input index " + i)
allSortedModules.stream()
forceRegister=true
return false; 
graph.addOrUnique(new OSRLocalNode(i,proxy.stamp().unrestricted()))
U.resolveWorkDirectory(U.defaultWorkDirectory(),"marshaller",false)
61L + 122L
!list.isEmpty()
new AlertDialog.Builder(getActivity(),R.style.Theme_ownCloud_Dialog_NoButtonBarStyle)
Thread.sleep(5000)
shuffleWithNonExistentUuids(project2.uuid(),project1.uuid())
project.getTestDirs()
new Thread(new PartitionConsumer(),_segmentNameStr)
destinationName == null || destinationName.equals("")
Assert.state(!initialized,"Stream is already initialized.  Close before re-opening.")
hasProperty("key3").withValue(5678L)
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
util.getDataTestDirOnTestFS(table)
touchEventPool.freeAll(touchEvents)
settings.readLPw(null,0,false)
currentScreen == SCREEN_WINDOW_FULLSCREEN || currentScreen == SCREEN_WINDOW_TINY
Stream.of("CYPHER 3.1","CYPHER 3.4")
dao.mergeWithFlush((WidgetLayoutEntity)anyObject())
AsyncHttpClientConfig.class
settings.readLPw(null,0,false)
bloomHighPassThreshold=.05f
!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
!result.restricted && !result.asked && usage&& PrivacyManager.isApplication(restriction.uid)
methodExists(methodName,fieldNode,false)
iter.next().getDoubleValue() != 0.0
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
nativeSetFlags(mNativeObject,sc.mNativeObject,0,SURFACE_OPAQUE)
selenium.isElementPresent("link=Control Panel")
LinkedHashMap<String,LinkedHashMap<String,ASTNode>>
ins != null
return mChangingDisappearingDelay; 
mAdapter != null && mDataSetObserver != null
c <= '9'
stagingTypeSettingsProperties.toSortedString()
queryDBObjects(ObjectType.SCALAR_FUNCTION,ObjectType.AGGREGATE,ObjectType.CLR_SCALAR_FUNCTION,ObjectType.CLR_TABLE_VALUED_FUNCTION,ObjectType.TABLE_VALUED_FUNCTION,ObjectType.STORED_PROCEDURE,ObjectType.CLR_STORED_PROCEDURE,ObjectType.USER_TABLE,ObjectType.SYNONYM,ObjectType.SEQUENCE_OBJECT,ObjectType.FOREIGN_KEY,ObjectType.VIEW)
!Character.isLetter(c) && c == wordDelimiter[0]
dynamicType.getDeclaredConstructor()
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
instance.criterion.sql.replace("?",instance.criterion.entryValues[instance.selectedIndex])
query.assignees().toArray()
heightMode == MeasureSpec.UNSPECIFIED
service == null || StringUtils.isBlank(service.getId())
attachViewToParent(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
@Nullable @Override public Scheme getCurrentScheme(){   return null; } 
return topicID; 
sqlRouteResult.getSqlParsedResult().getType()
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
callback.onPulseFinished()
DEBUG_FOCUS=false
name + "." + signatureEntry.getKey()
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase|| database instanceof DB2Database
LibraryTableEditor.editLibraryTable(getGlobalLibrariesProvider(),myProject)
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0 && mInstaller != null
headers != null && headers.size() == 1
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Variable emitAddress(StackSlotValue slot); 
@Nullable final Throwable lastException
!isInTransform && !isUDTF && child.getChildCount() > 2
Log_OC.e(TAG,"Server check tried with OperationService unbound!")
StringBuilder buffer=new StringBuilder(); 
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,parallelism,subtaskIndex)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
scan.getResourcesFound()
new MediaController(mContext,token)
/**   * Replace a tree node with a string, but adjust the start and end positions as well. For example, if the tree node begins at index 10 and ends at index 30, this call will replace the characters at index 15 through 25 with "replacement": <pre> {@code fix.replace(node, "replacement", 5, -5)}</pre>  * @param node The tree node to replace  * @param replaceWith The string to replace with  * @param startPosAdjustment The adjustment to add to the start position (negative is OK)  * @param endPosAdjustment The adjustment to add to the end position (negative is OK)  */ public static SuggestedFix replace(Tree node,String replaceWith,int startPosAdjustment,int endPosAdjustment){   return builder().replace(node,replaceWith,startPosAdjustment,endPosAdjustment).build(); } 
nextRequest(newRequest,future)
1 << 15
mockResultSet.getLong(1)
layoutSetPersistence.update(privateLayoutSet,false)
mCallback.onInputUpdated(inputId)
Throwable e
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
target.getDestinationLinkAddress()
accountHandle.getComponentName().flattenToString()
ScanResult.is5GHz(frequency)
mBackdrop.animate().alpha(0.002f)
id=5
new String[nrKeys1]
selenium.isElementPresent("link=Control Panel")
jmsTemplate.setPubSubDomain(true)
this.klass.isPrimitive() || this.isEnum()
headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),entry.getValue(),camelExchange)
ConcurrentMap<String,RPromise<? extends RRemoteServiceResponse>>
manager != null && manager.server != null
is(1)
StringUtils.isBlank(cert)
FastMath.min(origin,num.doubleValue())
if (dockOnTopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
runOTIafterNTI=true
PyDebugRunner.createCommandLinePatchers(state,configuration,PORT)
mGnssCallback != null
Locale.getDefault().toLanguageTag()
selenium.isElementPresent("link=Control Panel")
scrollWebElementIntoView(webElement)
node == null || v == node.view
tag.getReferencedObjectId()
smppClient.scheduleReconnect()
XmppStringUtils.parseBareJid(connection.getUser())
UserException.resourceError().message("Unable to acquire queue resources for query within timeout.  Timeout for %s queue was set at %d seconds.",queueName,queueTimeout / 1000)
15 * 60 * 1000
LOG.info(e)
case REPEAT_INSTANCE: 
mService.mDisplayContents.valueAt(displayNdx)
player.getDisplayName()
TestUtil.nextInt(random(),1,3)
UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()|| (SystemInfo.isWindows && Registry.is("ide.intellij.laf.win10.ui"))
actor.addListener(listener)
WordPress.getCurrentBlog().getLocalTableBlogId()
mActivity.getSupportFragmentManager()
Thread.sleep(500)
_log.warn(ioe,ioe)
is(500)
client.getGameState() != GameState.LOADING && client.getGameState() != GameState.LOGGED_IN
realm.checkIfValid()
@Override public Text detach(){   throw ImmutableElement.immutableError(this); } 
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",true))
tabAlias.equalsIgnoreCase(tableAlias)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
@OutputDirectory
appName != null && searchManager.getSearchableInfo(appName) != null
id=10840
List<Object>
new ObjectMapper().readerFor(DiskBalancerCluster.class)
ourSupportDifferentFileTypes=true
CxfSpringEndpointBean.class
values[i] == value
LinkageError e
ImmutableList.copyOf(modules)
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
column.createColumnObserver(false)
return 3; 
mMat[7]
del != null
JBUI.emptyInsets()
getDelegate().getDefaultCipherSuites()
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
meta.getDynamicFilterFieldName()
supported.getProtocols()
node_type == MatchNode.MATCHNODE_STATEMENT && !this.stats.isEmpty()
values.put(Document.COLUMN_ICON,R.drawable.ic_root_mtp)
mBindingServices.isEmpty()
JBUI.Borders.empty(5,10,0,10)
analysis.getTypeWithCoercions(aggregate)
network.predecessors(producedNode)
new PropertyDescriptor.Builder().name("Return Type").description("Indicates the desired return type of the JSON Path expressions.  Selecting 'auto-detect' will set the return type to 'json' for a Destination of 'flowfile-content', and 'string' for a Destination of 'flowfile-attribute'.").required(true).allowableValues(RETURN_TYPE_AUTO,RETURN_TYPE_JSON,RETURN_TYPE_STRING)
setStacked(false,true)
jsonHotRestartState != null
log.isDebugEnabled()
ENABLE_SQLITE_LOG=false
t.start()
ltype == Analyzer.self.builtins.BaseStr && rtype == Analyzer.self.builtins.BaseStr
AccessibleObject executable
removedTerrains.add(tq)
stall_till_cloudsize(5)
primaryGroupHasCea608TrackFlags[i]
getTelecomService().silenceRinger(mContext.getOpPackageName())
!packaging.equals("jar")
current >= 0
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,10)
PsiTreeUtil.isAncestor(elsePart,e,false)
(CheckBoxPreference)mPrefInstantVideoUpload
tmpMap.values()
VERBOSE=false
intervalFraction * (nextValue - prevValue)
final SimulatedDpad mSimulatedDpad; 
rowKeyColumnIO.writeColumnWithoutDictionary(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
this.errorLogger.error(message,ex)
BackupManagerServiceInterface svc=mService; 
RevisionVersion=3
IssueTrackingBlocksRecognizer rec=new IssueTrackingBlocksRecognizer(hashedReference,hashedSource,hashedComparator); 
col2d.addiColumnVector(epsilon1d)
appContext.getSystemService(Context.WINDOW_SERVICE)
resolver.acquireUnstableContentProviderClient(uri)
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
value.equalsIgnoreCase("strict")
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
this.nameDefinitionMultimap.remove(name,def)
nextInt(random,0x80,0x7ff)
!mGsmPhone.mSST.isConcurrentVoiceAndData()
connection().createPacketCollectorAndSend(ping).nextResultOrThrow(pingTimeout)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
PropertiesComponent.getInstance().getBoolean(getAutoUpdateEnabledProperty(),getAutoUpdateDefault())
getLogger().debug("Checking " + model.getId() + " for extensions.")
expiresOn.getTime()
assertEquals(2,triggers.size())
realPointerIndex >= AndroidInput.NUM_TOUCHES
ConfigPropertyVetoException ex
previousDataInputs != null
DefaultCacheKeysFactory.staticGetNaturalIdValues(cacheKey)
row - 0.5f
group != null && this == group.mInternalConnection
logger.debug("Radio station '{}' not found",station)
SystemClock.uptimeMillis()
Localization.menuTitle("Edit")
options.addOption("i",IGNORE_NODES_OPTION,"NODES","don't stream to this (comma separated) list of nodes")
loaded.getLoaded().getDeclaredConstructor()
sTestCaseCounter == 0
LOG.debug("EOL(end-of-line) defined for the CSV: {}",eol)
callbackList.getBroadcastCookie(i)
strippedQuotesLine.contains(StringPool.EQUAL)
estimatedLength < 0
Log_OC.d(TAG,"onPause() start")
!url.startsWith("file") && !url.startsWith("/") && !JCUtils.isWifiConnected(getContext())&& !WIFI_TIP_DIALOG_SHOWED
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
assertMockEndpointsSatisfied()
dir.mkdirs()
LOG.d(TAG,"We have a callback to send this result to")
new Paint(Paint.ANTI_ALIAS_FLAG)
new Handler(mMainHandler.getLooper()){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
account.getId()
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
BeanPropertiesUtil.getObjectSilent(model,_keyProperty)
23 * ClassSize.REFERENCE
PRAYER_ENHANCE("prayerenhance","Prayer enhance",275,ChronoUnit.SECONDS)
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
Character.class
DirectoryReader reader=IndexReader.open(dir); 
m.getDeclaringClass()
CythonLanguageDialect._isDisabledFor(node) || MakoLanguage._isDisabledFor(node)
new GitException("Tag " + tagName + " not found. ")
fileChooser.setCurrentDirectory(defaultSelection)
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
stackIterator.remove()
selenium.click("//li[4]/span/a/span")
new Paint()
resolveResult != null
ObjectAnimator.ofFloat(target,ALPHA,INVISIBLE,VISIBLE)
conferenceInfo.appendChild(users)
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
getJSONValue(activity.getExtraData(),"title",kbArticle.getTitle())
onDetachedFromWindows()
hasColumn("Calendar","timeZoneId")
GL20.glGetUniformiv(program,location,params)
Long.parseLong(value)
selenium.isElementPresent("link=Control Panel")
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
child.resetRtlProperties()
mScanHelper.getCycledScanner() != null
selenium.isElementPresent("link=Control Panel")
!standalone
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
new IndexWriter(indexDir,analyzer,create,IndexWriter.MaxFieldLength.LIMITED)
i=0
left + width
host.getHost()
String requestRequiredAcks
imeWin.getFrameLw()
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDh,unrotDw)
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
invalidate(true)
EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT,ProcessExecutor.Option.IS_SILENT)
handleException(error)
mSharedElements.size()
SCAN_STATUS_PARTIAL=1
bindingConfig != null && converterHandler != null
event.getTimestamp() - lastPauseTimeStamp >= 0
logger.trace("Requsting URL {}",url)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
!page.isApproved() && !page.isDraft() && !page.isPending()&& !page.isInTrash()&& !page.isInTrashFolder()&& (page.getVersion() != WikiPageConstants.VERSION_DEFAULT)
mAttributes.getAllFlags()
version.getId()
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP,KEY_SIMPLEPERF_CMD)
logger.debug(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
DataStreamSink<OUT>
mSupportsBearing ? 1 : 0
id=18
new StreamWriterExecOutputHandle(outputStream,true)
LOG.debug("Couldn't delete {} - does not exist",f)
currentTx.concatenate(matrixTx)
mMccStr == null
stringEntry.getValue()
future.get(25,TimeUnit.MILLISECONDS)
assertPlanEquals(expectedPlan,actualPlan)
log.logError(BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"))
hz1.getLifecycleService().shutdown()
case 2: 
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
mObsoleteAgents.remove(info)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Exception e
mVectorState == null || mVectorState.mVPathRenderer == null
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
UserHandle.myUserId()
ModuleReflectionUtils::isCheckstyleTreeWalkerCheck
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
Long.parseLong(args[2])
ListPreference p=(ListPreference)ui.findPreference(UserPreferences.PREF_MEDIA_PLAYER); 
model.getColumn(cell.col)
VDBG=false
new RedissonSession(keyPrefix,id)
!(exception ? throwable instanceof RuntimeException : throwable == null)
wifiConfig == null || wifiConfig.isValid()
(Message)sendApiMethod(sendLocation)
ColorProperties.getColor("controlShadow")
new ObjectMapper().readerFor(defaultInstance().constructCollectionType(List.class,DiskBalancerWorkEntry.class))
Thread.sleep(1000)
mappers.mapper().searchQuoteAnalyzer()
mUiHandler.postDelayed(pae,timeout)
!memoryOnly
selectedPageLabel_.addClassName("selected")
modObjectTable == null || !modObjectTable.contains(modId,name)
notifyItemRangeRemoved(flatPosition,removedCount)
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
spanEvent.getNextSpanId() != -1
applicationStatistics.incrListUserTimes()
Arrays.asList(manageSelectors,mergeDatabaseAction,newSubDatabaseAction,close,save,saveAs,saveSelectedAs,saveSelectedAsPlain,undo,redo,cut,delete,copy,paste,mark,unmark,unmarkAll,editEntry,selectAll,copyKey,copyCiteKey,copyKeyAndTitle,editPreamble,editStrings,toggleGroups,toggleSearch,makeKeyAction,normalSearch,incrementalSearch,replaceAll,importMenu,exportMenu,openPdf,openUrl,openFolder,openFile,openSpires,togglePreview,dupliCheck,highlightAll,highlightAny,newEntryAction,plainTextImport,massSetField,manageKeywords,closeDatabaseAction,switchPreview,integrityCheckAction,autoSetPdf,autoSetPs,toggleHighlightAny,toggleHighlightAll,databaseProperties,abbreviateIso,abbreviateMedline,unabbreviate,exportAll,exportSelected,importCurrent,saveAll,dbConnect,dbExport,focusTable)
/**   * The package controller for the current file. Used for performance optimisation.  */ private ImportControl currentLeaf; 
props.containsKey("log.adapter")
finish()
src.getParent()
@Override public CONTAINER getContainer(){   return container; } 
put.getWriteToWAL()
selenium.isElementPresent("link=Control Panel")
constants.size() != 1
selenium.isElementPresent("link=Control Panel")
UserHandle.myUserId()
ref.getParentObject()
!consumer.endpoint.isAutoAck()
ModelVersion.create(2,0,0)
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0L
region == null || !region.isValid()
note == null || mAddNote
!inRaidChambers || event.isHidden()
logger.debug("condition not met, returning existing state")
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
editor.offsetToVisualPosition(mySelectionStarts[i],true)
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
sslConfig.getBoolean(CONFIG_OF_ENABLE_SERVER_VERIFICATION,true)
mHotspotBounds.set(left,top,right,bottom)
selenium.isElementPresent("link=Control Panel")
Metric<Integer>
getDelegate().getDefaultCipherSuites()
mSharedElements.size()
nextPk()
" firstActiveTime=" + firstActiveTime
onCreateView(context,appWidgetId,appWidget)
mInner.cancel()
selenium.isElementPresent("link=Control Panel")
message.isAsynchronous()
Calendar.getInstance()
getLogger().debug("Building MavenProject instance: " + mavenProject)
audio_st != null && audio_st.metadata() != null
REQUIRED_FREE_SPACE=20_0000_0000L
Optional.ofNullable(privateKeyFile)
order=11
type.getDeclaredConstructor()
mMat[7]
mono.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
new Random()
size <= MAX_SEQ_LENGTH
Object[]
@Nullable
LinkageError e
fileFactory.createFileFromText("dummy.html",HTMLLanguage.INSTANCE,xmlFile.getText(),false,true)
MessageNotifier.updateNotification(context,null,-2)
tracesDir.mkdirs()
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
Stream.of("CYPHER 3.1","CYPHER 3.4")
osmandSettings.setUsingMapVectorData(false)
JBUI.Borders.emptyLeft(8)
AppLog.d(T.EDITOR,cm.message() + " -- From line " + cm.lineNumber()+ " of "+ cm.sourceId())
outLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
fetchSize >= 0
tnext.getValue()
Number rate
createTestBlockCapsule(1533529947843L + 3000L * 8 + 3000L * i,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
serverService.getOutgoingInterceptors()
bucketerContext.update(context.timestamp(),context.currentWatermark(),currentProcessingTime)
DataWeDeployPlugin.class
AndroidInstrumentationInfo instrumentationProvider=instrumentation.get(AndroidInstrumentationInfo.PROVIDER); 
schemeSpecificParts != null && data != null
currencyPair.counter.getCurrencyCode().toUpperCase()
settings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
RowKey.getSaltBytes(salt_bucket)
new RuntimeException()
index < 0 || index >= size
mSyncStatus.valueAt(i)
homeStackInfo == null && activityType == ACTIVITY_TYPE_HOME
new File(value).toPath()
info != null && info.isConnected() == true
suiteXmlBuilder.getMetaClass().getProperty(suiteXmlBuilder,name)
_buildTemplateWithGradle("api","api-dependency-management","--dependency-management-enabled")
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES,UserHandle.getUserId(getCallingUid()))
lp.resolveLayoutDirection(layoutDirection)
responseRaw(p)
incomingMessage.getMessagePayloadByte(1)
logger.debug("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
mDisplay.getRealMetrics(mDisplayMetrics)
invalidate()
factory.getEmbeddedServletContainer()
new MockProjectEx(getTestRootDisposable())
selenium.isElementPresent("link=Control Panel")
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
LOG.error("clear parameter error",ex)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
measureRun(0,0,offset,mLen,true,fmi)
parsed && name.length() > 0
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
FluentIterable.from(method.getAnnotations())
getPlayerPosition().y
origin.realComponent().doubleValue() > other
selenium.isElementPresent("link=Control Panel")
DEBUG=false
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
_connector.getResponse("GET /foo?data=102400 HTTP/1.0\n\n")
sExecutorService.shutdownNow()
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
handler.waitFor(3000)
loaded.getLoaded().getDeclaredConstructor()
!exported
" firstActiveTime=" + firstActiveTime
backgroundOut.getDouble(i,0)
thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_THING_TYPE) || thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_UNSUPPORTED_THING_TYPE)
selenium.isElementPresent("link=Control Panel")
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)
CodeStyleManager.getInstance(myProject).reformatText(file,ranges)
ONE_MINUS_DST_ALPHA(7)
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
selenium.isElementPresent("link=Control Panel")
testNonexistentJarReferences(_netBeansJars,_NETBEANS_PROPERTIES_FILE_NAME)
new UnsupportedOperationException(getClass().getName())
message.getCounterpart().split("/",2)
varX("listener",vclClassNode)
tryRIforRelationshipsPart(m)
selenium.isElementPresent("link=Control Panel")
ESLoggerFactory.getLogger(component)
checkCall(receiver)
InputType.recurrent(convNIn,length)
CacheData<RealmObject>
filesToDownload.size() <= 1
MAX_ITEMS=500
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
event.isTouchFocusCancel() || !calculatePositionAndValue(x,y)
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which),getMobileRadioActiveCount(which),getMobileRadioActiveUnknownTime(which) / 1000)
myJdkChooser.updateList(selectedJdk,null,null)
isFinishing() || (isFinalState(mState) && !mPrintedDocument.isUpdating())
log.warn("Testing warn(msg,null)")
isAccessibilityFocusable()
mucUser.getInvite() != null && ((Message)packet).getType() != Message.Type.ERROR
formatTimeMs(scanWifiLockOnTime / 1000)
bounds.height()
1 << 7
100 * 1000
HBaseUtils.verifyColumns(columns,hTableDesc)
"xml".equals(attrPrefix)
viewerPanel.layout()
close.assertNoSubscribers()
authHeaders == null || authHeaders.size() != 1
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
cursor != null && cursor.getCount() == 0
frag.addElement("status")
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
selenium.isElementPresent("link=Control Panel")
loaded.getLoaded().getDeclaredConstructor()
parser.parseLight(GroovyElementTypes.GROOVY_FILE,builder)
LOG.warn(_request.getRequestURI(),failure)
smsHeader != null && smsHeader.portAddrs != null
FUNCTION4=14
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING,true)
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ ExtendedCell deepClone(); 
packFileName.substring(0,packFileName.length() - settings.atlasExtension.length())
UNSIGNED_BYTE_MAX_VALUE=0xff
i.getLongExtra(Constants.INTENT_KEY,0)
-Math.sin(Math.PI / 8)
assertEvaluate(buildFile).moduleLookup("txts")
logger.trace("Invalid Account Credentials")
authenticator.executeCommandAndAuthenticateIfNecessary(myProject,myRepo,myDestination,"push",arguments,arguments.size() - 1)
node1.isEquivalentToTyped(node2)
!QueryUtils.isEnabled(ctx.config()) && !(qry instanceof ScanQuery) && !(qry instanceof ContinuousQuery)&& !(qry instanceof SpiQuery)&& !(qry instanceof SqlQuery)&& !(qry instanceof SqlFieldsQuery)
SHUTDOWN_VIBRATE_MS > 0 && context != null
end == 0 || end >= mYVals.size()
is2D() && len != 4
Futures.transformAsync(attemptTwoLevelStore(info,output),input -> {   if (input) {     return Futures.immediateFuture(null);   }   return delegate.store(info,output); } ,MoreExecutors.directExecutor())
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new PruneRedundantProjections())
isDailyBuild()
LOGGER.error("Error during file import",e3)
super.getLessThanOrEqualProvider(path)
new Paint()
mPowerManager.isInteractive()
Event.PREFIX_TEMP + i
temporaryFolder.newFolder()
loaded.getLoaded().getDeclaredConstructor()
mImm.getEnabledInputMethodList()
StringBuilder argBuf
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
mAdapter != null && mDataSetObserver != null
states.length >= 3
LinkageError e
notebook.createNote(null)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
Locale.getDefault().toLanguageTag()
new ZLNetworkRequest(url,quietly){   @Override public void handleStream(  InputStream inputStream,  int length) throws IOException, ZLNetworkException {     new OpenSearchXMLReader(getURL(),descriptions).read(inputStream);   } } 
mService.setAppPolicy(UID_A,POLICY_NONE)
parser.getBoolean(KEY_SEND_TRON_LOG,false)
thingGroupItem.getLabel() == null || !thingGroupItem.getLabel().equals(label)
mCurrentDate.get(Calendar.MONTH) != month
probeParentLoaderLast=false
query.getSliceStart()
ddmStructureLocalService.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
tmpHopp.getGraphHopperStorage()
from > to
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
listener != null && mHandler == null
metadata.getColumnLabel(columnNumber)
Thread.sleep(2000)
selenium.isElementPresent("link=Control Panel")
procs.getInt("NULLABLE")
isPlaybackActive(false) || hasFlag(MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY)
popupWindow.setContentWidth(menuWidth)
getPath("InputGenericWhitespaceEndsTheLine.java")
return true; 
stats.facetFilter(standardFilters(range,filter))
selenium.isElementPresent("link=Control Panel")
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
configuration.copy()
PositiveDurationValidator.class
mConnector.execute("volume","format",vol.id,"auto")
new IllegalStateException("Result is already complete: failed")
annotations == null || annotations.isEmpty()
dest.writeTypedArray(remoteInputs,flags)
myNameField.getFocusableComponent()
list.append(ai)
!sameActivity || !sameIntent
new DroolsParserException(e.toString(),e.getCause())
mask.isColumnVectorOrScalar()
popup.requestFocusInWindow()
jscx.initStandardObjects(null,false)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
rsMaxRows > 0 && connection.getDataSource().getInfo().supportsResultSetLimit()
measureRun(0,0,offset,mLen,true,fmi)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
Throwable err
arg1 > arg2
assertEquals(CodecFactory.deflateCodec(6).toString(),write.getCodec().toString())
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
psiPackage.getDirectories(scope)
Thread.sleep(1000)
dynamicType.getDeclaredConstructor()
Character.toUpperCase(ch)
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
assertEquals(7,beanCount)
startActivity(mAdapter.intentForPosition(0))
_closed=true
viewOutlineAlpha=1f
new AgentTemplate(this,true)
SystemClock.uptimeMillis()
new FeatureItem(R.drawable.whats_new_device_credentials,R.string.whats_new_device_credentials_title,R.string.whats_new_device_credentials_content,VERSION_3_3_0,BETA_VERSION_0,SHOW_ON_UPGRADE,false,false)
GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)
Throwable e
bicycleNotDefinedValues.put("bridleway",3d)
nodeInfo.getPlugins().getPluginInfos()
public static IdeaTitledBorder createTitledBorderBoldWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),18,1,new Insets(5,0,10,0)); } 
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
getOldValue()
MongoConnection.getInstance().connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false",null)
info == null || info.transactionStatus == null
fields != null && fields.size() > 0
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
stagingTypeSettingsProperties.toSortedString()
new NameAlias(nameAlias)
Trans != NO_TRANSPOSE
answer == null || comparator.compare(value,answer) > 0
from > to
(1.0f - rawLightValueSun) * 16.0
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
pathname.getName()
selenium.isElementPresent("link=Control Panel")
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
topLevelBuildData.getUserContentRelativePath()
aInfo != null && (aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
destination.length - offset
@Override public void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityException {   Preconditions.checkNotNull(query);   queueLock.lock();   String groupName=groupSelector.getSchedulerGroupName(query);   try {     SchedulerGroup groupContext=getOrCreateGroupContext(groupName);     checkGroupHasCapacity(groupContext);     query.setSchedulerGroupContext(groupContext);     groupContext.addLast(query);     queryReaderCondition.signal();   }   finally {     queueLock.unlock();   } } 
60 * 1000
Object msgObj=messageClass.newInstance(); 
r != null && r.queue == this
topNProjector.finish()
Debug.logv(msg,args)
new IllegalArgumentException("Could not create keystore: " + e.getMessage(),e)
shadowSize <= 0
mEditor.startSelectionActionMode()
TArrays_STRING()
getTupledSet()
canvas.clipPath(mRenderPath)
RowMutation rm=new RowMutation("Keyspace1",dk.key,cf); 
performDexOpt(packageName,instructionSet,false)
applicationContext.close()
selenium.isElementPresent("link=Control Panel")
Locale.getDefault().toLanguageTag()
transform.getValue().getScaleX() != 1f
resolver.acquireUnstableContentProviderClient(uri)
oconf.getJSONObject("lapse").getDouble("mult")
data.length != columnCount
isStringFieldType(field,adminPresentation)
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,403)
i <= size
PhoneNumberUtils.is12Key(number.charAt(i))
handshake.getProtocolVersion()
DLAppServiceUtil.deleteFolder(parentFolder.getFolderId())
Long.parseLong(args[2])
ordinals.size()
Exception e
mMccStr == null
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallbackDeferring(new MetricCB())
javamelodyVersion.compareTo(Parameters.JAVAMELODY_VERSION) > 0
abstract protected MavenPublishAction createDeployTask(File pomFile,LocalMavenRepositoryLocator mavenRepositoryLocator,MavenArtifactRepository artifactRepository); 
Files.deleteIfExists(file.toPath())
row("p_comment",null,7.0,0.0,null,null,null)
new ClassWriter(ClassWriter.COMPUTE_MAXS)
!isVideoScalingModeSupported(mode)
previousPhaseName != null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
(arg & (EventDistributor.DOWNLOAD_QUEUED)) != 0 && feedItemDialog != null
Ports.Binding(11023)
mValues[8]
Long.parseLong(timeString)
selectedPos <= lastPos
NpcDumper dumper=new NpcDumper(cache,out,java); 
"Flow " + flowName + " cannot be found in project "+ projectName
Long.parseLong(attrValue)
selenium.isElementPresent("link=Control Panel")
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
1 << 16
4 * Constants.KB
ps == null || ps.getUserState().get(userId) == null || !ps.getUserState().get(userId).isEnabled(mInstantAppInstallerActivity,0)
Assert.assertEquals(1,results.size())
spellParser.isParsing()
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMillis(request.getStartTime())
mAuthorities.valueAt(i)
selenium.isElementPresent("link=Control Panel")
getActiveFgCall().getPhone().startDtmf(c)
searchHit.getThumbImageURL()
mPlayer.getCurrentPosition() * 1000L
delegate.getBooleanValue("java","skip_checking_missing_deps",true)
treeView.group(empColumn)
mergeConfigs(file,s -> ConfigFactory.parseFile(new File(s)))
SystemProperties.getInstance().getUserHome()
modulePath.split(File.pathSeparator)[0]
jp.getDoubleValue()
executeMethodAndConvertExceptions(httpPost)
!shouldCreateOut() || !DELETE_OUT
wasRead
SCAN_STATUS_COMPLETE=2
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
height - 68
assertEquals(9,stages.size())
maxEntityId >= maxSequenceId
selenium.isElementPresent("link=Control Panel")
response.location()
/**   * Pull transitive native deps in as fully linked standalone shared libraries.  This is typically the fastest build-time link strategy, as it requires no top-level context and therefore can shared build artifacts with all other binaries using this strategy.  */ SEPARATE
mEditor.startSelectionActionMode()
Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
laneOptions[j].equals("slight_left") || laneOptions[j].equals("merge_to_left")
user.isAuthorized("essentials.world." + user.getWorld().getName())
file == null || beforeDir == null || afterDir == null
!commandSent.get() && useKeepAlive && monitorStarted.get()&& !ASYNC_TASKS.isTerminating()
si.targetPermissionUid >= 0 && si.intent != null
clazz.getConstructor(Long.TYPE,Long.TYPE,Long.TYPE,String.class,String.class,String.class)
field.getType().toJavaName()
deadline < now && deadline != 0
compress ? COMPRESS_FLAG_MASK : 0
tokens.getText()
buffer.writeBytes(content,content.readerIndex(),content.readableBytes())
Column c
builder.setView(setupView()).setTitle(R.string.title_sync)
assertEquals(11,definitions.size())
packet.getFrom().split("/",2)
globalSecurityDomain != null && !globalSecurityDomain.isEmpty()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isElementPresent("link=Control Panel")
Long.parseLong(attrValue)
!lan
mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE
initialCapacity > 1 << 30
new DefaultPropertyNamePatternsMatcher(delimiters,"aaa","bbbb","ccccc")
mBackdrop.animate().alpha(0.002f)
List<String>
PoolResources.elastic("tcp-client-pool")
lock.release()
relations.replace(oldName,newTable) == null
new RuntimeException("Error during multilang processing",e)
new Notification(R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
logger.trace("myq ReturnCode: {}",returnCode)
lookup="java:jboss/datasources/ExampleDS"
@Autowired RoutingService routingService; 
private static Factory enhanceHelper(Class cls,Class[] interfaces,final Callback callback,ClassLoader loader,CallbackFilter filter){   Callbacks callbacks=new Callbacks(){     public Callback get(    int type){       return callback;     }   } ;   if (filter == null) {     filter=new SimpleFilter(CallbackUtils.determineType(callback));   }   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
!isVideoScalingModeSupported(mode)
featureNum=123
LOGGER.debug("{} - Reset ({}) on connection {}",poolName,resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
_constructor.newInstance(0,tempFileEntry.getFileEntryId(),tempFileEntry.getFileEntryId() + 1,_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
XContentType.fromMediaTypeOrFormat(values[0])
new LeftTuple(f1,sink)
CacheFactory.setMaxLifetimeProperty(getName(),maxLifetime)
logger.warn("Timeout occured when executing commandLine '" + commandLine + "'",e)
mImm.showStatusIconInternal(mToken,getPackageName(),iconResId)
audioSink.getId()
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
deserialze(parser,type,fieldName,0)
tl.set(paint,mText,start,end,dir,directions,hasTabs,tabStops)
calleeAddress + ": jingle supported "
ServiceMonitorAdvice.isActive()
id=10836
new GermanWordSplitter(false)
!async || error
E edge
Foundation.log("[info] " + tag + ": "+ message)
selenium.isElementPresent("link=Control Panel")
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
Math.min(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
user.isAuthorized("essentials.world." + user.getWorld().getName())
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR)
new Alarm(this)
tiClus.setText(STRING_CLUSTERS)
combineHostPort=true
_buildTemplateWithGradle("portlet-toolbar-contributor","contributor-dependency-management","--dependency-management-enabled")
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
public static final EclipseLinkTemplates DEFAULT=new EclipseLinkTemplates(); 
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)
new ObjectMapper().readerFor(List.class)
_typeSettingsProperties.toSortedString()
c.getName()
assertEquals(1,failures.size())
getSongProgressMillis() > 5000
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
keyCode == KeyEvent.VK_ALT || keyCode == 0
queueLength.asString()
inputRowMeta != null && !inputRowMeta.isEmpty()
hasColumn("KBTemplate","engineType")
DiagnosticType.warning("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
new ThreadPool(getClass().getName())
new HashMap<>(queryMemoryRevocableReservations)
message.setText(getDialogMessage())
value == null || exclude(keys[i])
newArrayList(5)
mValues[8]
ctx != null && ctx != 0
obj.getRequiredTokens()
transform(matrix,source,width,height,true,recycle)
new MMUnlockHandler(this)
selenium.isElementPresent("link=Control Panel")
LOG.debug("Value selected for the metric should be a number: " + context)
(CustomEditText)findViewById(R.id.hostUrlInput)
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static DecodedJWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
Throwable e
preferences.get("cityAdminLevel","8")
XMLInputFactory::newInstance
addTexture(normal,"NormalMap",keyName)
clickListener == null
selenium.isElementPresent("link=Control Panel")
Stream.of("CYPHER 3.1","CYPHER 3.4")
runnable.getResult() != null && !treeViewer.getTree().isDisposed()
ImmutableList<SourceFile>
type.getDeclaredConstructor()
new Whitelist().addTags("a","b","blockquote","br","caption","cite","code","col","colgroup","dd","div","dl","dt","em","h1","h2","h3","h4","h5","h6","i","img","li","ol","p","pre","q","small","span","strike","strong","sub","sup","table","tbody","td","tfoot","th","thead","tr","u","ul")
getEffectiveHstsEnforced()
RandomStringUtils.randomAscii(20)
return mDisappearingDelay; 
defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
-TimeZone.getDefault().getOffset(actualTime.getTime())
defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
ServiceLoader.load(DockerCmdExecFactory.class,classLoader)
new Paint()
new SIPCommCheckBox()
depthError("modelX")
kryo.readObject(input,JobID.class)
MAX_PERCENT_DIFFERENCE=0.3
remaining == 0
RegexFilteringInterceptor.class
new BlockFamilyRegistryImpl()
Thread.sleep(500)
requestRender()
PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,true)
id=16510
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity",connection.getSinkChannel())
!MediaFile.isAudioFileType(fileType) && !MediaFile.isVideoFileType(fileType) && !MediaFile.isImageFileType(fileType)&& !MediaFile.isPlayListFileType(fileType)&& !MediaFile.isDrmFileType(fileType)
ArraySet<UidRange>
measureRun(0,0,offset,mLen,false,fmi)
distFromStart
JavaLibrary mavenCoord=new JavaLibraryBuilder(BuildTargetFactory.newInstance("//has:output"),filesystem,HashCode.fromString("aaaa")).setMavenCoords("com.example:buck:1.0").addDep(z.getBuildTarget()).build(graphBuilder); 
AssertionError.class
BackgroundTask.wrap(() -> renderPage(initialPage))
Results.xml()
srcDir != sourceRoot && sourceRoot != null
referencedDomainClass.getFullName()
log.info(error,cause)
nextPos < mBoundPos
metadata.addHaving((Predicate)null)
MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || (name != null && name.startsWith(AopConfigration.IOCNAME))|| AopConfigration.class.isAssignableFrom(type)|| Modifier.isAbstract(type.getModifiers())
newSelection >= 0 && newSelection < rowElements.length
300 * 1000L
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0 && mInstaller != null
portlet.getRootPortletId()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
XmppStringUtils.parseBareJid(key)
fn.isPrivate()
selenium.isElementPresent("link=Control Panel")
new AddSubscriptionCmd(destination,channelId)
configurationPair.getKey()
deleteAction.delete(destination)
mAdapter != null && mDataSetObserver != null
from("seda:a").delayer(1000)
Integer.parseInt(attrValue)
Long.class
result.getReceipt().getEnergyUsageTotal()
display.getRealMetrics(dm)
telephony.getNeighboringCellInfo(mContext.getOpPackageName())
realm.checkIfValid()
mService.saveConfiguration()
drawable != mBackgroundDrawable || mBackgroundResource != 0
new TextPaint()
kbArticleVersion.setPriority(priority)
Number rate
case 1: 
VerboseTimeout.builder().withTimeout(1000,TimeUnit.SECONDS)
ActorSDK.sharedActor().style.getTextPrimaryInvColor()
GL20.glGetShaderiv(shader,pname,params)
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,sdk,port)
assertEquals(2,preIndex.get())
isNavBarVirtKey && !down && !canceled
realm.checkIfValid()
HashMapDB<byte[]>
mGesturesPopup != null && mGesturesPopup.isShowing()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
onDetachedFromWindows()
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
Arrays.asList(new HashSet(),new LinkedHashSet())
e.toString()
IOConverter.toString(out,null)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
maximumGridSize=512
Arrays.asList(Errors.UNKNOWN_TOPIC_OR_PARTITION)
ev.getAction() == MotionEvent.ACTION_DOWN || mDetector.onTouchEvent(ev)
settings.setTextSize(WebSettings.TextSize.SMALLEST)
new IllegalStateException("Test IllegalStateException")
drawable != mBackgroundDrawable || mBackgroundResource != 0
curTime == 0 || totalTime / curTime == curOps
_jsonWebServiceServiceAction.getJSON(null,mockHttpServletRequest,mockHttpServletResponse)
detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)
final ColumnFamilyDescriptor hcd=htd.getColumnFamily(familyName); 
List<Library>
new Paint()
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.20f)
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
new ArrayList<>(0)
location.getExtent()
tile.getUrn().getModuleName()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
order.isCurrent() || order.isFuture()
win.isDrawnLw() || win.hasAppShownWindows()
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.CLAIMED,"AAAAA","BALO")
context.getProjectCompileScope()
value >= 0
Byte.parseByte(param.getValue())
value == null || clazz.isAssignableFrom(value.getClass())
enabled=true
Thread.sleep(1000)
parser.getBoolean(KEY_ANIMATION_DISABLED,false)
FLAG_USE_MAGNIFIER=true
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
selenium.isElementPresent("link=Control Panel")
Log_OC.d(TAG,"Got to start sync")
cls.getDeclaredMethods()
TimeUnit.SECONDS.toMillis(4)
Path tempClusterPath=tempPath.toAbsolutePath(); 
createArtifactSpec("a","1.0")
selenium.isElementPresent("link=Control Panel")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
JacksonMessageBodyProvider.class
PetiteReferenceType[]
frequencyKhz <= 30000
public EnglishPorterFilter create(TokenStream input){   return new EnglishPorterFilter(input,protectedWords); } 
Arrays.asList("4.0","3.8.2","3.8.1","RELEASE","LATEST")
mPowerManager.isInteractive()
type.getDeclaredConstructor()
type.getDeclaredConstructor()
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
caller.isSystem()
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
assertOpenEventually(latch)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
appearance.getInt(attr,0)
InputMethodManager.getInstance()
e == null
dataTypeName.replaceFirst("\\s*\\{.*","")
pk.getColumnNameInSql()
String message
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
realm.checkIfValid()
-3
classFile.matcher(file.getName()).matches()
TestSuiteEnvironment.getServerAddressNode1()
pod.setName(expectedId)
timeoutMs < 1000
e.toString()
QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
paramValue == null || paramValue.isEmpty()
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),true)
times(1)
new Setting<>("repositories.s3.access_key",CLOUD_S3.KEY_SETTING,Function.identity(),Property.NodeScope,Property.Filtered)
WordPress.getCurrentBlog().getLocalTableBlogId()
type.getName()
toolchainInfo != null
Math.abs(delta_loss)
node.getStarNode()
ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
conceptAnswer.getAnswerConcept()
@UriParam
line >= 0 && file != null
new IncrementalIndexSegment(rtIndex,null)
entry.getType()
LOG.warn(msg)
private Text wDirectory; 
Double.valueOf(value)
(pluginId == item.pluginId) && alert.equals(item.alert) && uri.equalsIgnoreCase(item.uri)&& param.equalsIgnoreCase(item.param)&& otherInfo.equalsIgnoreCase(item.otherInfo)
Long.parseLong(subSecs)
origin.realComponent().doubleValue() > other
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).onErrorResume(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
Iterator<Integer>
BackupManagerServiceInterface svc=mService; 
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
selenium.isElementPresent("link=Control Panel")
mDisplay.getRealMetrics(mDisplayMetrics)
constraintSystem.hasOnlyExpectedTypeMismatch() || constraintSystem.hasConflictingConstraints()
state.value == rotationLocked && state.contentDescription != null
public static LayoutFriendlyURLSeparatorComposite getLayoutFriendlyURLSeparatorComposite(long groupId,boolean privateLayout,String friendlyURL,Map<String,String[]> params,Map<String,Object> requestContext) throws PortalException {   return getPortal().getLayoutFriendlyURLSeparatorComposite(groupId,privateLayout,friendlyURL,params,requestContext); } 
setupFillPaint(paint,opacity)
loaded.getLoaded().getDeclaredConstructor()
(dispatcherMapping & ERROR) != 0
(filterMap.getDispatcherMapping() & FilterMap.ASYNC) != 0
number.longValue()
Integer.parseInt(tokens[3])
sr.getLastStartId()
args.size() > error.first && error.second != null
getWebElement(locator,timeout)
new AlertDialog.Builder(getActivity(),R.style.Theme_ownCloud_Dialog)
LOG.info("Unable to parse HTTP response content",e)
OperatorGroupBy<K,T>
new ObjectMapper().readerFor(DiskBalancerCluster.class)
mObsoleteAgents.valueAt(i)
loaded.getLoaded().getDeclaredConstructor()
conf.getKernelSize()
keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
getDelegate().getDefaultCipherSuites()
LOGGER.warn("Warning: could not get " + idForErrorMessage + " translation for \""+ key+ "\" for locale "+ Locale.getDefault())
element.getLocalName()
externalChargeItem.getDescription()
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategyManager()
Long.parseLong(val)
e.getPresentation().setEnabledAndVisible(enabled(project,log,details))
Element.F64_2(mRS)
final XmlElementDescriptor xmlElementDescriptor=createElementDescriptor(tag); 
name != null && name.length() > 2
InputMethodManager.getInstance()
Observable.defer(() -> sync.update(mangaSync))
mSyncStatus.valueAt(i)
ParamUtil.getBoolean(actionRequest,"publish")
mCollapseOffset > 0
mPowerManager.isInteractive()
transform(matrix,source,width,height,true,recycle)
AndroidResourceUtil.findResourceFieldsForValueResource((XmlTag)element,true)
callbackList.getBroadcastCookie(i)
!ON_TOP
transform(matrix,source,width,height,true,recycle)
solo.clickOnText(solo.getString(R.string.settings_label))
settings.setTextSize(WebSettings.TextSize.LARGER)
c == '\\' && i + 1 < cursor
message.getConversation()
a.getLayoutDimension(R.styleable.BootstrapButton_android_layout_width,0)
target.addTaskAndWakeup(task)
(Number)_aggregationResultList.get(i)
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,true,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
Long chatId
Trans != NO_TRANSPOSE
isReturnGeneratedKeys() || isReturnGeneratedKeys() && generatedKey.isPresent()
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
selenium.isElementPresent("link=Control Panel")
JenkinsResultsParserUtil.combine("Unable to rebase ",targetBranch.getName()," to ",sourceBranch.getName(),"\n",executionResult.getStandardErr())
possibleCenters.removeElementAt(i)
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f)
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound("SPDY")
xml.optAttribute("name",name)
private final CompoundShelfFileProcessor myFileProcessor; 
createDouble(buffer.length(),init)
commentsListView.setSelection(0)
SslContextFactory.getDisabledTrustManager()
position.set(0,0,mRight - mLeft,mBottom - mTop)
encoded & 0xFFFF_FFFFL
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFileOrDirectory()
LOG.warn("Temporary Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the temporary data directory: " + tmpDirPath + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space - resetting to maximum available " + dirFreeSpace / (1024 * 1024) + " mb.")
config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)
statistics.addPutTimeNanos(System.nanoTime() - start)
/**   * Run the stemmer against all strings in voc.txt The output should be the same as the string in output.txt  */ public void testPorterStemFilter() throws Exception {   Tokenizer tokenizer=new KeywordTokenizer(new StringReader(""));   TokenStream filter=new PorterStemFilter(tokenizer);   ZipFile zipFile=new ZipFile(new File(getClass().getResource("porterTestData.zip").getFile()));   InputStream voc=zipFile.getInputStream(zipFile.getEntry("voc.txt"));   InputStream out=zipFile.getInputStream(zipFile.getEntry("output.txt"));   BufferedReader vocReader=new BufferedReader(new InputStreamReader(voc,"UTF-8"));   BufferedReader outputReader=new BufferedReader(new InputStreamReader(out,"UTF-8"));   String inputWord=null;   while ((inputWord=vocReader.readLine()) != null) {     String expectedWord=outputReader.readLine();     assertNotNull(expectedWord);     tokenizer.reset(new StringReader(inputWord));     filter.reset();     assertTokenStreamContents(filter,new String[]{expectedWord});   }   vocReader.close();   outputReader.close();   zipFile.close(); } 
klass.getDeclaredFieldsUnchecked(false,declaredFields)
loaded.getLoaded().getDeclaredConstructor()
compressed.limit()
Slog.i(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
String message
this.cusolverDnSsyevd.invoke(null,solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
ImmutableList.copyOf(modules)
lowers != null
(Item)this
sSoundPaths.containsKey(mQa) && mNextToPlay < sSoundPaths.get(mQa).size()
initializationData != null && initializationData.size() > 0
mDisplay.getRealMetrics(mDisplayMetrics)
databaseFile.getName()
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(hardLinkFile)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent|| !mPipManager.isPipShown()
count=10
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_configuration,_templateContextHelper,false)
engine.getCurrentHeatValue()
newExecutionInput().query(parameters.getQuery())
fileSpecs.size() > 0
randomIntAbs(VALID_CHARS.length)
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",false,"Stop DBeaver running instance")
Math.min(m,s.size())
GenericAttributeValue<Boolean>
context.revertReloadRequired()
mAuthorities.valueAt(i)
viewGroup == null || viewGroup.getChildCount() == 0
quantaRemaining >= quantaPerBlock
setUnknownLabels(collapsedUnary,mainLabel)
mask.length()
returnTypeCache == null || !(returnTypeCache instanceof ResolvedJavaType)
transactionalMap.set(key,value)
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadString.Null"))
DescriptorRenderer.TEXT.renderTypeWithShortNames(getActualParameterType(descriptor))
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
pkgs.get(j)
expression == null || primaryIndexes.size() > indexes.size()
jid.split("/",2)
this.recipients.getPrimaryRecipient() != null && this.recipients.getPrimaryRecipient().getName() != null
Throwable ex
ActorSDK.sharedActor().style.getTextPrimaryInvColor()
mRecyclerView.smoothScrollBy(hScroll,vScroll)
useQuartz=false
mQSPanel != null && mQSPanel.getHost() != null
Assert.assertEquals("Unexpected number of Unusable hosts found count.",5,rule.clientMetrics.getFoundUnusableHosts().count())
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
Response.ok(null,MediaType.TEXT_PLAIN)
logger.fine("reconnect success")
logger.info("Starting Jetty Azkaban Executor...")
isGreaterOrEqual(platformVersion,M)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
mf.verifyMessages(2,false,false)
GL20.glGetUniformfv(program,location,params)
Character[]
telephony.isRinging(getOpPackageName())
CharSequence text
TEST_DATA_SIZE=2516
new ThreadPoolExecutor(0,Integer.MAX_VALUE,10,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new ThreadFactory(){   public Thread newThread(  Runnable runnable){     Thread thread=new Thread(runnable,name);     thread.setDaemon(daemon);     thread.setPriority(priority);     return thread;   } } )
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
-2
Exception e
IllegalDataException.class
out.writeInt(length())
PartitionColumnsSeparator.class
!mShowLockscreenNotifications
order=13
swapTempFile.delete()
TEST_UTIL.getAdmin()
dest.writeInt(mSubId)
this.doIntrospect(interfaces,matchedInterfaces)
testLogger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
selenium.click("//li[4]/span/a/span")
new Rect(left,top,right,bottom)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
graphModel.isMixed()
mPanProfile.isProfileReady()
entry.getValue()
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(true)
selenium.isElementPresent("link=Control Panel")
(a & 0xe0) == 0xc0
gradleProject.getProjectIdentifier()
jobsLogs.jobsLog()
motherTongue.getShortName()
logger.fine(String.format("sending ack %s",args))
GL11.glTexParameteriv(target,pname,params)
certificate(certURL,password,certType,port,new NoKeystoreSpecImpl())
Assert.assertEquals("Message key '" + retrievedMessage + "' is not valid","unable.open.cause",retrievedMessage)
mClipboard != null && mClipboard.getText() != null && mClipboard.getText().length() != 0
pMotionEvent.getY(1)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
Throwable e
columnsCount >= limit
FullScreenOverdrawActivity.class
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
host.setHeaderView(mExpandIndicator)
window.activate(null,false,false)
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
imageWidth / images.size()
4 * Bytes.SIZEOF_LONG
new RuntimeException("Unable to load lock file",e)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setId(POINT_ADD_GPX_WAYPOINT)
KaleoDefinitionLocalServiceUtil.incrementKaleoDefinition(definition,kaleoDefinition.getName(),StringUtil.randomString(),_serviceContext)
Throwable e
shadowSize <= 0
amenity.getName(preferredLanguage)
Integer.parseInt(topStr)
frameHandler.getClass() != FrameAggregator.class
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
hasRows("SyncDLObject")
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
emptyView != null && emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
path.getPath()
file.getPath()
super.reopen()
this(name,type,length,null,true); 
checkCall(receiver)
StringBuilder sb=new StringBuilder(); 
new String(payload,"UTF-8")
DefaultAlluxioWorker.class
Class.forName(contextClassName)
s == null || s.length() == 0
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)
storedHash == null || TextUtils.isEmpty(credential)
deprecated.getActiveRules(true)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
new LeftTuple(new DefaultFactHandle(1,"cheese"),null)
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
binding.getKey().getTypeLiteral().getRawType()
zip(srcPath,zipPath,false)
/**   * counter-clockwise   */ CCW(1)
Thread.sleep(300)
imageView.setImageDrawable(drawable)
String.format(Locale.ROOT," [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
genericParameterType.getSort()
GenericsUtil.eliminateWildcards(psiType,false)
HighlightInfo.newHighlightInfo(type).range(refElement).descriptionAndTooltip(message)
Number rate
groupMetaCache.get(key)
mappers.mapper().searchQuoteAnalyzer()
mUiHandler.postDelayed(pae,timeout)
groupingSets.isEmpty()
hasColumn("KBArticle","kbTemplateId")
KotlinBuiltIns.getInstance().isExactFunctionOrExtensionFunctionType(type)
return result; 
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws IOException {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
mView.postOnAnimation(mAnimationStarter)
pos >= 0
new WxMpMassGroupMessageGsonAdapter()
Throwable ex
audioSink.getId()
logger.trace("Error while matching regex [" + matcher.toLowerCase() + "] for string ["+ matched.toLowerCase()+ "] "+ pse.getMessage())
(ExpiringCell)cell
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
proxyServer != null && !isSecure(uri)
stopServer()
value == null && properties != null
selenium.isElementPresent("link=Control Panel")
8 * data.length
latch.await(25,TimeUnit.SECONDS)
assertEquals(5,carEncoder.getSpeed(iter.getFlags()))
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
!isBottomRightVisible
logger.error("connectionClosedOnError " + exception.getLocalizedMessage(),exception)
DummyObject t
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",LONG)
getExitCode() != 0 || isTimeout()
this.decoder.decode(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
searcher.get().getRawReader()
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
new AndFilter(fromRoomFilter,MessageWithSubjectFilter.INSTANCE,new NotFilter(MessageTypeFilter.ERROR))
new SafeTextModel(value,Mode.none)
new Paint()
new IllegalArgumentException("Could not lookup jndi name: " + namespaceStrippedJndiName + " in context: "+ jndiContext,ne)
selenium.isElementPresent("link=Control Panel")
token.substring(0,p).trim().toLowerCase(Locale.US)
new Location(importStack.peek().getResource(),metadata)
ret=false
id.provider != null && id.provider.info != null
BIG_ENOUGH_INT + 0.99999999
this.keycloakSession.users().getServiceAccount(clientSession.getClient())
position + dockDividerWidth
body.invoke(_super(),onDetachedFromWindowMethod)
!allowPrivate.isNull()
mSyncStatus.valueAt(i)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
Integer.parseInt(value)
GL11.glGetTexParameteriv(target,pname,params)
possibleCenters.removeElementAt(i)
!value.iterator().hasNext()
sTestCaseCounter == 0
getJSONValue(activity.getExtraData(),"title",kbTemplate.getTitle())
LOG.info("Staging files complete: {} files cached, {} files newly uploaded",numCached.get(),numUploaded.get())
mAppToken.isVisible()
factory.terminateAll()
log.info("Reset to factory defaults : onNextDropped")
mRemote.transact(START_ACTIVITY_WITH_CONFIG_TRANSACTION,data,reply,0)
(prop.getModifiers() & ACC_FINAL) == 0
setDisabledIcon(ic)
poList[2]
city.getId()
List<IItem>
/**   * Create reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonReactiveClient createReactive(){   Config config=new Config();   config.useSingleServer().setAddress("127.0.0.1:6379");   return create(config); } 
mSyncStatus.valueAt(i)
supplement(self,aggregate)
selenium.isElementPresent("link=Control Panel")
mAdapter != null && mDataSetObserver != null
context.getMainLooper()
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).executeUpdateDelete(wrapper)
@Nullable JComponent label
privObj.getObjectName().equals("masking_test") || privObj.getObjectName().startsWith("masking_test_n")
assertViolations(result,0,2)
createLightFile("Test.java","class Test extends Type<A, B, C, D> {\n}")
Map<String,Object>
((WithNode)node).getNestedStatement()
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
new IndexWriter(directory,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
SYNC_OK=0
r.getRequest(true)
id=16512
usingDrawingCache
index >= capacity()
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,false)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
c.close()
mViewModel.getNewsDataSource()
mBiometricUnlock.stop()
c.content().readSlice(CONTENT_LENGTH)
assertEquals(265L,response.rowCount())
activeFrom.getTime()
text.length() - 1
drawable != mBackgroundDrawable || mBackgroundResource != 0
System.currentTimeMillis()
Optional<CacheEntry>
Arrays.asList("dn1","dn2","dn3","dn4")
PathUtils.getTestDir(getClass()).getPath()
MakeGLMModelHandler.oneHot(fr,interactions,useAll,standardize,false,skipMissing)
restRequestData.params.getPostBody()
SERVICELOG.warn("Async error occurred: " + e,e)
logger.error("NODE {}: DeleteReturnRoute command failed.",nodeId)
getter.getType()
new ImportControl(stack.peek(),name,regex)
private final DomAnchor myParent; 
reportsE.appendChild(reportE)
Thread.sleep(500)
str.chomp19(context)
return true; 
sto * 1000L
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
TelephonyManager.getDefault().getCurrentPhoneType()
executeJobExecutorForTime(10000,200)
@NotNull Object value
selenium.isElementPresent("link=Control Panel")
value.startsWith("npm WARN ") || value.startsWith("warning ")
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
Exception e
String message
LOGGER.trace("Cache expiration duration after updates is set to [{}]",currentDuration)
dragNode.isNodeDescendant(target)
mObsoleteAgents.valueAt(i)
new IndexWriter(dir2,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
@NotNull @Override public abstract ClassDescriptor getDeclarationDescriptor(); 
new DeadCodeEliminationPhase(Optional)
Preconditions.checkNotNull(path,"path")
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE
this.controller.saveService(data)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
selenium.isElementPresent("link=Control Panel")
TopNCondition.isTopNHostCondition(metricNames,hostnames) ^ TopNCondition.isTopNMetricCondition(metricNames,hostnames)
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
apacheHttpClient.sendRequest(httpRequest,false)
TAP_TIMEOUT=300
Class.forName("java.lang.invoke.CallSite",false,ClassLoader.getSystemClassLoader())
new Error("failure")
buffer.toByteArray()
@Override public CDATA setText(String str){   throw ImmutableElement.immutableError(this); } 
analysis.getType(windowFunction)
type.getDeclaredConstructor()
closeDeclarationWithCommentBinders(getterOrSetter,PROPERTY_ACCESSOR,true)
tableCache.getObject(monitor,this,childName)
baseAt(i).getFile().getAbsolutePath()
ValueNode guard
"could not execute request: " + request
127 + (USE_OLD_HISTORY ? 1000 : 0)
Character.isLetterOrDigit(c)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
isPut(request)
!myStates.containsKey(project)
bareNumber.length()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
buffer.limit()
System.err.printf("\"%s\" #%d%n",thread.getName(),thread.getId())
Thread.sleep(100)
dynamicClassType.getDeclaredConstructor()
manager.disable(keyId)
index < mInUseLocks.length()
setImageDrawable(icon,false)
new SimpleType(subclass,_bindings,this,_superInterfaces,_valueHandler,_typeHandler,_asStatic)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/classObjectMethod.kt")
BindingResource.class
Foobar item
i >= BY_DYE_DATA.length
Float.parseFloat(strings[i])
addRegionStateToPut(putB,RegionState.State.CLOSED)
Maps.newLinkedHashMap(valueArguments)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
trimmedLine.contains(delimiter)
plugin.getKey()
scorecard.getUseReasonCodes()
optionsOverride.getLambdaRole()
mSettings.writeRuntimePermissionsForUserLPr(userId,false)
1024 * 10
a.getDimensionPixelSize(attr,DEFAULT_MIN_WIDTH)
selenium.isElementPresent("link=Control Panel")
layoutTypePortlet.getAllPortlets()
final ClientState clientState=(ClientState)msg.obj; 
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,false,"getAppStandbyBucket",null)
c <= 'Z'
ColorProperties.getColor("splitPaneDeviderFocused")
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
HashBiMap.create(7)
mService.saveConfiguration(mContext.getOpPackageName())
mJobs.valueAt(i)
shortComment.lastIndexOf(')')
new OnDemandJobScheduler(false)
assertEquals(4,response.getHits().size())
Math.min(titleRight,subtitleRight)
ContactModel::getSkypeSn
memoryReservation.addAndGet(bytes)
stmt.execute(sqlCommand)
!isExpired(timestamp)
return true; 
inputChars == null
dy == 0
selenium.isElementPresent("link=Control Panel")
Stream.of("CYPHER 3.1","CYPHER 3.4")
left.getFieldName().equalsIgnoreCase(right.getFieldName())
componentTree == null || componentTree.isReleased()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name)
request.getPrincipal()
GL20.glUniform1fv(location,v)
intellijProject == null || intellijProject.isDisposed()
DirectoryReader r2=DirectoryReader.openIfChanged(r); 
components.contains(examplesMenu)
onDetachedFromWindow()
super.performAccessibilityActionInternal(action,arguments)
stripFilter.skipWhiteSpace(charBuffer,stringWriter,true)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
/**   * {@inheritDoc}  */ public Integer get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
hasColumn(oldTableName,"description")
Slog.w(TAG,"Session failed to close due to remote exception",e)
loaded.getLoaded().getDeclaredConstructor()
logger.warn("{}",general)
!msbuild.exists()
selenium.isElementPresent("link=Control Panel")
getInstantiator().newInstance(DefaultDistribution.class,name,fileResolver)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
new DefaultSensorContext(mock(InputModule.class),settings.asConfig(),settings,fs,activeRules,analysisMode,sensorStorage,runtime)
assertThat(captor.getValue()).containsExactly("joe@mydomain.eu","joe")
(switchValues & SW_CAMERA_LENS_COVER_BIT) != 0
ModalityState.stateForComponent(getRootPane())
any(Object.class)
USE_DISPLAY_LIST_PROPERTIES=false
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).subscriberContext(withUser)
item instanceof IItem
i == MAX_ATTEMPTS
TelephonyManager.getDefault().getCurrentPhoneType()
getServiceForUserLocked(userId)
localNodeData.dcLocalAddress.getHostAddress()
PropertiesComponent.getInstance(project).getBoolean(UPDATE_STATE_ENABLED,false)
retriever.getFrameAtTime(-1)
Log_OC.d(TAG,"onCreateView")
!getDatabaseTypeEnvironment().isEnabled() || !isExecuted()
routerChain.notifyFullInvokers(invokers,getUrl())
end + " End Message Interceptor"
dest.writeInt(mSubId)
? extends TypeDescription
new FtrlDelta(true,alpha)
type.mediaType()
sr.isForeground || sr.fgRequired
IllegalArgumentException e
isEmptyOrSpaces(s)
process.getErrorStream()
this.encoding == null || this.encoding.isNil()
DefaultFileMetadata.directory()
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
logger.debug("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
checkCall(receiver)
memoryCacheScreens >= 0
mBiometricUnlock.stop()
setValue(object,value.intValue())
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public boolean onContextMenuClick(  ArrayAdapter<?> adapter,  int itemId,  int pos,  boolean isChecked){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }     return true;   } } ).position(16)
Optional.ofNullable(BuckAddDependencyIntention.create(referenceElement,psiClass))
message.isDiscussion()
!cached && addFiltered && node.isFiltered()
e.toString()
int retries() default 2; 
IDAUTHORITY_RETRY_COUNT_DEFAULT=20
localBroker.oneway(sub.getLocalInfo())
viewable=true
selenium.isElementPresent("link=Control Panel")
removeFlagForThreadsFromCache(account,ids,flag)
assertThat(context).getBeans(HandlerMapping.class).hasSize(5)
countNewlines(headerFragment + lhsFragment + thenFragment) + 1
typeAddrPair.getTypeReferenceField().getTypeDescriptor()
methodNode != null && closureExpression == null
LOGGER.error("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
mTrustListeners.remove(i)
Slog.w(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
Throwable e
DatabaseDescriptor.getRangeRpcTimeout()
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,15)
Preconditions.checkNotNull(object,"object")
GridGgfsTestUtils.jsonToMap(primaryIpcEndpointConfiguration(gridName))
Helpers.exec(j4p,"setProfileBundles(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
imageResOnLoading != 0
Exporter::getName
myIpythonInputPromptCount=1
mock.expectedMinimumMessageCount(10)
log.debug("Performing lookup: %s --> %s",nodeIds,retVal)
GridCacheDataStructuresProxy.class
presence.getFrom()
PRESSED_STATE_DURATION=64
this.settings.analyzeWildcard(analyzeWildcard)
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
selenium.isElementPresent("link=Control Panel")
configuration.copy()
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING,UserHandle.of(userId))
case GET_VERSION: 
mWM.removeViewImmediate(mView)
dest.writeInt(mSubId)
StringBuilder sb=new StringBuilder(); 
database instanceof AbstractDb2Database
status().isSeeOther()
LOG.info(e)
spellParser.isParsing()
!fr.isExists()
GraalInternalError.unimplemented(MetaUtil.format("direct call to %H.%n(%p)",callTarget.target()))
dest.writeTypedArray(remoteInputs,flags)
Assert.assertEquals(2,mergedDDMFormFieldValues.size())
binaryResultsDirectory.getAsFile().getOrNull()
type == TYPE_PUBLIC && !isVisible()
appearance.getFloat(attr,0)
logger.debug(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
NUM_TOUCHES=20
Long.parseLong(subSecs)
Integer.parseInt(taskIdStr)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
Throwable e
dir.listFiles(fileFilter)
currentDetails.getStorage().get(key)
!mQuietEnable
new Dimension(800,200)
type.isEmpty()
initializationData != null && initializationData.size() > 0
IndexReader.open(dir)
return availableVideoEncodings; 
ArrayInjectorTest.class
new BasicDBObject("version",1L)
new AnnotationTransactionAttributeSource(false)
mAttributes.getAllFlags()
response.getBytes(Charset.defaultCharset())
log.error(e1.getMessage(),e1)
CHECKIN_VERSION=30
heartbeatIntervalSeconds < 0
b.getTypeByte()
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new AuthenticationException("Error validating LDAP user",e)
Collections.emptyList()
update.getName()
/**   * Reason of replication pause.   */ private volatile GridDrStatus pause; 
size * 1.8f
cs[0].set(r,(int)(rng.nextDouble() * _createFrame.response_factors))
setDiskPersistent(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
WordPress.getCurrentBlog().getLocalTableBlogId()
underlying.next(num)
delaySoFar >= mReEnableDelayMillis
Thread.sleep(1000)
EvaluationResult<SkyValue>
mState.value || Prefs.getBoolean(mContext,Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN,false)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new TransactionBroadcast(peerGroup,blockChain.getContext(),tx)
id=49
PsiElement scope=context.getScope(); 
artifacts.size()
new ReflectionsException("could not create class object from file " + file.getRelativePath(),e)
new Paint()
lhs == null || !lhs.isValid()
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
hasDefaultConstructor(superClass,true)
new StringBuilder(253)
(1.0f - rawLightValueSun) * 16.0
JavaFile.fromRelativePath(sourceRelativePath,false).getDeprecatedKey()
assertNotNull(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
mAccessibilityController.isAccessibilityEnabled()
assertQEx("unknown sort field",req("id_i:1000; abcde12345 asc"),400)
configureReadBufferForWrite()
this.constraints.updateFromFactHandle(workingMemory,handle)
list.append(ai)
300 * 1000L
metadata.getFaceRectangles()
SAMPLE_RATE_HZ_MAX=96000
mResolver.start()
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
TelephonyManager.getDefault().getCurrentPhoneType()
findChildByType(PyElementTypes.TARGET_EXPRESSION)
request.getContextPath()
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
index >= 0
final T view
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
LOG.error("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
final Throwable e
executor.execute(new EmailTask(messages))
name.substring(i + 1)
i + randomIntBetween(2,10)
layerInput.size(0)
realm.checkIfValid()
port >= 65536
/**   * {@inheritDoc}   */ @Override public AbstractProperty clone(){   try {     AbstractProperty prop=(AbstractProperty)super.clone();     prop.name=name;     prop.runningVersion=runningVersion;     return prop;   }  catch (  CloneNotSupportedException e) {     throw new AssertionError(e);   } } 
ENABLED.set(false)
new DefaultPropertyNamePatternsMatcher(delimiters,"aaa","bbbb","ccccc")
FSImageFormatPBINode.class
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive(),true)
col2d.addiColumnVector(epsilon1d)
lastFailureException instanceof SocketTimeoutException
3 * 60 * 1000L
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L)
myFixture.getAllQuickFixes("struts-action-method.xml")
subCursor.getString(COLUMN_NAME)
ImmutableSet.of("~key","~value","~id","~nid","~label","~adjacent","~timestamp","~ttl","~visibility","key","vertex","edge","element","property","label","~T$VertexExists","~T$SchemaName","~T$SchemaDefinitionProperty","~T$SchemaCategory","~T$SchemaDefinitionDescription","~T$SchemaUpdateTimestamp","~T$SchemaRelated","~T$VertexLabel")
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX,true)
epi.initialise(ei,boi,engine,true,false)
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
clickListener == null
selenium.isElementPresent("link=Control Panel")
SDK_INT >= JELLY_BEAN && SDK_INT <= LOLLIPOP_MR1
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
path.endsWith(".js") || path.endsWith(".json")
mMccStr == null
retries=1
new File(myConfig.getScriptName())
new UnsupportedOperationException(getClass().getName())
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)
new SpannedString(first,true)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
makeTypeWithArguments(rightNode)
patch.getPath()
new JSyntaxTextArea(10,50)
copticDate.dayOfMonth()
g.cachesx()
LinkageError|Exception
batteryVp > low
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
mHandle != null
type.getName()
startNextLoop.setSelected(true)
r2.getName()
new GridException("Failed to deserialize task attributes [taskName=" + req.getTaskName() + ", taskClsName="+ req.getTaskClassName()+ ", codeVer="+ req.getUserVersion()+ ", taskClsLdr="+ dep.classLoader()+ ']',e)
DEBUG=false
authentication.has(USERS)
logger.trace("Adding PropertySource: " + source + " in group: "+ basename)
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER || mBrowserType == MediaBrowserType.SITE_ICON_PICKER
mValues[8]
i < 5
builder.and(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
nonPersistent.tryAddMessageLast(node,wait)
getTelecomService().silenceRinger(mContext.getOpPackageName())
appearance.getFloat(attr,0)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
totalHits.value > 0 && totalHits.relation != TotalHits.Relation.EQUAL_TO
origin.realComponent().doubleValue() > other
stream.getProperty(NettyClientStream.class)
m.getDeclaringClass()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
owner != null && originalElement != null
refreshRotationLockTile()
ChannelBuffers.buffer(2)
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
Pair<Type,Accessor>
end + " End Message Interceptor"
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
Bytes.toBytes(tableOrRegionName)
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
id=22
buffer.putInt(nextMarker + 4,0)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
rand.nextInt(gap)
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadString.Null"))
project.isDisposed() || !file.isValid()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).subscriberContext(withUser)
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).getSeconds()
op == ASSIGN || op == ASSIGNMENT_OPERATOR
new RMNodeImpl(nodeId,rmContext,null,0,0,null,null)
SamplingProfiler.newThreadGroupThreadSet(group)
addStringValuesProperty("struts.objectFactory.spring.autoWire","name","type","auto","constructor","no")
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
update.getName()
selenium.isElementPresent("link=Control Panel")
FileChannel.open(indexFile.toPath(),CREATE,READ,WRITE)
v.getContext().startActivityAsUser(intent,UserHandle.CURRENT)
qualifiedName(node)
flipZ=1
object instanceof RegexEngineBuilder
UpgradeStepRegistrator.class
needRefresh=true
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
isReturnGeneratedKeys() || isReturnGeneratedKeys() && generatedKey.isPresent()
RowKey.prefixKeyWithSalt(key)
serversByLoad.firstKey()
DEBUG=false
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).onErrorResume(exceptionHandler)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,false)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
callback.onPulseFinished()
new AssertionError("failed to walk file tree starting at [" + shardLoc.toPath() + "]",e)
Theme.fromJSONV1_2(object)
privObj.getObjectName().equals("masking_test_subq") || privObj.getObjectName().startsWith("masking_test_subq_n")
mInterpolator == null || mNativePtr == null
currentMode == MODE_PULL_DOWN_TO_REFRESH
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
mUiHandler.postDelayed(pae,timeout)
logger.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
"set responseContext to be" + resContext
LAST_VERSION=941
getCutoffText(RECENTLY_PLAYED_CUTOFF,context)
Integer.parseInt(tupleValue)
Assert.assertEquals(101200L,ret.getFee())
new RuntimeException(e)
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
ultimateRecyclerView.setDefaultOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
accountHandle.getComponentName().flattenToString()
new PaymentApiException(e,ErrorCode.PAYMENT_GET_PAYMENT_METHODS,paymentMethodModelDao.getAccountId(),paymentMethodModelDao.getId())
concatRef.isEightBits=true
mMipmap=true
STATE_OPENED_WITH_KEYS=4
Preconditions.checkState(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
currLine < mPrevLine
holder.getListener().onCaptureSequenceAborted(CameraDeviceImpl.this,requestId,lastFrameNumber)
return mIdleTimeMillis; 
tok[3]
i > 0
SAMPLE_RATE_3D_VERT=8
createFromResourceStream(null,null,is,srcName,null)
CharSequence url
String fullfillmentMethod
arg1 > arg2
List<MediaDescription>
LOG.debug(" job " + job.getName() + " completed ")
info.crashInfo.stackTrace.length() > 30000
origin < other
mMccStr == null
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
Map<String,Type>
FastMath.min(origin,num.floatValue())
DEBUG=false
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
catalog.countEntries()
((Cell)atom).localCopy(HeapAllocator.instance)
rhs.getScore()
isChild() || !window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
obtainMessage(MSG_TIMEOUT,state,0)
logger.fine(String.format("destroying socket (%s)",this.nsp))
selenium.isElementPresent("link=Control Panel")
depthError("modelX")
TelephonyManager.getDefault().getCurrentPhoneType()
ViewCompat.getScaleY(itemView)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION,false)
tracesDir.mkdirs()
listener.onStatus(new StatusJSONImpl(json))
timeSinceEarliestUnpaidInvoiceEqualsOrExceeds == null
logger.info("Failed to register block {} - no id",block)
StringBuilder buf=new StringBuilder(); 
CacheProjection<K,V>
left.getRowLength()
BigInteger.valueOf(13)
Ordered.LOWEST_PRECEDENCE - 5
mColumn + (x - 0.5f) * 4 + 1.25f
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
"System property " + LEGACY_SSTABLE_PROP + " not set"
clearFromMember.join()
Long.parseLong(timeout)
mAppToken.isVisible()
new IllegalStateException("Result is already complete: succeeded")
context != null && redirectUri == null
three.setAxisIndex(LEAF)
activity == null || activity.isFinishing()
mSyncStatus.valueAt(i)
assertEquals(56,StringUtil.countMatches(drl,"rule \""))
GROUP_IDLE_TIME_S=25
resource.terminate(input.getId(),extractorId)
timeNanos >= DateTimeUtils.NANOS_PER_DAY
specification != null
JSInheritanceUtil.iterateMethodsDown((JSFunction)element,new Processor<JSFunction>(){   @Override public synchronized boolean process(  final JSFunction jsFunction){     allRenames.put(jsFunction,newName);     return true;   } } ,true)
ftm.associateExtension(StdFileTypes.XML,RNG_EXT)
profilesXml.isFile()
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
type.toLowerCase(ENGLISH)
adapter != null && getMyApplication() != null && getActivity() != null
populateUi()
getConnectTimeout()
toArrayHelper(array,0)
notifyAll()
solrDocument2.getFieldNames()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
new LwjglPreferences(name,".prefs/")
collection.setOnScrollListener(onScrollListener)
TokenSet.create(PyTokenTypes.OR_KEYWORD,PyTokenTypes.AND_KEYWORD,PyTokenTypes.LT,PyTokenTypes.GT,PyTokenTypes.OR,PyTokenTypes.XOR,PyTokenTypes.AND,PyTokenTypes.LTLT,PyTokenTypes.GTGT,PyTokenTypes.EQEQ,PyTokenTypes.GE,PyTokenTypes.LE,PyTokenTypes.NE,PyTokenTypes.NE_OLD,PyTokenTypes.IN_KEYWORD,PyTokenTypes.IS_KEYWORD,PyTokenTypes.NOT_KEYWORD,PyTokenTypes.PLUS,PyTokenTypes.MINUS,PyTokenTypes.MULT,PyTokenTypes.FLOORDIV,PyTokenTypes.DIV,PyTokenTypes.PERC,PyTokenTypes.EXP)
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
!_javaSource && (_lineTabLevel == 1) && _line.matches("^\\s*<.*")
hasColumn("KBTemplate","cacheable")
state.value == rotationLocked && state.contentDescription != null
Integer.parseInt(attrValue)
/**   */ class SctpClientPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
i < 10000
selenium.isElementPresent("link=Control Panel")
RowMutation rm=new RowMutation("Keyspace1",dk.key,cf); 
a.getDimension(attr,0)
context.getProject().isDisposed() || aptItem.myModule.isDisposed()
between != null && tile.wireManager.getColorOfPart(between.parts[0]) != null
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
type.getDeclaredConstructor()
assertEquals(4,builder.getErrors().getErrors().length)
log.debug(sm.getString("aprListener.sslInit"),t)
MessagingService.instance().sendRR(message,destination,responseHandler,true)
v.startDrag(clip,thumb,false)
selenium.isElementPresent("link=Control Panel")
DbConnectionManager.close(gstmt,con)
Slog.e(TAG,sb.toString())
mPowerManager.isInteractive()
ConfigurableFactory.Companion.getInstance().getTodoConfigurable(project)
checkpointPath.toString()
List<Fragment>
System.nanoTime()
getDegreesFromXY(x,y,true)
PsiTreeUtil.getParentOfType(anchor,PyParameter.class,PyDecorator.class)
Log.e(TAG,"This will become an error",ex)
zoneId.equals("+00:00") || zoneId.equals("-00:00")
mContext.sendBroadcast(intent)
return 0; 
new BigInteger(1,Hex.decode("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))
mQsDensityContainer.getX()
current > 0 && text.charAt(current) == '\n'
stripFilter.skipWhiteSpace(charBuffer,stringWriter,true)
getServiceForUserLocked(userId)
proxy.getHost()
checkCall(receiver)
mUiHandler.removeCallbacks(pae)
mAppOpsManager.noteOpNoThrow(opCode,uid,packageName)
createExpandMacroMap(moduleSettings).substitute(path,true)
KotlinBuiltIns.getInstance().isExactFunctionOrExtensionFunctionType(type)
config.getMaxEntriesLocalHeap()
klass.getDeclaredFieldsUnchecked(false,declaredFields)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),100,50)
ldapContexts.put(getThreadName(),ctx)
selenium.isElementPresent("link=Control Panel")
ThreadPoolDownloadService.makeIntent(getContext(),mHandler,Options.TEST_URI)
userGroupMember.getUserGroupId()
memOffsetData.intValueSafe()
rep.saveJobEntryAttribute(id_job,getID(),"success_condition",getSuccessConditionCode(successCondition))
typeName.contains("CHAR") || typeName.contains("char")
!rxJavaAvailble
StatList.getObjectUseStats(itemstack.getItem())
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
EMERGENCY_ASSISTANCE_ENABLED=true
selenium.isElementPresent("link=Control Panel")
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED)
regUser * trusteeWeightValue * trusteeFactorValue* trusteeFactorValue
new ProtoFile("exotic.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
t.getCause()
fragmentEntryPersistence.countByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
!thread.isParamsChanged()
return mInitialized; 
RuntimeException.class
c == Character.class || c == Character.TYPE
VersionedFlowsEntity.class
new FileNotFoundException(getURL() == null ? "null" : getURL().toString())
Integer.parseInt(attrValue)
j--
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
engine.execute(query).dumpToString()
Long.parseLong(deadline)
point.getName()
Gdx.input.getX(i)
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24))
InsertReturningStep<R>
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
lastToken.contentType == contentType && info == lastToken.getHyperlinkInfo()
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
tests.add(0,clazz.getGenericsTypes()[0].getType())
new IllegalStateException()
new Paint(Paint.ANTI_ALIAS_FLAG)
simpleQueryString("spaghetti").field("body",1000.0f)
UpgradeStepRegistrator.class
Slog.d(TAG,"Unable to bind FLP Geofence proxy.")
id=12
metaData.getColumnLabel(1)
mMat[5]
param.size(0)
/**   * {@link Builder#delete(Tree)}   */ public static SuggestedFix delete(Tree node){   return builder().delete(node).build(); } 
source.isNodeDescendant(target)
new ArrayList<>(0)
ColorRGBA.White.mult(0.02f)
selenium.isElementPresent("link=Control Panel")
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
!war.startsWith("file:")
MAX_PERCENT_DIFFERENCE=0.3
server.getClass()
overlayPackage.isStaticOverlay || mDefaultOverlays.contains(overlayPackage.packageName)
startActivity(in)
intervalFraction * (nextValue - prevValue)
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
IllegalArgumentException.class
ColumnFamilyInputFormat.class
expect(cluster.getClusterName()).andReturn("cluster").times(1)
status == BackupConstants.TRANSPORT_OK
CompletableFuture<Void>
target.getDestinationLinkAddress()
type == null || type.equalsIgnoreCase("text/css") == true
Response.ok()
memoryCachePercent / 100f
mFrustum.update(mTmpMatrix)
parser.nextText()
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
logger.trace(evt.getReason())
max_ordinal=85
getTestName(true)
selenium.isElementPresent("link=Control Panel")
1
getLayoutRec(position,getFixedPosition(data),length,getFixedFitLength(data))
setY((mWidth > 0) ? (mPosition * mWidth) : 0)
logger.warn("{}",builder)
id=19
labelCursor == null
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
payload.writeBytes((byte[])each)
serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable() && peer.getState().equals(CallPeerState.INCOMING_CALL)
jsonObject.get(ERROR_KEY).toString()
LOG.debug("Registered pre-upgrade check {}",upgradeCheck.getClass())
LOGGER.isDebugEnabled()
numAttributes < expectedItemCount
casProperties.getMonitor().getEndpoints().getSingleSignOnStatus()
className.getClassName()
!v2.isSupportedBy(v1)
TransitiveInfoCollectionApi.class
listener.iterationDone(cg,iterationCount,epochCount)
new Notification(R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
logger.finest("Optimized Selector: " + selector.getClass().getName())
Long.valueOf(value)
testModules("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)
mPadding != -1
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,false,userId)
LOGGER.error("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).onErrorResume(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
PATH_ITERATIONS * 10
getConfiguration(config)
selenium.isElementPresent("link=Control Panel")
mBluetoothLock.readLock().unlock()
Exception e
Math.max(leftLen,rightLen)
@NotNull
id=44
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
o.toString().getBytes(response.getCharacterEncoding())
fileEntry == null || fileEntry.getSize() == 0
stts.readInt()
scheduler.getTriggerState(trigger.getName(),trigger.getGroup()) == Trigger.STATE_PAUSED
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
buffersReadyFlyweight.bufferLength(index,TERM_META_DATA_LENGTH)
provideArguments(',',"foo","bar","").toArray()
copy1DRangeFromUnchecked(0,mType.getCount(),i)
width - originX
position < 0
clist.clearUserDefinedDisplayName(metaContact)
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final HttpClient getClient(){   return getClient(connectionTimeout); } 
MethodHandles.dropArguments(cacheLookup,1,type.parameterList().subList(1,type.parameterCount()))
NB_CACHED_PARAMS=10
onDetachedFromWindow()
isFinishing() || (isFinalState(mState) && !mPrintedDocument.isUpdating())
MUCActivator.getAlertUIService().showAlertPopup(resources.getI18NString("service.gui.ERROR"),errorMessage)
config.swapChase()
!mapReader.getRegionNames().isEmpty() || mapReader.isBasemap()
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
new GitException("Remote " + remoteName + " not found. ")
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,1,mUserId)
getTestName(true)
new Fetcher(conf).fetch(segment,threads,Fetcher.isParsing(conf))
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
new JobMeta(space,(space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,metaStore,null)
Log.e(TAG,"This will become an error",ex)
Utils.intNow(1000)
Throwable e
!buckdEnabled
List<TaggedWord>
r.getKey()
@Override public final DivideByOnConditionStep orNot(Condition c){   return or(c.not()); } 
getService().animateCollapseNotifications()
result.length() > 14
selenium.isElementPresent("link=Control Panel")
originalLanguage != null && metaObject != null
canPerformRequestOverConnection(mParentAccessibilityViewId)
new WrappedEpoxyModelClickListener(this,clickListener)
InputType.recurrent(convNIn,length)
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
@Override public SyncSession create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
grid(i).events().localListen(new IgnitePredicate<Event>(){   @Override public boolean apply(  Event evt){     if (nodeId.equals(((DiscoveryEvent)evt).eventNode().id()))     latch.countDown();     return true;   } } ,EVT_NODE_LEFT,EVT_NODE_FAILED)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,1)
instanceOfA.profile() != null && instanceOfA.profile().getNullSeen() != TriState.FALSE
Nd4j.createUninitializedDetached(shape)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
OAuthConstants.HAWK_TOKEN_TYPE.equalsIgnoreCase(tokenType)
@Test public void testPutOutOfCapacity() throws OutOfCapacityException {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(MultiLevelPriorityQueue.MAX_PENDING_PER_GROUP_KEY,2);   ResourceManager rm=new UnboundedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   groupFactory.groupMap.get(groupOne).addReservedThreads(rm.getTableThreadsHardLimit());   queue.put(createQueryRequest(groupOne,metrics));   assertTrue(true);   try {     queue.put(createQueryRequest(groupOne,metrics));   }  catch (  OutOfCapacityError e) {     assertTrue(true);     return;   }   assertTrue(false); } 
_typeSettingsProperties.toSortedString()
Slog.w(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
onDetachedFromWindows()
new InternalTestCluster(randomLong(),1,1,tribeClusterName,tribeSettingsSource,0,false,CHILD_JVM_ID,TRIBE_CLUSTER_NODE_PREFIX)
viewHolder.getItemViewType() == TYPE_EDIT || viewHolder.getItemViewType() == TYPE_DIVIDER
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").filterSize(5,1,2,2).nIn(4).nOut(3).batchSize(batchSize).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(2).backward(true).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(new int[]{9}).override(1,new ClassifierOverride(1))
range.getTo()
state == AsyncState.STARTING || state == AsyncState.TIMING_OUT || state == AsyncState.ERROR
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
new V(8,new BooleanSetting(true))
LocalFileSystem.getInstance().findFileByIoFile(file)
a instanceof OutputFileObject || b instanceof OutputFileObject
VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)
context.getSourcePathResolver().getAbsolutePath(resDir)
a.willChangeBounds()
service.asBinder().pingBinder()
width - originX
Response.ok(null,MediaType.TEXT_PLAIN)
from >= to
callElement.getText()
message == null || message.length <= MAC_LENGTH
jdk == null || !(jdk.getSdkType() instanceof IdeaJdk)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,methodHandleLoaded))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
context.getMainLooper()
mentionsListView.setSelection(0)
Map<String,Object>
Thread.sleep(1000)
context.currentSynchronizedProcessingTime()
ImmutableMap.of(storeName,mutations)
assertTrue(dr.isFailure())
!mIsWatch && mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
stackIterator.remove()
powerQuery[i] == 0.0d && internalNextPower[i] > 0
ph.setTimeStampUsers(usersFile.lastModified())
List<InternalTransactionPojo>
Long.parseLong(attrValue)
Slog.w(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
currentMedia.getLocalPostId() == 0 && MediaUploadState.fromString(currentMedia.getUploadState()) == MediaUploadState.UPLOADED
Integer.parseInt(displayIdStr)
LocalFileSystem.getInstance().findFileByIoFile(file)
Throwable err
line.startsWith(StringPool.TAB + "private abstract class ") || line.startsWith(StringPool.TAB + "private class ") || line.startsWith(StringPool.TAB + "private enum ")
platformVersion < M
new EmoteClue("Cheer in the Shadow dungeon. Equip a rune crossbow, climbing boots and any mitre.",ENTRANCE_OF_THE_CAVE_OF_DAMIS,new WorldPoint(2629,5071,0),CHEER,any("Any mitre",item(GUTHIX_MITRE),item(SARADOMIN_MITRE),item(ZAMORAK_MITRE),item(ANCIENT_MITRE),item(BANDOS_MITRE),item(ARMADYL_MITRE)),item(RUNE_CROSSBOW),item(CLIMBING_BOOTS),item(RING_OF_VISIBILITY))
status.isDir()
i > 0
view.getContext().getOpPackageName()
getLogger().warn("Unknown classloader [CCE]: " + e.getMessage())
new byte[17]
backtrack(ans,comb,k,i + 1,n - i)
killBillClient.createExternalCharges(externalCharges,clock.getUTCToday(),false,true,createdBy,reason,comment)
request.timeout()
new ThingUID(WEMO_MOTION_TYPE_UID,device.getDetails().getSerialNumber())
fdm.getCachedDocument(file) != null
assertOrderCount("ds1",1L)
assertPlanEquals(expectedPlan,actualPlan)
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
selenium.isElementPresent("link=Control Panel")
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
msbFragmentEntry.getMsbFragmentEntryId()
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
getSegments().length - 1
thisJob._state != JobState.CANCELLED
tfoi.setSpecifyingFormat(wSpecifyFormat.getSelection())
fileLock != null && fileLock.isValid()
member.getType()
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
loaded.getLoaded().getDeclaredConstructor()
shell.evaluate(script.toString(),source)
viewable=true
ContainerUtil.getFirstItem(expressions)
new RaftMessages.HeartbeatResponse(state.myself())
getStageWithServerAction(1,977,payload,"test",1200)
updateRotation(0)
LOGGER.fine(e.toString())
isChild() || !window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new Semaphore(0)
nameOfClass.equals("com.android.internal.policy.impl.PhoneWindow$DecorView") || nameOfClass.equals("com.android.internal.policy.impl.MultiPhoneWindow$MultiPhoneDecorView") || nameOfClass.equals("com.android.internal.policy.PhoneWindow$DecorView")
loaded.getLoaded().getDeclaredConstructor()
getTestName(false)
public StandardTokenizer create(Reader input){   return new StandardTokenizer(input); } 
from > to
endOfArguments() || loopCount >= getEndIndex()
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsRead")
this.keycloakSession.users().getServiceAccount(clientModel)
Integer.parseInt(options.getMaxKeys())
out.writeFloat((Float)obj)
compressed.limit()
isBetween(10500,12000,alt.getDistance())
equalTo(9)
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
1
info.getGroupIdLevel1ForSubscriber(subId,mContext.getOpPackageName())
websocketComponent.setMaxThreads(20)
enums.size()
simple.getFromReceivedDate()
mUiHandler.postDelayed(pae,timeout)
GroovyExpectedTypesProvider.getDefaultExpectedTypes(list)
verify(client).atomicIncrement((AtomicIncrementRequest)any())
Double.valueOf(parser.group(index++)) / 600000
_freemarkerEngineConfiguration.resourceModificationCheck()
urlStr.startsWith("file:") || urlStr.startsWith("jndi:") || urlStr.startsWith("http:")|| urlStr.startsWith("https:")
selenium.isElementPresent("link=Control Panel")
LocalFileSystem.getInstance().findFileByIoFile(file)
info.getType() & 0xf
selenium.isElementPresent("link=Control Panel")
new CacheConfiguration<>(DEFAULT_CACHE_NAME)
removeUser != UserHandle.USER_ALL
log.debug("Error extracting parameters meta data",e)
Exception e
versionNum <= maxRevision
conversation.getContactJid().split("/",2)
selenium.isElementPresent("link=Control Panel")
JZVideoPlayer.onScrollAutoTiny(view,firstVisibleItem,visibleItemCount,totalItemCount)
Key.create("_java_compiler_usage_stats_")
pane.setPreferredSize(new Dimension(300,80))
mMenu.getNonActionItems()
this.parseAsArray(url,"events")
mStartActivity.task == null || mStartActivity.task == parent
tokens.next().expect(Token.IDENTIFIER,'{',"::")
!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null
toIntervalStartEpochMs(epochMs) + queryDelayMs + NEXT_TASK_DELAY_MS
mValues[8]
ConcurrentHashMap<String,Presence>
end >= range.getStartOffset()
mv.visitInsn(DUP)
ArraySet<UidRange>
LOG.isDebugEnabled()
model.getColumn(cell.col)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
Boolean.parseBoolean(getOptional("kylin.query.convert-create-table-to-with","false"))
a.getLocalName()
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
dist <= bestdist
wifiConfig == null || wifiConfig.isValid()
engine.refresh("test")
weekRange.add(Calendar.DATE,6)
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
i >= 0
TypeConversionUtil.areTypesConvertible(actualType,targetType)
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null,false)
new Location(importStack.peek().getResource(),metadata)
type.getDeclaredConstructor()
new LinkedHashSet<>(0)
consumeToken(b,IDENTIFIER)
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
new ObjectMapper().readerFor(Map.class)
line.split(" *= *",2)
assertPlanEquals(expectedPlan,actualPlan)
new IllegalArgumentException(JSON_BUILDER + "invalid element")
mEntryValues[which]
mView.postOnAnimation(mAnimationStarter)
partialUri.toLowerCase()
Simple.forClass(String.class)
p.containsKey("gt06.timezone")
julLogger.severe("Hello world")
assertEquals(1,resultList.size())
selenium.isElementPresent("link=Control Panel")
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
LinkageError e
LOGGER.debug("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
settings.readLPw(null,0,false)
mFrameTransformation.printShortString(pw)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
MessagingService.instance().sendOneWay(message,destination)
new VariableExpression(apiInstanceProperty,implementationNode)
ENABLED.set(false)
uploadRequest.getFileAsStream(fieldNameValue,true)
wsdlLocation != null && wsdlLocation.length() > 0
CharSequence url
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
((ContainerLifeCycle)contextHandler).addManaged(clientContainer)
volume.getMtpReserveSpace() * 1024L * 1024L
new IndexWriter(d,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
ev.mDataSamples.length >= ND
StringBuilder sb=new StringBuilder(); 
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,createdBy,reason,comment)
var(b) > 1e-6
ChronicleEngineEndpoint endpoint
!calledSetTotal
child.getMeasuredWidth()
this.deliveryDelay >= 0
AllocatableValue delta
new ProcessRuntimeImpl(repositoryService,processDefinitionConverter,runtimeService,securityPoliciesManager,processInstanceConverter,variableInstanceConverter,configuration,eventPublisher)
mNotificationManager.cancel(NOTIFICATION_TAG,SystemMessage.NOTE_TV_PIP)
new File(JMETER_INSTALLATION_DIRECTORY,"bin" + File.separator + "log4j.conf")
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
isShortcutProxyActivity(stubIntent)
Thread.sleep(1000)
LOG.debug("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
ScanResult.is5GHz(frequency)
LOGGER.trace(exception.apply().toString())
new EditSessionBlockChangeDelegate(editSession)
updateChildren()
toRemove != null
cache5.setColors(red)
mUserPaddingStart >= 0
origin < other
callVideoButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
hasRows(newTableName)
assertThat(o.takeNext()).isNotNull()
new SdkListCellRenderer("<Project Default>",myInterpreterComboBox.getRenderer())
mValues[8]
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
m.nclasses()
(float)getMax() / 20
log.info("Hooking new default : onOperator")
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
wrapper != null && wrapper.root != null
TextUtils.isEmpty(realPath)
near.getAndRemove(1)
driverPropertySource.getPropertiesWithDefaults()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
JmsSendReceiveWithMessageExpirationTest.class
T
IDAUTHORITY_RETRY_COUNT_DEFAULT=20
new UnsupportedOperationException("Image format " + format + " is not supported")
framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)
return mChangingAppearingDelay; 
(lo + hi) >>> 1
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
visitStatement(node,context)
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
sublistsIndices.keySet().stream()
storeProperty(propertyNode,pexp,current,visitor,receiver.getData())
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.MOBILE_DATA_ALWAYS_ON,1)
fdoProvider.getFdoMode() != FdoMode.OFF || fdoProvider.getPrefetchHintsArtifact() != null
pGLState.loadModelViewGLMatrixIdentity()
deadline < now && deadline != 0
mail.getClass().getSimpleName()
selenium.isElementPresent("link=Control Panel")
Assert.fail(String.format("Expected file %s being deleted but it was not.",filePath))
configList == null || configList.size() == 0
getFirstByType(type)
Map.class
specHeightMode == MeasureSpec.EXACTLY || specHeightMode == MeasureSpec.AT_MOST
mService.factoryReset()
clusterProperties.getMaxRedirects()
zipInspector.assertFileDoesNotExist("assets/secondary-program-dex-jars/metadata.txt")
new GroupTest(true)
printType(out,type)
mUiHandler.removeCallbacks(pae)
LOGGER.error("Wrong client secret for service {}",service)
currentJBUIScale()
logger.info(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
Integer.parseInt(taskIdStr)
module == null || module.isDisposed()
dynamicType.getLoaded().getDeclaredConstructor()
keychainLock.unlock()
stall_till_cloudsize(1)
return _repositoryConfiguration; 
origin.realComponent().doubleValue() < other
entry.getCiteKeyOptional()
thumbData != null && exifThumbWidth >= fullThumbWidth
editor.isDirty()
LOG.warn("I/O error when running rpc",e)
FlinkKafkaProducer011.class
labels.size(0)
writer.flush()
return false; 
ClassDirectoryBinarySpec.class
new ServerSparseIntRow(rowId,startCol,endCol,0)
Jar jar=addTaskBuildWSDLJar(buildWSDLTask,inputFile,compileTask,generateTask); 
final ProtocolCommand cmd
Numeric.toHexStringWithPrefixSafe(filterId)
TestShardRouting.newShardRouting(index,0,"_node_id",null,null,true,state,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
GitLocalBranch currentBranch=repository.getCurrentBranch(); 
Log.e(TAG,"This will become an error",ex)
AWAKE_INTERVAL_DEFAULT_MS=10000
/**   * {@inheritDoc}  */ public Integer getTo(){   return Integer.valueOf(to); } 
new IocException("_mirror_factory_init",e,"Mirror Factory init fail")
sep < 0 || sep > j
public String getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
"select actionId from ResourceAction where name = '" + newName + "'"
public Player mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Player player=new Player();   player.setID(fs.readString("ID"));   player.setLastName(fs.readString("lastName"));   player.setFirstName(fs.readString("firstName"));   player.setPosition(fs.readString("position"));   player.setDebutYear(fs.readInt("debutYear"));   player.setBirthYear(fs.readInt("birthYear"));   return player; } 
public Order mapLine(FieldSet fieldSet,int lineNum){   Order order=new Order();   order.setOrderId(fieldSet.readLong(ORDER_ID_COLUMN));   order.setOrderDate(fieldSet.readDate(ORDER_DATE_COLUMN));   return order; } 
rc != null && rc.zoom == tileBox.getZoom()
FBUtilities.getBroadcastAddress()
order.getDosingInstructions()
10 * 1000000L
service.getAdnUriForPhoneAccount(accountHandle,mContext.getOpPackageName())
selenium.isElementPresent("link=Control Panel")
new Paint()
status == BackupConstants.TRANSPORT_OK
cls != null && cls.isValid()
primitiveType == GL10.GL_POINTS
setValue(object,value.intValue())
!(exception ? throwable instanceof RuntimeException : throwable == null)
menu.hasSelectedMenus()
super.writeExternal(element)
Integer.parseInt(this.getOptional("kylin.restclient.connection.default-max-per-route","20"))
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
activeEditor.checkModified(true)
hostName == null
writePermission.intern()
callback.onPulseFinished()
selenium.isElementPresent("link=Control Panel")
configList == null || configList.size() == 0
strongClassCache.putIfAbsent(beanClass,results)
Integer.toHexString(flags)
final LongAdder8 cnt=new LongAdder8(); 
assertLength(1,builder.getErrors())
return true; 
new RedisTimeoutException("Command execution timeout for " + command + " with params "+ Arrays.toString(params))
new ColorUIResource(0x356936)
i % dictionarySize
JDBCUtils.safeGetLong(dbResult,"time")
new OutputStreamWriter(clientStream,"utf-8")
!value.isNull()
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
_typeSettingsProperties.toSortedString()
hasColumn("CalendarBooking","vEventUid")
Assert.fail("Known issue https://github.com/eclipse/che/issues/8031",ex)
mouse().pressAt(0,0)
((OfflineProblemDescriptorNode)node).isQuickFixAppliedFromView()
1 << 8
!container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
new Volume.MemoryVol(true,0)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
assertEquals("Size of " + r,1,r.size())
sampler.getFilename()
dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
GithubNotifications.showErrorDialog(myPane,"Login Failure","Can't login: " + GithubUtil.getErrorTextFromException(ex))
jid.getContent().split("/",2)
options.removeUnusedVars || options.removeUnusedLocalVars
DataStreamSink<OUT>
TypeResolver.resolve(channelTypeUID,locale)
Thread.interrupted()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new IndexWriter(dir,anlzr,false,IndexWriter.MaxFieldLength.LIMITED)
mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL && mCheckedItemCount > 0
FastMath.min(origin,num.doubleValue())
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
Number value=iterator.next(); 
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
lock.isHeldByCurrentThread()
refreshRotationLockTile()
@Alive({REG,ILLEGAL})
setY((mWidth > 0) ? (mPosition * mWidth) : 0)
enSearch.executeQuery()
wrapper.joinWithTimeout()
mAuthorities.valueAt(i)
mPositionAnimator.isStarted()
log.debug("Unrecognized Oracle client version at " + oraHome)
type.getDeclaredConstructor()
!newDefaultSubIdObj.equals(mDefaultSubId)
-1061516338
synchronized (this) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
"Using bind address: " + bindAddress
lock.isHeldByCurrentThread()
loaded.getLoaded().getDeclaredConstructor()
theClass.getConstructor()
case 10: 
selenium.isElementPresent("link=Control Panel")
!mKey.equals(other.mKey)
entry.notification.cloneLight()
insertedElement instanceof PsiPlainText || insertedElement instanceof PsiComment
IllegalStateException.class
subjectAlternativeNameIps != null
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
mAuthorities.valueAt(i)
Math.min(size,layoutParams.height)
BUKKIT_VERSION=2352
FORCE_LOGGING=false
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
reason != null && !UploadService.hasInProgressMediaUploadsForPost(post)
createFromResourceStream(res,value,is,srcName,null)
/**   * {@inheritDoc}  */ @Override public LongProperty clone(){   LongProperty prop=(LongProperty)super.clone();   prop.value=value;   return prop; } 
sourceHeight > 0
Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
ScanResult.is5GHz(frequency)
nioGroup.shutdownGracefully(0,10,TimeUnit.SECONDS)
((ExecutorService)executor).isTerminated()
items[24]
onNoteSaved(noteTmp)
markerArray.get(0)
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true,false)
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Exception e
-1321767651
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
new ToolWindow.Border(false,false,false,false)
new FormAttachment(100,0)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
Thread.sleep(1000)
Long.parseLong(args[2])
return false; 
!match && compareRecover
testReliable=false
type == VolumeInfo.TYPE_PUBLIC && mountUserId == UserHandle.myUserId()
Float.parseFloat(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
log.debug("munlocking " + file + " with length "+ length)
this.cli.jar("secure.groovy","data-jpa.groovy")
context.var("double",2)
!hasOnClickListeners()
i < 11
mFirebaseRemoteConfig.fetch(cacheExpiration).addOnCompleteListener(this,new OnCompleteListener<Void>(){   @Override public void onComplete(  @NonNull Task<Void> task){     if (task.isSuccessful()) {       Toast.makeText(MainActivity.this,"Fetch Succeeded",Toast.LENGTH_SHORT).show();       mFirebaseRemoteConfig.activateFetched();     }  else {       Toast.makeText(MainActivity.this,"Fetch Failed",Toast.LENGTH_SHORT).show();     }     displayPrice();   } } )
!c.conflictExists()
ViewBuilder.class
OverrideResolver.generateOverridesInFunctionGroup(propertyName,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
bundlesMap.getBundle(module)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
localScale.multLocal(scale)
typeSerializer.getDeserializedType()
LOG.info(title + "; " + message)
Throwable e
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
filters={StringFilterAggregator.class}
id=22
new StringBuilder(638)
forced == null || con.getListener().isForceDefault()
imeWin.getFrameLw()
retry.attempt()
atLeast(10)
context.getPackageManager().queryIntentActivitiesAsUser(intent,0,userId)
LOG.warn("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
SynchronizeFolderOperation synchFolderOp=new SynchronizeFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
state.value == rotationLocked && state.contentDescription != null
new AudioBuffer(audioData,bufferId,presentationTimeUs)
dest.getBearing() - destGf.getDeclination()
typeSettingsProperties.toSortedString()
String message
isAllowedByCurrentUserSettingsLocked(p.getName())
FastMath.min(origin,num.floatValue())
selenium.isElementPresent("link=Control Panel")
log.error("Both session() and unauthenticated() are set for this request, this is a bug, using session id.",new Throwable())
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY)
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoForStatement.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
GoExecutor.in(module).withParameterString(task.getCommand())
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_label_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR),"")
textPromise.getState() == Promise.State.PENDING
visibleTerminal.getCaption()
LOGGER.trace(exception.apply().toString())
ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage())
mPackageUsage.write(false)
!registrarTransport.equals(ListeningPoint.UDP) && !registrarTransport.equals(ListeningPoint.TCP) && !registrarTransport.equals(ListeningPoint.TLS)
UserNotificationEventLocalServiceUtil.getArchivedUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
request.getExcludeMessage()
new PreDecorationFilter(routeLocator(),this.server.getServletPrefix(),new ZuulProperties(),new ProxyRequestHelper())
tnext.getValue()
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
YogaNode.jni_YGNodeSetOwner(child.mNativePointer,0)
this.spiceServiceListenerSet.remove(spiceServiceServiceListener)
targetInfo != null && targetInfo.metaData != null
new DatagramDnsQuery(null,addr,1)
numSegments - 1.0
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"",str -> null != str)
_ddmStructure.getDefinition()
ConfigureUtil.configure(closure,this,false)
jmsManager.removeQueueFromJNDI(queueName)
titleTable.getPrefWidth()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
threadContext.isStartNextThreadLoop()
newHashSet(from)
date.getYear()
LOGGER.error(message,e)
mUiHandler.postDelayed(pae,timeout)
e.toString()
myLastSuspendContext == null || !myLastSuspendContext.equals(getSuspendContext())
Log.e(TAG,"This will become an error",ex)
LOGD=false
instance.managementService.destroy()
new ThrowableProxyConverter()
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new PseudoDescription().loadSilent()
assertPhoneNumberNotEqual("123123","0123123",false)
next_write_buffers.remove(0)
JMeterUtils.getPropDefault("httpsampler.max_redirects",20)
callVideoButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_PRESSED))
anyObject(Grouped.class)
assertEquals(message,v1,v2)
context == null || context == EGL_NO_CONTEXT
LLVMMetadata m2
buf.discardReadBytes()
m.getDeclaringClass()
mAdapter.unregisterDataSetObserver(mObserver)
mUiHandler.removeCallbacks(pae)
ViewRecordSpreadsheetViewTest.class
mService.disconnect(mContext.getOpPackageName())
returnElement != null
WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
diff >= 86100
new IllegalStateException()
mService.factoryReset()
myIncludeTestSource=true
services=9
-3
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
synchronized (mLock) {   mScreenOnTime=readScreenOnTimeLocked(); } 
poList[2]
System.getenv(KYLIN_HOME)
mock.expectedMessageCount(3)
disable2ForUser(what,token,pkg,mCurrentUserId)
mActivity.get() != null && !mActivity.get().isFinishing()
new CorruptedCacheException("block pointer must be >= -1, but was" + pos)
paramNames != null && paramNames[i] != null
TwitterRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
Maps.newLinkedHashMap(valueArguments)
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
ArraySet<UidRange>
getTypeName2(method.getReturnType())
mf.getColumnNameInSql()
JDBCUtils.safeGetInt(dbResult,"pid")
stateChangedLatch.await(3,TimeUnit.SECONDS)
msgLog.debug(msg,true)
new ReadOnlyMapELResolver(beans)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
status == PlayerStatus.INITIALIZED || status == PlayerStatus.INITIALIZING || status == PlayerStatus.PREPARING
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
Files.deleteIfExists(dir.toPath())
oldClusterVersion.before(Version.V_6_0_0_alpha1)
classFilter.getRejectedIDs()
GL20.glUniformMatrix2fv(location,transpose,value)
tempPinnedTaskBounds != null && stack.isAnimatingBoundsToFullscreen()
rs.getNString(columnName)
setChangePincodeView(true)
mAuthorities.valueAt(i)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),completedTasks,false,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
activity == null || activity.isFinishing()
pos1.getBlockY()
getAsShortText(fieldValue,locale)
appendValue(collection,sb,variables)
MAX_PRETTY_PRINTED_PROPERTIES=10
cifar.test(numSamples)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
appearance.getFloat(attr,0)
registered.remove(objectName)
getString(R.string.osmo_tracker_id_share,ci.trackerId,"")
Thread.sleep(1000)
DateUtilities.ONE_MINUTE * 15
LogManager.getContext(Log4jLog.class.getClassLoader(),false)
LOGGER.error(msg.apply())
selenium.isElementPresent("link=Control Panel")
validatePropertyElement(propertyElement,filePath)
_model == null || _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
Cheese.class
new Paint()
return 8; 
initializationData != null && initializationData.size() > 0
control.getEmptyRowHeight()
new GeoPoint(bottom,negRight)
Double.parseDouble(value.toString())
rowKeyColumnIO.writeColumnWithoutDictionary(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
payloadErrorFatal || streamId == 0
temp_descs.get(j)
assertPhoneNumberNotEqual("123123","0123123",false)
UriBuilder.fromResource(StreamAlertConditionResource.class).path("{conditionId}").build(stream.getId(),alertCondition.getId())
new Backgrounding(true)
new Paint()
loaded.getLoaded().getDeclaredConstructor()
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
!(exception ? throwable instanceof RuntimeException : throwable == null)
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
userQueryService.getUserNames(commentContent)
parent.getChildPosition(child)
StaxUtils.writeDocument(doc,writer,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
Validate.notNull(ret,"Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString())
matrix.preApply(transform)
if (moveSelection) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } 
major == 1 && minor < 5
activity.getUserId()
selenium.isElementPresent("link=Control Panel")
MonitoringPortlet.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
fis.close()
assertEquals(Optional.of("abc"),result)
return this; 
(short)0777
mCaCerts != null && mCaCerts.length > 0
oldVb.getBufferType() == VertexBuffer.Type.Index || oldVb.getBufferType() == VertexBuffer.Type.HWBoneIndex || oldVb.getBufferType() == VertexBuffer.Type.HWBoneWeight
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
lp.resolveLayoutDirection(layoutDirection)
!"none".equals(max_items)
Throwable e
this.getClass().getName()
counter > max
mValue == null || offset > mValue.length
Validator.isNull(indexType) || indexType.equals("none")
protocolProvider.getAccountID().getUserID()
nodeFile.getParentFile()
item.isFile()
type.getDeclaredConstructor()
mDataAuthorities == null || data == null
/**   * Gets the key of service port.  * @return key of service port  */ public PropertyKey getPortKey(){   return mPortKey; } 
ContainerUtil.newHashSet(EDITOR_POPUP,EDITOR_TAB_POPUP,COMMANDER_POPUP,PROJECT_VIEW_POPUP,FAVORITES_VIEW_POPUP,SCOPE_VIEW_POPUP,TESTTREE_VIEW_POPUP,TESTSTATISTICS_VIEW_POPUP,TYPE_HIERARCHY_VIEW_POPUP,METHOD_HIERARCHY_VIEW_POPUP,CALL_HIERARCHY_VIEW_POPUP,J2EE_ATTRIBUTES_VIEW_POPUP,J2EE_VIEW_POPUP,USAGE_VIEW_POPUP,STRUCTURE_VIEW_POPUP,TODO_VIEW_POPUP,COMPILER_MESSAGES_POPUP,ANT_MESSAGES_POPUP,ANT_EXPLORER_POPUP,UPDATE_POPUP,FILEVIEW_POPUP,CHECKOUT_POPUP,LVCS_DIRECTORY_HISTORY_POPUP,GUI_DESIGNER_EDITOR_POPUP,GUI_DESIGNER_COMPONENT_TREE_POPUP,GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP,CREATE_EJB_POPUP,CHANGES_VIEW_POPUP,REMOTE_HOST_VIEW_POPUP,REMOTE_HOST_DIALOG_POPUP,TFS_TREE_POPUP,ACTION_PLACE_VCS_QUICK_LIST_POPUP_ACTION,PHING_EXPLORER_POPUP,NAVIGATION_BAR_POPUP,JS_BUILD_TOOL_POPUP,V8_CPU_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP)
selenium.click("//li[4]/span/a/span")
dockedBounds.top - dockDividerWidth
info != null && !mContext.getPackageName().equals(info.activityInfo.packageName)
public LowerCaseFilter create(TokenStream input){   return new LowerCaseFilter(input); } 
TypeMirror formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER).asType(); 
anchorView.getApplicationWindowToken()
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProcessor(new ButtonItemProcessor(this))
substitution == null
T value
input.size(0)
WordPress.getCurrentBlog().getLocalTableBlogId()
getReadTimeout(requestConfig,attempt)
chain.resolveUrlPath(resourceUrlPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
!allowPrivate.isNull()
debugRootView.addView(button)
proxy.attemptErrorResponse(controlSessionId,correlationId,GENERIC,errorMessage,controlPublication)
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
dynamicType.getDeclaredConstructor()
users.get(j)
settings.readLPw(null,0,false)
(short)6
columnTypes[column] == INT || columnTypes[column] == CATEGORICAL
id=29
new Paint()
new Attribute(rawAttributeName,name,value)
temporaryFolder.newFolder()
config.notifyOnOwnName()
k++
max_ordinal=85
child.resetRtlProperties()
CassandraSplitManager.class
StringBuilder text=new StringBuilder(status.getMessage()); 
vel < mFlingExpandMinVelocityPx
public Address mapLine(FieldSet fieldSet,int lineNum){   Address address=new Address();   address.setAddressee(fieldSet.readString(ADDRESSEE_COLUMN));   address.setAddrLine1(fieldSet.readString(ADDRESS_LINE1_COLUMN));   address.setAddrLine2(fieldSet.readString(ADDRESS_LINE2_COLUMN));   address.setCity(fieldSet.readString(CITY_COLUMN));   address.setZipCode(fieldSet.readString(ZIP_CODE_COLUMN));   address.setState(fieldSet.readString(STATE_COLUMN));   address.setCountry(fieldSet.readString(COUNTRY_COLUMN));   return address; } 
case WRITE_ERR: 
table.averageFloat(columnIndex)
public Listener getListener(){   return listener; } 
Thread.sleep(5000)
return true; 
Intent.ACTION_LOCALE_CHANGED.equals(action) || Intent.ACTION_TIMEZONE_CHANGED.equals(action)
DBG=true
e.toString()
@ConditionalOnEnabledHealthIndicator("rabbit")
return false; 
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
Assert.assertThat(client.dump() + System.lineSeparator() + remotePorts.toString(),expected,Matchers.equalTo(candidate))
field.getType()
mRemote.transact(START_ACTIVITY_WITH_CONFIG_TRANSACTION,data,reply,0)
o == null || !(o instanceof BooleanClause)
result.getReceipt().getEnergyUsageTotal()
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
eachWnd == null || !eachWnd.isAvailable()
add(bytes)
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
classDirectoryName.contains("bin") || classDirectoryName.contains("classes") || classDirectoryName.contains("retrolambda")
message.setText(getDialogMessage())
log.debug("Can't check auto-commit state",e)
domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
mAvailablePhysicalRequestKeys == null
"Trying to use view with tag " + parentTag + " as a parent, but its Manager doesn't extends ViewGroupManager"
grammar.getTokenDisplayNames()
selenium.isElementPresent("link=Control Panel")
d.setAutoMirrored(false)
PyCallExpression callExpression=(PyCallExpression)elementGenerator.createFromText(LanguageLevel.forElement(dictExpression),PyExpressionStatement.class,stringBuilder.toString()).getExpression(); 
parentClass.getClassName()
!isPassword || shouldSpeakPasswordsForAccessibility()
getLog().warn("register druid-driver mbean error",ex)
type.getDeclaredConstructor()
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
loaded.getLoaded().getDeclaredConstructor()
DurationType.getAverageYearMonthType()
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
new SpannedString(first,true)
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,700,0)
getMyApplication().getSettings().getLastKnownMapLocation()
width / 2
createDouble(buffer.length(),init)
prefsWriter.apply()
dynamicType.getDeclaredConstructor()
request.getPathInfo()
clientCodeVerifier == null
LOG.trace("Finding components in url: {}",url)
count=10
startActivityAsUser(intent,UserHandle.CURRENT)
msg.setJMSPriority(asInt(priority))
Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor()
ImmutableSet<Key<?>>
application.getBaseContext()
Builder<M,B>
GlobalContextKey.create("_prefer_target_jdk_javac_")
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
selenium.isElementPresent("link=Control Panel")
CollectionUtils.isNotEmpty(blocks)
return useProfilingInfo; 
new Entry(p.hash,p.key,p.value,head)
topologyConfigs(topologyBinaryFile,topologyDefnFile,topology)
mHiddenForOtherReasons=true
secondString.substring(i + 1)
LOGGER.warn("Could not perform drage and drop",ioex)
clockSource.elapsedMillis(startTime)
Exception ex
type == null || type == JAXBElement.class
Simple.forClass(value.getClass())
DEBUG=false
params.length >= 8
is(500)
assertEquals(1,result.x)
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
result.size() == 6
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU,false)
project.isDisposed() || ApplicationManager.getApplication().isUnitTestMode()
_jsonObjectFile.getParent()
SAMPLE_ERROR_MILLIS=750
mNavigationBarView.getPaddingLeft()
i.getTouchIconUrl() == null
sourceHeight > 0
TimeValue.timeValueNanos(delay)
bedtime - SystemClock.uptimeMillis()
m.size()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
contact.getWorldManifold()
assertEquals(13,definitions.size())
PApplet.degrees(angle)
DLFileEntryMetadataLocalServiceUtil.getFileVersionFileEntryMetadatas(dlFileVersion.getFileVersionId())
SearchSourceBuilder.fromXContent(parser,context,aggParsers,suggesters)
checkCall(receiver)
mulNegInt(x,y) | mulZeroSubInt(y,x) | mulSubZeroInt(x,y)
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
suiteMethod.invoke(null)
/**   * {@inheritDoc}  */ @Override public TestElementProperty clone(){   TestElementProperty prop=(TestElementProperty)super.clone();   prop.value=(TestElement)value.clone();   return prop; } 
System.nanoTime()
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())
wrappersToPrimitives.put(wrapperType,primitiveType)
loaded.getLoaded().getDeclaredConstructor()
stack.isVisible() && (imeOnBottom || isDockedOnBottom) && StackId.isStackAffectedByDragResizing(stack.mStackId)
from("direct:a").delay(2000)
createFromResourceStream(res,value,is,srcName,null)
mAvailablePhysicalRequestKeys == null
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
syncOperation.delay <= 0
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
type.getDeclaredConstructor()
@Mock private PanProfile mPanProfile; 
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
assertEquals(10,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
LOGD=false
new RowIcon(2,RowIcon.Alignment.CENTER)
RuntimeVersion.isAtLeast11()
new ArrayList<>(10)
worldsData.containsKey(worldName.toLowerCase()) || mirrorsGroup.containsKey(worldName.toLowerCase()) || mirrorsUser.containsKey(worldName.toLowerCase())
ap.getSsidStr()
r != null && !r.finishing
type == QUADS || type == QUADS
0.249f * mainUnitInMeters
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
StreamEx.of(1,2,3,2)
mSyncStatus.valueAt(i)
DLAppServiceUtil.updateFolder(folder.getFolderId(),album.getTitle(),album.getDescription(),serviceContext)
classMapper.realClass(classAttribute)
fieldInfos.size() == 6
grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED
myConfigFiles.values()
@Priority(500)
NB_CACHED_PARAMS=10
host.setHeaderView(mExpandIndicator)
ArrayList<RangeHighlighter>
getConnectTimeout()
Queue<long[]>
ftest.numRows() != validation_rows
region.getRegionHeight()
"Using bind address: " + bindAddress
CLEAN_DELAY=0
StagingServiceHttp.createStagingRequest(httpPrincipal,remoteGroupId,checksum)
UserHandle.myUserId()
fullName != null && fullName.length() > selectedFullName.length()
level < RF_STATUS_LOW_SIGNAL
JSONValue.parseWithException(value)
map.set(keyValue.getKeyData(),value)
TelephonyManager.getDefault().getCurrentPhoneType()
new TrustException("ENCRYPTED_KEY_ERROR",e,LOG)
CollectionItemInfo.obtain(position,1,0,1,isHeading,isSelected)
getters.length > 0
new EnterSelectionDialog(shell,files,Messages.getString("XMLOutputDialog.OutputFiles.DialogTitle"),Messages.getString("XMLOutputDialog.OutputFiles.DialogMessage"))
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
mLayout.getPaint().getTextWidths(mTransformed,offsetStart,offsetEnd,widths)
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,event.successMessage)
assertEquals(1840,res.getWeight(1,2),10)
selectorSlider.getComponent()
context.declareTables()
loaded.getLoaded().getDeclaredConstructor()
assertEquals(1,tool.check("Een test test, die een fout moet geven.").size())
mock.expectedFileExists("target/failed/error/bye.txt")
origin <= other
fluids.containsKey(fluid.getName())
consumerPort=9123
logger.debug("Cannot handle repeat command ({})",e.getMessage())
drawable.getIntrinsicHeight()
FBUtilities.getBroadcastAddress()
StringUtil.trimEnd(goExecutablePath,GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH)
near.getAndRemove(key)
LOGGER.isDebugEnabled()
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
connectionProperties.containsKey("oracle.user")
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
logger.fine(String.format("calling ack %s with %s",packet.id,packet.data))
new SpannedString(new CustomSpanned(first),true)
renameContactPanel.getNewName()
DirectoryReader.openIfChanged(reader)
U.error(log,"Failed to apply updates for session (maximum number of retries exceeded) [sesId=" + sesId + ", retries="+ retries+ ']',e)
c.getSimpleName()
realm.checkIfValid()
assertTrue(dr.isFailure())
final ContiguousIntervalCapacityUsageInArrear intervalCapacityInArrear=createContiguousIntervalCapacityInArrear(usage,ImmutableList.<RawUsage>of(),targetDate,false,createMockBillingEvent(targetDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList())); 
_log.warn(ioe,ioe)
power >= POWER_REQ
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && ViewCompat.isAttachedToWindow(content)
Log.err("Caught exception: " + error.toString())
BUTTON_QUIESCENT_ALPHA=0.70f
MalformedPathException e
resourceServer.getId()
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
Long.parseLong(value)
lastPos > mBoundPos
mRedrawClip.isEmpty() || view.getParent() == null
slop.getNodeId()
new Insets(6,0,0,0)
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",false,false,false)
Assert.assertTrue(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
attribute.generatedSetterName()
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=2
N > 1
public static BuildConfigSpec addBuildParameterCustomStrategy(BuildConfigSpecBuilder builder,String image,List<EnvVar> envVars){   return builder.withNewStrategy().withType("Custom").withNewCustomStrategy().withImage(image).withEnv(envVars).endCustomStrategy().endStrategy().build(); } 
case 3: 
item == null || item.getContainer() != pipe.container
fragmentManager.beginTransaction().replace(containerId,tabsFragment)
sampleQueues[track]
Response.ok(null,MediaType.TEXT_PLAIN)
demoted.getPolicyWeight()
Slog.w(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
converter.tryConvertTo(leftValue.getClass(),rightValue)
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
dpToPx(8f)
handler instanceof ChannelOutboundHandler
si.intent == null && N > 1
promises.add(promise)
LOG.trace(msg,this)
assertEquals(2,prop.getValues().size())
new IndexWriter(dir1,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Simple.forClass(SkylarkNestedSet.class)
_jsonWebServiceServiceAction.getJSON(null,mockHttpServletRequest,mockHttpServletResponse)
assertRuntimeProductionSearchScope("m2",getProjectPath() + "/m2/src/main/java",getRepositoryPath() + "/jmock/jmock/1.0/jmock-1.0.jar")
Cheese.class
file instanceof PsiImportHolder
getPlayerPosition().y
testClass.getSimpleName()
new Paint()
CLIENT_SNAPSHOT=0x08
unittests("tests_pydevd_python/test_debugger.py",null,true)
ScanResult.is5GHz(frequency)
DEBUG=true
ScanResult.is5GHz(frequency)
Thread.sleep(1000)
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e)
DBG=true
nextOffsetStart >= rangeToRemove.getEndOffset()
text.getBoundingBox().height()
getCategoryMethodGetter(theClass,getterName,false)
new SkeletonControl(meshes,animData.skeleton)
classFile.matcher(file.getName()).matches()
getDirectory(createTempDir())
Thread.currentThread()
Throwable e
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)
iterations == 0
pending_native(myFd)
node1.isEquivalentToTyped(node2)
explicit && !finished && (socketRef != 0)
ENABLED.set(true)
callerPackage == null
rs.getString(3)
ViewCompat.getLayoutDirection(backLayer)
fragmentCollectionPersistence.countByGroupId(groupId)
dest.writeInt(mSubId)
editor != null && !editor.isDisposed()
Parser.htmlParser()
clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
subCursor.getString(COLUMN_VALUE)
client.services()
!e.getKey().startsWith("org.apache.ignite.") && !e.getKey().startsWith("plugins.") && System.getProperty(e.getKey()) == null
MAX_PER_SIZE=8
DeprecationLogger.nagUserWith("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
fragment == null || fragment.getView() == null
getMeasuredWidth()
mBluetoothLock.readLock().unlock()
new ClusterTopologyCheckedException("Failed to send message to node (has node left grid?): " + nodeId)
@Test public void ioExceptionWhenReaderThrowsIt() throws Exception {   final IOException ioEx=new IOException();   Reader reader=new Reader(){     @Override public int read(    char[] cbuf,    int off,    int len) throws IOException {       throw ioEx;     }     @Override public void close() throws IOException {     }   } ;   Source.Builder<IOException,RuntimeException,RuntimeException> builder=Source.newBuilder(reader).name("unloadable.txt").mimeType("text/plain");   Source s1=null;   try {     s1=builder.build();   }  catch (  IOException e) {     Assert.assertSame(ioEx,e);     return;   }   fail("No source should be created: " + s1); } 
!portletAddDefaultResourceCheckWhiteList.contains(portletId)
!_discussionComment.isInTrash()
/**   * Integration tests for GRPC over Http2 using the OkHttp framework.  */ @RunWith(JUnit4.class) public class Http2OkHttpTest extends AbstractInteropTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer() throws Exception {     try {       SslProvider sslProvider=SslContext.defaultServerProvider();       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {         sslProvider=SslProvider.JDK;       }       SslContextBuilder contextBuilder=SslContextBuilder.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key"));       GrpcSslContexts.configure(contextBuilder,sslProvider);       contextBuilder.ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE);       startStaticServer(NettyServerBuilder.forPort(serverPort).sslContext(contextBuilder.build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer() throws Exception {     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort(TestUtils.TEST_SERVER_HOST,serverPort));     try {       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")));     }  catch (    Exception e) {       throw new RuntimeException(e);     }     return builder.build();   }   @Test(timeout=10000) public void receivedDataForFinishedStream() throws Exception {     Messages.ResponseParameters.Builder responseParameters=Messages.ResponseParameters.newBuilder().setSize(1);     Messages.StreamingOutputCallRequest.Builder requestBuilder=Messages.StreamingOutputCallRequest.newBuilder().setResponseType(Messages.PayloadType.COMPRESSABLE);     for (int i=0; i < 1000; i++) {       requestBuilder.addResponseParameters(responseParameters);     }     StreamRecorder<Messages.StreamingOutputCallResponse> recorder=StreamRecorder.create();     StreamObserver<Messages.StreamingOutputCallRequest> requestStream=asyncStub.fullDuplexCall(recorder);     requestStream.onNext(requestBuilder.build());     recorder.firstValue().get();     requestStream.onError(new Exception("failed"));     recorder.awaitCompletion();     emptyUnary();   }   @Test(timeout=10000) public void wrongHostNameFailHostnameVerification() throws Exception {     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort("I.am.a.bad.hostname",serverPort));     ManagedChannel channel=builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem"))).build();     TestServiceGrpc.TestServiceBlockingStub blockingStub=TestServiceGrpc.newBlockingStub(channel);     try {       blockingStub.emptyCall(Empty.getDefaultInstance());       fail("The rpc should have been failed due to hostname verification");     }  catch (    Throwable t) {       Throwable cause=Throwables.getRootCause(t);       assertTrue("Failed by unexpected exception: " + cause,cause instanceof SSLPeerUnverifiedException);     }     channel.shutdown();   } } 
new LocalizationEntity(_packagePath,_apiPackagePath,_portletName,_portletShortName,_name.concat("Localization"),_humanName.concat(" localization"),_table.concat("Localization"),_alias.concat("Localization"),persistenceClass,_dataSource,_sessionFactory,_txManager,_cacheEnabled,_dynamicUpdateEnabled,_deprecated,Collections.singletonList(entityLocalizationIDColumn),regularColList,Collections.<EntityColumn>emptyList(),Collections.<EntityColumn>emptyList(),columnList,finderList,Collections.singletonList(this),_txRequiredList)
DataType.set(datatype)
CellUtil.estimatedHeapSizeOfWithoutTags(c)
new WorldPoint(2715,3689,0)
nextTokenIs(b,IDENTIFIER)
pw.print(ps.getInstantApp(user.id))
stamp.isExactType() || stamp.type() == null
_buildTemplateWithGradle("npm-portlet","npm-portlet-dependency-management","--dependency-management-enabled")
mock.expectedBodiesReceivedInAnyOrder("Hello World 3")
guiResource.getImageSlaveTree()
N node
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button); 
payload.writeBytes((byte[])each)
msg.obj != mSmHandlerObj
nodeVersion.onOrAfter(Version.V_5_3_0_UNRELEASED)
GL20.glGetActiveUniform(program,index,256,size,typeTmp)
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
COOKIE_SYNC_MANAGER=true
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
super.getSecurityEngine(true)
new ArrayList<>(mRegions.get(index).size())
assertEquals(counter.get(),0)
toBeRemovedKeys.removeAll(keysToDelete)
PsiTreeUtil.getStubOrPsiParentOfType(uexpr,ScopeOwner.class)
comparison=superCompareTo
!uploadResult.isCancelled() && !ResultCode.LOCAL_FILE_NOT_FOUND.equals(uploadResult.getCode()) && !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_WIFI)&& !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_CHARGING)&& !uploadResult.getCode().equals(ResultCode.LOCK_FAILED)
InspectionsConfigTreeTable.getAdditionalShift()
connector.apply(context)
element != null && !(element instanceof PsiCompiledElement)
fontBuffer != null && fontBuffer.capacity() > 0
primitiveType == GL10.GL_POINTS
generatorConfig.getDaoTargetFolder()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
log.logError(BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",sourceFileObject.toString(),e.getMessage()),e)
mWidth - mMinWidth
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
stack.peek()
_hint != null || _snapshot
RingBuffer.newSequencedQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
Thread.sleep(500L)
myBooks.size()
intent.resolveType(getContentResolver())
component.setStrikethrough(object.get("strikethrough").getAsBoolean())
filePath == null || context == null
new IndexWriter(directory,autoCommit,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
heightMode != MeasureSpec.EXACTLY && heightMode != MeasureSpec.AT_MOST
WordPress.getCurrentBlog().getLocalTableBlogId()
setEnabledFunctions(mDefaultFunctions,true)
getService().animateCollapseNotifications()
CacheProjection<K,V>
m.size()
getUserStateLocked(resolvedUserId)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
(BasicFontMetrics)c.newInstance()
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(17)
manager.age(Locale.ENGLISH,10)
actionCache.remove(execPath)
fill || textureImage != null
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)
/**   * This is  {@link CasWebflowServerSessionContextConfigurationTests}.  * @author Misagh Moayyed  * @since 5.0.0  */ @TestPropertySource(properties="cas.webflow.session.storage=true") public class CasWebflowServerSessionContextConfigurationTests extends BaseCasWebflowSessionContextConfiguration {   @Autowired @Qualifier("loginFlowExecutor") private FlowExecutor flowExecutorViaServerSessionBindingExecution;   @Override public FlowExecutor getFlowExecutor(){     return this.flowExecutorViaServerSessionBindingExecution;   } } 
LinkedHashMap<String,ArrayList<String>>
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
errorMsgJson.put("ERROR",errorMsg)
setZrtpEncryptionOnDescription(mediaType,description,null)
makeString(actual,",","(",")",-1)
mService.setAppPolicy(UID_A,POLICY_NONE)
p.getConfig().get("enabled") == null || (Boolean)p.getConfig().get("enabled")
type == null || type.equalsIgnoreCase("text/css") == true
storedHash == null || TextUtils.isEmpty(credential)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
builder.scope("openid","profile","email")
new BinaryWebSocketFrame(finalFragment,rsv,payload)
selenium.isElementPresent("link=Control Panel")
expandableView.getIntrinsicHeight()
externalChargeItem.getDescription()
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
sourceConstant.getKind()
{8,inputShape[0],inputShape[1],inputShape[2]}
countCQL3Rows() || ignoredTombstonedPartitions()
nameResolver.generatedTypeNameOf(referenceElement).orElseThrow(IllegalStateException::new)
new FtrlDelta(false,alpha)
AbstractCallTargetNode directCall=(AbstractCallTargetNode)invoke.callTarget(); 
((OverriderUsageInfo)usage).getOverridingMethod()
indexNameExpressionResolver().concreteIndexNames(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName(),res.getString(R.string.app_name))
processEngineConfiguration.getExpressionManager() == null && applicationContext != null
Thread.currentThread().hashCode()
new Paint(Paint.ANTI_ALIAS_FLAG)
test("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
id=10996
Arrays.<Processor>asList(new BuildProcessor(new ArrayList<Processor>()),new ModuleProcessor(),new PropertiesProcessor(),new ParentProcessor(),new OrganizationProcessor(),new MailingListProcessor(),new IssueManagementProcessor(),new CiManagementProcessor(),new ReportingProcessor(),new RepositoriesProcessor(),new DistributionManagementProcessor(),new LicensesProcessor(),new ScmProcessor(),new PrerequisitesProcessor())
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
EvictionScheduler.class
hasColumn("Akismet_AkismetData","mbMessageId")
event.getRawX()
fMethodDescriptions.putIfAbsent(method,description)
return false; 
get(request,plid)
threadHandler.get().postAtFrontOfQueue(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
ChannelBuffers.wrappedBuffer(bytes,0,length)
realm.checkIfValid()
callback.onPulseFinished()
selenium.isElementPresent("link=Control Panel")
getSettings().WIKIVOYAGE_SHOW_IMAGES
return false; 
b.getId()
mBluetoothLock.readLock().unlock()
si.intent == null && N > 1
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mResultStorages,ActivityThread.currentOpPackageName())
new LeftTuple(f1,sink)
a.willChangeBounds()
originalDocBase.toLowerCase(Locale.ENGLISH)
topCallFrameView == null || topCallFrameView.getCallFrame() != topCallFrame
log.error("Problem in JSR223 script ",e)
order=10
SelectTimeZonePacificStandardTimeCPMATest.class
componentTree == null || componentTree.isReleased()
(ClusterManager)manager
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0,0)
address.getHost()
traceTag != 0 && Trace.isTagEnabled(traceTag)
getActiveFgCall().getPhone().startDtmf(c)
calendar.add(Calendar.DATE,-1)
Loader.loadClass(klass,mName)
ds.getFeatures()
batteryService.getBatteryLevelLow()
is(1)
VersionNumber.parse(playVersion).getMicro()
new SliceReadCommand(table,key,columnFamilyColumn,start,count)
new int[100]
mSyncStatus.valueAt(i)
mdcPropertyMap == null
new ShardPath(false,path,path,shardId)
!token.trim().isEmpty()
DEBUG_GESTURES=false
protected Message waitForOutbound(InboundMessageQueuer ch) throws InterruptedException {   return ch.nextMessageBlocking(); } 
!from.getItem().shouldCauseReequipAnimation(from,to,changed)
refreshRotationLockTile()
new WorldPoint(1653,3573,0)
getMeasuredWidth()
MAX_PERCENT_DIFFERENCE=0.3
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).switchIfEmpty(EMPTY_FORM_DATA)
addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)
Stream.of("CYPHER 3.1","CYPHER 3.4")
result.wasNull() || s == null
type.getInternalCanonicalText()
onDetachedFromWindows()
new FtrlDelta(false,alpha)
dkSign.getSignatureId()
Integer.parseInt(sid[0],16)
sep < 0 || sep > j
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!",new Throwable())
metaContact.getDefaultContact(OperationSetBasicInstantMessaging.class)
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
AttributeUtils.getDefault().getMax(column,valuesArray)
columnSums.sum(1)
Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)
statistics.addGetTimeNanos(System.nanoTime() - start)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
logger.debug("copy {} to {}",srcFile.getAbsolutePath(),destPath)
mCallback.onInputUpdated(inputId)
mapper.setSqlSessionTemplate(sqlSessionTemplate)
routeController != null
new ConcurrentHashMap<String,BeanDefinition>(256)
new ShardingConnection(xaDataSourceMap,shardingContext,TransactionType.XA)
stepLightIdleStateLocked("s:shell")
dlg.setPositiveButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
!isEnabled() || getVisibility() == GONE
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION
synchronized (mLock) {   updateDisplayLocked(); } 
fileIds == null || fileIds.isEmpty()
NetworkParameters.oldTestNet()
getClientConfig().getAddresses()
layoutRevision.getIconImageId()
THUMBNAIL_APP_TRANSITION_DURATION=325
Validator.isNull(location) || response.isCommitted()
mHotspotBounds.set(left,top,right,bottom)
zkDb.snapLog.getSnapDir()
m.size()
node.getLifecycleService().shutdown()
listeners.executed(context)
intervalFraction * (nextValue - prevValue)
mBluetoothGatt.registerScanner(this,mWorkSource)
loaded.getLoaded().getDeclaredConstructor()
MAGIC_GEN_NUMBER=0xD0_46_B4_E4_0C_7D_07_CFL
type.getSimpleName()
um.getUsers(true)
child.getMeasuredWidth()
mRecyclerView.smoothScrollBy(hScroll,vScroll)
Integer.parseInt(attrValue)
str == null || str.length() == 0
incrementAppWidgetServiceRefCount(appWidgetId,fc)
Exception t
new StackState(1f,255)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
serializer.serializeInsert(metadata,entity,columns,values,subQuery)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
inOrder.verify(mockAwareService).subscribe(any(),eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
ConfigurationFromContext.COMPARATOR.compare(producer,first) > 0
s.setMaxVersions(region.getStores().values().iterator().next().getScanInfo().getMaxVersions())
typeSettingsProperties.toString()
imeWin.getFrameLw()
Integer.parseInt(attrValue)
LOG.info(e)
MAX_DIMEN_FOR_ROUNDING=1920
selenium.isElementPresent("link=Control Panel")
SyslogTcpTransport.class
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
is2D() && len != 2
Long.valueOf(2)
mPowerManager.isInteractive()
holders.remove(holder)
!mDreamsEnabledOnBatteryConfig
isFormat(format,F40,F60)
runUTRunner(PathManager.getHomePath(),"true")
FileUtil.getParentFile(parent)
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
sendMail(getFromAddress(),addressList,getSuccessSubject(),"URL Restarted: " + sample.getSampleLabel(),getSmtpHost(),getSmtpPort(),getLogin(),getPassword(),getMailAuthType())
qux.getDeclaredConstructor()
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
edge.setDirection(EdgeDirection.DIRECTED)
T newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression); 
computator.getContentRectMinusAllMargins()
Assert.assertEquals(account.getBillCycleDayLocal().intValue(),0)
mph >= 10 || am.hasFastSpeed()
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()),type.isLob())
setBackground(null)
DEBUG_ALL || true
uri.getRawPath()
info.getOldIndex() < 0 || !thrownTypes[info.getOldIndex()].equals(info.createType(method,method.getManager()))
!ON_TOP
odi.close()
LinkageError e
result.setEnabled(true)
scanFlags & SCAN_NEW_INSTALL
DEBUG=false
volume.getMtpReserveSpace() * 1024L * 1024L
NotifyUtil.show("Error",formatter.format(record),MessageType.ERROR,listener,0)
Lists.newArrayListWithCapacity(resultMessages.size())
root.isDownloads()
hasCdmaDataConnectionChanged || hasNetworkTypeChanged
Thread.sleep(1000)
responseRaw(p)
Log.e(TAG,"Found activity " + r + " in proc activity list using "+ r.app+ " instead of expected "+ app)
updateCloseButton()
random.nextValue()
BackupManagerServiceInterface svc=mService; 
logger.debug("Cannot handle control command ({})",e.getMessage())
Runtime.getRuntime().maxMemory()
element.getLocalName()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
Arrays.asList("SuppressWithNearbyCommentFilter.fileContents","SuppressionCommentFilter.fileContents")
MAX_DEFAULT_FRACTIONS_DIGITS=16
mConnectionById.containsKey(callId)
s.trim().endsWith("#") || s.trim().length() == 0
Assert.assertEquals(4,users.size())
clearIndex()
List<Data>
IndexReader.open(dir)
WatchlistConfig.getInstance().isConfigSecure()
new DebugMediaCodecVideoRenderer(context,MediaCodecSelector.DEFAULT,allowedVideoJoiningTimeMs,mainHandler,drmSessionManager,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY)
this.cusolverDnSsyevd.invoke(null,solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
Response.ok(null,MediaType.TEXT_PLAIN)
selenium.isElementPresent("link=Control Panel")
buffer.append(KEY_NODE_ID + "=").append(nodeId)
canChangeRole
writeString(writer,fieldName,reader.getTime().toTimeStr())
ResponseEntity<Object>
upgradeDDLRecordVersionClassName(classNameDependencies)
setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
gradleProject.getProjectIdentifier()
builder.humanReadableField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
next == null || next.turnType == null
getKeyFromGrant(grantAlias)
spec.getReflection()
selenium.isElementPresent("link=Control Panel")
wCompression.getText()
role.getChatUser().getAddress().toString()
position.setAltitude(buf.readShort())
Stream.of("CYPHER 3.1","CYPHER 3.4")
id=10841
logger.debug("{} {}",errorCode,message)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
checkCall(receiver)
public void setInitialWindowSize(long initialWindowSize) throws ConnectionException {   if (initialWindowSize > MAX_WINDOW_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.initialWindowSize=(int)initialWindowSize; } 
new Paint()
classNode.hasDeclaredMethod(methodName,parameterTypes)
MessageNotifier.updateNotification(context,null,-2)
type.getDeclaredConstructor()
synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
Constant.messages.getString("start.gui.cmdline.session.does.not.exist",Constant.getZapHome())
mLocalAlluxioClusterResource.get().getWorker()
new SemanticException(TYPE_MISMATCH,node,"%s",e.getMessage())
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
receiverUserId != mCurrentUserId && !isUidALocationProvider(receiver.mUid)
params.getSimulatedPlatformVersion()
artifact.getExecPath()
Sets.newLinkedHashSet()
homeStackInfo == null && activityType == ACTIVITY_TYPE_HOME
SecureRandom.getInstance("SHA1PRNG")
DBG_CAMERA_LIFT=false
warningBytes > limitBytes && limitBytes != LIMIT_DISABLED
"Scheduling method " + method.getName() + " on "+ target+ " to be run every "+ delay+ " "+ timeUnit+ " after "+ initialDelay+ " "+ timeUnit
AsyncToSyncChannelServer.class
c.close()
!mDreamsEnabledOnBatteryConfig
HttpStatus.SC_OK != statusCode && HttpStatus.SC_ACCEPTED != statusCode && HttpStatus.SC_CREATED != statusCode && HttpStatus.SC_NO_CONTENT != statusCode
Assert.assertEquals(0,stringNumber)
faultSerialVersionUID.equals(FaultSerialVersionUID.FQCN) || "FQCN".equals(faultSerialVersionUID)
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").bold("#")
mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE
0 - originX
err.jspError(start,"jsp.error.attribute.unterminated",qName)
p != null && p.type() != Proxy.Type.DIRECT
p >= 0
super.resolveLayoutDirection(layoutDirection)
terminal.receivedSendToTerminal(postCreateText)
DirectoryReader.openIfChanged(oldReader,writer.w,true)
applicationListeners.httpSessionAttributeReplaced(this,name,old)
new JList()
_buildTemplateWithGradle("rest","rest-dependency-management","--dependency-management-enabled")
value.readUnsignedInteger(offset,size)
ByteBuffer.allocate(16)
SelectTimeZonePacificStandardTimeCPMATest.class
getInFaultInterceptors()
selenium.click("//li[4]/span/a/span")
FileUtil.compactPath(path,'/')
answer == null || comparator.compare(value,answer) < 0
new ExternalPaymentProviderPlugin(clock,paymentConfig)
inputChars == null
new MediaBrowser.MediaItem(bob.build(),MediaBrowser.MediaItem.FLAG_BROWSABLE)
AbstractMap self
Simple.forClass(type)
stack.stackSize > 0 && successful
new ObjectMapper().readerFor(DiskBalancerVolume.class)
logger.fine("Strip code")
errorPos + 32
app.getSettings().WIKIVOYAGE_SHOW_IMAGES
IllegalArgumentException e
dynamicServletRequest.getParameterValues(name)
times(1)
fieldType.storeTermVectors()
statistics.addPutTimeNanos(System.nanoTime() - start)
args[5]
component.setMaxThreads(20)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
getCustomInitBinderArgumentResolvers()
selenium.isElementPresent("link=Control Panel")
Process.SYSTEM_UID != callingUid && nri.mUid != callingUid
getActiveFgCall().getPhone().startDtmf(c)
Messages.MESSAGES.templateParameterNull(param)
_typeSettingsProperties.toSortedString()
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
original.getId() - 1
new CompositeException(t,innerError)
getEffectiveHstsEnforced()
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
chargeUAh > 0 && level > 0
assertEquals(0.7592592592592592,mm.auc_obj()._auc,1e-8)
projectFilesystem.isFile(buckFile)
"content".equals(scheme) || "android.resource".equals(scheme)
MAX_PERCENT_DIFFERENCE=0.3
syncContext.setPortletPreferencesMap(getPortletPreferencesMap())
Integer.parseInt(stackIdStr)
selenium.isElementPresent("link=Control Panel")
mWidth - mMinWidth
(float)getMax() / 20
i.getTouchIconUrl() == null
triggerProto.getAfterEndOfWindow()
mBackdrop.animate().alpha(0.002f)
15 * 60 * 1000
order=12
http2Stream.garbageCollector()
logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
mDisplayContent.mDividerControllerLocked.getWidth()
functionFactory.expm1(iX)
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid(),(r != null && r.info != null) ? r.info.packageName : "",(r != null && r.info != null) ? (r.info.isInstantApp() ? StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__TRUE : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__FALSE) : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__UNAVAILABLE,r != null ? (r.isInterestingToUserLocked() ? StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__FOREGROUND : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__BACKGROUND) : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__UNKNOWN)
mValues[8]
minBukkitBuildVersion=617
NotifyUtil.show("Info",formatter.formatMessage(record),MessageType.INFO,listener,6000)
wrappersToPrimitives.put(wrapperType,primitiveType)
appearance.getFloat(attr,0)
args.length > 4
mp.getResolvedValue()
msg.getType() == Message.Type.error || msg.getBody() == null
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(1L)).subscriberContext(withUser)
pw.print(ps.getInstantApp(user.id))
name.equals("getNetworkOperator") || name.equals("gsm.operator.numeric")
"Unsupported filesystem scheme found in the backup target url. Error Message: " + expMsg
actionRequest.getAttribute(WebKeys.SOFTWARE_CATALOG_PRODUCT_ENTRY)
!mIsOnInnerCircle && hour != 0
minutes >= 2 || (minutes > 0 && seconds == 0)
lp.height != defaultHeight && !mOverlayContent
choices.size()
v.startDrag(clip,thumb,false)
new SvnRollbackProvider(selectedRevisions,mySvnVcs)
ProtobufUtil.createSnapshotDesc(snapshot)
NONCONFORMING_LR_RULE(169,"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle",ErrorSeverity.ERROR)
logger.warn("Not a directory: " + dir.getAbsolutePath())
dlFileEntryFinder.filterFindByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
Assert.assertEquals(1630,md.getMetrics().size())
modificationDateField != null && "".equals(((String)modificationDateField.get()).trim())
scheduler == null
!mIsAttached || mAdapter == null
count < 0
region == null || !region.isValid()
CACHE_LAYOUT_VERSION=10
{type}
page < 0
Timber.i("Dismiss dialogs")
Measures.nDCG(results,test)
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(1,new ClassifierOverride(1))
selenium.isElementPresent("link=Control Panel")
appearance.getFloat(attr,0)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"dbinfo",pw)
Thread.sleep(1000)
myDiffContentFactory.create(myProject,content)
WebUtils.isForwardOrInclude(request)
System.nanoTime()
meta.getEnclosure()
assertEquals("Incorrect number of commits in history",myRevisions.size(),revisions.size())
MAX_DIMEN_FOR_ROUNDING=1920
mock.setMinimumResultWaitTime(1500)
info.getType() & 0xf
replaces="cached"
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
assertEquals(0,dataCountsDoc.get("bucket_count"))
Exception e
selenium.isElementPresent("link=Control Panel")
gl2.glGetProgramiv(program,GL2ES2.GL_INFO_LOG_LENGTH,val,0)
LogFactory.getLogger().debug("Could not find table or view " + tableName + " for column "+ columnName)
field.getType()
attributes.getAllFlags()
map.get(beanName).getType()
SystemClock.uptimeMillis()
assertEquals(fc2,fc)
checkArgument(!"/".equals(resourcePath),"%s is the classpath root",resourcePath)
getSupportActionBar()
JSONUtilities.safePut(options,"guessCellValueTypes",false)
name.equals(SETUP_METHOD_NAME) || name.equals(GET_ROOT_COMPONENT_METHOD_NAME) || name.equals(LOAD_BUTTON_TEXT_METHOD)|| name.equals(LOAD_LABEL_TEXT_METHOD)
myFindModel.isRegularExpressions()
sizeNeeded > items.length
getBaseVersion()
LOG.debug("Gradle execution error",e)
jaxbbean.addConstructorArgValue(paramsbean.getBeanDefinition())
actionButton.setRolloverIcon(new ImageIcon(ca.getRolloverIcon()).getImage())
trade.getLimit()
part != null && tile.wireManager.getColorOfPart(part) != null
mService.setAppPolicy(UID_A,POLICY_NONE)
getJndiString(JNDI_JMX_PASSWORD)
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
dimensionsSpec.getDimensionNames()
Integer.parseInt(leftStr)
mAttributes.getAllFlags()
actionId.equals(ActionKeys.IMPERSONATE) && PortalUtil.isOmniadmin(userId) && !permissionChecker.isOmniadmin()
new CrypticClue("A great view - watch the rapidly drying hides get splashed. Check the box you are sitting on.",BOXES,new WorldPoint(2523,3493,1),"Almera's House north of Baxtorian Falls, search boxes on the 2nd floor.")
!value.isNull()
assertEquals(5,dict.getSize())
Exception e
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
IccUtils.cdmaBcdByteToInt((byte)0x8c)
Object anchor
BackupManagerServiceInterface svc=mService; 
storedHash == null || TextUtils.isEmpty(credential)
potentialResponse != null
Exception t
s > 1e-4
args.length == 1
assertLeftRightCategory(3,category1b)
type.getDeclaredConstructor()
new NativeAllocationRegistry(Paint.class.getClassLoader(),nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
startActivity(mAdapter.intentForPosition(0))
"Second position set to " + pos2 + " ("+ region.getArea()+ ")."
new byte[18]
-3
result.signum() < 0
callbacks.onHardwarePreDraw(canvas)
mService.mDisplayContents.valueAt(i)
n == stringLength || n == -1
mAppToken.isVisible()
hasColumn("MicroblogsEntry","creatorClassNameId")
SCAN_STATUS_COMPLETE=2
public KeepWordFilter create(TokenStream input){   return new KeepWordFilter(input,words,ignoreCase); } 
tplSnd.getParent().getChildren()[0]
enabled=false
containsInAnyOrder("VARIABLE=success")
objFactory.buildBean(name,null,true)
AsyncTask libraryTask
ACRA.log.i(LOG_TAG,context.getPackageName() + " reports will be sent by Http.")
Map.Entry<String,Object>
fluid != null && FluidRegistry.isFluidRegistered(fluid)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
status == BackupConstants.TRANSPORT_OK
mJobs.valueAt(i)
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button); 
resourceInfo.getServiceClass()
FluentIterable.from(method.getAnnotations())
sb.length()
codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
this.thrown.expect(IllegalStateException.class)
listAdapter.swapCursor(cursor)
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.",e)
Thread.sleep(1000)
SyncAccountService.addSyncAccount(filePathName,10,"test@liferay.com","test",false,"http://localhost:8080/api/jsonws")
metadata.getFaceRectangles()
LOGGER.fine(e.toString())
origin.realComponent().doubleValue() >= other
logger.warn("{}",builder.toString())
buf.writerIndex()
cs == null || cs.length() == 0
selenium.isElementPresent("link=Control Panel")
mPowerRequest.policy == DisplayPowerRequest.POLICY_DIM && !mAllowAutoBrightnessWhileDozingConfig
!Algorithms.isEmpty(address) && !address.equals(title) && !address.equals(getMapActivity().getString(R.string.no_address_found))
drawerLayout.closeDrawers()
bucket.isExists()
return true; 
expected == long.class || expected == Long.class
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
new CvsOperationExecutor(false,project,ModalityState.defaultModalityState())
UpgradeStepRegistrator.class
lookup="java:comp/ds"
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor1",element.getText())
!location.isConstant() || location.asConstant().isNull()
assertEquals(10,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
TaskDisplayNameMixin.class
recipient.getExpireMessages() * 1000L
dockedBounds.bottom + dockDividerWidth
factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)
serviceTester.systemRunning()
loaded.getLoaded().getDeclaredConstructor()
!mDreamsEnabledOnBatteryConfig
mService.mLockTaskController.checkLockedTask(tr)
ctx.getApplicationContext()
mpi > -135 || !leftSide
h - y
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
dataSource.setInitExceptionThrow(false)
"Python packaging tools and " + frameworkName + " will be installed on the selected interpreter"
logger.trace("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
return mappingDestFile; 
new StringBuilder("Unavailable cipher suites: ")
assertSameLines("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>foo</groupId>\r\n"+ "    <artifactId>bar</artifactId>\r\n"+ "    <version>baz</version>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
selenium.isElementPresent("link=Control Panel")
PrintAttributes.enforceValidDuplexMode(currentMode)
mExpandedDialog != null && mExpandedParams != null
enabled=false
_connector.getResponse("METHOD /f\00o HTTP/1.0\n\n")
Lists.newCopyOnWriteArrayList()
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
arrayContaining("bar","bar-closed","foofoobar","foofoo","foofoo-closed")
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
recordSetVersion1.getVersion()
layout.setReleaseLabel(label)
info.getVoiceMailNumberForSubscriber(subId,mContext.getOpPackageName())
nspe.getMessage()
new AsyncTask<Void,Void,Void>(){   @Override protected Void doInBackground(  Void... voids){     RecipientDatabase db=DatabaseFactory.getRecipientDatabase(getContext());     db.setMessageRingtone(recipient,NotificationChannels.getMessageRingtone(context,recipient));     db.setMessageVibrate(recipient,NotificationChannels.getMessageVibrate(context,recipient) ? VibrateState.ENABLED : VibrateState.DISABLED);     return null;   } } .executeOnExecutor(AsyncTask.SERIAL_EXECUTOR)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
ci.getConduit(info,bus)
failure == null
new ObjectToMapTransformer(jsonObjectMapper)
Long.parseLong(timeString)
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
return mIdleTimeMillis; 
Double value
obj.getRequiredTokens()
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
value == null
treeStyles.treeStylesCss()
LOGGER.info("Register profile {}",qualityProfile.getQProfileName())
Validator.isNull(className) && Validator.isNull(classPK) && !User.isDefaultUser(userId)
Log.warn("Disable autoInstallOSGiBundles as the contexts folder '" + scandir.getAbsolutePath() + " does not exist.")
private static class GetValueFromMapChecker extends JavaRecursiveElementVisitor {   private final PsiVariable key;   private final PsiVariable map;   private boolean getValueFromMap=false;   private boolean assigned=false;   GetValueFromMapChecker(  @NotNull PsiVariable map,  @NotNull PsiVariable key){     this.map=map;     this.key=key;   }   public void visitReferenceExpression(  PsiReferenceExpression expression){     if (assigned) {       return;     }     super.visitReferenceExpression(expression);     final PsiElement parent=expression.getParent();     if (parent instanceof PsiAssignmentExpression) {       final PsiElement target=expression.resolve();       if (key.equals(target)) {         assigned=true;       }  else       if (map.equals(target)) {         assigned=true;       }     }  else     if (!(parent instanceof PsiReferenceExpression)) {       return;     }     final PsiElement grandParent=parent.getParent();     if (!(grandParent instanceof PsiMethodCallExpression)) {       return;     }     final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;     final PsiReferenceExpression methodExpression=(PsiReferenceExpression)parent;     final PsiElement target=expression.resolve();     if (!map.equals(target)) {       return;     }     final String methodName=methodExpression.getReferenceName();     if (!"get".equals(methodName)) {       return;     }     final PsiExpressionList argumentList=methodCallExpression.getArgumentList();     final PsiExpression[] arguments=argumentList.getExpressions();     if (arguments.length != 1) {       return;     }     final PsiExpression argument=arguments[0];     if (!(argument instanceof PsiReferenceExpression)) {       return;     }     final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;     final PsiElement argumentTarget=referenceExpression.resolve();     if (!key.equals(argumentTarget)) {       return;     }     getValueFromMap=true;   }   public boolean isGetValueFromMap(){     return getValueFromMap && !assigned;   } } 
@SuppressWarnings("unused") public TypeaheadV3 files(int version,TypeaheadV3 t){   ArrayList<String> matches=H2O.getPM().calcTypeaheadMatches(t.src,t.limit);   t.matches=matches.toArray(new String[matches.size()]);   return t; } 
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
ONE_MINUS_DST_ALPHA(7)
expect(cluster.getClusterName()).andReturn("cluster").times(1)
redefined.getDeclaredConstructor()
requestedProvider.get().isAvailable(service)
json.getTextValue().getBytes("ISO-8859-1")
selenium.isElementPresent("link=Control Panel")
serviceFacade.updateProcessGroupContents(rev,groupId,versionControlInfoDto,flowSnapshot,getIdGenerationSeed().orElse(null),false,false,entity.getUpdateDescendantVersionedFlows())
getTablename().getName()
startActivityAsUser(intent,UserHandle.CURRENT)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mDisplayContent.mDividerControllerLocked.getWidth()
return true; 
drawable != null && mActualHeight > mClipTopAmount
selenium.isElementPresent("link=Control Panel")
"Unknown id: " + id
new Duration(60,TimeUnit.SECONDS)
assertFalse(bulkResponse.buildFailureMessage(),bulkResponse.hasFailures())
mCryptoPerformanceMap.get(userId)
!enu.hasMoreElements()
"Excluding secondary region " + bestRegionReplica + " - trying to find a different region to refresh files."
recyclerView.getChildAdapterPosition(view)
_typeSettingsProperties.toSortedString()
DynamicCounter.increment(filterName,"status","success","type",filter.filterType())
mView.setVisibility(mFinalVisibility)
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)
type.getDeclaredConstructor()
parsedResult.getType()
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
this.params.getItem()
@Mock private PanProfile mPanProfile; 
client.filter(basicAuthentication("test","this")).get().uri("/").exchange().expectStatus().isOk().expectBody(String.class)
(Number)array[this.index]
Color.fromRGB(0x253192)
Response.ok(null,MediaType.TEXT_PLAIN)
log.debug("Error while closing command context",exception)
i < 100000000
TelephonyManager.getDefault().getCurrentPhoneType()
assertModel(MODEL).query("select state, city from zips where state = 'CA'").limit(3)
new DSXOrder(pair,type,new BigDecimal("0.01"),new BigDecimal("900"),0,DSXOrder.OrderType.limit)
SOCKET_TIMEOUT=30_000
value.toLowerCase().startsWith(constraintLowerCase)
new Message(MESSAGE_TEXT)
mSmallBatteryDevice ? 15 : 30
!file.isHidden() && file.getPath().endsWith(".swf") && !file.getPath().endsWith("/designer.swf")
mock.expectedBodiesReceivedInAnyOrder("B+END","A+END")
/**   * {@inheritDoc}  */ @Override public StringProperty clone(){   StringProperty prop=(StringProperty)super.clone();   prop.value=value;   return prop; } 
mUiHandler.removeCallbacks(pae)
getCurrCapacityUsed()
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
newCount <= reservoirSize
assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)
@Override protected LeafBlockWrapper getPreviousBlock(){   if (myChildren == null || myChildren.isEmpty()) {     return null;   }   return myChildren.get(0).getPreviousBlock(); } 
new IllegalStateException("Could not find sliceShift")
Thread.sleep(500)
scanner.acceptsInput(fqn)
this.httpHandler.handle(req,resp).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new AlertDialog.Builder(getActivity(),R.style.Theme_ownCloud_Dialog_NoButtonBarStyle)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
type == null || !type.getOpenWithApplication().isPresent()
log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()),e)
Map.class
type == VertexDataType.VertexBufferObject || Mesh.forceVBO
clientBuilder.connectTimeout(timeout,TimeUnit.MILLISECONDS)
_log.warn(ioe,ioe)
mPhones.contains(phone)
imageWidth / images.size()
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
Duration.millis(120)
printServices.size() >= 1
public void testJobQueues() throws Exception {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo="Maximum Tasks Per Job :: 10";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals("default",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName("test-job-queue-info-test");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } 
CaseInsensitiveString pipelineName
selenium.isElementPresent("link=Control Panel")
Assert.assertEquals(0L,key)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
mContext.startActivityAsUser(intent,UserHandle.CURRENT)
vector.iterateNonZero()
TelephonyManager.getDefault().getCurrentPhoneType()
TelephonyManager.getDefault().getCurrentPhoneType()
substringBox.setSelected(true)
nextRenderId=32
isLinux(expectedSql)
id=10999
YogaNode.jni_YGNodeSetOwner(child.mNativePointer,0)
mDisplayContent.mDividerControllerLocked.getWidth()
!isDefault() && !ApplicationManager.getApplication().isUnitTestMode() && !ApplicationManager.getApplication().isHeadlessEnvironment()
mAutoScroller.autoScroll(-mFooterOffset,mSwipingToLoadMoreToDefaultScrollingDuration)
bibentries == null || bibentries.size() == 0
logger.trace("attempting to login")
mapper.getTypeFactory().constructType(AuthConfig.class)
VectorAllocator.getAllocator(vv,200)
LOGGER.debug("Application {} refreshed",newApp)
app.getSettings().AVOID_TOLL_ROADS.getModeValue(params.mode)
ContactModel::getFacebookSn
checkNotNullOrEmpty(jsonText,"Json should not be null")
public ExecutionStrategyParameters transform(Consumer<Builder> builderConsumer){   Builder builder=newParameters(this);   builderConsumer.accept(builder);   return builder.build(); } 
!filename.endsWith(".jpg")
return 90_000; 
StringBuffer builder=new StringBuffer(); 
value.toLowerCase().startsWith(constraintLowerCase)
public AfterWatermarkEarlyAndLate withLateFirings(OnceTrigger lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
from > to
String textToUse; 
content.contains(expected)
numKeys > 0
list.toLongArray()
_portal.getSiteDefaultLocale(groupId)
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.getDefaultInstance())
MonitoringPortlet.isMonitoringPortletActionRequest()
clocks.uptime+=111
tempBlock.getPath()
Thread.sleep(1000)
hook.stopPlay(program)
binary.size()
delegate.upsert(entity)
i <= pmd.getParameterCount()
requireContext()
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
nextInfo == null || nextInfo.directionInfo == null
verifyPosition(decoder,text("(865733028143493,00I76,00,000,,,,,A,133755,210617,10.57354,077.24912,SW,000,00598,00000,K,0017368,1,12.7,,,0.000,,,0,0,0,0,1,1,0,,)074"))
block.postdominator=firstSucc
new TransientPropertyValueException("object references an unsaved transient instance - save the transient instance before flushing",childEntityName,parentEntityName,propertyName)
suiteMethod.invoke(null)
mGnssCallback != null
publisher.publishWanReplicationUpdateBackup(name,view)
realm.checkIfValid()
mHotspotBounds.set(left,top,right,bottom)
type.getDeclaredConstructor()
optional=2
"Camera resolution: " + cameraResolution
i <= 3
DEFAULT_ADDRESS_BBOX_RADIUS * 5
i >= 0
t.equalsIgnoreCase(type)
r.toLocalRuleString()
removeUserGroupIds.isEmpty()
new ListWidget(RuntimeEnvironment.application,formEntryPrompt,false,false)
put.getWriteToWAL()
new Counter(mOnBatteryScreenOffTimeBase)
askForPermissions(new String[]{Manifest.permission.CAMERA},2)
@InputMagicNumberIntMethodAnnotation(42)
normalizedSuffix.length()
protocolProvider.getProtocolDisplayName()
case 7: 
log.debug("munlocking " + file + " with length "+ length)
keyword.equals(CONF_NAME)
new SparkRuntimeContext(p,options)
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.INFORMATIONAL,getHttpStatusSeries(result))
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),invoiceConfig,internalCallContext)
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24))
blockUri.getIdentifier().toLowerCase()
isTestOnReturn()
LogFactory.getLogger().debug("Could not find table or view " + tempTable.getName() + " for column "+ column.getName())
controller != null && controller.getMedia() != null
response.location()
flexItem.getMarginLeft()
type.getIconKeyName()
mBluetoothHeadset.connectAudio()
myCardModel.getQuestionAlign()
sm.getString("standardRoot.startInvalidMain",f.getAbsolutePath())
fieldType.equals(SupportedFieldType.DECIMAL.toString()) || fieldType.equals(SupportedFieldType.MONEY.toString())
selenium.isElementPresent("link=Control Panel")
Long.valueOf(3)
new HashSet<>(0)
"$" + name
expect(cluster.getClusterName()).andReturn("cluster").times(1)
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt)
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
instance.startAction_New(getDefaultTitle(),null,false)
sizeModeClass.equals("ScaledSizeMode")
JavaSourceGroovyPackagesNonSecuritySuite.suite()
XmppStringUtils.parseBareJid(user)
guiResource.getImageTransGraph()
BodyAvailabilityTest.class
Throwable e
selenium.isElementPresent("link=Control Panel")
new GeneratorException("Error writing " + file.getAbsolutePath(),e)
mActionBar != null && mActionBar.isOverflowReserved()
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
uiSettings.setShowEditorToolTip(myShowCodeLensInEditorCheckBox.isSelected())
assertPhoneNumberNotEqual("123123","0123123",false)
selenium.isElementPresent("link=Control Panel")
Slog.d(TAG,"showSaveLocked(): no mStructure")
Reflection.methodHandle(type,"sizeOf")
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.short-title"))
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
attemptedPushes % 10000
FluentIterable.from(method.getAnnotations())
new StatsLogEventWrapper(tagId,10)
DEBUG=false
new IndexWriter(ramDir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
new Paint()
new ByteArrayResource(groovyPages.get(location).getBytes("UTF-8"),location)
Integer.parseInt(stackIdStr)
LOGGER.error("Error during file import",e3)
appearance.getFloat(attr,0)
TelephonyManager.getDefault().getCurrentPhoneType()
Integer.parseInt(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
CloudJettyRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders); 
pkgs.get(j)
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
utf.length + 32
targetMeta.convertData(sourceMetaCopy,r[rowcolumn])
Thread.sleep(7000)
upgradeVersion=37
Context.getAdministrationService().saveGlobalProperty(propToUpdate)
sTestCaseCounter == 0
eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT
new CuratorEventImpl(client,CuratorEventType.CHILDREN,rc,path,null,o,stat,null,strings,null,null,null)
new Location(resource,metadata)
DEFAULT_MAX_DHCP_RETRIES=9
logger.debug("AUTHENTICATE")
new Message(MESSAGE_TEXT,false)
TypeConversionUtil.isAssignable(myT,myS)
new ObjectMapper().readerFor(HashMap.class)
mm.tryLock(key,10,TimeUnit.SECONDS)
!thisMatched && !elem.isInflected() && elem.getPOStag() == null && (prevElement != null && prevElement.getExceptionList() == null)
lookup.getReportingTaskByType(requestReportingTask.getType())
concatRef.isEightBits=true
new Packet(data,operation.getPartitionId())
isBookmarksList()
new CompositeException(t,e)
readWifiSleepPolicy()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
EmitterProcessor.create(1,false)
new Neo4jGraph(database.graph,false)
gatecoinOrder.getSide()
result.getCause()
application.getBaseContext()
m.mul(beta1)
position + dockDividerWidth
viewerPanel.setRedraw(false)
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new EnterSelectionDialog(shell,err_lines,Messages.getString("SpoonLog.Dialog.ErrorLines.Title"),Messages.getString("SpoonLog.Dialog.ErrorLines.Message"))
(j == -1) || (text.charAt(i + offset) == pattern.charAt(j)) || (text.charAt(i + offset) == Character.toUpperCase(pattern.charAt(j)))
XmppStringUtils.parseBareJid(user)
doTest(true)
new TaskInstanceExtensionImpl(companyId,groupId,userId,assignees,workflowContextJSON,taskInstance_)
channelBundles.contains(channelBundle)
length-- > 0 && l < 4
startGridsMultiThreaded(NODES_CNT)
errorCheckInterval=500
INITIAL_LAUNCH_IDLE_TIMEOUT=60000
Throwable e
container.getVersion().getId()
isUp()
/**   * Defines the target visibility of properties in the target entity. Note this is not applicable to abstract or immutable classes.  * @return the visibility level of properties in the target entity  */ PropertyVisibility propertyVisibility() default PropertyVisibility.PRIVATE; 
mMccStr == null
dir.mkdirs()
order.getSize()
writeRepeatedSFixed64Impl(id,val)
Throwable t
logger.fine("Normalizing")
@Nullable
getViewAtRelativeIndex(1)
userGroupMember.getUserGroupId()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
permissions=256
player.sendStatusMessage(new TextComponentString("Invalid schematic: " + e.getMessage()),true)
encodeMapValue(value)
revisions.isEmpty()
url.toServiceStringWithoutResolving()
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
getService().hasClipboardText()
loaded.getLoaded().getDeclaredConstructor()
myErrors.put(xmlName,error)
List<Id>
/**   * Expose target document ID as this value's wrapped value. Primarily implemented to allow for transparent interoperability when used in concrete document types.  * @return reference DocumentId, or null if none has been set  */ @Override public DocumentId getWrappedValue(){   return documentId.orElse(null); } 
new GroupDialog(frame,null)
parent.getSubmittedCount() <= (parent.getPoolSize())
rhs.getScore()
JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA")
db.assertColumnDefinition(TABLE,"b_qualifier",Types.VARCHAR,10,true)
value == null || value.size() == 0
!elementAt.isValid()
Exception e
61L + 122L
ChronicleEngineEndpoint.class
parcel.readString()
new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "+ "Remove the extension or add a type parameter to it.")
SolidityType.Bytes32Type.decodeBytes32(topicBytes,0)
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
mAccessibilityController.isAccessibilityEnabled()
return false; 
Arrays.asList(ProjectUri.PluginRepositories.PluginRepository.xUri,ProjectUri.Repositories.Repository.xUri,ProjectUri.Profiles.Profile.xUri)
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss(Activity.RESULT_OK,payloadToMap(payload))
mObsoleteAgents.valueAt(i)
new Paint()
convert31YToMeters(xB,xA)
new SnippetInstaller(runtime,assumptions,runtime.getGraalRuntime().getTarget())
checkCall(receiver)
V
win.mRemoved || !win.mHasSurface || !win.mPolicyVisibility
mQsDensityContainer.getLayoutParams()
Integer.parseInt(param.getValue())
fragmentManager.beginTransaction().add(rxPermissionsFragment,TAG).commitAllowingStateLoss()
args[4]
DEBUG=false
2L * memsize.value() * 1024* 1024
mDark == dark || mContractedChild == null
VIBRATE_LENGTH_MS=50
false && canHaveDisplayList() && canvas.isHardwareAccelerated()
doConvertAndCast(returnType)
selenium.isElementPresent("link=Control Panel")
new KBArticleContentException("No content found after title")
bucket.isExists()
graphModel.getUndirectedGraphVisible()
Character.isLetterOrDigit(c)
child.getMeasuredWidth()
Exception e
realm.createObject(AllTypes.class,newObject.getColumnString())
RtlUtils.isLtr(english2)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
SPEC_REGEN_TICKS=50
MAX_CACHED_HBASE_INSTANCES=2001
builder.run(context.getEditor(),false)
refreshRotationLockTile()
StringBuilder ret=new StringBuilder(100); 
triggerProto.getAfterEndOfWindow()
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
/**   * Reads.   */ private final LongAdder8 reads=new LongAdder8(); 
DEBUG=false
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
shuffleWithNonExistentUuids(project1.uuid(),project3.uuid())
getTelecomService().getVoiceMailNumber(accountHandle)
Assert.assertNotEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
DEFAULT_WIDTH=0x00010000
file.getFile()
LOG.error(exc)
colors.getThemeAttributeId(i,0)
verifyGetCommandNameCalled(2)
mSyncStatus.valueAt(i)
boardPort.getPrefs().getOrExcept("iserial")
two.setAxisIndex(1)
api != null
selenium.isElementPresent("link=Control Panel")
retryHandler.onComplete(results)
selenium.isElementPresent("link=Control Panel")
Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
buildLocalCalleeContext(targetMethod,ectx)
classNameLocalService.getClassNameId(className)
assertEquals("Incorrect number of fields",2,f.length)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
result.isEmpty() || !(result.get(0) instanceof Separator)
selenium.isElementPresent("link=Control Panel")
mVectorState == null || mVectorState.mVPathRenderer == null
Throwable e
ran.nextInt(250)
mQsDensityContainer.getX()
mVibratorService.vibratePattern(null,new long[]{0},0,new Binder())
Position.PREFIX_IN + 8
Set<Class<? extends ITestNGListener>>
alterStatement.getUpdateColumns().put(oldName,oldDefinition)
public NGramTokenFilter create(TokenStream input){   return new NGramTokenFilter(input,minGramSize,maxGramSize); } 
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
mInterpolator == null || mNativePtr == null
expect(cluster.getClusterName()).andReturn("clusterOld").times(1)
Validate.notEmpty(name,"Cookie name must not be empty")
dpToPx(8f)
saveCredentialsInSmartLock()
FileUtil.toContainerFile(searchPath)
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
localFileSystem.refreshAndFindFileByIoFile(vimKeyMapFile)
one.setAxisIndex(LEAF)
!mLatestResult.isSslRecoverableException()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
Exception lastException=null; 
PortletFileRepositoryUtil.getPortletRepositoryId(groupId,PortletKeys.DOCUMENT_LIBRARY,serviceContext)
new UpdateNotifierTimerTask(this,execSvc,verChecker)
logger.warn("couldn't execute commandLine '" + commandLine + "'",e)
intervalFraction * (nextValue - prevValue)
intent.resolveType(getContentResolver())
childLeftTuple.reAddRight()
ClassUtil.verifyMustOverride(BeanSerializerFactory.class,this,"withConfig")
contract.getNewContract()
analysis.getTypeWithCoercions(expression)
logger.debug("Did not recognise element named {}",localName)
minBukkitBuildVersion=698
context.var("long",2)
Cache.getTableName(type)
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,tag,notification.toString())
new Paint(Paint.ANTI_ALIAS_FLAG)
type.getDeclaredConstructor()
type.getDeclaredConstructor()
for (String s : records) {   if (ver.length() > 0) {     ver.append(',');   }   ver.append(s); } 
assertEquals("throughput",47.75795226,model.getThroughput(),0.000000001)
new IllegalStateException("Legacy advertising can't include TX power level in header")
Thread.sleep(1000)
StringBuilder numberedSrcTextBuffer=new StringBuilder(); 
input.get(b,off,toRead)
fieldType.equals(SupportedFieldType.DECIMAL.toString()) || fieldType.equals(SupportedFieldType.MONEY.toString())
config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
engine.refresh("test")
prevFolding != null
getBatchId()
PortletPreferencesFactoryUtil.fromXML(ownerId,ownerType,preferences)
getFloatValue(key,0)
StringUtils.isEmpty(initExpr) ? 0L : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
doTest(false)
planRouteContext.getSnappedMode().getMapIconId()
Integer.parseInt(stackIdStr)
waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)
nodeInfo.getPlugins().getPluginInfos()
factory.getDeclaredConstructor()
get() == null
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
type.getDeclaredConstructor()
CollectionItemInfo.obtain(row,1,column,1,isHeading,isSelected)
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod1.run();   } } 
new Paint(Paint.ANTI_ALIAS_FLAG)
(QMMetaEvent)items[i].getData()
getPointer().getShort(0)
assertLeftRightCategory(1,category1a)
mTargetSdk > O
selenium.isElementPresent("link=Control Panel")
counter < max
FastMath.min(origin,num.doubleValue())
zController.enqueue(doRequestStop())
assertEquals(3,schema.getUDTs().size())
store.unregisterMBean()
RecentsHorizontalScrollView.super.removeView(view)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
eventFunc.equals("conference_del_member") || eventFunc.equals("conference_member_del")
max.getBlockZ()
requestReceived.await(10,TimeUnit.SECONDS)
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
mAttributes.getAllFlags()
IllegalStateException expected
return mChangingAppearingDelay; 
Throwable e
mPhones.contains(phone)
super.createNormalMetaClass(theClass,registry)
handler.pause()
lock.isHeldByCurrentThread()
reader.close()
index >= 0
mSharedElements.size()
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
dynamicType.getLoaded().getDeclaredConstructor()
setFrame(0,false,mAnimationState.getChildCount() > 1 || !mAnimationState.mOneShot)
Slog.w(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
nodeInfo.getPlugins().getPluginInfos()
ufsPath.toString()
lineArgs[2]
_log.error("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
enabledDisabled(checkNullability)
result.ocFile.getMimeType()
GrailsDataBinder.createBinder(instance,instance.getClass().getName(),request)
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
out.writeByte(CONSTANT_VALUE_ARRAY_TAG)
otherEvent.getElement()
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
url.addEncodedArgument(selectName,value)
lastUid > 0
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),delete,true)
setValue(object,value.intValue())
DISMISS_MIN_DRAG_WIDTH_RATIO=.33f
currencyPair.counter.getCurrencyCode().toUpperCase()
StringBuilder answer=new StringBuilder(); 
cause.getMessage().contains("Relative Redirect detected on")
LOGGER.lifecycle(msg.apply())
Exception t
stmt.bind()
onDetachedFromWindow()
String message
ATLAS_MAP_ENTRY_FIELD_COUNT=3
Utils.createInformativeDialog(context,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
new LayerVisitor(asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
Log_OC.e(TAG,"Unexpected intent " + intent.toString())
mVibratorService.vibrate(null,2000,new Binder())
selenium.isElementPresent("link=Control Panel")
from.getPath()
(int)value <= 0
return p; 
doTest(true,false)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
redefinesClasses=true
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0)
String... pathParams
this.beanFactory.containsBeanDefinition(beanName)
IDLE_TIMEOUT_MS=240000
canWrite(clazz,mediaType)
this.spiceServiceListenerSet.remove(spiceServiceServiceListener)
color.toLowerCase(Locale.ROOT)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
GridCacheEntry<String,String>
FileTemplateManager.getInstance(module.getProject())
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
statistics.addGetTimeNanos(System.nanoTime() - start)
mNwService.getInterfaceConfig(mTetherInterfaceName)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
new Paint()
!u.equals(user)
AtmosphereRequest request
logger.trace("Mapped {} to {}",t,e.getValue())
pyClass.getClassName()
columnFamily()
ir.mHandler != null && ir.mImageListener != null
matcher.find()
FileUtil.loadFile(txtFile,true)
bestState.score()
tracesDir.mkdirs()
logger.error("failed to create index [{}]",t,indexMetaData.index())
_buildTemplateWithGradle("content-targeting-rule","rule-dependency-management","--dependency-management-enabled")
Arrays.asList("bash",command)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.media.omx@1.0::IOmx","android.hardware.sensors@1.0::ISensors","android.hardware.vr@1.0::IVr")
Throwable t
type.getDeclaredConstructor()
AlluxioWorker.class
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
(float)getMax() / 20
j >= size
result < START_SUCCESS
return 1; 
debug(Log.IGNORED,ignored)
closeDeclarationWithCommentBinders(getterOrSetter,PROPERTY_ACCESSOR,true)
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
optimize()
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
new LFWDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,nChannels},outputNum,useSubset,true,new Random(seed))
mMenu.getNonActionItems()
writeSource.setWriteCount()
mService.queryDisplayStatus(getCallbackWrapper(callback))
logger.debug("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
child.resetRtlProperties()
mapper.getTypeFactory().constructType(UpdateContainerCmdImpl.class)
selenium.click("//li[4]/span/a/span")
mSyncStatus.valueAt(i)
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
/**   * Get DR pause state.  * @return DR pause state.  */ @Nullable public GridDrStatus drPauseState(); 
client.getLocalPlayer() != null && client.getLocalPlayer().getName() != null
getEffectiveHstsEnforced()
ImmutableList<Boolean>
show.isInternal()
vb.getData().rewind()
0 != mUnwantedNetworkCapabilities
suppressTrailingZeroElements == false
return true; 
new Paint()
websocketComponent.setMaxThreads(20)
getTemplates(companyId,new long[]{groupId},classNameId,0,resourceClassNameId,null,null,status)
List<HostAddress>
mQueryTextView.length()
sb.length()
policy_init == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
GridCacheEntry<String,String>
UpdateValueAndNotifyManager()
mView.postOnAnimation(mAnimationStarter)
native_get_videoeditor_export_level(vidCodec)
mCollapseOffset > 0
CANCEL_TIMEOUT_LIMIT=300
mWindowManager.removeViewImmediate(mPopupView)
/**   * Returns a trigger which never fires. Output will be produced from the using  {@link GroupByKey}when the  {@link BoundedWindow} closes.  */ public static NeverTrigger ever(){   return new NeverTrigger(); } 
popup.requestFocusInWindow()
MAX_PERCENT_DIFFERENCE=0.3
mUiHandler.postDelayed(pae,timeout)
filesQueue.remove(0)
taskIds.size()
preloadQueue.size == 0 || tasks.size() == 0
e.toString()
new PacketDecoder(support,null)
StringUtils.isEmpty(value) ? false : Boolean.parseBoolean(value)
mf.filter(popup.getMenu(),false)
checkArgument(prestoTypeParameters.size() == fieldTypes.size(),"Schema mismatch, metastore schema for row column %s has %s fields but parquet schema has %s fields",columnName,prestoTypeParameters.size(),fieldTypes.size())
pmmlScorecard.getUseReasonCodes()
refreshRotationLockTile()
(Transaction)result.graph()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
Arrays.hashCode(mData)
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING,Binder.getCallingUserHandle())
selenium.isElementPresent("link=Control Panel")
Element[]
modified | f.updateField()
vp.getCamera().resize(width,height,false)
mDownloadXtraDataPending=false
new RuntimeException(e)
new LeftTuple(f0,sink)
new IllegalArgumentException("the name is null")
objectColumnCache.values()
mQsDensityContainer.getLayoutParams()
selenium.isElementPresent("link=Control Panel")
libraryBottomDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
item.send(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
assertFalse(constraints.isEmpty())
UastUtils.isUastChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
resources.getClassLoaderResource(path)
assertEquals(tick8,results_overlapped_by.get(0))
Exception e
intervalFraction * (nextValue - prevValue)
ctx.sendUpstream(e)
new StreamingModeExecutionState(NameContextsForTests.nameContextForTest(),"testState",null,NoopProfileScope.NOOP,null)
Beans.newDuration(jpaProperties.getPool().getMaxWait()).getSeconds()
TelephonyManager.getDefault().getCurrentPhoneType()
part.getPartitionPath()
WEB_SYNC_MANAGER=false
LOGGER.debug("[{}] has loaded the CAS application context",event.getServletContext().getServerInfo())
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Integer.parseInt(taskIdStr)
mHotspotBounds.set(left,top,right,bottom)
makeString(actual,",","(",")")
Futures.transform(inputsUploadedFuture,ignored -> {   uploadingInputsScope.close();   return actionInfo.withRequiredData(ImmutableMap.of()); } ,MoreExecutors.directExecutor())
lineageInfo.getChildren()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.SYSTEM_NAVIGATION_KEYS_ENABLED,1)
log.trace("Failed to deploy!!",res2.cause())
requestURI.length() - 6
USE_DISPLAY_LIST_PROPERTIES=false
ThirdEyeUtils.getTimestampTimeSpecFromDatasetConfig(datasetConfig)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
assertTrue(qr.hasFullRank())
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
stat.st_size.longValue()
Stream.of("CYPHER 3.1","CYPHER 3.4")
cache.putRecord(key,record)
String.format("Timeout waiting to lock %s. It is currently in use by another Gradle instance.%nOwner PID: %s%nOur PID: %s%nOwner Operation: %s%nOur operation: %s%nLock file: %s",displayName,ownerPid,metaDataProvider.getProcessIdentifier(),ownerOperation,operationDisplayName,lockFile)
cache1.getAndRemove(1)
Exception e
ImmutableSet.of("key","vertex","edge","element","property","label")
retriever.getFrameAtTime(-1)
otherSuperMethod.getTypeParameters()
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
new QuickAdapter(PAGE_SIZE)
myCache1.get("myKey1").getObjectValue()
getDelegate().getDefaultCipherSuites()
(xmin > x && xmin < x + width) && (xmax > x && xmax < x + width)
invoice.getCreditAdjAmount()
configServerSpec.size() > 0
timer.schedule(timerTask,period,period)
assertEquals(1,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
result.setUseBufferedWriter(true)
size=250
MavenLog.LOG.info(e)
logger.error("Invalid Atmosphere Version {}",javascriptVersion)
index >= 0
CommonUtils.randomAlphaNumString(random.nextInt(10))
MultiValueMap<String,Object>
response.getRawStatusCode()
httpResponseCode != 204
gatt.enableAdvertisingSet(this.advertiserId,enable,timeout)
item.getName().equals(name)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionTanh.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,43.457087913127,DeepLearningParameters.Activation.Tanh)
case 2: 
me.showWebPage(errorUrl,false,true,null)
mAuthorities.valueAt(i)
data.position()
status().isFound()
!mScreenOnEarly
Long.parseLong(delay)
mRouter.selectRouteInt(mRouteTypes,route)
Protocol.read(inputStream)
apnContext.getWaitingApns()
root != null && root.getSourceSection() != null
typeConverter.convertTo(XMLStreamReader.class,exchange,createNonXmlFilterReader(exchange,stream))
result.expectedMinimumMessageCount(2)
Log_OC.e(TAG,"\t account is NULL")
1 <= user.getListedCount()
Arrays.asList("http://schemas.xmlsoap.org/soap/","http://schemas.xmlsoap.org/wsdl/soap/","http://schemas.xmlsoap.org/wsdl/soap12/","http://schemas.xmlsoap.org/wsdl/soap/http","http://www.w3.org/2003/05/soap/bindings/HTTP/","http://www.w3.org/2010/soapjms/")
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
fragmentCollectionPersistence.findByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,false,DEFAULT_CONFIG_IGNORE_LIST)
atan(arr,Nd4j.copyOnOps)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY,String.class)
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable,false)
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,unassignedInfo,AllocationId.newInitializing(),true)
getEndPoint().tryFillInterested(_blockingReadCallback)
assertEquals("Response header " + name,value,result.getResponse().getHeader(name))
fileIds == null || fileIds.isEmpty()
payload.get(PRESENTATION_ID)
ImmutableList.of(new Identifier("a"),new Identifier("b"))
range.getTo()
showMessage(context.getString(R.string.osmand_routing_experimental),Toast.LENGTH_LONG)
mService.setAppPolicy(UID_A,POLICY_NONE)
Publisher<V>
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
Environment.getOemDirectory()
par == null || par.isEmpty()
display.getRealMetrics(dm)
mSyncStatus.valueAt(i)
assertInCompletionList("app.<caret>name","status_bar_style=","codesign_certificate")
m.getDeclaringClass()
String message
scorecard.getUseReasonCodes()
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Math.min(1.0,type.getProbability() / (1.0 - probabilityB))
Assert.assertSame(ehcache2,_ehcachePortalCache.ehcache)
Arrays.asList(0L,1L,2L,3L,4L)
endLine - startLine >= 0
Throwable e
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING,true)
logger.fine("Expanding Jquery Aliases")
getEnvironment().tryUpdateClasspath(Collections.singletonList(testDir))
mCurrIconRow != null && mCurrIconRow.isVisible()
9 * 60 * 1000
verificationResult.getCount() < 1
selectePathTemp != null
ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
assertThat(o.takeNext()).isNotNull()
return true; 
Throwable e
creatorId=metadata.getValue(ProducteevTask.CREATOR_ID)
engine.execute(query).dumpToString()
TextAttributesKey.createTextAttributesKey("DEFAULT_PARAMETER")
editable=false
res > mLen
event.isResuming() || event.isCancelled()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
sm.getString("introspection.classLoadFailed",className)
FolderList.actionHandleAccount(this,accounts[0],true)
createDouble(buffer.length(),init,workspace)
this.mGLState.setDitherEnabled(renderOptions.isDithering())
this.capNBT != null && serializable != null
ExecuteJobsRunnable.class
Trans != NO_TRANSPOSE
StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
cursor == null || !cursor.moveToFirst()
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope)
selenium.isElementPresent("link=Control Panel")
result.getReceipt().getEnergyTotal()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION,false)
totalHistogram.getValueAtPercentile(95)
Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,0)
1
Injection.provideDesignerNewsCommentsRepository(this)
(IntIntVector)row
GL.glDrawArrays(mode,first,count)
EnterpriseMapPublisherCreateCodec.decodeResponse(response).response
selenium.isElementPresent("link=Control Panel")
cache.putRecord(key,record)
RT.count(s)
onDetachedFromWindow()
_response.reset(true)
Throwable e
mg.maximumGap(input)
obtainMessage(MSG_TIMEOUT,state,0)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Thread.sleep(500)
controllerErrors != null && errors != null
mWindow == null || !mWindow.getSharedElementsUseOverlay()
this.constraints.updateFromFactHandle(workingMemory,handle)
this.registrations.values().stream().filter(registration -> registration.getClientAlias().equals(clientAlias)).findFirst().orElse(null)
LOG.debug("Removed connection {} for {} - open: {}",connection,this,open)
mWm.freezeRotation(-1)
doesAddToastWindowRequireToken(attrs.packageName,callingUid,parentWindow)
requestContext.getUri().getRawPath()
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope)
note2.getId()
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
loaded.getLoaded().getDeclaredConstructor()
factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)
inOrder.verify(mockAwareService).subscribe(any(),eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
mode != null && !mode.isEmpty()
Integer.parseInt(taskIdStr)
_log.warn(ioe,ioe)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
intent.resolveType(getContentResolver())
@ManyToOne(optional=false) private MiddleEntity middle; 
extractor.setScopeChildren()
61L + 122L
sweepAngleOuter >= 360.f && sweepAngleOuter % 360f <= Utils.FLOAT_EPSILON
getConnectTimeout()
DfsSearchResult.addOne(stats.totalTermFreq())
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
subscriber.next(String.valueOf(i))
sourceIterator.batch()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commitAllowingStateLoss()
logger.info(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=true
service.handlePinMmi(dialString,mContext.getOpPackageName())
j / 2 + min
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
4
cmdEntry.getKey().equals("-help") || cmdEntry.getKey().equals("-failover") || cmdEntry.getKey().equals("-transitionToObserver")
return availableAudioEncodings; 
kbase.newStatefulKnowledgeSession(conf)
Trans != NO_TRANSPOSE
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new Paint()
source=event
n.extras.getCharSequence(Notification.EXTRA_TITLE)
args.length >= 3
loaded.getLoaded().getDeclaredConstructor()
four.setAxisIndex(LEAF)
new SimpleDateFormat(DATE_TIME_FORMAT,Locale.US)
getMyApplication().getFavorites().getFavouritePoints()
Integer.parseInt(rightStr)
startActivityAsUser(intent,UserHandle.CURRENT)
result.getProject()
mUiHandler.postDelayed(pae,timeout)
assertFalse(prj.nodes().contains(grid(4).localNode()))
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,403)
mPowerManager.isInteractive()
vb.getData().limit()
exclude.hashCode()
packet.getFrom().split("/",2)
mAuthorities.valueAt(i)
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED) || ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)
public EdgeNGramTokenFilter create(TokenStream input){   return new EdgeNGramTokenFilter(input,side,minGramSize,maxGramSize); } 
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString())
getName()
defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
new FileInputStream(aProps)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
super.remove(inputState)
type.getDeclaredConstructor()
log.error("Problem in JSR223 script " + e,e)
outActivity != null && outActivity.length > 0
parsed && name.length() > 0
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
computator.getContentRectMinusAllMargins()
(imgRef != null) && !imgRef.isEmpty() && (imgRef.charAt(0) == '#')
!jackson2XmlPresent
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
v.startDrag(clip,thumb,false)
_validation_metrics.auc().defaultThreshold()
Name.identifier(name)
headRef()
zkDb.snapLog.getDataDir()
ASSET buildAsset(AssetUri uri,DATA data); 
view.switchMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
name != null && name.contains(parent)
ServerUtilities.unregister(this,FirebaseInstanceId.getInstance().getToken())
position.getServerTime()
hasRows(targetConnection,tableName)
selenium.isElementPresent("link=Control Panel")
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
!isEnabled() || mSlideableView == null
new IOException(e.getLocalizedMessage(),e)
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=2
mQsDensityContainer.getX()
selenium.isElementPresent("link=Control Panel")
fOnDemand && ondemand
body.toByteArray()
assertEquals(2,persons.size())
-560600961
redefined.getDeclaredConstructor()
localLOGV || false
_wsum > 0
um.getUsers(true)
TypeUtils.getKoltinConstructor(constructors,paramNames)
type.getDeclaredConstructor()
sharedSecretPanel.getSecret()
i < 10000000
DEBUG=false
commState.putBoolean("syncCommit",syncCommit)
type.getDeclaredConstructor()
UnderFileSystem.get(tmpFolder,ufsConf)
Tokens.isIgnoredWhitespace(t) || isUnquotedWhitespace(t) || Tokens.isComment(t)
e.toString()
ScriptingUtils.getMatcherForExternalGroovyScript(mappedAttributeName)
person.getPersonVoidReason()
log.logError(BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFolder.Label",realTargetdirectory))
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getIconKeyName()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
maxSize(new Fixed(width),new Fixed(height))
apnContext.getWaitingApns()
@Nullable
mpi < 135 || leftSide
Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor()
bottomIndex >= topIndex
client.get(path,MIMETYPE_PROTOBUF)
System.nanoTime()
part.getStartLine()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
new IndexWriter(directory,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
enabled=true
dest.writeInt(mSubId)
super.dispatchTouchEvent(cancel)
new Paint()
portlet.getRootPortletId()
Flux.from(inputStream).concatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
LOG.fine("received message " + (TopologyMaster.PublishMetrics)message)
mDataAuthorities == null || data == null
id=10849
WikiTestUtil.addPage(TestPropsValues.getUserId(),node.getNodeId(),ServiceTestUtil.randomString(),ServiceTestUtil.randomString(),true,true,serviceContext)
alpha=0
HornetQEmbeddedConfigurationFactory.class
TunablyAggressiveChaosMonkey chaos=new TunablyAggressiveChaosMonkey(ctx); 
inputMaskArray != null && inputMaskArray.isAttached()
reader.close()
UADExporter.exportApplicationDataInBackground(applicationName,selUserId,themeDisplay.getScopeGroupId())
selenium.isElementPresent("link=Control Panel")
addIndices(indices)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccessor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
!hasTimedOut()
bindingGroup.hasDefined(PORT_OFFSET)
AssetTagLocalServiceUtil.checkTags(userId,groupId,queryRule.getValues())
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",60,SECONDS)
DEBUG=false
AtmosphereResponse.newInstance()
this.mModel=model
ensureYellow()
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) != null
String.format(Locale.ROOT,"%-15s: -",username)
mMccStr == null
suiteClass.getSimpleName()
mock.expectedMinimumMessageCount(1)
return false; 
Bytes.toBytes(regionname)
classType.getCanonicalText()
addDaysAndCheckForCompletion(2,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
DEBUG_ALL_ACTIVITIES || true
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PLAY_FUNCTION,false)
sDefaults.putBoolean(KEY_PERSIST_LPP_MODE_BOOL,true)
addTest(21,23,180.0f)
new Paint()
entry.getValue()
mUiHandler.removeCallbacks(pae)
lp.resolveLayoutDirection(layoutDirection)
MUCOwner iq=new MUCOwner(); 
new IndexWriter(dir3,anlzr,false,IndexWriter.MaxFieldLength.LIMITED)
ctx.getMapViewTrackingUtilities()
cache.putRecord(key,record)
!isBottomRightVisible
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
_freemarkerEngineConfiguration.resourceModificationCheck()
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
SettingsBaseActivity.getRoutingStringPropertyDescription(this,p.getId(),p.getDescription())
metadata.getFaces()
fromElement.getPropertyType(propertyPath,propertyPath)
setImageDrawable(icon,false)
annotation.value()
!UIUtil.isUnderAquaBasedLookAndFeel() && !UIUtil.isUnderDarcula()
args == null || args.isEmpty()
EqualityComparer<TKey>
oldValue == null
Arrays.equals(this.element,other.element) || this.score == other.getScore()
KtPsiUtilKt.getHighlightingRange(expression)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectFile)
selenium.isElementPresent("link=Control Panel")
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
ruleContext.throwWithRuleError("Xcode version must be specified to use an Apple CROSSTOOL")
dbCollection.save(clusterEvent,WriteConcern.FSYNCED)
new IllegalStateException("Legacy advertising can't include TX power level in header")
block.getX() + 1
ldapConfig.getCrlFilter()
BASE=11000
setExpression(expressions.get(myHistoryIndex))
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
new DateTime(getMillis(),getZone())
new AndroidDownloader().downloadAsString(fileListURL,false)
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,true)
Results.forbidden()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(0)
StringBuilder buffer=new StringBuilder(); 
_connector.getResponse("GET /foo?data=1 HTTP/1.0\nhost: host:80\n\n")
showRecentApps(true,false)
HeaderItem headerItem; 
logger.warn("Error creating pool to " + host,t)
JvmDeclarationOriginKt.OtherOriginFromPure(myClass,valuesFunction)
REASSIGNMENT_IN_PROGRESS(60,"A partition reassignment is in progress",new ApiExceptionBuilder(){   @Override public ApiException build(  String message){     return new ReassignmentInProgressException(message);   } } )
drawPath(g)
sizeNeeded > items.length
case 12: 
list.append(pi)
realm.checkIfValid()
log.info(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
hex.length()
hasColumn("MicroblogsEntry","creatorClassNameId")
selenium.isElementPresent("link=Control Panel")
e.getKey() > 10
restEnableGzip=true
Numeric.toHexStringWithPrefixSafe(filterId)
showPasswordFieldAndFocus()
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
showSelectionToggleButton.setSelected(true)
BuildConfigSpec parameters
n.doubleValue()
layer.activate(input)
mState != STATE_PREPARE && mState != STATE_FINISHED
mPowerManager.isInteractive()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
LOG.info("writeToDisk == true but configFilename == null")
bibentries == null || bibentries.size() == 0
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,null))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,"''")
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadUrl.Null"))
new IllegalStateException("Legacy advertising can't include TX power level in header")
"0.0.0.0:" + DEFAULT_NM_COLLECTOR_SERVICE_PORT
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
BooleanUtils.isNotTrue(p.getMetadata().getExcluded())
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
ImapException ie
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn(),op.getStartLine(),op.getStartColumn() + 3)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
selenium.isElementPresent("link=Control Panel")
evaluation.evalTimeSeries(actual,predicted)
JSError.make(AbstractCompiler.READ_ERROR,getName(),e.getMessage())
ACRA.log.w(LOG_TAG,"Could not send crash Toast",e)
Slog.d(TAG,"FLP HAL not supported")
SemVer.parseFromText(version)
previewData == null || mediaPager == null || mediaPager.getAdapter() == null
((Element)iter.next()).getText()
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
@Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Integer id; 
super(pipeline,null,HEAD_NAME,true,true); 
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
loaded.getLoaded().getDeclaredConstructor()
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
StringBuilder charNum=new StringBuilder(); 
DevKitBundle.message("inspections.component.not.registered.quickfix.family",StringUtil.toLowerCase(getType()))
new Paint(Paint.ANTI_ALIAS_FLAG)
anchorView.getApplicationWindowToken()
new WeightedRandomChestContent(item,max,max,weight)
executorService == null || executorService.isShutdown()
WAKEUP_STATS=false
AppLog.e(T.NOTIFS,"GCM Error: " + errorId)
mCurrentDate.get(Calendar.MONTH) != month
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)
new RedissonSession(keyPrefix,id)
sm.getString("namingContext.nameNotBound",name,name.get(0))
params.getBuckEventBus()
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
wrappersToPrimitives.put(wrapperType,primitiveType)
1000 * 60 * 6
e != null && getActivity() != null
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_script_name"))
decoder.originalChannel()
Log.e(TAG,"This will become an error",ex)
!isPartialUpdate || id.views == null
Integer.parseInt(stackIdStr)
new DistributedRowMatrix(outPath,outputTmpPath,numCols,other.numCols())
new V(8,new BooleanSetting(false))
assertTrue(voyageReport.has("onboardCargos"))
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
postfix.equals("id")
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
handleExportPackage()
isAvailable(oldStatus)
target.getShortNameOnly()
waitForOptimization(function,640000)
configureWriteBufferForWrite()
new PebbleHealthActivitySample(stepsRecord.timestamp,deviceId,userId,stepsRecord.getRawData(),stepsRecord.intensity,stepsRecord.steps)
super.dispatchTouchEvent(cancel)
return true; 
getServiceForUserLocked(userId)
DateTimeFormat.getShortDateTimeFormat()
settings.setTextSize(WebSettings.TextSize.NORMAL)
Trans != NO_TRANSPOSE
myTaskManager.getChangelistName(localTask)
c.getName()
MAX_EXCEPTION_EDGE_OP_DISTANCE_FROM_END=3
config.getClientNumThreads()
parts.length < 2
new FileHyperlinkRawData("/home/karma-chai-sample/test/test.js",0,-1,3,s.length())
Integer.valueOf(1)
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
Arrays.asList(User.class,Organization.class,Role.class,UserGroup.class,Group.class,Company.class)
new LinkedList<>(0)
new HashMap<>(queryMemoryRevocableReservations)
remainingBytes > Integer.MAX_VALUE
ConcurrentReferenceHashMap<PropertyDescriptor,TypeDescriptor>
Exception t
mFacetCategoryMap.get(category)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
XmppStringUtils.parseBareJid(userJID)
MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE| MATCH_DISABLED_COMPONENTS
log.debug("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
anyOf(containsString("Connection is closed"),containsString("Socket closed during message assembly"),containsString("Stream closed after 2 of 3"))
uuid.replace("-","").substring(0,7)
element.getTextTrim()
logger.debug("Cannot update media data for group member ({})",e.getMessage())
qp.isUniqueItems()
ThingDTO.class
selenium.isElementPresent("link=Control Panel")
revWalk.close()
outStream.toString(StandardCharsets.UTF_8.name())
input.isSpecifyingFormat()
mRepeat > 0
!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
col2d.addiColumnVector(epsilon1d)
new ModelNode().set(60000L)
remaining == 0
RoleLocalServiceUtil.loadGetRole(companyId,name)
(byte)0xe2
!getLocationEnabled()
buffer.getUint8()
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).doAfterTerminate(() -> _isFetching.onNext(false))
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
users.get(j)
Integer.parseInt(taskIdStr)
second.get(j)
app.info.targetSdkVersion >= targetSdkVersion
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
revisionVersion=6
updateState(CHANNEL_CHILL_TEMPERATURE,message.convertToState(valueSelector))
includeSpecifiedOrganization
new IOException("test exception")
new ModelMetricsMultinomial.MetricBuilderMultinomial(domain.length,domain)
"no".equals(chWeightingsStr) || "false".equals(chWeightingsStr)
return 9; 
List<MiddleEntity>
StringBuilder sb=new StringBuilder(); 
selectBoxList.setScrollingDisabled(true,y)
"/html/portlet/" + jspPath + "/"+ formNavigatorSection+ ".jsp"
(showcaseX != 1000000 && showcaseY != 1000000) && !hasNoTarget
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg,"-n",patchPkg + "/com.taobao.atlas.update.AwoPatchReceiver")
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,false)
result.wasNull() || s == null
verify(connection,exception)
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
dist >= maxDist
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,true)
getLog().error(e.getMessage(),e)
vertFilename == null
List<T>
Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
logger.trace("rapidRefreshFutureEnd stopping")
!token.hasVisible && !mClosingApps.contains(token) && !token.mDeferRemoval
FISHING_ROD(346,1,32)
aai == null
buf.writerIndex()
_layout.isTypePortlet()
new Paint()
edge.setDirection(edgeDefault)
collectionRecords != null && !collectionRecords.isEmpty()
expected=50331648
String.format("Cannot add already existing column family \"%s\" to keyspace \"%s\"",cfName,ksName)
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
FileInputStream fis=new FileInputStream(file); 
checkClosed(true)
(MessageView.this.mMessage == null) || !MessageView.this.mMessage.isSet(Flag.X_DOWNLOADED_PARTIAL)
Integer.parseInt(nid[0],16)
recycle(false)
public <A>SubType from(Expr<A> entity,A first,A... rest){   List<A> list=new ArrayList<A>(rest.length + 1);   list.add(first);   list.addAll(Arrays.asList(rest));   return from(entity,list); } 
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
paramEntry.getValue()
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
targetMethod.recordCall(posBefore,posAfter - posBefore,target,debugInfo,true)
assetDisplayPageEntry.getLayoutPageTemplateEntryId()
new char[1024]
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
synchronized (mLock) {   updateDisplayLocked(); } 
this.hostToId
!e.awaitTermination(24,TimeUnit.HOURS)
KieSessionModel kSessionModel
hz.getCluster().getLocalMember().isLiteMember()
assertEquals(30,count)
testClass.getSimpleName()
GL20.glUniform2iv(location,v)
file == null || !file.isInLocalFileSystem()
PsiTreeUtil.getParentOfType(element,PyClass.class,false)
hasColumn("KBComment","helpful")
lookup="java:/ConnectionFactory"
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF && (mActualScale - mMinZoomScale <= MINIMUM_SCALE_INCREMENT)
transparencies != null && (faceTextures == null || faceTextures[face] == -1)
child.resetRtlProperties()
testIncludeFilter(query,1,"Filter",34)
variables.get(j)
AbstractDynamoDbConfigurationSource.class
markerYear == currentYear || markerYear == 1970
DateTimeFormat.getShortDateFormat()
toArrayHelper(0)
new Insets(6,0,0,4)
DEBUG=false
connectionManager.markOwnerConnectionAsClosed()
mapSource.getName()
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
isDailyBuild()
m.getDeclaringClass()
viewToClick != null && viewToClick.isAttachedToWindow()
features.isKeyOrdered=true
SimpleTextAttributes.merge(simpleTextAttributes,SimpleTextAttributes.fromTextAttributes(forcedAttributes))
platformVersion < M
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
isAnyConsumerBound()
SpringBootVersion.class
mFile.getStoragePath()
waitForMappingUpdateOnAll("dynamic_table","my_object.a","my_object.b")
WEB_SYNC_MANAGER=true
oldObject=event.getOldObject()
mInstalld.createProfileSnapshot(appId,packageName,codePath)
holder == null || holder.provider == null
mapper.getFactory()
equalTo(0L)
assertEquals(orig.getResponse(),expectedResponse)
clusterSet.getClusterCount() < initialClusterCount && points.size() > 0
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
computator.getContentRectMinusAllMargins()
appearance.getInt(attr,0)
states.length >= 3
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ curFocus+ "}}"
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
@Autowired HandlingEventRepository handlingEventRepository; 
containsString("Eclipse")
src.copy(src.getConfig(),true)
new EnterStringDialog(shell,Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Default"),Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Title"),Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Message"))
mQueryTextView.length()
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,WALL_17050,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31849,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPS_29993,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,ROCKY_HANDHOLDS_26400,ROCKY_HANDHOLDS_26401,ROCKY_HANDHOLDS_26402,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,LOOSE_RAILING,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,ORNATE_RAILING,ORNATE_RAILING_17000,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCKS_6673,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,BROKEN_FENCE_2618,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990,TUNNEL_30959,HOLE_30966,OBSTACLE,OBSTACLE_30767,OBSTACLE_30964,OBSTACLE_30962,LOOSE_RAILING_2186,LITTLE_BOULDER,ROCKSLIDE_33184,ROCKSLIDE_33185,NULL_33327,NULL_33328,BROKEN_WALL_33344,BIG_WINDOW,LOW_FENCE,STILE,STEPS)
assertEquals(0.12765426703095312,mm.mse(),1e-4)
nextPos < mBoundPos
!isConsole && !isOpOverride && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
TelephonyManager.getDefault().getCurrentPhoneType()
_siteNavigationMenuPortletInstanceConfiguration.siteNavigationMenuType()
classLoader instanceof GroovyPageClassLoader
dyn.put("delays",JSONObject.NULL)
conceptAnswer.getAnswerConcept()
Log.w("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
return false; 
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)",Pattern.DOTALL)
Files.newOutputStream(self)
backgroundTask == null
assertEquals(3,result.getAuthorities().size())
Long.valueOf(jvmName.split("@")[0])
delegate.open(filename,grabSize,idType,highIdSupplier,maxId)
s == null && req != null
_log.warn(ioe,ioe)
new Builder().setDuration(3000).setColor(android.R.color.holo_green_light)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
metadata.getFaces()
HashSet<String>
evaluate(123.5f,DataTypes.FLOAT)
line.toString(charset)
removed.isEmpty()
stop <= start
RemoteInterfaceType
params.getSimulatedPlatformVersion()
QuotaCache.this.namespaceQuotaCache.containsKey(ns)
fileSystem.renameFile(archive,archivedOutputFile(i + 1))
UIUtil.getTreeSelectionBackground(hasFocus)
new NullPointerException("Emitter got a null value. Null values are generally not allowed in 2.x operators and sources.")
sep < 0 || sep > j
new VelocityTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_velocityEngine,_templateContextHelper,false)
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
configureWebDotXmlAtmosphereHandler(scFacade)
!myAutomaticStartLevel.isSelected()
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
event.getRawY()
serialVersionUID=320L
PersistentTask<P>
selenium.isElementPresent("link=Control Panel")
paramName.substring(5)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
SCAN_STATUS_PARTIAL=1
!Boolean.parseBoolean(ldapConfig.get("startEmbeddedLdapServer"))
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
times + BASE_FILE_NUMBER
new TestCaseGeneratorImpl(false,true)
this.chatroom.getIdentifier().equalsIgnoreCase(chatRoomName)
secondaryInputBind.setDescription(bind.description())
typeSettingsProperties.toString()
new ConnectionException(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame)
String.format(Locale.ROOT,"Warning: The following roles [%s] are unknown. Make sure to add them to the [%s] file. " + "Nonetheless the user will still be associated with all specified roles",Strings.collectionToCommaDelimitedString(unknownRoles),rolesFile.toAbsolutePath())
mSyncStatus.valueAt(i)
jpegQuality < 0
expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
Log_OC.e(TAG,"Trying to send a NULL OCFile")
repository.loadForRequest(null)
message == null || !message.containsKey(key)
new DBException("Error loading object metadata from database",ex,dataSource)
assertFalse(CompressionTest.testCompression("SNAPPY"))
sendMessageAtFrontOfQueue(CMD_STOP_AP)
this.conversation.getContactJid().split("/",2)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
VDBG=false
toJSON(entry.getValue(),config)
!mTranslucentStatusBar || mTranslucentActionBarCompatibility
!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
!sourceEdgeTextData.getText().isEmpty()
selenium.isElementPresent("link=Control Panel")
mNavigationBarView.getPaddingLeft()
Log.e(TAG,"This will become an error",ex)
loaded.getLoaded().getDeclaredConstructor()
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
mSeekBar.setProgress(mLastAudibleStreamVolume,true)
cc.getEnabled()
IntegerDivNode.class
nextPos < mBoundPos
sRecentsBlacklist.contains(t.realActivity.getClassName()) || sRecentsBlacklist.contains(t.realActivity.getPackageName())
playerArgs == null
savedNetwork.setParams(newParams)
"Use " + ATT_LOGOUT_SUCCESS_URL + " or "+ ATT_LOGOUT_HANDLER+ ", but not both"
Collection<InspectionToolWrapper>
event.getRawX()
DefaultCacheKeysFactory.staticCreateNaturalIdKey(naturalIdValues,persister,session)
wZipFilename.getText()
RowKey.prefixKeyWithSalt(key)
cs == null || cs.length() == 0
mapper.getFactory()
applyDefaultViewName(processedRequest,mv)
Strings.isNotBlank(jvmArguments)
e.getCacheMisses()
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
realUserTagEventDel.getTagId()
throwParserError(e)
javaType == null
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
threadHandler.get().postAtFrontOfQueue(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
!componentSystems.hasNext()
graphBuilderConfig.unresolvedIsError()
model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(),HistoryReference.TYPE_SPIDER,HistoryReference.TYPE_BRUTE_FORCE,HistoryReference.TYPE_SPIDER_AJAX)
j.hasNext()
Slog.d(TAG,"showSaveLocked(): no mStructure")
first=word.substring(0,3)
Response.ok(null,MediaType.TEXT_PLAIN)
checkCall(receiver)
surfaceChanged || surfaceGenerationId != mSurface.getGenerationId()
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,true,false,factory)
BasicChaosMonkey.class
loaded.getLoaded().getDeclaredConstructor()
end + 1
mTfs.unpin(mTfs.open(path))
EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING,ExecutableState.ERROR)
String key=keys.next(); 
VertexAttribute.ColorPacked()
serviceTester.systemRunning()
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,toNode,direction.reverse(),relTypes)
LOGGER.warn("No file list editor found.")
nextTokenIs(b,IDENTIFIER)
log.debug("Unrecognized Oracle client version at " + oraHome)
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,10)
new Descriptor("OSR_migration_end",true,void.class,long.class)
w.mAttachedHidden || !w.isReadyForDisplay() || !w.isDrawnLw()
new SqlSession(null,null,null,resolver,null,null,null,null)
postResourcesElementDesc.getStoreFactory()
request.getRemoteAddr()
XMLInputFactory.newInstance()
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
-1674333525
E edge
RectF r=(RectF)o; 
dlFileEntryLocalService.getFileEntries(groupId,folderId)
TopAndRecentlyPlayedTracksLoader.getTopTracks(getApplicationContext())
String.format(Locale.ROOT,"%.2f",number)
WindowedValue.valueInGlobalWindow(4,PaneInfo.NO_FIRING)
new SampleRoboApplication_()
request.getPathInfo()
t.isFreeformTask() || targetStackId == FREEFORM_WORKSPACE_STACK_ID
POOL_LIMIT=100
selenium.isElementPresent("link=Control Panel")
part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")
appMode.getMapIconId()
ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),parser::getTokenLocation)
ClassFileVersion.forKnownJavaVersion(enforce.value()).compareTo(supportedVersion) <= 0
colors.getThemeAttributeId(i,0)
new ArrayList<>(0)
MAX_PERCENT_DIFFERENCE=0.3
mUiHandler.removeCallbacks(pae)
Func1<Throwable,Observable<R>>
ColorProperties.getColor("tabbedPaneBorderHighlight")
DirectoryReader reader=IndexReader.open(dir); 
getUriBuilderFactory().expand(uriTemplate,uriVariables)
loadMetadataSuceeded=false
MeasureSpec.makeMeasureSpec(mNotificationMaxHeight,MeasureSpec.AT_MOST)
service.asBinder().pingBinder()
mSearchInput.setFocusableInTouchMode(focusable)
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
assertClusterSizeEventually(2,nodes[0])
Trans != NO_TRANSPOSE
mAdapter != null && mDataSetObserver != null
properties.containsKey(STRING_RECENT_SEARCHES)
AudioSystem.isMicrophoneMuted()
getNotificationInterface().getInterruptionFilterFromListener(mWrapper)
E edge
getCamelContext().getTypeConverter().convertTo(int.class,timeout)
doTest(BASE_PATH + "/" + getTestName(false)+ ".java",warnings,false)
failure == null
getNotificationInterface().getInterruptionFilterFromListener(mWrapper)
new ModelNode().set(15000L)
tracesDir.mkdirs()
me.getComponent() == myCurrentComponent || me.getComponent() == myQueuedComponent
new IndexWriter(indexStore,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mCallback.onInputUpdated(inputId)
add2(yact[0],ds[2])
repositoryImpl.setName(getName())
drawGeometry(g)
new StringBuilder()
Slog.d(TAG,"showSaveLocked(): no mStructure")
intervalFraction * (nextValue - prevValue)
blog.getLocalTableBlogId()
XContentHelper.toXContent(response,XContentType.JSON,false)
renderNotebookv2(sourceDoc,null,input.getFormat())
new RuntimeException("Container " + containerName.asString() + " failed to execute "+ Arrays.toString(args),e)
assertEquals(1,map.size())
!mDreamsEnabledOnBatteryConfig
_log.warn(ioe,ioe)
uadDisplay.searchCount(selectedUserId,null,displayTerms.getKeywords())
children == null
new LinkedFileViewModel(linkedFile,entry,databaseContext,dialogService,taskExecutor)
IOUtil.readUTF(in)
inflater.inflate(R.layout.mainfrag,container,false)
TimeUtils.millis()
if (multiWindowTimeBar) {   Timeline timeline=player.getCurrentTimeline();   int windowCount=timeline.getWindowCount();   long remainingMs=position;   for (int i=0; i < windowCount; i++) {     timeline.getWindow(i,window);     if (!timeline.getPeriod(window.firstPeriodIndex,period).isAd) {       long windowDurationMs=window.getDurationMs();       if (windowDurationMs == C.TIME_UNSET) {         break;       }       if (i == windowCount - 1 && remainingMs >= windowDurationMs) {         seekTo(i,windowDurationMs);         break;       }       if (remainingMs < windowDurationMs) {         seekTo(i,remainingMs);         break;       }       remainingMs-=windowDurationMs;     }   } }  else {   seekTo(position); } 
case 4: 
proc != null && proc.thread != null
new ConnectorTableLayout(handle,Optional.empty(),TupleDomain.none(),Optional.empty(),Optional.empty(),ImmutableList.of())
System.nanoTime()
index < 0 || index >= myArray.size()
System.currentTimeMillis()
BeanUtil.setDeclaredProperty(target,parameter,value)
file != null && file.exists()
Thread.sleep(sleptAlready ? 10 : delay)
_typeSettingsProperties.toSortedString()
Map<String,Object>
rollbackCount != -1 && rollbackCount <= 0
GlobalSearchScope.allScope(getProject())
-1072268288
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
70 * 1024 * 1024
S
type.getDeclaredConstructor()
mCurrentDate.get(Calendar.MONTH) != month
finalOverlayView.getParent() == null
lowestWeightAndIndex != null && lowestWeightAndIndex.getKey() < weight
firstPos > mTargetPos
selenium.click("//li[4]/span/a/span")
uniqueField.getType().toExternal(doc.getField(uniqueField.getName()))
DEBUG=false
sr.getLastStartId()
uri == null || LauncherActivity.isLaunchUri(uri)
qux.getDeclaredConstructor()
entry.getKey().subscribeToRootRefreshEvents(entry.getValue(),refresher)
ParceledListSlice<ActivityManager.RecentTaskInfo>
i=1
getClusterMap().set(buildAttributeName(name),value)
GitFileUtils.delete(myProject,root,files,"--ignore-unmatch","--cached")
getTaskWriterCount(session) > 1 && !node.getPartitioningScheme().isPresent()
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
super.onPause()
LOGGER.debug(e.getMessage(),e)
super(1); 
uniqueField.getType().toExternal(doc.getField(uniqueField.getName()))
GenericAttributeValue<Boolean>
intent.resolveType(getContentResolver())
Integer.parseInt(patchVersionString)
mFragments.mCurState < Fragment.CONTENT && mFragments.mActivity != null
jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY)
data.get(0).toUpperCase(Locale.ENGLISH)
cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)
def.finished()
textureLink.getFieldValue("norfac")
TreeClassChooserFactory.getInstance(project).createAllProjectScopeChooser(title)
addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR)
blog.getLocalTableBlogId()
parsed && name.length() > 0
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
testProviderConfig()
selenium.isElementPresent("link=Control Panel")
setY((mWidth > 0) ? (mPosition * mWidth) : 0)
StringUtil.isNotEmpty(source)
selenium.isElementPresent("link=Control Panel")
pluginPanel.rebuild()
singletonComponentInstance == null
super(expression," \t",startTime,zone,0,2); 
longSize >= 640
type.getDeclaredConstructor()
expandableView.getIntrinsicHeight()
mv.visitInsn(DUP)
return false; 
@Override public PostgreTableBase getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
toArrayHelper(array,0)
scanFeatures(getCamelKarafFeatureUrl(),"xml-specs-api","camel-core","camel-spring","camel-test")
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
state.isAlive()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
/**   * @author yole  */ public class CoverageProjectViewDirectoryNodeDecorator extends AbstractCoverageProjectViewNodeDecorator {   public CoverageProjectViewDirectoryNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(element.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     if (element instanceof PsiDirectory) {       final String informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);       if (informationString != null) {         appendCoverageInfo(cellRenderer,informationString);       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(node.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }     String informationString=null;     if (element instanceof PsiDirectory) {       informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);     }  else     if (element instanceof PsiFile) {       informationString=coverageAnnotator.getFileCoverageInformationString((PsiFile)element,currentSuite,manager);     }     if (informationString != null) {       data.setLocationString(informationString);     }   } } 
Number rate
{@link ImportControl}
mappedSuperclass.getMetadataComplete()
clearFromMember.join()
bytes > 65536
mAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"signIn:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign In Failed",Toast.LENGTH_SHORT).show();     }   } } )
log.rollWriter(true)
errorCount >= maxErrors
Exception e
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",400,"application/json","resources/add_book2json_invalid.txt",null)
Integer.parseInt(stackIdStr)
!View.isInitialised() || EventQueue.isDispatchThread()
log.info(sm.getString("webappClassLoader.stackTrace",threadName,getStackTrace(thread)))
public AfterWatermarkEarlyAndLate withEarlyFirings(OnceTrigger earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
mRecyclerView.smoothScrollBy(hScroll,vScroll)
holders.remove(holder)
mService.removePasspointConfiguration(fqdn)
parent != null ? parent.startNumber : 1
Thread.sleep(1000)
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")","")
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
LinkageError e
fmd.getInheritedFromType()
uid >= 0
RowKey.prefixKeyWithSalt(key_a)
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Bar item
ft.add(R.id.layout_fragment_container,commentFragment,tagForFragment)
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
selenium.isElementPresent("link=Control Panel")
display.getRealMetrics(mDisplayMetrics)
booleanPreference(preference,value,R.string.p_use_contact_picker,R.string.EPr_use_contact_picker_desc_disabled,R.string.EPr_use_contact_picker_desc_enabled)
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
toArrayHelper(0)
wifiConfig == null || wifiConfig.isValid()
DEFAULT_VERIFY_ENABLE=false
XmlSuite.DEFAULT_PRESERVE_ORDER.equals(m_preserveOrder)
nestedSimpleIA.setContext(context)
!subAdded || !added
DEBUG=false
error instanceof RebuildRequestedException || cause instanceof IOException
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDh,unrotDw)
mpi < 135 || leftSide
@Override public CONTAINER getContainer(){   return container; } 
normalizedUrl.toLowerCase(Locale.ROOT).startsWith(HTTPS_PROTOCOL)
two.setAxisIndex(1)
getDelegate().getDefaultCipherSuites()
mySchedulesQueue.setPassThrough(false)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
new IllegalStateException()
appMode.getMapIconId()
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
selectorBox.getComponent()
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).subscriberContext(withUser)
sep < 0 || sep > j
remoteCache.get(key)
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
oldestNode == null || oldestNode.getLastSent() == null
Object.class
TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
ByteUtil.longToBytesNoLeadZeroes(0)
Thread.sleep(5000)
mUiHandler.removeCallbacks(pae)
checkpointPath.toString()
metrics.density * 45
findModuleLibrary(dependency,provider,url,visited)
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null,null)
selenium.isElementPresent("link=Control Panel")
listener.iterationDone(policyNet,policyIterationCount,policyEpochCount)
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
source.getAllEditors(file)
names[0]
Float.class
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)
@ConditionalOnEnabledHealthIndicator("redis")
column >= 0L
myTemplatesMap.get(fullUrl)
mGnssCallback != null
StringBuilder buffer=new StringBuilder(); 
!xAppInfo.getIsSystem()
mMediaMetadataRetriever.getFrameAtTime(-1)
colIndex > columnTypes.length
localTransportStopRoutes != null && localTransportStopRoutes.size() > 0
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
drawer.addDrawerListener(toggle)
FBUtilities.getLocalAddress()
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
hintInfo.hintHitProbability >= hintHitProbabilityThresholdForDeoptimizingSnippet() && hintInfo.exact == null
!ON_TOP
type.getDeclaredConstructor()
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
new Duration(30,SECONDS)
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
String.format(Locale.ROOT," [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
sqlRouteResult.getSqlParsedResult().getType()
ImmutableList<Map<String,Object>>
Thread.sleep(1000)
SparkDl4jLayer master=new SparkDl4jLayer(sc,conf); 
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
xmlWriter.writeStartDocument("UTF-8","1.0")
!dockOnTopOrLeft
i > 0
SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),false)
DefaultCacheKeysFactory.staticGetCollectionId(cacheKey)
mFinishing && mSupportHardware && mHwCenterX != null
EqualityComparer<TKey>
MAX_TOOLTIP_SHOWN_COUNT=2
logger.warn("{}",general)
isAllowed()
value instanceof Integer
Throwable e
new IndexWriter(indexStoreB,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
userInfo == null || !userInfo.canHaveProfile()
app.getDaynightHelper().isNightMode()
findCodecForFormat(true,format)
new StringBuilder(256)
new InterpreterContext("","1","","",null,null,null,null,null)
declaredTypes.remove(internalName)
matcher.replaceFirst(replacementQuoted)
mUnreachedBarPaint.setColor(mUnreachedBarColor)
parent.incrementPrioritizableForTree0(amt,oldParent)
viewToModel == null || viewToModel.length != tableModel.getRowCount()
pm.queryIntentServicesAsUser(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
paramEntry.getValue()
origin.realComponent().doubleValue() >= other
log.info("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
i < 1000
N > 1
imageHeight - kernelHeight + 2
Preconditions.checkNotNull(timer,"timer")
mPackageManager.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS) || context.getResources().getBoolean(R.bool.config_enableAppWidgetService)
styles.treeStylesCss()
c.set(IDAUTHORITY_WAIT_MS,100)
mPluggedIn ? Tile.STATE_UNAVAILABLE : mPowerSave ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE
ft.commitAllowingStateLoss()
code.startLine("/* JADX WARNING: ").addMultiLine(warn.getWarn())
!secondaryOk || getReplicaSetStatus() == null
-10
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,true)
r.getRequest(false)
lp.resolveLayoutDirection(layoutDirection)
DEBUG=false
julLogger.severe("Hello world")
Throwable e
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
StringBuilder answer=new StringBuilder(); 
d.getMinimumHeight()
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
DISABLE=false
Boolean.parseBoolean(attrValue)
!world.getBlockMaterial(x,y,z).isLiquid()
new ScriptC_errorCalculator(mRS)
ScrollUtil.findScrollPane(myContent)
params.getBuckEventBus()
copy.getGenericsTypes()
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
groupLocalService.addGroup(user.getUserId(),GroupConstants.DEFAULT_PARENT_GROUP_ID,null,0,0,name,null,type,null,true,true,null)
Assert.assertTrue(permissionChecker.isOmniadmin())
private KeyValueBinding attributeBinding; 
matchAxisFilter != 0 || wrapAxisFilter != 0
addProperty(prop,false)
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)
_log.warn(ioe,ioe)
logger.debug("condition not met, returning existing state")
Sets.newHashSet()
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper,false)
logger.debug("munlocking region")
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
mAdapter != null && mDataSetObserver != null
userImpFactor.addEqual(userFactors.row(userIdx,false))
Throwable e
platformVersion < M
30 * 60 * 1000L
getTestName(true)
setValue(object,value.intValue())
SOURCE_PATH.deref()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).subscriberContext(withUser)
loaded.getLoaded().getDeclaredConstructor()
findPackage(PACKAGE_SETUPTOOLS,false)
text.emptyElement(BR)
waitFor(list,2,500)
LocaleUtil.getSiteDefault()
createDouble(buffer.length(),init,workspace)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
!active
loaded.getLoaded().getDeclaredConstructor()
return this; 
this.httpHandler.handle(req,resp).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
pm.performDexOpt(pkg,null,true)
testClass.getSimpleName()
ai.uid < Process.FIRST_APPLICATION_UID
WebStorage.getInstance().deleteAllData()
List<SimpleModule>
Sets.newLinkedHashSet()
LOG.debug("Getting asynchronous method stub from channel")
map != null && !ignoreSystemSettings
UserNotificationEventLocalServiceUtil.getArchivedUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
targetConfig.trimConfigurations()
offset + len > buf.length
getExecutionException()
selenium.click("//li[4]/span/a/span")
curThread instanceof IgniteDiscoveryThread || (curThread != null && curThread.isForbiddenToRequestBinaryMetadata())
copy1DRangeFromUnchecked(0,mType.getCount(),i)
builder.length() == 0 && s != null
Math.round((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
new Random()
out != null && out.getJmsMessage() != null
log.debug("Error invalidating SSH tunnel",e)
JvmDeclarationOriginKt.OtherOriginFromPure(myClass)
ftrain.numRows() != training_rows
verify(mWifiService).stopLocalOnlyHotspot()
AckSchedulerKey key=new AckSchedulerKey(Type.ACK_TIMEOUT,client.getSessionId(),packet.getAckId()); 
selenium.isElementPresent("link=Control Panel")
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
level < 0 || values.length == 0
LOG.debug("AFTER decResourceRequest:" + " applicationId=" + " priority=" + priority.getPriority() + " resourceName="+ resourceName+ " numContainers="+ resourceRequestInfo.remoteRequest.getNumContainers()+ " #asks="+ ask.size())
!useDisplayListProperties
!TextUtils.isEmpty(library.getLibraryWebsite()) || !TextUtils.isEmpty(library.getRepositoryLink())
getAndAppendComparator(i,bb,sb)
GetDataMessage getdata=new GetDataMessage(params); 
!mNavigationBarView.isQuickScrubEnabled()
Throwable e1
level <= 0
HighlightInfo.newHighlightInfo(type).range(refElement).descriptionAndTooltip(message)
public Long getIndex(){   return index; } 
path(14)
greaterThanOrEqualTo(2)
parent.getChildCount() > 0 && mAdapter.getItemCount() > 0
new byte[10]
selenium.isElementPresent("link=Control Panel")
apnContext.getWaitingApns()
weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX,0.0f)
new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId),e)
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
Assert.assertEquals(10L,v2)
tessellator.tessellatePolygon(true,true,true)
FileHash.hash(outputFile,algo).equalsIgnoreCase(checksum)
jid.getEscapedLocal()
new PortletDataContextImpl(layoutSet.getCompanyId(),groupId,parameterMap,null,zipReader)
mQsDensityContainer.getX()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
lowers != null
new IllegalStateException("Advertising can't be both connectable and anonymous")
DEBUG || true
portletDataContextClone.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Log_OC.d(TAG,"onCreateView")
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElementsToIgnore),false,refreshViews);   } } ,project.getDisposed())
SuperColumns.endOf(del.predicate.getSlice_range().finish)
rs.getString(3)
assertEquals(ChronicleEngineMapEventType.INSERT,mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1).setLateFirings(subtrigger2))
assertEquals(0,url.getPort())
fileName.startsWith("/") || fileName.matches("^[A-z]:\\\\\\S+$")
new Paint()
stmt.execute(sqlCommand)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
handleDnsConfigurationChange(usedNetworkType)
synchronized (this) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
connection.remote().incrementAndGetNextStreamId()
artifactResolver.collect(request)
LOG.debug("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
N > 1
DEFAULT_MAX=4096
components.afterEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
substitutor.substituteAndCapture(parameter.getType())
mPowerManager.isInteractive()
settingOptional.get().getGroup()
Long.toString(bitstampOrder.getId())
"Executing SQL script from " + scriptPath
mBluetoothLock.readLock().unlock()
value()
Math.floor((double)(powerQuery[out] * totalPowerContained) / totalPowerQuery)
paymentGatewayApi.processNotification(PLUGIN_NAME,"TOTO",NULL_PLUGIN_NAMES,NULL_PLUGIN_PROPERTIES,requestOptions)
this.transactionsRepository.getTransaction(this.xidTransactionID)
return false; 
return false; 
existingContents2.size() == 2
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null))
IdeaTestUtil.bombExplodes(2006,Calendar.SEPTEMBER,15,15,0,"maxim.mossienko","next token after tag correctly becomes " + "a tag parameter even if located on next line." + "Leading asterisks should not be counted as well.")
Beans.newDuration(casProperties.getAuthn().getOauth().getAccessToken().getMaxTimeToLiveInSeconds()).getSeconds()
from >= to
ps.saveRelationship(rel)
chargeUAh > 0 && level > 0
createMessageConsumer(session,destinationName,messageSelector,true,null)
null == user || UserExt.USER_STATUS_C_VALID != user.optInt(UserExt.USER_STATUS)
getNumOfRenewsInLastMin() <= numberOfRenewsPerMinThreshold
new Tuple(label,name,type,ddmStructure.getStructureId())
strings.length >= 5
assertPlanEquals(expectedPlan,actualPlan)
DLStoreUtil.addFile(kbArticle.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,newDirName + StringPool.SLASH + shortFileName,serviceContext,bytes)
testClass.getSimpleName()
result.getSecond()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000)
file.getFile()
new Date(1)
odi.close()
session.getPlaybackType() == MediaSession.PLAYBACK_TYPE_REMOTE && mRvc != null
Preconditions.checkNotNull(firstOperand)
LOG.info(title + "; " + message)
VDBG=false
rc.networkPolicy(NetworkPolicy.OFFLINE)
Loggers.get(getClass()).warn(format("Pool %s did not terminate",getClass().getSimpleName()))
mShowNewEditor || mShowAztecEditor
@Override public final DivideByOnConditionStep and(String sql,QueryPart... parts){   return and(condition(sql,parts)); } 
JiveGlobals.deleteXMLProperty(ONE_TIME_PROPERTY)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
epsi(otherArr)
selenium.isElementPresent("link=Control Panel")
e.toString()
ignite.events().localQuery(p,evtTypes)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
appearance.getInt(attr,0)
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
JavaClass.class
((Scorecard)serializable).getUseReasonCodes()
server0.getStoreRepository().getStorageEngine(storeName)
HeaderSpec.this
timeVector.getMutator().setSafe(index,value)
in.readData()
DRAGGING_ANIMATION_TIME=1200f
new ServerPing.Players(listener.getMaxPlayers(),bungee.getOnlineCount())
_userNotificationInterpreterClasses.isEmpty()
i <= end
Lists.newArrayList("match",ignoreGlob)
GL11.glGetTexParameteriv(target,pname,params)
new RuntimeException("Error loading MultiDataSet at path " + path + " - DataSet may be corrupt or invalid."+ " Spark MultiDataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
bitmap.getRowBytes()
ctxLogger.info("Unsupported field type: {} for field: {}",dataType,fieldName)
name.length() > 0 && name.charAt(name.length() - 1) != '.'
mDeviceOwner.getProfileOwnerPackageName(i)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
host1.getSocketAddress()
BackupManagerServiceInterface svc=mService; 
mGesturesPopup != null && mGesturesPopup.isShowing()
TextAttributes.merge(ConsoleHighlighter.OUT.getDefaultAttributes(),textAttributes)
removeCallbacksAndMessages(null)
page.getRetainedSizeInBytes()
150 * 1024 * 1024
client.waitForCompletion(1,id,60,TimeUnit.SECONDS)
container.getVersionId()
new MccEntry(230,"cz",2,"Europe/Prague","cs")
states[0].hollow
offset + i
mSyncStatus.valueAt(i)
StringBuilder retval=new StringBuilder(); 
!collectDependencies().equals(myInitialDependencies)
targetDatabase.getObjectQuotingStrategy()
log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
Assert.assertEquals(4,results.size())
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
logger.debug(e.getMessage())
copy1DRangeFromUnchecked(0,mType.getCount(),i)
m.size()
mEmptyId != 0
assertEquals("For " + path,replaced,map.substitute(path,true))
position.offset(mLeft,mTop)
AWAKE_INTERVAL_DEFAULT_MS=10000
ATLAS_MAP_ENTRY_FIELD_COUNT=3
Instant.ofEpochMilli(millis)
i % dictionarySize
Integer.parseInt(taskIdStr)
mPrivateInput == null || mReplyHeader.responseCode == -1
getDialogTitle()
handleShowingDetail(detail,x,y,false)
RowKey.prefixKeyWithSalt(key)
new IncorrectOperationException("Operation not supported in: " + getClass())
context.getOpPackageName()
model.getShadowConfig()
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
new NativeCodeGenerator().generate("src","bin:../../gdx/bin","jni")
LoggerFactory.getLogger(MongoQueryCreator.class)
logger.debug("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
animator.setMinFrame(-9000)
assertEquals(13,beanCount)
Integer.parseInt(bottomStr)
Thread.sleep(1000L)
elements == null || elements.length == 0
required=false
portletImporter.validateFile(userId,plid,groupId,portletId,parameterMap,file)
recoveryFile.sync()
message.getFilteredFields()
mAppliedTemporaryAutoBrightnessAdjustment=false
id=17
compensationRange.contains(compensation)
FavouritesWs.class
preciseExchangeAmount - exchangeAmount >= 0.000001f || preciseExchangeAmount - exchangeAmount <= -0.000001f
!(exception ? throwable instanceof RuntimeException : throwable == null)
"file".equals(url.getProtocol()) || "jar".equals(url.getProtocol())
getOriginUrl()
mJobs.valueAt(i)
logger.info("--> checking snapshot status again after snapshot is done")
processLink(curi,codebase,context)
getSessionTimeout().getSeconds()
VertexAttribute.ColorUnpacked()
parent == null || !parent.isValid()
!hasNextChunk()
this.gatewayDelegate.setReplyChannel(replyChannel)
QueryProcessor.executeInternal("SELECT * FROM cql_keyspace.table2;")
page.getResourcePrimKey()
new Location(user.getWorld(),x,y,z,user.getLocation().getYaw(),user.getLocation().getPitch())
Maps.newLinkedHashMap()
log.debug("'{}' extracting credentials from {} http authenticator",e1.toString(),httpAuthenticator.getType(),e1)
exists
f.getTp()
pattern.toString()
BuildRunResult result=ImmutableBuildRunResult.of(ExitCode.BUILD_ERROR,ImmutableList.of()); 
new PacketDecoder(jsonSupport,ackManager)
downstreamNodes.containsAll(executionPhase.nodeIds())
@Override public ClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec){   FilteringClassLoader.Spec classLoaderSpec=new FilteringClassLoader.Spec(spec);   if (needJaxpImpl()) {     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,SAXParserFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DocumentBuilderFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DatatypeFactory.class);   }   return new FilteringClassLoader(parent,classLoaderSpec); } 
info.getRegionNameAsString()
logger.error("failed to create index [{}]",t,indexMetaData.index())
null == lvElement(buffer,calcWrappedOffset(index + 1,mask))
y * width
removeFlagForThreadsFromCache(account,ids,flag)
/**   * @return a String for the summary of the preference.  */ public CharSequence getSummary(){   return null; } 
@SuppressWarnings("unused") public JobsV3 list(int version,JobsV3 s){   Job[] jobs=Job.jobs();   s.jobs=new JobV3[jobs.length];   int i=0;   for (  Job j : jobs) {     if (j instanceof ModelBuilder) {       s.jobs[i]=new ModelBuilderJobV3().fillFromImpl((ModelBuilder)j);     }  else {       try {         s.jobs[i]=(JobV3)Schema.schema(version,j).fillFromImpl(j);       }  catch (      H2ONotFoundArgumentException e) {         s.jobs[i]=new JobV3().fillFromImpl(j);       }     }     i++;   }   return s; } 
document.getDocumentElement()
qualifier != null && !methodToFind.hasModifierProperty(PsiModifier.STATIC)
ORIENTATION_SETTLE_TIME_MS=250
createFromResourceStream(null,null,is,srcName,null)
sendObjectInfoResult.getCompressedSizeLong()
portlet.getPortletId()
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
1 << 23
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
ImmutableMap.<String,Boolean>builder().put("C# language server",false).put("Exec",true)
Log_OC.e(TAG,"\t account is NULL")
userRecord != null && userRecord.mClientRecords != null
java(convention).getTestClassesDir()
mBatteryStatus=BATTERY_STATUS_UNKNOWN
Nd4j.rand(200,200,min,max,Nd4j.getRandom())
onPackageAppeared(pkgList[i],mChangeType)
Preferences.getBoolean(key,false)
myCache1.get("myKey1").getObjectValue()
!export && !Const.isEmpty(beforeFilename) && !beforeFilename.equals(fname)
expandableView.getIntrinsicHeight()
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
CharSequence text
ImmutableList.of("/bin/bash","-e","-c",cmd)
AnnotatedElementUtils.findAnnotationAttributes(type,annotationType)
expectedHigh=27862.0
selenium.isElementPresent("link=Control Panel")
request.getManager().loadMaterial(text)
mQsDensityContainer.getX()
prefsWriter.apply()
ExoPlayerFactory.newSimpleInstance(renderersFactory,trackSelector,drmSessionManager)
new IndexWriter(directory,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
dynamicType.getDeclaredConstructor()
!hasPermission(permission)
name.equals("getNetworkCountryIso") || name.equals("gsm.operator.iso-country")
realm.checkIfValid()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name)
image.getRGB(j,i)
GL20.glGetUniformiv(program,location,params)
GenerationUtils.compileFilesGetGenerationState(fileAndExhaust.getJetFile().getProject(),fileAndExhaust.getExhaust(),Collections.singletonList(fileAndExhaust.getJetFile()))
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
override.asString()
loadingFinished || loader.isLoading()
application.isWriteAccessAllowed() || application.isDispatchThread()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION,false)
promises.add(promise)
state != null && state.mTint != null
STATUS_DRAW=0x1
"application/json".equals(contentType) || "json".equalsIgnoreCase(contentType)
allTags == null
LOG.error("Fetch holidays failed. Aborting.",e)
formatTimeMs(scanWifiLockOnTime / 1000)
verify(mWifiService).stopLocalOnlyHotspot()
public T getAsset(); 
-2026370166
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
transportError.augmentDescription("\n" + headers.toString())
Native.getLibraryOptions(classes[i])
nextNonWakeup != 0 && mNextNonWakeup != nextNonWakeup
currentJBUIScale()
DBFactoryUtil.setDB(DB.TYPE_HYPERSONIC,null)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
v.getTableId() == LobStorageFrontend.TABLE_RESULT || v.getTableId() == LobStorageFrontend.TABLE_TEMP
mConnector.executeForList("volume","list","broadcast")
searchAutoCompleter.addBibtexEntry(entry)
record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
Double.isNaN(rate) || Double.isInfinite(rate)
params[1]
MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)
"//float[@name='score']='" + 1.0f + "'"
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
getServiceForUserLocked(userId)
Flux.from(this).multicast(EmitterProcessor.replay(1))
volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.getMountUserId() == userId
assertEquals("Commit subject is incorrect",expectedSubject,records.get(0).getSubject())
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n",expectedPath)
DBG=false
BinaryFieldMetadata meta=fields != null ? fields.get(fieldName) : null; 
url.addEncodedArgument(getAttributeValue(nodeAtts,"name"),getAttributeValue(nodeAtts,"value"))
Throwable exc
assertEquals(454910647,flyway.info().applied()[1].getChecksum().intValue())
openSparkInterpreter(false)
new GridCacheQueryReadEvent<>(cctx.localNode(),"Scan query entry read.",EVT_CACHE_QUERY_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SCAN,cctx.namex(),null,null,qry.scanFilter(),null,null,qry.subjectId(),taskName,key,val,null,null)
new GroovyBugError("The lookup for " + name + " caused a failed compilaton. There should not have been any compilation from this call.",cfe)
MavenLog.LOG.info(e)
mService.disableEphemeralNetwork(SSID)
servers == null || servers.isEmpty()
current instanceof InvokeWithExceptionNode
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)
(filterMap.getDispatcherMapping() & FilterMap.INCLUDE) != 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).descriptionAndTooltip(message)
paintBorder.top > 1
status.getRole()
Log.w(TAG,e.getMessage(),e)
parent.resolveFile(jarfile)
edge.setDirection(EdgeDirection.UNDIRECTED)
@Nullable T value
(totalItemCount - lastVisibleItemPosition) <= ITEM_LEFT_TO_LOAD_MORE
replaces={"doCachedTypeCachedOffset","doCachedType"}
rcvdBytesCnt.longValue()
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger || sourceObject instanceof PostgreViewBase
settings.readLPw(null,0,false)
IllegalStateException.class
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
tracesDir.mkdirs()
prefs.getBoolean("manage_system",false)
!target.toFile().exists() || target.toFile().isDirectory()
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
prj0.getAndPutIfAbsent(i,i * i)
StringBuilder buf=new StringBuilder(name.length() + parameters.length * 10); 
assertEquals(5,lm.getFields().size())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION,false)
outgoingCounter.getAndSet(0) / 1024d
15 * 60 * 1000
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,40000L,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
ApplicationManager.getApplication().executeOnPooledThread(new Callable<Void>(){   @Override public Void call() throws Exception {     tester.test(file,xmlFile,originalVFile);     return null;   } } ).get(8888,TimeUnit.SECONDS)
realm.checkIfValid()
IOUtils.closeQuietly(is)
Deactivate(app)
(outputFolder + File.separator + apiFolder).replace("/",File.separator)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
MUCActivator.getAlertUIService().showAlertPopup(resources.getI18NString("service.gui.ERROR"),errorMessage)
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitude()
connectedHeaders.setVersion("1.1")
Exception e
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroupsIn(groups)
buffer.remaining()
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
@Nullable
Object shooter=((Projectile)event.getDamager()).getShooter(); 
new GroovyRuntimeException("Unable to load logging class",e)
parameters == null || parameters.length == 0
sharedElements.get(localName)
field.getFieldName().equalsIgnoreCase(s)
clazz.getMethod(methodName,classArgs)
logger.error("{} is already cancelled",impl.uuid())
Results.json()
mCurrentVrCompositorService == null
Base.copyFile(sketchFile,properPdeFile)
loaded.getLoaded().getDeclaredConstructor()
super(position,message,cause); 
close.setVisibilityImmediate(removable ? VISIBLE : GONE)
final JarBinarySpecInternal binary
resultTargetUser != null && !resultTargetUser.isEmpty()
item.isChecked()
Long.parseLong(row.getValue(partitionCol).toString())
Util.isCreditCardTopupSupported(activity,link)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
entity.addComponent(delayedComponent)
SystemClock.uptimeMillis()
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new MaterialDialog.Builder(this).title(R.string.useGoogleLocationServices).content(R.string.useGoogleLocationServicesPrompt,true)
-4
convertView == null || convertView.getTag() == null
casProperties.getMonitor().getEndpoints().getSingleSignOnStatus()
url.addEncodedArgument(getAttributeValue(nodeAtts,"name"),tempNode.getFirstChild().getNodeValue())
it.getJavadocComment()
saveState
DATABASE_VERSION=65
assertEquals(10,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
GlobalSearchScope.allScope(getProject())
jp.getLongValue()
s.length() > 3 && s.charAt(3) == '<'
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new Paint()
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
rename.isInternal()
makeTypeWithArguments(node)
DAO_RESCUE_BLOCK=1_800_000
context.getFlowScope().put(key,authorizationUrl)
randomAlphanumeric(100)
getPresenter().getRepoId()
ThreadPoolDownloadService.makeIntent(getContext(),mHandler,Options.TEST_URI)
LOG.error("Failed to register State Store bean {}",e.getMessage())
checkCall(receiver)
t + 1000
element.getStringValue()
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
isAvailable(oldStatus)
BufferUtil.zeroBuffer(1)
noParam == null && arguments.length != 0
StringUtils.isNullOrEmpty(id)
bedtime - SystemClock.uptimeMillis()
AppNewMsgAlarm.startAlarm(getActivity(),false)
mChildrenExpanded ? mDividerHeight : mChildPadding
assertTrue("#threadState() was: " + metadata.threadState() + "; expected either RUNNING or CREATED",Utils.mkList("RUNNING","CREATED").contains(metadata.threadState()))
DEBUG=false
groupingSets.isEmpty()
typeSettingsProperties.toSortedString()
_cacheRegistryItems.remove(cacheRegistryItem.getRegistryName())
pw.print(ps.getInstantApp(user.id))
StringUtils.subString(url,"weburi-",".json",true)
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamAccount()
myViewingPanel.requestFocus()
mAppToken.isVisible()
String message
Exception t
myChild2.getElementType() == ElementType.BLOCK_STATEMENT || myChild2.getElementType() == ElementType.CODE_BLOCK
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
modObjectTable == null || !modObjectTable.contains(modId,name)
"Camera resolution: " + cameraResolution
LinkedHashMap<String,Operator<? extends Serializable>>
encoded != Integer.MAX_VALUE
order=11
account.getId()
args[0]
LinkageError e
poList[2]
new StackManager(new File(upgradeCycle),null,osFamily,false,metaInfoDao,actionMetadata,stackDao)
isChild() || !window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new DeadCodeEliminationPhase(Required)
document.getModificationStamp() == event.getOldModificationStamp() || !isDocumentUnsaved(document)
LanguageFolding.INSTANCE.forLanguage(elements[0].getLanguage()) instanceof CustomFoldingBuilder
rootVDir.refresh(true,false)
field.getType()
resultTargetUser != null && !resultTargetUser.isEmpty()
Integer.parseInt(attrValue)
suppressed.add(t)
increment != 1 || Registry.is("ide.scroll.default.unit.increment")
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
psiFile == null || psiFile instanceof PsiCompiledElement
Log_OC.e(TAG,"initFragments() called with invalid NULLs!")
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
enableOptimization.isSelected()
loaded.getLoaded().getDeclaredConstructor()
myCache1.getCacheConfiguration().getMaxEntriesLocalHeap()
return true; 
pixmap.fillCircle(x,y,radius,color)
forceShutdown(t)
Uri uri
synchronized (this) {   classCache.put(cls.getName(),cls); } 
walk.close()
mapper.writeValueAsBytes(segment)
mListener.getConnectionId() != -1 && request.mConnectionID != null
LOG.warn(e,"Parser exited while decoding BSER data")
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
FastMath.min(origin,num.doubleValue())
LOG.info(title + "; " + message)
new Integer(this.value)
withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
dockedBounds.left - dockDividerWidth
this.get(0)
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,false,userId)
r != null && r.isHomeActivity()
hideMenu()
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))).append(targetNode)
ServiceLoader.load(Collector.class,getClass().getClassLoader())
Exception e
left + width
providerConfig.setTimeout(5000)
selenium.isElementPresent("link=Control Panel")
Map<String,Integer>
DELETE_OUT=false
new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()).build()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
retriever.getFrameAtTime(-1)
new ArrayList<>(0)
@Override
mContext.sendBroadcast(intent)
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
row("p_comment",null,5.0,0.0,null,null,null)
SingleMapBlock.class
n.doubleValue()
LOG.warn("Unable to close socket selector")
dep instanceof PythonPackagable
LOG.d(TAG,"We have a callback to send this result to")
@SuppressWarnings("unchecked") private SubType _this=(SubType)this; 
clipItem.coerceToText(mContext)
BaseBulletTest.init()
mAttributes.getAllFlags()
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).getSeconds()
context.formatNewLine()
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
onDetachedFromWindows()
mContainerActivity.getStorageManager() != null && getFile() != null
is(500)
mCameraUser.submitRequest(request,true)
expected == short.class || expected == Short.class
new ConcurrentHashMap<String,Boolean>(256)
testClass.getSimpleName()
CamelCloudServiceCallRoutesAutoConfiguration.class
date.getYear()
type != null && type.getParameterCount() > 0
region.getRegionHeight()
assertThat(filter.getColumns()).hasSize(8)
Log.e(TAG,"This will become an error",ex)
IRON_SWORD(267,1,250)
Arrays.asList(1,2,3,64)
changed || !getExternalFile().exists()
Optional.ofNullable(this.servicesManager.findServiceBy(service))
panel.getAuthors()
new MockQueryExecution(2)
Thread.sleep(2000)
lp.resolveLayoutDirection(layoutDirection)
equal=true
drawer.addDrawerListener(toggle)
waitForMappingUpdateOnAll("event","data.sessionid")
new CountDownLatch(2)
blockUri.getIdentifier().toLowerCase()
"Surface(native-token=" + mSurfaceControl + ")"
queryMixin.rightJoin(target,alias)
ModalityState.defaultModalityState()
exchange.getPartitioningScheme().isReplicateNullsAndAny()
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
getPreferenceStore()
g.events().localListen(lsnr,EventType.EVT_NODE_LEFT,EventType.EVT_NODE_FAILED)
logLine <= 0
LookupElementBuilder.create(expr,referencedName)
timeFormatter.format(value)
Metric<Long>
userActivity(SystemClock.uptimeMillis(),-1,false,OTHER_EVENT,false)
new Paint()
executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
Object context
!hasPermission(permission)
SHOW_DISABLE_FOREGROUND=false
mState != STATE_INITIALIZED
scriptField.setInitialText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
methodFlatteningResolver.resolve(methodDescription)
selConnection > 0 && activeFile != null
getPreferences().getBoolean(SIGNAL_PREF,false)
expected=33554436
assertBusy(() -> {   GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();   SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);   logger.info("Snapshot status [{}], successfulShards [{}]",snapshotInfo.state(),snapshotInfo.successfulShards());   assertThat(snapshotInfo.state(),equalTo(SnapshotState.SUCCESS));   assertThat(snapshotInfo.successfulShards(),equalTo(shards)); } ,30L,TimeUnit.SECONDS)
service.getDomain().id()
Exception ignored
/**   * {@inheritDoc}  */ @Override public CollectionProperty clone(){   CollectionProperty prop=(CollectionProperty)super.clone();   prop.value=cloneCollection();   return prop; } 
bedtime - SystemClock.uptimeMillis()
mInitialMotionX == null || mInitialMotionX.length <= pointerId
fragment.dismissAllowingStateLoss()
ExecutionStrategyParameters oldParameters
UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {   PsiDocumentManager.getInstance(myFixture.getProject()).commitAllDocuments();   final String intentionName=PyBundle.message("sdk.gen.stubs.for.binary.modules",myUseQuickFixWithThisModuleOnly);   IntentionAction intention=myFixture.findSingleIntention(intentionName);   if (intention instanceof IntentionActionDelegate) {     intention=((IntentionActionDelegate)intention).getDelegate();   }   Assert.assertNotNull("No intention found to generate skeletons!",intention);   Assert.assertThat("Intention should be quick fix to run",intention,Matchers.instanceOf(QuickFixWrapper.class));   final LocalQuickFix quickFix=((QuickFixWrapper)intention).getFix();   Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run",quickFix,Matchers.instanceOf(GenerateBinaryStubsFix.class));   final Task fixTask=((GenerateBinaryStubsFix)quickFix).getFixTask(myFixture.getFile());   fixTask.run(new AbstractProgressIndicatorBase()); } ,ModalityState.defaultModalityState())
sendKeyUp()
element instanceof FakePsiElement
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
BACKGROUND_DEXOPT_JOB=800
key + randomIntBetween(2,10)
getExecutionContext()
mNavigationBarView.inScreenPinning() || mStatusBar.isKeyguardShowing()
selenium.isElementPresent("link=Control Panel")
instructionForm.getfulfillmentGroupId()
value + MINIMUM_BACKLIGHT
quoteMatcher.group(1)
addAnnotations(result,oldExternalName,file,fileData)
socket.setSoTimeout(500000)
new KettleException("There was an error during transformation split",e)
this.setSize(480,300)
dest.writeTypedArray(remoteInputs,flags)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
mWindowManager.removeViewImmediate(mPopupView)
typeSettingsProperties.toSortedString()
LayoutLocalServiceUtil.getLayouts(groupId,false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,false,0,1)
(Number)array[this.index]
new InputStreamReader(is,"UTF-8")
getClass().getResource("porterTestData.zip").toURI()
case 8: 
metadata.getFaceRectangles()
curComp.equals(service)
_log.warn(ioe,ioe)
/**   * Indicates that the user's friends are able to see posts made by the application.  */ FRIENDS(NativeProtocol.AUDIENCE_FRIENDS)
forceShutdown(t)
itemMatches(target,itemStack,false)
dpToPx(24f)
processSelectedKeys()
ctx.writeAndFlush("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
ft.commitAllowingStateLoss()
ap.getSsidStr()
resources.nextElement().toURI()
type.getDeclaredConstructor()
logger.warn("Not a directory: " + dir.getAbsolutePath())
server1.getStoreRepository().getStorageEngine(storeName)
new Paint()
fieldDeser.getPropertyValueDirect(currentObject)
new IndexWriter(rd2,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
getClass().getSimpleName()
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,writableRegistry(),ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName(clusterName)).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
dpToPx(64f)
mUiHandler.removeCallbacks(pae)
entity.addReference(referenceEntity)
eocBound == Bound.END
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static Factory getNewFactory(SQLDialect dialect){   return getNewFactory(DEFAULT_INSTANCES[dialect.ordinal()]); } 
JournalTemplateServiceUtil.getTemplate(webDavRequest.getGroupId(),journalTypeId,true)
id=22
parseValueParameterList(false,true,valueArgsRecoverySet)
new ConcurrentHashMap<Class<?>,Constructor<?>[]>(256)
realStartActivityLocked(hr,app,true,true,null)
contactImpl == null
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new ClsFileImpl(new ClassFileViewProvider(getManager(),virtualFile)){   @NotNull @Override public String getPackageName(){     return classOrObject.getContainingJetFile().getPackageFqName().asString();   }   @NotNull @Override public PsiClassHolderFileStub getStub(){     return getJavaFileStub();   }   @SuppressWarnings("Contract") @Override public boolean processDeclarations(  @NotNull PsiScopeProcessor processor,  @NotNull ResolveState state,  PsiElement lastParent,  @NotNull PsiElement place){     if (!super.processDeclarations(processor,state,lastParent,place))     return false;     String packageName=getPackageName();     if (!packageName.isEmpty())     return true;     PsiPackage aPackage=JavaPsiFacade.getInstance(myManager.getProject()).findPackage(packageName);     if (aPackage != null && !aPackage.processDeclarations(processor,state,null,place))     return false;     return true;   } } 
!blockDismiss
result.getCause()
logger.error("IOException should not have been thrown.",exc)
ack.getLastMessageId().setEntryLocator(seq)
Integer.parseInt(nid[0],16)
NonPersistentSiteThreadLocalCache cache=NonPersistentSiteThreadLocalCache.getSitesCache(); 
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)
request.getRemoteAddr()
service.getDomain().id()
serverService.getOutgoingInterceptors()
input.getCharSequence(action)
sqlRouteResult.getSqlParsedResult().getType()
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
new ConnectionException(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR)
Column::getName
!importedClassIndex.isEmpty()
WaitUtils.waitForPageToLoad()
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required",Constant.getZapHome())
Slog.e(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
JComponent fragmentComponent=EditorFragmentComponent.createEditorFragmentComponent(uEditor,range.getVcsLine1(),range.getVcsLine2(),false,false); 
_typeSettingsProperties.toSortedString()
!hasPermission(permission)
getModifiableRootModelProxy()
new BooleanValidator("store.json.extended_types",false)
mMatchMode=matchMode
network.predecessors(producedNode)
ImmutableMap<String,String>
Log.w(mTag,"Adjusting remote volume without a controller!")
new IndexWriter(dir,false,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Log.e(TAG,"This will become an error",ex)
isDirectory()
getSupportActionBar()
Log_OC.e(TAG,"initFragments() called with invalid NULLs!")
ColorProperties.getColor("tableGrid")
STATUS_DRAW=0x1
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.5,graphId)
m.size()
FBUtilities.getBroadcastAddress()
new LayerVisitor(flatRegion,minimumBlockY(region),maximumBlockY(region),naturalizer)
DEBUG=false
generatorConfig.getModelPackageTargetFolder()
new Color(mParams.getCustomBackgroundColor(),true)
selenium.isElementPresent("link=Control Panel")
ai.uid < Process.FIRST_APPLICATION_UID
DEBUG_RC=false
assertEquals(14,beanCount)
assertSameLines("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>test</groupId>\r\n"+ "    <artifactId>project</artifactId>\r\n"+ "    <version>1</version>\r\n"+ "    <dependencies>\r\n"+ "        <dependency>\r\n"+ "            <groupId>group</groupId>\r\n"+ "            <artifactId>artifact</artifactId>\r\n"+ "            <version>version</version>\r\n"+ "        </dependency>\r\n"+ "    </dependencies>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
request.setAttribute("liferay-ui:asset-display:assetEntry",assetEntry)
!results.containsKey(beanName) && findAnnotationOnBean(beanName,annotationType) != null
Assert.assertEquals(3,autoPartition.getPartitionNum())
intermediatePoints != null && !intermediatePoints.isEmpty()
type.getInternalCanonicalText()
ColorProperties.getColor("tabTitleHighlight")
serialVersionUID=1712639541
new LogicalPosition(lline,repeatColumn)
new IndexWriter(index,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
LOG.info(e)
Throwable ex
DEBUG=false
result != null && endpointId <= result.getInstances()
getBaseName()
editor.selectNextTab()
bedtime - SystemClock.uptimeMillis()
Maps.newLinkedHashMap()
selenium.isElementPresent("link=Control Panel")
new ForAdvice(adviceMethod,new TypeList.Empty(),enterTypes,TranslationMode.ENTRY)
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
LOG.warn("Promotion of block " + blockId + " failed.")
fragment.dismissAllowingStateLoss()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
1
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
list.add(0,parameter)
db.isSyncMode()
LogAdapter.createLog(name)
state.value == rotationLocked && state.contentDescription != null
trans != null && trans.getStepPerformanceSnapShots() != null
isAllowed()
PULL_DECAY_TIME=1000
adapter.getCustomArgumentResolvers()
Math.min(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
LOG.warn("Ignoring duplicate class " + className)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionMaxout.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,100,32.81408434266,DeepLearningParameters.Activation.Maxout)
prefs.getBoolean(AUTO_START,true)
@Nullable public P getParams(){   return params; } 
Build.VERSION.SDK_INT < 24
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
fmd.getValueCount() == 0 && (!fmd.hasGroupCount() || fmd.getGroupCount() == 0)
Box.createHorizontalGlue()
Validator.isNull(userUUIDString)
testClass.getMethod(SUITE_METHODNAME)
ris.setAmount(amount)
nameTextField.getText()
type == null || type == UNKNOWN_PARAMETER_TYPE
activity.getUserId()
ImmutableList<INPUT>
60L + 120L
allocator.getFlowController().prepareActionAllWrite(x,activations,gamma,beta,mean,var)
mCurrentDate.get(Calendar.MONTH) != month
limit=100
timeVector.getMutator().setSafe(index,value)
DEBUG_GESTURES=false
LinkedHashSet<>
getLogger().debug("Scanning for extensions: " + mavenProject)
win.isDrawnLw() || win.hasAppShownWindows()
selenium.isElementPresent("link=Control Panel")
hazelcastFactory.newHazelcastClient(newClientConfig())
users.get(j)
mMat[5]
Model
reusedBytes()
LOG.warn("The given state from the response: " + billToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
path.lastIndexOf("/") <= 0
private Stream createRemoteStream(int streamId) throws ConnectionException {   Integer key=Integer.valueOf(streamId);   if (streamId % 2 != 1) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR);   }   if (streamId <= maxRemoteStreamId) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR);   }   Stream result=new Stream(key,this);   streams.put(key,result);   maxRemoteStreamId=streamId;   return result; } 
defaultDndAccess != null
primaryShard.recoverySource()
new DateMathParser(formatDateTimeFormatter)
return false; 
BackupManagerServiceInterface svc=mService; 
tracesDir.mkdirs()
Assert.packageNotEmpty(mainCls,"your main class is empty of package.")
showRecentApps(true,false)
mSimpleCard.getVisibility() != View.VISIBLE || (mCard != null && mCard.getVisibility() == View.VISIBLE)
_cloneFormat(DATE_FORMAT_ISO8601_Z,formatStr,DEFAULT_TIMEZONE,_locale,_lenient)
selenium.isElementPresent("link=Control Panel")
principalCookieName != null && httpRequest.getCookies() != null
sb.index() - 1
Throwable err
mSyncStatus.valueAt(i)
myApplyData == null || myDisposed
temporaryFolder.newFolder()
randomAlphaOfLengthBetween(6,20)
new GitException("Remote push url " + url + " is invalid. ")
m.getDeclaringClass()
into.get(j)
mValues[8]
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名",e)
Boolean.parseBoolean(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
log.logError(BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
i >= 0
MmsMessageRecord mediaMessage=(MmsMessageRecord)message; 
stack.stackSize > 0 && successful
BeanPropertiesUtil.getObjectSilent(model,_rowIdProperty)
replayPosition - stopPosition >= 0
HEAT_PER_MJ=0.0023F
"user_not_found".equals(code) || "missing_param".equals(code)
emptyCheck.log(0,"msgKey")
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
drawable != null
evaluator.addComponentTypeFromArrayExpression(resolveParent,arrayExpression)
doNotUseAnimations ? 1 : Math.max(450,(Math.abs(mStX) + Math.abs(mStY)) / 1200f * MOVE_MOVE_ANIMATION_TIME)
Simple.forClass(skylarkType)
Integer.parseInt(getOptional("kylin.storage.hbase.small-family-block-size-bytes","65536"))
new DefaultConfiguration(new NoConnectionProvider(),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
i.getTouchIconUrl() == null
VersionPrinter.printVersion()
AvailablePortFinder.getNextAvailable(4000)
mEase3.setTextColor(mNextTimeTextRecomColor)
correctedOffset >= 0 && offset < document.getTextLength()
case STOP_SERVER: 
new IllegalStateException(ex)
this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
dateVector.getMutator().setSafe(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
0 != mUnwantedNetworkCapabilities
Simple.forClass(Integer.class)
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setId(POINT_ADD_GPX_WAYPOINT)
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
private File modSource; 
log.error("Problem in JSR223 script ",e)
Integer.parseInt(taskIdStr)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
public Message sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName))
DBG=true
assertThat(getField(graphite,"port")).isEqualTo(2003)
new Paint()
i=1
mListener.getConnectionId() != -1 && request.mConnectionID != null
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
proxy == null
Object tag
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).subscriberContext(withUser)
selenium.isElementPresent("link=Control Panel")
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_CURRENT)
queryType != null && !CommonUtils.isEmpty(wordPart)
Assert.assertEquals(4,results.size())
isInputViewShown()
String message
dynamicType.getDeclaredConstructor()
c == Long.class || c == Long.TYPE
!mShowLockscreenNotifications
Integer.parseInt(attrValue)
child.resetRtlProperties()
assertEquals("stream",server.mode())
ultimateRecyclerView.enableDefaultSwipeRefresh(false)
private final UUID accountId; 
descriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
paramName.substring(5)
mExpandedChild.getHeight() <= mHeadsUpChild.getHeight()
GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))
mAdapter.getCount() > i && mAdapter.getItem(i) != null
exception.getMessage()
run.size() == maxBatchWriteSize
VERSION=2
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
selenium.click("//li[4]/span/a/span")
classNameOptional.isPresent()
mm.tryLock(key,10,TimeUnit.SECONDS)
context.getMainLooper()
ClusterUtils.getCurrentPartitionMapping(cluster)
from > to
1L << QUOTIENT_BITS
"$" + name
public T getMedian(){   if (count > 0) {     return values.get((int)(values.size() * .5));   }   return ZERO; } 
colors.getThemeAttributeId(i,0)
assertNotNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
LOGGER.info(msg.apply())
Timber.w(error)
fragmentCollectionPersistence.findByGroupId(groupId,start,end,orderByComparator)
bits2[1] == true
telephony.isRinging(getOpPackageName())
STUB_VERSION=30
HB_TRAIL_31372(5750)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
ph_mean[i]
selenium.click("//li[4]/span/a/span")
type.getDeclaredConstructor()
Response.ok(null,MediaType.TEXT_PLAIN)
this.getOwnerAddress()
SDK_INT >= JELLY_BEAN && SDK_INT <= LOLLIPOP_MR1
showRecentApps(true,false)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
next + SEPARATOR.length()
usersFile.getPath()
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE)) && (pn.getCountryCodeSource() == PhoneNumber.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN)
Boolean.parseBoolean(attrValue)
mProfileCursor == null || mProfileCursor.getCount() == 0
selenium.isElementPresent("link=Control Panel")
bar.setResultWaitTime(1000)
type.getDeclaredConstructor()
stopwatch.elapsed(MILLISECONDS)
!active || nameSuggestionContext == null
LOG.warn("Cannot access storage directory " + rootPath)
filesQueue.remove(0)
Integer.parseInt(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
booleanPreference(preference,value,R.string.p_end_at_deadline,R.string.EPr_cal_end_at_due_time,R.string.EPr_cal_start_at_due_time)
ctx.write(msg,promise)
jndiName == null
child.resetRtlProperties()
Simple.forClass(SkylarkList.class)
errorCode == FacebookRequestError.INVALID_ERROR_CODE
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
super(false); 
private Object requestCacheKey=UUID.randomUUID().toString(); 
dep != null
el.classNames()
Sets.newConcurrentHashSet()
mAuthorities.valueAt(i)
sourceSet.getOutput()
/**   * Saves the size and the location of a specific <tt>Component</tt> through the <tt>ConfigurationService</tt>.  * @param component the <tt>Component</tt> which is to have its size andlocation saved through the <tt>ConfigurationService</tt>  * @throws PropertyVetoException if the <tt>ConfigurationService</tt> doesnot accept the saving because of objections from its <tt>PropertyVetoListener</tt>s.  */ static void saveSizeAndLocation(Component component) throws ConfigPropertyVetoException {   Map<String,Object> props=new HashMap<String,Object>();   String className=component.getClass().getName().replaceAll("\\$","_");   props.put(className + ".width",component.getWidth());   props.put(className + ".height",component.getHeight());   props.put(className + ".x",component.getX());   props.put(className + ".y",component.getY());   UtilActivator.getConfigurationService().setProperties(props); } 
isShowing()
!f
300 * Constants.SECOND_MS
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null),true)
c.getLiquid() == null || c.getLiquid().amount < c.getCapacity()
getFragmentManager()
15 * 60 * 1000
Boolean.parseBoolean(attrValue)
two.setAxisIndex(0)
AnnotatedElementUtils.findAnnotationAttributes(method,annotType)
sendResourcesChangedBroadcast(true,true,pkgList,uidArray,null)
-1
Throwable err
jp.getNumberValue()
case BALD: 
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES,UserHandle.getUserId(getCallingUid()))
toRemove[1]
StringBuilder curString=new StringBuilder(); 
p.getUnknownSearchWordLength() >= 3
Long.valueOf(p.getProperty(screenName + ".id"))
otherWriter.write(line)
IllegalArgumentException.class
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("DH-RSA-DES-CBC3-SHA",KeyExchange.DHr,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA")
displayList != null && displayList.isValid()
registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false,runtimeOnlyFlags)
new ArrayList<>(0)
startActivity(mAdapter.intentForPosition(0))
endpoint.getCurrentThreadsBusy() >= limit
new MergingUpdateQueue("EditorNotifications update merger",100,true,null,project)
new WorldPoint(3106,3369,2)
!mRenderNode.isPivotExplicitlySet()
DEFAULT_MAX_QUERIES=4
WebSockets.sendPongBlocking(applicationData,webSocketChannel)
acceptHeaderValues != null && !acceptHeaderValues.isEmpty()
trade.getPrice()
changeAffiliationByAdmin(jids,"admin")
new SimpleTextSegmentInfoFormat()
!ops.graph().isFrozen() && vertex.vertexID() == newVertex.vertexID()
new QueryException(e,"Error in resolving targets matching %s",pattern)
grantRuntimePermissionsLPw(pkg,permissions,permissionGrant.fixed,userId)
@Override
multipleDescriptors || !hasFixes
rematchAllNetworksAndRequests(networkAgent,oldScore)
case 8: 
columnsPerRow <= 0
VERSION=42
dockedBounds.bottom + dockDividerWidth
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
CallParticipantRecordImpl newRec=new CallParticipantRecordImpl(callParticipant.getAddress(),new Date(),null); 
typeSer.writeTypeSuffix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
Integer.parseInt(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
user == null || "false".equalsIgnoreCase(property.getProperty("zeppelin.jdbc.auth.kerberos.proxy.enable"))
Throwable e
mRemote.transact(GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
checkCall(receiver)
staticCall("java.lang.System","exit").parameterCount(1)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,true)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
mView.postOnAnimation(mAnimationStarter)
mRenderer.getViewportHeight()
JSONValue.parseWithException(value)
structuralLock.isHeldByCurrentThread()
userState.mIsDisplayMagnificationEnabled || userHasMagnificationServicesLocked(userState)
appearance.getFloat(attr,0)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
inserter.close()
getServerManager().getProperties().containsKey("meiligao.server")
urlConnection.getContentLengthLong()
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
log.debugf("Getting cached data from region [`%s` (%s)] by key [%s]",getRegion().getName(),getAccessType(),key)
Validator.isNotNull(portletResource)
Thread.sleep(1000)
StringBuffer sb=new StringBuffer("RuleFlowProcessInstance"); 
Thread.sleep(1000)
JSParameterTableModel.createInitializerCellFragment("",createFakeClass(),JavaScriptSupportLoader.ECMA_SCRIPT_L4)
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",resolvers,entityID)
equalTo(3.0)
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
log.warn("Query failed to validate : '{}'",executionInput.getQuery())
DBG=false
len >= 0
saveTaskDefinition(taskDefinition)
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } )
(Double)o
mDragState == STATE_IDLE
cs[c].set(r,(long)((_createFrame.integer_range + 1) * (1 - 2 * rng.nextDouble())))
isReturnGeneratedKeys() || isReturnGeneratedKeys() && generatedKey.isPresent()
unlockForRescale()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
U.warn(log,"Failed to load partition counters.",e)
centerButton(mButtonNegative)
LocalEjbReceiver.clone(resultCloner,exception)
mSyncStatus.valueAt(i)
field.getTypeDesc()
assertEquals("Size of " + r,1,r.size())
new Random()
c == '\\' && i + 1 < cursor
new WebdavEntry(resp.getResponses()[i],getUri().getPath())
port == 443 && "https".equals(scheme)
pm.runMigrationTasks(tasks,partitionId,replicaIndex,from)
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF && (mActualScale - mMinZoomScale <= MINIMUM_SCALE_INCREMENT)
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistration(PBHelper.convert(registration))
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
isGreaterOrEqual(platformVersion,M)
i.getName().toString()
writeString(writer,fieldName,String.valueOf(reader.getLong()))
T item
initialCapacity > 1 << 30
entry.rxPackets == 0 && entry.txPackets == 0
Exception e
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)
StringBuffer pattern=new StringBuffer(this.prefix); 
status.isError || status == State.ONLINE
dynamicType.getLoaded().getDeclaredConstructor()
isAssignableFrom0(supertypeName,cn.superName,cl)
participantAddresses.get(3)
/**   * called by handle  */ public static String coerceToString(Object o){   return o.toString(); } 
String viewIdResName
this.session.users().getServiceAccount(client)
accountHandle.getComponentName().flattenToString()
refreshRotationLockTile()
setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.7,55.6)
scheme.equals("tel") || scheme.equals("sip")
getLookupString()
connectionQueueMap.get(peerDescription)
i < 30
readers[i].doDelete(n - starts[i])
IndexReader.open(benchmark.getRunData().getDirectory())
toolItem.getParent()
assertEquals(fc2,fc)
serviceDataUuid == null || mServiceData == null
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
layer1.initializer().numParams(c)
VcsTestUtil.assertEqualCollections(tags,myTags)
getUserStateLocked(resolvedUserId)
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",400,"application/xml","resources/add_book.txt",null)
mIconId != 0
Log.w(TAG,"Unable to resolve SystemUI's UID.",e)
client != null && client.autofillClientIsFillUiShowing()
name != null && name.length() > 2
new RandomIndexWriter(random(),dir,cfg)
new WondexProtocolDecoder(ServerManager.this)
@Specialization protected LLVMVirtualAllocationAddressTruffleObject escapingJavaByteArray(LLVMVirtualAllocationAddress address,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMVirtualAllocationAddressTruffleObject(address.copy()); } 
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(false)
dbCol.findOne(filter)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
near.getAndRemove(1)
getPlayerPosition().y
loaded.getLoaded().getDeclaredConstructor()
c == Character.class || c == Character.TYPE
attributes.size() >= 1
expDate == null || ZonedDateTime.now(ZoneOffset.UTC).isAfter(expDate)
mFlexItemInEdit.setAlignSelf(AlignItems.BASELINE)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
assertEquals(26,sqlStatements.get(1).getLineNumber())
selenium.isElementPresent("link=Control Panel")
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
i < 100
configureTemplateDescriptionAndIcon(resultTemplate,iconUrl)
timeout >= 0
selenium.isElementPresent("link=Control Panel")
ONE_MINUS_DST_ALPHA(7)
fireDataChanged()
process.getErrorStream()
object.getDataSource()
getDefaultCountry()
map.set(key,toStoreValue(value))
mSharedElements.size()
UnsafeUtils.set8(_mem,8,bias)
URI.create(super.getHeader(name)).getRawPath()
new StringInputRowParser(new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null)),null,null,null,null)
LOGGER.warn("Could not parse entry",ex)
chain.resolveUrlPath(resourceUrlPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
this.messageService.fluxPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
logger.trace("Creating Object {}",count.getAndIncrement())
executor.execute(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
new IndexShardRoutingTable.Builder(new ShardId(indexName,0))
doInvoke(args)
m.getDeclaringClass()
gatt.setPeriodicAdvertisingEnable(this.advertiserId,enable)
mFollowersWPCOM != null || mFollowersEmail != null
annotation.authentication()
TOUCHEVENT_POOL.recyclePoolItem(pTouchEvent)
!isInitialized
rowMeta.size()
counter > max
Looper.getMainLooper() == Looper.myLooper()
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(2,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
mUiHandler.removeCallbacks(pae)
System.out.println("JVM options:")
q.getColRef()
CharSequence url
Pattern.compile("(<style>.*</style>)|<[^<>]*>",Pattern.DOTALL)
WeakSafeReadWriteLock strongReference
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_CAMERA,showCamera)
previousAnnotation.compareToIgnoreCase(annotation)
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,amount,razberryLimit)
dest.writeInt(mSubId)
/**   * GridGain message.   */ IGNITE
assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
new ContiguousIntervalUsageInArrear(usage,accountId,invoiceId,rawSubscriptionUsage,targetDate,rawUsageStartDate,invoiceConfig,internalTenantContext)
pt.isReference() || pt.isNotEditableOsm()
assertPlanEquals(expectedPlan,actualPlan)
res.getDescription()
length < 0
setImageDrawable(icon,false)
private final static ThreadPoolExecutor EXECUTOR=new ThreadPoolExecutor(5,Integer.MAX_VALUE,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>()); 
StatBuckets.prettyUptimeStr(secs)
!mResources.getConfiguration().isScreenRound() || mAttachInfo == null
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
{(byte)this.getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}
value < maximumValue
MultiValueMap<String,Object>
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
archivePath.get()
"Deleting existing file: " + target
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""),mTouchDisabled ? "T" : "f")
FileTemplateUtil.mergeTemplate(attributes,VfsUtil.loadText(file),true)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
new ObjectMapper().readerFor(DiskBalancerWorkStatus.class)
Log_OC.d(TAG,"onPause() start")
logger.debug("Mlock successfull")
GridHadoopProcessorAdapter hadoop=((GridKernal)grid(0)).context().hadoop(); 
computeAntiJoin(inputStatistics,inputStatistics,x,unknown)
host1.getSocketAddress()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn(),op.getStartLine(),op.getStartColumn() + 3)
file.getName()
this.constraints.updateFromFactHandle(workingMemory,handle)
new ConnectorTableLayout(handle,Optional.empty(),TupleDomain.none(),Optional.empty(),Optional.empty(),ImmutableList.of())
assertNotNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
CachedValuesManager.getManager(project).getParameterizedCachedValue(psiFile,CACHE_KEY,param -> CachedValueProvider.Result.create(parseConfigInternal(param.getVirtualFile(),param),param),false,psiFile)
Integer.parseInt(stackIdStr)
includedGroup == null
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
addPortletPreferences(portletPreferencesRow)
timeout=30000
element == null || element instanceof PsiEmptyStatement
onJava11()
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
HeadArraySchema schema=new HeadArraySchema(); 
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
CHECK_PKGNAME=true
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
PApplet.splitTokens(pathDataBuffer,"|" + PConstants.WHITESPACE)
realm.checkIfValid()
workspaceName.equals(infoName)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
fetchParent.fetch("skuMedia",JoinType.LEFT)
DefaultCacheKeysFactory.staticGetNaturalIdValues(cacheKey)
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equalsIgnoreCase(type)
newConfiguration.getOutputType()
"GET".equalsIgnoreCase(httpMethod)
selenium.isElementPresent("link=Control Panel")
(flags & 0x08) != 0
ExceptionHandler exceptionHandler
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
typeSettingsProperties.toString()
evaluate(123.5f,DataTypes.FLOAT)
{false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
matcher.find()
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 80
ItemHandler itemHandler=new SimpleItemHandler(itemReader,itemWriter); 
!mQuietEnable
res.getDescription()
declaredMethods[i].isBridge() || name.indexOf('+') >= 0
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
mControllers.get(controller)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
mCallback.onInputUpdated(inputId)
intent.resolveType(getContentResolver())
weekRange.add(Calendar.DATE,6)
mPowerManager.isInteractive()
!(exception ? throwable instanceof RuntimeException : throwable == null)
event.get(factory.getName())
debug=true
IndexReader.open(ramDir)
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
fragment == null || fragment.getActivity() == null
SCAN_STATUS_COMPLETE=2
state == BluetoothA2dp.STATE_PLAYING
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandler {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
defaultDndAccess != null
LOG.debug(e)
Variable emitByteSwap(Value operand); 
DEBUG=false
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
DaemonListeners.isUnderIgnoredAction(null) || myProject.isDisposed()
LifecycleListener listener
readWifiSleepPolicy()
isGreaterOrEqual(platformVersion,M)
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
scanAllNodes(stage.getScene().getRoot(),pseudoClass)
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
methodExists("of",typeNode,false)
root != null && !tree.isRootVisible()
cs.getNString(columnIndex)
this.constraints.updateFromTuple(workingMemory,leftTuple)
alertDialogBuilder.setPositiveButton(resources.getString(R.string.title_allow),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=false;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),false);     latch.countDown();   } } )
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
cs == null || cs.length() == 0
addInfo(msg,e)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
sendMessageAtFrontOfQueue(CMD_STOP_AP)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
row("p_comment",null,7.0,0.0,null,null,null)
ANIMATE_TRANSITIONS=false
mAlpha.cancel()
params.getPathAbsolutifier()
assertNotNull(store.getId())
ScriptingUtil.exec(null,inputObjects,language,script,new String[0])
mock.expectedMinimumMessageCount(2)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
dialog.dismiss()
metadata.getFaces()
Arrays.asList("public")
new UploadRemoteFileOperation(mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict(),timeStamp,size)
LOGGER.isDebugEnabled()
DiagnosticFactory2<JetBinaryExpression,JetElement,DeclarationDescriptor>
out.write(manifest)
process(unionSelect.right(),sb)
mService.disableNetwork(netId)
referencedDomainClass.getFullName()
mAttributes.getAllFlags()
getAlignment(targetDataLayout)
mapper.setAttributePrefix("ROLE_")
ethLog.getError()
centerButton(mButtonNegative)
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
timeout >= 0
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
final String message
reset(channel,logTemplate,bufferSize)
Mono.subscriberContext()
processResult.getStderr()
handleIncomingUser(Binder.getCallingPid(),callingUid,userId,type == ActivityManager.INTENT_SENDER_BROADCAST,false,"getIntentSender",null)
m.setContent(OutputStream.class,os)
Math.abs(oldDist - dist) < 30
taken > 150
Mono.subscriberContext()
action == MouseEvent.RELEASE
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=1
Number rate
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0.1).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new Resource(url,name,wrapper.isParserRestricted())
log.debug("Unrecognized Oracle client version at " + oraHome)
JetTypeChecker.INSTANCE.isSubtypeOf(returnType,expectedReturnType)
assertNotUpgraded(client())
mAttributes.getAllFlags()
promise.trySuccess(null)
trueNegatives.incrementCount(classLabel,1.0)
mPowerManager.isInteractive()
callBacks.stream()
counter < max
MultiWindowedElement.class
JvmDeclarationOriginKt.OtherOriginFromPure(aClass,descriptor)
mBindingServices.isEmpty()
accountHandle.getComponentName().flattenToString()
response.get(ROLLED_BACK)
listview.snappedTopInset()
Assert.assertEquals(4,latch.getCount())
options.getJvmOpts() != null
completeBox.setButtonDrawable(R.drawable.btn_check)
1 << 7
LOG.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
@NotNull
getTestIgniteInstanceName(nodeCount() + servers + i)
index.getUUID()
mDataAuthorities == null || data == null
((MainTimeLineActivity)getActivity()).setMentionsListView(listView)
!mGsmPhone.mSST.isConcurrentVoiceAndData()
mAuthorities.valueAt(i)
selenium.isElementPresent("link=Control Panel")
Log.e(TAG,"This will become an error",ex)
StringBuilder builder
mAppName.getVisibility() != GONE && appWidth > mHeaderMinWidth
Integer.parseInt(this.getOptional("kylin.server.auth-user-cache.max-entries","100"))
irrCubeMap.getImage()
mMediaPlayer.isPlaying()
WEB_SYNC_MANAGER=false
((Scorecard)serializable).getUseReasonCodes()
findCodecForFormat(true,format)
VMRuntime.is64BitInstructionSet(getPreferredInstructionSet())
mPowerManager.isInteractive()
assertFalse(prj.nodes().contains(grid(4).localNode()))
!isResumed()
mSyncStatus.valueAt(i)
new Paint()
Settings.Secure.getIntForUser(mContentResolver,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED,UserHandle.USER_CURRENT)
from > to
factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
new CircularImportProblem(configClass,this.importStack,configClass.getMetadata())
!mNavigationBarView.isQuickScrubEnabled()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED)
delta=500
selenium.isElementPresent("link=Control Panel")
Parser.htmlParser()
Name.identifier(name)
dimension.width + (dimension.width == 0 ? 0 : PADDING)
DEBUG=false
selenium.isElementPresent("link=Control Panel")
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
parsedResult.getType()
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMillis(request.getStartTime())
Nd4j.pullRows(weights,1,indexes,'c')
mReadOwners != null && includingOwners
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
Thread.sleep(200)
mAppToken.isVisible()
LOG.finest("Client: segment " + segments[j] + " at "+ addr)
this.controller.saveService(data)
outActivity != null && outActivity.length > 0
((VarcharType)type).getLengthSafe()
mGBDevice.getHardwareVersion()
LensPositionSelectors.lensPosition(LensPosition.BACK)
inputItem.getItemDetails()
generateFluentSetters()
remaining == 0
line.toString(charset)
new Paint()
dlg.setNegativeButton(fButtons[0],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,1),callbackId);   } } )
mDataAuthorities == null || data == null
!column.isMarkedForDelete()
logger.error(String.format("fail to get start offset partitionId: %d, target timestamp: %d",idx,targetTimestamp),e)
Util.SDK_INT <= 25
Slog.w(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
selenium.isElementPresent("link=Control Panel")
!mTags.containsKey(t)
out.writeInt(sampleCount)
VERSION=42
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
tfs.ls(Constants.PATH_SEPARATOR,true)
initClient=6
e.toString()
monitoredRegion.getUniqueId()
BackupManagerServiceInterface svc=mService; 
file.name().endsWith(".etc1")
Variable emitLoad(LIRKind kind,Value address,LIRFrameState state); 
x=0
nodeEngine.getSharedService(LockService.SERVICE_NAME)
view.getFloatZoom()
selenium.isElementPresent("link=Control Panel")
type.getDeclaredConstructor()
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
expectedCountsForADoc(weights,e4Update,ind)
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
Control.getSingleton().getExtensionLoader().addonFilesRemoved()
props.getProperty(CONNECT_TIME_PROP,TRUE)
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
mUiHandler.postDelayed(pae,timeout)
Slog.w(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
AudioFormat.isEncodingLinearFrames(mAudioFormat)
mIam.getStackInfo(WINDOWING_MODE_FULLSCREEN,ACTIVITY_TYPE_STANDARD)
poList[2]
upToDateRevisionProvider.getLastUpToDateContentFor(virtualFile,true)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
public CapitalizationFilter create(TokenStream input){   return new CapitalizationFilter(input,this); } 
logger.info("--> checking that _current no longer returns the snapshot")
abstract public T parseType(N notation); 
new Message(MESSAGE_TEXT)
SmsHeader.toByteArray(header).length + 2
dao.meta().isSqlServer() || dao.meta().isHsql() || dao.meta().isDerby()
zoom - Math.floor(zoom) < 0.001f
Throwable e
Collections.singletonList(entry)
nodePath != null && nodePath.size() > 0
CONSTELLATION_TYPE_SHIFT_WIDTH=4
headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)
line.toString(charset)
new RaftMessages.HeartbeatResponse(myself)
id=16502
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
dataType.getFullyQualifiedName(DBPEvaluationContext.DDL)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
i >= stripeStats.size()
DonateActivity.class
1 << 15
commander.downloadAvatar(imageView,accountList.get(i).getAvatar_url(),i,listView)
DebuggableThreadPoolExecutor.class
myParameterIndex >= value
fieldExpression != null
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
Slog.w(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
answer == null || comparator.compare(value,answer) < 0
mConnectionById.containsKey(callId)
new Rect(left,top,right,bottom)
assertEquals(redVocab.getIndex(),1)
checkCall(receiver)
Program.class
List<UsageInfo>
mMenu.getNonActionItems()
level < 96 && status != BatteryManager.BATTERY_STATUS_UNKNOWN
event.getRawY()
allSortedModules.stream()
dest.writeInt(mSubId)
selenium.isElementPresent("link=Control Panel")
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFileOrDirectory()
e.getSuppressed()[1]
Error|ClassNotFoundException
state.value == rotationLocked && state.contentDescription != null
myEditor.getScrollingModel().getVisibleAreaOnScrollingFinished()
Loader.loadClass(klass,mName)
RuleChain.outerRule(suppressOutput)
((StringLiteral)literal).getValue()
new Console(debugger,true,true)
DEBUG_WINDOW_STATE=false
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
XmppStringUtils.parseBareJid(from)
propValue == null || CommonUtils.equalObjects(propValue,defValue)
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
action != KeyEvent.ACTION_UP
c == null || c == interfaceClass
consoles.waitJDTLSStartedMessage()
0xffL << shift
context == null || context == EGL_NO_CONTEXT
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD),null,Globals.journalAbbreviationLoader.getRepository())
foundTargetWs && winAnim.getShown() && winAnim.mLastAlpha > 0f
new Paint(Paint.ANTI_ALIAS_FLAG)
ConfigPropertyVetoException e
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
selenium.isElementPresent("link=Control Panel")
ActivityManager.handleIncomingUser(callingPid,callingUid,userId,true,false,"enqueueNotification",pkg)
state.mBitmap == null && (state.mThemeAttrs == null || state.mThemeAttrs[R.styleable.BitmapDrawable_src] == 0)
comparePartitionOwnership(true,localMember,partition)
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,true,DEFAULT_CONFIG_IGNORE_LIST)
assertPlanEquals(expectedPlan,actualPlan)
type.getDeclaredConstructor()
setIntegerPart(String.valueOf(integerPart))
session.initBounds(context,param)
selenium.isElementPresent("link=Control Panel")
getSelectedIconColorRes()
selenium.isElementPresent("link=Control Panel")
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
Arrays.asList("cmd","ls","pwd")
getDegreesFromXY(x,y,true)
Integer.parseInt(getOptional("kylin.engine.spark.min-partition","1"))
new LeftTuple(new DefaultFactHandle(1,"cheese"),null)
cluster.setWifiIndicators(mWifiConnected,mWifiIconId,mWifiActivityIconId)
nearCache.invalidate(key)
queryIndex == 0 || queryProcessor.getResultContainers().size() == 1
params.getSimulatedPlatformVersion()
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
history2.getHistoryEntryId()
method.invoke(CachedMessageProducer.this,args)
prepared.charAt(start - 1)
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
c.close()
RedisTemplate<Object,Object>
caches.valueAt(i)
ACRA.log.w(LOG_TAG,"Unknown json subtree type, see issue #186")
selectedUser.getUserId()
return mChangingDisappearingDelay; 
whitelistedResourcesWithInvalidMac.contains(cleartextPath)
targetDatabase.getObjectQuotingStrategy()
interactor.startCommand(packageName,callback,mCommand,mArgs)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
getRecordCount()
selenium.isElementPresent("link=Control Panel")
/**   * Creates a ClassLoader implementation which has, by default, only the classes from the Java API visible, but which can allow access to selected classes from the given parent ClassLoader.  * @param parent the parent ClassLoader  * @param spec the filtering spec for the classloader  * @return The ClassLoader  */ ClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec); 
getLogger().warn("Unknown classloader [NSME]: " + e.getMessage())
mService.reassociate(mContext.getOpPackageName())
private StackPane container; 
String.format("Builder for coercable type %s had 2 setters named %s but they were not Optional " + "and non-Optional. Don't know how to coerce.",coercableType.getName(),entry.getKey())
"mobi".equalsIgnoreCase(file.getExtension())
status <= started
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)
new RedissonSession(keyPrefix)
fileEntry == null || fileEntry.getSize() == 0
selenium.isElementPresent("link=Control Panel")
e.toString()
LOG.log(Level.SEVERE,"Inbound policy verification failed: " + ex.getMessage())
adviced.getDeclaredConstructor()
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
getValueController().updateValue(editedValue,true)
timeFieldSpec.getOutGoingTimeColumnName()
RangeDenormalizer.class
StringBuilder stringBuilder=new StringBuilder(); 
new ClusterTopologyCheckedException("Failed to send message because node left grid [nodeId=" + nodeId + ", msg="+ msg+ ']')
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper,false)
selenium.isElementPresent("link=Control Panel")
buildLockFactory(indexSettings)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     if (!myProject.isOpen())     return;     myFrameworkInstanceLibraryManager.updateFrameworkInstanceLibraries();     myAlarm.cancelAllRequests();     myAlarm.addRequest(new Runnable(){       @Override public void run(){         rebuildOSGiIndices();       }     } ,500);   } } ,myProject.getDisposed())
imageWidth / images.size()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
dest.writeInt(mSubId)
RowKey.prefixKeyWithSalt(key_b)
functionFactory.expm1(iX)
RunnerMediator.injectRunnerCommand(super.postProcessCommandLine(commandLine),false)
LOGGER.isDebugEnabled()
args[1]
onDetachedFromWindow()
SubtleUtil.validateExists(inFile)
new CharacterDelimiterFrameDecoder(1024,'\0')
selenium.isElementPresent("link=Control Panel")
builder.parseXContent(parser,false)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
selenium.isElementPresent("link=Control Panel")
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
NumberOfPortsUsedByReadReplica=4
UpgradeStepRegistrator.class
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
styles.treeStylesCss()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
i >= 0
Preconditions.checkNotNull(value)
getLog().debug("Kotlin version " + KotlinCompilerVersion.VERSION + " (JRE "+ System.getProperty("java.runtime.version")+ ")")
event.isError()
Throwable e
logger.debugf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
logTable.getDatabaseMeta().getQuotedSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
mSharedElements.size()
FMLPacket.makePacket(Type.ENTITYSPAWN,er,entity,instance().findNetworkModHandler(er.getContainer()))
String message
stateHolder.reloadDatapoints()
margin >= visEndLinePosition.column
colors.getThemeAttributeId(i,0)
state == AsyncState.STARTING || state == AsyncState.TIMING_OUT || state == AsyncState.ERROR
_freemarkerEngineConfiguration.resourceModificationCheck()
context.getDialect() == POSTGRES && (type == null || !type.isTemporal())
return true; 
JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
getAffiliatesByAdmin("owner")
new UnsupportedOperationException(getClass().getName())
this.version(System.getProperty(VERSION,DEFAULT_VERSION))
pdlMarker.done(PARAMETERS_LIST)
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsOnly("java","pmd")
DEBUG=false
userComponents.valueAt(j)
assertEquals(0.31643071339946,mse,1e-8)
4 * 4
commState.getBoolean("sys")
synchronized (this) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
targetPrincipal == null || targetPrincipal.getName() == null
getTestName(true)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
context.getOpPackageName()
FileUtils.forceDelete(localRepoDir)
AppPrefs.getImageOptimizeWidth() > 1
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).toProcessor()
accountData.setIsNotifiedForInvoices(Objects.firstNonNull(isNotifiedForInvoices,delegate.isNotifiedForInvoices()))
pos < end
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark || UserPreferences.getTheme() == R.style.Theme_AntennaPod_TrueBlack
Long.parseLong(name)
new IllegalStateException("Legacy advertising can't include TX power level in header")
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
resId == R.string.local_index_unselect_gpx_file || resId == R.string.local_index_select_gpx_file
attributes.size() > 0 || resolutionStrategy.resolveGraphToDetermineTaskDependencies()
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
XContentType.JSON.mediaType()
LOG.error("Failed to delete temp folder",e)
portlet.getPortletId()
ListWithDefault<T>
origin > other
target == null || target.getNumFields() < this.mappings.size() + 1
originalRemoteAddr != null
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
mAttributes.getAllFlags()
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
this.heading=0
@Override public BooleanProperty clone(){   BooleanProperty prop=(BooleanProperty)super.clone();   prop.value=value;   return prop; } 
assertEquals(0.3148133418670781,mse,1e-8)
logger.warn("InfluxDB is not yet connected")
LOG.error("Failed to reconfigure vim keymap.\n" + e)
RestartStrategies.fixedDelayRestart(1,0)
caches.valueAt(i)
-1
SAMPLE_RATE_HZ_MAX=96000
lock.isHeldByCurrentThread()
message.getFilteredFields()
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
subCursor.getString(COLUMN_VALUE)
builder.length() == 0 && s != null
sourceHeight > 0
new String(actual,0,i + 1,"UTF-8")
fragUtils.fragmentType()
isInsert
taken > 50
_log.warn(ioe,ioe)
zoneId.equals("+00:00") || zoneId.equals("-00:00")
new NullPointerException("Emitter got a null value. Null values are generally not allowed in 2.x operators and sources.")
access == null
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
SAVE_TRACK_INTERVAL.setModeDefaultValue(ApplicationMode.BICYCLE,5000)
Localization.menuTitle("View")
pathMap.substitute(path,true)
resources == null || resources.isEmpty()
new ConcurrentHashMap<String,Boolean>(256)
this.getClass()
setSDesEncryptionOnDescription(mediaType,description,null)
Mono<IN>
mImageManager.load(postHolder.mImgDiscoverAvatar,GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp)
settings.setTextSize(WebSettings.TextSize.LARGER)
get_params()._score_training_samples < ftrain.numRows()
GrClosureSignatureUtil.mapParametersToArguments(signature,callExpression.getNamedArguments(),callExpression.getExpressionArguments(),callExpression.getClosureArguments(),callExpression,false,true)
mConnectionById.containsKey(callId)
Mono.subscriberContext()
LOGGER.warn("Could not copy cite key",ex)
Key.make(_file + DeepWaterModel.CACHE_MARKER)
selenium.isElementPresent("link=Control Panel")
JavaSdkImpl.getMockJdk17("java 1.5")
clazz.getName()
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out3p)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,null,false,false)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
i < MAX_AUDIO_PORTS
Assert.assertEquals(4,visitor.getConditions().size())
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
typeSupported(type) || "*".equals(fileTypes)
Boolean.parseBoolean(attrValue)
menu.getLatLon() != null && menu.isActive()
mPolicy != null && wasPowered
queryIndex == 0 || queryProcessor.getResultContainers().size() == 1
mService.setAppPolicy(UID_A,POLICY_NONE)
path.substring(1)
targetDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
new NoDexException("%s contains no dex file",entryFile)
ReflectionUtil.forName(this.owner)
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
synchronized (frontendHandler) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
mQueryTextView.length()
countDownLatch.await()
Long.toString(bitstampOrder.getId())
new char[32]
message.getConversation()
List<UsageInfo>
a.getLocalName()
user.getActualCompanyId()
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,true)
styles_.command()
{8,10}
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
mNavigationView != null && item != NavigationItemEnum.INVALID
input.getExecPath()
mService.reconnect(mContext.getOpPackageName())
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamAccount()
(100 - nodesContractedPercentage) / 100d
dyn.put("delays",JSONObject.NULL)
Nd4j.rand(200,200,min,max,Nd4j.getRandom())
observable.timeout(5,SECONDS).toList().toBlocking()
target.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
System.currentTimeMillis() - start
PublisherPeek<T>
mImm.getEnabledInputMethodList()
mRvc == null || !session.isActive()
flux.onErrorResume(ex -> Flux.error(getReadError(bodyParameter,ex)))
request.getSharedAttributeNames()
@NotNull GitLocalBranch branch
!hasPermission(permission)
Arrays.asList("Die Katze ist schön.","Die eine Katze ist schön.","Eine Katze ist schön.","Beiden Filmen war kein Erfolg beschieden.","In einigen Fällen ist der vermeintliche Beschützer schwach.","Was Wasser für die Fische ist.","In den letzten Jahrzehnten ist die Zusammenarbeit der Astronomie verbessert worden.","Für Oberleitungen bei elektrischen Bahnen ist es dagegen anders.","... deren Thema die Liebe zwischen männlichen Charakteren ist.","Mehr als das in westlichen Produktionen der Fall ist.","Da das ein fast aussichtsloses Unterfangen ist.","Was sehr verbreitet bei der Synthese organischer Verbindungen ist.","In chemischen Komplexverbindungen ist das Kation wichtig.","In chemischen Komplexverbindungen ist das As5+-Kation wichtig.","Die selbstständige Behandlung psychischer Störungen ist jedoch ineffektiv.","Die selbstständige Behandlung eigener psychischer Störungen ist jedoch ineffektiv.","Im Gegensatz zu anderen akademischen Berufen ist es in der Medizin durchaus üblich ...","Im Unterschied zu anderen Branchen ist Ärzten anpreisende Werbung verboten.","Aus den verfügbaren Quellen ist es ersichtlich.","Das Mädchen mit den langen Haaren ist Judy.","Der Durchschnitt offener Mengen ist nicht notwendig offen.","Der Durchschnitt vieler offener Mengen ist nicht notwendig offen.","Der Durchschnitt unendlich vieler offener Mengen ist nicht notwendig offen.","Der Ausgangspunkt für die heute gebräuchlichen Alphabete ist ...","Nach sieben männlichen Amtsvorgängern ist Merkel ...","Für einen japanischen Hamburger ist er günstig.","Derzeitiger Bürgermeister ist seit 2008 der ehemalige Minister Müller.","Derzeitiger Bürgermeister der Stadt ist seit 2008 der ehemalige Minister Müller.","Die Eingabe mehrerer assoziativer Verknüpfungen ist beliebig.","Die inhalative Anwendung anderer Adrenalinpräparate zur Akutbehandlung asthmatischer Beschwerden ist somit außerhalb der arzneimittelrechtlichen Zulassung.","Die Kategorisierung anhand morphologischer Merkmale ist nicht objektivierbar.","Die Kategorisierung mit morphologischen Merkmalen ist nicht objektivierbar.","Ute, deren Hauptproblem ihr Mangel an Problemen ist, geht baden.","Ute, deren Hauptproblem ihr Mangel an realen Problemen ist, geht baden.","In zwei Wochen ist Weihnachten.","In nur zwei Wochen ist Weihnachten.","Mit chemischen Methoden ist es möglich, das zu erreichen.","Für die Stadtteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Für die Stadtteile und selbständigen Ortsteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Die Qualität der Straßen ist unterschiedlich.","In deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","Die Führung des Wortes in Unternehmensnamen ist nur mit Genehmigung zulässig.","Die Führung des Wortes in Unternehmensnamen und Institutionen ist nur mit Genehmigung zulässig.","Die Hintereinanderreihung mehrerer Einheitenvorsatznamen oder Einheitenvorsatzzeichen ist nicht zulässig.","Eines ihrer drei Autos ist blau und die anderen sind weiß.","Eines von ihren drei Autos ist blau und die anderen sind weiß.","Bei fünf Filmen war Robert F. Boyle für das Production Design verantwortlich.","Insbesondere das Wasserstoffatom als das einfachste aller Atome war dabei wichtig.","In den darauf folgenden Wochen war die Partei führungslos","Gegen die wegen ihrer Schönheit bewunderte Phryne ist ein Asebie-Prozess überliefert.","Dieses für Ärzte und Ärztinnen festgestellte Risikoprofil ist berufsunabhängig.","Das ist problematisch, da kDa eine Masseeinheit und keine Gewichtseinheit ist.","Nach sachlichen oder militärischen Kriterien war das nicht nötig.","Die Pyramide des Friedens und der Eintracht ist ein Bauwerk.","Ohne Architektur der Griechen ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur und Kunst der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","In denen jeweils für eine bestimmte Anzahl Elektronen Platz ist.","Mit über 1000 Handschriften ist Aristoteles ein Vielschreiber.","Mit über neun Handschriften ist Aristoteles ein Vielschreiber.","Die Klammerung assoziativer Verknüpfungen ist beliebig.","Die Klammerung mehrerer assoziativer Verknüpfungen ist beliebig.","Einen Sonderfall bildete jedoch Ägypten, dessen neue Hauptstadt Alexandria eine Gründung Alexanders und der Ort seines Grabes war.","Jeder Junge und jedes Mädchen war erfreut.","Jedes Mädchen und jeder Junge war erfreut.","Jede Frau und jeder Junge war erfreut.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und sozialen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und neurowissenschaftlichen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben und Verhalten des Menschen einschließlich der biologischen bzw. sozialen Grundlagen ist die Psychologie interdisziplinär.","Alle vier Jahre ist dem Volksfest das Landwirtschaftliche Hauptfest angeschlossen.","Aller Anfang ist schwer.","Alle Dichtung ist zudem Darstellung von Handlungen.","Allen drei Varianten ist gemeinsam, dass meistens nicht unter bürgerlichem...","Er sagte, dass es neun Uhr war.","Auch den Mädchen war es untersagt, eine Schule zu besuchen.","Das dazugehörende Modell der Zeichen-Wahrscheinlichkeiten ist unter Entropiekodierung beschrieben.","Ein über längere Zeit entladener Akku ist zerstört.","Der Fluss mit seinen Oberläufen Río Paraná und Río Uruguay ist der wichtigste Wasserweg.","In den alten Mythen und Sagen war die Eiche ein heiliger Baum.","In den alten Religionen, Mythen und Sagen war die Eiche ein heiliger Baum.","Zehn Jahre ist es her, seit ich mit achtzehn nach Tokio kam.","Bei den niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Bei den sehr niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Die älteste und bekannteste Maßnahme ist die Einrichtung von Schutzgebieten.","Die größte Dortmunder Grünanlage ist der Friedhof.","Die größte Berliner Grünanlage ist der Friedhof.","Die größte Bielefelder Grünanlage ist der Friedhof.","Die Pariser Linie ist hier mit 2,2558 mm gerechnet.","Die Frankfurter Innenstadt ist 7 km entfernt.","Die Dortmunder Konzernzentrale ist ein markantes Gebäude an der Bundesstraße 1.","Die Düsseldorfer Brückenfamilie war ursprünglich ein Sammelbegriff.","Die Düssel ist ein rund 40 Kilometer langer Fluss.","Die Berliner Mauer war während der Teilung Deutschlands die Grenze.","Für amtliche Dokumente und Formulare ist das anders.","Wie viele Kilometer ist ihre Stadt von unserer entfernt?","Über laufende Sanierungsmaßnahmen ist bislang nichts bekannt.","In den letzten zwei Monate war ich fleißig wie eine Biene.","Durch Einsatz größerer Maschinen und bessere Kapazitätsplanung ist die Zahl der Flüge gestiegen.","Die hohe Zahl dieser relativ kleinen Verwaltungseinheiten ist immer wieder Gegenstand von Diskussionen.","Teil der ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der umfangreichen dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Der zweite Teil dieses Buches ist in England angesiedelt.","Eine der am meisten verbreiteten Krankheiten ist die Diagnose","Eine der verbreitetsten Krankheiten ist hier.","Die Krankheit unserer heutigen Städte und Siedlungen ist folgendes.","Die darauffolgenden Jahre war er ...","Die letzten zwei Monate war ich fleißig wie eine Biene.","Bei sehr guten Beobachtungsbedingungen ist zu erkennen, dass ...","Die beste Rache für Undank und schlechte Manieren ist Höflichkeit.","Ein Gramm Pfeffer war früher wertvoll.","Die größte Stuttgarter Grünanlage ist der Friedhof.","Mancher will Meister sein und ist kein Lehrjunge gewesen.","Ellen war vom Schock ganz bleich.","Nun gut, die Nacht ist sehr lang, oder?","Der Morgen ist angebrochen, die lange Nacht ist vorüber.","Die stabilste und häufigste Oxidationsstufe ist dabei −1.","Man kann nicht eindeutig zuordnen, wer Täter und wer Opfer war.","Ich schätze, die Batterie ist leer.","Der größte und schönste Tempel eines Menschen ist in ihm selbst.","Begehe keine Dummheit zweimal, die Auswahl ist doch groß genug!","Seine größte und erfolgreichste Erfindung war die Säule.","Egal was du sagst, die Antwort ist Nein.","... in der Geschichte des Museums, die Sammlung ist seit 2011 zugänglich.","Deren Bestimmung und Funktion ist allerdings nicht so klar.","Sie hat eine Tochter, die Pianistin ist.","Ja, die Milch ist sehr gut.","Der als Befestigung gedachte östliche Teil der Burg ist weitgehend verfallen.","Das Kopieren und Einfügen ist sehr nützlich.","Der letzte der vier großen Flüsse ist die Kolyma.","In christlichen, islamischen und jüdischen Traditionen ist das höchste Ziel der meditativen Praxis.","Der Autor der beiden Spielbücher war Markus Heitz selbst.","Der Autor der ersten beiden Spielbücher war Markus Heitz selbst.","Das Ziel der elf neuen Vorstandmitglieder ist klar definiert.","Laut den meisten Quellen ist das Seitenverhältnis der Nationalflagge...","Seine Novelle, die eigentlich eine Glosse ist, war toll.","Für in Österreich lebende Afrikaner und Afrikanerinnen ist dies nicht üblich.","Von ursprünglich drei Almhütten ist noch eine erhalten.","Einer seiner bedeutendsten Kämpfe war gegen den späteren Weltmeister.","Aufgrund stark schwankender Absatzmärkte war die GEFA-Flug Mitte der 90er Jahre gezwungen, ...","Der Abzug der Besatzungssoldaten und deren mittlerweile ansässigen Angehörigen der Besatzungsmächte war vereinbart.")
mValues[8]
!sourceNodeTextData.getText().isEmpty()
Integer.parseInt(value)
/**   * Received bytes count.   */ private final LongAdder8 rcvdBytesCnt=new LongAdder8(); 
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
mMccStr == null
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
new Text(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER)
WaitUtils.waitForPageToLoad()
win.isDrawnLw() || win.hasAppShownWindows()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
listAdapter.notifyDataSetChanged()
invocation.addAttachments(context)
tableCache.getAllObjects(monitor,this)
new CallbackStub(this)
color != null && color.length() > 0
return true; 
holder.textView.setBackgroundDrawable(mSelectedBackground)
-3
Beans.newDuration(rtProps.getTimeToKillInSeconds()).getSeconds()
DirectoryReader.open(writer)
length <= 0
members == null || members.isEmpty()
number.contains("A")
delta + end
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
computeRealHorizontalScrollRange()
mJSONObjectRequestListener=null
mService.queryDisplayStatus(getCallbackWrapper(callback))
this.keyDeserializer.configure(config.originals(),true)
Math.max(mXAxis.mAxisMinimum,pos.x)
tracesDir.mkdirs()
when(rs.wasNull()).thenReturn(true)
logger.debug("Cannot play sound ({})",e.getMessage())
IOUtils.closeQuietly(is)
Trans != NO_TRANSPOSE
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(3).backward(true).hiddenLayerSizes(new int[]{3,2}).override(2,new ClassifierOverride(2))
lookup="java:/ConnectionFactory"
found=true
stopTimeNs - requestStartTimeNs
runningTasks.remove(assignedTask)
myPieces.floorEntry(startOffset)
(NestedForm)actionForm
ImmutableList<PairedStats>
block instanceof BlockTallGrass
database.getDatabaseMajorVersion() < 9
Float.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
vertFilename == null
!newDatabase && (bibDatabaseContext != null) && bibDatabaseContext.getMetaData().getGroups().isPresent()
mTextColorLink.getColorForState(ds.drawableState,0)
credentials.getPassword()
super.computeDefaultContexts()
loaded.getLoaded().getDeclaredConstructor()
endTracksTo("main")
type.getDeclaredConstructor()
public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
mBindingServices.isEmpty()
appearance.getFloat(attr,0)
LOGGER.isDebugEnabled()
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
mAlpha.cancel()
platformVersion < M
range.endsWith("^.." + _latestHASH) && ticketIds.isEmpty() && (relengChangeLogEntries.size() > 1)
t1.setToUpperCase(false)
session.closeInternal(new CloseReason(code,reasonPhrase))
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
Looper.prepareMainLooper()
mMenu.getNonActionItems()
pCommandLineArg.indexOf(" ") != -1 && !(pCommandLineArg.startsWith("\"") && pCommandLineArg.endsWith("\""))
AnkiDroidApp.deck().setUndoEnd(undoName)
viewGroup == null || viewGroup.getChildCount() == 0
1024 * 128
/**   * @return a String for the summary of the preference.  */ public CharSequence getSummary(){   return null; } 
new StringBuilder(246)
FunctionTypesKt.isExtensionFunctionType(upperBoundType)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=false
UserNotificationEventLocalServiceUtil.getDeliveredUserNotificationEvents(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,true,actionable,start,end)
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
itemMatches(target,itemStack,false)
"A task is in the ABORTED state but stage is " + currentState
showMessage(context.getString(R.string.error_calculating_route) + " : " + res.getErrorMessage(),Toast.LENGTH_LONG)
1024 * 200
log.error("Problem in JSR223 script ",e)
mSyncStatus.valueAt(i)
behindFraction * GRADIENT_SCRIM_ALPHA_BUSY
Integer.parseInt(value)
create.fetch(meta().getSchemas(),SQLDataType.VARCHAR)
logger.debug("Error connecting to Plex",e)
mService.addOrUpdateNetwork(config)
timeout * 10
_typeSettingsProperties.toString()
Integer.valueOf(setting)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
node.getTypeDescriptor()
target.addTaskAndWakeup(task)
dstPath.toString()
platform.map(version::compareTo).orElse(0) > 0
MoreCollectors.toImmutableSet()
amenity.getName(preferredLanguage)
sampleFactory.getDeclaredConstructor()
process(unionSelect.left(),sb)
log.error(e1.getMessage(),e1)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null
getTree().getRowCount()
tester.getRequest()
id=10858
this.route(request).map(RouterFunctions::cast).switchIfEmpty(Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))
FileUtils.setPermissions(fstr.getFD(),0640,SYSTEM_UID,PACKAGE_INFO_GID)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
JwsUtils.getSignatureVerifier(key,jwt.getJwsHeaders().getSignatureAlgorithm())
parser.parseLight(GroovyElementTypes.OPEN_BLOCK,builder)
logIndex <= lastSeenCommitIndex
XMLInputFactory.newInstance()
hasRows(oldTableName)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
evaluator.addComponentTypeFromArrayExpression(resolveParent,arrayExpression)
FilenameUtils.getFullPathNoEndSeparator(destination)
new NumberFormatException("JSON forbids NaN and infinities: " + value + " at path "+ reader.getPath())
getNetworkPolicies(mContext.getOpPackageName())
getSubprojects()
public String getResource(){   return resource; } 
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=1000
setWindowingMode(windowingMode,false,false,false)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
startActivity(mAdapter.intentForPosition(0))
ScanResult.is5GHz(frequency)
dynamicType.getLoaded().getDeclaredConstructor()
uiSettings.setShowEditorToolTip(myShowCodeLensInEditorCheckBox.isSelected())
new NodeInfo(Version.CURRENT,org.elasticsearch.Build.CURRENT,new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT),Settings.EMPTY,DummyOsInfo.INSTANCE,new ProcessInfo(randomInt(),randomBoolean()),JvmInfo.jvmInfo(),new ThreadPoolInfo(Collections.singletonList(new ThreadPool.Info("test_threadpool",ThreadPool.ThreadPoolType.FIXED,5))),new TransportInfo(transportAddress,Collections.emptyMap()),new HttpInfo(transportAddress,randomLong()),new PluginsAndModules(),new IngestInfo(Collections.emptyList()),new ByteSizeValue(randomIntBetween(1,1024)))
PropertyListParser.saveAsXML(x,outputFile)
argType instanceof PsiClassType && ClosureToSamConverter.isSamConversionAllowed(myPlace) && InheritanceUtil.isInheritor(argType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)&& !TypesUtil.isClassType(paramType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)
mPkg.getOrCreateConfig(new ResConfigFlags())
Exception e
Trans != NO_TRANSPOSE
logger.debug(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
mObsoleteAgents.valueAt(i)
getVal(path,true)
Assert.assertEquals(0L,key)
ImmutableSet.of("superconsole","thread_line_output_max_columns")
Exception e
LinkageError e
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()&& (node.getGenericsTypes() == null || node.getGenericsTypes().length == 0)&& lType.isUsingGenerics()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
Matchers.greaterThanOrEqualTo(900L)
Assert.assertTrue(semaphore.acquire(3,TimeUnit.SECONDS))
Boolean.parseBoolean(attrValue)
(GrTypeDefinition)parent
bytes.length > 150000
block.useSourceInfoIfMissingFromForTree(exprRoot)
mNavigationBarView.getPaddingLeft()
BackupManagerServiceInterface svc=mService; 
getConnection(URL)
ImmutableList<String>
project == null || project.isDisposed()
resolveResult != null
new WorldPoint(2458,3364,0)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
event.isCancelled()
m.size()
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
checkCall(receiver)
loadedTextures.size()
getTokenDisplayNames()
mQsDensityContainer.getLayoutParams()
Short.parseShort(value.toString())
log.info("Reset to factory defaults : onOperatorError")
!isAfter(currentChange.getFirst(),child)
dy == 0
PyReferenceExpression.class
Log log=catalinaContext.getLogger(); 
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
new NativeAllocationRegistry(Paint.class.getClassLoader(),nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
getTestName(true)
context.getOpPackageName()
valueFormatter != null && !(valueFormatter instanceof ValueFormatter.Raw)
ParceledListSlice<ActivityManager.RecentTaskInfo>
Slog.d(TAG,"showSaveLocked(): no mStructure")
notifier.isIgnoreExchangeSendingEvents()
new RuntimeException(String.format("Incompatible SSTable found.  Current version %s is unable to read file: %s.  Please run upgradesstables.",Descriptor.Version.CURRENT,desc))
builder.length() == 0 && s != null
(!mIsExpanding || mHintAnimationRunning) && !mQsExpanded && mStatusBar.getBarState() != StatusBarState.SHADE && !mDozing
LOG.debug("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
NestedSetBuilder.linkOrder()
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
comp.requestFocusInWindow()
new IndexWriter(directory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
offsetHandler.returned()
log.debug("Double activation of SQL context")
new Integer(getIntValue(workingMemory,object))
this.disconnect(account,true)
MultiValueMap<String,Object>
TestUtils.randomByte() + 128
return mIdleTimeMillis; 
loaded.getLoaded().getDeclaredConstructor()
KotlinFacetSettingsProvider.Companion.getInstance(module.getProject()).getInitializedSettings(module)
topMBMessage.getMessageId()
localLOGV || false
runUTRunner(testDir.getPath(),testDir.getPath() + "/","true")
ver.isNightly()
type == FILE_URI && this.saveToPhotoAlbum
n.floatValue()
getModel().getColumnCount()
mAttributes.getAllFlags()
Log_OC.d(TAG,"Got to start sync")
getRecordCount()
TokenSet.create(mSL_COMMENT,mML_COMMENT,mREGEX_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,WHITE_SPACE,mGSTRING_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,mREGEX_CONTENT)
PublisherPeek<T>
new UnsupportedOperationException("Query " + this + " does not implement createWeight")
sourceSet.getOutput()
numMessages=200
in.readVInt()
ensureGreen(index)
int year() default 2008; 
id=11
ImmutableMap.of(storeName,mutations)
logger.debug("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
win.isDrawnLw() || win.hasAppShownWindows()
TEST_STREAM_KEYS_SIZE=10000
value.length() < MAX_LENGTH
-1
PyReferenceExpression.class
mBiometricUnlock.stop()
new IllegalStateException("Could not find navigation view for Toolbar!")
sendMessageAtFrontOfQueue(CMD_STOP_AP)
curr.end >= intervals[i].start
pkgs.get(j)
final Throwable e
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
op2.z()
exchange.getBindingOperationInfo()
selenium.isElementPresent("link=Control Panel")
dockedBounds.top - dockDividerWidth
serializer.serializeInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
Realm.getInstance(this,false)
new AudioNode(assetManager,"Sound/Environment/Ocean Waves.ogg",false)
a.willChangeBounds()
mAppOpsManager.noteOpNoThrow(opCode,uid,packageName)
editor.commit()
lock.isHeldByCurrentThread()
arg.indexOf('.') >= 0 || arg.equals("android")
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
decoderLayerSizes == null
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
isMarked(node)
AnnotatedElementUtils.findAnnotationAttributes(method,annotationType)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
new OptiqSemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: Column " + field + " is of type "+ lInfo.getType().getTypeName()+ " on first table and type "+ rInfo.getType().getTypeName()+ " on second table"))
getActiveFgCall().getPhone().startDtmf(c)
LOG.info(e)
e.toString()
finish()
new IllegalArgumentException("unable to find primary shard assigned to node [" + request.getCurrentNode() + "]")
btceDepth.getBids()
Assert.assertTrue(permissionChecker.isOmniadmin())
Timber.e(errorMsg)
loaded.getLoaded().getDeclaredConstructor()
Key.create("_java_compiler_usage_stats_")
Throwable e
toEventData(key)
Resources.getApplicationProperty("defaultGroupName")
g.getTarget().setDirectory("target/generated-sources/jooq")
Builder<M,B>
assertEquals(7,ti.nrOfInvocations)
DEBUG=false
getRestricted(null,uid,restrictionName,md.getName(),false,false)
sliceSize * 10480
setZrtpEncryptionOnDescription(mediaType,description,null)
this.typeDescriptorCache.putIfAbsent(pd,td)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
index >= 0
ctxt.getServletContext()
deletion.memorySize()
onCreateView(context,appWidgetId,appWidget)
messageType2.set(message2,"message","Hello World")
selenium.isElementPresent("link=Control Panel")
id=16511
mp.getResolvedValue()
apnContext.getWaitingApns()
emptyView != null && emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
UpgradeStepRegistrator.class
tileBox.getDensity()
GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button); 
result.getResult()
parseBlockPos(sender,args,0,false)
dpToPx(24f)
new IllegalStateException(sm.getString("coyoteResponse.sendRedirect.ise"))
new PeepholeSubstituteAlternateSyntax(false)
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
new IllegalStateException("Advertising can't be both connectable and scannable")
text.indexOf('\n') >= 0 && count * argument.getMotion().getCount() == 1
myRole2 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
selenium.isElementPresent("link=Control Panel")
@Override public final AnalyzedTokenReadings createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
Long.parseLong(attrValue)
op == ASSIGN || op == ASSIGNMENT_OPERATOR
new DhcpAckPacket(transactionId,(short)0,broadcast,serverIpAddr,relayIp,requestClientIp,yourIp,mac)
selenium.isElementPresent("link=Control Panel")
paths.get(1)
return false; 
timeout=300000
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
selenium.isElementPresent("link=Control Panel")
day.equals("pt") || day.startsWith("piątk") || day.equals("piątek")
logger.error("Callback onResult call produced an error",e)
argNr > 0
new MockNode(builder.build(),Version.CURRENT,Arrays.asList(ShieldPlugin.class,LicensePlugin.class))
mAttributes.getAllFlags()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_DEFAULT_TO_FINALIZED,true)
getBorderRadius() >= 0.5f || getPathEffectForBorderStyle() != null
final UUID accountId
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoForStatement.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
owner == null || owner.getName().equals(PostgreConstants.PUBLIC_SCHEMA_NAME) || owner.getName().equals(PostgreConstants.CATALOG_SCHEMA_NAME)
completion.switchOnError(ex -> handler.handle(exchange,ex))
vindex > Short.MAX_VALUE
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
assertEquals("throughput",78.5579711577,model.getThroughput(),0.00000001)
popup.requestFocusInWindow()
Log_OC.e(TAG,"Trying to share a NULL OCFile")
WordPress.getCurrentBlog().getLocalTableBlogId()
gapBlock.getHash()
new SpannedString(new CustomSpannable(first),true)
statistics.addGetTimeNanos(System.nanoTime() - start)
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.<Type>asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
jarName.endsWith(".jar") || jarName.endsWith(".war")
Long.valueOf(contentLength)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
executor.scheduleAtFixedRate(this,period,period,unit)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
Throwable cause
insets.left != 0
selenium.click("//li[4]/span/a/span")
Expression.ge(this.propertyName,arguments[0])
contact != null && contact.showInRoster()
verifyAttributes(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
mGnssCallback != null
showRecentApps(true,false)
parameter.getName()
ModalityKt.isFinalClass(this)
uri.toString()
public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.click("//li[4]/span/a/span")
RectF r=(RectF)o; 
mUiHandler.removeCallbacks(pae)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
ts.getJobId() == jobId
Object[]
private TestMtpManager mMtpManager; 
new IllegalStateException("Not a time field: " + field)
final MediaDriverBroadcastReceiver mediaDriverBroadcastReceiver
new TreePath(rootPath,importTree)
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)
entry.getType()
new CreateIndexResponse(true,true,index){ } 
Assert.notNull(delegate,"ExpiringSession cannot be null")
mStackScroller.getChildAtRawPosition(x,y)
Tuple2.of(timeoutPattern2,12L)
super.setProperty(property,newValue)
mActiveStreamType == -1 || streamType != mActiveStreamType
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),null)
Thread.sleep(1000)
_freemarkerEngineConfiguration.resourceModificationCheck()
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
!project.isInitialized()
CommonUtils.randomAlphaNumString(random.nextInt(10))
subscriber.next(String.valueOf(i))
myKeepMethodsInOneLine.isSelected()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
type.getDeclaredConstructor()
Simple.forClass(SkylarkNestedSet.class)
new IndexWriter(this.__test_dir,new org.apache.lucene.analysis.standard.StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
new AnalyzedToken(word,taggerTokens[i + 1],taggerTokens[i],pos)
mHotspotBounds.set(left,top,right,bottom)
EnumMap<K,? extends V>
callback.onPulseFinished()
localMaster == null || localMaster.getAppMaster().getAppContext().getMasterService() == null
new UnsupportedOperationException("read-only")
replaces="doIntrinsicReceiverCachedTruffleObjectCached"
DBG=false
method.getReturnType().getName()
String.format("Expression must consist of 6 fields (found %d in %s)",fields.length,expression)
Integer.parseInt(nextArgRequired())
JavaSourceCodehausPackagesSuite.suite()
listAdapter.notifyDataSetChanged()
proxy == null
LOGGER.fine("Packed texture. Reading directly from the blend file!")
FileUtils.deleteQuietly(store.directory())
constructorInvokationMarker.rollbackTo()
instance2.getLifecycleService().shutdown()
projectGeneratorParameters.isWithoutTests()
BUKKIT_VERSION=1846
new RuntimeException()
getLlvmReturnType()
splitVert.setDividerLocation(0.5d)
mDataAuthorities == null || data == null
checkTables("purgeSnapshots","snapshots","project_measures","measure_data","rule_failures","snapshot_sources","dependencies","events","duplications_index")
UpgradeStepRegistrator.class
fileIds == null || fileIds.isEmpty()
Throwable ex
superClasses.length == 1 || node.isNewStyleClass()
context.createCallContextNoAccountId(createdBy,reason,comment,request)
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
mBindingServices.isEmpty()
DataStreamSink<OUT>
nativeSetFlags(mNativeObject,sc.mNativeObject,0,SURFACE_OPAQUE)
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id,background,foreground)
!isBottomRightVisible
!mConfiguration.isInMemoryDb() && (mConfiguration.openFlags & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0
nodeFile.getParentFile()
Integer.parseInt(time.split(":")[1])
new QSDetailClipper(mDetail)
executableType.getType().getPrimitiveType()
public Builder setRealmPassword(String password){   realm().setPassword(password);   return this; } 
mExitingAppTokens.get(i)
threadContext.isStartNextThreadLoop()
Log.e(tag,msg,tr)
appearance.getInt(attr,0)
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize() || inventory.getStackInSlot(i).stackSize >= inventory.getInventoryStackLimit()
service.getName()
selenium.isElementPresent("link=Control Panel")
popupWindow.setContentWidth(menuWidth)
new JSONWebServiceServiceAction(servletContext)
ConfiguredTargetValue.key(label,defaultTargetConfiguration)
selenium.isElementPresent("link=Control Panel")
Math.max(leftLen,rightLen)
LOGGER.fine(e.toString())
selenium.isElementPresent("link=Control Panel")
TreeUtil.nextLeaf(first)
selenium.isElementPresent("link=Control Panel")
startErrPos <= endPos
USE_DISPLAY_LIST_PROPERTIES=true
prev.stream()
selenium.isElementPresent("link=Control Panel")
HEAT_PER_MJ=0.0023F
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
ex.getClass().equals(ClassNotFoundException.class) || ex.getClass().equals(NoClassDefFoundError.class)
chargeUAh > 0 && level > 0
original.getKeyProperty("path") != null || properties.get("context") != null
leftExpression.getText()
serviceTester.systemRunning()
KeyColumnValueStoreTest.class
mp.getResolvedValue()
dis.readFully(serializedData,0,length)
status != null
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
new GeoPoint(bottom,posRight)
mAms.mWaitForNetworkTimeoutMs=2000
matcher.groupCount() == 1
pFromY - pToY
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
agentInstances.findAgentAndRefreshStatus(uuid)
state.isAlive()
sn != null && sn.getHistoryReference().getHttpMessage().getRequestBody().toString().equals(postData)
loaded.getLoaded().getDeclaredConstructor()
Integer.class
generateFluentSetters()
this.typeDescriptorCache.putIfAbsent(pd,td)
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
Integer.parseInt(tokens[3])
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)
getHomeButton()
bedtime - SystemClock.uptimeMillis()
c.close()
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
service.getName()
Optional.ofNullable(layout)
mService.reconnect(mContext.getOpPackageName())
LoadTask.class
title != null && (System.currentTimeMillis() - date.getTime()) < 10 * 24 * 60* 60* 1000L
String message
selenium.isElementPresent("link=Control Panel")
myTreeBuilder.updateFromRoot()
new ArrayList<>(0)
Integer.parseInt(this.getOptional("kylin.restclient.connection.max-total","200"))
!getLocationEnabled()
Throwable err
buttonevent != null && !initializing
usage.getUsed()
this.minKeySize
jmsManager.removeTopicFromJNDI(name)
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
Throwable e
return true; 
GL.glGenTextures(n,toBuffer(textures,offset),0)
selenium.isElementPresent("link=Control Panel")
assertDurationLessThan(stopDate - firstStopLogDate,10_000)
Utils.convertDpToPixel(dataSet.getBarBorderWidth())
!Const.isEmpty(job.name()) && name.startsWith("!") && name.endsWith("!")
Object tag
canPerformRequestOverConnection(mParentAccessibilityViewId)
GlobalSearchScope.allScope(getProject())
strippedQuotesLine.contains(" throws ")
LOG.warn("Failed to find " + baseDirectory.getAbsolutePath())
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
XContentType.YAML.mediaType()
variantData.get(key)
definition.contains(" abstract ") || definition.contains(" native ")
selenium.isElementPresent("link=Control Panel")
(Long)123L
entry != null && !DropboxUploadMode.force.equals(mode)
mBiometricUnlock.stop()
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.class,Timestamps.MICRO)
type.getDeclaredConstructor()
factory.getEmbeddedServletContainer()
schedule(new CheckQueue(),50)
dataFolder.exists() && PdeBase.calcFolderSize(dataFolder) > 768 * 1024
~PFLAG3_FITTING_SYSTEM_WINDOWS
!isPassword || shouldSpeakPasswordsForAccessibility()
NoSuchGroupException.class
native_get_videoeditor_export_level(vidCodec)
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615e00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
new PictureSelectDialog()
_log.warn(ioe,ioe)
port=8081
Throwable ex
identifier != null
mUiHandler.removeCallbacks(pae)
ticks * ticksInGap
selenium.isElementPresent("link=Control Panel")
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
messenger.sendCodeObsolete(res)
gateway.sendAndReceive(requestMessage)
!prevSearchFiles
assertEquals(0.20430759039450014,mses[i],1e-4)
metadata.getFaces()
item == null || item.getContainer() != pipe.container
ColorProperties.getColor("splitPaneDeviderFocused")
InetAddress.getLocalHost()
CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize)
message.getToTag()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(implRef).descriptionAndTooltip(message)
"DROP INDEX " + PATTERN_ITEM_INDEX
DEBUG_STARTING_WINDOW=false
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_CHECK))
loaded.getLoaded().getDeclaredConstructor()
super.equals(switchTouchData) && (_branch == switchTouchData._branch) && (_switchNumber == switchTouchData._switchNumber)
jarName.endsWith(".jar") || jarName.endsWith(".war")
meta.getEncoding()
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
webappsDir.getAbsolutePath()
e.getPresentation().setEnabledAndVisible(false)
JavaSdkImpl.getMockJdk15("java 1.5")
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mProviderRequest.reportLocation && !mDisableGps && isEnabled()
new HTable(TEST_UTIL.getConfiguration(),TABLE)
connectionStreams.getInputStream().read(buffer,0,fileLength)
new TextPaint()
mStackScroller.getChildAtRawPosition(x,y)
paramEntry.getValue()
mJobs.valueAt(i)
TYPE_DEBUG.equals(type)
rep.getAccountManagement()
@Nullable
result.getType()
selenium.isElementPresent("link=Control Panel")
ap.getSsidStr()
_languageImpl.format(defaultLocale,_LANG_KEY_WITH_ARGUMENT,"31")
defaultRequestConfig.getConnectTimeout()
event.getRawY()
assertNumUniqueNodeNameBuckets(2)
sep < 0 || sep > j
startMediaTimeState=START_NOT_SET
instance.startAction_New(getDefaultTitle(),null,false)
"content".equals(scheme) || "android.resource".equals(scheme)
MiddleEntity middle1=new MiddleEntity(); 
MimeTypeUtil.getFolderTypeIcon(file.isSharedWithMe() || file.isSharedWithSharee(),file.isSharedViaLink(),file.isEncrypted(),file.getMountType())
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
Q.row(j).minus(delta_qj.scale(lRate))
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,false,userId)
requestData.setInitialText("")
new GregorianCalendar(TimeZone.getTimeZone("GMT"),getLocale())
parent.resolveFile(jarfile)
MultiValueMap<String,Object>
List<CallServiceInfo>
numSameBitCells >= 5
createDouble(buffer.length(),init)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
transferCallButton != null
localLOGV || true
f.cancel(false)
trueNegatives.incrementCount(classLabel,1.0)
this == OTI_ONLY
ChannelHandler handler=handler(); 
p.getParent()
JBUI.scale(14)
case 6: 
ft.commitAllowingStateLoss()
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Slog.d(TAG,"Hardware Activity-Recognition not supported.")
fmd.getInheritedFromType()
new Request(picasso,CONTENT_1_URL,0,mock(ImageView.class),null,transformations,null,Type.CONTENT,0,null)
ConditionalOnEnabledHealthIndicator.class
((ContainerLifeCycle)contextHandler).addManaged(clientContainer)
Thread.sleep(40000)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE || mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET
new StrutsSpringObjectFactory(null,null,null,new MockServletContext(),null,"false",null)
recordSetVersion2.getVersion()
DEFAULT_ALLOW_CALLS=true
id=10839
mObsoleteAgents.remove(info)
Throwable err
mAlpha.cancel()
dropdownItem.setHref(getPortletURL(),"navigation","public-pages")
new HumanReadableException(e,"%s: %s",target,e.getMessage())
selenium.click("//li[4]/span/a/span")
mDisplay.getRealMetrics(mDisplayMetrics)
req.getPathInfo()
child.resetRtlProperties()
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
cache.putRecord(key,record)
!user.canAfford(getMoney())
rootView.getId()
/**   * @deprecated do not use  */ @Deprecated public final Node getRootImmediately(){   if (!root.isValid()) {     root.set(getValidRoot());   }   return root.get(); } 
getIntent().getAction() == null && savedInstanceState == null
m.getContent(OutputStream.class)
new Ticker.Builder().currencyPair(pair).bid(kcTick.getBuy())
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
integerSwitchNode.keySuccessor(i) == beginNode
mCurrentDate.get(Calendar.MONTH) != month
params.getConsole().getStdOut()
authManager.refresh(conf,new HBasePolicyProvider())
mStackScroller.getChildAtRawPosition(x,y)
size=500
version >= 2
UastUtils.isUastChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
c == separatorChar || c == '/'
selenium.isElementPresent("link=Control Panel")
appearance.getFloat(attr,0)
anyAreSet(state,FLAG_SHOULD_RESUME_READS)
new UnsupportedOperationException(getClass().getName())
Id
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
IllegalArgumentException e
new SpannedString(first,true)
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
fileSystem.renameFile(outputFile,archivedOutputFile(1))
mock.expectedMinimumMessageCount(2)
selenium.isElementPresent("link=Control Panel")
fileEntry.getMimeType(version)
isBookmarksList()
dlFileEntry.getFileVersion()
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),filteredBlacklistedSubdirectories)
dirtyOutputBuffer() || currentPacket != null
loaded.getLoaded().getDeclaredConstructor()
Object getBean() throws NoBeanAvailableException ; 
name == null || name.isEmpty()
_isNegInf(text)
Assert.assertEquals(120L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
JournalStructureServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
mapEntry.getValue().equals(source)
Trans != NO_TRANSPOSE
mccMncs != null
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
Long.parseLong(subSecs)
serializer.serializeInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
IntegrationNamespaceUtils.setReferenceIfAttributeDefined(processorBuilder,element,COMPARATOR_REF_ATTRIBUTE)
toArrayHelper(0)
svcs.deployAsync(srvcCfg)
target.getShortNameOnly()
c.writeAndFlush("[you] " + msg + '\n')
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
super.onDetachedFromWindow()
Boolean.parseBoolean(attrValue)
new Paint()
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to timestamp: " + value.toStringUtf8(),e)
position >= lastPos
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid",id)
label.getPackageIdentifier()
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mResultStorages,ActivityThread.currentOpPackageName())
i=14
null == user || UserExt.USER_STATUS_C_VALID != user.optInt(UserExt.USER_STATUS)
Futures.allAsList(resultList)
UserHandle.myUserId()
mf.getColumnNameInSql()
e.getMessage().equals("Error decoding XML-RPC response")
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
className.lastIndexOf(CONTROLLER_SUFFIX)
dockedBounds.bottom + dockDividerWidth
c.getLiquid() == null || c.getLiquid().amount == 0
_typeSettingsProperties.toString()
this.identityProvider.getAlias()
private final PropertyKey mHostNameKey; 
listener.onStatus(new StatusJSONImpl(json))
(short)0655
e2.nextElement()
this.rejectedAttr=rejectedAttr
LOGGER.isDebugEnabled()
schematicEntity.buildWithoutChecks(localWorld,FakeWorld.BLUEPRINT_OFFSET)
selenium.click("//li[4]/span/a/span")
Thread.sleep(1000)
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
sublistsIndices.keySet().stream()
existing.getScriptParameters()
AtmosphereRequest request
prefsWriter.apply()
mWPAndroidGlueCode.setContent(postContent)
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,false,1)
assertEquals(512f,i,20f)
myKeepMethodsInOneLine.isSelected()
Numeric.toHexStringWithPrefixSafe(filterId)
stall_till_cloudsize(3)
requestedProvider.get().isAvailable(service)
selenium.isElementPresent("link=Control Panel")
modulePath.split(File.pathSeparator)[0]
new Duration(30,SECONDS)
new IllegalStateException("Advertising can't be both connectable and anonymous")
args[0]
log.error(e1.getMessage(),e1)
@ConditionalOnEnabledHealthIndicator("redis")
log.debug("Can't set transaction isolation level",e)
bundlesMap.getBundle(module)
new StringBundler(5)
mListener.setConnectionId(1)
final SimulatedDpad mSimulatedDpad; 
mUserPaddingEnd > 0
LOG.warn(e,"Could not find missing deps")
pojo.keyFields()
thenStore.storeChanged || elseStore.storeChanged
this.quadSize
awsClient.deleteImage(resource.getId())
-1
setLowHighExpected(lowResults,highResults,expectedResults,MUC_TP,5965,5970,5965)
s.toString().toLowerCase()
new String(decryptCipher.doFinal(Base64.decode(ciphertext)),"UTF-8")
el instanceof GridSqlSubquery
dpToPx(8f)
type.getDeclaredConstructor()
data.split("\\s*,\\s*",-1)
user.isAuthorized("essentials.world." + user.getWorld().getName())
_buildTemplateWithGradle("template-context-contributor","context-contributor-dependency-management","--dependency-management-enabled")
g.cluster().localNode()
project == null || project.isDisposed()
Log.w(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
Numeric.toHexStringWithPrefixSafe(filterId)
assertNotNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
mAnswer.setBackground(null)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
vertexIndex % 3 == 0 && vertexIndex < cloneIndexes.limit()
Resolvable<ResolvedType>
log.error("Error while closing command context",exception)
appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(fragUrl))
new InvoicePaymentModelDao(id,createdDate,type,invoiceId,paymentId,paymentDate,amount,currency,paymentCookieId,linkedInvoicePaymentId)
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,false)
DumbService.getInstance(getProject()).smartInvokeLater(() -> actionManager.tryToExecute(mainMenuAction,fakeMainMenuMouseEvent,null,ActionPlaces.MAIN_MENU,true))
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_FRIST),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_FRIST)),AccountType.Normal,200_000_000_000L)
new Paint()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
DiagnosticType.error("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
JMenu predefined=new JMenu("Predefined Style"); 
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
selenium.isElementPresent("link=Control Panel")
new LruCache<>(3)
createFromResourceStream(res,value,is,srcName,null)
interpreterSetting.getGroup()
logger.debug("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new ConnectionException(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR)
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
mService.enableNetwork(netId,attemptConnect,mContext.getOpPackageName())
setIntegerPart(String.valueOf(integerPart))
a.getLayoutDimension(R.styleable.BootstrapButton_android_layout_width,0)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
return serverElement; 
chain.filter(exchange).subscriberContext((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
VDBG=false
id=31
a.getDimension(attr,0)
getNewValue()
SCAN_STATUS_PARTIAL=1
LOGGER.warn("Could not perform drage and drop",ioex)
engine.execute(query).dumpToString()
storeSettings(actionRequest,themeDisplay)
new LightweightThread(null,null,this)
LOGD=false
getSubprojects()
assertPlanEquals(expectedPlan,actualPlan)
ch == '?' && JdbcConstants.POSTGRESQL.equals(dbType)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
final PsiExpression expression=(PsiExpression)descriptor.getPsiElement(); 
loadScriptByName(scriptName,groovyLoader)
exportStatusCounts(exporter)
newInstance(classResourcesKey,resDir,displayId,config,scale,isThemeable,token)
e instanceof AuthException || e.getCause() != null && e.getCause() instanceof AuthException
@ConditionalOnEnabledHealthIndicator("db")
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
in.getDepth() >= outerDepth
new ContentDescription(ContentType.SERVICE_JOINED,"",0,false)
@Override public Long call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
mAlpha.cancel()
loaded.getLoaded().getDeclaredConstructor()
new LocalCheckpointTracker(maxSeqNo,minSeqNo)
mUserManagerHelper.getAllUsers()
disjPred.isAlwaysTrue()
DictionaryGenerator.buildDictionaryFromValueList(Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ))
hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
orgReplica.applyDeleteOperationOnReplica(1,2,"type","id",VersionType.EXTERNAL,u -> { } )
StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
stack == null || stack.mStackId != DOCKED_STACK_ID
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
selenium.isElementPresent("link=Control Panel")
mGnssCallback != null
awsClient.deleteImage(resource.getId())
mActivity.get() != null && !mActivity.get().isFinishing()
Validator.isNotNull(getKeywords())
new IndexWriter(directory,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
requestData.setInitialText(element.getPropertyAsString(TCPSampler.REQUEST))
Resolvable<ResolvedType>
StringBuilder sb=new StringBuilder(); 
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
StringUtil.toHexString(key.hashCode())
selenium.isElementPresent("link=Control Panel")
zController.enqueue(doRequestStop())
TOUCHEVENT_POOL.recyclePoolItem(pTouchEvent)
LOG.warn("Error applying formatter '{}'. Skipping.",formatter.getClass().getName(),ex)
params.getConsole().getStdOut()
getCustomInitBinderArgumentResolvers()
if (mAllowUndeclaredRTE) {   processPackage(aAST); } 
removeCallbacksAndMessages(null)
selenium.isElementPresent("link=Control Panel")
new OpenFileDescriptor(project,selectedFiles[i])
Context.getVisitService().getAllVisitTypes(true)
new IndexWriter(directory,autoCommit,ANALYZER,false,IndexWriter.MaxFieldLength.LIMITED)
InsertReturningStep<R>
return true; 
_scored_valid != null
Entry<String,U>
request.getDueAfter()
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.USER_CURRENT)
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
generateFluentSetters()
paramAttribute.split("\\.")
c.close()
type.getDeclaredConstructor()
ParseUtils.parseS300THHumidity(S300TH_DATA_1)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_CHECK))
k < 5
CollectionItemInfo.obtain(row,1,column,1,isHeading,isSelected)
return threadHasRun; 
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false,1)
isAllowed()
mUiHandler.removeCallbacks(pae)
patientState.getState().getUuid()
queueLength.asString()
checkArgument(partitionColumns.size() == values.size(),"Partition value count does not match the partition column count")
holder == null || holder.provider == null
Boolean.parseBoolean(attrValue)
IllegalArgumentException e
p.attention(alarm.getType() + "")
this.mTitle.compareToIgnoreCase(another.mTitle)
ORIENTATION_SETTLE_TIME_MS=250
System.nanoTime()
mWM.isKeyguardLocked()
Ints.min(completedSplits.get(),startedSplits.get(),splits)
VDBG=false
SynchronizeFolderOperation synchFolderOp=new SynchronizeFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
PsiTreeUtil.getParentOfType(file.findElementAt(offset),PsiComment.class,false)
Throwable ex
krakenDepth.getBids()
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
BackupManagerServiceInterface svc=mService; 
items[23]
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
PortalTopLevelBuildData portalTopLevelBuildData=getBuildData(); 
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
(startTime + 500) / 500
conn.getResponseCode() == 302 || conn.getResponseCode() == 301
node.getTypeDescriptor()
changeAffiliationByAdmin(jid,"admin",null)
mAccessibilityController.isAccessibilityEnabled()
log.warn("Couldn't find style: " + styleId)
new IndexWriter(directory,analyzer,create,IndexWriter.MaxFieldLength.LIMITED)
scheduleRemoveStartingWindowLocked(wtoken)
GL20.glUniform3fv(location,v)
(float)executions / iterations
grantAlias == null || "".equals(grantAlias)
from >= to
mvStore != null && !mvStore.getStore().isClosed()
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
connection.zrevrangeByLex(key,max,min)
mTextUtil.nextRandomParagraph(WORD_LENGTH,STYLE_TEXT)
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
bean.getCollectionTime()
@Override public File getSource(){   return modSource; } 
new ConnectionException(sm.getString("http2Parser.processFrameSettings.ackWithNonZeroPayload"),Http2Error.FRAME_SIZE_ERROR)
UIUtil.isCloseClick(e)
StorageService.instance.getTokenMetadata().invalidateCachedRings()
new ShardId(index,"_na_",0)
dest.writeTypedArray(remoteInputs,flags)
TypeParameterDescriptorImpl.createWithDefaultBound(receiverFunction,Collections.<AnnotationDescriptor>emptyList(),false,Variance.IN_VARIANCE,Name.identifier("T"),0)
ctx.getMapView().refreshMap(true)
selenium.isElementPresent("link=Control Panel")
signature.getFile()
lp.viewType == ITEM_VIEW_TYPE_HEADER_OR_FOOTER
!requestsPolicy.isValid(count)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_ONLY_JOB_OUTPUT))
ACRA.log.w(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
SessionClicks.get(request.getSession(),"ignoreUserLocaleOptions",Boolean.FALSE.toString())
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,journalArticleId,false,JournalArticleConstants.VERSION_DEFAULT,getMap(articleDefaultLocale,title),descriptionMap,content,ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
1000 * 60 * 6
@Nullable
isDoubleA && isIntB
MAX_PERCENT_DIFFERENCE=0.3
doTest("class Test {\n" + "  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\n" + "}\n"+ "class Comparator<X>{}","sort-T:A-Comparator-","sort-T:A-Comparator<? super T>-","sort(T[], Comparator)","sort(T[], Comparator<? super T>)")
conf.getDouble("mult")
Throwable e
public List<CexIOArchivedOrder> archivedOrders(TradeHistoryParams tradeHistoryParams) throws IOException {   String baseCcy=null;   String counterCcy=null;   Integer limit=null;   Long dateTo=null;   Long dateFrom=null;   Long lastTxDateTo=null;   Long lastTxDateFrom=null;   String status;   if (tradeHistoryParams instanceof CexIOTradeHistoryParams) {     CexIOTradeHistoryParams params=(CexIOTradeHistoryParams)tradeHistoryParams;     CurrencyPair currencyPair=params.currencyPair;     baseCcy=currencyPair == null ? null : currencyPair.base.getCurrencyCode();     counterCcy=currencyPair == null ? null : currencyPair.counter.getCurrencyCode();     limit=params.limit;     dateTo=params.dateTo;     dateFrom=params.dateFrom;     lastTxDateTo=params.lastTxDateTo;     lastTxDateFrom=params.lastTxDateFrom;     status=params.status;   }  else {     status="d";     if (tradeHistoryParams instanceof TradeHistoryParamsTimeSpan) {       TradeHistoryParamsTimeSpan tradeHistoryParamsTimeSpan=(TradeHistoryParamsTimeSpan)tradeHistoryParams;       lastTxDateFrom=toUnixTimeNullSafe(tradeHistoryParamsTimeSpan.getStartTime());       lastTxDateTo=toUnixTimeNullSafe(tradeHistoryParamsTimeSpan.getEndTime());     }     if (tradeHistoryParams instanceof TradeHistoryParamCurrencyPair) {       CurrencyPair currencyPair=((TradeHistoryParamCurrencyPair)tradeHistoryParams).getCurrencyPair();       baseCcy=currencyPair == null ? null : currencyPair.base.getCurrencyCode();       counterCcy=currencyPair == null ? null : currencyPair.counter.getCurrencyCode();     }     if (tradeHistoryParams instanceof TradeHistoryParamLimit) {       limit=((TradeHistoryParamLimit)tradeHistoryParams).getLimit();     }     if (tradeHistoryParams instanceof TradeHistoryParamPaging) {       limit=((TradeHistoryParamPaging)tradeHistoryParams).getPageLength();     }   }   ArchivedOrdersRequest request=new ArchivedOrdersRequest(limit,dateFrom,dateTo,lastTxDateFrom,lastTxDateTo,status);   return cexIOAuthenticated.archivedOrders(signatureCreator,baseCcy,counterCcy,request); } 
KeyManagerFactory.getDefaultAlgorithm()
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
List<String>
assertEquals(4,config.getMapConfigs().size())
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ O serialize(Object input); 
block.blockMaterial.isToolNotRequired()
callback.onPulseFinished()
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
config.addProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(MethodDelegation.to(ToStringInterceptor.class).defineParameterBinder(StringValueBinder.INSTANCE)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
cls.getDeclaredMethod(mtdName,paramTypes)
new GitException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
new INodeDirectory(s,true)
fill || textureImage != null
checkCall(receiver)
GuiPackage.getInstance().updateCurrentGui()
getInstantiator().newInstance(DefaultDistribution.class,name,fileResolver)
testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
enabled=false
match == null || predicate != null && !predicate.match(match,start,end,context)
new SonarException(String.format("You don't have access rights to project [%s]",projectKey),e)
mActivityLogContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
ORIENTATION_SETTLE_TIME_MS=250
MathUtils.PI * (this.width * this.height) / 4
log.warn("IntrospectionUtils: InvocationTargetException for " + o.getClass() + " "+ name+ ")",ie)
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,1)
delaySoFar >= mReEnableDelayMillis
child.getMeasuredWidth()
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar","java.time.LocalDateTime")
new SimpleDateFormat("yyyy/MM/dd",Locale.ROOT)
stateAfter() == null || stateAfter().bci == FrameState.AFTER_BCI
times(1)
StringUtils.isEmpty(content)
updateElement != GROUPS && lastUpdateIdx < firstUpdateIdx
NB_CACHED_PARAMS=10
info.getImeiForSubscriber(subId[0],mContext.getOpPackageName())
ReferenceCountUtil.release(holder)
protected abstract ResolvedReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,List<ResolvedType> typeParameters); 
Ints.saturatedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
EnumSet.of(Scope.JAVA_FILE,Scope.TEST_SOURCES)
ByteBuffer audioData
genericReturnType.getSort()
handler.hasPermission(base,node)
writePermission.intern()
fillPaint.getTypeface()
mAdapter != null && mDataSetObserver != null
cacheController.putIfAbsent(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
two.setAxisIndex(0)
tx != null
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
intent.resolveType(getContentResolver())
element.getStringValue()
relationshipCursor.type()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_RECORD_FUNCTION,false)
myLoader.loadSkeleton(myTicket.copy(),rootsHolder,Collections.<String>emptyList(),filters,myController,true)
typeSettingsProperties.toSortedString()
Map<String,FilterBuilder>
openSession.closeAndClearTokenInformation()
ReferencesSearch.search(element,element.getUseScope(),false)
fulfillmentGroupItemWrapper.wrapSummary(fgi,request)
mLastNotificationMillis=-rateLimitMillis
myModuleBuilder.modifyProjectTypeStep(settingsStep)
LinkedHashSet<>
U.delete(home)
graph.unique(new FloatingReadNode(klassNode,location,null,stamp))
tree.getRowCount()
createTestBlockCapsule(1533529947843L + 3000L * 7,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
Response.ok(null,MediaType.TEXT_PLAIN)
selenium.isElementPresent("link=Control Panel")
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
ft.add(R.id.layout_fragment_container,commentFragment,tagForFragment)
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
log.error(e.getMessage(),e)
optimize && item.isOnlyShared() && item.getSubStatus() == RosterItem.SUB_FROM
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
new WorldPoint(2552,3556,0)
file.getFile()
E extends Throwable
fileObject.hasExt("zip") || fileObject.hasExt("ZIP")
newDecl.isNovel()
mInitialMotionX == null || mInitialMotionX.length <= pointerId
keySyncOperation.startsWith(targetKey)
new Button("submit"){   private static final long serialVersionUID=-2842881187264147131L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setJAI((JAIInfo)jaiModel.getObject());     gs.save(global);     doReturn();   } } 
doubleValue != 0
AttributeCache.instance().get(packageName,realTheme,styleable.Window,userId)
SCAN_STATUS_COMPLETE=2
metadata.getFaceRectangles()
bbbGW.userDisconnectedFromGlobalAudio(emm.voiceConf,emm.userid,emm.name)
Details_DialogLayout.findViewById(R.id.ll_location)
hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
wifiConfig == null || wifiConfig.isValid()
greaterThanOrEqualTo(3)
CommonBundle.getWarningTitle()
getTypeName2(decl.getMethodBinding().getReturnType())
p.getFileSystem(conf).delete(p,true)
cc.getLazy()
Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
new IllegalStateException("Advertising can't be both connectable and scannable")
@Override public AnalyzedTokenReadings createNullToken(String token,int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
selenium.isElementPresent("link=Control Panel")
DatabaseDescriptor.getListenAddress().getHostAddress()
encounter.getObsAtTopLevel(true)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
typedAction.getRawHandler()
bottomost != null && bottomost.getLanguage().getFormattingModelBuilder() != null
List<TaggedWord>
checkCall(receiver)
mHotspotBounds.set(left,top,right,bottom)
new Paint()
pos.getInputType(usage) == type && pos.get(usage) == this
hasRows(newTableName)
new IllegalStateException(e)
securityDomain != null && !securityDomain.isEmpty()
allocator.getFlowController().prepareActionAllWrite(input,epsilon,nextEpsilon,gamma,dGammaView,dBetaView)
new LeftTuple(new DefaultFactHandle(2,"cheese"),null)
methodNode != null && closureExpression == null
insertImport(node,target,asName,true)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
new HashMap<>()
Slog.d(TAG,"Unable to bind FLP Geofence proxy.")
3 * 1000
mBondState.setBondState(address.toUpperCase(),state,reason)
getParentByStub()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
AudioFormat.isEncodingLinearFrames(mAudioFormat)
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
UADEntityAggregator::getApplicationName
(device=1 << i) != AudioSystem.DEVICE_OUT_DEFAULT
terminal.receivedSendToTerminal(postCreateText)
new StoreFileMetaData(file.getName(),file.length(),checksums.get(file.getName()))
Beans.newDuration(jpaProperties.getPool().getMaxWait()).getSeconds()
selenium.isElementPresent("link=Control Panel")
GL20.glUniform4iv(location,v)
new InternalSearchResponse(hits,null,null,null,false,null,1)
databaseFile.getName()
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
RANGES.contains(builder.getTokenType()) || getCompositeSign(builder)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
return false; 
return GCM; 
logger.debug("InterruptedException during playing a notification sound")
new GroupDialog(frame,null)
tracesDir.mkdirs()
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
"A task is in the ABORTED state but stage is " + currentState
Integer.parseInt(topStr)
resetTimeInSeconds * 1000L
ai.uid < Process.FIRST_APPLICATION_UID
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
fragmentCollectionPersistence.countByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
client != null && client.autofillClientIsFillUiShowing()
new SpannedString(first,true)
origin >= other
equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
selenium.isElementPresent("link=Control Panel")
KotlinCompilerClient.Companion.connectToCompileService(compilerId,daemonOptions,System.out,true,true)
i < 10
newDto(RecipeDto.class).withContent(DEFAULT_DOCKER_IMAGE)
key.startsWith("jar:") || key.startsWith("file:")
new RagManager()
Exception ex
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
lexerEngine.equalAny(Symbol.LT_GT,Symbol.BANG_EQ,Symbol.BANG_GT,Symbol.BANG_LT,DefaultKeyword.LIKE)
TEMP_DIR_ATTEMPTS=10_000
!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
new TextPaint(Paint.ANTI_ALIAS_FLAG)
shardDao.insertShard(shard,tableId,null,0,0,0,0)
Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE)
deltaY <= 0
new FtrlDelta(false,alpha)
mapReader.containsPoiData()
app.setOwnerName(ownerName)
check(given("HEAD","master","origin/master"),ContainerUtil.list("HEAD"),Pair.create("Local",ContainerUtil.list("master")),Pair.create("Tracked",ContainerUtil.list("origin/master")),Pair.create("origin/...",ContainerUtil.list("origin/master")))
assertEquals(12,definitions.size())
refresh(true)
target.setField(0,edge)
loaded.getLoaded().getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
factCount=5000
ab.get1U()
iter.remove()
Throwable e
factory.getEmbeddedServletContainer()
new BuckUncheckedExecutionException(e,"When starting activity.")
copy1DRangeFromUnchecked(0,mType.getCount(),i)
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
super.getIsNullProvider(path)
myNameField.getFocusableComponent()
nextTypeId >= allocatedIds.length
sqlRouteResult.getSqlParsedResult().getType()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
model.getEnum().size() == 3
telephony.isRinging(getOpPackageName())
EXCEPTION_CAUSE_PATTERN.matcher(output)
info.getLine1AlphaTagForSubscriber(subId,mContext.getOpPackageName())
activityNdx <= topActivityNdx
synchronized (mAuthorities) {   writeStatusLocked(); } 
users.get(j)
value & 0xff
JCVideoPlayerManager.lastListener()
assertEquals(0.0,biaOp.currentResult().doubleValue(),1e-1)
selenium.isElementPresent("link=Control Panel")
stripFilter.skipWhiteSpace(charBuffer,stringWriter,true)
myApplicabilityError.remove()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
loaded.getLoaded().getDeclaredConstructor()
person.getPersonVoidReason()
logger.debug("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
mUserStates.valueAt(i)
logger.warn("Table spec retrieval failed!")
StringBuilder buffer=new StringBuilder("("); 
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
getCurrentTypes().length > 0 && parseContext.fieldMapper(DATE_FIELD_NAME) != null
Double.isInfinite(longitude)
createDouble(buffer.length(),init)
new LinkedHashSet<>(0)
new FileOutputStream(file)
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
new IndexWriter(dir2,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
cacheController.putIfAbsent(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
new MaxCandidatesCondition(5)
LOGGER.debug(msg.apply())
new LayerView(this,0x0f00ff00)
ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)
mHotspotBounds.set(left,top,right,bottom)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
Character.isJavaIdentifierPart(buffer.charAt(i))
striped.get(key).writeLock()
binary.getDisplayName()
partStore.finishSave()
_connector.getResponse("GET /foo?status=206&data=42 HTTP/1.0\n\n")
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
SimpleFSIndexInput clone=(SimpleFSIndexInput)super.clone(); 
items[28]
new Intent(Intent.ACTION_USER_PRESENT)
tok.getIdentifier()
IndexReader.open(store)
exchange.setRequestHeader("Authorization",_basicAuth)
status == 404
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
TimeUnit.SECONDS.toMillis(5)
this.messageService.monoPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
new ArrayList<>(0)
caught.isArrayPattern()
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameMethod.run();   } } 
new Paint(Paint.ANTI_ALIAS_FLAG)
newChain.getText()
OAuthConstants.BEARER_TOKEN_TYPE.equalsIgnoreCase(tokenType)
mTouchProgressOffset=0.6f
GoExecutor.in(module).withExePath(executable.getAbsolutePath()).withParameters("-w",filePath)
RelativePoint.getSouthWestOf(link)
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) >= 1
account.getId()
message.isExpired()
compactionStrategyFor(deleted)
selenium.isElementPresent("link=Control Panel")
Assert.assertTrue(permissionChecker.isOmniadmin())
new StringBuffer(input.length())
-tilesRect.getRotate()
composite.isDisposed() || text == null
ALIASES.addOperationParameterDescription(resources,"infinispan.container",op)
new int[297]
mFlexItemInEdit.setAlignSelf(AlignItems.FLEX_END)
public void setHeaderTableSize(long headerTableSize) throws ConnectionException {   if (headerTableSize > (16 * 1024)) {     throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR);   }   this.headerTableSize=(int)headerTableSize; } 
context.getDataSource()
i * BLOCK_SIZE
structuralLock.isHeldByCurrentThread()
needsUpdate || stepping || paused
StringBuilder ret=new StringBuilder(100); 
Integer.parseInt(attrValue)
this.presence.isAvailable() && oldPresence.getPriority() != this.presence.getPriority()
labels.size()
TicketGrantingTicket.class
Thread.sleep(1000)
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false",null)
entry.rxBytes == 0 && entry.txBytes == 0
BaselineCompiler baselineCompiler=new BaselineCompiler(GraphBuilderConfiguration.getDefault(),providers.getMetaAccess()); 
editor.rebuildHeader()
sourceSet.getOutput()
Foundation.log("[error] " + tag + ": "+ message)
ControllerStatusReportingTask.class.getDeclaredField(fieldName)
ContainerUtil.immutableSet(PLATFORM_IOS,PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS)
"RebaseInstrumentationTarget{" + "typeDescription=" + typeDescription + ", defaultMethods="+ defaultMethods+ ", bridgeMethodResolver="+ bridgeMethodResolver+ ", methodRedefinitionResolver="+ methodFlatteningResolver+ '}'
Log_OC.e(TAG,"Trying to open a NULL OCFile")
mWebViewClassic.addJavascriptInterface(mTextToSpeech,ALIAS_TTS_JS_INTERFACE,true)
LOG.warn("Root project path of the Gradle project not found for " + rootModel.getModule())
mRepeat > 0
valueElement != null && valueElement.getTextLength() > 0
PublisherPeek<T>
ModelReference.of(new ModelType<RuleAwarePolymorphicNamedEntityInstantiator<ComponentSpec>>(){ } )
warning("Failed to resolve default logging config file: " + DFLT_CONFIG_PATH)
factory.createCatchSection(exceptionType,name,tryStatement)
metadata.getFaces()
U.error(log,"Message is ignored due to an error [msg=" + msg + ']',e)
Throwable e
mAuthorities.valueAt(i)
NonNullList.func_191197_a(size,ItemStack.field_190927_a)
mAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"createUser:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign Up Failed",Toast.LENGTH_SHORT).show();     }   } } )
layoutPageTemplateCollectionService.getLayoutPageTemplateCollections(getGroupId(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,layoutPageTemplateCollectionNameComparator)
loadAnimator(fragment,transition,false,transitionStyle)
get(request,plid)
j--
peopleListFromJSON(jsonArray,localTableBlogId,false,false,true)
myRole1 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
namespace == null || namespace.equals("")
Mono<Void>
logger.getLogger().warning("Shut down master")
Assert.assertEquals(3,propertyCategories.size())
PushConfigurationState.class
new int[37370]
serialVersionUID=320L
UserHandle.myUserId()
assertEquals("Unexpected events " + publisher.events,3,publisher.events.size())
Long.parseLong(timeString)
dest.writeInt(mSubId)
given().content(bytes).when().put("/file")
logger.warn("{}",general)
id=16509
mAuthorities.valueAt(i)
Long.parseLong(attrValue)
fileName.lastIndexOf('.')
includedGroup == null
value == Integer.MAX_VALUE
TX_TIMEOUT=200
element.getText()
RecentsHorizontalScrollView.super.removeView(view)
LOGGER.warn("Could not parse URL",nfe)
post.isLocalChange()
nodeEngine.getSharedService(LockService.SERVICE_NAME)
Collectors.joining("\n")
eventJournalConfig.getCacheName()
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
Throwable e
GameData.injectSnapshot(snapshot,false,true)
/**   * An SQL Dialect for PostgreSQL 9.3 and later. Adds support for Materialized view.  * @author Dionis Argiri  */ public class PostgreSQL93Dialect extends PostgreSQL92Dialect {   @Override public void augmentRecognizedTableTypes(  List<String> tableTypesList){     super.augmentRecognizedTableTypes(tableTypesList);     tableTypesList.add("MATERIALIZED VIEW");   } } 
currentJBUIScale()
ttl >= 0
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47),map(ProtocolConstants.MINECRAFT_1_11_1,0x47))
-14
LinkageError ex
scoreobjective1 != null
elementAtOffset == null || elementAtOffset.getNode() == null
hasCdmaDataConnectionChanged || hasNetworkTypeChanged
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
StepVerifier.create(Mono.just(1).then()).verifyComplete()
appBundle != null && appBundle.exists() == false
this.setOrder(969)
ActionUtil.getProductEntry(actionRequest)
addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)
dexBuf.readUshort(interfacesOffset + 4 + (2 * index))
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
prepareCreate("test").addMapping("article","_id","index=not_analyzed")
items[25]
lp.width != panelWidth || lp.gravity != panelGravity
checkCall(receiver)
anchorView.getApplicationWindowToken()
new RuntimeIOException("No input file provided (use -parseFile)",e)
this.registrations.values().stream().filter(registration -> registration.getClientAlias().equals(clientAlias)).findFirst().orElse(null)
mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L
new HtmlExporter()
analysis.getTypeWithCoercions(windowFunction)
stack == null || stack.mStackId != DOCKED_STACK_ID
user.getUserId()
loaded.getLoaded().getDeclaredConstructor()
MacMessages.showYesNoDialog(title,message,yesText,noText,WindowManager.getInstance().suggestParentWindow(project))
layoutChildLayoutsList.sort(Comparator.comparing(Layout::getPriority))
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","No data returned")
private final PropertyKey mBindHostKey; 
values.get("error").toString()
selenium.isElementPresent("link=Control Panel")
new Intent(ACTION_QUICK_CONTACT)
sendObjectInfoResult.getCompressedSizeLong()
new StringPreference("map_tile_sources",TileSourceManager.getMapnikSource().getName(),false)
klass.getDeclaredFieldsUnchecked(false,declaredFields)
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
service.asBinder().pingBinder()
private void _runClassCommandName(String classCommandName) throws Exception {   Element rootElement=PoshiRunnerContext.getTestcaseRootElement(_testClassName);   List<Element> varElements=rootElement.elements("var");   for (  Element varElement : varElements) {     String name=varElement.attributeValue("name");     String value=varElement.attributeValue("value");     PoshiRunnerVariablesUtil.putIntoExecuteMap(name,value);   }   PoshiRunnerVariablesUtil.pushCommandMap();   Element commandElement=PoshiRunnerContext.getTestcaseCommandElement(classCommandName);   if (commandElement != null) {     PoshiRunnerStackTraceUtil.pushFilePath(classCommandName,"testcase");     PoshiRunnerExecutor.parseElement(commandElement);     PoshiRunnerStackTraceUtil.popFilePath();   } } 
fileName.contains("-ext") && !isJarFile(file)
sanitizeName(name)
((TcpDiscoverySpi)cfg.getDiscoverySpi()).setJoinTimeout(10000)
assertPhoneNumberNotEqual("123123","0123123",false)
RandomDocumentPicks.randomIngestDocument(random(),Collections.emptyMap())
new IllegalStateException("No SHA implementation available!")
Outcome.noMatch("missing database driver " + driverClassName)
validatorHelper.enclosingElementHasEActivity(element,validatedElements,valid)
mPowerManager.isInteractive()
FilterResult::isDeclined
queuedChunk.provider.originalLoadChunk(queuedChunk.x,queuedChunk.z)
JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA")
32 * 1024
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg,"-n",patchPkg + "/com.taobao.atlas.update.AwoPatchReceiver")
selenium.isElementPresent("link=Control Panel")
f.toURI()
assertEquals("Size of " + r,11,r.size())
String.format("%n%s after %d ms\n" + "[%10d tests found     ]\n" + "[%10d tests started   ]\n"+ "[%10d tests skipped   ]\n"+ "[%10d tests aborted   ]\n"+ "[%10d tests successful]\n"+ "[%10d tests failed    ]\n",msg,(this.timeFinished - this.timeStarted),this.testsFound.get(),this.testsStarted.get(),this.testsSkipped.get(),this.testsAborted.get(),this.testsSucceeded.get(),this.testsFailed.get())
this.messageService.fluxPreAuthorizeBeanFindById(1L).subscriberContext(withUser)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
toUse.filter(bci -> namedCheckers.contains(bci.canonicalName()))
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true)
m.size()
layouts.size()
true || IS_USER_BUILD
Integer.parseInt(displayIdStr)
getPath("checks/javadoc/Input_02.java")
MAX_DIMEN_FOR_ROUNDING=1920
type.getDeclaredConstructor()
AnnotatedElementUtils.findAnnotationAttributes(method,annotationType)
credentials.getPassword()
value.toLowerCase().startsWith(constraintLowerCase)
selenium.isElementPresent("link=Control Panel")
LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,true,progress)
paramValue == null || paramValue.isEmpty()
ColorProperties.getColor("buttonGradientDark")
mService.removeNetwork(netId)
new ShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
to.serialize()
mExternalOnScrollListener=listener
VertexProgram.createVertexProgram(graph,ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
operation.equals("in") || operation.equals("not in")
new TextPaint()
new IllegalArgumentException("profession and name can not be null")
mapper.getTypeFactory().constructType(InspectExecResponse.class)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
getName()
((PyFunction)def).getParameterList().acceptChildren(new PyElementVisitor(){   @Override public void visitPyParameter(  PyParameter par){     PyNamedParameter n_param=par.getAsNamed();     assert n_param != null;     if (!n_param.isKeywordContainer() && !n_param.isPositionalContainer()) {       LookupItem item=(LookupItem)factory.createLookupElement(n_param.getName() + "=");       item.setIcon(n_param.getIcon(0));       ret.add(item);     }   } } )
Math.min(titleRight,subtitleRight)
lastPos > mBoundPos
selenium.isElementPresent("link=Control Panel")
table.hasSearchIndex(table.getColumnIndex("columnString"))
Pattern.compile(".*[ \t\n\r]+(.+?)[ \t\n\r]*\\(.*",Pattern.DOTALL)
mPersistedFiles.removeAll(persistedFiles)
synchronized (this) {   classCache.put(cls.getName(),cls); } 
mapCopy.getName()
cfstore.markCurrentSSTablesReferenced()
newParameters.add(0,o)
IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0023F)
LocalDateTimeUtils.getLocalDateTimeClass()
getTestVector().getNumNonZeroElements()
TelephonyManager.getDefault().getCurrentPhoneType()
raw.getOutParameters()
Dependency.cranPackage("rsconnect","0.8.11")
SimpleScheduleBuilder.simpleSchedule().withIntervalInMilliseconds(this.refreshInterval)
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
braceStyle == CodeStyleSettings.END_OF_LINE || braceStyle == CodeStyleSettings.NEXT_LINE_IF_WRAPPED
p2.isTerminated()
i < 30
mValues[8]
CoreMatchers.anyOf(is(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>$Placeholder"),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest" + ".net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>.Placeholder"))
appearance.getFloat(attr,0)
selenium.isElementPresent("link=Control Panel")
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
loaded.getDeclaredConstructor()
editor.isDirty()
Math.max(0,Integer.parseInt(split[1]) - 1)
isAllowed()
event.init(viewTag,barCode)
writeOwners.clear()
evaluate("value = read_config('foo', 'bar')").moduleLookup("value")
apnContext.getWaitingApns()
Integer.parseInt(taskIdStr)
StringUtil.in(name,"base","basefont","bgsound","command","link","meta","noframes","script","style","title")
Nd4j.randn(order,shape).muli(FastMath.sqrt(2.0 / (fanIn + fanOut)))
longSize >= 960
eocBound == Bound.END
GridGgfsTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
/**   * Obtain the property descriptor for a specific property of the wrapped object.  * @param propertyName the property to obtain the descriptor for(may be a nested path, but no indexed/mapped property)  * @return the property descriptor for the specified property  * @throws InvalidPropertyException if there is no such property  */ PropertyDescriptor getPropertyDescriptor(String propertyName) throws InvalidPropertyException ; 
SamplingProfiler.newThreadGroupThreadSet(group)
flux.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
getGpx().getColor()
isAbstract()
ret.shapeInfoDataBuffer()
sstable.getMinTimestamp() <= maxDeletionTimestamp
System.arraycopy(otherReferences,0,references,1,otherReferences.length)
new PseudoDescription().loadSilent(getClass().getClassLoader())
service.asBinder().pingBinder()
setAttributeInternal(tempInodePath,false,opTimeMs,options)
mock.expectedMinimumMessageCount(2)
c.getLiquid() != null && c.getLiquid().amount != 0
recommendArrayListByUser.size() > 1
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
myTaskManager.getChangelistName(localTask)
DEBUG=false
srcFile.isDirectory()
new JarResourceRoot(root,new File(getBase()),baseUrlString,path)
userImpFactor.addEqual(userFactors.row(userIdx,false))
mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately)) && !post.isLocalDraft()
Picasso.with(context)
private final QSDetailClipper mClipper; 
MessagingService.instance().sendRR(message,target,handler,false)
LOG.d(TAG,"We have a callback to send this result to")
bitmap.getRowBytes()
shardSearchStats.onFailedFetchPhase(context)
initialCapacity > 1 << 30
LOGGER.warn("[{}] Caused by: [{}]",e.getMessage(),authnExceptions)
HashSet<String>
newDecl.isNovel()
groupVM.getIsCanEditAdministration().get() || groupVM.getIsCanDelete().get()
createLightFile("Test.java","class Test extends Type {\n}")
loaded.getLoaded().getDeclaredConstructor()
lp.width != panelWidth || lp.gravity != panelGravity
typeSettingsProperties.toString()
PokemonMetaRegistry.getHighestForFamily(getPokemonFamily())
selenium.isElementPresent("link=Control Panel")
out.writeVInt(data[0])
connection.getErrorStream()
this.callStatusLabel.setText(stateString)
new MutableDateTime(getMillis(),getZone())
from > to
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).containsOffset(offset)
LookupElementBuilder.create(expr,referencedName)
executableFlag
++cursor == 3
requestLayout()
mState.mPivotXRel != relative
labels != null && labels.isAttached()
sendMessageAtFrontOfQueue(CMD_STOP_AP)
HazelcastClient.newHazelcastClient(clientConfig)
canvas.clipPath(mRenderPath)
Long.parseLong(args[1])
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValueExact()
HashMap<String,AstyanaxKeyColumnValueStore>
StringBuilder sb=new StringBuilder("["); 
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getDeviceId(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
List<String>
new ItemStack(blockAlt,1,metaAlt)
addProperty(secondNode,"band","The Clash")
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage")
sourceIterator.batch()
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).validityChanged(arr)
setSDesEncryptionOnDescription(mediaType,description,null)
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER && child.isVisibleLw()
_lrnConf(card)
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
headerHandled=true
env.dynamicLookup(PARSE_CONTEXT)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
System.getProperty("karaf.data","karaf-data")
storeField(field,isAttributeExpression,pexp,current,visitor,receiver.getData())
this.propertyDescriptorCache.putIfAbsent(pd.getName(),pd)
@Override public Variable emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new AMD64ByteSwapOp(result,input));   return result; } 
ConstantNode[]
startMediaTimeState != START_NOT_SET
avb.getData().rewind()
parentClass.getClassName()
id=15
cache.localPeek(1)
new UnsupportedOperationException("read-only")
Http401AuthSample.class
issueUpdater.setManualSeverity((DefaultIssue)context.issue(),severity(properties),context.issueChangeContext())
mPlayer.getCurrentPosition() * 1000L
(res == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
verify(mock)
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",400,"application/xml","resources/add_book.txt",null)
ARM_LINUX_ANDROIDEABI("arm-linux-androideabi")
setImageDrawable(icon,false)
selenium.click("//li[4]/span/a/span")
styles.treeStylesCss()
createTextAttributesKey("KOTLIN_ANNOTATION",JavaHighlightingColors.ANNOTATION_NAME_ATTRIBUTES)
selenium.click("//td[2]/div/div/span[1]")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
command.getOldName()
V_5_6_10_ID=5061099
super.onResume()
isAutopopupCompletion()
assertEquals(orig.getResponse(),expectedResponse)
this.thrown.expectMessage("File must not be null")
handshake.getProtocolVersion()
new Paint()
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
new SlopStorageEngine(new InMemoryStorageEngine<ByteArray,byte[],byte[]>("slop"),3)
mAlpha.cancel()
drawable != null
pk.getColumnNameInSql()
createCurrency("LTC","Litecoin",null,"XLT")
mapper.getTypeFactory().constructType(Event.class)
Object maxIntDigits=properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
new int[297]
portletRequestDispatcher == null
DEFAULT_PERIOD_MS=60_000L
parent.decrementPrioritizableForTree0(amt)
LOG.debug("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
variables.putAll(transientVariabes)
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
height <= 0
addInactiveSubscription(subscriptionKey,info,(brokerService.isKeepDurableSubsActive() ? view.subscription : null))
!mKey.equals(other.mKey)
stmt.execute(sqlCommand)
new int[101]
expectedCountsForADoc(weights,e4Update,ind)
new TimeoutException("DNS timeout " + getTimeout() + " ms")
fill || textureImage != null
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
Assert.assertEquals(2,clusterEventListeners.size())
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,transactionSPI)
tmpMap.values()
Thread.sleep(1000)
REAL_DRIVER.quit()
new StringBuilder(740)
bc.getAsyncWriteService()
LOGGER.isDebugEnabled()
new BooleanPreference("use_step_by_step_rendering",false,false)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
scheduler.getJobNames(groupName)
ASYNC_PRODUCER_THREAD.getStackTrace()
Stream.of("CYPHER 3.1","CYPHER 3.4")
isAnyConsumerBound()
new Paint()
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(),ex)
parameter.getType()
Float.parseFloat(strings[i])
mService.reassociate(mContext.getOpPackageName())
event.getResult() != Result.ALLOWED && event.getResult() != Result.KICK_FULL
GL15.glGetBufferParameteriv(target,pname,params)
hasExtension("GL_EXT_framebuffer_blit") || caps.contains(Caps.OpenGL30)
XmppStringUtils.parseBareJid(user)
refreshList(true)
String.format(Locale.ROOT,"%-15s: %s",entry.getKey(),String.join(",",markedRoles))
DBG=false
NumberFormatException expected
((ChannelProgressivePromise)promise).tryProgress(progress,-1)
_log.warn(StringBundler.concat("Column ",columnName," in Table ",tableName," already is ",newTypeDefinition))
numErrors != 0
tnCount=70
index > widgets.length
telephony.isRinging(getOpPackageName())
ignite.services(ignite.cluster().forServers())
artifact.getId()
@RequestMapping
worker.clear()
ListWithDefault<T>
targetInfo != null && targetInfo.metaData != null
terminal.receivedSendToTerminal(event.getInputText())
metadata.getFaceRectangles()
operation == RESTORE_OPERATION || operation == BACKUP_OPERATION
new ConnectionException(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR)
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
mMccStr == null
from >= to
filterJson != null && !filterJson.isEmpty()
DiagnosticFactory0.create(WARNING)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
getPreferences().save(fos,"")
PreferenceManager.instantPictureUploadEnabled(context) || PreferenceManager.instantVideoUploadEnabled(context)
PropertyValuesAnimationAdapter<T>
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
versionDeterminer.getGccMetaData(candidate,Collections.<String>emptyList())
POLLNIVNEACH(890.0,540,13358)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
clientConfig.getRegistryFetchIntervalSeconds() * 2000
inserter.close()
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
conf.getRestBaseURL()
request.getPrincipal()
getFinalArg(args,1)
word.length() >= line_max_size
context.getBeanNamesForType(type,false,false)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
!generatePack
matchAxisFilter != 0 || wrapAxisFilter != 0
format(arguments[i],false)
this.typeDescriptorCache.putIfAbsent(pd,td)
!Files.exists(subAssetFile)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
reindex.getDefaultCollection()
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
mContext.getPackageManager().getUserBadgedIcon(icon,new UserHandle(td.userId))
intermediateArtifacts.combinedArchitectureBinary()
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
mBondState.setBondState(address.toUpperCase(),state,reason)
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
LogManager.getContext(Log4jLog.class.getClassLoader(),false)
return 5; 
connectors.put(connectorId,connector)
Log_OC.e(TAG,"Trying to open a NULL OCFile")
node.internalOrder()
application.getBaseContext()
new WitnessCapsule(ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),10_000_000L,URL)
from >= to
sm.getString("introspection.classLoadFailed",className)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
scheduleRemoveStartingWindowLocked(wtoken)
N node
new Font(edgeFontName,edgeFontStyle,edgeFontSize)
SamplingProfiler.newThreadGroupThreadSet(group)
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",new ServiceContext())
report(n,MISPLACED_ANNOTATION,"@abstract","only functions or methods can be abstract")
PsiExpressionList.class
syncOperation.delay <= 0
assertEquals(response.getStatusCode(),302)
getIEuiccController().getEid(mCardId,mContext.getOpPackageName())
telephony.isRadioOn(getOpPackageName())
awaitMessages(4,6,20000)
mPaused || !mPlaying
assertEquals(35,carEncoder.getSpeed(iter.getFlags()))
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false,1)
buildJSLoaderModulesServlet(Collections.<String,Object>singletonMap("applyVersioning",Boolean.TRUE))
id=40
r != null && r.queue == this
StringBuilder sb=new StringBuilder(32); 
patientState.getState().getUuid()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
sendKeyDown(keycode)
log.debug("Metric=[%s] has no StatsD type mapping",statsDMetric)
DEBUG=false
mgr.checkPermission(new AWTPermission("accessClipboard"))
refreshTitle()
connectedHeaders.setVersion("1.2")
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR)
buildPages.getTypesWithoutHash()
index > widgets.length
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.2f,FOLDER_NAVIGATION)
statistics.addPutTimeNanos(System.nanoTime() - start)
field.createField(fieldType.indexedToReadable(indexedValue),1.0f)
mUiHandler.removeCallbacks(pae)
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
Integer.parseInt(nextArgRequired())
Throwable e
length <= 0
Throwable e
mService.mAppTransition.isTransitionSet()
assertEvaluate(buildFile).moduleLookup("txts")
icon.setVisibilityImmediate(visible ? VISIBLE : GONE)
hours >= 2 || (hours > 0 && minutes == 0)
evaluate(123.5f,DataTypes.FLOAT)
type.getDeclaredConstructor()
viewStateIndex|=VIEW_STATE_SELECTED
scheme.equals("tel") || scheme.equals("sip")
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
mSyncStatus.valueAt(i)
EstimatedHistogram.serializer.serialize(columnnCounts,out)
((-3 * t + 4) * t + 1) * t / 2.0
1
speed=4.2f
e.toString()
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
LOG.info("recovered from " + StringUtils.stringifyException(e))
i <= 1
Simple.forClass(Integer.class)
new TestResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
r.getUri().getPath()
popupWindow.setContentWidth(menuWidth)
OPERAND_BUNDLE
compressed.limit()
tw.close()
LogAdapter.createLog(name)
selenium.isElementPresent("link=Control Panel")
inserter.close()
isInputViewShown()
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
LOG.trace("data:" + StringUtils.byteToHexString(data))
conf.getRestBaseURL()
editor.getColorsScheme().getAttributes(diffAttributeKey).getErrorStripeColor()
schemeSpecificParts != null && data != null
sourceSet.getOutput()
orig.getGenericsTypes()
cluster.setWifiIndicators(mWifiConnected,mWifiIconId,mWifiActivityIconId)
LOG.debug(msg,e)
!disableBluetoothContactSharing
maxSize < (used / 1024 / 1024)
searcher.get().getRawReader()
new ObjectMapper().readerFor(DiskBalancerCluster.class)
four.setAxisIndex(LEAF)
getAncestors()
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin application project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).plugin("Apply the application to add support for building a CLI application","application").implementationDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
e.toString()
checkCall(receiver)
assertEquals(CodecFactory.deflateCodec(i).toString(),serdeC.getCodec().toString())
callerPackage == null
Thread.sleep(1000)
new IllegalStateException("Advertising can't be both connectable and scannable")
mBackdrop.animate().alpha(0.002f)
destinations[i].getPhysicalName()
restRequestData.params.getPostBody()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
Math.min(size,layoutParams.height)
masm.cas(size,result,newVal,address,true,true)
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
System.out.println()
clipItem.coerceToText(mContext)
domain == null ? 0 : domain.length
mUiHandler.removeCallbacks(pae)
XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),parser::getTokenLocation)
filename.endsWith(ext)
Utils.writeUtf8File(outputDirectory,getFileName(cls),xsb.toXML())
ret.setComplete(response)
profile.getActiveRules(true)
qname.equals(CommonClassNames.JAVA_LANG_STRING)
state.getTypes().isSubtype(argType,jUnit4ClassRunnerType)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
Trans != NO_TRANSPOSE
from >= to
lp.resolveLayoutDirection(layoutDirection)
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
handleDnsConfigurationChange(usedNetworkType)
selenium.isElementPresent("link=Control Panel")
dest.writeInt(mSubId)
dir.isDirectory() && !"target".equals(dir.getName()) && !dir.getName().startsWith(".")
return long_TYPE; 
Object key
public Variable emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   AMD64AddressValue addressValue=asAddressValue(address);   RegisterValue raxRes=AMD64.rax.asValue(kind);   emitMove(raxRes,expectedValue);   append(new CompareAndSwapOp(memKind,raxRes,addressValue,raxRes,asAllocatable(newValue)));   assert trueValue.getLIRKind().equals(falseValue.getLIRKind());   Variable result=newVariable(trueValue.getLIRKind());   append(new CondMoveOp(result,Condition.EQ,asAllocatable(trueValue),falseValue));   return result; } 
StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))
index.getUUID()
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
new GroupPartitionId(grpId,partId)
intervalFraction * (nextValue - prevValue)
new IllegalArgumentException(e)
value.toString().getBytes(StandardCharsets.UTF_16BE)
ActivitySample[]
mParent == null
selenium.isElementPresent("link=Control Panel")
entry.notification.cloneLight()
assertEquals(0.2087662734069947,mses[i],1e-4)
apk.getUrl()
onCreateView(context,appWidgetId,appWidget)
dest.writeInt(txPower)
new CountryListLoadTask(null,null,mListener)
final Exception e
resp.setHeader("Access-Control-Allow-Credentials",credentials)
service.handlePinMmiForPhoneAccount(accountHandle,dialString,mContext.getOpPackageName())
i < totalReplyTo
users.get(j)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
locationUriNode.text()
myExprType != null
a.getString(attr)
Integer.parseInt(listenPort)
value + MINIMUM_BACKLIGHT
javaWriter.emitSingleLineComment("foo")
addIndices(indices)
sampleFactory.getDeclaredConstructor()
new RuntimeException(e)
logger.warn("Failed to enumerate network interfaces",e)
DnDSupport.createBuilder(myViewPanel)
selenium.isElementPresent("link=Control Panel")
headers.keySet().iterator()
UserLocalServiceUtil.getUserById(userId)
Timber.e(e,"Argument %s is incorrect",playBackgroundColorString)
logger.info("Using folder " + checkPointFolderFile + " for storing checkpoints")
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
store.setZkSessionTimeout("15s")
mGridView != null && mGridView.getNumColumns() > maxColumnSize
IconGenerator.generateLauncherIconPreOreo(context,engineName.charAt(0))
getFullName()
OsmandPlugin.isDevelopment() && res.getRoutingTime() != 0f
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
!fadeScrollBars && scrollbarsOnTop && scrollX
trade.getType().equalsIgnoreCase("buy")
new CompilerTask(project,"Android auto-generation",true,false,true)
dbText.getText()
st.setNCharacterStream(name,characterStream.asReader(),characterStream.getLength())
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
vertx.createHttpServer().requestHandler(req -> {   req.response().putHeader("content-type","text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>"); } ).listen(8080)
possibleCenters.elementAt(i)
stopwatch.elapsed(MILLISECONDS)
i=0
String TAG="Omni Notes"; 
lastPos > mBoundPos
type.getDeclaredConstructor()
ssl.hasDefined(CommonAttributes.PROTOCOL)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
expected == int.class || expected == Integer.class
log.logError(BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
ENABLE_APK_ASSETS_CACHE=false
15 * 60 * 1000
VoiceInteractionManagerServiceStub.this
showedPlugins.get(i)
getCurrentTab().handleDiscourseCopy()
myProject.isDisposed() || !myVirtualFile.isValid()
nextTokenIs(b,IDENTIFIER)
ContainerUtil.newHashSet("<br>","</br>","<br/>","<p>","</p>","<p/>","<pre>","</pre>")
new IndexShardRoutingTable.Builder(new ShardId(indexName,0))
List<String>
resp.setHeader("Access-Control-Allow-Origin",origin)
(AgendaEventListener)this
Bytes.toBytes(regionname)
new IllegalStateException("Wrong header information type: " + fieldsFromHeader)
new AndroidBinaryNonExoInstaller(buildTarget,projectFilesystem,installableApk)
DBG=true
b == null || b.length == 0
lbHttpSolrServer.setAliveCheckInterval(1000)
targetInfo != null && targetInfo.metaData != null
Slog.w(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
csFoldingEnabled.getSelection()
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
mDarkIntensity != DARK_INTENSITY_NOT_SET
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0)
TYPE_ATSC_M_H=0x00030300
amfOut.getByteArrayOut().writeTo(out)
ZLAndroidLibrary.Instance()
i == 0 && (post.blog.isFullSizeImage() == false && !post.blog.isScaledImage()) || post.blog.getMaxImageWidth().equals("Original Size")
selenium.isElementPresent("link=Control Panel")
primitiveType != null || arrayComponentType != null
node1.isEquivalentTo(node2)
setValue(object,value.intValue())
GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))
Matrix.multiplyMM(m,0,mTmp,0,matrix.getDoubleValues(),0)
IR.thisNode()
mFrameSlots.remove(name)
GL20.glUniform1iv(location,toIntBuffer(v,offset,count))
@Mock private PanProfile mPanProfile; 
CommonUtils.randomAlphaNumString(random.nextInt(10))
mSyncStatus.valueAt(i)
location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
encoding == null
CompilationAlarm.trackCompilationPeriod(options)
_relanuchCounter >= maxRelaunch
1024 * 1024 * 15
n <= who3d.lastVertex
INTERRUPTION_THRESHOLD=10
mMenu.getNonActionItems()
result.setAttributePrefix("")
RepositoryDirectoryUI.getTreeWithNames(newCat,rep,dircolor,sortColumn,includeDeleted,ascending,true,false,directoryTree,null,null)
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
IllegalStateException e
users.toArray(new String[users.size()])
routes.BuffersResource()
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
file.getPath()
c.getLiquid() != null && c.getLiquid().amount != 0
Log_OC.e(TAG,"Unhandled conflict decision " + decision)
put("1.7",CompilerOptions_VERSION_1_7)
container.getAttributeModel().getEdgeTable()
gateway.sendAndReceive(requestMessage)
enabledVariants[i].height
type.getDeclaredConstructor()
return ES8_MODULES; 
attributes.getFloat(R.styleable.ArcProgress_arc_angle,default_arc_angle)
mInner.cancel()
(ChronicleEngineEndpoint)getEndpoint()
param.args[0]
w.println(paddingText)
fragment.dismissAllowingStateLoss()
entry.getCheckName().equalsIgnoreCase(checkAlias)
RequestContextHolder.getRequestAttributes()
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id,background,foreground)
mCanSeekBack=mCanSeekForward=true
realm.checkIfValid()
Exception e
super.performAccessibilityActionInternal(action,arguments)
r.curApp != null && r.curApp.curReceiver == r
dir.listFiles(fileFilter)
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
ktBFile.getName()
String rootName
_log.warn(ioe,ioe)
this.messageService.monoPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
new Long(94)
Long tillId
SearchListFragment.newInstance(s)
selenium.click("//li[4]/span/a/span")
initialCapacity > 1 << 30
mAuthorities.valueAt(i)
createCurrency("BTG","Bitcoin Gold",null)
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
mWM.isKeyguardLocked()
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN,new UserHandle(mUserHandle))
create.fetch(meta().getCatalogs(),SQLDataType.VARCHAR)
intervalFraction * (nextValue - prevValue)
data.remaining()
Sets.<Long>newHashSet()
Thread.sleep(130)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
cache1.getAndRemove(1)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
new CountDownLatch(2)
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).doAfterTerminate(() -> commentIsPosting.onNext(false))
new Paint(Paint.ANTI_ALIAS_FLAG)
!condition.isEmpty()
mStartDelay == 0 || mSeekFraction >= 0
Object message=messageObj.get("d"); 
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
endTracksTo("main")
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
assertEquals(11,beanCount)
groupCombo.setSelectedItem(metaContact.getParentMetaContactGroup())
author.getIsChatModerator()
codeItem.getOffset()
logger.info("defineClass pluginClass:{} cl:{}",className,classLoader)
(Double)x
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
Integer.parseInt(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
mGnssCallback != null
view == null
WordPress.getCurrentBlog().getLocalTableBlogId()
_buildTemplateWithGradle("mvc-portlet","mvc-dependency-management","--dependency-management-enabled")
assertFalse(CompressionTest.testCompression("SNAPPY"))
insets.left != 0
ENABLED.get()
Assert.assertSame(_ehcache,_ehcachePortalCache.ehcache)
selenium.isElementPresent("link=Control Panel")
edge.getDownNode()
WebDriverHelper.setTimeoutImplicit(this,timeout)
PropertyValuesAnimationAdapter<T>
readWifiSleepPolicy()
toolWindow != null && toolWindow.getType() != ToolWindowType.SLIDING
namedScope != null && myTools != null
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public void onContextMenuClick(  int itemId,  int pos,  boolean isChecked,  DialogInterface dialog){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }   } } ).position(7)
table.outerJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
TransitiveInfoCollection.class
account.getId()
DaggerAutoFactoryProcessorComponent.builder()
hostsInPool.incrementAndGet()
SmackConfiguration.getVersion()
postVisitColumnDefinition(each,statement,column.getName())
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).descriptionAndTooltip(message)
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
event.getEffectiveTransitionTime()
keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE
FieldStringEditor cse=new FieldStringEditor(); 
DEFAULT_ALLOW_REPEAT_CALLERS=true
OptionalIdentifiedDefinition<Type>
Window.<Integer>into(new GlobalWindows()).triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1))).accumulatingFiredPanes().withAllowedLateness(new Duration(0),ClosingBehavior.FIRE_ALWAYS)
mapper.getTypeFactory().constructType(AuthConfig.class)
_portal.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
new SummariserRunningSample("TOTAL")
parcel.readString()
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .start()
GitFileUtils.delete(project,root,removed,"--ignore-unmatch","--cached")
Log.debug(this + " Busy selector - injecting delay " + _paused+ " times")
ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
!results.containsKey(beanName) && findAnnotationOnBean(beanName,annotationType) != null
selenium.isElementPresent("link=Control Panel")
hasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)
start.expectedMessageCount(7)
private static final HBaseConfiguration config=new HBaseConfiguration(); 
DynamicCounter.increment(filterName,"status","fail","type",filter.filterType())
this.spiceServiceListenerSet.remove(spiceServiceServiceListener)
mFiles.indexOf(file)
new TextPaint()
_connector.getResponse("GET /foo HTTP/1.1\n\n")
new ConstraintIndexCreator(() -> kernel,indexingService,propertyAccessor)
logger.verbose("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
type.getDeclaredConstructor()
assertNotNull(stubTree)
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
if (VDBG) loge("Exception trying to remove a route: " + e); 
new MediaController(mContext,token)
rootSaveDir.mkdirs()
reducer.getKeyColumns()
new CancelJobSupervisorOperation(name,jobId)
Objects.requireNonNull(value,"value should not be null")
templatesToAddressList(engine,cc,model)
selenium.isElementPresent("link=Control Panel")
timeoutMs=1000
platformVersion < M
position >= 0 && mExpanded
selenium.isElementPresent("link=Control Panel")
module.getOwnExcludes()
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",subMeta.getName(),realSubStepName)
updateChildren()
selenium.isElementPresent("link=Control Panel")
!mKey.equals(other.mKey)
return GCM; 
SHUTDOWN_VIBRATE_MS > 0 && context != null
rhs.getScore()
ERROR_MARGIN=100
position.getValid()
mState == StatusBarState.SHADE_LOCKED && !isCollapsing()
!isSuccess
ret=false
addProperty(secondNode,"band","The Clash")
this.thrown.expectMessage("File must exist")
current.getUnresolvedSuperClass()
scrollWebElementIntoView(webElement)
event.getRawY()
DEBUG=false
TextUtils.isEmpty(title)
Transaction g
public abstract Number execute(); 
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0)
new int[15120]
localLOGV || false
Log.w(mTag,"Adjusting remote volume without a controller!")
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
LOG.debug("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
key.equals("authmechanismproperties")
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
new Message("XML_STREAM_EXC",LOG,e.getMessage())
Exception e
viewCache.getObject(monitor,this,name,DB2View.class)
entry.key == k || (entry.key != null && k != null && k.equalsIgnoreCase(entry.key))
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
"Using bind address: " + bindAddress
ExternalSystemModulePropertyManager.getInstance(module).setExternalModuleType(GradleConstants.GRADLE_SOURCE_SET_MODULE_TYPE_KEY)
wms.getGeoServer().getGlobal()
mMat[5]
times(1)
entry.getValue().accessibleNodeLabels
mRemote.transact(REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
new JButton(acceptString.getText())
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
value == null || value.size() == 0
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
historyRoot.mkdirs()
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
Build.VERSION.SDK_INT > 14
typeSwitch.keySuccessor(i) == beginNode
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
Throwable e
ret=false
return false; 
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
from >= to
getString(R.string.day_night_info_description,"null","null")
MimeTypes.TEXT_VTT.equals(hlsUrl.format.sampleMimeType) || lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION) || lastPathSegment.endsWith(VTT_FILE_EXTENSION)
new IllegalStateException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d(%3$s)",aFileName,lineNumber,line))
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
Log_OC.e(TAG,"Unhandled conflict decision " + decision)
Integer.class
mAimsicdService.getCellTracker().updateNeighboringCells()
maxWait=10
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
appName != null && searchManager.getSearchableInfo(appName) != null
readIdentifierWithSchema(schema.getName())
setAudioSystem(AUDIO_SYSTEM_PORTAUDIO,null,false)
node == null || v == node.view
origKey + 100
test("MissingAuthor.testjava","Missing author",20)
parent instanceof AppWidgetHostView || parent == null
selenium.isElementPresent("link=Control Panel")
checkCall(receiver)
retries=1
DEBUG=false
Math.min(desired,heightSize)
method.getReturnType().getName()
hasSetter=true
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
sentiment.getScore()
RandomStringUtils.randomAlphanumeric(50)
WordPress.getCurrentBlog().getLocalTableBlogId()
etp.setSummary(etp.getText())
redisson.<Long>getBucket("executed1")
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Cheese.class
Throwable e
mMccStr == null
mObsoleteAgents.valueAt(i)
Preferences.navigationVibrationEnabled(context)
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()),e)
selenium.isElementPresent("link=Control Panel")
mUiHandler.removeCallbacks(pae)
writer.writeUshort(getReferenceIndex(instruction))
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
new Boundary(true)
json.getJSONArray("roles")
TypeMirror maybeWildcardType
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
new KillableColoredProcessHandler(finalCommandLine,true){   @Override public void startNotify(){     if (myShowGoEnvVariables) {       GoRunUtil.printGoEnvVariables(finalCommandLine,this);     }     super.startNotify();   } } 
resultEndpoint.expectedMinimumMessageCount(2)
DEPENDENCY_FORMAT_VERSION=47
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
checkCall(receiver)
date(3908,10,12)
@Nullable Id getCommitToJump(); 
fragment == null || !fragment.isVisible() || isFinishing()
place == null || aClass == null
{4,5,5,11,6,5,7,7,11,11}
"abcdefghijklmnop".getBytes("UTF-8")
blog.getLocalTableBlogId()
qux.getDeclaredConstructor()
loaded.getLoaded().getDeclaredConstructor()
assertFalse(jmsTemplate.isPubSubDomain())
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
UnsupportedOperationException ex
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
DEBUG_RC=false
acquiredChannelCount < maxConnections
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword())
scanFlags & SCAN_REQUIRE_KNOWN
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
c <= 'Z'
data + end
targetInfo != null && targetInfo.metaData != null
j.getConfiguration().get("pig.job.converted.fetch","").equals("") && j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
LOG.warn("delete failed: {}",e.getMessage())
account.getId()
indexFile.isFile()
selenium.isElementPresent("link=Control Panel")
TelephonyManager.getDefault().getCurrentPhoneType()
checkCall(receiver)
onPackageDisappeared(pkgList[i],mChangeType)
syncMessage == null || syncMessage.length() == 0
DEBUG && heightIn != height
Results.forbidden()
Exception e
this.getFieldValue().orElse(null)
reader.maxDoc()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
typeSettingsProperties.toSortedString()
telephony.isRadioOn(getOpPackageName())
logger.fine(String.format("connect attempt timed out after %d",timeout))
return true; 
performDexOpt(packageName,instructionSet,false)
loaded.getLoaded().getDeclaredConstructor()
n.longValue()
LinkageError e
p == null || t < -1
UpgradeStepRegistrator.class
e.toString()
parent.getExactOverriddenJoinTable(propertyName)
in.markReaderIndex().readByte()
g.cachesx()
JSChangeSignatureDialog.buildParameterListText(Arrays.asList(myParameters),newConstuctorText,DialectDetector.dialectOfElement(jsClass))
MethodFlatteningResolver methodFlatteningResolver
fileNode != null && fileNode.dexVersion >= DexConstants.DEX_037
return true; 
invocation.addAttachments(context)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
format(arg,false)
server1.getStoreRepository().getStorageEngine(storeName)
new MultiValuesMap<PsiVariable,PsiExpression>(true)
public LinearLayout llName; 
ViewConfiguration.getMultiPressTimeout()
mVectorState == null || mVectorState.mVPathRenderer == null
index > widgets.length
dest.writeInt(txPower)
lock.isHeldByCurrentThread()
TelephonyManager.getDefault().getCurrentPhoneType()
XmppStringUtils.parseBareJid(userJID)
v.isString() && meta.isEnclosureForced() && !meta.isPadded()
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
deltaY <= 0
logger.debug("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
new RedissonSession(keyPrefix,id)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
mValues[8]
subCursor.getString(COLUMN_NAME)
manager.disable(keyId)
simple.getToSentDate()
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
addSourcesAndHeadersBuildPhases(target,targetGroup,buildable.getSrcs(),buildable.getPerFileFlags())
ModelReference.of("serviceRegistry",ServiceRegistry.class)
mQsDensityContainer.getLayoutParams()
fileService.getResource(getResourcePath(versionedBundleName))
result.getPlatformKind()
model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
Assert.assertEquals(120L,ownerCapsuleNew.getFreeNetUsage())
verify(instrumentation,times(2)).isRedefineClassesSupported()
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
MIN_NET_ID=100
LdapUtils.getFullDn(dn,ctx).toString()
net.feedForward(new INDArray[]{in,decode},false,false)
mWM.isKeyguardLocked()
Arrays.asList(MaterialColor.PLUM,MaterialColor.CRIMSON,MaterialColor.VERMILLION,MaterialColor.VIOLET,MaterialColor.BLUE,MaterialColor.INDIGO,MaterialColor.FOREST,MaterialColor.WINTERGREEN,MaterialColor.TEAL,MaterialColor.BURLAP,MaterialColor.TAUPE)
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
nextValue >= 0x40
rowKeyColumnIO.writeColumnWithoutDictionary(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
format(conf,false)
Strings.isNullOrBlank(password)
EPS_THRESHOLD=1e-5
param.args.length > 0 && param.thisObject instanceof WebView
createFromResourceStream(res,value,is,srcName,null)
waitYieldLatch.await()
this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadFile.Null"))
FileEntry.class
new IndexWriter(ram,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
/**   * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is smaller than the amount of data read after the mark position.  */ public static class InvalidMarkException extends IOException {   private static final long serialVersionUID=-4338378848813561757L;   public InvalidMarkException(  String detailMessage){     super(detailMessage);   } } 
parser.parseLight(GroovyElementTypes.GROOVY_FILE,builder)
selenium.isElementPresent("link=Control Panel")
new RoutingControlAction(this,newPath,true,callback)
initialCapacity > 1 << 30
!mShowLockscreenNotifications
mGoogleApiConnectionTask.trySetException(new ConnectException(result.toString()))
metaClass.pickMethod(name,arguments)
DocumentationManager.storeOriginalElement(project,originalElement,element)
checkpointPath.toString()
!mShowLockscreenNotifications
mpline == null || !mpline.contains(boundary)
out.writeData(function)
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
id=18
TelephonyManager.getDefault().getCurrentPhoneType()
mapTypeStringTransparency=R.string.overlay_transparency
Long.parseLong(id)
near.getAndRemove(1)
UnsupportedTypeException.raise(ex,arguments)
getConnection().setInstanceFollowRedirects(followRedirects)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
res.getString(R.string.data_usage_warning_body)
parameters == null || parameters.length == 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).descriptionAndTooltip(message)
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)&& !mMimeType.equalsIgnoreCase("application/xhtml+xml")
clickOnWebElement(by,match)
result.getPlatformKind()
null == reference
peer.getSyncBlockToFetch().size() <= NodeConstant.SYNC_FETCH_BATCH_NUM
dst.remaining()
mLteSignalStrength > 31
user.getUserId()
rhs.getScore()
i >= speedBumpIndex
onJava11()
h2 || h2c || ajp|| h2cUpgrade
(maxValue - minValue) >= 0
JNIDecoder.matches(in,inputFormats)
!useDisplayListProperties
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
postVisitColumnDefinition(each,statement,column.getName())
userRecord != null && userRecord.mClientRecords != null
LOGGER.warn("Unable to process JSON",exception)
selenium.isElementPresent("link=Control Panel")
jvmOptions.jvmArgs(DEFAULT_JVM_ARGS)
log.debug("Null primary key column for '" + object.getName() + "'")
log.error("Unable to initialize AuthorizationBackend {} due to {}",ad,e.toString(),e)
selenium.click("//li[4]/span/a/span")
promise.trySuccess()
typeDescription.represents(void.class)
16 * height
CollectionUtils.isEmpty(elements)
AMQ3732Test.class
this.mTitle.compareToIgnoreCase(another.mTitle)
mDataAuthorities == null || data == null
PublisherPeek<T>
Ignition.start("examples/config/example-ignite.xml")
"com.android.browser".equals(browserPackageName) || "com.android.chrome".equals(browserPackageName)
factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)
metaContact.getDisplayName().contains(queryString)
super(defaultStore,persistentPropertiesSource,auditedPropertiesHolder,globalCfg,reflectionManager,propertyNamePrefix); 
inputItems.length > index
myTypeChecker.checkExpressionIsAssignableToType(arguments[0],BOOLEAN_CLASS_NAME,"javascript.argument.type.mismatch",null,false)
@Override public S fillFromImpl(ModelMetricsRegression modelMetrics){   super.fillFromImpl(modelMetrics);   r2=modelMetrics.r2();   return this; } 
Long.parseLong(value)
instruction.getWideLiteral()
LOG.debug("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
hl[]
new FileSystemWebDavServer(nioFileSystem())
targetType.getDeclaredConstructor()
typeSettingsProperties.toSortedString()
PlatformTestCase.autodetectPlatformPrefix()
this.dataCoding
defaultDndAccess != null
new ArrayList<>(27)
previousParameterName.compareToIgnoreCase(parameterName)
ConcurrentHashMap<String,Counter>
className.lastIndexOf("org.openmrs.")
v3.getString()
branch.hasOperands()
!regex.equals(lastRegex) || p == null
value == Short.MAX_VALUE
mService.setAppPolicy(UID_A,POLICY_NONE)
mBindingServices.isEmpty()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
program.stackPop().intValueSafe()
getJSONValue(activity.getExtraData(),"title",kbArticle.getTitle())
logger.warn("license [{}] - grace",license.uid())
selenium.isElementPresent("link=Control Panel")
Exception e
BackupManagerServiceInterface svc=mService; 
generateFluentSetters()
in.getDepth() >= outerDepth
addView(root,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
uri != null
data.split("\\s*,\\s*",-1)
cc.getLazy()
!isPartialUpdate || id.views == null
@JsonProperty(POSITION_FIELD)
cachedDevice != null && cachedDevice.getName() != null
@Override public final DivideByOnConditionStep or(String sql,QueryPart... parts){   return or(condition(sql,parts)); } 
new SkylarkTest("--incompatible_disallow_dict_plus=false")
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
super.onDetachedFromWindow()
t.getDeclaredConstructors()
imeWin.getFrameLw()
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
cf.getLocalDeletionTime() < gcBefore
from > to
ScanResult.is5GHz(frequency)
@Override protected CDATA setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
selenium.isElementPresent("link=Control Panel")
service.cancelMissedCallsNotification(mContext.getOpPackageName())
case SEND_STATUS: 
chatRoomsList.add(chatRoomID)
validator.error("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
Java6Assertions.assertThat(mountedSubComponents).containsExactly(subComponents)
EnumSet.of(UpdateTask.TAGS,UpdateTask.FOLLOWED_BLOGS,UpdateTask.RECOMMENDED_BLOGS)
bundledResourcesDir == null || !bundledResourcesDir.isDirectory()
FRAME_STATS_COUNT=16
new DefaultQueryOptions(consistency,values,false,SpecificOptions.DEFAULT,3)
animData == null || skeleton == null
selenium.isElementPresent("link=Control Panel")
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
jobsLogs.operationsLog()
fb.limit()
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
CoreMatchers.anyOf(is(NestedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedTypeVariableType<T>$Placeholder"),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest" + ".net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedTypeVariableType<T>.Placeholder"))
keyCode == KeyEvent.VK_ALT || keyCode == 0
metastore.getHost()
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
routeList == null || routeList.isEmpty()
type.getName()
RequestContext.create(ksession.getClass().getClassLoader())
wizardModel.databaseConnection.contains("localhost") || wizardModel.databaseConnection.contains("127.0.0.1")
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
tracesDir.mkdirs()
USE_MACOSX_CALAYERS=false
System.out.printf(Locale.ROOT,"na.setNode(%d, %f, %f);\n",node,na.getLat(node),na.getLon(node))
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0 && mInstaller != null
file.getPath()
selenium.isElementPresent("link=Control Panel")
testLogger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
response.getContentAsByteArray()
mState != STATE_INITIALIZED
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
tableIdx == table.array.length() && tableIterator == null
new byte[20]
formatTimeMs(fullWifiLockOnTime / 1000)
BACKGROUND_DEXOPT_JOB=800
SecurityActions.getModuleClassLoader(module)
obtainMessage(MSG_TIMEOUT,state,0)
targetDatabase.getObjectQuotingStrategy()
type.isEmpty()
new JsonUtf8Writer(buffer)
FileUtil.loadFile(new File(testFileName),true)
exchFut.discoveryEvent().eventNode()
Session.getDefaultInstance(prop,null)
serviceDataUuid == null || mServiceData == null
Slog.w(TAG,"Session failed to close due to remote exception",e)
mConnectionById.containsKey(callId)
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(1000)
new IterableAlgorithmRunner(blockScanner)
Lists.newCopyOnWriteArrayList()
out.writeByte(ANNOTATION_CONSTANT_TAG)
mono.switchIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
offView.setClearFlags(true,true,true)
getQualifiedName() != AbstractName.NO_NAME
LOG.info("Failed to read expected encryption handshake from client " + "at " + peer.getRemoteAddressString() + ". Perhaps the client "+ "is running an older version of Hadoop which does not support "+ "encryption",imne)
random()
myCredentialsMap.containsKey(scope) || quietly
userInfo.getWebsite()
searchAutoCompleter.addBibtexEntry(entry)
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
SHOW_ON_APP_LAUNCH=2
treeStyles.treeStylesCss()
TelephonyManager.getDefault().getCurrentPhoneType()
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
SIPCommCheckBox formatPhoneNumber=new SIPCommCheckBox("",ConfigurationManager.isNormalizePhoneNumber()); 
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
selenium.isElementPresent("link=Control Panel")
offsets == null || offsets.get(offsets.size() - 1) >= text.length()
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
poList[2]
Exception e
ps.setNString(i,parameter)
atan(arr,Nd4j.copyOnOps)
SessionErrors.add(actionRequest,e.getClass().getName(),e)
XmppStringUtils.parseBareJid(local)
selenium.isElementPresent("link=Control Panel")
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)
new StringBuilder(238)
value.longLongValue()
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
scale(im,w,h)
mOuterRadius * 0.9f
tessellator.tessellatePolygon(true,close,true)
vb.getData().limit()
i < 100
random().nextInt(10)
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
new INodeDirectory(srcChild,false)
case 6: 
period >= MINIMAL_POLL_PERIOD
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
super.dismiss()
position - 1 >= 0
portlet.getPortletId()
cctx.wal() != null && !writeEntries().isEmpty()
Exception e
spaceProperty.getMinSpaces() >= 0 && getTotalSpaces() < spaceProperty.getMinSpaces()
CollectionUtils.isNotEmpty(blocks)
checkCall(receiver)
mAuthorities.valueAt(i)
plugin != null && !plugin.isBasePlugin()
dest.writeInt(mSubId)
((Element)iter.next()).getText()
MAX_BATCH_SIZE=250
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,newDeviceState,prevDeviceState)
transportRoutingHelper.getStartLocation()
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new FileInputStream(engineSocket.getFileDescriptor(),true)
mAttributes.getAllFlags()
endpoint.getOrCreateConnectionFactory()
mapper.writeValueAsBytes(segment)
app.info.targetSdkVersion >= targetSdkVersion
readSuspendablesFile(suspendablesFileName,suspendables,suspendableClasses)
SHUTDOWN_VIBRATE_MS > 0 && context != null
getHost()
currentFile.getPath()
messageJournalEnabled=true
type.getDeclaredConstructor()
mSyncStatus.valueAt(i)
resourceTableStream.readFully(tableBytes,0,(int)alignedSize)
stackIterator.remove()
Key.class.getName()
viewToClick != null && viewToClick.isAttachedToWindow()
remaining == 0
WordPress.getCurrentBlog().getLocalTableBlogId()
id=10872
implementation != null && instanceMethod.getDeclaringClass() == implementation.getClass()
removeQuotes(timestring.trim())
mMccStr == null
SchedulerFactory.singleton().createOrGetFIFOScheduler(PythonInterpreter.class.getName() + this.hashCode())
Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION))
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",featuresConfig.isLegacyOrderBy(),false)
ImmutableList.of(bang,qmark)
libraryBottomDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
/**   */ private final LongAdder8 mapSize=new LongAdder8(); 
arguments.setSourceMapBaseDirs(sourceMapSourceRoots.toString())
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
((Scorecard)serializable).getUseReasonCodes()
oldStatus != null && oldStatus == status
NoteDrawerCategoryAdapterViewHolder holder; 
selenium.isElementPresent("link=Control Panel")
setValue(object,value.intValue())
new IllegalStateException("The dataflow failed.")
values.put(Document.COLUMN_ICON,R.drawable.ic_root_mtp)
new MediaSize("UNKNOWN_PORTRAIT","android",R.string.mediasize_unknown_portrait,1,Integer.MAX_VALUE)
Map<RealmObject,RealmObject>
T existingStagedModel=stagedModelRepository.fetchStagedModelByUuidAndGroupId(uuid,groupId); 
prjFile.getParent()
workspaceMgr.dup(ArrayType.ACTIVATION_GRAD,epsilon)
file.getFile()
new CompoundShelfFileProcessor(new StreamProvider[]{},PathManager.getConfigPath() + File.separator + "shelf")
font.getName()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
System.getenv(Tokens.FAUNUS_HOME)
raw.getOutParameters()
descrTextView.setTextColor(color)
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
mJobs.valueAt(i)
Log.w(TAG,e.getMessage(),e)
cluster.restartDataNode(dnIdxToDie)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
id.getType()
temp_descs.get(j)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
ks.newKieClasspathContainer()
IllegalArgumentException e
LOG.warn("register druid-driver mbean error",ex)
new InfoData(null,InfoData.NOT_AWAY,MY_CAPS,null)
DEBUG=false
Exception ex
backgroundColor=0xffCCCCCC
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
e.toString()
resourceInfo.getServiceClass()
IllegalArgumentException e
Integer.parseInt(taskIdStr)
assertEquals(2,unindexedFieldNames.size())
message.processMessage(null)
serversByLoad.firstKey()
log.i(LOG_TAG,"ACRA processName='" + processName + "'")
xtw.writeCData(customProperty.getSimpleValue())
itemRenderer.func_82406_b(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
new StringBuilder(246)
prj0.getAndPutIfAbsent(i,i * i)
buildInitPendingIntent(vol)
m.getDeclaringClass()
new IndexWriter(directory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
setupRhino("dlw-service-endpoint","/org/apache/cxf/javascript/DocLitWrappedTests.js",true)
constructor.getParameterTypes()
context.var("double",2)
formatCommand(command,"SA200CMD;{%s};0{%s};Enable{%s}\r",Command.KEY_UNIQUE_ID,Command.KEY_DATA,Command.KEY_DATA)
mImm.setInputMethodInternal(mToken,id)
timeout(10000)
wifiConfig == null || wifiConfig.isValid()
platformVersion < M
doneAdvance(mark(),KEY)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
RecentProjectsManager.getInstance().getRecentProjectsActions(true)
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null,null)
colors.getThemeAttributeId(i,0)
selenium.isElementPresent("link=Control Panel")
apacheHttpClient.sendRequest(httpRequest,false)
converter.tryConvertTo(leftValue.getClass(),rightValue)
selenium.isElementPresent("link=Control Panel")
new ColorUIResource(0x232324)
mChildrenExpanded ? mDividerHeight : mChildPadding
error || status == SocketStatus.STOP
IllegalArgumentException.class
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
new BTreeMap<K,Object>(engine,nodeSize,false,false,defaultSerializer,serializer,null,comparator)
new EntityTrackerInfo(mod,ID,range,updateFrequency,sendVelocityInfo)
(flags & 0x20) != 0
Math.round((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
new OptionKey<>(false)
actionAdapter.execute(null,null,null)
Assert.assertEquals(3,json.size())
new byte[12]
VoiceInteractionManagerServiceStub.this
ServiceContextThreadLocal.getServiceContext()
hashSymbols.values()
ExecutionStrategyParameters parameters
mUserManagerHelper.getAllUsers()
!mStatus.showStatusLines() || (mCharging == null && mNextAlarm == null)
!isCancelled0(result)
new HTTPArgument(getArgumentName(),value,true)
out.writeInt(sampleCount)
DefaultCacheKeysFactory.staticCreateNaturalIdKey(naturalIdValues,persister,session)
UI_MODE_SERVICE.equals(name)
child.resetRtlProperties()
dynamicType.getDeclaredConstructor()
SLEEP_TIME=1500
mService.mAppOps.noteOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
new ModelNode().set(17500L)
cancelHardwareAnimations(true)
this.aliasToCTEs.containsKey(tabIdName)
location.getRawSchemeSpecificPart()
state.isAlive()
drawable.getIntrinsicHeight()
List<Fragment>
last.getContext()
new MaterialDialog.Builder(getActivity()).title(R.string.reschedule_card_dialog_title).positiveText(getResources().getString(R.string.dialog_ok)).negativeText(R.string.cancel).inputType(InputType.TYPE_CLASS_NUMBER).inputRange(1,4)
ImmutableMap.of("CHECK_THIS_VARIABLE","1","PATH",System.getenv("PATH"))
return false; 
Exception e
expectedClockTime - 1000
((AstridActivity)getActivity()).onFilterItemClicked(newFilter)
incomingMessage.setTransactionCanceled(true)
world.scheduleUpdate(pos,state.getBlock(),state.getBlock().tickRate(world))
result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())
Long.parseLong(value)
internalCluster().getDataNodeInstance(SystemCollectSource.class)
buildVersion=5
any()
loaded.getLoaded().getDeclaredConstructor()
Strings.splitStringByCommaToArray(Util.expr2Object(sqlExpr.getRight()).toString())
serviceLocalException(new Throwable("remoteBrokerInfo is null"))
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName()) || binding instanceof DBDAttributeBindingType
Long.parseLong(value)
mConnectionById.containsKey(callId)
(switchValues & SW_CAMERA_LENS_COVER_BIT) != 0
what instanceof UpdateAppearance || what instanceof ParagraphStyle || (what instanceof SuggestionSpan && (((SuggestionSpan)what).getFlags() & SuggestionSpan.FLAG_AUTO_CORRECTION) != 0)
_connector.getResponse("METHOD /f\00o HTTP/1.0\n\n")
logger.info("Illegal argument in chart: {}",e)
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
lock.isHeldByCurrentThread()
logger.trace("Propose response {} from {}",msg.payload,msg.from)
e.getMessage()
j--
m.getDeclaringClass()
new User(credentials.getUsername(),credentials.getBackendRoles())
(MethodArgT)result
new Color(pixels[i],true)
ai.uid < Process.FIRST_APPLICATION_UID
selenium.isElementPresent("link=Control Panel")
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(_user.getUserId(),calendarBooking,1,true,true)
smsHeader != null && smsHeader.portAddrs != null
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","two","three")
AnalyticsDataFactory.clearAnalyticsData()
jmsDestination == null || jmsDestination.isEmpty()
jarResourcesElementDesc.getStoreFactory()
assertEquals("Unable to read 1 bytes, got 0",ex.getCause().getMessage())
main.call(args)
i < 8
mService.setAppPolicy(UID_A,POLICY_NONE)
new InputStreamReader(localStream,StandardCharsets.UTF_8)
new Property2()
Settings.Global.getInt(cr,Settings.Global.DOCK_AUDIO_MEDIA_ENABLED,0)
return true; 
spec.multiPart(controlName,contentBody,mimeType)
enabled=true
whitelistedResourcesWithInvalidMac.contains(cleartextPath)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
map.lock(key,1,TimeUnit.SECONDS)
appearance.getFloat(attr,0)
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
Integer.parseInt(nextArgRequired())
getLookupString()
intermediateArtifacts.combinedArchitectureBinary()
grantAlias == null || "".equals(grantAlias)
AudioManagerImpl.class
method.isRequestSent() && method.getStatusCode() == HttpStatus.SC_NOT_FOUND
c == Character.class || c == Character.TYPE
type.getDeclaredConstructor()
myFile.getPath()
valueFormatter != null && !(valueFormatter instanceof ValueFormatter.Raw)
list.append(ai)
FastMath.min(origin,num.floatValue())
new CustomChangeException("Failed to insert one or more concept map types",be)
new V(8,new BooleanSetting(false))
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
LOGGER.debug("Registering handler [{}] with no principal resolver into the execution plan",handler.getName())
contractLogTriggerEnable=true
mockResultSet.getInt(1)
text.contains(nick + ":") || text.contains(nick + " ") || text.contains(" " + nick)|| text.endsWith(nick)|| text.equals(nick)
anyContinue=false
mHandler.dispatchMessage(msg)
null == lvElement(buffer,calcWrappedOffset(index + 1,mask))
dynamicType.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
return 10000; 
new BindException(newConcept,"concept")
{0x038,0x121,0x061,0x160,0x031,0x130,0x070,0x025,0x124,0x064,0x109,0x049,0x148,0x019,0x118,0x058,0x00D,0x10C,0x04C,0x01C,0x103,0x043,0x142,0x013,0x112,0x052,0x007,0x106,0x046,0x016,0x181,0x0C1,0x1C0,0x091,0x190,0x0D0,0x085,0x184,0x0C4,0x094,0x0A8,0x0A2,0x08A,0x02A}
model.setSortByStatus(true)
new HgSetExecutableDialog(myProject)
connection.getParser().setListener(websocket)
PolyglotLanguageBindings.class
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
TimeUnit.SECONDS.toMillis(5)
aa.getAllFlags()
Stream.of("CYPHER 3.1","CYPHER 3.4")
s.equalsIgnoreCase(s2)
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).descriptionAndTooltip(message)
Log_OC.d(TAG,"onSaveInstanceState() start")
selenium.isElementPresent("link=Control Panel")
agentUri.getSchemeSpecificPart()
new Update(runnable){   public void run(){     wrapper.get().run();   } } 
mContext.checkCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
log.debug("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
view.getContext().getOpPackageName()
getStepIOMeta().getInfoStreams()
logger.trace("Received MyQ  JSON: {}",dataString)
metaData.getColumnLabel(1)
LOG.debug("Removed connection {} for {} - open: {}",connection,this,open)
mPowerManager.isInteractive()
mQsDensityContainer.getLayoutParams()
schemas == null || schemas.size() == 0
public Customer mapLine(FieldSet fieldSet,int lineNum){   Customer customer=new Customer();   if (Customer.LINE_ID_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setCompanyName(fieldSet.readString(COMPANY_NAME_COLUMN));     customer.setRegistered(true);   }   if (Customer.LINE_ID_NON_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setLastName(fieldSet.readString(LAST_NAME_COLUMN));     customer.setFirstName(fieldSet.readString(FIRST_NAME_COLUMN));     customer.setMiddleName(fieldSet.readString(MIDDLE_NAME_COLUMN));     customer.setRegistered(TRUE_SYMBOL.equals(fieldSet.readString(REGISTERED_COLUMN)));   }   customer.setRegistrationId(fieldSet.readLong(REG_ID_COLUMN));   customer.setVip(TRUE_SYMBOL.equals(fieldSet.readString(VIP_COLUMN)));   return customer; } 
timeoutMs > 0
new SpannedString(new CustomSpanned(first),true)
formatter != null && formatter != ValueFormatter.RAW
Long.parseLong(value)
new StringBuilder(560)
mUiHandler.removeCallbacks(pae)
logger.debug("munlocking region")
imageViewFuture.setComplete(e,imageView)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
psiMethod.getReturnType()
column.getLabel()
"Segment initialized with too large address: " + offHeapAddress + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
_log.warn(ioe,ioe)
900 * 1000L
mUsbDataUnlocked && active && mCurrentUser != UserHandle.USER_NULL
32 * 1024 * 1024L
log.error("Problem in JSR223 script ",e)
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
source.readLong()
dynamicType.getLoaded().getDeclaredConstructor()
module != null && !module.isDisposed()
coreId < nCores
Map<Long,Object>
!"".equals(textArr[9])
Observable.interval(0,1,TimeUnit.SECONDS)
!regex.equals(lastRegex) || p == null
WordPress.wpDB.getShownAccounts()
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
initialCapacity > 1 << 30
!file.exists() || !file.canRead()
WindowedValue.valueInGlobalWindow(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
i >= speedBumpIndex
setupFillPaint(paint,opacity)
options.needsTranspilationFrom(ES8)
resultSet.getInt(index)
opSetSMS.removeMessageListener(messageSourceService)
calendar.add(Calendar.DATE,2)
msgLog.warn("Exception occurred while starting the datasource. Attempting to close things down.",e)
cs == null || cs.length() == 0
420 * KB
ref.getAssociatedEntity()
ddmStructureLocalService.updateStructure(ddmStructure.getStructureId(),nameMap,descriptionMap,xsd,serviceContext)
cache5.setColors(red)
ThreadFactoryBuilder.create().withName(THREAD_NAME)
pur.getFileById(dirId.getId())
mMountTable.resolve(getPath(next)).toString()
mMccStr == null
getVoiceUsed()
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
Util.SDK_INT <= 25
mUiHandler.removeCallbacks(pae)
properties.get(logslow)
titleListMergeable == null
/**   * @author Spencer Gibb  */ @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes=SpringDecoderTests.Application.class) @WebAppConfiguration @IntegrationTest({"server.port=0","spring.application.name=springdecodertest","spring.jmx.enabled=true"}) public class SpringDecoderTests extends FeignConfiguration {   @Value("${local.server.port}") private int port=0;   public TestClient testClient(){     return feign().target(TestClient.class,"http://localhost:" + port);   } protected static interface TestClient {     @RequestMapping(method=RequestMethod.GET,value="/hello") public Hello getHello();     @RequestMapping(method=RequestMethod.GET,value="/hellos") public List<Hello> getHellos();     @RequestMapping(method=RequestMethod.GET,value="/hellostrings") public List<String> getHelloStrings();   } @Configuration @EnableAutoConfiguration @RestController protected static class Application implements TestClient {     public Hello getHello(){       return new Hello("hello world 1");     }     public List<Hello> getHellos(){       ArrayList<Hello> hellos=new ArrayList<>();       hellos.add(new Hello("hello world 1"));       hellos.add(new Hello("oi terra 2"));       return hellos;     }     public List<String> getHelloStrings(){       ArrayList<String> hellos=new ArrayList<>();       hellos.add("hello world 1");       hellos.add("oi terra 2");       return hellos;     }     public static void main(    String[] args){       new SpringApplicationBuilder(Application.class).properties("spring.application.name=springdecodertest","management.contextPath=/admin").run(args);     }   }   @Test public void testSimpleType(){     Hello hello=testClient().getHello();     assertNotNull("hello was null",hello);     assertEquals("first hello didn't match",new Hello("hello world 1"),hello);   }   @Test public void testUserParameterizedTypeDecode(){     List<Hello> hellos=testClient().getHellos();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match",new Hello("hello world 1"),hellos.get(0));   }   @Test public void testSimpleParameterizedTypeDecode(){     List<String> hellos=testClient().getHelloStrings();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match","hello world 1",hellos.get(0));   } @Data @AllArgsConstructor @NoArgsConstructor public static class Hello {     private String message;   } } 
PROGRESS_DATA_MESSAGE=7
Boolean.parseBoolean(getOptional("kylin.query.convert-create-table-to-with","false"))
_parms._distribution == Distribution.Family.bernoulli || _parms._distribution == Distribution.Family.modified_huber
service.getName()
mMccStr == null
rematchAllNetworksAndRequests(networkAgent,oldScore)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
x=0
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
tracesDir.mkdirs()
public String getRequestRequiredAcks(){   return requestRequiredAcks; } 
mBiometricUnlock.stop()
lc.contains("_oceania_") || lc.contains("_australia")
contentType + "; boundary=" + getBoundary()
!inventory.getStackInSlot(slot).isItemEqual(stack) || !ItemStack.func_77970_a(inventory.getStackInSlot(slot),stack)
case AUTOGENERATED: 
new ClusterConfiguration("clusterName",initialHosts)
selenium.isElementPresent("link=Control Panel")
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getDeclaredConstructor()
hits3.length()
new IllegalStateException("Advertising can't be both connectable and scannable")
myEditor.offsetToVisualPosition(endOffset,false,false)
remoteUidMap.get(localMessage.getUid()) == null && !localMessage.isSet(Flag.DELETED)
writerNotify.wait(1000)
selenium.click("//li[4]/span/a/span")
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mInjector.getUserManager().removeUserEvenWhenDisallowed(userId)
selenium.isElementPresent("link=Control Panel")
AtmosphereResourceLifecycleInterceptor.class
mPadding != -1
entry.notification.cloneLight()
upload1.getUploadEndTimestamp() == 0 || upload2.getUploadEndTimestamp() == 0
mAdapter != null && mDataSetObserver != null
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE || item.getType() == DownloadActivityType.HILLSHADE_FILE || item.getType() == DownloadActivityType.WIKIPEDIA_FILE
unsafeBuffer.wrap(byteBuffer)
@XmlAttribute(name="miterlimit") protected String miterlimit; 
getSupportActionBar()
e2.getValue()
httpClient.closeAsynchronously()
parser.nextText()
properties.getProperty(protocol + ".extended")
getRegistrationState().equals(RegistrationState.UNREGISTERED) || getRegistrationState().equals(RegistrationState.UNREGISTERING) || getRegistrationState().equals(RegistrationState.CONNECTION_FAILED)
polyLats.length - 1
responseFilters.isEmpty()
ReflectionUtils.invokeMethod(httpClientConnectCallbackMethod,httpClient,listener,uri,worker,this.undertowBufferPool,options)
appearance.getFloat(attr,0)
ref2something.get(ref)
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
canvas.drawArc(mArcRect,45,90,false,mPaint)
new NameAlias(nameAlias)
selenium.isElementPresent("link=Control Panel")
(DataProvider)object
1.0
classMapper.realClass(reader.getNodeName())
home.getAbsolutePath()
startActivity(mAdapter.intentForPosition(0))
createFromResourceStream(null,null,is,srcName,null)
out.writeInt(sampleCount)
BUKKIT_VERSION=2624
i < size
assertTrue(Jodd.isModuleLoaded(PETITE))
EvictableCache<String,Class>
case Incoming: 
left < startFromPixel
StringUtils.isEmpty(objectId) || "HEAD".equalsIgnoreCase(objectId)
mCol != null && mCol.getDb() != null
msbFragmentEntry.getMsbFragmentEntryId()
mView.postOnAnimation(mAnimationStarter)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
id=14
user.isAuthorized("essentials.world." + user.getWorld().getName())
Collections.singletonList(new IntPair(0,data.getLines()))
m.getDeclaringClass()
assertEquals(13,scannedBeanCount)
viewToClick != null && viewToClick.isAttachedToWindow()
selenium.isElementPresent("link=Control Panel")
fb.limit()
typeName != null
Long.parseLong(timeString)
motherTongue.getShortName()
IdeBorderFactory.createTitledBorderSimpleWithoutIndent(ApplicationBundle.message("title.preview"))
T[]
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName()) || binding instanceof DBDAttributeBindingType
lock.isHeldByCurrentThread()
res.getQuantityString(R.plurals.time_seconds_quantified,v,v)
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,tag,mustHaveFlags,mustNotHaveFlags)
deadline < now && deadline != 0
unsetDefault.isInternal()
image != null && image.getFile_url() != null
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
new Duration(60,TimeUnit.SECONDS)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).compareAndSet(expected_value, value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()),layout.getName())
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
public String getMethod(); 
assertEquals(0,factory.getConfiguration().getResultMapNames().size())
DiagnosticFactory3.create(ERROR,CALL_ELEMENT)
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
charArray.length * 6
new StreamException(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR,streamId)
from.getPath()
dynamicType.getLoaded().getDeclaredConstructor()
setImageDrawable(icon,false)
Character.isSurrogate(tmpBuffer[len - 1])
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
new MediaController(mContext,token)
clickView != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
MAX_STATUS_WIDTH=7
assertLeftRightCategory(1,category2a)
factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)
new CountDownLatch(2)
VcsTestUtil.assertEqualCollections(localTags,myLocalTags)
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
IllegalArgumentException.class
myRestrictRange.contains(info)
LOGGER.isDebugEnabled()
new IgniteException("Failed to initialize cache store (data source is not provided).")
i < 17
from >= to
stepsNumber=1
new int[26]
javaWriter.emitSingleLineComment("foo")
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)
giveFieldBinding(ss)
metadata.getFaces()
new ArrayList<PhysicsJoint>(4)
selenium.isElementPresent("link=Site Name")
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.SAP,DatabaseDriver.TERADATA)
actionBuilder.setStderr(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
!mPrefWriteAnswers
uncompressedProto.length < 2550000
s4dir + ".dir"
mSyncStatus.valueAt(i)
@Override
super.getFamilyCellMap()
this.setBuffer(VertexBuffer.Type.Index,2,indices)
T[]
recoveryDescs.putIfAbsent(id,recovery=new GridNioRecoveryDescriptor(queueLimit,node,log))
cs[c].setNA(r)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
final ImageView buttonShare=(ImageView)view.findViewById(R.id.context_menu_share_button); 
_ddmStructureLocalService.getStructure(GetterUtil.getLong(ddmStructureFieldNameParts[2]))
serialVersionUID=639716205
new RuntimeException(e)
holder == null || holder.provider == null
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
config.getOrcStreamBufferSize()
appearance.getFloat(attr,0)
i >= 0
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_FLAC,streamInfo.bitRate(),Format.NO_VALUE,streamInfo.channels,streamInfo.sampleRate,initializationData,null)
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
four.setAxisIndex(LEAF)
System.arraycopy(orig,0,target,0,20)
logger.trace("Invalid Account Credentials")
LOG.debug("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
document.addText(name,valueString)
logicalExpressionStack.remove(logicalExpressionStack.size() - 1)
mImm.hideStatusIconInternal(mToken)
callbacks.onHardwarePreDraw(canvas)
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
theTermsUrl=props.getProperty(TERMS_URL_PROPERTY)
rs.getMetaData()
new ClientAttributeUpdater(clients.get(salesRep.getId())).setFrontchannelLogout(true).removeAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE)
!tour.getStageInformation().isEmpty()
TermAllGroupsCollector c1=new TermAllGroupsCollector(groupField); 
public SimpleAttributeBinding getValueBinding(){   return attributeBinding; } 
mHasSurface && !isGoneForLayoutLw() && !resizingWindows.contains(this)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Thread.sleep(3000)
adapterCount < MIN_ADAPTER_STACK
memoryCachePercent <= 0
new WithAccountLock<ReturnType,ExceptionType>(paymentConfig).processAccountWithLock(locker,accountId,callback)
super.getCollectionSizeEqualsProvider(path)
(Integer)10
mSyncStatus.valueAt(i)
typeSettingsProperties.toSortedString()
verify(mWifiService,never()).stopLocalOnlyHotspot(anyString())
notebook.cloneNote(note.getId(),"clone note with Exception result",null)
new String(payload,"UTF-8")
if (isPresent) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
position.offset(mLeft,mTop)
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
new HttpHost(proxy.host,proxy.port)
LoggerFactory.getLogger(MongoQueryCreator.class)
availableAllocations[highIndex]
args.length > 7
jobDataMap.put(SchedulerEngine.JOB_STATE,jobStateClone)
sendTo("direct:foo")
response.getResponseBody().equals("")
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
return type; 
RowSqlType.builder().withIntegerField("f_int").withVarcharField("sub_string")
executionStats.getStartedSplits()
mListView.getListChildAt(index)
fOnDemand && ondemand
Throwable e
mySecondComponent.getPreferredSize()
mValues[8]
N node
(child.mViewFlags & VISIBILITY_MASK) == VISIBLE
layoutTypePortlet.getAllPortlets()
new PyDocstringParser()
nodeInfo.getPlugins().getPluginInfos()
popupWindow.setContentWidth(menuWidth)
PatchedRouteInfo r; 
TermAllGroupsCollector c2=new TermAllGroupsCollector(groupField); 
file.contentsToByteArray()
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
holder == null || holder.provider == null
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL_ALL,pkg,mustHaveFlags,mustNotHaveFlags)
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineUninterceptedOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
!mShouldTranslateContents
StripedFileTestUtil.randomArray(dataBlocks,dataBlocks + parityBlocks,parityDNFailureNum)
valuesLoaded=false
enter && hasWindowFocus() && isFocused()&& isVisibleToUser()
super.resolveLayoutDirection(layoutDirection)
column.getValueClobFile() != null || (column.getType() != null && column.getType().equalsIgnoreCase("CLOB"))
context.var("long",2)
logger.warn("license [{}] - expired",license.uid())
buffer[extLenIndex] << 8
new UnsupportedOperationException(getClass().getName())
Simple.forClass(SkylarkDict.class)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION,false)
/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws Exception {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } 
connections.get(target)
logger.warn("{}",builder.toString())
status().isFound()
drawGeometry(g)
public CharSequence getText(){   return text; } 
new FirefoxWebDriverImpl(projectDirName,portalURL)
Integer.parseInt(taskIdStr)
old + 19
originalValue != null && !originalValue.equals("-1")
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Stream.of("CYPHER 3.4")
assertContains(actualTables,expectedTables)
modelNode.toString()
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(project,"Synchronizing OSGi dependencies",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         indicator.setIndeterminate(true);         ModuleManager instance=ModuleManager.getInstance(project);         Module[] modules=instance.getModules();         for (        Module module : modules) {           getInstance(module).syncDependenciesFromManifest();         }       }     } .queue();   } } ,project.getDisposed())
callback.onPulseFinished()
properties.length > 4
analysis.getType(aggregate)
memoryCachePercent <= 0
System.currentTimeMillis() - start > 500 && !ApplicationManager.getApplication().isUnitTestMode()
AbilityRegistryProxy.setAsNotRecoverable(itemStack)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
sendMessageAtFrontOfQueue(CMD_STOP_AP)
Integer.parseInt(nextArgRequired())
percentComplete=0
new HTTPArgument("",text.replaceAll("\n","\r\n"),false)
Helpers.exec(j4p,"setProfileRepositories(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
getTupledSet()
clusterService().localNode().getName()
_TestUtil.nextInt(seedRandom,2,10)
editor1 == editor && !editor.isDisposed()
private ClassLoader myClassLoader; 
nextTokenIs(b,IDENTIFIER)
OperatorGroupByUntil<T,TKey,TValue,TDuration>
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
win == null || !startPositioningLocked(win,true,startX,startY)
ap.getSsidStr()
new Paint()
@Override public ExtendedCell deepClone(){   return new KeyValue(this); } 
final WikiPage parent
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
selenium.isElementPresent("link=Control Panel")
behindFraction * GRADIENT_SCRIM_ALPHA_BUSY
AssetTagLocalServiceUtil.checkTags(userId,groupId,queryRule.getValues())
findDelegateForNewObject(name)
!method.isStatic() && method.isPublic() && !method.isAbstract()&& method.getAnnotations(ACTION_ANNOTATION_NODE.getClassNode()).isEmpty()&& method.getLineNumber() >= 0
new PoolBagEntry(null,0,TestElf.getPool(ds))
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
RequestContext.create(ksession.getClass().getClassLoader())
ret.shapeInfoDataBuffer()
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName(),ex)
violationRules.isFailOnViolation()
new IgniteDataStreamerProcessor(ctx)
context == null || context == EGL_NO_CONTEXT
request.getPath().split("\\?",-1)
buildHiloOptimizer(-1,increment)
tracesDir.mkdirs()
table.fields()
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
modulePropertyManager.setExternalModuleType(moduleType)
if (isPresent) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
!mConfig.hasTransposedNavBar
registrar.registerReferenceProvider(new PsiElementPattern.Capture<PsiElement>(PsiElement.class){   @Override public boolean accepts(  @Nullable Object o,  ProcessingContext context){     return o instanceof PsiLiteralValue && ((PsiLiteralValue)o).getValue() instanceof String;   } } ,new ArbitraryPlaceUrlReferenceProvider(),PsiReferenceRegistrar.LOWER_PRIORITY)
type.getDeclaredConstructor()
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
StringUtil.toHexString(key.hashCode())
hz1.getLifecycleService().shutdown()
InputMethodManager.getInstance()
procs.getInt("NULLABLE")
new FileInputStream(file)
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistration(PBHelper.convert(registration))
LOG.debug("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
new RuntimeException("Downloading Gradle distributions with HTTP Basic Authentication is not supported on your JVM.",ex)
(device=1 << i) != AudioSystem.DEVICE_OUT_DEFAULT
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,true,aggregationAnnotation.approximate(),factory)
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
body.transferTo(position,target)
InitialFact.class
parsedResult.getType()
new EnterSelectionDialog(shell,procs,Messages.getString("DBProcDialog.EnterSelection.DialogTitle"),Messages.getString("DBProcDialog.EnterSelection.DialogMessage"))
counter < max
injectionConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,context,managedReferenceFactoryValue)
slotId <= 0
isNavBarVirtKey && !down && !canceled
dbText.getText()
target.addTaskAndWakeup(task)
_log.error("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
mAppliedTemporaryAutoBrightnessAdjustment=false
new ObjectMapper().readerFor(DiskBalancerVolume.class)
deadline < now && deadline != 0
CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking()&& !mNotificationPanel.isQsExpanded()
BUTTON_QUIESCENT_ALPHA=0.70f
titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
pti.getArity()
fragment.dismissAllowingStateLoss()
ourGuard.doPreventingRecursion(element,true,computable)
ruleIndex < runCount
cursor == null
instrumentation.isRedefineClassesSupported()
new SSLConnectionSocketFactory(sslContext(),hostnameVerifier())
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
TRACE_ROUTING=false
mMatchMode=matchMode
matcher.find()
result.addUnsafeEnchantments(getEnchantments())
this.r != null && r != null
SerializedString name
imeWin.getFrameLw()
mWidth - mMinWidth
GatheringByteChannel.class
context.revertRestartRequired()
new FrameV2(frame,s.offset,s.len)
selenium.isElementPresent("link=Control Panel")
analysisResult.getPackageRoots()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
client.getLocalPlayer().getInteracting().getName().contains(FISHING_SPOT)
JNIDecoder.matches(in,inputFormats)
twitter.getDailyTrends()
clone != null || index.containsKey(object)
new AffineTransform(mTextScaleX,mTextSkewX,0,1,0,0)
setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
serviceLocalException(new Throwable("localBrokerInfo is null"))
System.getenv(Tokens.FAUNUS_HOME)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
sessionToken == null || !compareRequestAndSessionTokens(sessionToken,params,userSubject)
new SpannedString(new CustomSpanned(first),true)
greaterThan(0L)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted)
context == null || context == EGL_NO_CONTEXT
loaded.getLoaded().getDeclaredConstructor()
createClient(addr.getHost(),addr.getPort(),cfg.getTimeout())
T exception
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),group,ActionKeys.VIEW)
selenium.isElementPresent("link=Control Panel")
mService.setAppPolicy(UID_A,POLICY_NONE)
create.fetch(meta().getTables(null,getName(),"%",types),SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR)
newId >= max
getString(R.string.known_issue_wrong_base_directory,appInfo.dataDir)
DEFAULT_NUMBER_OF_WRITE_BUFFERS=256
ctx != null
cluster.restartDataNode(dnp)
hours >= 2 || (hours > 0 && minutes == 0)
(mOomMinFreeHigh[5] * 7) / 4
mDisplayContent.mDividerControllerLocked.getWidth()
regSocial * trusterWeightValue * userFactorValue* userFactorValue
Simple.forClass(Boolean.class)
writer.writeUshort(getReferenceIndex(instruction))
words.length >= 2 && words[1].length() > 0
Nd4j.zeros(mb,inputLength)
mAvailablePhysicalRequestKeys == null
selenium.isElementPresent("link=Control Panel")
_maxTransactionActive=1
expressionWithRecoverUntilParenOrComma(b,l + 1)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
mWindow == null || !mWindow.getSharedElementsUseOverlay()
log.severe("Change Set " + toString(false) + " failed.  Error: "+ e.getMessage())
1
args.toArray()
ReflectUtil.isTypeOf(type,Number.class)
createTextAttributesKey("KOTLIN_LABEL",DefaultLanguageHighlighterColors.LABEL)
perfRule.assertDurationAround(duration,3600L)
selenium.isElementPresent("link=Control Panel")
Thread.sleep(1000)
new ApiHelper.RefreshBlogContentTask(this,WordPress.currentBlog).execute(false)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_FONT_SIZE,true)
selenium.isElementPresent("link=Control Panel")
users.get(j)
mHandler.dispatchMessage(msg)
json.getJSONArray("roles")
FRAME_STATS_COUNT=16
dstPath.toString()
new PopupWindow(mContext,null,com.android.internal.R.attr.actionModePopupWindowStyle)
SelectTimeZonePacificStandardTimeCPMATest.class
config.isAnimateGrass()
assertPhoneNumberNotEqual("123123","0123123",false)
ImageView divider=new ImageView(mContext); 
deltaY >= 0
DefaultManagementMBeanAssembler.class
m.getDeclaringClass()
assertEquals(11,lm.getFields().size())
sep < 0 || sep > j
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
actionButton.setRolloverIcon(new ImageIcon(ca.getRolloverIcon()).getImage())
assertEquals(2,files.length)
font.getName()
mScreenBright=true
targetDatabase.setObjectQuotingStrategy(originalStrategy)
attribute.getDefinition().getMarshaller()
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
resolver.acquireUnstableContentProviderClient(uri)
PyReferenceExpression.class
DEBUG=false
buildInitPendingIntent(vol)
frame.delete()
? extends Throwable
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isElementPresent("link=Control Panel")
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends Activity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK)     SendCoinsActivity.start(this,intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT));     finish();   } } 
z / vz
getParameterValues(request,param,null)
colors.getThemeAttributeId(i,0)
mService.publish(mContext.getOpPackageName(),clientId,publishConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,true,callback,clientId))
flux.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
spec.multiPart(controlName,contentBody,mimeType)
context.getPackageManager().queryIntentActivitiesAsUser(intent,0,userId)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
mavenProject.getDisplayName()
_portal.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
mPowerManager.isInteractive()
mService.addOrUpdateNetwork(config)
assertEmptyCommentRelatedSearchResults(searchResult)
LinkedHashMap<String,ASTNode>
Throwable e
getEffectiveHstsEnforced()
Number oldValue=(Number)conn.get(getName()); 
Throwable e
assertTrue(predicate.apply(pickleEvent))
intermediateArtifacts.combinedArchitectureBinary()
mGnssCallback != null
"Port '" + port + "' is illegal. Port should not be less than 0"
SelectTimeZonePacificStandardTimeCPMATest.class
stackIterator.remove()
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_VIDEO_OUTPUT) == PackageManager.PERMISSION_GRANTED
buf.writerIndex()
String.format("Failed to invoke TestWatcher %s for test %s",watcher.getClass().getName(),ReflectionUtils.getFullyQualifiedMethodName(extensionContext.getRequiredTestClass(),extensionContext.getRequiredTestMethod()),getDisplayName())
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout,minConnectionEventLen,maxConnectionEventLen)
startActivity(in)
Color.fromRGB(0x434343)
SAVE_TRACK_TO_GPX.setModeValue(ApplicationMode.DEFAULT,false)
Class.forName("java.lang.invoke.CallSite",false,ClassLoader.getSystemClassLoader())
resourceList == null || resourceList.getResourceVariablesCount() <= 1
StringUtils.hasLength(secretQuestion) && StringUtils.hasLength(secretAnswer)
caller.isSystem()
MAX_PERCENT_DIFFERENCE=0.3
"Skipped invalid content exclude pattern: " + excludeExp
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValueExact()
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",false))
logger.warn("{}",general)
countNewlines(headerFragment) + 2
fault.getDetail() != null && fault.getDetail().getFirstChild() != null
DirectoryReader reader=DirectoryReader.openIfChanged(open); 
!SessionErrors.isEmpty(resourceRequest)
public void testWithDFS() throws Exception {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
chart != null && !chart.isEmpty()
origin.realComponent().doubleValue() > other
DIARY_TEXT=3
getPlayerPosition().y
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
new HashMap<>(256)
className.getClassName()
new ArrayList<>(0)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mVectorState == null || mVectorState.mVPathRenderer == null
requestOptionsClassName.toString()
new RedissonSession(keyPrefix,id)
settings.setTextSize(WebSettings.TextSize.NORMAL)
twitter1.checkUserListSubscription(id1.screenName,userList.getId(),id2.id)
Map<String,Fields>
pathParts[0] != null && pathParts[0].length() > 1
ref.getParentObject()
mLocalDirtyRect.set(0,0,width,height)
UserManager.getInstance()
Integer.parseInt(taskIdStr)
key == null
ChromeTraceBuildListener.class
setProgressInternal((int)progress,true,false)
private RGB color; 
STUB_VERSION=22
y2 < bb.maxY
Set<Id>
ClassPropertyFetcher.getStaticPropertyValue(getClazz(),propName,type)
selenium.isElementPresent("link=Control Panel")
slash < 0 || resource.exists()
new Paint()
Loader.loadClass(Log.class,__logClass)
-3
!token.hasVisible && !mClosingApps.contains(token) && !token.mDeferRemoval
Throwable e
commitLock.unlock()
new Paint()
from=PERSISTENT_ANIMATION_CACHE
submittedNode.get("values") == null
Exception e
new Paint()
TestEmployeeTable.class.getSimpleName()
System.currentTimeMillis()
1
requestUrlregex == null || requestUrlregex.length() == 0
psiElement instanceof GoFunctionOrMethodDeclaration
mTo == 0
logger.debug("InterruptedException during playing a notification sound")
laneOptions[j].equals("slight_right") || laneOptions[j].equals("merge_to_right")
from > to
findDelegateForNewObject(name)
mFormNamesAndURLs.isEmpty() && getLastNonConfigurationInstance() == null
Exception e
new VectorDrawableAnimatorUI(this)
System.err.println(s)
Throwable e
mState != STATE_INITIALIZED
file.getPath()
setValue(object,value.intValue())
new AmazfitCorFWHelper(uri,context)
logger.debug(e.getMessage(),e)
showMessage(context.getString(R.string.empty_route_calculated),Toast.LENGTH_LONG)
AUTH_TYPE_NEGOTIATE.equals(this.authType)
logger.verbose("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
gatherDisableActionsLocked(mCurrentUserId)
@Nullable
"com.google.android.talk".equals(callingPackage) || "com.google.android.quicksearchbox".equals(callingPackage) || "com.google.android.googlequicksearchbox".equals(callingPackage)
rhs.getScore()
new ObjectMapper().readerFor(DatanodeAdminProperties.class)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,TemporaryFileEntryRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
expected == byte.class || expected == Byte.class
indexNameExpressionResolver().concreteIndexNames(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
mSlideableView != null && mSlideableView != child
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProcessor(new ButtonItemProcessor(this))
new ByteSizeValue(133,ByteSizeUnit.BYTES)
userId > 0
maxRecents > 0 && !doTrim
intermediateArtifacts.combinedArchitectureBinary()
logger.debug("Authentication request failed: " + failed.toString(),failed)
return true; 
log.warn(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").layer("0",new DenseLayer.Builder().nOut(10).build(),"in1").layer("1",new DenseLayer.Builder().nOut(10).build(),"in2").layer("2",new DenseLayer.Builder().nOut(10).build(),"0").layer("3",new DenseLayer.Builder().nOut(10).build(),"1").layer("4",new DenseLayer.Builder().nOut(10).build(),"1").layer("5",new DenseLayer.Builder().nOut(10).build(),"1").layer("6",new DenseLayer.Builder().nOut(10).build(),"2","3","4","5")
new BitmapDrawable(mTextView.getResources(),holder.getValue())
Thread.sleep(1000)
a.getDimensionPixelSize(attr,DEFAULT_MAX_WIDTH)
selenium.isElementPresent("link=Control Panel")
typeSettingsProperties.toSortedString()
this.setAutoCommitOnClose(true)
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
selenium.isElementPresent("link=Control Panel")
FileTime.fromMillis(1)
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
configureAST(expressionStatement,code)
width / 2
mAttributes.getAllFlags()
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
arguments != null && arguments.length > 0
Integer.parseInt(listenPort)
Threads.sleep(3000)
_training_metrics.auc().defaultThreshold()
BackupManagerServiceInterface svc=mService; 
result.getProject()
getExecutionContext()
runner.addExtensions(session,getLog(),lifecycleExecutor,projectBuilder)
type.getDeclaredConstructor()
result == null && exception != null
nodeTextIndex < nodeText.getElements().size()
statistics.addGetTimeNanos(System.nanoTime() - start)
DEFAULT_MAX_DHCP_RETRIES=9
Integer.parseInt(displayIdStr)
revisions.isEmpty()
assertTrue(message.getPayload() instanceof Collection<?>)
selenium.isElementPresent("link=Control Panel")
mHandler.obtainMessage(MSG_RESULT,status,0,currentPackage)
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
LatencyContainer.class
view.getContext().getOpPackageName()
new NotifyBuilder(context).whenDone(2)
dos.writeInt(valueBytes.length)
parser.nextHexInt()
mFrameSlots.remove(name)
FlowManager.getWritableDatabaseForTable(getTable())
!proportional
windowSize=Long.parseLong(cmd.getOptionValue(CLI_WINDOW_SIZE)) * DAY_IN_MS
windowState.isOnScreen() && windowState.isVisibleLw() && !windowState.mWinAnimator.mEnterAnimationPending
Arrays.asList("/css/**","/js/**","/images/**","/webjars/**","/**/favicon.ico")
world.setBlockMetadataWithNotify(x,y,z,0,2)
dynamicType.getDeclaredConstructor()
MatchingFiltersFactory filters=new MatchingFiltersFactory(Module.LUCENE,Target.LUCENE); 
nodeEngine.getSharedService(LockService.SERVICE_NAME)
JMeterUtils.getPropDefault("undo.history.size",0)
Glue optionalGlue
mMccStr == null
synchronized (this) {   classCache.remove(name); } 
mSupportsBearing ? 1 : 0
DatabaseDescriptor.getRpcAddress().getHostAddress()
ModalityState.defaultModalityState()
DISPLAY_TASKS_PORTRAIT + 1
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() / 2)
BaseMessages.getString(PKG,"Spoon.Dialog.PromptSave.Message")
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
protocolProvider.getProtocolDisplayName()
getUriBuilderFactory().expand(uriTemplate,uriVariables)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
didFail ? toExecutionFailure(output,error) : toExecutionResult(output,error)
resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
LocalFileSystem.getInstance().refreshAndFindFileByPath(fullPath.replace(File.separatorChar,'/'))
executeMethodAndConvertExceptions(httpPatch)
getLogger().warn("Unknown classloader [CNFE]: " + loader.getClass().getName())
partialUri.toLowerCase()
choices.size()
PFLAG3_ASSIST_BLOCKED=0x4000
selenium.isElementPresent("link=Control Panel")
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
selenium.isElementPresent("link=Control Panel")
audioManager.getRingerModeInternal()
AnkiDroidApp.deck().setUndoEnd(undoName)
UnsafeUtils.get8(_mem,8)
node == null || node.isRoot()
set != null && value != null
id.required()
i <= maxIndex
v.getCreationTime() + timeToLive < now
super.onDetachedFromWindow()
getRawDefinition().contains(" ") || getRawDefinition().contains("(")
e.toString()
GL20.glUniformMatrix4fv(location,transpose,value)
attachment.getDataUri() == null || attachment.getSize() == 0
WPWebViewActivity.openURL(context,url)
Utils.javaDeserialize(_boltSer,IBatchBolt.class)
EnumSet.allOf(AlarmInfoType.class)
path.lastIndexOf(';')
protected abstract Block getBlock(); 
i % dictionarySize
getWriter().print("FAILED")
@Nonnull Long versionId
new JavaPropertyDescriptor(getContainingDeclaration(),getAnnotations(),getVisibility(),isVar(),getName(),getSource(),getOriginal())
Slog.w(TAG,"Session failed to close due to remote exception",e)
this.constraints.updateFromFactHandle(workingMemory,handle)
this.transactionsRepository.getTransaction(this.xidTransactionID)
frustum(xmin,xmax,ymax,ymin,zNear,zFar)
Arrays.asList("-d",outputDir,"-classpath",ForTestCompileRuntime.runtimeJarForTests().getPath())
mUserPaddingEnd > 0
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
a.getFont(attr)
jsonObject.get("error").toString()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
moveInputMethodWindowsIfNeededLocked(false) || displayed
x509ExtendedTrustManager.checkClientTrusted(chain,authType,engine)
Assert.assertEquals(new InetSocketAddress("RemoteMaster3",defaultPort),masterAddress)
new LeftTuple(f0,sink1)
localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
LOGGER.lifecycle(msg.apply())
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0 || (win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD)
selenium.isElementPresent("link=Control Panel")
assertEquals("Incorrect number of fields",2,f.length)
mKeyguardController.isKeyguardShowing(display.mDisplayId)
kryo.readObject(input,JobID.class)
Map<String,ModContainer>
pluginManifest.setRequirePlugins(metadata.getRequiredPlugins().toArray(new String[]{}))
paintInnerRect.setColor(0xddFFFFFF)
pool.drain()
rematchAllNetworksAndRequests(networkAgent,oldScore)
chain.getEarliestKeyCreationTime() >= keyRotationTimestamp
subCursor.getString(COLUMN_VALUE)
OK(R.drawable.sense_ok,R.string.normal,R.string.detail_info_normal)
host.getHost()
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
rematchAllNetworksAndRequests(networkAgent,oldScore)
MAX_PERCENT_DIFFERENCE=0.3
JDBCUtils.safeGetInt(dbResult,"pid")
settings.setTextSize(WebSettings.TextSize.NORMAL)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() == 0
getNullDialog()
!(layer instanceof FrozenLayer) && layer.type() == Layer.Type.CONVOLUTIONAL
selenium.isElementPresent("link=Control Panel")
assertEquals(1420,lastLink)
mState.mPivotY != pivotY
needApply=10
new IndexWriter(dir,false,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
getConfiguration(config)
!mKey.equals(other.mKey)
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
mFinishing && mSupportHardware && mHwCenterX != null
serviceDataUuid == null || mServiceData == null
Math.min(1 << (pulseCount - 1),64)
proxyFactory.createClass().getDeclaredConstructor()
actionText.matches("Replace with '(true|false|null)'")
TestUtils.randomByte() + 128
BuildMode buildMode
BaseComponent.toLegacyText(message)
new ShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
"Requeuing shutdown because rootScanned: " + rootRescanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
emptyView != null && emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
new ObjectMapper().readerFor(BlockIteratorState.class)
_buildTemplateWithGradle("npm-vuejs-portlet","vuejs-portlet-dependency-management","--dependency-management-enabled")
selenium.uploadFile("//input[@id='_86_importFileName']",RuntimeVariables.replace("L:\\portal\\build\\portal-web\\test\\com\\liferay\\portalweb\\portlet\\mediagallery\\dependencies\\Media_Gallery-Selenium.portlet.lar"))
testClass.getSimpleName()
ThemeUtils.getDefaultDisplayNameForRootFolder(this)
analysis.getType(windowFunction)
new ExceptionInInitializerError("Unable to access to system bundle")
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
Assert.assertArrayEquals(serviceContext.getAssetCategoryIds(),assetCategoryIds)
selenium.isElementPresent("link=Control Panel")
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
response.getHits().getAt(0).field("s_obj2_arr2").values()
new SolrException(400,"Operation requires schema to have a unique key field")
DEBUG=false
new QueryException(e,"Error getting target node for %s\n%s",target,e.getMessage())
Integer.parseInt(taskIdStr)
saveToFile(false)
enabled=true
getCloneSettings(myProjectScheme)
MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)
!name.equals(currentMethod.getName())
FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)
H2O.waitForCloudSize(x,30000)
!mIsOnInnerCircle && hour != 0
selenium.isElementPresent("link=Control Panel")
private final WriteResultPublisher resultPublisher=new WriteResultPublisher(); 
source.getAddress()
excludeFilePathMatcherList.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
IntegerDivNode.class
UserHandle.myUserId()
Class... sources
i <= n
location.sourceName()
Exception e
new PlainMenuItem(iconId,null,text,needLinks,isUrl,collapsable,collapsableView,onClickListener)
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
TestWadlFunctions basicTest=new TestWadlFunctions(); 
pod.setName(expectedId)
bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0
item == null || item.getStatus() < 2
"-n".equals(arg) || "-s".equals(arg) || "-g".equals(arg)
@Path(PATH_RELATIONSHIP_INDEX_ID)
Preconditions.checkArgument(values.length == 2,"The value of a GeoPoint must be a double array with 2 items, not %s",values.length)
REAL_DRIVER.quit()
Trans != NO_TRANSPOSE
Key.class.getName()
preMap.size()
parameterIsPrimitiveOrNullable(func,i)
view.setOpaque(false)
this.hostToId
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
BaseComponent.toLegacyText(message)
IndexReader.open(store)
((SuperColumn)c).cloneMe()
methodExists(altName,fieldNode,false)
Exception e
ISOChronology.getInstanceUTC()
mSelector.setHotspot(x,y)
Math.max(leftLen,rightLen)
DEBUG_DRAG=false
private final WriteResultPublisher resultPublisher=new WriteResultPublisher(); 
matchAxisFilter != 0 || wrapAxisFilter != 0
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
getName()
Preconditions.checkNotNull(worker,"worker")
src.getParent()
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
mapper.getTypeFactory().constructType(UpdateContainerCmdImpl.class)
Set<String>
tracesDir.mkdirs()
mAimsicdService.getCellTracker().updateNeighboringCells()
case 9: 
IllegalDataException.class
assertEquals(1,resultList.size())
assertEquals(message,obj,this.serializer.toObject(this.serializer.toBytes(obj)))
System.getProperty(key,"")
!rrdFile.exists() || rrdFile.length() == 0
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
Set<Integer>
CHECKIN_VERSION=31
mAccessibilityController.isAccessibilityEnabled()
ViewConfiguration.getMultiPressTimeout()
{0,0}
selenium.isElementPresent("link=Control Panel")
!isPartialUpdate || id.views == null
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Site Name")
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200),CommonUtils.truncateString(consumer.getObjectName(),200))
mUndoBarHideListener.onUndoBarHide(mUndoToken == null)
toEventData(key)
entry.rxBytes == 0 && entry.txBytes == 0
sendMessage(peer,text,null,null,true)
getAncestors()
new StepMeta(tostepid,tostepname,(StepMetaInterface)toi)
doTestNoDocValues(type)
msbFragmentCollection.getMsbFragmentCollectionId()
T exception
PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId)
getClientConfig().getAddresses()
loaded.getLoaded().getDeclaredConstructor()
add2(yact[0],ds[0])
metadata.getClassName()
Details_DialogLayout.findViewById(R.id.ll_location)
new GridDrStatus(pauseReason,errMsg)
compensationRange.contains(compensation)
Files.createDirectories(destPath)
Exception e
mLteSignalStrength > 31
CharSequence url
LOGGER.error("Error during XML parsing",e2)
JSParameterListElement parameter
this.messageService.fluxPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
s > 1e-4
serialVersionUID=320L
op.get("address").add("host",host)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
connector.getFilterChain()
writePermission.intern()
v[3]
TypeResolver.resolve(channelTypeUID,locale)
new DirDiffViewer(context,(ContentDiffRequest)request)
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getGlobalSearchScope()
Boolean.parseBoolean(getOptional("kylin.query.skip-empty-segments","true"))
(Number)resultList
r - scrollX
msg.nextOffset()
new Long(94)
mParent == null
mResources.getDrawable(id,null)
l_Inflater.inflate(R.layout.adv_user_strings_list,parent,false)
new InvalidDestinationException("Cannot publish to a deleted Destination: " + destination)
selenium.isElementPresent("link=Control Panel")
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
Gdx.files.internal(fileName).pathWithoutExtension()
assertEquals(2,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getDeclaredConstructor()
new Intent(Intent.ACTION_RESOLVE_EPHEMERAL_PACKAGE)
new StringBuilder(740)
getValidationError() == null
getOrCreateContainer().forceUnlock(dataKey)
registerConsumer(owner,newUUIDString(),newUUIDString(),attributes)
scheduleRemoveStartingWindowLocked(wtoken)
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
new BoBHash(SHA1.hex(bobData.getContent()),"sha1")
new MaxCandidatesCondition(5)
mInterpolator == null || mNativePtr == null
new InputStreamReader(githubResponse,"UTF-8")
!threads.isEmpty()
Log.setTraceEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
lock.unlock()
ConfigurationThreadLocal.class
Assert.assertEquals(interop.getFloatField(),copy.getFloatField(),0.001)
1
type.getDeclaredConstructor()
mFillFormatter=new DefaultFillFormatter()
mLayoutParams != null && mLayoutParams.height >= 0
maxLifetime < 120000 && maxLifetime != 0
new ArrayList<>(0)
doTestWithRuntime()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commitAllowingStateLoss()
new AssetUri(AssetType.UI_ELEMENT,uri)
mControllers.get(controller)
enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,"startLockTaskModeOnCurrent")
GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))
new ImmutableAssertion(CoreAuthenticationTestUtils.getAuthentication(),list,fromNewLogin,RegisteredServiceTestUtils.getService())
crashInfo != null && crashInfo.durationMillis != -1
someConfiguredTargetEvaluated || anyConfiguredTargetDeleted || !dirtiedConfiguredTargetKeys.isEmpty()|| !largestTopLevelKeySetCheckedForConflicts.containsAll(newKeys)|| !skyframeActionExecutor.badActions().isEmpty()
Map<String,TypeData>
Throwable e
selenium.isElementPresent("link=Control Panel")
DEBUG=true
getProperties().requestCacheEnabled()
Throwable e
fetchSize >= 0
mockResultSet.getInt(1)
loaded.getLoaded().getDeclaredConstructor()
docTag != null && docTag.matchName != null
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
_connector.getResponse("GET //bad/foo?data=1 HTTP/1.0\n\n")
type.getDeclaredConstructor()
getContext().enforceCallingPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
getImportRootPath()
dest.writeInt(mSubId)
debugProcess.isDetached()
mAdapter != null && mDataSetObserver != null
powerFlowResponse == null || powerFlowResponse.getBody() == null || powerFlowResponse.getBody().getData() == null || powerFlowResponse.getBody().getData().getSite() == null
JavaModuleType.getModuleType().modifyProjectTypeStep(settingsStep,moduleBuilder)
MockSpecModel.newBuilder().rawProps(ImmutableList.of(makePropModel("param0"),makePropModel("param1")))
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)
0f
new ArrayList<>(0)
loaded.getLoaded().getDeclaredConstructor()
startActivity(intent)
ImmutableSortedMap.naturalOrder()
outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs)
selenium.isElementPresent("link=Control Panel")
soundResources.get(urlKey)
packet.getFrom().split("/",2)
hz.getCluster().getLocalMember().isLiteMember()
get(PLUGIN_GO_PROVIDED_PATH)
StringBuilder sb=new StringBuilder(); 
createTextAttributesKey("KOTLIN_EXTENSION_FUNCTION_CALL",DefaultLanguageHighlighterColors.STATIC_METHOD)
item.getName().equals(name)
maker.getTaggedData(RESERVED_FOR_LOGBUILDER_LATENCY_MILLIS)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
_parms._force_load_balance || _parms._reproducible
weekRange.add(Calendar.DATE,6)
selenium.isElementPresent("link=Control Panel")
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
error == null && dataFilter != null
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
main.getOutput()
media.getDuration() <= 0
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
setDefault.isInternal()
selenium.isElementPresent("link=Control Panel")
times + BASE_FILE_NUMBER
model.addAttribute("cookie",cookieV)
this.getAllowAdaptiveEnergy() == 0 && getLatestProposalNum() > 7
FBUtilities.getBroadcastAddress()
len < 0 || len > 52
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0 && !nameMask.endsWith("%")
myImplementation.clearAndRecreate(myVcsLocation)
mService.getConnectionInfo(mContext.getOpPackageName())
width <= 0
JID jid
RTPConnectorOutputStream.logPacket(numberOfPackets) && NeomediaActivator.getPacketLogging().isLoggingEnabled(PacketLoggingService.ProtocolName.RTP) && socket.getLocalAddress() != null
createAndTestKieContainer(releaseId,createKieBuilder(kfs),null)
logger.debug("Cannot update channel for group member ({})",e.getMessage())
!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY) && !ConnectivityUtils.isInternetWalled(context)
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
mState != STATE_PREPARE && mState != STATE_FINISHED
this(name,i18nKey,icon,isEnableable,null); 
loaded.getLoaded().getDeclaredConstructor()
callbacks.onHardwarePreDraw(canvas)
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key)
new IllegalStateException()
masm.movq(AMD64.r13,object)
t.equalsIgnoreCase(type)
readWifiSleepPolicy()
@Nullable
GL20.glUniformMatrix2fv(location,transpose,value)
log.debug("Can not check and authorize " + user.getName() + " due to "+ e.toString(),e)
walk.close()
connect(monitor,null,null,false,false)
Nd4j.zeros(mb,inputLength)
!_propertyComments.isEmpty()
attributes.getAllFlags()
f("")
JMenu langs=new JMenu("Language"); 
new int[101]
mVibrator.vibrate(750L)
LocalFileSystem.getInstance().findFileByIoFile(lib)
UpgradeStepRegistrator.class
verifyAttributes(decoder,binary("0011000315A07F440B1D07534554494f20636f6e66696775726174696f6e2064617461206f6b341C"))
Color.rgba8888ToColor(color,colorInt)
private static class ToolbarPanel extends TransparentPanel implements Skinnable {   private Image logoBgImage;   public ToolbarPanel(  LayoutManager layoutManager){     super(layoutManager);     loadSkin();   }   public void paintComponent(  Graphics g){     super.paintComponent(g);     if (logoBgImage != null) {       g.drawImage(logoBgImage,(this.getWidth() - logoBgImage.getWidth(null)) / 2,0,null);     }   }   /**   * Reloads bg image.  */   public void loadSkin(){     Image logoBgImage=ImageLoader.getImage(ImageLoader.WINDOW_TITLE_BAR);     if (logoBgImage != null)     logoBgImage=ImageUtils.scaleImageWithinBounds(logoBgImage,80,35);     this.logoBgImage=logoBgImage;   } } 
log.debug("mlocking " + file + " with length "+ length)
!showNotifications.isNull()
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
"Excluding secondary region " + bestRegionReplica + " - trying to find a different region to refresh files."
mEnded && !pending.hasRemaining() && mEndCallback != null
intervalFraction * (nextValue - prevValue)
origin.realComponent().doubleValue() <= other
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
_isAtLineEnd(detailAST)
i=2
arguments == null || class_gd == null
WAKEUP_STATS=false
createFromResourceStream(res,value,is,srcName,null)
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
size * 1.8f
presentation.updateValueView()
baseLanguage == StdLanguages.HTML || baseLanguage == StdLanguages.XHTML
rdi != null && !rdi.getPath().equals("/")
client == null
log.warn("Unexpected exception on closing transaction.  Cause: " + e)
filters={XSSHtmlFilter.class}
deletion.memorySize()
Sets.newLinkedHashSet()
new AddFileKeyStoreCommand()
valueMono.switchIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS)
logger.fine("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
new NeuralNetConfiguration.Builder().momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1e-1,1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).layerFactory(layerFactory).list(2).hiddenLayerSizes(new int[]{3}).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.weightInit(WeightInit.ZERO);       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
_addTestVariant("small.hd","uuid1",100,99)
ft.commitAllowingStateLoss()
Integer.parseInt(stackIdStr)
new ArrayList<>(childCount)
settings.readLPw(null,0,false)
XMLOutputFactory.newInstance()
in.read(buffer,read,buffer.length - read)
new Packet(data,operation.getPartitionId())
platformVersion < M
!info.getInfo().getHeadToBranchCommits(myGitRepository).isEmpty()
service.getAllGtasksFromListId(DEFAULT_LIST,false,false)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
series.Index.toPlainString()
TypeSpec.parseStrict(builder)
((PyRemoteSdkAdditionalData)sdk.getSdkAdditionalData()).getRemoteSdkCredentials(false)
Throwable e
lookup.getLookupStart() <= offset
resolved.build()
RIGHT_ID_T=3535
myConfigFiles.values()
mService.setAppPolicy(UID_A,POLICY_NONE)
menu == null || mAccount == null
is(21.0)
selenium.isElementPresent("link=Control Panel")
((EventFactHandle)((ObjectVariableContextEntry)context).left).getEndTimestamp()
selenium.isElementPresent("link=Control Panel")
super("NSIL",0,2); 
input.size(0)
maxFileDescriptorCount != -1 && maxFileDescriptorCount < (1 << 16)
this.counterpart.split("/",2)
hasColumn("MicroblogsEntry","receiverUserId")
bundleContext.getBundle().getResource(uri)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mContext.startActivityAsUser(intent,UserHandle.of(mCurrentUserId))
hint != null && LookupManager.getActiveLookup(myEditor) == null
selenium.isElementPresent("link=Control Panel")
worker.setNoData(nod != null ? RangeFactory.create(nod,nod) : null)
docDisplay_.getFileType().isR()
builder.humanReadableField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
Thread.currentThread()
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
get(context,R.string.pref_navigation,false)
Captain captain=(Captain)beans.get(ROWING_BEAN); 
super.dispatchTouchEvent(cancel)
toJSON(item,config)
new RebalanceStealInfo(0,(int)Math.random() * 5,partition,Arrays.asList("testStoreName"),(int)Math.random() * 3).toJsonString()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT || mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_VR
DEBUG_LOG_ENABLED=false
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10)
blogVals.get(27)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
assertRemoveSubsystemResources(servicesB)
holder.setGone(getLoadingViewId(),visible)
selenium.isElementPresent("link=Control Panel")
region.getRegionHeight()
maxMergeAtOnceExplicit != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
getEnvironment().tryUpdateClasspath(Collections.singletonList(testDir))
mccMncs != null
primTarget && !ClassHelper.boolean_TYPE.equals(targetType) && !primTop&& ClassHelper.getWrapper(targetType).equals(top)
m.size()
BookmarksEntryUtil.fetchByPrimaryKey(entry.getPrimaryKey())
sm.getString("apr.read.error",Integer.valueOf(-result),Long.valueOf(socket),wrapper)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
LISTEN_RADIO_POWER_STATE_CHANGED=0x00800000
getSelectedIconColorRes()
targetType.getDeclaredConstructor()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.FILL_PARENT
target.getDestinationLinkAddress()
result3.getMatches()
SCAN_STATUS_COMPLETE=2
new IOException("Demo I/O error")
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("js/js.translator/testData/box/crossModuleRef"),Pattern.compile("^([^_](.+))\\.kt$"),TargetBackend.ANY,true)
runner == null
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(1)
IllegalArgumentException ise
Stream.of("CYPHER 3.1","CYPHER 3.4")
Arrays.asList("SUM","MAX","MIN","AVG","TOPHITS","COUNT","STATS")
DialogUtils.resolveColor(builder.context,R.attr.md_background_color,DialogUtils.resolveColor(dialog.getContext(),R.attr.colorBackgroundFloating))
formController.getEventLogger().logEvent(EventLogger.EventTypes.GOOGLE_PLAY_SERVICES_NOT_AVAILABLE,0,null,false)
new GridLayout(0,1,0,4)
mOneShot=false
mAnimator.getPhaseX()
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0L
width <= 0
null != m_parallel || XmlSuite.DEFAULT_PARALLEL.equals(m_parallel)
_label == null
hz1.getLifecycleService().shutdown()
parent instanceof PsiReturnStatement || parent instanceof PsiResourceVariable
bukkit.setRawNote(we.getNote())
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
processEngineConfiguration.getCommandExecutor()
mAppOpsManager.noteOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
Bytes.setInt(end_row,(end_time == UNSET ? -1 : (int)getScanEndTimeSeconds()),metric_salt_width)
showDialog(DIALOG_SYNC_LOG)
loaded.getLoaded().getDeclaredConstructor()
i < nodeCount
Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor()
_typeSettingsProperties.toString()
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
requireContext()
value == Short.MAX_VALUE
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
query.from(employee).distinctOn(employee.datefield,employee.timefield)
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
keyRestriction != null && keyRestriction.isEquality()
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
r - scrollX
Thread.sleep(1500)
StringBuilder pattern=new StringBuilder(this.prefix); 
time != -1 && Math.abs(mLastModified * 1000 - time) >= 86400000
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),false)
project == null || project.isDisposed()
getConnectTimeout()
ActivitySample activitySample
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
DEBUG=true
new WebApplicationException(e,serverError(e))
topLevelBuildData.getJenkinsGitHubURL()
mDataAuthorities == null || data == null
launchServer(BookServerSpring.class)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
SampleObservables.numberStrings()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
selenium.isElementPresent("link=Control Panel")
logger.trace("Creating bloom filter for {} elements and spec {}",numElements,spec)
WebStorage.getInstance().deleteAllData()
mConnectionById.containsKey(callId)
selenium.isElementPresent("link=Control Panel")
index.getUUID()
failure == null
DBG=false
src.getPlatformKind() == Kind.Int || src.getPlatformKind() == Kind.Char || src.getPlatformKind() == Kind.Short || src.getPlatformKind() == Kind.Byte
!memoryOnly
new PebbleMisfitSample(timestamp + i * 60,deviceId,userId,sample & 0xffff)
sharedOptsCount.containsKey(thread)
new EditSessionBlockChangeDelegate(editSession)
check(permissionChecker,primaryKey,actionId)
mCryptConnector.execute("cryptfs","createnewuserdir",userHandle,path)
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
classes.addAll(defaultCastorList)
assertEquals(2,yubiKeyAccountRegistry.getAccounts().size())
JournalArticleFinderUtil.countByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
counter + 1
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle) && !user.isManagedProfile()
failOrAccept(prevAccept,input,closure,t)
fieldType.equals(SupportedFieldType.BROADLEAF_ENUMERATION.toString()) || fieldType.equals(SupportedFieldType.EXPLICIT_ENUMERATION.toString()) || fieldType.equals(SupportedFieldType.EMPTY_ENUMERATION.toString())
DurationType.getMillisType()
getViewHeightWithTitle()
SPACE_BEFORE_TYPE_COLON=false
selenium.isElementPresent("link=Control Panel")
connection.getRequestProperty("User-Agent") == null
IllegalArgumentException.class
rawType.getFullyQualifiedName(DBPEvaluationContext.DDL)
E edge
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
values.get("error").toString()
assertRestrictBackgroundOn()
params.getSimulatedPlatformVersion()
UnsupportedOperationException.class
uiAclHandler.permit(reqContext,op,topoConf)
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
ModuleRegistry createModuleRegistry(){   return new DefaultModuleRegistry(); } 
new SpannedString(new CustomSpanned(first),true)
factory.getEmbeddedServletContainer()
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final HttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
createCurrency("LTC","Litecoin",null,"XLT")
getDelegate().getDefaultCipherSuites()
new IllegalStateException(sm.getString("coyoteResponse.reset.ise"))
logger.debug("Cannot play queue ({})",e.getMessage())
replName != null && cursor > replName.length()
TextUtils.isEmpty(title)
_connector.getResponse("METHOD /f" + ooo + " HTTP/1.0\n\n")
synchronized (this) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedWouldBeOverwrittenDetector.getFiles(),"rebase",null)
scrollSwipingToLoadMoreToDefault()
GridGgfsTestUtils.jsonToMap(restCfg)
Boolean.parseBoolean(resizeableStr)
beansXml.getOrCreateAlternatives()
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",DOUBLE)
origin < other
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Integer.parseInt(sessionTTL)
blog.getLocalTableBlogId()
req.getPathInfo()
getServiceForUserLocked(userId)
conf.getRestBaseURL()
XmppStringUtils.parseBareJid(user)
mAuthorities.valueAt(i)
state.isFrameTypePermitted(FrameType.DATA)
ASHMEM_SIZE=464
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
queue.removeFirst()
val == null || val.length() == 0
packageManager.getApplicationInfoAsUser(packageName,0,info.id)
edge.getUpNode()
app().gitblit()
Slog.w(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
mEnginesHelper.isEngineEnabled(mRequestedEngine)
logger.info(getName() + " has been started")
new Counter(mOnBatteryScreenOffTimeBase)
weekRange.add(Calendar.DATE,6)
lp.viewType == ITEM_VIEW_TYPE_HEADER_OR_FOOTER
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).onErrorResume(exceptionHandler)
config.getReadOnlyCacheSize()
!tmp.exists() || !tmp.isDirectory()
@Nullable
/**   * {@inheritDoc}  */ public Integer getTo(){   return Integer.valueOf(to); } 
selenium.isElementPresent("link=Control Panel")
token.equals(";") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
"Predefined " + pkg + " blocked="+ pblocked+ " unused="+ punused+ " roaming="+ proaming
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
IccUtils.cdmaBcdByteToInt((byte)0x8c)
Response.ok(null,MediaType.TEXT_PLAIN)
log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '"+ value.getName()+ "'")
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
createRenderScript(true)
outputPath=args[1]
responseEncoding != null
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
getChunk(adjPos)
writer.getSourceFile(2)
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THREADS))
key.equals("image") || key.equals("mapillary") || key.equals("subway_region")
previousAttribute.compareToIgnoreCase(attribute)
Throwable.class
new IdentityHashMap<>()
permissions+=128
BooleanUtils.isNotTrue(p.getMetadata().getExcluded())
new DatabaseFormatterPostgres()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
uri.getRawPath()
new InstantPeriodicWorkerTask(errorRunnable,exec,composite)
Math.sqrt(x[i] * y[i])
Thread.interrupted()
data.contains("red") || data.contains("orange") || data.contains("tabby")
mDisplay.getRealMetrics(mDisplayMetrics)
preferences.put("cityAdminLevel",s)
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags)
metadata.getFaceRectangles()
log.warn("The TGT cannot be renewed beyond the next expiry date: {}." + "This process will not be able to authenticate new SASL connections after that " + "time (for example, it will not be able to authenticate a new connection with a Kafka "+ "Broker).  Ask your system administrator to either increase the "+ "'renew until' time by doing : 'modprinc -maxrenewlife {} ' within "+ "kadmin, or instead, to generate a keytab for {}. Because the TGT's "+ "expiry cannot be further extended by refreshing, exiting refresh thread now.",expiryDate,principal,principal)
replace(str,0,searchStr,replacement,ignoreCase)
_cm_json == null && domain != null
Throwable e
new Paint(Paint.ANTI_ALIAS_FLAG)
ImmutableSet.copyOf(modules)
selectorBox.getComponent()
parent instanceof AppWidgetHostView || parent == null
newId >= max
createFromResourceStream(res,value,is,srcName,null)
new Resource(include,name,wrapper.isParserRestricted())
method.getDeclaringClass()
out.writeInt(sampleCount)
((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(channel,exchange)
i < 100
assertEquals(12,definitions.size())
j / 2 + min
j=0
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
typeSettingsProperties.toSortedString()
cell == null || cell.recon == null
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
new MapProducerCapabilities(false,false,true,true,null)
ClosedChannelException e
near.getAndRemove(1)
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin application project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).plugin("Apply the application to add support for building a CLI application","application").implementationDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
realm.checkIfValid()
t.isFreeformTask() || targetStackId == FREEFORM_WORKSPACE_STACK_ID
playClientBlock.await(5,TimeUnit.SECONDS)
mySshHandler >= 0
portletDataContextClone.setDataStrategy(portletDataContext.getDataStrategy())
virtualFile != null && !myProject.isDefault()
logger.warn("InfluxDB is not yet connected")
subscriptionMap.remove(sub)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
hyphenationFile.toURI()
mRS.nMeshGetIndices(mID,idxIDs,primitives,idxCount)
onPackageDisappeared(pkgList[i],mChangeType)
Long measureId
dest.writeInt(mSubId)
actionText.matches("Replace with '(true|false|null)'")
IP_FILTER_ENABLED_HTTP_SETTING.getDefaultRaw(s)
storeField(field,true,pexp,current,visitor,receiver.getData())
times(8)
abandonSegment(entry.getKey(),entry.getValue())
public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
trade.getType().equalsIgnoreCase("buy")
Mono.subscriberContext()
recentsStackInfo == null && activityType == ACTIVITY_TYPE_RECENTS
new ComponentContext(c.getBaseContext(),c.getLogTag(),c.getLogger())
Thread.sleep(10000)
Integer.parseInt(value)
callbacks.onHardwarePreDraw(canvas)
from > to
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
telephony.isRadioOn(getOpPackageName())
index >= capacity()
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
info.crashInfo.stackTrace.length() > 30000
mCol != null && mCol.getDb() != null
className.lastIndexOf("org.openmrs.")
c == Float.class || c == Float.TYPE
mWidth - mMinWidth
StrictMath.log(df)
scannedUnit.setExcludeUnlistedClasses(true)
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
tnCount=70
prop.getParamValue()
SingleModel<U>
user.getSystemId() == null || user.getSystemId().equals("")
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
mOuterRadius * 0.9f
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true,false)
m.getVersioned()
new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
SPACE_BEFORE_EXTEND_COLON=true
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Set<Object>
Exception e
private Text text; 
graphModel.getUndirectedGraphVisible()
listView.getCount()
mock.message(0).body(String.class)
KotlinTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportSetOnNoOperatorWarning.test")
PsiTreeUtil.getParentOfType(location.getPsiElement(),PyElement.class,false)
waitOnThreads(f10)
flexItem.getMarginRight()
meta.getDynamicFilterFieldName()
new ConcurrentHashMap<String,Boolean>(256)
qdgraphics=new QDGraphics(QDGraphics.kDefaultPixelFormat,qdrect)
appearance.getFloat(attr,0)
mAttributes.getAllFlags()
builder.humanReadableField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
isInputViewShown()
process.destroyForcibly()
randomValueOtherThan(maxDocs,() -> randomNonNegativeLong())
drawable.getIntrinsicHeight()
ExecutionStrategyParameters parameters
retryPolicy.onWriteTimeout(wcl,WriteType.from(wte.writeType),wte.blockFor,wte.received,queryRetries)
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
result.getReceipt().getEnergyUsageTotal()
new StringBuilder(560)
child.getElementType() != TokenType.ERROR_ELEMENT || child.getFirstChildNode() != null
mDataAuthorities == null || data == null
activity == null || activity.isFinishing()
loaded.getLoaded().getDeclaredConstructor()
context.getResponse().setContentLength(byteContent.length)
instrumentation.isRedefineClassesSupported()
Throwable t
GenericCommand<Object>
ALL_ARGUMENTS.OVERLOAD.isNotDistinctFrom(getOverload())
err == 0
StringBuilder buffer=new StringBuilder(); 
info.getType() & 0xf
parts.length > 2
mp.getResolvedValue()
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
primaryShard.recoverySource()
popupWindow.setContentWidth(menuWidth)
conf.setTimeDuration(ScmConfigKeys.OZONE_SCM_HEARTBEAT_INTERVAL,hbInterval.get(),TimeUnit.MILLISECONDS)
new Location(user.getWorld(),x,y,z,user.getLocation().getYaw(),user.getLocation().getPitch())
Arg args
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
XmppStringUtils.parseBareJid(userJID)
this.mTextureRegions[pTileIndex].setTextureX(pTextureX)
Integer.parseInt(attrValue)
StringBuilder buffer=new StringBuilder("["); 
new Rect(left,top,right,bottom)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
SettingsBaseActivity.getRoutingStringPropertyDescription(this,p.getId(),p.getDescription())
h / 2
recordSetVersion2.getVersion()
canvas.saveLayer(mRect.left - rad,mRect.top - rad,mRect.right + rad,mRect.bottom + rad,mLayerPaint)
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
ParceledListSlice.emptyList()
doThrow(exception).when(fs).renameFile(any(File.class),any(File.class))
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
Thread.sleep(1000)
mValues[8]
Log.d(TAG,"setSubtitleAnchor in MediaPlayer")
errorRelay.hasObservers()
new ArrayList<>(childCount)
viewHolder.getItemViewType() == TYPE_EDIT || viewHolder.getItemViewType() == TYPE_DIVIDER
Exception ex
Throwable e
new IllegalArgumentException(sm.getString("pojoMethodMapping.onErrorNoThrowable",m.getName(),m.getClass().getName()))
port == 443 && "https".equals(scheme)
TelephonyManager.getDefault().getCurrentPhoneType()
GROUPS=4
g.clipRect(offX,y,width - offX,height)
new HashMap<String,Object>()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
anyLong()
mLargePaint.setColor(0x7f00ff00)
XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_ARRAY,parser.nextToken(),parser::getTokenLocation)
any(Object.class)
sep < 0 || sep > j
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler),Integer.MAX_VALUE)
mAppOpsManager.noteOpNoThrow(opCode,uid,packageName)
info.gpx != null && info.file != null
mSyncStatus.valueAt(i)
TransactionMetadata::setInactive
XSourcePositionImpl.doCreateOpenFileDescriptor(project,this)
m.getDeclaringClass()
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
temporaryFolder.newFile()
instance instanceof FluidTank
retVal=(x != constValue)
mAccessibilityController.isAccessibilityEnabled()
ArrayList<Long>
Iterator<URLDetail>
Exception e
selenium.isElementPresent("link=Control Panel")
mockRegionInfo.isMetaTable()
LOGGER.fine(e.toString())
model.calculateBoundingBox(bbox)
EntryStream.of(1,1,2,null,3,null).nonNullValues()
mTfs.setPin(mTfs.open(path),true)
size > Message.MAX_SIZE || size < 0
Thread.sleep(1000)
Throwable e
c == Byte.class || c == Byte.TYPE
doConvertAndCast(returnType)
this.keycloakSession.users().getServiceAccount(clientModel)
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,false,userId)
Simple.forClass(skylarkType)
new ArgWriter(writer,true)
myModuleBuilder.modifyProjectTypeStep(settingsStep)
si.targetPermissionUid >= 0 && si.intent != null
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
case 14: 
locationUriNode.text()
List<UsageInfo>
Arrays.asList("round_robin","keep_all","keep_last","keep_none","metrics.neo4j","i.e","e.g","fixed_ascending","fixed_descending","high_limit")
DataStreamSink<OUT>
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
jsonModel.insert(async)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
message.isAsynchronous()
mJobs.valueAt(i)
mServiceMap.get(userId)
fileIds == null || fileIds.isEmpty()
policyResources.stream()
assertContainsParams(CollectionAdminRequest.createCollection("foo",null,1,1).getParams(),ACTION,NAME,ZkStateReader.NUM_SHARDS_PROP,ZkStateReader.NRT_REPLICAS)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
connections.get(target)
new RuntimeException(e)
parcel.writeString(mViewIdResourceName)
new Paint(Paint.ANTI_ALIAS_FLAG)
caretOffset > indent && document.getTextLength() > offset + indent
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
processEngineConfiguration.getCommandExecutor()
Integer.parseInt(taskIdStr)
i <= 6000L
Build.VERSION.SDK_INT < 24
config.getProperty("peer.p2p.pingInterval",5L)
!isConsole && !isOpOverride && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
outActivity != null && outActivity.length > 0
logger.trace("Session destroyed")
clients.values()
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
generateFluentSetters()
context.createTaskContext().addPipelineContext(0,true,true,false)
selenium.isElementPresent("link=Control Panel")
reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
createDouble(buffer.length(),init)
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
val > mMaxValue || result.length() > String.valueOf(mMaxValue).length()
pm.performDexOpt(pkg,null,true)
mPowerManager.isInteractive()
assertTrue(removed)
PublishSubject<Void>
addDaysAndCheckForCompletion(2,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
propExcludedDimensions.getIntList()
t.getCause()
new Runtime(mContext)
AnnotatedElementUtils.findAnnotationAttributes(controllerType,annotType)
new InspectionProfileImpl("Base",registrar,InspectionProfileManager.getInstance(),null,null)
message.getFilteredFields()
selenium.isElementPresent("link=Control Panel")
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0))
9 * 60 * 1000
incrementAppWidgetServiceRefCount(appWidgetId,fc)
typCategoryStr != null && !typCategoryStr.isEmpty()
{4,7,5,11,6,5,7,5,11,11}
length == 0 || !StringUtil.startsWithIgnoreCase(lookupString,prefix)
assertTrue("reuse-address",networkConfig.isReuseAddress())
assertEquals(400,((SoftValueHashMap)catalog.getResourcePool().getFeatureTypeCache()).getHardReferencesCount())
selenium.click("//li[4]/span/a/span")
engine.execute(query).dumpToString()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
DEBUG=false
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
jp.getLongValue()
blockUri.getIdentifier().toLowerCase()
rotateAround(axis,angle,true)
logger.debug("Error connecting to Plex",e)
appearance.getFloat(attr,0)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,null,false,false)
new MediaController(mContext,token)
Exception e
popupWindow.setContentWidth(menuWidth)
132 + (USE_OLD_HISTORY ? 1000 : 0)
!isVideoScalingModeSupported(mode)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_COMPRESS))
grantAlias == null || "".equals(grantAlias)
" firstActiveTime=" + firstActiveTime
MapRouteInfoMenu.isVisible()
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
errorPosition=obj.getInt("errorPosition")
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
dest.writeInt(mSubId)
mapTypeStringTransparency=R.string.map_transparency
qName.getComponents()
Trans != NO_TRANSPOSE
findDelegateForNewObject(name)
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
Loader.loadClass(klass,mName)
mPhones.contains(phone)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_USERNAME,true)
service.getDomain().id()
id >= holdingColor.length
Schema.builder().addNullableField("id",Schema.FieldType.INT32)
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
Integer.parseInt(patchVersionString)
JSONUtilities.safePut(options,"guessCellValueTypes",false)
MAGIC=0xCAFEBABE
canvas.drawArc(mArcRect,45,90,false,mPaint)
logger.warn("Couldn't read file: " + file)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
Preconditions.checkNotNull(root)
planDetailJson.getPlan()
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
typCategoryStr != null && !typCategoryStr.isEmpty()
interval * 1000L
kv.getValue() >= minMatch
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mService.setAppPolicy(UID_A,POLICY_NONE)
isAllowed()
config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)
GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,PythonFileType.INSTANCE)
id=14240
myIgnoredIdentifiers.contains(ref_text) || PyNames.COMPARISON_OPERATORS.contains(qexpr.getReferencedName())
tracesDir.mkdirs()
cause.getMessage().contains("Relative Redirect detected on")
DEFAULT_PORT=8888
testClass.getSimpleName()
selenium.isElementPresent("link=Control Panel")
uuids.split("/",2)
bottomLeft.addPlaceholder(DatabaseBrowserView.VIEW_ID)
assertThat(lastTrade.getFeeAmount()).isEqualTo("0.001")
mAttributes.getAllFlags()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
mResolver.stop()
field.getModifiers() == (Modifier.PUBLIC | Modifier.STATIC | Modifier.FINAL) && field.getAnnotation(Deprecated.class) == null
mService.reconnect(mContext.getOpPackageName())
headers.addValue("Vary")
IndexReader.open(dir)
final T view
assertEquals(3,matches.size())
ts.getJobId() == jobId
protected final MethodFlatteningResolver methodFlatteningResolver; 
lp.resolveLayoutDirection(layoutDirection)
StringBuilder buffer=new StringBuilder(); 
mCollapseOffset > 0
checkRequiredCaps(Caps.GLSL150)
resolveSession.getStorageManager().createMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
DeclarationDescriptorVisitor<Void,StringBuilder>
getConfigurables()
rj.reduceProgress()
getEndPoint().tryFillInterested(_blockingReadCallback)
sentHeaders.size() > 0 && sentHeaders.get(0).getNumber() > bestKnownBlock.getNumber()
file == null || beforeDir == null || afterDir == null
AbstractMap self
getFragmentManager().beginTransaction().add(android.R.id.content,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT)
fileSystem.renameFile(archive,archivedOutputFile(i + 1))
LOG.error(exception,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
in.readLong()
nestedTuplesSchemaHelper(64)
selenium.isElementPresent("link=Control Panel")
new SimpleDateFormat(RANGE_DATE_FORMAT)
Long.parseLong(attrValue)
src.getPlatformKind() == Kind.Int || src.getPlatformKind() == Kind.Char || src.getPlatformKind() == Kind.Short || src.getPlatformKind() == Kind.Byte
LinkedHashSet<String>
externalMediaDir.getPath()
MAX_PERCENT_DIFFERENCE=0.3
db.myBatis().openSession(false)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
Throwable e
new Paint(Paint.ANTI_ALIAS_FLAG)
type.getDeclaredConstructor()
id=33
getMyApplication().getSettings().getLastKnownMapLocation()
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)
uniqueConcreteType != null && !uniqueConcreteType.equals(type)
isGreaterOrEqual(platformVersion,M)
event.getRawY()
selenium.isElementPresent("link=Control Panel")
writer.writeUshort(getReferenceIndex(instruction))
distance / MILES_KILOMETRES_RATIO
selenium.isElementPresent("link=Control Panel")
VERSION=23
previous.last.compareTo(current.first) >= 0
size.height * 5 + 10
LogAdapter.createLog(name)
DISPLAY_TASKS_PORTRAIT + 1
COOKIE_SYNC_MANAGER=false
temp.reAddRight()
treePathTraverser(tree).expandAndFilter(tree::isExpanded)
amp*=0.0
isOptionalTagEnd || "body".equalsIgnoreCase(tagName) || "html".equalsIgnoreCase(tagName)
mReason=reason
entity.getUserSessionNotes()
LOGGER.warn("No file list editor found.")
j < count
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
parts.length > 1
stackIterator.remove()
inUtc || allDay
klass.getDeclaredFieldsUnchecked(false,declaredFields)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mService.setAppPolicy(UID_A,POLICY_NONE)
Throwable e1
Drawable.class
SamplingProfiler.newThreadGroupThreadSet(group)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
pubKeyStore == null
Log_OC.e(TAG,"Trying to share a NULL OCFile")
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
new Intent(Intent.ACTION_USER_PRESENT)
baseRevision != null && !baseRevision.getRevision().isEmpty()
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
matcher.lookingAt()
create().select(t1,t2,t3,t4,t6,t7,t8,t9,ta,tb)
trace.error(e,"removing server because of exception")
insertComponentImpl(newPublicProjectDto(organizationDto),false,dtoPopulators)
Long.parseLong(value)
scaleImage(scale,viewWidth / 2,viewHeight / 2,true)
justBootedUp
lp.resolveLayoutDirection(layoutDirection)
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"")
ComputeTaskTimeoutCheckedException e
_portal.getSiteDefaultLocale(groupId)
invoiceDao.create(invoice,1,true,context)
type.getDeclaredConstructor()
mImm.getEnabledInputMethodList()
UserHandle.myUserId()
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
_resourceExistsMap.get(key)
chargeUAh > 0 && level > 0
new Paint()
transitiveClosure.setNumberOfPartitions(3)
Thread.sleep(1000)
" firstActiveTime=" + firstActiveTime
assertPhoneNumberNotEqual("123123","0123123",false)
fill || textureImage != null
selenium.isElementPresent("link=Control Panel")
reply.getJMSMessageID()
return myDataPack; 
ZeppelinHubRepo.class
getViewRootImpl() == null || !getViewRootImpl().isInLayout()
new MongoClient(getPrimary())
!failureDesc.contains("14807") && !failureDesc.contains("14883") && !failureDesc.contains("11340")
sublistsIndices.keySet().stream()
getTupledSet()
mockBigtableSource.getRanges()
!Model.getSingleton().getSession().isNewState()
resp.setHeader("Access-Control-Allow-Origin",origin)
Pair<SimpleMatch,PsiElement>
disabledIf.map(DisabledIf::expression)
Math.min(20,myListModel.getSize())
dest.writeInt(mSubId)
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
new Paint()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
_typeSettingsProperties.toSortedString()
PaginationRequest.of(10,1)
metadata.getFaceRectangles()
parts.length > 1
line.startsWith(StringPool.TAB + "protected abstract class ") || line.startsWith(StringPool.TAB + "protected class ") || line.startsWith(StringPool.TAB + "protected enum ")
BeanFactoryUtils.beanOfTypeIncludingAncestors(context.getParent(),ConfigClientProperties.class)
0 <= f
Boolean.parseBoolean(attrValue)
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).switchIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
Class.forName("android.support.v7.widget.Toolbar")
telephony.isIdle(getOpPackageName())
mOverlay != null && mBottomOverlay != null && mRotation != RotationUtils.getExactRotation(mContext)
Long.parseLong(delay)
t.report(n,UNUSED_PRIVATE_PROPERTY,propName)
independentReserveOrderBook.getSellOrders()
new IllegalStateException("Advertising can't be both connectable and scannable")
mContext.sendBroadcast(intent)
Trans != NO_TRANSPOSE
fileChooser.setCurrentDirectory(defaultSelection)
new ShareType(url,CLIPBOARD)
_connector.getResponse("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
Mutation rm; 
myPriorityRange.intersects(element.getTextRange())
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
@Override public Response headers(Map<String,Property> headers){   this.headers=headers;   return this; } 
Cli.<Runnable>builder("presto")
setDozeInFrontAlphaDelayed(mAodFrontScrimOpacity,100)
Thread.sleep(1000)
verify(safeOutputStreamConsumer,times(7)).errOutput(anyString())
proxyHTTPSPort.getText()
BookmarksEntryUtil.fetchByPrimaryKey(entry.getPrimaryKey())
EqualityComparer<TKey>
@Nullable
Math.min(timestamp,dp_to_keep.kv.timestamp())
ONE_MINUS_DST_ALPHA(7)
delegatedResourceAccountIndexCapsule.getFromAccountsList()
log.error(message)
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED || error == FingerprintManager.FINGERPRINT_ERROR_CANCELED
field.getTypeDesc()
ParceledListSlice<ActivityManager.RecentTaskInfo>
Environment.getOemDirectory()
targetInfo != null && targetInfo.metaData != null
selenium.isElementPresent("link=Control Panel")
display.getRealMetrics(dm)
StepVerifier.create(Mono.just(0).then(Mono.just(1)).then(Mono.just(2))).expectNext(2).verifyComplete()
sortByName(false)
mSearchInput.setFocusableInTouchMode(focusable)
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
popupWindow.setContentWidth(menuWidth)
new TreeToBuffer(buffer,0,true,false,false,false,null){   @Override protected boolean shouldSkipNode(  TreeElement node){     return super.shouldSkipNode(node) || node instanceof PsiErrorElement || node instanceof PsiComment|| node instanceof LeafPsiElement && StringUtil.isEmptyOrSpaces(node.getText()) || node instanceof OuterLanguageElement;   }   @Override protected boolean showEmptyChildren(){     return false;   } } 
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
new RandomIndexWriter(random(),dir,cfg)
Optional.ofNullable(((IndicesRequest)message).indices())
Math.max(leftLen,rightLen)
getLogger().debug("\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() + "' was invalid or not found on any repositories.\n"+ "\tThis may not be supported by future versions of Maven and should be corrected as soon as possible.\n"+ "\tError given: "+ e.getMessage()+ "\n")
offset > editor.getDocument().getTextLength()
putBytes(v)
Integer.parseInt(attrValue)
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).subscriberContext(withAdmin)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isElementPresent("link=Control Panel")
mCurrentVrCompositorService == null
tile.getUrn().getModuleName()
cache.localPeek(1)
layerInput.size(0)
mMccStr == null
synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
TelephonyManager.getDefault().getCurrentPhoneType()
intermediateArtifacts.combinedArchitectureBinary()
logger.debug("AUTHENTICATE")
block.getEnchantPowerBonus(world,x,y,z)
data == null || data.trim().isEmpty()
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger || sourceObject instanceof PostgreViewBase
checkpointPath.toString()
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
final DirectoryReader r=w.getReader(); 
!exists
config.setTenantIsolationEnabled(false)
(UnsubscribeForm)actionForm
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
new IndexWriter(startDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
this.thrown.expect(IllegalStateException.class)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
new JarFile(mArchiveSourcePath,true,true)
generateRandomStringArray(20,10,false,false)
LinkageError e
value.toBigInteger()
selenium.isElementPresent("link=Control Panel")
mService.mAppOps.noteOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
clusterService().localNode().getName()
getCloneSettings(myProjectScheme)
layout.setReleaseLabel(label)
mAttributes.getAllFlags()
@Nullable
model.calculateBoundingBox(bbox)
assertEquals("val-1",mock.getExchanges().get(0).getIn().getBody(String.class))
m - 5d
Cheese.class
softClassCache.putIfAbsent(beanClass,results)
file.getMimetype() == null || !file.getMimetype().equals("DIR")
mSyncStatus.valueAt(i)
rematchAllNetworksAndRequests(networkAgent,oldScore)
LOGGER.warn("Could not parse URL",nfe)
response.location()
name + "." + expressionEntry.getKey()
(Long)criteria.uniqueResult()
selenium.isElementPresent("link=Control Panel")
new TextPaint()
SCAN_STATUS_PARTIAL=1
mContext.sendBroadcast(intent)
Float.valueOf(value)
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
tw.close()
protocolProvider.getProtocolDisplayName()
clean.setGroup(BUILD_GROUP)
dest.writeInt(mSubId)
parsedResult.getType()
subjectAlternativeNameIps != null
mPanProfile.isProfileReady()
log.debug("Double activation of navigator context")
r.curApp != null && r.curApp.curReceiver == r
getViewHeightWithTitle()
timeout=1800000
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
metaData.getColumnLabel(1)
from("direct:start").aggregator().header("id").batchTimeout(500L)
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
entry.getValue().getIdentifiesControllerService() != null && props.get(entry.getKey()) != null
query.components().toArray()
new IllegalArgumentException("the ast is null")
counter > max
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
args.length < 2
StringBuilder buffer=new StringBuilder(); 
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
type.getDeclaredConstructor()
List<CallServiceInfo>
verify(issueUpdater).setManualSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).verifyComplete()
Long.parseLong(attrValue)
dynamicType.getLoaded().getDeclaredConstructor()
Entry<String,U>
enabled=false
Long.decode(str)
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())
assertEquals(4,repos.length)
buildPages.getTypesWithoutHash()
_typeSettingsProperties.toSortedString()
requireActivity()
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
logger.fine("Parsing Dep: " + filePath)
backUpDirs == null || backUpDirs.length <= 1
public CharStreamAwareWhitespaceTokenizer create(Reader input){   return new CharStreamAwareWhitespaceTokenizer((CharStream)input); } 
loaded.getLoaded().getDeclaredConstructor()
expandableView.getIntrinsicHeight()
dbManager.getGenesisBlockId()
record == null || rawPhone == null
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
view.getClusteredLayerDegree(absNode)
expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
v != null && !postIDs[position].equals("draftsHeader") && !postIDs[position].equals("postsHeader")
ContactAccessor.getInstance().getNumbersForThreadSearchFilter(context,filter)
waitOnThreads(f10)
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
TelephonyManager.getDefault().getCurrentPhoneType()
matchAxisFilter != 0 || wrapAxisFilter != 0
stack.isVisible() && (imeOnBottom || isDockedOnBottom) && StackId.isStackAffectedByDragResizing(stack.mStackId)
idfr.identify(this.getClass().getResourceAsStream(tokens[0]),"UTF-8")
(InvocationTargetException)unwrapped
req.getContentLengthLong()
super.dispatchTouchEvent(cancel)
Files.newOutputStream(self)
currentResponse != null && currentResponse.getAuthentication() != null
mccMncs != null
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection,0)
_numAlphaFactors=10
Throwable e
numberOfPopulateTest=1000
new OneRun(50.0780,9.1570,49.5860,9.9750,91715,1413)
logger.error("Failed to load config file {}, falling back on default config",configPath)
receiverUserId != mCurrentUserId && !isUidALocationProvider(receiver.mUid)
!mConfig.hasTransposedNavBar
new Bitmap(nativeInt,null,isMutable,null,density)
defineClass("org.apache.catalina.loader.JdbcLeakPrevention",classBytes,0,offset,this.getClass().getProtectionDomain())
x + leftSmallWidth + rightSmallWidth
assertEquals(CodecFactory.xzCodec(9).toString(),serdeWrite.getCodec().toString())
sep < 0 || sep > j
log.warnf("Duplicate @At mapping ? path=" + path)
moveCursorTo(pac.getRow(),1)
new ConditionalWriteAction(characteristic){   @Override protected byte[] checkCondition(){     if (getDeviceInfo() != null && getDeviceInfo().isAmazFit()) {       return null;     }     int location=MiBandCoordinator.getWearLocation(getDevice().getAddress());     return new byte[]{MiBandService.COMMAND_SET_WEAR_LOCATION,(byte)location};   } } 
logoutConfigurer != null && logoutHandler != null
initialCapacity > 1 << 30
metadata.getFaces()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
outputArtifact != null && !isLtoIndexing
info != null && !mContext.getPackageName().equals(info.activityInfo.packageName)
nextTokenIs(b,IDENTIFIER)
mConnectionById.containsKey(callId)
mCaCerts != null && mCaCerts.length > 0
prev.getDifficultyTarget()
/**   * {@inheritDoc}  */ @Override public DoubleProperty clone(){   DoubleProperty prop=(DoubleProperty)super.clone();   prop.value=value;   return prop; } 
crashInfo != null && crashInfo.durationMillis != -1
private final Object key; 
new BufferedOutputStream(new FileOutputStream(newState.getFileDescriptor()))
selenium.isElementPresent("link=Control Panel")
objectManager.enqueueUnusedObject(this)
Map<List<Object>,T>
calendar.getTimeInMillis()
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
parsedVersion != null && parsedVersion.getDimensionForVersion() == dimension
selenium.isElementPresent("link=Control Panel")
Set<SkyKey>
new WorldPoint(2783,3214,0)
selectedUser.getUserId()
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
in1 >= 0x7f
rowsRet <= 0 || work.getLimit() == totalRows
findSetUpMethod(psiClass)
selenium.isElementPresent("link=Control Panel")
this.separator
timeout=120000
this.gatewayDelegate.setReplyChannel(replyChannel)
mUserManager.isUserUnlocked(userHandle)
DirectMessage.createDirectMessageList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
this.messageService.monoPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDh,unrotDw)
grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED
word2Vec.setSentenceIterator(iterator)
n.getNodeData().y()
this.seperator=separator
safeClose(connection)
setZrtpEncryptionOnDescription(mediaType,description,null)
selenium.isElementPresent("link=Control Panel")
Exception err
DEBUG=false
new OptionValue<>(false)
buffer.limit()
Thread.sleep(1000)
i < repeatCount
LOG.warn("Unable to close socket selector")
bucket.isExists()
mFlexItemInEdit.setWrapBefore(isChecked)
mPowerManager.isInteractive()
Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,true)
ProcessUtil.class
cs[0].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
retriever.getFrameAtTime(-1)
newConnection(this)
analysis.getType(aggregate)
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)
loaded.getLoaded().getDeclaredConstructor()
rematchAllNetworksAndRequests(networkAgent,oldScore)
mBindingServices.isEmpty()
UpgradeStepRegistrator.class
!or.isYNegated()
y + r
cache.localPeek(1)
lastUpdateTime2 >= lastUpdateTime
Preconditions.checkState(hasInstanceType(),"Expected a constructor; got %s",this)
VERSION=42
matcher.group(1)
results.size() == K && lastNode != null
new StringBundler(9)
EqualsBuilder.class
sourceHeight > 0
Boolean.parseBoolean(request.getParameter("notify"))
new IndexWriter(dir,new WhitespaceAnalyzer(),create,IndexWriter.MaxFieldLength.LIMITED)
realm.checkIfValid()
sentiment.getScore()
uri.indexOf("http://") == -1 && uri.indexOf("https://") == -1
i < repeatCount
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",20)
readWifiSleepPolicy()
mRemote.transact(GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
createTestBlockCapsule(1533529947843L + 12000,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,blockCapsule3.getBlockId().getByteString(),addressToProvateKeys)
mMediaPlayer.isPlaying()
twitter.getDailyTrends()
NUMBER_OF_IDS_PER_THREAD=40000
from >= to
mCurrIconRow != null && mCurrIconRow.isVisible()
mCallback.onInputUpdated(inputId)
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,1000)
dynamicType.getDeclaredConstructor()
command.getDeviceId()
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
next.handle(request).then(responseProcessor)
assertEquals(2,props.getConfigPathPatterns().length)
DataStreamSink<OUT>
((StringLiteral)literal).getValue()
LOGICAL_TYPE_TIME_MILLIS.equals(logicalName)
10 * 1024
selenium.isElementPresent("link=Control Panel")
new CompositeException(t,e)
proxy == null
loaded.getLoaded().getDeclaredConstructor()
typeSettingsProperties.toSortedString()
V
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
gatherWriteActionStatistics && myWriteActionsStack.isEmpty() && !myWriteActionPending
mPanProfile.isProfileReady()
delaySoFar >= mReEnableDelayMillis
now + 888888
new HttpOpenListener(new ByteBufferSlicePool(BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,8192,8192 * 8192),8192)
Boolean.parseBoolean(System.getProperty("cassandra.consistent.rangemovement","true"))
Thread.sleep(1000)
bicyclePriorityValues.put("bridleway",0.8d)
toCal.get(Calendar.ERA)
printLine("Unable to connect due to unrecognised server certificate")
connector.getFilterChain()
os.write(bytes,0,len)
actionAdapter.execute(null,null,null)
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
fragmentEntryPersistence.findByG_FCI(groupId,fragmentCollectionId,start,end)
status().isFound()
type.getDeclaredConstructor()
cSet.getConceptSet()
BufferUtil.zeroBuffer(1)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
selenium.isElementPresent("link=Control Panel")
myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),classesFilteredView)
outputRowMeta.mergeRowMeta(data.fileRowMeta[i],meta.getName())
Cheese.class
selenium.isElementPresent("link=Control Panel")
in.readLong()
flags_=6
logger.error("Repair session " + future.session.getName() + " failed.",e)
pMotionEvent.getY(1)
GL20.glGetVertexAttribiv(index,pname,params)
commandExecutor.evalWriteAsync(getName(),codec,EVAL_GET_TTL,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "if value == false then " + "return nil; "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return nil; "+ "end; "+ "return val; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
selenium.isElementPresent("link=Control Panel")
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
!getLocationEnabled()
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
v.getTableId() == LobStorageFrontend.TABLE_RESULT || v.getTableId() == LobStorageFrontend.TABLE_TEMP
mNavigationBarView.inScreenPinning() || mStatusBar.isKeyguardShowing()
Log.w(TAG,"readStaticField(SYSTEM_SERVICE_MAP) from %s fail",e,baseContext.getClass())
expandableView.getIntrinsicHeight()
new AndroidInstrumentationInfo(targetApk,instrumentationApk)
mQsDensityContainer.getLayoutParams()
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
field.getType()
SDK_INT >= JELLY_BEAN_MR2
deleteTaskView.animate().setDuration(300).scaleX(0.9f)
selenium.isElementPresent("link=Control Panel")
scoreobjective1 != null
uri == null || uri.length() == 0
localExclude != null && localExclude.isValid()
replace(wmlTemplateString,new StringBuilder(),mappings)
t.join(0)
private Text text; 
_sumsqe / _wsum
Log.e(tag,msg,tr)
AvroValue<GenericRecord>
file == null || beforeDir == null || afterDir == null
ft.add(R.id.layout_fragment_container,readerFragment,tagForFragment)
new INodeDirectory(oldinode,true)
MetadataInstrument2.class.getSimpleName()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new NotificationCompat.BigTextStyle().bigText(newErrorMessage)
accountHandle.getComponentName().flattenToString()
mPolicy != null && wasPowered
logger.getLogger().warning("Shut down master")
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
isDelegateLastClassLoaderName(classloaderName)
child.resetRtlProperties()
cursor == null
selenium.isElementPresent("link=Control Panel")
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),OsProbe.getInstance().osStats(),ProcessProbe.getInstance().processStats(),JvmStats.jvmStats(),new ThreadPoolStats(threadPoolStats),new FsInfo(0,pathInfo),null,null,null,null,null,null)
ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())
faultSerialVersionUID.equals(FaultSerialVersionUID.TIMESTAMP) || "TIMESTAMP".equals(faultSerialVersionUID)
new BranchedDataException("Unable to perform a mandatory sanity check due to an IO error.",e)
mConnector.execute("volume","format",vol.id,"auto")
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
Numeric.toHexStringWithPrefixSafe(filterId)
Variable emitArrayEquals(Kind kind,Value array1,Value array2,Value length); 
/**   * Represents a dependency on another Eclipse project.  */ public interface EclipseProjectDependency extends ProjectDependency, HasClasspathAttributes {   /**   * Returns the target of this dependency.  * @return The target project, or null for a dependency on a different build within a composite.  */   HierarchicalEclipseProject getTargetProject();   /**   * Returns the project directory of the target eclipse project.  * @return The target project directory, never null.  * @since 2.14  */   @Incubating File getTargetProjectDirectory();   /**   * Returns the path to use for this project dependency.  */   String getPath();   /**   * Marks this dependency as exported.  * @return whether this dependency needs to be exported.  * @since 2.5  */   boolean isExported(); } 
targetState == STATE_EXPANDED && interpolatorAnimator != null
mEncoder.swithToHardEncoder()
mDarkIntensity != DARK_INTENSITY_NOT_SET
new SolrException(400,"Operation requires schema to have a unique key field")
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
viewGroup == null || viewGroup.getChildCount() == 0
tableIdx == table.array.length() && tableIterator == null
POOL_LIMIT=100
SmackConfiguration.getVersion()
AuditManager.class
mService.setAppPolicy(UID_A,POLICY_NONE)
p == null || t < -1
success()
msg.getMessageId().setEntryLocator(id)
mergeWithParentCategory && !oldCategoryId.equals(parentCategoryId) && !parentCategoryId.equals(MBCategory.DEFAULT_PARENT_CATEGORY_ID)
mAuthorities.valueAt(i)
new IllegalStateException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
BASIC_CONSTRAINTS(org.bouncycastle.asn1.x509.Extension.basicConstraints)
DBSSchema.class.isAssignableFrom(childType) || DBSEntity.class.isAssignableFrom(childType)
model.getProductOptionValidationType()
mAssetManager.openFd(mAssetName)
future.get(30,TimeUnit.SECONDS)
indexMap || indexAddress || indexTransport|| indexPOI
public static VideoContent createRemoteVideo(FileReference reference,int w,int h,int duration,FastThumb fastThumb){   return new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration)))); } 
anyInt()
from > to
new LinkedFileViewModel(linkedFile,entry,databaseContext,dialogService,taskExecutor)
fileLock != null && fileLock.isValid()
log.i(LOG_TAG,"ACRA processName='" + processName + "'")
data.contains("siamese") || data.contains("white")
mProgressDialog != null && !isFinishing()
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
clearTetheredNotification()
private String mViewIdResourceName; 
1
-Math.sin(Math.PI / 8)
-1
collectJSVariables(clazz,candidates,false,false,true,true,true)
constraint.hasCondition()
Throwable e
bs.getDependsOnMethods()
TopLevelBuildData topLevelBuildData=getBuildData(); 
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
mJobs.valueAt(i)
selenium.isElementPresent("link=Control Panel")
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
GlobalPlanImplV0.class
c.getLocalDeletionTime() < gcBefore
/**   * set if this item is enabled  * @param enabled true if this item is enabled  * @return  */ public Item withEnabled(boolean enabled){   this.mEnabled=enabled;   return (T)this; } 
aClass != null && GroovyRunnerUtil.canBeRunByGroovy(aClass)
selenium.isElementPresent("link=Control Panel")
BackupManagerServiceInterface svc=mService; 
createQuery(jpaqlString)
odbcUrl.lastIndexOf(project)
pair.getSecond() < best.getSecond()
tag_names.getId("dc")
old + 23
tracesDir.mkdirs()
CompletableFuture<Void>
LOG.warn("OpenTracing: Failed to capture tracing data",t)
unresolvedReferenceDiagnostic.getPsiElement()
AndroidExcludedRefs.createAppDefaults()
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
(Float)o
projectName.equalsIgnoreCase(executable.getProjectName())
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
valid || !file.isDirectory()
mySecondComponent.getPreferredSize()
Preconditions.checkState(subscriptionId != null || !failOnMissingSubscription,"Missing subscription id")
findDelegateForNewObject(name)
Arrays.asList("com.google.errorprone.MaskedClassLoader$MaskedFileManager","com.google.devtools.build.buildjar.javac.BlazeJavacMain$ClassloaderMaskingFileManager","com.google.devtools.build.java.turbine.javac.JavacTurbineCompiler$ClassloaderMaskingFileManager","org.netbeans.modules.java.source.parsing.ProxyFileManager","com.sun.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager","com.sun.tools.javac.main.DelegatingJavaFileManager$DelegatingSJFM")
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
Network.connectToServer("localhost",5110)
zkController.getZkStateReader().getReplicaProps(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())
final Throwable lastException
native_get_videoeditor_export_level(vidCodec)
indexBuf.getData().limit()
inLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
mService.factoryReset(mContext.getOpPackageName())
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent) || mRunning2dInVr != running2dInVr
days >= 2 || (days > 0 && hours == 0)
6 * width * height
Futures.transformAsync(actionInfoFuture,actionInfo -> uploadInputs(rule.getBuildTarget(),actionInfo),MoreExecutors.directExecutor())
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
ImapException ie
DatabaseDescriptor.getRpcAddress().getHostAddress()
LOG.trace("data:" + StringUtils.byteToHexString(data))
null != entity && null != entity.getIdProperty()
isAllowed()
isDismissed || outerCircleCenter == null
annotationHolder.createWarningAnnotation(expression,message)
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,false)
selenium.isElementPresent("link=Control Panel")
needApply=10
iterator.atEnd() || iterator.getStart() != offset
i < 3
seriesInfo.Index.toPlainString()
getFragmentManager()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
i <= maxIndex
level < 0 || values.length == 0
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(mAm.mContext,TAG,pw)
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
new JsonUtf8Writer(sink)
mUiHandler.removeCallbacks(pae)
fluidFuel.getBlockID()
rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1
b.append(y)
content=nc
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_ENABLED,0,null,false)
selenium.isElementPresent("link=Control Panel")
coloring.length() > 0 && Character.isDigit(coloring.charAt(coloring.length() - 1))
Thread.sleep(2500)
getServerManager().getProperties().containsKey("meiligao.server")
log.error("Problem in JSR223 script ",e)
Gdx.files.internal(fileName).pathWithoutExtension()
LayoutSet.class
prefsWriter.apply()
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_REMOVED,null,false,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
MAX_OPEN_TRANSACTIONS=65535
CollectionUtils.filter(sources,routes,new Spec<File>(){   @Override public boolean isSatisfiedBy(  File file){     return file.getName().equals("routes");   } } )
Throwable ex
field.getCommonType()
threadHandler.get().postAtFrontOfQueue(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
bulkSize > NO_BULK_REQUESTS && remainingUpstreams.get() > 0
username == null
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED)
Number value
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false,1)
data == null || method.toLowerCase().equals("get") || method.toLowerCase().equals("head")
((SQLDataSource)dataSource).getSQLDialect().storesUnquotedCase()
new IllegalStateException("Advertising can't be both connectable and scannable")
state.mBitmap == null && (state.mThemeAttrs == null || state.mThemeAttrs[R.styleable.BitmapDrawable_src] == 0)
parameterTokens.set(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
attributes.getAllFlags()
um.getUsers(true)
Thread.sleep(200)
Long.parseLong(deadline)
driverPropertySource.getPropertiesWithDefaults()
Assert.notNull(fl,"Cannot find root deserializers")
order.getSize()
/**   * set if this item is selected  * @param selected true if this item is selected  * @return  */ @Override public Item withSetSelected(boolean selected){   this.mSelected=selected;   return (T)this; } 
builder200.build()
speed < 33
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
type=200
KeycloakHttpServerAuthenticationMechanism.class
Float.parseFloat(strings[i])
data.lineBuffer.size() < meta.getNrFooterLines()
mQsDensityContainer.getX()
addRewrite(0x0A,ProtocolConstants.Direction.TO_SERVER,true)
new OwnCloudVersion(0x040004)
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection,0)
updateChildren()
UndertowLogger.ROOT_LOGGER.debug("JDK9 ALPN not supported")
LOGGER.warn(msg.apply())
mRingingCallState == other.mRingingCallState
client.get().uri("/").exchange().expectStatus().isOk().expectBody(String.class)
mCurrIconRow != null && mCurrIconRow.isVisible()
onlyRemoveOutdatedData || isTooLarge(file)
return GCM; 
!cncFile.exists() || cncFile.length() <= 0
classMapper.serializedClass(wrap.testPlan.getClass())
BackupManagerServiceInterface svc=mService; 
ImmutableList<Symbol>
Environment.getOemDirectory()
SharingEntryActionKey::getBitwiseValue
batchConvertMergedAnomalyBean2DTO(list,true)
dockedBounds.left - dockDividerWidth
assertFalse(mDisabled.hasFocus())
hasColumn(tableName,columnName)
CookieDecoder.decode(aCookieHeader,false)
getDatabaseSchema() != null && getDatabaseSchema().length() > 0
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
engine != null
msg.getAllRecipients()
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
resultSetView.getGridControl()
addVault(file.toPath(),true)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
THUMBNAIL_APP_TRANSITION_DURATION=325
assertEquals(20,sqlStatements.get(2).getLineNumber())
(UndeclaredThrowableException)unwrapped
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetadata,mergedManifest,keystore)
maxCards[i]=maxCardinality
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
Timber.e(errorMsg)
screenX != 0 || screenY != 0
dependency.getManifestEntry("Export-Service")
getWholePanel()
logger.debug("Could not fetch {} result for type: {} and filter: {}. Using default value '0': {}",requestedKey,entriesType,entriesFilter,ex.getMessage(),ex)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_GOOGLE_ACCOUNT,true)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && getSupportActionBar() != null
mPowerManager.isInteractive()
LocaleUtil.getSiteDefault()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
deltao.mmul(Nd4j.diag(wOO))
selectionArgs[0]
PART_COUNT=1000
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))))
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
Object[]
assertMockEndpointsSatisfied(30,TimeUnit.SECONDS)
actionForm.getMultipartRequestHandler()
anyOf(nullValue(),(Matcher)allOf(instanceOf(Long.class),greaterThan(0L)))
realm.checkIfValid()
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
assertPhoneNumberNotEqual("123123","0123123",false)
getJSONValue(activity.getExtraData(),"title",kbTemplate.getTitle())
new FileNotFoundException(getURL() == null ? "null" : getURL().toString())
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
public Integer getFileSize(){   return fileSize; } 
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[buildfile]","includes = //java/com/facebook/defaultIncludeFile","[project]","check_package_boundary = false")
MetadataMismatchException e
shuffleWithNonExistentUuids(project2.uuid(),project1.uuid())
ColorProperties.getColor("tabbedPaneBorderHighlight")
Thread.sleep(10)
_typeSettingsProperties.toSortedString()
valueMono.switchIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
written.get()
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
logger.trace("myq securityToken: {}",securityToken)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
AssetTagFinderUtil.countByG_N(_scopeGroup.getParentGroupId(),assetTagName)
selenium.isElementPresent("link=Control Panel")
Object... selected
retVal=(x == constValue + constValue2)
jid.split("/",2)
receiverType.getSetterMethod(setter,false)
context.getString(R.string.history_attach_added,attachmentName,item)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
appName != null && searchManager.getSearchableInfo(appName) != null
previousState.getNextCall()
Sets.difference(queryIdsSnapshot,liveQueries)
new IllegalArgumentException("refresh token invalidation cannot be serialized with version [" + out.getVersion() + "]")
commit.getTime()
client.srandmember(key,count)
SCAN_STATUS_PARTIAL=1
!ops.graph().isFrozen() && vertex.vertexID() == newVertex.vertexID()
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
logoutRedirect != null
flexItem.getMarginLeft()
StringBuilder pattern=new StringBuilder(this.prefix); 
id=10803
String message
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
IllegalArgumentException e
handshake.getProtocolVersion()
1533529947843L + 3001
new IllegalArgumentException("Cannot determine if commit is consistent")
mMccStr == null
value.toLowerCase().startsWith(constraintLowerCase)
buffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY)
!Values.UPGRADE.equalsIgnoreCase(connection)
(Double)countObj
Integer.parseInt(stackIdStr)
gavin.getStudentNumber()
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
163 + (USE_OLD_HISTORY ? 1000 : 0)
RESULT_TIMEOUT=5000
state == _JavaDocLexer.COMMENT_DATA || myTokenEndOffset < myBufferEndOffset && (myBuffer[myTokenEndOffset] == '@' || myBuffer[myTokenEndOffset] == '{')
callbacks.onHardwarePreDraw(canvas)
private Throwable maybeAttachBuildRuleNameToException(@Nonnull Throwable thrown){   if ((thrown instanceof HumanReadableException) || (thrown instanceof InterruptedException)) {     return thrown;   }   String message=thrown.getMessage();   if (message != null && message.contains(rule.toString())) {     return thrown;   }   return new RuntimeException(getErrorMessageIncludingBuildRule(thrown),thrown); } 
Map<String,InspectionToolWrapper>
initialCapacity > 1 << 30
onFocusChange(mHostUrlInput,false)
asyncProcessor.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
index=1
isDoubleCategory(typeRe)
mHandlerCaller == null
assertEquals(4,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())
T item
UniqueId.forEngine(engineId)
tempPinnedTaskBounds != null && stack.isAnimatingBoundsToFullscreen()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
targetDirectory.file("unwritable")
new DuplicateOrganizationException("There is another organization named " + name)
disable2ForUser(what,token,pkg,mCurrentUserId)
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),null,ScaleType.CENTER_CROP)
location.add(deltaX / delta,deltaY / delta,deltaZ / delta)
loading.dismissAllowingStateLoss()
DateFormat.getMediumDateFormat(context)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
new int[681]
mWidth - mMinWidth
apex.stagePackage(mResolvedBaseFile.toString())
elementToHighlight == null || elementToHighlight.getTextRange().getLength() == 0
db.needUpgrade(9)
res + _bias
ret.setComplete(e,response)
this.version(System.getProperty(VERSION,DEFAULT_VERSION))
clazz.getName()
sourceSet.getOutput()
getMeasuredWidth()
this.params.getItem()
recipient.getExpireMessages() * 1000L
Simple.forClass(value.getClass())
TCN_RECOMMENDED_PV=8
CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
executeJobExecutorForTime(10000,200)
optQuery(new JSONPointer(jsonPointer))
logger.debug("Mlock successfull")
Long.parseLong(val)
isLinux(expectedSql)
selenium.isElementPresent("link=Control Panel")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_highlight_bg))
LOGGER.error(msg.apply())
bs.getName()
case OK: 
LinkageError e
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
WriteReplyToCommentActivity.ACTION_NOTIFICATION_REPLY.equals(getIntent().getAction()) || WriteReplyToCommentActivity.ACTION_SEND_FAILED.equals(getIntent().getAction())
accountHandle.getComponentName().flattenToString()
velocity / flingThreshold
info.getIccSerialNumberForSubscriber(subId,mContext.getOpPackageName())
fileSystem.renameFile(backup,file)
aCheckIn("101","foo/bar.baz")
new StringBuilder(253)
jmsConfig.getMaxSuspendedContinuations()
version > 1
!(response instanceof Response) || baseRequest.getResponse().isWriting()
(pnrows-=(espc[_pcidx + 1] - espc[_pcidx])) >= 0
convert(connection.getRedisClient().getAddr())
new HashSet<>(0)
ZKMetadataProvider.getOfflineTableConfig(propertyStore,tableName)
file == null || file.getVirtualFile() == null
new NullOutputOperatorFactory(operatorId,sourceTypes)
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
new ArrayList<>(0)
dest.writeInt(mTxPower)
manager != null && manager.server != null
WorkflowDefinitionLinkLocalServiceUtil.getDefaultWorkflowDefinitionLink(company.getCompanyId(),assetClassName,0,0)
PULL_TIME=167
session.executePost(urlPath,parameters,responseHandler)
out.writeByte(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
view.getClusteredLayerDegree(absNode)
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
selenium.isElementPresent("link=Control Panel")
layer.mDrawable == null && (layer.mThemeAttrs == null || layer.mThemeAttrs[R.styleable.LayerDrawableItem_drawable] == 0)
hasFocus() && showClearButton && isEnabled()
loaded.getLoaded().getDeclaredConstructor()
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(true)
hook.step(program,opcode)
-mapView.getMapOrientation()
create().select(t1,t2,t3,t4,t6,t7,t8,t9,ta,tb)
new LeftTuple(f0,sink)
1
Integer.parseInt(taskIdStr)
params[1]
return false; 
word=END_WORD
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
/**   * Closed connections.   */ @GridToStringExclude private final LongAdder8 closed=new LongAdder8(); 
assertThat(registration.getScopes()).containsOnly("openid","profile","email")
keySyncOperation.startsWith(targetKey)
a.getName()
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
Integer.parseInt(this.getOptional("kylin.server.auth-user-cache.max-entries","100"))
mPlayer.getCurrentPosition() * 1000L
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + c.txt","D a.txt")
myViewingPanel.requestFocus()
StringUtils.isNumeric(queryTimeout)
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
callTimeout=10000
NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST=true
Thread.sleep(1000)
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
isAllowed()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
type.getSimpleName()
terminationPos % 2 == 0 && data[terminationPos + 1] == (byte)0
!showNotifications.isNull()
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
Never
Log.w(mTag,"Adjusting remote volume without a controller!")
selenium.isElementPresent("link=Control Panel")
public static final String WS_EXTENSIONS_HEADER_NAME_LOWER=WS_EXTENSIONS_HEADER_NAME.toLowerCase(Locale.ENGLISH); 
dependency.getManifestEntry("Export-Service")
getDelegate().getDefaultCipherSuites()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
checkValidHandle(muVMatrixHandle,null)
synchronized (this) {   return (Class[])classCache.values().toArray(new Class[0]); } 
DEBUG=false
m.size()
item.isChecked()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).descriptionAndTooltip(message)
app.getSettings().AVOID_UNPAVED_ROADS.getModeValue(params.mode)
artifact.getExecPath()
ParamUtil.getInteger(actionRequest,"type",GroupConstants.TYPE_SITE_OPEN)
public class XpathRegressionHiddenFieldTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"10:34: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"value")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS" + "/PARAMETER_DEF[@text='value']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"other")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
Thread.sleep(10)
selenium.click("//li[4]/span/a/span")
string.toLowerCase(Locale.US)
logger.debug("Cannot add group member ({})",e.getMessage())
UIUtils.createComposite(panel,2)
ChannelBuffers.wrappedBuffer(request.getByteData())
!disableBluetoothContactSharing
mConnector.executeForList("volume","list","broadcast")
LOGGER.debug("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
Long.parseLong(value)
keyed=true
!mDreamsEnabledOnBatteryConfig
Throwable e
((ChannelProgressivePromise)promise).tryProgress(progress,-1)
tracker.timeUpperBound=1000
testClass.getSimpleName()
formatTimeMs(scanWifiLockOnTime / 1000)
qs[1]
mockResultSet.getLong(1)
@Deprecated
result.add(pos)
currentStage != NodeStage.DONE && sendMessage() == false
generateFluentSetters()
wrapped.equals(pongMessageHandler)
selenium.isElementPresent("link=Control Panel")
JavaCompletionData.addExpectedTypeMembers(parameters,result)
private final ReplayingDecoderByteBuf replayable=new ReplayingDecoderByteBuf(); 
new PullImageCmdImpl(NOP_EXEC,null,"")
RuntimeVersion.isAtLeast11()
findDelegateForNewObject(name)
Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor()
runtime.lookupType(returnType,(HotSpotResolvedObjectType)accessingClass,false)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
iconicsDrawable.iconText(mPlainIcon)
findServerName(server,serviceSubject)
error.expectedMinimumMessageCount(2)
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
@Nullable
rootVDir.refresh(true,false)
format == BarcodeFormat.UPC_E && rawText.length() == 8
selenium.isElementPresent("link=Control Panel")
Integer.parseInt(leftStr)
getDelegate().getDefaultCipherSuites()
TimeUnit.SECONDS.toMillis(5)
BackupManagerServiceInterface svc=mService; 
getExecutionContext()
from("direct:a").delay(5000)
ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
annotationReader.ofTypeVariableBound(index)
incomingEdges.containsKey(dest)
classNode.hasDeclaredMethod(methodName,parameterTypes)
DataStreamSink<OUT>
indexData.rewind()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
applicationContext.close()
stdErr.println(ansi.asErrorText(message))
LOG.warn("Ignoring duplicate class " + className)
ReflectionUtil.forName(this.owner)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
LOG.error("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
endFunction("write_partition_column_statistics: ",ret != false,null)
localBinder.getServiceInstance().restartScan()
tw.close()
Preconditions.checkNotNull(jobName,"Streaming Job name should not be null.")
logger.error("Item not found error while generating chart.",e)
log.info(error,cause)
vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager())
mThumbnail.copy(Config.HARDWARE,false)
type.isEmpty()
conditionCache.get(method)
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
lineArgs[4]
mColumn + (x - 0.5f) * 4 + 1.25f
WINDOW_FREEZE_TIMEOUT_DURATION=2000
this.httpHeaderNames.put(KEYCLOAK_USERNAME,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
singleModelJSONObjectBuilder.nestedField(head,tail).field(HYDRA_OPERATION)
mSharedElements.size()
RetryHandlingBlockMasterClient.class
!mRenderNode.isPivotExplicitlySet()
Boolean.valueOf((String)disableMultipart)
!deferEnsuringVisibility
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
layerType != LAYER_TYPE_SOFTWARE
m.size()
hasCapability(GPS_CAPABILITY_MSB)
i >= speedBumpIndex
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport() || useGridLayout()
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBeforeOrEqualsTo(new Date())
uri == null || "thing".equals(uri.getScheme()) == false
mFormNamesAndURLs.isEmpty() && getLastNonConfigurationInstance() == null
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE)) && (pn.getCountryCodeSource() == PhoneNumber.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN)
node.getClass().getMethod(methodNames[column])
new SynthesizedAnnotationInvocationHandler(annotation,annotatedElement,getAttributeAliasMap(annotationType))
httpClient.getSSLSocketMiddleware()
trade.getPrice()
checkCallerIsSystemOrShell()
new Paint(Paint.ANTI_ALIAS_FLAG)
invertedIndex.getMutable(i)
Exception ex
container.addon.updateBuildingInfo()
ALL_ARGUMENTS.OVERLOAD.isNotDistinctFrom(getOverload())
_getVersion()
i <= DatabaseDescriptor.getIndexInterval()
/**   * Callback that is invoked <em>before</em> all  {@code @BeforeAll} methods have been invoked.  * @param context the current container extension context  */ void beforeAll(ContainerExtensionContext context) throws Exception ; 
new AntTypeDefinitionImpl(id,typeClass.getName(),isTask,attributes,nestedDefinitions,helper.getExtensionPointTypes(),null)
Throwable e
i=1
simple.getFromReceivedDate()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT || mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_VR
new UnsupportedOperationException(getClass().getName())
mf.getColumnNameInSql()
statistics.addGetTimeNanos(System.nanoTime() - start)
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SERVER_ERROR,getHttpStatusSeries(result))
new JavaScriptAggregatorFactory(input,Arrays.asList(input),fnAggregate,fnReset,fnCombine)
getConcept() != null && getConcept().getName() != null
!isSmartLockAvailable()
LOGGER.debug("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
from > to
log.d(LOG_TAG,"ACRA processName='" + processName + "'")
CompositeBlockWrapper parent
DEBUG=false
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
mAttributes.getAllFlags()
StringBuilder buffer=new StringBuilder(); 
operandStack.remove(3)
logger.warn("",ex)
method != null && Throwable.class.isAssignableFrom(method.getReturnType())
mConnector.executeForList("volume","list","broadcast")
"weighting " + weightingStr + " not supported"
myBook.addUidWithNoCheck(uid)
assertEquals(3,steps.size())
servletClass != null || filterClass != null
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
Number rate
pane.setPreferredSize(new Dimension(300,80))
executionJobVertex.getMaxParallelism()
!file.getName().startsWith("branched-")
logger.trace("rapidRefreshFutureEnd stopping")
new ListenerInfo("http",server.getLocalAddress(),openListener,null,server)
new MultipartEntity(getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT,null,Charset.forName(contentEncoding))
ActivityRecord r=(ActivityRecord)it.next(); 
!mDreamsEnabledOnBatteryConfig
if (override) {   sb.append("\" !important;"); }  else {   sb.append("\";"); } 
UI_MODE_SERVICE.equals(name)
"none".equals(max_items)
Optional.ofNullable(privateKeyFile)
Integer.toHexString(flags)
delaySoFar >= mReEnableDelayMillis
new MapProducerCapabilities(false,false,false,false,null)
context.currentSynchronizedProcessingTime()
Color.blue(endColor)
return ctx; 
selected != null && selected != current
s > 1e-4
RELEASE_DELAY_MS=240
selenium.isElementPresent("link=Control Panel")
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error))
Element.F64_2(mRS)
Priority.getInstance()
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
settings.ANIMATE_MY_LOCATION.get() && !smallSpeedForAnimation && !movingToMyLocation&& settings.WAKE_ON_VOICE_INT.get() == 0
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static CharSequence get(CharSequence self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
IllegalArgumentException.class
new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)
resolve(res)
Throwable e
new MockQueryExecution(2)
context.formatNewLine()
MonitoringPortlet.isMonitoringPortletEventRequest()
LOG.debug("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
List<UsageInfo>
surfaceHolder.setSizeFromLayout()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
webRequest.getServletContext()
BorrowablePath.notBorrowablePath(output.getUnchecked())
WebSocketEventListener.class.cast(l).onHandshake(event)
Long.valueOf(3)
(mOomMinFreeHigh[5] * 7) / 4
formalParamType.asReferenceTypeUsage().isRawType() || actualParamType.asReferenceTypeUsage().isRawType()
clientCodeVerifier == null
mavenBundle().groupId("org.conscrypt").artifactId("conscrypt-openjdk-uber").versionAsInProject()
assertPhoneNumberNotEqual("123123","0123123",false)
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0))
sslService.getHttpTransportSSLConfiguration()
_log.warn(ioe,ioe)
localHosts[i]
StringBuilder buffer=new StringBuilder("("); 
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
sysPkg != null && sysPkg.pkg != null
mRepeat > 0
from >= to
checkCall(receiver)
RESULT_TIMEOUT=5000
Exception e
mDrawerItems.size() > position
touchEventPool.freeAll(touchEvents)
next.getField(1)
LOG.debug("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
StringUtils.isNotEmpty(xml)
getLlvmReturnType()
@Override
failingOnThis.without(UpgradePolicy.canary).startedFailingOn(version)
type.getDeclaredConstructor()
this.artifactServerFactory=artifactServerFactory
assertEquals(false,StringUtils.isAlpha(""))
getViewHeightWithTitle()
return true; 
ZipUtil.unzip(null,courseDir,file,null,null,true)
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",true))
height <= 0
mBiometricUnlock.stop()
server.getPlayerExact(name)
selenium.isElementPresent("link=Control Panel")
LogFactory.getLogger().debug("Could not find table or view " + tableName + " for column "+ columnName)
ciManagement.getSystem()
annotationHolder.createWarningAnnotation(expression,message)
return false; 
AudioFormat.isEncodingLinearFrames(mAudioFormat)
id=24
size > Long.MAX_VALUE / unit.toBytes(1)
return mDisappearingDelay; 
makeString(list,",","(",")")
sentencesFile != null
RedisRunner.shutDownDefaultRedisServerInstance()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
LOG.warn("Ignoring duplicate class " + className)
old.getScore()
SIDE_MARGIN_DIP=100
it.current() == '/' || it.current() == '.'
connection.psubscribe(jedisPubSub,patterns)
String message
Throwable e
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
graphModel.getUndirectedGraphVisible()
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,93700,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
LOG.error("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace)
LowLevelSearchUtil.processElementsContainingWordInElement(occurenceProcessor,psiFile,searcher,true,new EmptyProgressIndicator())
messages.size()
in.getDepth() >= outerDepth
ICompactionScanner scanner
spec.getReflection()
PsiType[]
from >= to
preMergedCustomer.isRegistered()
assertEquals(3,result.getAuthorities().size())
_addTestVariant("small.hd","uuid1",101,100)
osmandSettings.DAYNIGHT_MODE.get().toHumanString(this)
surfaceChanged || surfaceGenerationId != mSurface.getGenerationId()
response != null
QUEUE_TRANSACTION_LOG_RECORD=44
acrComparator.compare(prevRow,compactedRow) >= 0
typeInfoList[type.ordinal()].toArray(new BiomeGenBase[0])
this.xpath.setInitialText(xpath)
this.getString(R.string.shared_string_release).toLowerCase()
DEFAULT_WAKE_LOCK_TIMEOUT=60000
getModel().getColumnCount()
new NativeAllocationRegistry(Canvas.class.getClassLoader(),getNativeFinalizer(),NATIVE_ALLOCATION_SIZE)
"Missing " + gradlePropertiesPath
LinkedHashSet<XmlElementDescriptor>
Lists.newArrayList(condaExecutable,"create","-p",destinationDir,"-y","python=" + version)
lastPos < mTargetPos
sslPrincipal.getName()
resolveMethodByThrowable(exception)
_buildTemplateWithGradle("control-menu-entry","entry-dependency-management","--dependency-management-enabled")
phoneDisplayHeight == actionBarOverlayLayoutHeight && actionBarOverlayLayout.getPaddingTop() == 0
barrier.await(2,TimeUnit.SECONDS)
currentType != Type.INT
ImportAutoConfigurationWithItemsTwo.class
role.description().orNull()
isAllowed()
CharSequence channel
account.getDescription()
JvmDeclarationOriginKt.OtherOriginFromPure(element)
formatTimeMs(scanWifiLockOnTime / 1000)
slash < 0 || resource.exists()
selenium.isElementPresent("link=Control Panel")
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
path.lastIndexOf(Constants.JAR_EXT)
!FlexUtils.equalLists(filesToPackage,myFilesToPackage)
new Paint()
wrapper.wrapSummary(attribute,request)
new AndroidMobileDriverImpl(projectDirName,portalURL)
!hasPermission(permission)
LinkedList<String>
(((3 * t - 5) * t) * t + 2) / 2.0
ScanFilterAndProjectOperator.class
Query.select(Task.UUID,Task.RECURRENCE)
inUtc || allDay
DEBUG=false
Long.valueOf(value)
testSame("asdf;","var asdf;",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)
getStorage().getCodeHash(codeAddress)
!JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
appearance.getInt(attr,0)
new IllegalStateException("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
public Long getId(){   return id; } 
new LLVMInsertFloatValueNode(sourceAggregate,resultAggregate,size,offset,(LLVMFloatNode)valueToInsert)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
r.curApp != null && r.curApp.curReceiver == r
request.getParams() != null && !request.getParams().isEmpty()
version == null || version.equals("")
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
replicatedMapService.getReplicatedRecordStore(mapName,true)
mode.getMenuInflater()
mMMatrix.leftMultiply(parentMatrix)
ks.newKieClasspathContainer()
result=60
ConfigPropertyVetoException ex1
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.web",Collections.<UpgradeProcess>singletonList(upgradePortletId),1,1,false)
Throwable e
this.copyFieldErrors
currentMatchPosition=currentWordsIndex
mSearchFab.setScaleY(0.0f)
mService.queryDisplayStatus(getCallbackWrapper(callback))
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
createCondition.isInternal()
selenium.isElementPresent("link=Control Panel")
lp.resolveLayoutDirection(layoutDirection)
new String(temp,UTF8)
app.getDaynightHelper().isNightMode()
this.thrown.expectMessage("File must not be null")
new SimpleDateFormat(format,Locale.US)
pkg.findBinFile("ng",null)
selenium.isElementPresent("link=Control Panel")
Short.parseShort(param.getValue())
promise.trySuccess(null)
node.getLifecycleService().shutdown()
createArtifactSpec("b","1.0-SNAPSHOT")
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
ft.commitAllowingStateLoss()
XmppStringUtils.parseBareJid(local)
type.getDeclaredConstructor()
grammar.getTokenDisplayNames()
subCursor.getString(COLUMN_NAME)
Simple.forClass(String.class)
@Nullable
ent.getValue().longValue()
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
cacheSize >= 0
expandableView.getIntrinsicHeight()
new AtomicBoolean(false)
ImmutableMap.copyOf(System.getenv())
DEFAULT_WAKE_LOCK_TIMEOUT=60000
BuildConfigSpecBuilder parametersBuilder=new BuildConfigSpecBuilder(); 
Long.toString(contentLength)
generateBitmapFromImageData(rotateImage(mImageData,mWidth,mHeight),mHeight,mWidth)
!ApplicationManager.getApplication().isInternal()
new InvalidFragmentCollectionFileException()
mAdapter == null || !mIsAttached
index >= 0
/**   * Indicates only the user is able to see posts made by the application.  */ ONLY_ME(NativeProtocol.AUDIENCE_ME)
errors.addAllErrors(bindingResult)
Map<String,Object>
logger.fine(String.format("close (%s)",reason))
solo.clickOnText(solo.getString(R.string.settings_label))
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
Table.isModelTable(tableName)
polyglot.newInstanceUnsupported(receiver)
featureNum=123
anchorView.getApplicationWindowToken()
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
TelephonyManager.getDefault().getCurrentPhoneType()
item.annotationType()
private FallbackPathSettings _fallbackKeySettings; 
selenium.isElementPresent("link=Site Name")
mProgressListener != null && deltaX >= 0
state != null && state.mTint != null
new UpdateDeParser(expressionDeParser,selectDeParser,buffer)
ParceledListSlice<ActivityManager.RecentTaskInfo>
new CustomChangeException("Failed to insert one or more concept map types",be)
iter.nextLine()
observable.timeout(5,SECONDS).toList().toBlocking()
socialActivitySetFinder.countByRelation(userId)
List<MediaDescription>
mock.expectedBodiesReceivedInAnyOrder("Hello World 2")
propertyValue.getName().replaceFirst(prefix + PREFIX_SEPERATOR,"")
mQSPanel != null && mQSPanel.getHost() != null
services.add(ClassLoaderScope.class,baseScope)
sep < 0 || sep > j
sUseRenderThread=false
@Override public ValueNode getMaterializedRepresentation(FixedNode fixed,ValueNode[] entries,int[] locks){   return new AllocatedObjectNode(this); } 
effectColor=myWaveColor
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
success >= 135
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
any(Object.class)
this.sentinelMaster=master
StorageService.instance.getTokenMetadata().invalidateCachedRings()
(rsv & RSV_BITMASK) != 0
limit >= 0
onFailed(x)
MIN_HEART_RATE_VALUE=10
U.error(log,"Message is ignored due to an error [msg=" + msg + ']',e)
mService.mDisplayContents.valueAt(displayNdx)
callback.onPulseFinished()
new Paint()
loaded.getLoaded().getDeclaredConstructor()
bicycleNotDefinedValues.put("footway",4d)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
containsString("State")
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
IR.constNode(IR.name(shortName),googRequireNode)
doNothing().when(safeOutputStreamConsumer).errOutput(anyString())
account.getId()
resourcePermissionPersistence.fetchByC_N_S_P_R(companyId,name,scope,primKey,roleId)
win == null || !startPositioningLocked(win,true,startX,startY)
new QueryException(e,"Could not parse build targets.\n%s",e.getMessage())
checkCall(receiver)
coreId < nCores
delta + end
getTokenDisplayNames()
sceneCam.getDirection(vars.vect6)
LOGGER.info("Could not open folder",e)
mAppToken.isVisible()
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i))&& warnedElements.add(overriderParameters.get(i))
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
lookupLink(parseName(name))
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
resolveImpl(incomplete,null,true)
planPhase != null && planPhase.getUsages() != null
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " is not a "+ cast.getName())
StringBuilder error=new StringBuilder("GroovyServlet Error: "); 
pubnub.enablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
assertPlanEquals(expectedPlan,actualPlan)
fragment == null || !fragment.isVisible() || isFinishing()
taskClass.findClassAttribute("negative_opt",true)
myInjectedFile.getVirtualFile()
buildArchiveContext(persistenceUnit,true,resultCollector)
enableOptimization.isSelected()
!unsafeBuffers.contains(buffer,true)
type.getDeclaredConstructor()
new UnsupportedOperationException("read-only")
Long.parseLong(timeString)
(U)identifier
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
LOGGER.isDebugEnabled()
return false; 
map.put(counter++,ValueRow.get(values))
ReflectUtils.getBeanSetters(target)
AnnotationDescription.Loadable<S>
Iterable<TransitiveInfoCollection>
context.formatNewLine()
selenium.isElementPresent("link=Control Panel")
if (VDBG) log("returning Locked NetworkInfo"); 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
tJvmGcDetailed.getJvmGcNewTime()
syncOperation.delay <= 0
fileIds == null || fileIds.isEmpty()
StringUtils.isNullOrEmpty(id)
logger.debug("Cannot set group volume ({})",e.getMessage())
30 * 8
Integer.parseInt(taskIdStr)
gen.addLoadImmediate(Register.R0,123456789)
new ConcurrentHashMap<String,InjectionMetadata>(256)
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
asList(HSQLDB)
SwingUtilities.invokeLater(() -> {   try {     if (!isDisposed()) {       myGutterComponent.updateSize();     }   }   finally {     updatingSize=false;   } } ,__ -> isDisposed())
n > 0
requireActivity()
type.getDeclaredConstructor()
GenericSendAndReceiveGateway.class
"Surface(native-token=" + mSurfaceControl + ")"
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP,KEY_SIMPLEPERF_CMD)
prefSize(new Fixed(width),new Fixed(height))
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
In.forValue(apiKeyAuthConfig.in().toValue())
candidate.getSelected().getPublishedAs()
resources[i].getFilename().equals(groovyFile)
kl.getAvailableKiosks()
new JobConf(config_,StreamJob.class)
clickListener == null
Indent.getContinuationIndent()
this == OTI_ONLY
mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(),0L)
page.getResourcePrimKey()
DeprecationLogger.nagUserWith("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)
icon.setVisibilityImmediate(visible ? VISIBLE : GONE)
new Media(uri)
triggerProto.getAfterEndOfWindow()
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
graphModel.getDirectedGraphVisible()
periodDurationUs <= endTimeUs
Long.parseLong(val)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
Locale.getDefault().toLanguageTag()
source.isInteractive()
req.getServletPath()
new StackManager(stackRoot,commonServices,osFamily,false,metaInfoDao,actionMetadata,stackDao)
Long.toString(contentLength)
lookup="java:/ConnectionFactory"
w.createReadableString()
30 * 8
logger.fine(String.format("decoded %s as %s",str,p))
origin > other
selenium.isElementPresent("link=Control Panel")
Long.parseLong(args[2])
Assert.assertSame(_ehcachePortalCache.ehcache,ehcache2)
new ClassFormatException("Unrecognized attribute type tag parsed: " + tag)
flux.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
FRAME_STATS_COUNT=16
startingWindow != null && ttoken.startingView != null
GraalInternalError.unimplemented(MetaUtil.format("direct call to %H.%n(%p)",callTarget.target()))
mp.getResolvedValue()
Math.max(mXAxis.mAxisMinimum,pos.x)
OCDirId >= 0
elm.getLocalName()
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
assertPhoneNumberNotEqual("123123","0123123",false)
e.getMessage()
noteReleaseWifiLock(wifiLock)
ENABLE_LAUNCH_DESK_DOCK_APP=true
info.crashInfo.stackTrace.length() > 30000
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ O serialize(Object input); 
UpgradeStepRegistrator.class
setParams().xx()
_hasAnnotation(a,JsonSerialize.class) || _hasAnnotation(a,JsonView.class) || _hasAnnotation(a,JsonRawValue.class)
MIN_CONNECTIVITY_COUNT=1
Integer.parseInt(stackIdStr)
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false,runtimeOnlyFlags)
_freemarkerEngineConfiguration.resourceModificationCheck()
_layout.isTypePortlet()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
getDestroyClosure()
selenium.isElementPresent("link=Control Panel")
new GroovyParser().parseLight(GroovyElementTypes.EXPRESSION,builder)
mService.queryDisplayStatus(getCallbackWrapper(callback))
assertEquals(4,dict.getSize())
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
qs.equals("")
getConnectTimeout()
Object[]
type.getDeclaredConstructor()
keyed=true
mFile.getStoragePath()
defaults.put(ENTRY_EDITOR_HEIGHT,0.65)
AnnotatedElementUtils.findAnnotationAttributes(method,annotType)
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",true))
new AtomicInteger(0)
isFormat(format,F50,F51,F52)
Throwable e
(cls == null) || (cls.length == 0) || (!SvnVcs.getInstance(project).getName().equals(((CommittedChangeList)cls[0]).getVcs().getName()))|| (((SvnChangeList)cls[0]).getVcsRoot() == null)
"Using bind address: " + bindAddress
createAndTestKieContainer(releaseId,createKieBuilder(kfs),null)
Integer.parseInt(stackIdStr)
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
loaded.getLoaded().getDeclaredConstructor()
learnRate=5.0
theOffset != null
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
ckj * (-puf)
motionPosition >= 0
buf.writeByte(1)
headers.keySet().iterator()
new DigestEncodeFunction()
range.getTo()
a.getInt(com.android.internal.R.styleable.Animator_duration,300)
displayOption=1
head.equals("ntpath") || head.equals("posixpath") || head.equals("path")
stack.getFluidID()
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
Hashtable<String,String>
buildPages.getTypesWithoutHash()
"Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH_PROP_NAME
def.finished()
dependencyNode.getId().getSelected()
getType().isWildcard()
mPackageUsage.write(false)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
getService().animateCollapseNotifications()
Response headers(Map<String,Property> headers); 
l != null
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
FastMath.min(origin,num.doubleValue())
rs.getLong(2)
button.getActionId()
innerConfig.get(LAYER_FIELD_DROPOUT_W)
context.getSourcePathResolver().getAbsolutePath(resDir)
createFrame(getRootNode().getFrameDescriptor(),args1)
stackIterator.remove()
keyGen.initialize(2048)
computeRealHorizontalScrollRange()
results != null && results.getCount() > 0
entity != null
public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
e.printStackTrace(System.out)
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),JIG)
selenium.isElementPresent("link=Control Panel")
mMccStr == null
assertEquals("casuser",consentDecision.getPrincipal())
T deserialize(byte[] b); 
serviceLocalException(new Throwable("localBrokerInfo is null"))
mSlideOffset > 0
Exception e
thisVisible || !isVisible
RegisteredService::getId
assertPlanEquals(expectedPlan,actualPlan)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
Tools.checkText(text,lt,apiFormat)
dynamicType.getDeclaredConstructor()
GraphDatabaseSetting<Long>
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
new IllegalStateException("Built-in library initialization failed previously: " + initializationFailed,initializationFailed)
scan.getResourcesFound()
app.getTargetPointsHelper().getPointToNavigate() != null || loc.getLocationSimulation().isRouteAnimating()
!((TileGenericPipe)source.getTile()).isPipeConnected(direction)
folder.toUnescapedModel()
((MasterSlaveDataSource)dataSource).getMasterDataSource()
logger.debug("Cannot play radio ({})",e.getMessage())
getCategoriesAndThreads(category.getGroupId(),categoryId,WorkflowConstants.STATUS_IN_TRASH)
AndroidResource resourceRule2=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res2")).build()); 
snapshot != null && !ResourceUtils.isLibrary(resource)
ImmutableList<Map<String,Object>>
selenium.isElementPresent("link=Control Panel")
AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),1)
metadata.getFaces()
layerType != LAYER_TYPE_SOFTWARE
threadSafe=true
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
this.setOrder(104)
i < MAX_AUDIO_PORTS
log.info("Setting {} to: {}",configKey,toReturn)
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which),getMobileRadioActiveCount(which),getMobileRadioActiveUnknownTime(which) / 1000)
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
split[1]
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"dbinfo",pw)
StringBuilder buffer=new StringBuilder(); 
holder.setGone(loadEndViewId,visible)
value.toLowerCase().startsWith(constraintLowerCase)
mAuthorities.valueAt(i)
return false; 
Integer.toString(hours)
metadata.getClassName()
mBindingServices.isEmpty()
val.get(k)
@ConditionalOnEnabledHealthIndicator("mongo")
editor == null || editor.getComponent().getRootPane() == null
application.getBaseContext()
new JSyntaxTextArea(10,50)
getActiveFgCall().getPhone().startDtmf(c)
e.toString()
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
base - newZoom
initialCapacity > 1 << 30
Localization.lang("Library")
realm.checkIfValid()
getStringList(domainMap,"excludeTags")
new ConfigRepoConfig(new GitMaterialConfig("https://github.com/tomzo/gocd-indep-config-part.git"),"myplugin","id2")
obj == proxiedObj
String resource
newName.putProp(Node.ORIGINALNAME_PROP,qName)
final LongAdder8 msgCntr=new LongAdder8(); 
mContext.sendBroadcast(intent)
!isSdkLocationValid(sdkLocation)
!jackson2XmlPresent
((IWorkbenchPropertyPage)prefPage).setElement(originalDataSource)
partition.getParameters()
DBUtils.getDefaultContext(object,false)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
logger.debug("Trying to map {} to {}",t,path)
mForceStatusBarFromKeyguard=true
Utils.javaDeserialize(_boltSer,IBatchBolt.class)
Address testAddressCopy=(Address)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
DirectoryReader reader=IndexReader.open(dir); 
clsName == null
ret.shapeInfoDataBuffer()
new GotoFileAction().actionPerformed(e)
new DeadCodeEliminationPhase(Optional)
return recoverTransactions; 
BackupManagerServiceInterface svc=mService; 
scale.getScaleX() != 1f
!mScreenOnEarly
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
i < 100
suppressLeadingZeroElements == false
mStackScroller.getChildAtRawPosition(x,y)
LOG.error("An exception was caught while attempting to handle an activity generated exception",e)
TupleDomain.all()
readWifiSleepPolicy()
user.isAuthorized("essentials.world." + user.getWorld().getName())
DuplexConnectionPool connectionPool=destination.getConnectionPool(); 
selenium.isElementPresent("link=Control Panel")
!transactional && this.referenceId == referenceId
null == result || XmlSuite.DEFAULT_JUNIT.equals(result)
public final class Compare extends FloatingNode {   private static final int INPUT_COUNT=2;   private static final int INPUT_X=0;   private static final int INPUT_Y=1;   private static final int SUCCESSOR_COUNT=0;   @Override protected int inputCount(){     return super.inputCount() + INPUT_COUNT;   }   @Override protected int successorCount(){     return super.successorCount() + SUCCESSOR_COUNT;   }   /**   * The instruction that produces the first input to this comparison.  */   public Value x(){     return (Value)inputs().get(super.inputCount() + INPUT_X);   }   public Value setX(  Value n){     return (Value)inputs().set(super.inputCount() + INPUT_X,n);   }   /**   * The instruction that produces the second input to this comparison.  */   public Value y(){     return (Value)inputs().get(super.inputCount() + INPUT_Y);   }   public Value setY(  Value n){     return (Value)inputs().set(super.inputCount() + INPUT_Y,n);   }   Condition condition;   boolean unorderedIsTrue;   /**   * Constructs a new If instruction.  * @param x the instruction producing the first input to the instruction  * @param condition the condition (comparison operation)  * @param y the instruction that produces the second input to this instruction  * @param graph  */   public Compare(  Value x,  Condition condition,  Value y,  Graph graph){     super(CiKind.Illegal,INPUT_COUNT,SUCCESSOR_COUNT,graph);     assert (x == null && y == null) || Util.archKindsEqual(x,y);     this.condition=condition;     setX(x);     setY(y);   }   /**   * Gets the condition (comparison operation) for this instruction.  * @return the condition  */   public Condition condition(){     return condition;   }   /**   * Checks whether unordered inputs mean true or false.  * @return {@code true} if unordered inputs produce true  */   public boolean unorderedIsTrue(){     return unorderedIsTrue;   }   /**   * Swaps the operands to this if and reverses the condition (e.g. > goes to <=).  * @see Condition#mirror()  */   public void swapOperands(){     condition=condition.mirror();     Value t=x();     setX(y());     setY(t);   }   @Override public void accept(  ValueVisitor v){   }   @Override public void print(  LogStream out){     out.print("comp ").print(x()).print(' ').print(condition().operator).print(' ').print(y());   }   @Override public String shortName(){     return "Comp " + condition.operator;   }   @Override public Node copy(  Graph into){     Compare x=new Compare(null,condition,null,into);     x.unorderedIsTrue=unorderedIsTrue;     return x;   } } 
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
updateChildren()
parent instanceof PsiModifiableCodeBlock
new float[initialPageCount]
parentPackageInTree != null || (aPackage != null && aPackage.getParentPackage() != null)
entries.remove(timeKey)
-4
f.getTp()
SubscriberBarrier<IN,IN>
addViewInLayout(view,index++,ensureLayoutParams(view.getLayoutParams()))
Log.e(TAG,"This will become an error",ex)
TYPING_TEXT_TIMEOUT=7000
Locale.getDefault().toLanguageTag()
offsetHandler.returned()
PsiTreeUtil.getParentOfType(element,PsiClass.class,false)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
DateTimeUtils.createGregorianCalendar(DateTimeUtils.UTC)
FloatList list
DEBUG=false
TelephonyManager.getDefault().getCurrentPhoneType()
logger.info(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
val > mMaxValue || result.length() > String.valueOf(mMaxValue).length()
logger.finest("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
new BoBHash(SHA1.hex(bobData.getContent()),"sha1")
VERSION=1
apnContext.getWaitingApns()
hz1.getLifecycleService().shutdown()
isDoubleCategory(typeRe)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_STOP_FUNCTION,false)
presence.getFrom()
-location[0]
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
JID jid
1
measured.setPara(source,bufEnd,bufEnd,textDir)
(dispatcherMapping & ASYNC) != 0
synchronized (mLock) {   updateDisplayLocked(); } 
selenium.isElementPresent("link=Control Panel")
!beanPrefix.isEmpty() || !beanSuffix.isEmpty() || beanPackageName != null
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
new UnsupportedOperationException("read-only")
embeddable.getMetadataComplete()
noteTmp.isLocked()
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
edge.getUpNode()
log.debug("Metric=[%s] has no StatsD type mapping",statsDMetric)
Math.abs(expectedSum) * 1e-10
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)
assertEquals(13,scannedBeanCount)
updateChildren()
new LayerView(this,0x0f0000ff)
1
dest.writeInt(txPower)
in.readStringFixed(8)
CookieHelper.addCookie(KEYCLOAK_REMEMBER_ME,username,path,null,null,31536000,secureOnly,true)
classFilter.getRejectedIDs()
"No class type found for " + classTypeName
e.toString()
mLayerType != LAYER_TYPE_NONE
@NonNull
Throwable e
mp.getResolvedValue()
layerType != LAYER_TYPE_SOFTWARE
this.httpHandler.handle(request,response).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
selenium.isElementPresent("link=Control Panel")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
new Paint()
t.toString()
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
contextBuilder.allowCreateThread(allow_create_thread)
!persistencePackage.containsCriteria(INVENTORY_ONLY_CRITERIA)
ReflectUtil.isTypeOf(type,Number.class)
PermanentGraph<Id>
_log.warn(ioe,ioe)
read != null
OrderUtils.getPriority(((DecoratingProxy)obj).getDecoratedClass())
match.getRule().getLocQualityIssueType().toString()
!mKey.equals(other.mKey)
mSpeakText
ContentType.parse(request.getContentType())
recorder.record(frame2,filter.getPixelFormat())
ConfigHelper.getClientTransportFactory(conf).openTransport(location,port)
UIHelper.getContactPicture(contact.getName(),90,this.getApplicationContext())
COUNT_DATABASE.put(key,newVal)
mJSONObjectRequestListener=null
holder == null || holder.provider == null
mNwService.getInterfaceConfig(mTetherInterfaceName)
assertEquals(CodecFactory.deflateCodec(9).toString(),serdeWrite.getCodec().toString())
is(204)
logger.error("testConcurrentServiceTicketGeneration produced an error",e)
Status.createStatuseList(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
new InvalidPluginRequestException("No plugins found for plugin id " + pluginId)
jsonModel.insert(async)
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)
selenium.isElementPresent("link=Control Panel")
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
topMBMessage.getMessageId()
public Integer getPort(){   return this.port; } 
context.getMainLooper()
mCol != null && mCol.getDb() != null
EnumSet.allOf(AlarmInfoType.class)
scrollWebElementIntoView(webElement)
private void _runSetUp() throws Exception {   _runClassCommandName(_testClassName + "#set-up"); } 
new Paint()
factory.getDestination(info,bus)
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription(),target.isInterface())
attribute.equals("\\Spam") || attribute.equals("\\Junk")
Utils.createInformativeDialog(context,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
myClassScopeTypeNames != null
accumulator.addClass(analysis)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
logger.trace("Retreiveing door data")
1
ByteBuf line=buffer(64); 
gradleProject.getProjectIdentifier()
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
!mStopped || mReportNextDraw
out.writeFloat(mProgress)
lp.width != panelWidth || lp.gravity != panelGravity
file.getFile()
out.writeInt(sampleCount)
Log.d(TAG,"setSubtitleAnchor in MediaPlayer")
BufferUtil.zeroBuffer(1)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
!debugInfoEnabled || !JetPsiChecker.isErrorReportingEnabled()
new Paint()
growLock.unlock()
subCursor.getString(COLUMN_NAME)
LOGGER.isDebugEnabled()
flowParameters.putAll(flowParam)
Throwable e
checkCall(receiver)
Messages.showOkCancelDialog(myProject,"No code dependencies were found. Would you like to remove the dependency?",CommonBundle.getWarningTitle(),Messages.getWarningIcon())
LOGGER.isDebugEnabled()
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
((ResolvedJavaType)obj).toJavaName()
mSelectedItemIdentifier != 0L
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle) && !user.isManagedProfile()
if (VDBG) loge("Exception trying to remove a route: " + e); 
getActivity()
myProgramParameters.getComponent().setDialogCaption(myProgramParameters.getRawText())
group.getGroupId()
LOG.info("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
ScanResult.is5GHz(frequency)
mPowerManager.isInteractive()
Log_OC.e(TAG,"\t file is NULL")
size * 1.8f
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
node.getEndLine()
System.nanoTime()
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
RowInfo<Id>
selenium.isElementPresent("link=Control Panel")
assertRestrictBackgroundOn()
assertTrue("reuse-address",networkConfig.isReuseAddress())
adopt && this.children != null
mHandler.dispatchMessage(msg)
lessThanOrEqualTo(3600000L)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
row.setUserExpanded(true,true)
mRepeat > 0
logger.warn("P2p handling failed",cause)
new CaptureStrategy(true,"com.zhihu.matisse.sample.fileprovider","test")
super.onMeasure(widthMeasureSpec,widthMeasureSpec)
!mKey.equals(other.mKey)
mBindingServices.isEmpty()
unresolvedReferenceDiagnostic.getPsiElement()
JNIDecoder.matches(in,inputFormats)
new IndexWriter(d,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
/**   * set if this item is selectable  * @param selectable true if this item is selectable  * @return  */ @Override public Item withSelectable(boolean selectable){   this.mSelectable=selectable;   return (T)this; } 
SCAN_STATUS_PARTIAL=1
is(true)
ModuleFactory.stopModule(mod,true,true)
mInner.cancel()
client != null && client.autofillClientIsFillUiShowing()
WebUtils.isForwardOrInclude(request)
flags_=6
getTestVector().getNumNonZeroElements()
index >= n
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"),new RuntimePermission("accessClassInPackage.com.sun.jndi.url.ldap"))
intervalFraction * (nextValue - prevValue)
this.evaluator.prepareRightObject(handle)
ref.getAssociatedEntity()
!mGsmPhone.mSST.isConcurrentVoiceAndData()
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
LOG.info(e)
mPowerManager.isInteractive()
type == QUADS || type == QUADS
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
LOGGER.isDebugEnabled()
st.setNCharacterStream(index,characterStream.asReader(),characterStream.getLength())
new StringBundler(11)
firstLine.indexOf(':')
inOrder.verify(mockAwareService).subscribe(any(),eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
(Integer)strategy.getOrNull(third)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ CONVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
args[1]
data * 0.95
FILES_BYTES * 1000.0
assertEquals(defsPath + " children",8,children.size())
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
fireMessageReceived(ctx,completeMessage,e.getRemoteAddress())
dlFolderService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
readBytes > 0
new WildcardQuery(new Term("body","m?tal"))
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
new ShardingConnection(xaDataSourceMap,shardingContext,TransactionType.XA)
getPath(renderRequest,renderResponse)
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
Localization.menuTitle("Search")
PORT=6336
selenium.isElementPresent("link=Control Panel")
SUBCMD_TRIGGER + " <channelUID> [<event>]"
mAuthorities.valueAt(i)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
callback.onPulseFinished()
removeUser != UserHandle.USER_ALL
T
buffer.put(bufferData)
NettyCometSupport.class
insets.left != 0
UIHelper.getContactPicture(contact,90,this.getContext())
new StringBuilder(1024)
statistics.addRemoveTimeNanos(System.nanoTime() - start)
name == null || name.isEmpty()
DEFAULT_LOCK_TIMEOUT=60000
Integer.parseInt(attrValue)
type.getDeclaredConstructor()
LOG.info("Unable to unmarshall exception content",e)
InboundHandshakeHandler.class
selenium.isElementPresent("link=Control Panel")
logger.debugf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
_typeSettingsProperties.toSortedString()
GroupFinderUtil.findByC_C_PG_N_D(TestPropsValues.getCompanyId(),classNameIds,GroupConstants.ANY_PARENT_GROUP_ID,new String[]{null},new String[]{null},new String[]{null},groupParams,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
nameHint == null
calcTo()
msg.getMessageId().setEntryLocator(id)
E edge
checkCall(receiver)
mapper.setSqlSessionTemplate(sqlSessionTemplate)
computeRealHorizontalScrollRange()
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
!active
new WorldPoint(2800,3074,0)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
texCoordIdx >= 2
containsString("State")
Localization.menuTitle("Tools")
mRepeat > 0
logger.debug("gave up waiting for query reply from device {}",m_address)
Exception t
fileType.isRd() || fileType.isJS() || canPreviewFromR|| fileType.isSql()
UpgradeStepRegistrator.class
LOG.debug("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
buf.readRetainedSlice(length)
Math.min(titleRight,subtitleRight)
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
NavigatePointFragment.this.getContext()
assertEquals(504,cause.getStatusCode())
loaded.getLoaded().getDeclaredConstructor()
id=14239
context.getOpPackageName()
log.error("SQL Validation error",ex)
(union & 0x0800) != 0
refreshRotationLockTile()
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
LOGGER.isDebugEnabled()
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
count < 200
Throwable e
WordPress.getCurrentBlog().getLocalTableBlogId()
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
matcher.group(1)
numStats > 1
isControl && (scriptMode || cursorInsideToken) && !hasValuableTokens
node.internalOrder()
tracesDir.mkdirs()
module.getOwnExcludes()
StringBuilder argBuf
mSyncStatus.valueAt(i)
myCache1.getCacheConfiguration().getMaxEntriesLocalHeap()
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
lock.isHeldByCurrentThread()
new File(value).toPath()
mccMncs != null
new Texture(file,format,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)
mActiveAgents.remove(info)
args[1]
-26
new UnsupportedOperationException(getClass().getName())
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1,false)
bag.recycle(reserved)
mbw.writeTo(o,theClass,type,anns,contentType,headers,os)
group != null && this == group.mInternalConnection
DefaultCacheKeysFactory.staticGetNaturalIdValues(cacheKey)
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
CommonBundle.getWarningTitle()
Slog.d(TAG,"Unable to bind FusedProxy.")
BAD_THRESHOLD=0
per >= HEALTHY_PER
myDiscardedLengths[1]
logger.debug("running policy with current-step[" + currentStep.getKey() + "]")
mQueryTextView.length()
Slog.d(TAG,"showSaveLocked(): no mStructure")
MUCUser.from(oldPresence)
mAdapter.swapDirectory(directory,storageManager)
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF
ServiceManager.addService(Context.DISPLAY_SERVICE,display,true)
result.cancel()
((ExecutorService)executor).isTerminated()
aClass.isInterface() || aClass.isAnnotationType() || aClass.isEnum()
new Requirement(Skill.MINING,30)
suffix.add(tmp.substring(1))
assertFalse(mDisabled.hasFocus())
(short)suggestions.size() >= max_results
new Random(0)
message.getConversation()
encoding != null && !DEFAULT_ENCODING_NAMES.contains(encoding.name())
new Handler(mMainHandler.getLooper()){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
rhs.getScore()
endExpression != null
verify(mockRealm,times(2))
new TextField<String>(textFieldId,String.class)
32 * 1024 * 1024L
zeroState[1][1]=0.251F
cache.localSize()
assertEquals("TEST-001 Summary",activeChangeList.getName())
HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
ImmutableSortedSet.<BuildRule>of(bundle,reactNativeDeps)
disable2ForUser(what,token,pkg,mCurrentUserId)
createTestBlockCapsule(1533529947843L + 9000,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
PlatformTestCase.initPlatformLangPrefix()
mAudioQuality=AUDIO_QUALITY_NONE
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } )
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).onErrorContinue()
Throwable e
updatedLocation != null
new IndexWriter(directory,new KeywordAnalyzer(),create,IndexWriter.MaxFieldLength.LIMITED)
maxLiveColumns < count
from >= to
new RStudioThemedFrame(null,".rstudio-themes-flat.editor_dark h1,\n" + ".rstudio-themes-flat.editor_dark h2,\n" + ".rstudio-themes-flat.editor_dark h3,\n"+ ".rstudio-themes-flat.editor_dark h4 {\n"+ "  background: none;\n"+ "  color: white;\n"+ "}\n",null,false)
new IndexWriter(indexStoreB,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
GL20.glUniform4iv(location,v)
measureRun(0,0,offset,mLen,false,fmi)
-1412539489
new ArrayList<String>(256)
assertClusterSizeEventually(2,h2)
handshake.getProtocolVersion()
Locale.getDefault().toLanguageTag()
loaded.getLoaded().getDeclaredConstructor()
"Unsupported filesystem scheme found in the backup target url. Error Message: " + expMsg
inUtc || allDay
mClocks.uptimeMillis()
response.addHeader(WWW_AUTHENTICATE,value)
event.getRawX()
mValues[8]
checkCall(receiver)
telephony.isRinging(getOpPackageName())
PATH.getPath()
keycode == KeyEvent.KEYCODE_HEADSETHOOK || keycode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
n.getNodeData().getId().toLowerCase().equals(str)
getTokenDisplayNames()
commentText.substring(commentText.length() - 2)
super(expression," \t",startTime,zone,0,3); 
dir.getAbsolutePath()
getValidator().call(result)
LensPositionSelectors.external()
getService().animateCollapseNotifications()
proxy == null
new MyResult(null,DiffPresentationReturnValue.quit,e.getMessage())
logger.error(e.getMessage(),e)
doNotUseAnimations ? 1 : ZOOM_MOVE_ANIMATION_TIME
Assert.assertEquals(122L,assetCapsuleNew.getNetUsage())
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
p2.isTerminated()
selenium.isElementPresent("link=Control Panel")
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null,null)
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
s.cancel()
editor.selectNextTab()
doTest("class Test {\n" + "  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\n" + "}\n"+ "class Comparator<X>{}","sort(T[], Comparator)","sort(T[], Comparator<? super T>)","sort-T:A-Comparator-","sort-T:A-Comparator<? super T>-")
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
epsilon.muli(activationDerivative)
super.performAccessibilityActionInternal(action,arguments)
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName))
new OptionValue<>(1000)
Thread.sleep(1000)
scaleX == 1
newHighlyAvailableDatabaseBuilder(path)
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
version >= 6
new IndexResponse(shardId,index.type(),index.id(),randomInt(20),randomIntBetween(0,Integer.MAX_VALUE),true)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
r.getInteger(FIELD_STEP_ATTRIBUTE_ID_STEP,-1L)
Math.min(maxReturned * 2,maxRows)
new UnsupportedOperationException(getClass().getName())
typeSettingsProperties.toSortedString()
{FieldManifestation.TRANSIENT,Opcodes.ACC_TRANSIENT,false,false,false,true,false}
info.prefixedName()
new Lock.With(directory.makeLock("commit.lock"),COMMIT_LOCK_TIMEOUT){   public Object doBody() throws IOException {     segmentInfos.write(directory);     return null;   } } 
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetadata,mergedManifest,keystore)
worker.setNoData(nod != null ? RangeFactory.create(nod,nod) : null)
Boolean.valueOf(setting)
specHeightMode == MeasureSpec.EXACTLY || specHeightMode == MeasureSpec.AT_MOST
mp.getResolvedValue()
mMat[7]
attributes.getAllFlags()
mState != STATE_PREPARE && mState != STATE_FINISHED
metadata.getFaces()
expressionWithRecoverUntilParenOrComma(b,l + 1)
new StringBuilder(729)
createPermissionsXmlAsset(new JndiPermission("*","lookup"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"))
new JButton(Localization.lang("Browse"))
buf.readIntLE() * 0.1
selenium.isElementPresent("link=Control Panel")
i >= speedBumpIndex
checkForMisplacedBindingAnnotations(method,errors) || !isValidMethod(injectableMethod,errors)
selenium.isElementPresent("link=Control Panel")
(article == null) || !hasViewPermission() || (articleDisplay == null)|| isExpired()|| article.isScheduled()|| article.isPending()
platformVersion < M
meta.getEncoding()
new Paint()
new ConfigPropertyVetoException(e.getLocalizedMessage(),evt)
new Influencer(JOB_ID,"n","v",new Date(DEFAULT_START_TIME),600)
getHomeButton()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
setDeploymentServerId(contextValue)
new IOException(e.getMessage())
buddyIter.next().getValue()
getSelectedIconColorRes()
year < 0
mPolicy != null && wasPowered
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
showViewUpdateCollection(request,model,pathVars,id,collectionField,collectionItemId,null,"viewCollectionItem")
qux.getDeclaredConstructor()
ISOChronology.getInstanceUTC()
Beans.newDuration(session.getLockTimeout()).getSeconds()
NoClassDefFoundError ignored
mIam.getStackInfo(WINDOWING_MODE_FULLSCREEN,ACTIVITY_TYPE_STANDARD)
lobMap.lowerKey(lobId)
protected XmlElementDescriptor createElementDescriptor(final XmlTag tag){   return new XmlElementDescriptorImpl(tag); } 
config.isAnimateGrass()
mService.mDisplayContents.valueAt(displayNdx)
!mUseHeadsUp || isDeviceInVrMode()
new SubtasksFilterUpdater()
entry.getValue()
Boolean.parseBoolean(attrValue)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)
getLog().warn("register druid-driver mbean error",ex)
rs.isLast()
croutonDurationEdit.setVisibility(View.GONE)
_freemarkerEngineConfiguration.resourceModificationCheck()
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsOnly("java","pmd")
Thread.sleep(1000)
mSplashScreen != null && mSplashScreen.getVisibility() == View.VISIBLE
playbackService != null && media != null
128 * 1024
mWidth - mMinWidth
logger.fine(sb.toString())
selenium.isElementPresent("link=Control Panel")
getLogger().warn("Unknown classloader [NSME]: " + e.getMessage())
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
status().isSeeOther()
Integer.parseInt(nextArgRequired())
Thread.sleep(200)
mMccStr == null
id=10806
message.getMessageId().setEntryLocator(sequenceId)
mDrawerItems.size() > position
mImmersiveModeConfirmation.onPowerKeyDown(interactive,event.getDownTime(),isImmersiveMode(mLastSystemUiFlags))
LOGGER.error("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
500 * 1000
NOTIFICATION_TYPE_MOVE_ENTRY_TO_TRASH=5
java(convention).getTestClassesDir()
Duration.seconds(200)
dh != mBackgroundHeight
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
"found " + className + " -- "+ _className
LOG.warn("Unable to close socket selector")
executor.execute(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
clearIndex()
!returnElements.isEmpty()
action != KeyEvent.ACTION_UP
IS_EMPTY + 1
BASE_DEPTH + 4
onlyInA.addAll(onlyInB)
!this.transactional && this.referenceId == referenceId
server1.getStoreRepository().getStorageEngine(storeName)
Keyspace table=Keyspace.open(tableName); 
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
cluster.close()
i >= generations.length
model.addAttribute("cookie",cookieV)
selenium.isElementPresent("link=Control Panel")
LinkageError e
enclosing == null
e.toString()
DEBUG=false
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
name + "." + expressionEntry.getKey()
nameTextField.getText()
mGnssCallback != null
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"),e.getCause().getMessage())
assertEvaluate(buildFile).moduleLookup("txts")
selenium.isElementPresent("link=Control Panel")
receivedAcks > 0
assertThat(response).isEqualTo("Woop woop. yay\n")
selenium.isElementPresent("link=Control Panel")
functionFactory.lossNegativeLogLikelihood(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
ortho(-width / 2,+width / 2,+height / 2,-height / 2,-1,+1)
log.warn("Unexpected exception on closing transaction.  Cause: " + e)
@Path(PATH_RELATIONSHIP_INDEX_ID)
assertEquals(3,hostAlertCount)
params.getSimulatedPlatformVersion()
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
word.contains("://")
mAccessibilityController.isAccessibilityEnabled()
item.getAddress().equalsIgnoreCase(id)
new ZLIntegerRangeOption("Scrolling","AnimationSpeed",1,10,7)
currencyPair.counter.getCurrencyCode().toUpperCase()
DateUtils.getLocalTime()
props.nonNullValue(DefaultSettings.JDBC_URL)
new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,true)
Character.isDigit(ch) || ch == '+'
log.error("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
UserHandle.myUserId()
gl.marginHeight=0
EmailFilter.filter().receivedDate(EmailFilter.Operator.EQ,1524575533757L)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
textView.getBottom()
KeyColumnValueStoreTest.class
callback.onPulseFinished()
DefaultDeclaredTaskInputFilePropertySpec spec=new DefaultDeclaredTaskInputFilePropertySpec(task.getName(),resolver,paths,validationAction); 
view.isLaidOut() || view.getWidth() != 0 || view.getHeight() != 0
client.get(path,MIMETYPE_XML)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
private static final KeyStrokeMap ourMap=new KeyStrokeMap(); 
FloatingReadNode result=graph.add(new FloatingReadNode(klassOop,null,LocationNode.create(LocationNode.FINAL_LOCATION,CiKind.Int,config.klassModifierFlagsOffset,graph),StampFactory.forKind(CiKind.Int))); 
assertEquals(13,beanCount)
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
10 * 1000
new IllegalStateException("Could not access Field '" + classField.getName() + "'",e)
!TextUtils.isEmpty(addresses)
DEFAULT_MAX=4096
addView(mTitleLayout)
return lastPath; 
assertTrue("map size is : " + map.size(),latch.await(5,TimeUnit.MINUTES))
_jsonWebServiceServiceAction.getJSON(null,mockHttpServletRequest,mockHttpServletResponse)
LocaleUtil.getSiteDefault()
off > buf.length
nextMedia.localFileAvailable()
collection.setOnScrollListener(onScrollListener)
LOG.error(getName() + " caught: ",e)
op2.z()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
LinkageError e
targetProject.ensureEvaluated()
args.length >= 2
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFiles,getOperationName(),null)
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString(),"-Xlinker","-rpath","-Xlinker","@loader_path/Frameworks")
soLingerTime.toMilliseconds()
loaded.getLoaded().getDeclaredConstructor()
markerArray.get(0)
alertDialogBuilder.setNegativeButton(resources.getString(R.string.title_deny),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=true;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),true);     latch.countDown();   } } )
order.getSize()
list.append(ai)
Validator.equals(value.getData(),dataString)
new JsonUtf8Writer(buffer)
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
tracesDir.mkdirs()
LOG.debug("Created new Configuration {}",configuration)
{type}
new IllegalStateException("Legacy advertising can't include TX power level in header")
mWm.freezeRotation(-1)
context.getContentResolver()
mScaleType.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
configuration.copy()
mNetd.setDnsConfigurationForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
logger.fine("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).descriptionAndTooltip(message)
it.current() == '/' || it.current() == '.'
new SimpleAssert<Boolean>(condition,Boolean.TRUE,message){   @Override public void doAssert(){     org.testng.Assert.assertTrue(condition,message);   } } 
j.next()
element.isRoot()
!Values.UPGRADE.equalsIgnoreCase(connection)
expiresPctx.evaluateActionQueue(workingMemory)
params.height == LayoutParams.WRAP_CONTENT
selectedPos <= lastPos
Integer.parseInt(taskIdStr)
items[16]
assertEmpty(text,errors)
node.getTypeDescriptor()
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
scanFlags & SCAN_NEW_INSTALL
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo(java.lang.Class...)","foo(java.lang.Class<?>...)","foo-java.lang.Class...-","foo-java.lang.Class<?>...-")
Math.abs(delta_loss)
parameter.name()
index >= 2
selenium.isElementPresent("link=Control Panel")
DISPLAY_TASKS_PORTRAIT=7
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
localeKeyMjFlow="buildcraft.mj.flow." + timeGap + longName
new DefaultPlexusContainer(null,null,classWorld)
playerArgs == null
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
new SSALinearScanResolveDataFlowPhase(this)
LOG.error(component.toString(),e)
ONE_MINUS_DST_ALPHA(7)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")|| name.contains("cglib")
Integer.parseInt(value)
new JsonPathConfig(numberReturnType,defaultParserType,gsonObjectMapperFactory,jackson1ObjectMapperFactory,jackson2ObjectMapperFactory,defaultDeserializer,charset)
new WorldPoint(2973,3489,0)
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,false,userId)
endPos < bufEnd
colors.getThemeAttributeId(i,0)
mQsDensityContainer.getX()
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
new ReformatCodeProcessor(psiFile.getProject(),psiFile,e.getTextRange(),false)
applyTemplates(resultTemplate)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
node.getBeginLine()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
StatBuckets.prettyUptimeStr(secs)
result.getName()
ClassFileVersion.JAVA_V5.getVersion()
true || IS_USER_BUILD
nodeManager.getWorkerNodes()
@Override public final DivideByOnConditionStep andExists(Select<?> select){   return and(exists(select)); } 
metricName.toString()
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
from >= to
loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType
mPrivateInput == null || mReplyHeader.responseCode == -1
copy1DRangeFromUnchecked(0,mType.getCount(),i)
sourceHeight > 0
selenium.isElementPresent("link=Control Panel")
intervalFraction * (nextValue - prevValue)
!context().getSettingsModule().isNotificationsEnabled()
MethodNotFoundException.class
logger.warn("Timeout occured when executing commandLine '" + commandLine + "'",e)
LOG.assertTrue(url != null,"Url should not be null!")
log.error(message)
type.getDeclaredConstructor()
_log.warn(ioe,ioe)
displayContent.getDockedStackVisibleForUserLocked()
QUEUE_TRANSACTION_LOG_RECORD=44
GL15.glGetBufferParameteriv(target,pname,params)
StringBuilder buffer=new StringBuilder(); 
assertEquals(1,sink.getModified().size())
Long.toString(v,16)
Map<String,Object>
request.getServletPath()
mOpenStreetMapView.setExpectedCenter(expectedCenter)
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
Thread.sleep(1000)
parsedResult.getType()
dest.writeInt(mSubId)
mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
new Paint(Paint.ANTI_ALIAS_FLAG)
ONE_MINUS_DST_ALPHA(7)
return false; 
new RootModelImpl(myRootModel,this,true,accessor,myFilePointerManager,myProjectRootManager){   @Override public void dispose(){     super.dispose();     if (Disposer.isDebugMode()) {       myModelCreations.remove(this);     }     for (    OrderEntry entry : ModuleRootManagerImpl.this.getOrderEntries()) {       assert !((RootModelComponentBase)entry).isDisposed();     }   } } 
getService().hasClipboardText()
a.getKey()
parameterTokens.set(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
annotationHelper.printAnnotationError(element,"%s annotated element should have only one constructor")
DirectoryReader.openIfChanged(oldReader,writer.w,true)
Throwable ex
one.setAxisIndex(3)
((PresenceStatus)status).getStatus() >= PresenceStatus.ONLINE_THRESHOLD
mLayerType != LAYER_TYPE_NONE
return false; 
mCryptoPerformanceMap.get(userId)
this.fileFilter
new Mutation(KSNAME,ByteBufferUtil.bytes(key))
new EntityTrackerInfo(mod,ID,range,updateFrequency,sendVelocityInfo)
new TestClass(ic,m_testName,testMethodFinder,m_annotationFinder,m_runInfo)
!ib.isBlocking()
counter > max
operands.length != 2
editorFactory.createViewer(historyDocument,getProject(),EditorKind.CONSOLE)
hasColumn("Calendar","timeZoneId")
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
logger.debug("Cannot update media data for group member ({})",e.getMessage())
logger.debug("tried to fail engine but engine is already failed. ignoring. [{}]",failure,reason)
buf.putLong(utf.length)
loaded.getLoaded().getDeclaredConstructor()
15 * 60 * 1000
keyCache.get(method)
hasColumn("MicroblogsEntry","receiverUserId")
modItems == null || engine == null
r.remoteCommits != 0 && r.commits.size() != 0
selectedTabLine.getTranslateX() == newTransX && scale.getX() == newWidth
startingWindow != null && ttoken.startingView != null
mNextNonWakeupDeliveryTime < nowELAPSED
mTextUtil.nextRandomParagraph(WORD_LENGTH,STYLE_TEXT)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
s.equals(".svn") || s.equals(".git") || s.endsWith("_")
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
generateFluentSetters()
pathParts[1] != null && pathParts[1].length() > 1
Stream.of("CYPHER 3.1","CYPHER 3.4")
!mIsOnInnerCircle && hour != 0
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
Lifecycle.BEFORE_DESTROY_EVENT.equals(type)
s.charAt(0) == 'z' || s.charAt(0) == 'Z'
prefs.getBoolean(AUTO_START,false)
case OK: 
startMediaTimeState == START_NOT_SET
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
DfsSearchResult.subOne(in.readVLong())
seqNoStats.v2()
NettyUtils.isDomainSocketSupported(dataSource)
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
path.toString()
Thread.sleep(100)
loaded.getLoaded().getDeclaredConstructor()
indexData.rewind()
fetch.get(associationName)
s.getRawReader()
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
triggerProto.getAfterEndOfWindow()
recordingDescriptorDecoder.endPosition()
logger.debug("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
updateAll(tableCollection,modelSaver.getWritableDatabase())
typeSettingsProperties.toString()
NODE_START_CHECK_LIMIT=15
wifiConfig == null || wifiConfig.isValid()
new GroupTest(true)
gi.getOriginalVertexName()
c <= 'Z'
myExcludedFileIndex.isExcludedFile(validParent)
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
Assert.assertEquals(4,count)
1
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
getLock(target)
subProperties.putIfAbsent(subName,value)
new DataSpec(uri,DataSpec.FLAG_ALLOW_GZIP | DataSpec.FLAG_ALLOW_CACHING_UNKNOWN_LENGTH)
DarkIconDispatcher.getTint(tintArea,mMobileActivity,tint)
typeSettingsProperties.toSortedString()
checkCall(receiver)
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
sDefaults.putBoolean(BOOL_SHOW_CDMA_CHOICES,false)
clipItem.coerceToText(mContext)
Collectors.joining("\n")
sm.getString("cache.addFail",path)
TagPluginManager.class
!webSocket.isOpen()
authenticationText != null
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
parser.nextHexInt()
appendElementReference(buf,refElement,false)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
createFromResourceStream(null,null,is,srcName,null)
Matchers.anyLong()
baseComparator.compare(first,second)
Model != null && Model.Book != null
ne(Expressions.constant(constant))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
selenium.isElementPresent("link=Control Panel")
retry=0
vertFilename == null
mDeviceProvisionedController.isCurrentUserSetup()
executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
DownloaderIndexFromGoogleCode.getContent(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
wrapped.equals(binaryMessageHandler)
packet.getAttribute("from").split("/",2)
final Throwable t
pagedStoragePageSizeProperty == null
uriElementText.substring(myRange.getEndOffset())
buffer.remaining()
{4,5,5,11,6,5,7,7,11,11}
me.urls.size() == 1
ack.getLastMessageId().setEntryLocator(seq)
nestedBuilder.types("FormSuccessPageSettings")
mMat[5]
new ActFmServiceException(object.getString("message"),object)
b.length() - 2
SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json",true))
DarkIconDispatcher.getTint(mTintArea,mWifiActivity,mIconTint)
CompilerDirectives.inCompilationRoot()
testSame("yz();","function yz() {}",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)
person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
GuiActivator.getConfigurationService().getBoolean(DISABLE_CALL_HISTORY_SEARCH_PROP,false)
@Override public Response schema(Property property){   this.setSchema(property);   return this; } 
expected == short.class || expected == Short.class
MergeNotMatchedSetMoreStep<R>
TypeSpec.parse(builder,false)
new LayerView(this,0x0f0000ff)
TypeUtil.getName(type)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   checkDrEnabled();   return ctx.dr().drPauseState(); } 
LOGGER.warn("Could not register FileUpdateMonitor",ex)
mInner.cancel()
mGnssCallback != null
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
!getNotNull(userId).contains(deviceId)
MIN_CONNECTIVITY_COUNT=1
GitBranch.list(myProject,myDir,true,true,branches,null)
logger.debug("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
sep < 0 || sep > j
matchesToValidate.get(0)
jobStateClone.clearExceptions()
mMccStr == null
utils.removeJobExecutions(list)
Thread.sleep(1000)
trainSamplesPerIteration(-2,2)
ImmutableList<String>
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
expectedStatus != 400
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
display.getRealMetrics(mDisplayMetrics)
new NonAnnotatedConfigurationProblem(metadata.getClassName(),reader.getResource(),metadata)
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new MediaController(mContext,token)
checkCall(receiver)
ModuleOrderEntry myOrderEntry; 
Integer.parseInt(stackIdStr)
result.getPath()
Long.parseLong(timeout)
result.getReceipt().getEnergyUsageTotal()
checksums(sourceSyncFile)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
case T_FLOAT_DENSE: 
dest.writeInt(txPower)
search.scoreDocs[1].score >= search.scoreDocs[2].score
in.markReaderIndex().readByte()
inflater.inflate(R.layout.mdtp_time_picker_dialog,container,false)
reference != null && reference.isValid()
DEFAULT_PORT=1433
getPreferences().save(fos,"")
((FloatValue)input).getValue().doubleValue()
!applied
IllegalArgumentException.class
y == 32
routeApplicationState(true)
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,false)
assertEquals("There should be no files",0,files.length)
FieldAccess.forField(delegateField).read()
BackupManagerServiceInterface svc=mService; 
IR.constNode(IR.name(shortName),googRequireNode)
gzipHandler.addIncludedMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
TokenSet.create(OUT_KEYWORD,VARARG_KEYWORD)
new String(bytes,"UTF-8")
mService.setAppPolicy(UID_A,POLICY_NONE)
getParameterValues(request,param,null)
Validate.notEmpty(name,"Cookie name must not be empty")
MessageQueueWeDeployPlugin.class
UIUtil.drawBoldDottedLine((Graphics2D)g,xStart,xEnd,dottedAt,bgColor,effectColor,false)
query.startsWith("about:")
(0x0000000000000007L)
new PagesListInitNewPageRecord(cacheId,nextId,io.getType(),io.getVersion(),nextId,prevId,0L)
textLanguage.getShortName()
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0c,0x02,0x06,0x00,0x00,0x00,0x02,0x0d,0x0a,0x02,0x00,0x00,0x6f,0x4e}))))
super(manager); 
Time.getDescription(milliseconds,approximate)
getAlignment(targetDataLayout)
@UriParam(label="producer",defaultValue="1") private String requestRequiredAcks="1"; 
executedBulkWrite=true
Platform.isPPC()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
LOG.info(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
existingOne != null
startingWindow != null && ttoken.startingView != null
Object[]
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
learnRate * 0.5f
subscriber.next(String.valueOf(i))
selenium.isElementPresent("link=Control Panel")
getProperties().requestCacheEnabled()
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
PetiteReferenceType... lookupReferences
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
loaded.getLoaded().getDeclaredConstructor()
assertEquals(3,StringUtil.countMatches(drl,"import "))
loaded.getLoaded().getDeclaredConstructor()
index / 2
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public CharSequence getAndroidCarrierNameForSubscription(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_SUBMODULE))
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
FunctionTypesKt.isExtensionFunctionType(supertype)
id=23
TEST_TIMEOUT_MS=400
mLinearLayout.setVisibility(View.GONE)
scheduleRemoveStartingWindowLocked(wtoken)
mPowerManager.isInteractive()
indexService.newQueryShardContext()
input.getDouble(0) < 0.05
compressedProto.length < 340000
data[1] > 800
matcher.find()
getEditor().getDocument().addDocumentListener(this,myEditor.getDisposable())
new Paint()
pgl.loadFragmentShader(fragFilename)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
mOverlay != null && mBottomOverlay != null && mRotation != RotationUtils.getExactRotation(mContext)
System.out.println("The stack is full, can't insert value")
firstPos > mTargetPos
RawTCPInput.class
Log.severe("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
ONE_MINUS_DST_ALPHA(7)
StringUtils.abbreviate(analyzedSentence.toTextString(),500)
InputType.recurrent(convNIn,length)
RedisRunner.shutDownDefaultRedisServerInstance()
new EnterSelectionDialog(shell,Condition.functions,"Functions","Select the function:")
"found " + className + " -- "+ _className
assertThat(pod).hasName("cheese")
Thread.sleep(1000)
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
scrollWebElementIntoView(webElement)
-551779908
T extends Model
Mono.subscriberContext()
mService.reassociate(mContext.getOpPackageName())
/**   * Controls tesselation factor (e.g how often a input patch should be subdivided)  */ TessellationControl
Throwable e
type.getDeclaredConstructor()
new ObjectMapper().readerFor(HashMap.class)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0 || !reportToActivity
CLEAR_OUTPUT_DIRECTORY=true
Throwable e
@Override
channel.write(reply,remoteAddress)
return __assumedEncodings; 
refreshRotationLockTile()
id=18
S3DataSegmentMover.class
Map<String,Terms>
LOCAL_OPTION.getLongOpt()
Deactivate(app)
BackupManagerServiceInterface svc=mService; 
mTarget != null && target == null
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getOutput()
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
Float.parseFloat(strings[i])
x == -1
getTestName(false)
entry.hasChanged()
createUrl(Url.append(myRepositoryRoot,path),false)
getClass().getSimpleName()
visible=false
resolveFromIndices(localProcessor)
Long3 v
Size.kilobytes(6)
settings.setTextSize(WebSettings.TextSize.SMALLER)
vocabularySettingsHelper.getRequiredClassTypePKs()
dy == 0
new JCacheProducer(this,cacheConfiguration)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character","AnyObject")
arrayExpression == null || rightHandSide == null
noClasses.get() && myBC.getCompilerOptions().getFilesToIncludeInSWC().isEmpty() && !ApplicationManager.getApplication().isUnitTestMode()
action != KeyEvent.ACTION_UP
!exported
mAppToken.isVisible()
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),false,Variance.OUT_VARIANCE,Name.identifier("R"),parameterCount + 1)
transform(matrix,source,width,height,true,recycle)
stackIterator.remove()
proxyRequest.getRegion()
session.getPlaybackType() == MediaSession.PLAYBACK_TYPE_REMOTE && mRvc != null
tileElement.getChildByName("properties")
annotationHelper.printAnnotationError(element,"%s annotated element should have an empty constructor")
Throwable e
Integer.parseInt(_ANALYTICS_GATEWAY_PORT)
count < 17
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.2f)
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
mAuthorities.valueAt(i)
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",true))
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
RuntimeException e
typeSettingsProperties.toSortedString()
state > singleByteReads || dst.remaining() == 1
sendMessageAtFrontOfQueue(CMD_STOP_AP)
postVisitColumnDefinition(each,statement,column.getName())
ModuleFactory.stopModule(mod,true,true)
GL11.glGetIntegerv(pname,params)
new StringBuilder(734)
this.thrown.expectMessage("File must exist")
Collections.singletonMap(ATTR_NODE_CONSISTENT_ID,consistentId)
mEntryValues[which]
isBusy()
DATABASE_VERSION=501
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
mPrivateInput == null || mReplyHeader.responseCode == -1
new ShardPath(false,shardPath,shardPath,new ShardId(index,0))
page.getMembersByIdx(0).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(1)
new RelationIndexStatusReport(false,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
StringBuilder ret
out.write(BYTE_FULL)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
TokenSet.create(JetNodeTypes.BLOCK,JetNodeTypes.CLASS_BODY,JetNodeTypes.FUNCTION_LITERAL_EXPRESSION,JetNodeTypes.FUNCTION_LITERAL)
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
returnValue == null && !(calls == 0)
cacheElement != null && cacheElement.getValue() != null
rootDependency.toBundleUrlWithType()
EditorHelper.normalizeOffset(editor,res,true)
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
TypeEvalContext.codeAnalysis(getProject(),getContainingFile())
delegate.writeStartElement(prefix,localName,namespaceURI)
Arrays.equals(valSrcQueries,other.valSrcQueries)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,FOLDER_NAVIGATION)
new Paint()
orderUsingCustomerPayment && !cartHasTemporaryCreditCard
MAKIBESF68(41)
checkCall(receiver)
mWindowingMode != WINDOWING_MODE_PINNED
mUserManagerHelper.getAllUsers()
SVID_SHIFT_WIDTH=8
identifier != null
viewable=true
!MessageDigest.isEqual(ourMac,theirMac)
Exception e
responseCode < OK || MULTIPLE_CHOICES <= responseCode
!realmFile.exists()
BorderFactory.createEmptyBorder(5,10,0,0)
scrollWebElementIntoView(webElement)
headers.getCommand()
scheduleRemoveStartingWindowLocked(wtoken)
mCurrentDate.get(Calendar.MONTH) != month
capacityOrValue >= 0
Slog.e(TAG,sb.toString())
cfstore.markCurrentSSTablesReferenced()
logger.finest("Optimized Selector: " + selector.getClass().getName())
request.getPathInfo()
IllegalStateException.class
getProperties().put("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
mTxtLog.setText(llog)
new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))
return false; 
DELAY_MILLIS=10000
e.toString()
ap.getSsidStr()
anomalyFilter.containsKey(filterKey)
possibleCenters.elementAt(i)
LOGGER.trace(e.getMessage(),e)
new GameObjectQuery().idEquals(objectId)
Math.min(desired,heightSize)
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
jsonModel.insert(async)
mConnector.executeForList("volume","list","broadcast")
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
isBookmarksList()
columnSums.sum(1)
tenantApi.uploadPluginPaymentStateMachineConfig(PLUGIN_NAME,stateMachineConfig,requestOptionsOtherTenant)
new NetAddress(resolvedHost,-1,resolvedPort)
height - (int)maxY
checkCallerIsSystemOrShell()
comparePartitionOwnership(false,localMember,partition)
sharedOptsCount.containsKey(thread)
testPackage.getFormattedSuccessRate()
r - scrollX
type.getDeclaredConstructor()
context == null || context == EGL_NO_CONTEXT
!mIsOnInnerCircle && hour != 0
LOG.warn(e)
type.getDeclaredConstructor()
super.getHibernateTemplate().execute(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     for (Iterator i=expressions.iterator(); i.hasNext(); ) {       GrailsMethodExpression current=(GrailsMethodExpression)i.next();       crit.add(current.getCriterion());     }     List results=crit.list();     if (results.size() > 0) {       return results.get(0);     }  else {       return null;     }   } } )
dropAllTables()
{12,14}
assertEquals("Size of " + r,2,r.size())
!isFault && !allowWrapperOperations && op.isUnwrappedCapable()&& !op.isUnwrapped()
Float.parseFloat(strings[i])
fileIds == null || fileIds.isEmpty()
params.getBuckEventBus()
!Character.isLetter((char)c) && (c != '_') && (c != '-')
Double.toHexString(d)
prefs.getBoolean(context.getString(R.string.pref_enable_cell_key),true)
parentType == PyElementTypes.FUNCTION_DECLARATION && type2 == PyElementTypes.ANNOTATION
assertRestrictBackgroundOn()
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
order.getSize()
BackupManagerServiceInterface svc=mService; 
setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
BasicDataSourceFactory.createDataSource(p)
LOGGER.isDebugEnabled()
metadata.getPropertyClosureIterator()
/**   * Returns the next pseudorandom  {@link ArrayValue} of local date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local date-time elements.  */ public DateTimeArray nextDateTimeArray(){   ZonedDateTime[] array=nextDateTimeArrayRaw(minArray(),maxArray());   return Values.dateTimeArray(array); } 
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
new Paint()
((ContactJabberImpl)obj).getAddress().equalsIgnoreCase(getAddress())
IOConverter.toInputStream(s,null)
CharUtils.isAsciiPrintable(CHAR_COPY)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
previousAttribute.compareToIgnoreCase(attribute)
serialVersionUID=2123150840
disable2ForUser(what,token,pkg,mCurrentUserId)
new char[1024]
new IndexWriter(rd,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Integer id=Integer.parseInt(reader.getAttributeValue(null,"id")); 
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
metadata.addHaving(new BooleanBuilder())
selenium.isElementPresent("link=Control Panel")
Throwable e
intent.resolveType(getContentResolver())
wp.getRunAdvance(mChars,start,end,contextStart,contextEnd,runIsRtl,end)
ctx=ldap.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw())
typeSettingsProperties.toSortedString()
assertEquals("to",13,sr.getToInt())
new RunAutomaton(automaton,false)
imageViewFuture.setComplete(e,imageView)
selenium.isElementPresent("link=Control Panel")
AudioSystem.isMicrophoneMuted()
m.getDeclaringClass()
LOGGER.warning("Unable to load image using AWT loader!")
new Dialog(ActivityMain.this)
(UndeclaredThrowableException)unwrapped
new SpoonBrowser(cTabFolder,spoon,urlString,isURL,true,listener)
assertThat(context.getExtensions()).hasSize(44)
discardChannel.receive(10_000)
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
task.topRunningActivityLocked() != null && task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
RajLog.e("LoaderOBJ","File decode error")
RequestContext.create(ksession.getClass().getClassLoader())
StringBuilder ret=new StringBuilder(100); 
PublisherPeek<T>
DiagnosticFactory2.create(WARNING,AS_TYPE)
selenium.isElementPresent("link=Control Panel")
colors[1]
new IndexWriter(indexStoreB,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
response.get(ROLLED_BACK)
connect(monitor,null,null,false,false)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).toProcessor()
jp.getDoubleValue()
new BookmarksServiceVerifyProcess()
sLat == null || "".equals(sLat)
TelephonyManager.getDefault().getCurrentPhoneType()
new IllegalStateException("Unable to close transaction",Iterables.getOnlyElement(txCloseExceptions.values()))
mQsDensityContainer.getX()
doNotUseAnimations ? 1 : ZOOM_MOVE_ANIMATION_TIME
il.createGPX("test",0,"GMT",true)
new StringBuilder(259)
userState.mIsDisplayMagnificationEnabled || userHasMagnificationServicesLocked(userState)
@NotNull
LOGGER.error("Error during XML parsing",e2)
new DebugFlag("debug.optimize_startinput",false)
lookup.getControllerServiceByType(requestControllerService.getType())
fill || textureImage != null
val & 0xFFFFFFFFL
newConfiguration.getOutputType()
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
getDefinedPackage(pname)
advised.getDeclaredConstructor()
model.addAttribute("cookie",cookieV)
Locale.getDefault().toLanguageTag()
Minecraft.getMinecraft().gameSettings.fancyGraphics && tome != null
flexItem.getMarginLeft()
mImageManager.load(holder.mImgFeatured,new ColorDrawable(ContextCompat.getColor(holder.mImgFeatured.getContext(),R.color.grey_lighten_30)))
textVersion.substring(0,textVersion.getIndex("#"))
super.performAccessibilityActionInternal(action,arguments)
Loggers.get(getClass()).warn(format("Pool %s did not terminate",getClass().getSimpleName()))
"Searching class for device type " + deviceType
mExitingAppTokens.get(i)
steps <= 0
mThemeStore.getWpComThemeByThemeId(themeId)
{0x003,0x006,0x009,0x060,0x012,0x042,0x021,0x024,0x030,0x048,0x00c,0x018,0x045,0x051,0x054,0x015,0x01A,0x029,0x00B,0x00E,0x01A,0x029}
DefaultCacheKeysFactory.staticGetCollectionId(cacheKey)
mGnssCallback != null
ImmutableList<String>
selenium.isElementPresent("link=Control Panel")
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
c > 32
resources.getDimensionPixelSize(R.dimen.close_handle_height)
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",false)
SCAN_STATUS_PARTIAL=1
3 >= buf.length - count
mPendingFileUris.iterator()
new ColorPickerField("paramValue",paramVale){   @Override public IConverter getConverter(  Class type){     return new IConverter(){       public String convertToString(      Object value,      Locale locale){         String input=(String)value;         if (input.startsWith("#"))         return input.substring(1);  else         return input;       }       public Object convertToObject(      String value,      Locale locale){         if (value.equals(""))         return value;         return "#" + value;       }     } ;   } } 
stopServer()
DEFAULT_WIDTH=0x00010000
enabled=false
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString())
value.toLowerCase().startsWith(constraintLowerCase)
DiagnosticType.warning("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
mBottomRightStrip=mContext.getResources().getDrawable(resId)
contact != null && contact.showInRoster()
Validator.isNotNull(modified)
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage),false)
GL20.glUniformMatrix3fv(location,transpose,value)
endsWith("/home/source")
MessageBodyWriter<DummyObject>
IoUtil.delete(dir,true)
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
findCodecForFormat(true,format)
new File(projectDirectory,"pom.xml").isFile()
IccUtils.cdmaBcdByteToInt((byte)0x8c)
isColumnVector()
updateChildren()
isLinux(expectedSql)
dataType.endsWith("Double") || dataType.equals("double")
CHECKIN_VERSION=32
/**   * @return a String for the summary of the preference.  */ public CharSequence getSummary(){   return null; } 
TestFileEntry testFileEntry=new TestFileEntry(fileName,folderId,groupId,inputStream); 
externalMediaDir.getPath()
/**   * Mounts file resources in sub directories that do not exist in the main resoucres.  */ public class TestFileResourceSetVirtual extends TestFileResourceSet {   @Override public File getBaseDir(){     return new File("test/webresources/dir3");   } } 
pw.print(ps.getInstantApp(user.id))
selenium.isElementPresent("link=Control Panel")
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
LoginInteractor loginInteractor
DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
DEBUG=false
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
EMOJI_SMALL=0.90
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
selenium.isElementPresent("link=Control Panel")
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commitAllowingStateLoss()
Object minIntDigits=properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
d.getMinimumHeight()
m.getContent(OutputStream.class)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
verify(issueUpdater).setManualSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
mMccStr == null
System.currentTimeMillis() + 1_800
methodFlatteningResolver.hashCode()
insertAfterCursor(editor,context)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
public class ArialBlack extends BasicFontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
host == null || host.isAlias()
service.getDomain().id()
subrange.getEnd()
VtexApis.REPLIES_URL + topicId
@ConditionalOnEnabledHealthIndicator("elasticsearch")
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
typeSettingsProperties.toString()
new Paint(Paint.ANTI_ALIAS_FLAG)
new StringBuilder(1024)
return loadBefore; 
assertEquals(0,dataCountsDoc.get("bucket_count"))
mDragState == STATE_IDLE
threadContext.isStartNextThreadLoop()
Timber.e(msg)
maxInvocationCountObservedDuringWarmup * 2
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
reactContext.runOnUiBackgroundQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
CollectionAdminRequest.createCollection("halfdeletedcollection2","conf",4,3)
totalMessage++ % 10000 == 0
return false; 
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.REDIRECTION,getHttpStatusSeries(result))
sysPkg != null && sysPkg.pkg != null
d != 0
!TextUtils.isEmpty(addresses)
AMStoreUtil.getFileVersionPath(fileVersion,configurationUuid)
safeRefs.addAll(unsafeRefs)
COOKIE_SYNC_MANAGER=false
Number rate
recipient != null && recipient.getNode() != null
super.removeLast()
log.info("Reset to factory defaults : onOperatorError")
dic.buildRouterChain()
bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0
log.debug("Error extracting callable results",e)
return true; 
this.messageService.monoPreAuthorizeBeanFindById(2L).subscriberContext(withAdmin)
InputMethodManager.getInstance()
Integer.parseInt(optionsHelper.getOptionValue(OPTION_PERIOD))
logger.getLogger().warning("Failover took:" + (end - start) / 1000000 + "ms")
getActiveFgCall().getPhone().startDtmf(c)
mMccStr == null
request.contains(HttpParameters.SESSIONS_PART) || request.contains(HttpParameters.PROCESSES_PART) || request.contains(HttpParameters.JNDI_PART)|| request.contains(HttpParameters.CONNECTIONS_PART)|| request.contains(HttpParameters.MBEANS_PART)
item.send(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
mActionBarTop.getVisibility() != GONE
maxLiveColumns < count
_node.getNodeId()
i.getTouchIconUrl() == null
originalSchemaUserObjects.getName().equals("")
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new FileStructurePresenter(view,javaNavigationService,context,editorAgent)
!Iterables.isEmpty(batchServerInventoryView.getInventory()) && Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
new RuntimeDroolsException(this.getEvalExpression() + " : " + e,e)
anchorFile instanceof PyFile
Math.max(clientCount,1)
obj.getRequiredTokens()
"streams:" + streamId
Throwable e
callback.disconnectCallback(name,jsa)
map.keySet()
props.getProperty(SAVE_THREAD_COUNTS,TRUE)
group != null && this == group.mInternalConnection
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
protocolProvider.getProtocolDisplayName()
SCROLL_BAR_SIZE=10
maxActiveSessions == null && servletContainerService != null
private final ParallelFields fields; 
i < repeatCount
Assert.assertFalse(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
hasColumn(oldTableName,"templateId")
MonitoringPortlet.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
scores.getAlgorithm()
child.getElementType() != TokenType.ERROR_ELEMENT || child.getFirstChildNode() != null
new ArrayList<>(0)
loaded.getLoaded().getDeclaredConstructor()
functionFactory.lossNegativeLogLikelihood(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
factory.createType(clazz,factory.createRawSubstitutor(clazz),getLanguageLevel())
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
getGlobalOptions().setManualOrder(enabled)
new Paint(Paint.ANTI_ALIAS_FLAG)
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).onErrorMap(this::mapError)
photos.toggleSelectPhoto(is.getTag().toString())
mUsbDataUnlocked && active && mCurrentUser != UserHandle.USER_NULL
resp.setHeader("Access-Control-Allow-Credentials",credentials)
expiresPctx.evaluateActionQueue(workingMemory)
RoleLocalServiceUtil.loadGetRole(companyId,name)
findDelegateForNewObject(name)
imeWin.getFrameLw()
StyleConstants.setFontSize(style,13)
ImmutableList.copyOf(sourcesAsStrings)
returnValue
from > to
_typeSettingsProperties.toString()
new IndexWriter(directory,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
order.getSide().equalsIgnoreCase("buy")
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
initialCapacity > 1 << 30
isTerminated()
createDouble(buffer.length(),init,workspace)
mStackScroller.getChildAtRawPosition(x,y)
cl.show(cards,CARDS_BIND)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,loadedMethodType))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
ExceptionUtils.getStackTrace(th)
DATABASE_TYPE_MSSQL.equals(databaseType)
a.getString(attr)
dest.writeInt(mSubId)
TelephonyManager.getDefault().getCurrentPhoneType()
new RuntimeException("Error loading DataSet at path " + pds.getPath() + " - DataSet may be corrupt or invalid."+ " Spark DataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
Long.parseLong(val)
ret.setComplete(e,response)
apnContext.getWaitingApns()
failedIncomingConnection && failedOutgoingConnection
registered.remove(objectName)
System.identityHashCode(o)
currentGroupByExprData[index] == null
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator())
child.getMeasuredWidth()
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
FindByIndexNameSessionRepository<S>
exception.getMessage()
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,true)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
p.getTeleport()
requestLayout()
head.getNextCircular()
mAuthorities.valueAt(i)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
ObjectHelper.isNotEmpty(configuration.getClusterService())
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
NetworkAddress.formatAddress(inet.address().getAddress())
Messages.showErrorDialog(component,getErrorTextFromException(e),title)
new IllegalStateException("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
LOG.debug("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
PreferenceManager.instantVideoUploadEnabled(this)
t != globalType && t != Type.INT
Long.valueOf(2)
layer.mDrawable == null && (layer.mThemeAttrs == null || layer.mThemeAttrs[R.styleable.LayerDrawableItem_drawable] == 0)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper,false)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
mUserStates.valueAt(i)
new StringBuilder(256)
!FRAGMENTED_OPCODES.contains(mOpcode)
mDataAuthorities == null || data == null
getExpressionTypesFromInput(session,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
LOG.debug("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
metaData.getColumnLabel(1)
from > to
mPkg.getOrCreateConfig(new ResConfigFlags())
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
new NoSuchFileEntryException()
calendar.set(Calendar.DAY_OF_WEEK,2)
new Fault("COULD_NOT_WRITE_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
assertTrue(metaInject.init(spyMeta,data))
w == winShowWhenLocked && mPolicy.isKeyguardShowingOrOccluded()
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
hasGuestViewPermission(layout)
Integer.parseInt(leftStr)
methodsToImplement(type,methods)
auxString2.substring(0,auxString2.lastIndexOf(","))
filter != null && !filter.isAccept(field) || field.getDeclaringClass().getAnnotation(Transient.class) != null
calcTo()
mappingData.contextPath.setString("")
classFile.matcher(file.getName()).matches()
mBluetoothService.notifyIncomingA2dpConnection(address,false)
uuid.getLeastSignificantBits()
InvokerHelper.getMetaClass(obj.getClass()) == mc || !(mc instanceof ExpandoMetaClass)
case 9: 
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
origin.realComponent().doubleValue() >= other
expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser","JDK16","JDK17","JDK18")
hashSymbols.values()
getTestName(false)
generateIndex(f,null,null,alreadyGeneratedFiles,alreadyUploadedFiles)
target.getAddress() == null || target.getAddress().length() == 0
b == null || b.length == 0
cookies.rowMap()
TextUtils.isEmpty(number)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"cpuinfo",pw)
taskClass.findClassAttribute("description",true)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
query.resolutions().toArray()
interactor.startCommand(packageName,callback,mCommand,mArgs)
i % dictionarySize
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } 
currentGroupByExprData[cachedLookupIndex] == null
new CacheCreateConfigOperation(config,false)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
regSocial * trusterWeightValue * userFactorValue* userFactorValue
new ScriptField_Point(mRS,PART_COUNT)
ImmutableMap.of(storeName,mutations)
filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))
mCurrentVrCompositorService == null
addEnum(ArmorMaterial.class,name,textureName,durability,reductionAmounts,enchantability)
List<Number>
assertPhoneNumberNotEqual("123123","0123123",false)
type.getDeclaredConstructor()
new File(myConfig.getScriptName())
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName()) || binding instanceof DBDAttributeBindingType
this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
testInput("DateTime",DateTimeValue::datetime,ZonedDateTime.now(),ZonedDateTime.parse("1956-10-04T19:28:34.123+01:00[Europe/Paris]"),ZonedDateTime.parse("1956-10-04T19:28:34.123+01:15"),ZonedDateTime.parse("2018-09-13T16:12:16.12345+14:00[Pacific/Kiritimati]"),ZonedDateTime.parse("2018-09-13T16:12:16.12345-12:00[Etc/GMT+12]"),ZonedDateTime.parse("2018-09-13T16:12:16.12345-18:00"),ZonedDateTime.parse("2018-09-13T16:12:16.12345+18:00"))
input.readFully(b)
((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject())).prepareForTest()
Long.parseLong(nfcid2,16)
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1000
dic.buildRouterChain()
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,false)
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
layout.createSequentialGroup().addGap(0).addComponent(iconLabel,ManagerFrame.STATUS_WIDTH,ManagerFrame.STATUS_WIDTH,ManagerFrame.STATUS_WIDTH).addGap(0).addComponent(label,labelWidth,labelWidth,labelWidth).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(installButton,BUTTON_WIDTH,BUTTON_WIDTH,BUTTON_WIDTH).addComponent(progressPanel).addComponent(updateLabel,BUTTON_WIDTH,BUTTON_WIDTH,BUTTON_WIDTH).addComponent(updateButton).addComponent(removeButton)).addGap(12)
new Paint()
Integer.parseInt(attrValue)
selenium.click("//li[4]/span/a/span")
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
new ConcurrentHashMap<String,RootBeanDefinition>(256)
mMccStr == null
selenium.isElementPresent("link=Control Panel")
m.getDeclaringClass()
createOldTestNet(n)
setServiceForegroundInnerLocked(r,id,notification,0)
Throwable e
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
BALD
mThumbPosition >= getThumbScrollRange() / 2
new Version(V_1_1_2_ID,false,org.apache.lucene.util.Version.LUCENE_4_7)
SERIAL_VERSION_UID=500L
this.getChildCount() > 1 && this.mColCount > 1
file.getFileNameOnly()
globalExecutionStats.getStartedSplits()
constraints.weightx=1f
new Paint()
_imageTrain.loadParam(networkParms)
buffersWrites() && (task=writeQueue().poll()) != null
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
labelsMask != null
mContext.sendBroadcast(intent)
STMT_CACHE_CLEANUP_TIMEOUT=500
CommonProblemDescriptor descriptor
mgr.mergeSegments(cube,0,2000,false)
setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
callTimeoutMs=10000
new HttpSender(connectionParam,true,HttpSender.SPIDER_INITIATOR)
expected=16777216
support.isFlexUnit1Subclass(aClass)
IllegalArgumentException.class
info.getType() & 0xf
handleIncomingUser(callingPid,callingUid,userId,false,ALLOW_NON_FULL,"checkContentProviderPermissionLocked " + cpi.authority,null)
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
Thread.sleep(25)
responseRaw(p)
lineArgs[4]
node.getTypeDescriptor()
2L * BUFFER_SIZE
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
entity.getUserSessionNotes()
si.id == id && si.taskRemoved == taskRemoved
striped.get(key).writeLock()
RowKey.prefixKeyWithSalt(key_a)
um.isUserUnlocked(user)
LOGGER.warn("Could not open folder",ex)
nextArg()
option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
assertEquals(13,beanCount)
getName()
out.writeByte(ENUM_CONSTANT_VALUE_TAG)
count > 0
ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(true)
cursor == null || !cursor.moveToFirst()
c.close()
savedNetwork.setParams(newParams)
sqlType == Types.NUMERIC || sqlType == Types.DECIMAL
sentence.getTokensWithoutWhitespace()
InstrumentationHandler.this.attachSourceListener(this,filter,listener,notifyLoaded)
spec.getReflection()
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope)
Float.toHexString(f)
selenium.isElementPresent("link=Control Panel")
lineCount
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1,false)
getTestName(false)
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
LOGGER.warn("Could not execute open URL",ex)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0)
(short)0777
Long.parseLong(name)
value.getType().getName()
height - 68
project.getPluginArtifactRepositories()
ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS=400
event instanceof ArtifactCacheConnectEvent
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateMessageParam",m.getName(),m.getClass().getName()))
evaluate("value = read_config('foo', 'bar')").moduleLookup("value")
loaded.getLoaded().getDeclaredConstructor()
Float.parseFloat(value.toString())
editor.apply()
mReason=reason
i >= 0
drs.setTotalRecords(0)
cassandraProperties.getUsernameAttribute()
acrComparator.compare(prevRow,compactedRow) >= 0
mappers.mapper().searchQuoteAnalyzer()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
i + 1L
selenium.isElementPresent("link=Control Panel")
elementalType.getKind()
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
300 * Constants.SECOND_MS
Foo<Integer>
mLastNotificationMillis=-rateLimitMillis
super.getHibernateTemplate().execute(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Example example=Example.create(arg).ignoreCase();     Criteria crit=session.createCriteria(clazz);     crit.add(example);     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
new IllegalStateException("Should only attach offsets to local times, not zone ids.")
Long.parseLong(args[1])
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
selenium.isElementPresent("link=Control Panel")
config != null && !config.isEmpty()
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
descriptor.superinterfaces.size() > 1 && !lambda
drawGeometry(g)
logger.debug("Cannot play TuneIn station {} ({})",stationId,e.getMessage())
parts.length > 0
PsiUtil.isExpressionUsed(grAssignmentExpression)
selenium.isElementPresent("link=Control Panel")
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
postForm=true
Person2 person=new Person2(); 
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
new CompositeException(t,e)
new IOException("Unexpected endpoints returned from the Routing Generator")
POOL_LIMIT=100
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
node.getName().toString()
mSeekBar.setProgress(0,true)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
getUserStateLocked(resolvedUserId)
lookup="java:/topic/myAwesomeTopic"
c == separatorChar || c == '/'
writeString(writer,fieldName,String.valueOf(reader.getByte()))
new ClassWriter(ClassWriter.COMPUTE_MAXS)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
flags != 0 || !layersFromProviders.isEmpty()
numDocs <= docsToGather
interactor.startCommand(packageName,callback,mCommand,mArgs)
ConcurrentPublication addPublication(final String channel,final int streamId){   ensureOpen();   stashedChannel=channel;   final long registrationId=driverProxy.addPublication(channel,streamId);   awaitResponse(registrationId);   return (Publication)resourceByRegIdMap.get(registrationId); } 
_typeSettingsProperties.toString()
USE_ROULETTE_WHEEL=false
i == -1 || i == 65535
dis.readFully(serializedData,0,length)
new ByteBuddy().subclass(Object.class).name("example.Type").make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
/**   * Returns last child <b>element</b> node or <code>null</code> if no such child node exist.  */ public Element getLastChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[childElementNodes.length - 1]; } 
Log.w(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
innerConfig.get(LAYER_FIELD_DROPOUT_W)
editedGroup != null && editedGroup.getClass() == SearchGroup.class
findCodecForFormat(true,format)
selenium.isElementPresent("link=Control Panel")
log.info("")
packageManager.getApplicationInfoAsUser(packageName,0,info.id)
readSync.notifyAll()
LOG.warn("Skipping incompatibly changed class: " + className)
cors.isAllowCredentials()
e != null && !_name.equals("$cmd")
logger.debug("license [{}] - valid",license.uid())
ignoreUnknown=true
selenium.isElementPresent("link=Control Panel")
ConstantLocationNode.create(ARRAY_LENGTH_LOCATION,Kind.Int,runtime.getConfig().arrayLengthOffset,g)
selenium.isElementPresent("link=Control Panel")
r != null && !r.finishing
index >= 0
host.getHost()
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)
BufferUtil.toDetailString(prefilled)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
Context.getGeofenceManager() != null && device.getGeofenceIds() != null
mConnector.executeForList("volume","list","broadcast")
new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.ROOT)
context.getMainLooper()
mv.visitVarInsn(ALOAD,resultIdx)
pixmap.fillCircle(x,y,radius,color)
getParameterValues(request,param,null)
IndexReader.open(benchmark.getRunData().getDirectory())
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
actor.addCaptureListener(listener)
log.warn("Error processing event, NOT scheduling retry for event='{}', retryNb='{}'",originalNotificationEvent,retryNb,exception)
checkResources(app,true)
Collections.sort(reflectionBackends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
List<Item>
AbstractItem<SimpleImageItem,SimpleImageItem.ViewHolder>
this.urlPathHelper.getLookupPathForRequest(request)
selenium.isElementPresent("link=Control Panel")
lastPos > mBoundPos
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(2,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
instance.getPublicIpAddress()
private final QSDetailClipper mClipper; 
getSelectedIconColorRes()
cachedDevice != null && cachedDevice.getName() != null
callbacks.onImageFailed()
heatpumpValues[66]
target.directory("zk" + id + "data",true)
((BCECPrivateKey)privKey).getD()
setServiceForegroundInnerLocked(r,id,notification,flags)
original.getScreenName().endsWith("new") || original.getName().endsWith("new")
smartLockHelper != null && mUsername != null && mPassword != null
m.mul(beta1)
clickListener == null
IDLE_TIMEOUT=1000
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
checkBoxView.setButtonDrawable(R.drawable.btn_check)
_log.error("Error encountered while re-indexing",e)
new EmbeddedKafkaCluster(3,mkProperties(mkMap()),0L)
longSize >= 960
jniGetLocalAxisA(addr,tmp)
WikiPageLocalServiceUtil.renamePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
myLastPoint.isNull() || myPressPoint.isNull()
Assert.assertEquals(22,balances.size())
Boolean.parseBoolean(getOptional("kylin.query.skip-empty-segments","true"))
successfullyFundedTextView.setText(bannerSuccessfulString)
enabled=false
name == null || name.isEmpty()
public static final PyNewProjectSettings NO_SETTINGS=new PyNewProjectSettings(); 
return 0L; 
StringUtil.isNotEmpty(functionName) && !"_".equals(functionName) && o.getContainingFile().getImportMap().containsKey(functionName)
l.maxCpus(lic.maxCpus())
id=16500
maxMergedSegmentBytes / 1024.0 / 1024.0
Status.createStatuseList(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
items[29]
windowStart < messages.length
partOfStatement.getLibraryId().getCanonicalText()
mQueryTextView.length()
Assert.assertFalse(_clusterInvokeAcceptor.accept(context))
tracesDir.mkdirs()
httpResponseCode != 204
args[1]
retry.attempt()
Integer.class
updateCloseButton()
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " failed to instantiate "+ cast.getName(),e,false)
mMat[7]
final SimulatedDpad mSimulatedDpad; 
mState != STATE_PREPARE && mState != STATE_FINISHED
this.healthMvcEndpointProperties.getMapping() != null && this.healthMvcEndpointProperties.getMapping().size() > 0
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now),listenerName)
new IllegalStateException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
javaVersion < 8
new ArrayList<>()
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0,0)
result.routes[0].legs[0].steps[1]
new EnterSelectionDialog(shell,files,Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogMessage"))
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(_user.getUserId(),calendarBooking,0,false)
routeInd + 1
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath","$jacocoData")
Trade data
createDouble(buffer.length(),init)
OptionalIdentifiedDefinition<FromDefinition>
Log.error("Error loading vCard of username: " + username,e)
getWebElement(locator,"1")
15 * 60 * 1000
!mDreamsEnabledOnBatteryConfig
Slog.d(TAG,"showSaveLocked(): no mStructure")
mNotificationsUtilsWrapper.mapJsonToFormattableContent(bodyArray.getJSONObject(i + 1))
bdtemp.doubleValue()
!socket.isOutputShutdown()
n.getNodeData().getId().toLowerCase().equals(str)
index.getUUID()
matchingUri.equals(targetUri) || pathString.equals(targetUri)
!res.getObject().isStopApplicable(res.isForwardDirection(),intId)
websocketComponent.setMaxThreads(20)
(BlockParentHandler)getParent()
args[1]
assertThat(list.isInternal()).isTrue()
selectedPos <= lastPos
checkCall(receiver)
Arrays.asList("Hidschāb/S","Dvořák/S","Erdoğan/S","Ångström","µg","µl","µm","'Ndrangheta","McDonald's","V&D","P&O","C&A","S&P")
AsteriskActionEnum.valueOf(action)
StringBuilder output
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_CURRENT)
handler.isDifferent(existing)
accountCapsule.getLatestAssetOperationTime(tokenName)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(path1))
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
projectsEntryPersistence.update(projectsEntry,false)
newHighlyAvailableDatabaseBuilder(path)
public Integer getHeight(){   return height; } 
schemeSpecificParts != null && data != null
expectedCountsForADoc(weights,e4Update,ind)
position <= 0
entry.rxBytes == 0 && entry.txBytes == 0
selenium.isElementPresent("link=Control Panel")
visibility != View.VISIBLE && mZoomManager != null
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new DatagramDnsQuery(null,addr,1)
addContactButton.setPressedIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
treePathTraverser(tree).expandAndFilter(tree::isExpanded)
myCell.getSourceAsString()
private final CompoundShelfFileProcessor myFileProcessor; 
Object id=gormMapping.getIdentity(); 
StringBuilder buf=new StringBuilder(); 
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class,true)
remaining == 0
new VariableExpression(text)
BeanMapper.mapList(books,BookDto.class)
selenium.isElementPresent("link=Control Panel")
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
msbFragmentCollection.getMsbFragmentCollectionId()
new StringBuilder(1024)
new BadRequestException("Field " + field + " is not of a numeric type and the cardinality could not be calculated either.",e1)
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
(byte)0xF0
expectedCountsForADoc(weights,e4Update,ind)
retVal.setProperty(entry.getKey(),value)
addFilter=true
checkCall(receiver)
getConnectTimeout()
selenium.click("//li[4]/span/a/span")
new QSDetailClipper(mDetail)
each.getPath()
ByteBuffer.allocate(4)
noteReleaseWifiLock(wifiLock)
JettyWebSocketServer.LISTEN_PORT.getDisplayName()
data.getAvatar() != null && data.getAvatar().getFullImage() != null
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
LOG.error("{} failed to start",processRef)
isAllowed()
mConnector.executeForList("volume","list","broadcast")
new GlobalStatusEnum(85,FREE_FOR_CHAT_STATUS,loadIcon("service.gui.statusicons.USER_FFC_ICON"),"service.gui.FFC_STATUS")
LOGGER.error(msg.apply())
dbManager.getGenesisBlockId()
inserter.close()
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
DLAppServiceUtil.deleteFolder(parentFolder.getFolderId())
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
lastVersionNumber + 1L
iconSize * DisplayMetrics.DENSITY_LOW >= availableHeight
connectedHeaders.setVersion("1.1")
logger.error("testConcurrentServiceTicketGeneration produced an error",e)
isDoubleCategory(typeRe)
mQueryTextView.length()
near.getAndRemove(1)
domElement == null || !domElement.isValid()
Vector2D other=(Vector2D)obj; 
entry.rxPackets == 0 && entry.txPackets == 0
id.required()
m.getDeclaringClass()
String.format(Locale.ROOT,"User [%s] doesn't exist",username)
this.cleanedUrl
mWM.isKeyguardLocked()
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Exception {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
cursor == null || !cursor.moveToFirst()
DefaultFileMetadata.missing()
return true; 
builder.breakOp(" ")
method.getGenericReturnType().toString()
mPanProfile.isProfileReady()
selenium.isElementPresent("link=Control Panel")
pMotionEvent.getY(1)
mAuthorities.valueAt(i)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     Disposer.dispose(module);   } } ,module.getDisposed())
Base64.getEncoder()
public RemoveDuplicatesTokenFilter create(TokenStream input){   return new RemoveDuplicatesTokenFilter(input); } 
TelephonyManager.getDefault().getCurrentPhoneType()
PathUtils.concatPath(homeDir,YML_FILE_DIR)
disable2ForUser(what,token,pkg,mCurrentUserId)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
logger.warn("Could not commit session",t1)
setUp(new JZDataSource(url),screen,objects)
expected.getAll()
DocumentationManager.storeOriginalElement(PlatformDataKeys.PROJECT.getData(dataContext),originalElement,element)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
numErrors != 0
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
mAssetManager.openFd(mAssetName)
classes.getPath()
requireContext()
SocialActivityInterpreterLocalServiceUtil.interpret(selector,_activity,serviceContext)
PaginationRequest.of(10,1)
LOG.error("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
String requestRequiredAcks
rsMeta.getColumnLabel(i + 1)
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements")
free(path,true)
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=2
is(true)
LOG.debug("Ganglia server component is not live")
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
LOGGER.warn(e.getMessage(),e)
@Override public Response header(String name,Property property){   addHeader(name,property);   return this; } 
selenium.isElementPresent("link=Control Panel")
new SetExchangePatternType(exchangePattern)
CachedValuesManager.getCachedValue(context,new CachedValueProvider<MethodCandidateInfo>(){   @Nullable @Override public Result<MethodCandidateInfo> compute(){     return new Result<MethodCandidateInfo>(getStaticFactoryCandidateInfo(psiClass,newExpression,context,argumentList),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);   } } )
thumbView.setTag(R.id.glide_tag,Video.getUrl(trailer))
log.info(error,cause)
printLine("Unable to connect due to unrecognised server certificate")
((BufferControl)ctl).setBufferLength(30)
DateUtils.getLocalTime()
mInterpolator == null || mNativePtr == null
Thread.sleep(1000)
Log_OC.e(TAG,"onAccountChanged was called with NULL account associated!")
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
options.remove("wireFormat")
out.writeByte(CONSTANT_VALUE_ARRAY_TAG)
message.getContact()
destination.length - offset
chatCommandManager.registerCommandAsync(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
row("p_comment",null,5.0,0.0,null,null,null)
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
moreThan2Bloom != null && srcCount >= 1
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
Instrument.create(null,new AdvancedInstrumentRootFactory(){   public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return null;   } } ,null,"test AdvancedInstrument")
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
temporaryFolder.newFolder()
PreferenceManager.instantVideoUploadEnabled(context)
len >= bits.length
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)
cookie.getComment()
fieldTree.setStandalone(true)
taskFile == null || taskFile.getAnswerPlaceholders().isEmpty()
node.internalOrder()
e.toString()
allocator.getFlowController().prepareActionAllWrite(input,epsilon,activations,nextEpsilon)
new TaskData(addedCount,null,true)
GETHOMEDIRECTORY
!isDistinct(child)
logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
retriever.getFrameAtTime(-1)
IllegalStateException.class
super.onRequestSendAccessibilityEventInternal(child,event)
emitScript(scriptStartNdx,total)
statistics.addPutTimeNanos(System.nanoTime() - start)
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message",partitionSchemaName)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
new IndexWriter(merged,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
numErrors != 0
assertEquals(0.21979375165014595,mse,1e-8)
testLogger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
myStatus.setIcon(AllIcons.Nodes.Pluginobsolete)
mService.enableNetwork(netId,attemptConnect)
node.hasDefined(Constants.ALIAS)
conf.getDouble("fuzz")
offset=0
getResource(exchange).switchIfEmpty(Mono.defer(() -> {   logger.trace("No matching resource found - returning 404");   exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);   return Mono.empty(); } ))
openingHours.getOriginal() == null || !OpeningHoursParser.parseOpenedHoursHandleErrors(openingHours.getOriginal()).toString().equals(openingHoursString)
propEditor != null && !type.isArray()
selenium.isElementPresent("link=Control Panel")
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
Build.VERSION.SDK_INT < 11 || CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_HIGH)
payload.get(PRESENTATION_ID)
countDownLatch.await()
PrintAttributes.enforceValidDuplexMode(currentMode)
NATCommand.insert(externalAddress,InetAddress.getByName(ipv6Str))
sep < 0 || sep > j
row2 * layerTileHeight
dest.writeTypedArray(remoteInputs,flags)
renderManager.render(tpf,false)
setIntegerPart(String.valueOf(integerPart))
methodName.startsWith("save") || methodName.startsWith("create") || methodName.startsWith("update")
logger.info(log)
contact.getAccount()
validateFriendlyURL(user.getCompanyId(),groupId,classNameId,classPK,friendlyURL)
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
concurrent(driver,dataSource,30)
ParamUtil.getBoolean(actionRequest,"publish")
into.get(j)
file.toURL()
ColorKey.createColorKey("MT_" + allFileStatus.getId())
ir.mHandler != null && ir.mImageListener != null
this.transactionsRepository.getTransaction(this.xidTransactionID)
lhs == null || !lhs.isValid()
7 * Bytes.SIZEOF_LONG
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
TelephonyManager.getDefault().getCurrentPhoneType()
new Insets(2,5,2,6 + 6)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
9 * 60 * 1000
InsertReturningStep<R>
settings.readLPw(null,0,false)
new IllegalArgumentException("Cacheability " + cacheability + " is not "+ FULL+ ", "+ PORTLET+ ", or "+ PAGE)
node.decrementReferenceCount()
S id
getClassInternalName(exceptionType)
new L2Vertex(null,"",-1,1e-8)
position + dockDividerWidth
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")),new ConstantExpression(0),new ConstantExpression(2))
!agentInfo.get().versionCode.equals(AgentUtil.AGENT_VERSION_CODE)
Assert.notNull(patterns,"Patterns must not be null")
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
position.set(0,0,mRight - mLeft,mBottom - mTop)
edgeColumn.getIndex()
getClientSSLContext()
getRepoUrl().equals(gitHubRepo.getRepoUrl()) && getBranch().equals(gitHubRepo.getBranch())
new FrameTask.DataInfo(train,1,false,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
sharedPref.getBoolean(SettingActivity.SHOW_BIG_PIC,false)
fm.beginTransaction().add(R.id.stats_container,mStatsPhoneFragment,StatsPhoneFragment.TAG)
log.debug("Can't set auto-commit state: " + e.getMessage())
chargeUAh > 0 && level > 0
new Documentation(__ -> Optional.empty(),__ -> Optional.empty(),null,null,null,null)
BackupManagerServiceInterface svc=mService; 
assertEquals(6,config.getMapConfigs().size())
Mono.subscriberContext()
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=40
@Nonnull Long versionId
entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId
new ServerData("Command Line",host + ":" + port,false)
addHeaderSymlinkTree(builder,params.getBuildTarget(),ruleResolver,platform,headerVisibility,includeType)
Float.parseFloat(strings[i])
selenium.isElementPresent("link=Control Panel")
NOTIFICATION_SERVICE_ID=5
navigateToUri("https://www.google.com/accounts/Logout")
JavaSourceTckSuite.suite()
resultTabs.getItemCount() - 3
type.getDeclaredConstructor()
getParents(directory,owner).find(dir -> Comparing.equal(element,dir.getVirtualFile()))
nextY < 0 || Float.isInfinite(nextY)
ignite.jcache(CACHE_NAME)
a.getFont(attr)
toUse.filter(bci -> namedCheckers.contains(bci.canonicalName()))
xmlElementDescriptor.getDependencies()
from > to
new CrypticClue("This crate is mine, all mine, even if it is in the middle of the desert.",CRATE_18889,new WorldPoint(3289,3022,0),"Center of desert Mining Camp. Search the crates. Requires the metal key from Tourist Trap to enter.")
!isPartialUpdate || id.views == null
expandableView.getIntrinsicHeight()
currLine < mPrevLine
packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat
selenium.isElementPresent("link=Control Panel")
message.getContact()
ArrayUtil.mergeArrays(javaClassReferences,additionalReferences,PsiReference.ARRAY_FACTORY)
Item.itemsList[item.itemID].getColorFromItemStack(item,0)
GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))
!entry.getKey().isEmpty()
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000,200)
F.<Object>asList(ipFinder)
ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
(data[readAt++] & 0xffL) << 56
onCreateView(context,appWidgetId,appWidget)
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
LOG.info(e)
new UnsupportedOperationException(getClass().getName())
readRecord(id,record,mode,cursor)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
sizeChanged && getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
dockedBounds.right + dockDividerWidth
group.getGroupId()
SceneApplication.getApplication().getRenderer().readFrameBufferWithFormat(offBuffer,cpuBuf,Format.BGRA8)
typeSettingsProperties.toSortedString()
diagnosedRanges.remove(3)
selenium.isElementPresent("link=Control Panel")
new DateTime(2012,3,2,23,59,0,0,testTimeZone)
mGnssCallback != null
scorecard.getUseReasonCodes()
packetId == 0x18 && !BungeeCord.getInstance().getConfig().isIpForward()
input.getExecPath()
Simple.forClass(Tuple.class)
LookupElementFactory.getInstance().createLookupElement(referencedName)
Cleaner.create(mFileDescriptor,new Closer(mFileDescriptor,mMemoryRegistration))
tok.getIdentifier()
new V(8,new BooleanSetting(true))
!(o instanceof Record)
getLogger().warn("Unknown classloader: " + loader.getClass().getName())
sanitizeName(name)
Validator.isNull(portalVersion) || privateApp
target.toString()
mLastEvent.getMStartTime()
TransactionMetadata::setInactive
selenium.isElementPresent("link=Control Panel")
lastPos < mTargetPos
expirationTime == Long.MAX_VALUE || expirationTime < 0
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
fieldDescriptor.calcValueName()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
kindMismatchError=true
ticket.notifyAll()
ire.printStackTrace(css_.err)
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
c == Integer.class || c == Integer.TYPE
createDouble(buffer.length(),init)
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",transMeta.getName(),realSubStepName)
args.length < 2
new RandomIndexWriter(random,directory,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()))
config.getMaxEntriesLocalHeap()
pk.getColumnNameInSql()
logger.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
this.mTextureRegions[pTileIndex].setTextureX(pTextureX)
this.messageService.fluxPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
Class<Object>
NB_CACHED_PARAMS=10
Exception e
new MimeException(me)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
storedOverlayInfos.valueAt(i)
new String(bytes,"UTF-8")
Exception e
findSetUpMethod(psiClass)
starting != null && starting.state != ActivityState.STOPPED
attribute.generatedSetterName()
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
nodeEngine.getSharedService(LockService.SERVICE_NAME)
logger.debug("Favorite '{}' not found",favorite)
!newDefaultSubIdObj.equals(mDefaultSubId)
new IOException(msg)
String.format("%s : filtering out %s as it's stats is unavailable.",CPUSTATUS_FILTER_NAME,filteringTarget.toString())
queueIndex < 0 || queueIndex < sources.getSize()
PrintAttributes.enforceValidDuplexMode(currentMode)
new LayerView(this,0x0f00ff00)
LOG.assertTrue(false,"Invalid element: " + elementAt)
Arrays.sort(hyperParamNames2)
name != null && name.contains(parent)
scores.getAlgorithm()
cc.getLazy()
BackupManagerServiceInterface svc=mService; 
extras.getInt("fragment",prefs.getInt("default_view",0))
state.isKeyguardShowingAndNotOccluded() || state.dozing
right > sourceWidth
slash < 0 || slash == path.length() - 1
new Dimension(700,430)
ev.getAction() == MotionEvent.ACTION_DOWN && getLayoutManager() != null
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.USER_CURRENT)
ChronicleEngineEndpoint.class
Throwable exc
Utils.parseBoolean(result,defaultValue,true)
new Integer(post.getId())
PreconditionViolationException.class
Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
width - (int)maxX
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
mAdapter != null && mDataSetObserver != null
number.contains("A")
counter > max
recipient.getExpireMessages() * 1000L
mWm.freezeRotation(-1)
AWAKE_INTERVAL_DEFAULT_MS=10000
new IllegalStateException("Legacy advertising can't include TX power level in header")
SaveImageCmdImplTest.class
new Intent(Intent.ACTION_USER_PRESENT)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
dynamicServletRequest.getParameterValues(name)
mAuthorities.valueAt(i)
rw.close()
logger.info("Starting Jetty Azkaban Executor...")
new ZooKeeperServer(dataDir,dataLogDir,tickTime)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=false
logger.error(e.getMessage(),e)
ParamUtil.getLong(actionRequest,"nodeId")
nextMapping == null || column > getColumn(nextMapping)
121 * height
shadowSize <= 0
BigInteger.valueOf(0xFFFFL)
runelite.getEventBus().unregister(plugin)
realm.checkIfValid()
Thread.sleep(800)
public Object execute(Context context){   KieSession ksession=((KnowledgeCommandContext)context).getKieSession();   if (this.outIdentifier != null) {     ((StatefulKnowledgeSessionImpl)ksession).getExecutionResult().getResults().put(this.outIdentifier,object);   }   ksession.setGlobal(this.identifier,this.object);   return null; } 
times(1)
DBG=false
setPlayedDuration(playedDurationWhenStarted + position - startPosition)
BeanMapper.mapList(books,BookDto.class)
SHUTDOWN_VIBRATE_MS > 0 && context != null
removeCachedServiceLocked(getChangingUserId())
out.writeInt(length())
FileUtils.write(fileWithBom,FileUtils.readFileToString(jsFile),"UTF-8",true)
NullPointerException.class
mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.FILL_PARENT
OrganizationMembershipPolicyUtil.checkRoles(null,filteredOrganizationUserGroupRoles)
body.getContentType().mediaType()
mAimsicdService.getCellTracker().updateNeighboringCells()
super.getLessThanOrEqualProvider(path)
minutes >= 2 || (minutes > 0 && seconds == 0)
in.readData()
sortByName(false)
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,1)
c <= 'z'
sep < 0 || sep > j
indexOfSlashNSlashR != -1
Long.parseLong(subSecs)
@Override public Variable emitBitScanReverse(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IBSR,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LBSR,result,asAllocatable(operand),this));   }   return result; } 
LOG.warn(e)
mRS.nMeshGetIndices(mID,idxIDs,primitives,idxCount)
ServiceAnnouncingChatHandlerProvider.class
item.annotationType()
location.getAccuracy() > precision
a.getDimension(attr,0)
Thread.sleep(1000)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
encoded != Integer.MAX_VALUE
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
!Objects.isNull(value)
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null,null)
route.isEmpty() || (settings.getPointToStart() != null)
dictionary.remove("type")
mBouncer.show(false,false)
initialCapacity > 1 << 30
network.predecessors(producedNode)
DEBUG=false
new OkHttpClient.Builder().connectTimeout(15,TimeUnit.SECONDS)
keyBindings.checkSearchResultKeyBinding("open",5)
nodeData.getAttributes() != null
sliceInput.getRetainedSize()
ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsResource("META-INF/batch-jobs/myJob.xml")
Validate.configurationDirectoryExists(controllerJavaHome,"controllerJavaHome must exist at " + controllerJavaHome)
LOG.info("Unable to unmarshall exception content",e)
v.size()
QMMetaEvent[]
cctx.gridEvents().isRecordable(EVT_CACHE_QUERY_OBJECT_READ)
priorityWayEncoder.getBits()
restrictedListeners.load(is)
charArray.length * 6
application.getBaseContext()
mActiveStreamType == -1 || streamType != mActiveStreamType
mUiHandler.postDelayed(pae,timeout)
getRight() - getPaddingRight()
new InvokedMethod(tr.getTestClass(),tr.getMethod(),new Object[0],true,false,tr.getStartMillis(),tr)
new ThingUID(WEMO_MOTION_TYPE_UID,device.getDetails().getSerialNumber())
new Configuration(inputParam)
pti.getArity()
mHotspotBounds.set(left,top,right,bottom)
getActiveFgCall().getPhone().startDtmf(c)
" firstActiveTime=" + firstActiveTime
new StringBuilder(560)
this.propertyDescriptorCache.putIfAbsent(pd.getName(),pd)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
builder.startObject("upgraded_indices")
rhs.getScore()
new AutoBuffer().put(this).buf()
mNextNonWakeupDeliveryTime < nowELAPSED
getTestName(false)
serialVersionUID=827245030
catalog.countEntries()
Math.max(o.outWidth / targetWidth,o.outHeight / targetHeight)
adapter.callback != null && getAdapterPosition() != RecyclerView.NO_POSITION
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/testData/navigation/gotoSuper"),Pattern.compile("^(.+)\\.test$"),TargetBackend.ANY,false)
w == winShowWhenLocked && mPolicy.isKeyguardShowingOrOccluded()
StringBuilder builder=new StringBuilder(); 
setInputMethodEnabledLocked(info.getId(),true)
"" + i
mListener.getConnectionId() != -1 && request.mConnectionID != null
new BooleanPreference("use_high_res_maps",false,true,true)
"Using bind address: " + bindAddress
new LeftTuple(f0,sink)
myWidthProvider.compute() / 4
child.getMeasuredWidth()
info != null
!hasCollapsibleActionView()
Integer.MIN_VALUE + 9
tblObj.getPath()
Integer.parseInt(attrValue)
SmsHeader.toByteArray(header).length + 2
child.resetRtlProperties()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
0.99f * mainUnitInMeters
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
am.getPassword(account)
System.getProperty(key)
mNwService.getInterfaceConfig(mTetherInterfaceName)
Throwable e1
!hasPermission(permission)
@Priority(500)
return MILLISECONDS_OF_SECOND; 
mSharedElements.size()
item.getAddress().equalsIgnoreCase(id)
new NoSuchMethodError("indexOf is not supported on RealmResults")
/**   * Needed for statistics.   */ private final LongAdder8 finishedJobsCnt=new LongAdder8(); 
new BufferedImage(50,height,BufferedImage.TYPE_INT_RGB)
EditorHelper.normalizeOffset(editor,res,true)
pixmap.getHeight() - yHotspot - 1
pgl.initTexture(glTarget,PGL.GL_RGBA,width,height)
minTopUpCredit != null && type != BlockType.TOP_UP
assertEquals("pick_first",builder.defaultLbPolicy)
applicationContext.close()
enabled=true
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY,String.class)
cmd.append("upsert",upsert)
CommonCodeStyleSettings settings=getJavaSettings(); 
FilterModifWord.modifResult(result,forests)
setBackground(null)
getPreferences().getBoolean(DEBUG_PREF,false)
TelephonyManager.getDefault().getCurrentPhoneType()
ISelectionProvider.class
currentToken.hasType("operator","comment","numeric","text")
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
lock.tryLock()
new SparkRuntimeContext(p,options)
optQuery(new JSONPointer(jsonPointer))
JsonWriteContext.createRootContext(null)
subCursor.getString(COLUMN_VALUE)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")))
getTestName(true)
Integer.parseInt(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
data[0].charAt(1)
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
new MediaController(mContext,token)
s <= 14000
DecimalUtility.getDecimal18FromBigDecimal(bigDecimal,scale,precision)
myDispatcher.removeListener(l)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("jps-plugin/testData/incremental/lookupTracker"),Pattern.compile("^([^\\.]+)$"),false)
new ArrayList<>(3)
cursor == null || !cursor.moveToFirst()
flags.length == 1
((FillLayout)parentLayout).marginHeight=0
c == Float.class || c == Float.TYPE
SingleModel<U>
String message
!annotations.isEmpty()
state.isTerminalState()
DEBUG=false
log != null && log.isDebugEnabled()
button.getButtonGroup()
LOG_SERVICE_START_STOP=false
myAccountPortlet.getPortletId()
LLVMWriteAddressNodeGen.create(stackPointer,frameDescriptor.findFrameSlot(LLVMStack.FRAME_ID),sourceLocation)
entry.getSupportsPartial()
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
Mono.subscriberContext()
times + BASE_FILE_NUMBER
builder.humanReadableField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
mSeekBar.setProgress(mVolumeBeforeMute,true)
service.asBinder().pingBinder()
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN,new UserHandle(mUserHandle))
new SingleInetAddressDns()
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"results"),connection,binding.getReadPreference(),transformer(source,connection))
getStaticCatalog(to,requestedDate,subscriptionStartDate)
new ResourceServlet()
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,sdk,port)
parcel.writeString(mViewIdResourceName)
from > to
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
pipe != null && coreState.gateKind != GateKind.None.ordinal()
ObjectStreamClass.lookup(clazz)
selenium.click("//li[4]/span/a/span")
UNDEFINED
Arrays.asList("onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
(ret == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
case REPLACE_IF_SAME: 
_resourceReferences.contains(file)
new ConditionVariable(true)
Long.parseLong(attrValue)
selenium.isElementPresent("link=Control Panel")
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId),userId)
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
postingsFormatSettings.get("fpp")
BeanUtils.instantiateClass(this.executorType)
tag.setLabelposition("top")
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
@CheckForNull Long getVersion(); 
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0))
config().useCompressedClassPointers
lock.isHeldByCurrentThread()
assertEquals(19,commits.size())
index=1
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
mAttributes.getAllFlags()
getBackgroundLocalFileFetchToEncodeMemorySequence()
Assert.assertEquals(2,clusterEventListeners.size())
optiqConnection.setSchema(name)
ImmutableSet.of("reportUnknownTypes","analyzerChecks")
collectJSVariables(clazz,candidates,false,false,true,true,true)
immediate=true
LOG.debug(ex.getLocalizedMessage(),ex)
LOGGER.error("The principal id attribute [{}] is not found. CAS is configured to disallow missing principal attributes",this.principalIdAttribute)
currentNumOfAttempts >= maxAttempts
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
tagService.getTagsAsString(task.getId(),true)
getExecutionException()
mListNavLayout != null
context == null || context == EGL_NO_CONTEXT
Long.parseLong(args[2])
RequestContext.create(ksession.getClass().getClassLoader())
deferUpdateBounds(HOME_STACK_ID)
sharedOptsCount.containsKey(thread)
Database.builder(database)
!sourcepath.isEmpty()
hideMenu()
StepVerifier.create(Flux.just(1).thenEmpty(Flux.empty())).verifyComplete()
from=PERSISTENT_ANIMATION_CACHE
ph_mean[i]
TelephonyManager.getDefault().getCurrentPhoneType()
UpgradeStepRegistrator.class
new String[2][]
@Override public final AnalyzedTokenReadings createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
mGnssCallback != null
checkCall(receiver)
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
labelIndex > 0
forecastConditionType[0]
selenium.isElementPresent("link=Control Panel")
!isSecureText
new boolean[nrtypes]
SURFACE_SELECTOR=32
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
msg.payload().duplicate()
!taskOutput.getState().isDone()
numberOfIntercept.incrementAndGet() == 2
endpoints.add(entry.getValue())
doNotAskDialogOption != null && (result == Messages.YES || doNotAskDialogOption.shouldSaveOptionsOnCancel())
_emittedToOffset=e.startOffset
str.chomp19(context)
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true).incompatibleDisallowFileType(true).incompatibleDisallowLegacyJavaProvider(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(true)
Thread.sleep(2000)
duration.getHours()
UpgradeStepRegistrator.class
id.provider != null && id.provider.info != null
Metric<Integer>
ImmutableSet<ImplementationMethodDescriptor>
!config.isAutoRead()
StringUtil.isEmpty(name)
list.append(ai)
request.getDueDate()
Color.fromRGB(0x1E1B1B)
WikiTestUtil.addPage(TestPropsValues.getUserId(),(Long)parentBaseModel.getPrimaryKeyObj(),ServiceTestUtil.randomString(),keywords,true,approved,serviceContext)
mAllowUndeclaredRTE=aFlag
groupingSets.isEmpty()
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
response == null || response.value == null
channel.disconnect()
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
getJndiString(JNDI_JMX_USER)
destinationName == null || destinationName.equals("")
this.registrations.remove(handler)
assertOrderCount("ds1",1L)
contentType.getCharset()
lp.viewType == ITEM_VIEW_TYPE_HEADER_OR_FOOTER
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
Log_OC.d(TAG,"onCreateView")
DirectoryReader.openIfChanged(reader)
getDefaultCountry()
node.getLifecycleService().shutdown()
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
cssClassName.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
TCN_RECOMMENDED_MINOR * 100
loaded.getLoaded().getDeclaredConstructor()
sl.size() >= 1
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class,boolean.class)
new MapProducerCapabilities(false,false,false,true,null)
ColorProperties.getColor("scrollBarTrackHighlight")
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(42)
onPackageDisappeared(pkgList[i],mChangeType)
super.resolveLayoutDirection(layoutDirection)
registerListPreference(settings.PREFERRED_LOCALE,screen,valuesPl,idsPl)
return true; 
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
20000 * 4 * 4
mCurrentVrCompositorService == null
Integer.parseInt(quantifier)
message.setHeader("Message-ID",cursor.getString(12))
apex.stagePackage(mResolvedBaseFile.toString())
for (CommittedChangeList list : changeLists) {   final SvnMergeInfoCache.MergeCheckResult result=myMergeChecker.checkList((SvnChangeList)list);   if (SvnMergeInfoCache.MergeCheckResult.MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.MERGED);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.ALIEN);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS_PARTLY_MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.NOT_MERGED);   }  else {     myStatusMap.put(list.getNumber(),ListMergeStatus.REFRESHING);   }   --cnt;   if (cnt <= 0) {     ApplicationManager.getApplication().invokeLater(new Runnable(){       @Override public void run(){         myRevisionsList.revalidate();         myRevisionsList.repaint();       }     } );     cnt=10;   } } 
entry.cacheContentViews(mContext,notification.getNotification())
AtomicReader indexReader=tuple.v1(); 
MA_AddThreadTest.class
getModifiableRootModelProxy()
selenium.isElementPresent("link=Control Panel")
JSONFactoryUtil.looseDeserialize(cmd)
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBeforeOrEqualsTo(new Date())
specModel.getRawProps()
if (enabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
Math.min(MAX_ALPHA,mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
return true; 
requireContext()
final PackageSet packageSet=currentScopes[descriptor.getIdx()].getValue(); 
model.getColumn(cell.col)
if (VDBG) loge("Exception trying to remove a route: " + e); 
1 << 7
RedisRunner.shutDownDefaultRedisServerInstance()
mDisplayContent.mDividerControllerLocked.getWidth()
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
Long.valueOf(2)
sn != null && sn.getHistoryReference().getHttpMessage().getRequestBody().toString().equals(postData)
ar2.cause()
assertEquals(4,possibleOutcomes.size())
CHECKIN_VERSION=32
latch.await(10000,TimeUnit.MILLISECONDS)
inner.deletedRelationships()
i > 0
myBuilder.restoreEolsState()
Character.isWhitespace(origText.charAt(i))
new LiferayLocalRepository(repositoryService,dlRepositoryLocalService,dlRepositoryService,repositoryId)
myRegisteredPasses == null || psiFile == null
fixture.checkResultByFile(after,false)
k < FILES
message.getExpiresInSeconds() * 1000L
item.annotationType()
new Paint()
type == null || type instanceof PsiWildcardType
mSharedElements.size()
timeout
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mResultStorages,ActivityThread.currentOpPackageName())
new SystemVibrator(context)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
WRONG_SHARED_SECRET=101
testClass.getMethod(SUITE_METHODNAME)
LanguageLevel.forElement(element)
request.getSharedAttributeNames()
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
storedOverlayInfos.valueAt(i)
testClass.getMethod(SUITE_METHODNAME)
new FilePathImpl(new File(path.substring(0,pos)),true)
request.setHeader(h.getKey(),h.getValue())
layer.setLayerPaint(mLayerPaint)
postingsFormatSettings.get("fpp")
bop.getBindingOutput()
Integer.parseInt(taskIdStr)
new HashSet<>(0)
side.getCapitalized()
a.getDimension(attr,0)
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
public Game mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Game game=new Game();   game.setId(fs.readString("id"));   game.setYear(fs.readInt("year"));   game.setTeam(fs.readString("team"));   game.setWeek(fs.readInt("week"));   game.setOpponent(fs.readString("opponent"));   game.setCompletes(fs.readInt("completes"));   game.setAttempts(fs.readInt("attempts"));   game.setPassingYards(fs.readInt("passingYards"));   game.setPassingTd(fs.readInt("passingTd"));   game.setInterceptions(fs.readInt("interceptions"));   game.setRushes(fs.readInt("rushes"));   game.setRushYards(fs.readInt("rushYards"));   game.setReceptions(fs.readInt("receptions",0));   game.setReceptionYards(fs.readInt("receptionYards"));   game.setTotalTd(fs.readInt("totalTd"));   return game; } 
CHATTY=false
assertPlanEquals(expectedPlan,actualPlan)
mListener.getConnectionId() != -1 && request.mConnectionID != null
new IllegalArgumentException(format("Component of scope '%s' is not allowed",component.scope()))
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
synchronized (c) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
robot.getBattery().receiveEnergy(1000,true)
DISPLAY_TASKS_PORTRAIT + 1
dataField.type.equals("UInt8") || dataField.type.equals("char")
websocketComponent.setMaxThreads(20)
dockedBounds.bottom + dockDividerWidth
new IndexWriter(d,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
StringBuilder buffer=new StringBuilder("("); 
new SimpleOrderedMap()
getFragmentManager().beginTransaction().replace(android.R.id.content,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
ONE_MINUS_DST_ALPHA(7)
DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS=0
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_unique_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR),"")
this.compilations.remove(optimizedCallTarget)
return true; 
new ChronicleEngineEndpoint(uri,this,configuration)
fm.getKnownNodes().size() == 0
c.getLiquid() == null || c.getLiquid().amount < c.getCapacity()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
Method.count(type)
@Override public final DivideByOnConditionStep or(String sql,Object... bindings){   return or(condition(sql,bindings)); } 
PromotionMessageDTO promotionMessage=(PromotionMessageDTO)input; 
DEBUG=false
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
RowPosition.forKey(range.start_key,p).compareTo(stop) > 0 && !stop.isMinimum()
return false; 
printType(out,type)
PRODUCT_FORMATS.size() + 4
Thread.sleep(1000)
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)
_iterNumber=100
dest.writeStringList(userIds)
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
new HashMap(61)
resultEndpoint.assertIsSatisfied()
word2Vec.setSentenceIterator(iterator)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
StringUtils.isNotEmpty(xml)
selenium.isElementPresent("link=Control Panel")
mBondState.setBondState(address.toUpperCase(),state,reason)
log.error("PID contains identifier with no assigning authority")
startActivity(intent)
new LeftTuple(f0,sink)
Long.parseLong(delay)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
@Nullable
p.isPrimitive()
builder.length() == 0 && s != null
new RuntimeException(e)
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Exception exceptionThrown=null; 
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(FixedValue.value(42).withAssigner(new PrimitiveTypeAwareAssigner(ToStringAssigner.INSTANCE),Assigner.Typing.STATIC)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
mTextColorLink.getColorForState(ds.drawableState,0)
selenium.isElementPresent("link=Control Panel")
new Paint()
graphHeight / 2
dest.writeInt(mSubId)
reply.writeZero(11)
matchAxisFilter != 0 || wrapAxisFilter != 0
LOG.info(e)
i & 0xff
mCurrentVrCompositorService == null
DEBUG=false
LOGGER.debug("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
DEFAULT_DISMISS_TO_VIEW_RATIO_LIMIT=.8f
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0 && template.getSegmentsCount() == 0
DEFAULT_MIN_PREFS_PER_USER=1
assertResultsPresentInDataResponse(url,asyncJob.getId(),timerJob.getId())
SHOW_ZOOM_LEVEL_BUTTON_DELAY=1500
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isElementPresent("link=Control Panel")
Map<String,String>
Context.getEncounterService().saveEncounter(encounter)
selectedPos <= lastPos
enabled=false
sname.getParent().getSimpleName().substring(8)
Integer.parseInt(bottomStr)
selenium.isElementPresent("link=Control Panel")
myStatus.setIcon(AllIcons.Nodes.Pluginobsolete)
loaded.getLoaded().getDeclaredConstructor()
protected String findItemToAdd(){   String word=Messages.showInputDialog(SpellCheckerBundle.message("enter.simple.word"),SpellCheckerBundle.message("add.new.word"),null);   if (word == null) {     return null;   }  else {     word=word.trim();   }   if (Strings.isMixedCase(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.mixed.cased.you.must.enter.simple.word",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   if (!manager.hasProblem(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.correct.you.no.need.to.add.this.in.list",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   return word; } 
storedHash == null || TextUtils.isEmpty(credential)
SamplingProfiler.newThreadGroupThreadSet(group)
retryHandler.onComplete(results)
i <= text.length() - 1
Throwable e
new IllegalStateException("Advertising can't be both connectable and scannable")
(b & 0x80) != 0
finishAndRemoveTask()
console.addToHistory(string,attributes)
selenium.isElementPresent("link=Control Panel")
focused == null || focused == root
"MySQL".equals(databaseProductName) || "Google SQL Service/MySQL".equals(databaseProductName) || "MySQL/Google Cloud SQL".equals(databaseProductName)
buffer.putInt(nextMarker + 4,0)
mbMessage.isDiscussion()
new BufferedInputStream(fi,50000)
new LightweightThread(null,null,this)
ConsistencyChecker.class
ChannelBuffers.buffer(2)
net.feedForward(new INDArray[]{in,decode},false,false)
w.unlock()
mMccStr == null
mSupportsBearing ? 1 : 0
/**   * This version of getRow() only takes data from certain rowsets We select these rowsets that have name = step Otherwise it's the same as the other one.  */ public synchronized Row getRowFrom(String from) throws KettleRowException {   output_rowset_nr=findInputRowSetNumber(from,0,stepname,0);   if (output_rowset_nr < 0) {     throw new KettleException("Couldn't find hop '" + from + "' for reading from");   }   return getRowFrom(output_rowset_nr); } 
logger.warn("[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed",shardRouting.index(),shardId,nodes.masterNode())
selenium.isElementPresent("link=Control Panel")
Criterion.and(MetadataCriteria.withKey(TagMetadata.KEY),Metadata.DELETION_DATE.eq(0),TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.eq(tagUuid))
getMethod(restrictionName,methodName).isRestartRequired()
FileUtils.deleteQuietly(root)
preferences.getBoolean("forceQuickUpdate",true)
new WelcomeScrollablePanel(new GridBagLayout())
DEBUG=false
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
JwsUtils.verify(jws,stateString).getDecodedJwsPayload()
public static TutorialSupportFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
realm.getColumnIndices()
inUtc || allDay
selenium.isElementPresent("link=Control Panel")
LOGGER.warn("Could not perform drage and drop",ioex)
new PacketDecoder(support,null)
t <= _to
MAX_ITEMS=100
Files.deleteIfExists(dir.toPath())
Log.error("Error updating vCard of username: " + username,e)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,null,false,false)
value.equals("")
checkCall(receiver)
checkDatabaseConnection(monitor)
type.toLowerCase(ENGLISH)
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
TIMEOUT=30000
getDecoder().decode(detectorResult.getBits(),hints)
Assert.assertEquals(catalogsJson.get(0).getPriceLists().size(),7)
Protocol.read(inputStream)
type > 26
promises.add(promise)
Localization.menuTitle("File")
DefaultCacheKeysFactory.staticCreateNaturalIdKey(naturalIdValues,persister,session)
attributes.getAllFlags()
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)
getVoiceUsed()
ddmStructureLocalService.deleteStructure(ddmStructure.getStructureId())
cause.getCause()
selenium.isElementPresent("link=Control Panel")
list(OAuth2Constants.AUTHORIZATION_CODE,OAuth2Constants.REFRESH_TOKEN,OAuth2Constants.PASSWORD,OAuth2Constants.CLIENT_CREDENTIALS)
freezeBalanceContract.getFrozenBalance() / 1_000_000
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",LONG)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
storedOverlayInfos.valueAt(i)
cursor.getFloat(1)
selenium.isElementPresent("link=Control Panel")
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
BTraceUtils.setIntrusionLevel(1)
extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)),true)
result.getSuccess()
timeout >= 0
rats.getConf()
value == null || value.size() == 0
!mKey.equals(other.mKey)
partitionKey.getType().getName()
platformVersion < M
/**   * Column number filter.   */ private CsvFilter columnFilter; 
logger.debug("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
case INODE_REFERENCE: 
ImmutableSet<ImplementationMethodDescriptor>
log.warn(msg,t)
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
new WorldPoint(1653,3573,0)
JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
localeKeyMjFlow="buildcraft.mj.flow." + timeGap + longName
LOGGER.isDebugEnabled()
updateChildren()
resolveClass(containingClass)
Collections.sort(reflectionBackends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
mConnectionById.containsKey(callId)
bits2[1]
BufferUtil.zeroBuffer(1)
StringBuilder buffer
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
_log.warn(ioe,ioe)
MIN_RECALL=0.1f
info.getOldName()
userRecord != null && userRecord.mClientRecords != null
new IllegalStateException("Advertising can't be both connectable and anonymous")
expandableView.getIntrinsicHeight()
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
TIMEOUT_BUFFER=20L
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
UI_MODE_SERVICE.equals(name)
n == stringLength || n == -1
s > 1e-4
KotlinTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt")
UnsafeUtils.set8(_mem,8,bias)
Thread.sleep(1000)
!mediaServCallback.getDeviceConfiguration().isVideoCaptureSupported() || !mediaControl.isLocalVideoAllowed()
setBackground(null)
mAttributes.getAllFlags()
assertEquals(someName,actualPattern.pattern())
JavaSourceTckSuite.suite()
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
assertThat(finder.findByIds(newArrayList(2,3))).hasSize(1)
assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
list.size() + 2
CHATTY=false
pathParameterMap != null
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
testClass.getSimpleName()
0 != mUnwantedNetworkCapabilities
threadSafe=true
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword())
setIntegerPart(String.valueOf(integerPart))
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
group.getGroupId()
context.getOpPackageName()
labels.size()
value == Integer.MAX_VALUE
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").bold("#")
RLP.decode2(data,1)
TestPlugin.class
port.readBytes(serialEvent.getEventValue())
BackupManagerServiceInterface svc=mService; 
jmsManager.removeTopicFromJNDI(name)
mGnssCallback != null
!msg.isResponseRequired() && !connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)
new UnsupportedOperationException(getClass().getName())
scope instanceof GlobalSearchScope || scope == null
deadline < now && deadline != 0
selenium.isElementPresent("link=Control Panel")
ref_val.contains("HTTP error 403")
tags[0]
assertOpenEventually("responseLatch",responseLatch)
terminal.receivedSendToTerminal(event.getInputText())
!panelsEnabled() || !mKeyguardMonitor.isDeviceInteractive() || mKeyguardMonitor.isShowing()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
viewObject.getMessageOwner() != null && !viewObject.getMessageOwner().trim().isEmpty()
Class<?>
request.timeout()
_typeSettingsProperties.toString()
new ServletHolder(getAccountServlet)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
REQUEST_TIMEOUT=4000
60L + 120L
selenium.isElementPresent("link=Control Panel")
oldModel.getVendorExtensions().get("x-className") != null
centerButton(mButtonNegative)
mGnssCallback != null
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to date: " + value.toStringUtf8(),e)
!AnkiDroidApp.colIsOpen()
assignedServers.add(holder)
StringBuffer sb=new StringBuffer(); 
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,true,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
object.realm != null && object.realm.id == this.id
sizeNeeded > items.length
IconGenerator.generateLauncherIconPreOreo(context,engineName.charAt(0))
modulePropertyManager.setExternalModuleType(moduleType)
@NonNull Uri uri
public Long getId(){   return id; } 
artifact.getExecPath()
selenium.isElementPresent("link=Control Panel")
ColorProperties.getColor("scrollBarTrackHighlight")
createUrl(line,el)
operandStack.remove(3)
gapBlock.getHash()
ENERGY_COUNTER=5
(dispatcherMapping & INCLUDE) != 0
FMLCommonHandler.instance().tickEnd(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6313_p,client.field_6324_e)
stateChangedLatch.await(3,TimeUnit.SECONDS)
assertClusterSizeEventually(2,h2)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
Application.SDK_INT >= 14 && SettingsManager.eventsPersistent()
@NonNull
new ArrayList<>(1)
request.getSharedAttributeNames()
name.equalsIgnoreCase(pkg.getName())
ByteArray.write16bit(newDelta,newinfo,pos + 1)
/**   * {@inheritDoc}  */ public Integer getFrom(){   return Integer.valueOf(from); } 
Sets.<Long>newHashSet()
new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.LIMITED)
origin < other
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
new DatabaseExplorerDialog(shell,SWT.NONE,dbinfo,databases,true)
CustomSQLUtil.get(COUNT_BY_G_F,queryDefinition,"JournalArticle")
ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)
new SoftReference(result,queue)
proxy == null
!disableBluetoothContactSharing
LineHashKey that=(LineHashKey)o; 
lines("Function.prototype.inherits = function(parentCtor) {","  function tempCtor() {};","  tempCtor.prototype = parentCtor.prototype;","  this.superClass_ = parentCtor.prototype;","  this.prototype = new tempCtor();","  this.prototype.constructor = this;","};","/** @constructor */ function A() {}","/** @constructor */ function B() {}","B.inherits(A);","use(B.superClass_);")
paramTypeClassNode.getMethod("validate",new Parameter[0])
getUserStateLocked(resolvedUserId)
IndexReader.open(benchmark.getRunData().getDirectory())
waiting - addConnectionQueue.size() >= 0
rt.allowCallsFrom=DEFAULT_CALLS_SOURCE
mp.getResolvedValue()
view.getClusteredLayerDegree(absNode)
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT) || order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT_MAKER)
selenium.isElementPresent("link=Control Panel")
disable2ForUser(what,token,pkg,mCurrentUserId)
mf.getColumnNameInSql()
ACRA.log.w(LOG_TAG,"Could not delete report : " + files[i])
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId),userId)
mQueryTextView.length()
Localization.menuTitle("Check integrity")
selenium.isElementPresent("link=Control Panel")
kbase.newStatefulKnowledgeSession(conf)
getSession(true)
entry.notification.cloneLight()
userRecord != null && userRecord.mClientRecords != null
mCryptoPerformanceMap.get(userId)
mHelper.onActivityCreate()
-13276483
Boolean.parseBoolean(attrValue)
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
getResultHandler(result).handleResult(exchange,result).onErrorResume(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
routes.InputTypesResource()
level < RF_STATUS_MEDIUM_SIGNAL
{2,3,3,4,1}
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).descriptionAndTooltip(message)
eventsByTypeAndTestDescriptor(DYNAMIC_TEST_REGISTERED,descriptor -> true)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
new UnsupportedOperationException(getClass().getName())
finish()
file.toFile()
assertTrue(String.format("contents or modification time of %s have not changed",this),now.modTime != snapshot.modTime || !Arrays.equals(now.hash,snapshot.hash))
selenium.isElementPresent("link=Control Panel")
LOGGER.error("Error with XML parser configuration",e1)
isLinux(expectedSql)
executeRunnableDismissingKeyguard(runnable,null,false,false)
getServiceForUserLocked(userId)
displayAttachmentSavedMessage(file.toString())
aggMap.size()
ArrayList<DocumentRange>
new Dimension(480,300)
"mobi".equalsIgnoreCase(file.getExtension())
checkNotNull(sink,"The data sink must not be null.")
Assert.notNull(fl,"Cannot find root deserializers")
Throwable e
webSocketConnection.getRemote().sendStringByFuture(s)
reporter.report("\"default\" methods must have a body",m)
assertEquals(512f,i,20f)
localBinder.getServiceInstance().restartScan()
myUnqualifiedOrLocalResolve && localProcessor.isEncounteredDynamicClasses()
CacheData<RealmObject>
Thread.sleep(1000)
checkCall(receiver)
selenium.isElementPresent("link=Control Panel")
new StringBuilder(1024)
mValues[8]
Logger.getLogger(loggerName).getEffectiveLevel()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
flags != 0 || !layersFromProviders.isEmpty()
mAnimator.getPhaseX()
public static CharSequence getItemText(FormEntryPrompt formEntryPrompt,SelectChoice selectChoice){   String choiceName=formEntryPrompt.getSelectChoiceText(selectChoice);   return choiceName != null ? TextUtils.textToHtml(choiceName).toString() : ""; } 
payload.getBodySources() != null && payload.getBodySources().size() == 1
telephony.isRinging(getOpPackageName())
type.getDeclaredConstructor()
context.getMainLooper()
new PairPongMsg(getMessageCount(),(byte)0,(byte)0,this.srcAddr,dstAddr)
range.getTo()
lastInsert != null && (lastInsert.getFlags() & Command.FLAG_NO_REPEAT) != 0
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
rj.reduceProgress()
Sets.newConcurrentHashSet()
IBinder.FIRST_CALL_TRANSACTION + 65
ByteBuffer.allocate(16)
"adjustedPath=" + adjustedPath
Trans != NO_TRANSPOSE
spaceProperty.getMaxSpaces() >= 0 && getTotalSpaces() > spaceProperty.getMaxSpaces()
BufferUtil.clearToFill(raw[i])
new GroupTest(false)
conn.getResponseCode() == HttpURLConnection.HTTP_OK || conn.getResponseCode() == HttpURLConnection.HTTP_BAD_REQUEST
new GenericDynamicProperty(MODEL_AND_VIEW_PROPERTY,ModelAndView.class,null,false)
@NonNull BluetoothDevice bluetoothDevice
type.getDeclaredConstructor()
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
new ArrayList<>(0)
Json.createArrayBuilder().add(GET_BY_ID_METHOD_SPEC)
t == null
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"cpuinfo",pw)
new StringRepresentation(resourceGetRet.toString(),MediaType.APPLICATION_JSON)
titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
comparator != null
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
mccMncs != null
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
logger.warn("license [{}] - expired",license.uid())
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
List<Throwable>
addTo(instant.getMillis(),scalar,instant.getChronology())
mAppToken.isVisible()
Thread.sleep(1000)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
display.getRealMetrics(mDisplayMetrics)
destination.length - offset
new WorldPoint(3498,3507,0)
context.getViolations(violationQuery).isEmpty()
selenium.isElementPresent("link=Control Panel")
atUserBeans == null || atUserBeans.size() == 0
Iterable<String>
mSharedElements.size()
targets.getIntermediatePoints()
!newDefaultSubIdObj.equals(mDefaultSubId)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
props.nonNullValue(DefaultSettings.JDBC_URL)
mQsDensityContainer.getLayoutParams()
FastMath.min(origin,num.doubleValue())
selenium.isElementPresent("link=Control Panel")
/**   * Executes the action with the given controller. <p> The state of the build is not defined as part of this contract, it is highly context specific.  */ Object run(BuildController buildController); 
logger.debug("Cannot set group volume ({})",e.getMessage())
methods[i].getParameterTypes().length == 0 && !methods[i].isBridge()
new RuntimeException(e)
listAdapter.swapCursor(cursor)
random.nextValue()
super.createNormalMetaClass(theClass,registry)
GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null,caps,null,width,height,null)
assertTrue(metaInject.init(spyMeta,data))
telephony.isOffhook(getOpPackageName())
offsetHandler.returned()
temporaryFolder.newFolder()
formatTimeMs(scanWifiLockOnTime / 1000)
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
result.getPath()
/**   * {@inheritDoc}  */ public Integer getFrom(){   return Integer.valueOf(from); } 
assertion.getSamlObject()
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss(Activity.RESULT_OK,payloadToMap(payload))
DEBUG=false
dest.writeInt(mSubId)
Math.min(desired,heightSize)
AcidUtils.getTableSnapshot(hive.getConf(),tbl)
return mergeShardsChance; 
Method.count(type)
new IllegalStateException("UTF-8 not supported!")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
logger.debug("Receive queue TAKE: Length={}",recvQueue.size())
Timber.v(negativeResponseFromOldToken,"Authentication exception, re-trying with new token")
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
value.toLowerCase().startsWith(constraintLowerCase)
length <= 0L
new IllegalStateException("Unable to initialize codec with ClassLoader parameter",e)
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
new IfNode(currentGraph.unique(new IsNullNode(receiver)),trueSucc,falseSucc,0.1)
initBounds(myContext,copy[i])
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark || UserPreferences.getTheme() == R.style.Theme_AntennaPod_TrueBlack
selenium.isElementPresent("link=Control Panel")
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
mapper.getFactory()
Integer.parseInt(displayIdStr)
row == null || row.size() == 0
invoke(agentInfoList,payload,DEFAULT_FUTURE_TIMEOUT)
deltaY <= 0
mm.tryLock(key,10,TimeUnit.SECONDS)
new int[3600]
fields[i] >= 0 && in2 != null
!ON_TOP
builder.humanReadableField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
mActiveStreamType == -1 || streamType != mActiveStreamType
IRON_GOLEM("VillagerGolem",IronGolem.class,99)
Log_OC.e(TAG,"Incorrect action sent " + intent.getAction())
LOG.info(e)
{12,14}
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavadocComment()
loaded.getLoaded().getDeclaredConstructor()
split[1]
metadata.getModified().getTime() >= project.getLastSave().getTime()
checkCall(receiver)
message.getLine() != lineNumbers.get(i) && message.getLine() - 1 != lineNumbers.get(i)
-10
makeTypeWithArguments(rightNode)
new LazyHeadArrayNode(record,schema)
VersionNumber.parse(playVersion).getMicro() < 6 && !"2.10".equals(scalaVersion)
log.debug("Error loading known hosts",e)
new Chat(name,mMessageEdit.getText().toString(),uid)
mService.setAppPolicy(UID_A,POLICY_NONE)
checkCall(receiver)
temporaryFolder.newFolder()
mPowerManager.isInteractive()
ClassFileVersion.forThisVm()
serialVersionUID=320L
Trans != NO_TRANSPOSE
selenium.isElementPresent("link=Control Panel")
new GitException(ERROR_ADD_REMOTE_URL_MISSING)
Callable<Long>
toLong(a,8)
xOff=0
infoAndPosition.substring(colIndex + COL_MARKER.length())
bufferSize < minAllocSize
new IndexWriter(dir,false,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
stats.getLastAccessTime() >= lastAccessTime
case 16: 
ensureExpectedToken(Token.FIELD_NAME,token,parser::getTokenLocation)
ks.newKieClasspathContainer()
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",400,"application/json","resources/add_book2json_invalid.txt",null)
log.error("Problem in JSR223 script ",e)
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null),true)
Throwable e
profile.getMaximumInstances()
expected == float.class || expected == Float.class
dirtyOutputBuffer() || currentPacket != null
factory.getDestination(endpoint,bus)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
ReflectionUtils.invokeMethod(generateViewMethod,scaffoldingTemplateGenerator,domainClass,scaffoldedtemplateName,sw)
RedisRule.bindToDefaultPort()
assertEquals(attrs.size(),7)
mLineageStore.reportLostFile(fileId)
dic.buildRouterChain()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
promise.isDone() || future.isCancelled()
new UnsupportedOperationException("read-only")
loaded.getLoaded().getDeclaredConstructor()
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
sessionState.out.printf("      Memtable thresholds: %s/%s/%s (millions of ops/minutes/MB)%n",cf_def.memtable_operations_in_millions,cf_def.memtable_flush_after_mins,cf_def.memtable_throughput_in_mb)
bufferedKeys.size() >= getBatchSize()
Thread.sleep(1000)
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
4.0 + (3 * random().nextDouble())
LOG.warn(String.format("%d ms elapsed since build job marked as finished, but still missing build rule finished events.",elapseMillisSinceFirstFinishedStatus))
System.getProperty("java.io.tmpdir",".")
stack == null || stack.mStackId != DOCKED_STACK_ID
device.getMaxConnectionState()
isTop() || isUnknown() || objs == null && typeVar == null
account.httpUploadAvailable(fileBackend.getFile(message,false).getSize()) || message.getConversation().getMode() == Conversation.MODE_MULTI
/**   * @author Hugo Huijser  */ @RunWith(LiferayIntegrationJUnitTestRunner.class) public class JavaSourceProcessorTest extends BaseSourceProcessorTestCase {   @Test public void testExceedMaxLineLength() throws Exception {     test("ExceedMaxLineLength.testjava","> 80:",22);   }   @Test public void testUnusedImport() throws Exception {     test("UnusedImport.testjava");   } } 
focusOwner.isShowing()
timeOut=240_000
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
E
this.propertyDescriptorCache.putIfAbsent(pd.getName(),pd)
((MapType)toCheck).getValuesType()
selenium.isElementPresent("link=Control Panel")
javaWriter.emitSingleLineComment("foo")
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",queryableStateName,jobId)
isInputViewShown()
striped.get(key).writeLock()
!TestUtils.isJUnit4TestMethod(method)
clusterType == Unknown && newDescription.getType() != ReplicaSetGhost
mCol.getDb().queryLongScalar("SELECT nid FROM cards WHERE id = " + id)
n.longValue()
type.getActualTypeArguments()[1]
new UpdateNotifierTimerTask(this,execSvc,verChecker)
anyLong()
activity == null || activity.isFinishing()
sendPingAndReceivePong(pingPublication,pongSubscription,NUMBER_OF_MESSAGES)
assertThat(this.repository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username)).hasSize(1)
processResult.getStderr()
e.contains(SVNErrorCode.WC_NOT_DIRECTORY) || e.contains(SVNErrorCode.WC_NOT_FILE) || e.contains(SVNErrorCode.WC_PATH_NOT_FOUND)
selenium.isElementPresent("link=Control Panel")
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(1,new ClassifierOverride(1))
getConfiguration(config)
method.getMessageType()
util.getDataTestDirOnTestFS(table)
_sumsqe / _wsum
myExprType != null
!f
MAX_EMITTER_THREADS=4
assertEquals(id1,new Twitter(id3,pass3).verifyCredentials().getName())
loaded.getLoaded().getDeclaredConstructor()
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
new UnsafeBasedStringCharProvider(unsafe,stringValueFieldOffset,str)
T id
Throwable e
/**   * The upper value in the range.  * @return the upper value in the range  */ T getTo(); 
appearance.getFloat(attr,0)
onlinePlayer.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
retriever.getFrameAtTime(-1)
@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
UIUtil.isCloseClick(e)
lookup.getControllerServiceByType(requestControllerService.getType())
value >> 8
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(3,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
mQsDensityContainer.getLayoutParams()
childAttributes != null
near.getAndRemove(1)
SameValueContextualRule<ConfirmPassword,Password,String>
Localization.menuTitle("Edit")
mQsDensityContainer.getX()
!mNavigationBarView.isQuickScrubEnabled()
new Rect(left,top,right,bottom)
artifact.replaceAll("(?<!solr-)analysis-","analyzers-")
groupPrincipalCallback.getSubject()
poList[2]
RedisRunner.shutDownDefaultRedisServerInstance()
fortData.getLureInfo().getLureExpiresTimestampMs() > api.currentTimeMillis()
assertFalse(jmsTemplate.isPubSubDomain())
Element.F64_2(mRS)
new ConnectionException(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR)
new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(true);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(false);     countDownLatch.countDown();   } } )
fulfillmentAmount.compareTo(new BigDecimal(0D)) == 0 || band.getResultAmount().compareTo(fulfillmentAmount) <= 0
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED || error == FingerprintManager.FINGERPRINT_ERROR_CANCELED
jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
XmppStringUtils.parseBareJid(connection.getUser())
stringEntry.getValue()
SmsHeader.toByteArray(header).length + 2
greaterThanOrEqualTo(0L)
new RStudioThemedFrame(null,".rstudio-themes-flat.editor_dark h1,\n" + ".rstudio-themes-flat.editor_dark h2,\n" + ".rstudio-themes-flat.editor_dark h3,\n"+ ".rstudio-themes-flat.editor_dark h4 {\n"+ "  background: none;\n"+ "  color: white;\n"+ "}\n",null,false)
type.getDeclaredConstructor()
new Builder().setDuration(5000).setColor(android.R.color.holo_red_light)
mcGroup.getMetaUID()
_buildTemplateWithGradle("simulation-panel-entry","simulator-dependency-management","--dependency-management-enabled")
await().atMost(2,TimeUnit.SECONDS)
ab.get1U()
loaded.getLoaded().getDeclaredConstructor()
TEMPLATE_PARAMS_FIELD.getPreferredName()
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
filePath == null || context == null
isSubDelimiter(c)
beansXml.getOrCreateAlternatives()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
sizeChanged || creating || !mRtHandlingPositionUpdates
_log.warn(ioe,ioe)
mService.queryDisplayStatus(getCallbackWrapper(callback))
Thread.sleep(2000)
SemVer.parseFromText(text)
Messages.getString(key,param1,param2,param3,param4,param5)
status().isFound()
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
enabled=true
Integer.parseInt(rightStr)
T[]
userImpFactor.addEqual(userFactors.row(userIdx,false))
isCorrectFile
assertEquals(input.getFieldCount(),4)
mSurfaceView != null && mSurfaceView.getHolder() != null
getTelecomService().getVoiceMailNumber(accountHandle)
fragmentEntryPersistence.countByG_FCI(groupId,fragmentCollectionId)
LOG.config(() -> createDiscoveredTestEnginesMessage(testEngines))
configurations.get(typeClass)
Throwable e
getPolicy().getMaxBinaryMessageSize()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
10 * 60_000
mProgressFooterView != null
raw.getOutParameters()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
attributes.getAllFlags()
version == null || version.equals("")
return true; 
GL20.glGetActiveUniform(program,index,256,size,typeTmp)
LOGGER.info(msg.apply())
mQsDensityContainer.getX()
Loggers.get(getClass()).warn(format("Termination of pool %s failed",getClass().getSimpleName()),ie)
property.getGetter().valueOrNull()
Object context
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
new Button(wSettings,SWT.CHECK)
!(exception ? throwable instanceof RuntimeException : throwable == null)
selenium.isElementPresent("link=Control Panel")
elementClass != null && Modifier.isPublic(elementClass.getModifiers())
context.registerReceiver(mBroadcastReceiver,broadcastFilter,null,mHandler)
options.getJvmOpts() == null || !options.getJvmOpts().contains("-Xmx")
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
argCount > paramCount || argCount == paramCount - 1
{CUSTOM_STUDY_NEW,DECK_OPTIONS,MORE_OPTIONS}
synchronized (this) {   q.offer(t); } 
filters={StringFilterAggregator.class}
field.hasName()
compensationRange.contains(compensation)
Mono<T>
log.info(message,exception)
UnsafeUtils.get8(_mem,8)
mBackdrop.animate().alpha(0.002f)
bLocations[0].getHosts()
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"meminfo",pw)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
transformation.getMoreData(opCode,fin,rsv,controlBufferBinary)
longValue != 0
!condition.isEmpty()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
messageType2.set(message2,"message","Hello World")
allowedWithoutQuotes.clear(sep)
start.expectedMessageCount(7)
PARANOID=false
Long.parseLong(args[1])
currentResponse != null && currentResponse.getAuthentication() != null
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
epsi(otherArr)
Exception e
myFoundationLibrary.CFStringConvertEncodingToNSStringEncoding(cfEncoding) & 0xffffffffffL
tm != null && tm.getNeighboringCellInfo() != null
getUserStateLocked(resolvedUserId)
!isAlsoJar && childFolder.getType() != FileType.FOLDER
writeOwners.clear()
mSearchInput.setFocusableInTouchMode(focusable)
Log.w(TAG,e.getMessage(),e)
category != null && postLoaderDao != null
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
docsUpperBound > 0 && docsSinceCommit > docsUpperBound
this.getId()
anchorView.getApplicationWindowToken()
memberRequestPersistence.update(memberRequest,false)
selenium.isElementPresent("link=Control Panel")
new CompletionThread(w,TestConcurrencyObserverEvent.onCompleted,f1,f2,f3,f4,f5,f6,f7,f8)
stackIterator.remove()
readWifiSleepPolicy()
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
action != KeyEvent.ACTION_UP
temp_descs.get(j)
topLevelBuildData.getMasterHostname()
getConnectTimeout()
spoon.saveToRepository(jobMeta,false)
createMaterializedFrame(arguments,new FrameDescriptor())
name.contains(".")
previousTypeSettingsProperties.toSortedString()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
Throwable e
COOKIE_SYNC_MANAGER=false
BufferUtil.clearToFill(raw[i])
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
states.length >= 3
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
NoResolvedType noResolvedType=new NoResolvedType(this); 
selenium.isElementPresent("link=Control Panel")
new SeleniumBuilderFileUtil(".",".")
Double.parseDouble(m.group(2))
tp.go(fd,opts.dumpUnreachable ? 30000 : 5000)
String.format("Option %s is not supported by this runtime",name)
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
endTime >= startTime
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
intervalFraction * (nextValue - prevValue)
new Intent(ACTION_QUICK_CONTACT)
nextTokenIs(b,IDENTIFIER)
l_Inflater.inflate(R.layout.adv_user_sms_listview,parent,false)
Nd4j.createUninitializedDetached(shape)
condition != null && PsiTreeUtil.isAncestor(condition,psiFile.findElementAt(offset),false)
timeout >= 0
Arrays.asList("round_robin","keep_all","keep_last","keep_none","metrics.neo4j","i.e","e.g","fixed_ascending","fixed_descending","high_limit")
intBuffer.clear()
mDark == dark || mContractedChild == null
lastUid > 0
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
availableVersions == null || availableVersions.isEmpty()
factory.getOrCreateProxyByName(packet.name)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
Math.min(desired,heightSize)
in.indexOf("{") >= 0
response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty())
mkdirs()
selenium.isElementPresent("link=Control Panel")
canvas.clipRect(0,0,width,tabHeight)
logger.warn("Could not commit session",t1)
RELEASE_DELAY_MS=240
EmailableReporter2.class
upload1.getUploadEndTimestamp() == 0 || upload2.getUploadEndTimestamp() == 0
body.getContentType().mediaType()
params[0]
parentVirtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
parametersList.getParamsGroup(GROUP_SCRIPT)
Integer.parseInt(taskIdStr)
schedulerEventListenerWrapper.setClassName(groupName)
getNextClusterSlaveID()
out.writeData(function)
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()&& item.isVisible()
resolver.acquireUnstableContentProviderClient(uri)
LAST_VERSION=937
TokenSet.create(BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
channel.write(buf,remoteAddress)
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
mAuthorities.valueAt(i)
dataType.endsWith("Integer") || dataType.equals("int") || dataType.endsWith("Long")|| dataType.equals("long")
1
conf.getRestBaseURL()
order.getSize()
Settings.Secure.getInt(getContext().getContentResolver(),ROUNDED_DIVIDER,0)
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED) || ctTypeStr.equals(ContentType.MULTIPART_ALTERNATIVE)
case 13: 
!getDatabaseTypeEnvironment().isEnabled() || !isExecuted()
log.info("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
!mIsOnInnerCircle && hour != 0
LinkedHashMap<String,Operator<? extends Serializable>>
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,false)
loaded.getLoaded().getDeclaredConstructor()
t.equalsIgnoreCase(type)
UIPasteboard.getGeneralPasteboard()
LOG.debug("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
mBlockRemovalService.shutdown()
current >= 0
new Paint(Paint.ANTI_ALIAS_FLAG)
mode != null && !mode.isEmpty()
@OptionalInput(InputType.Association)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())
StringBuilder buffer=new StringBuilder("["); 
selenium.isElementPresent("link=Control Panel")
Slog.w(TAG,"Session failed to close due to remote exception",e)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
editor.isDirty()
results != null && results.getCount() > 0
s <= 10000
queryArtist != null && !queryArtist.trim().equals("<unknown>")
toArrayWithTransform(input,new Function<PriceList,DefaultPriceList>(){   @Override public DefaultPriceList apply(  final PriceList input){     return toDefaultPriceList(input);   } } ,true)
selenium.isElementPresent("link=Control Panel")
JavaConversions.asJavaIterable(logManager.allLogs())
keySyncOperation.startsWith(targetKey)
provider.addRootSetChangedListener(this)
Utils.convertDpToPixel(3f)
Latkes.getStaticServePath()
is(false)
mJobs.valueAt(i)
hasColumn("KBTemplate","engineType")
mListener.setConnectionId(1)
sampleFactory.getDeclaredConstructor()
compileDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
GridGgfsTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
substitutor.substituteTemplate(file,caretOffset,template)
methods[index] == null || methods[index + 1] == null
RangeSliceVerbHandler.class
lp.viewType == ITEM_VIEW_TYPE_HEADER_OR_FOOTER
new FileAttribute("stubIndexStamp",2,true)
!isInitialized || isClosed()
LOG.info(title + "; " + message)
SafeUsagesExt1Kt.foo(a,1,"1","!")
TimeUnit.SECONDS.toMillis(5)
GithubNotifications.showErrorDialog(myPane,"Login Failure","Can't login using given credentials: " + ex.getMessage())
typeSettingsProperties.toString()
Log_OC.e(TAG,"Trying to share a NULL OCFile")
if (DBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
target.directory("zk" + id + "data",true)
populateUi()
a.getDimension(attr,0)
typeSerializer.getDeserializedType()
mapper.setAttributePrefix("ROLE_")
refresh()
mValues[8]
JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,"Undecomposable expression")
Throwable ignored
this.messageService.monoPostAuthorizeFindById(1L).subscriberContext(withUser)
new MediaController(mContext,token)
writer.flush()
getLogger().warn("Unknown classloader [ITE]: " + e.getMessage())
if (segmented) throw new IgniteException("Failed to send custom message: client is disconnected"); 
Throwable e
setImageDrawable(icon,false)
@UriParam(label="producer",defaultValue="true")
new ClassFormatException("Unexpected element value kind in annotation: " + type)
FIRST_CUSTOM=8192
@Self Object currentStatement
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
display.getRealMetrics(mDisplayMetrics)
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
N > 1
public BillingInfo mapLine(FieldSet fieldSet,int lineNum){   BillingInfo info=new BillingInfo();   info.setPaymentId(fieldSet.readString(PAYMENT_TYPE_ID_COLUMN));   info.setPaymentDesc(fieldSet.readString(PAYMENT_DESC_COLUMN));   return info; } 
Slog.w(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
mAccessibilityController.isAccessibilityEnabled()
myChangeListManager.waitUntilRefreshed()
@Override public Variable emitBitCount(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IPOPCNT,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LPOPCNT,result,asAllocatable(operand),this));   }   return result; } 
notificationManager.notifyAsUser(NOTIFICATION_ID,id,notification,UserHandle.ALL)
(Delegating)other
new IllegalStateException("Not a date field: " + field)
receiverUserId != mCurrentUserId && !isUidALocationProvider(receiver.mUid)
pa.getStore().getJournal().getFileMap().size() == 2
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
/**   * User: anna Date: 30-Jan-2006  */ public class ClassesScopeTreeStructureExpander implements ScopeTreeStructureExpander {   private Project myProject;   public ClassesScopeTreeStructureExpander(  final Project project){     myProject=project;   }   public void treeWillExpand(  TreeExpansionEvent event) throws ExpandVetoException {     ProjectView projectView=ProjectView.getInstance(myProject);     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<ClassNode> classNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof FileNode) {           final FileNode fileNode=(FileNode)childNode;           final PsiElement file=fileNode.getPsiElement();           if (file instanceof PsiJavaFile) {             final VirtualFile virtualFile=((PsiJavaFile)file).getVirtualFile();             if (virtualFile == null || (virtualFile.getFileType() != StdFileTypes.JAVA && virtualFile.getFileType() != StdFileTypes.CLASS)) {               return;             }             final PsiClass[] psiClasses=((PsiJavaFile)file).getClasses();             if (classNodes == null) {               classNodes=new HashSet<ClassNode>();             }             commitDocument((PsiFile)file);             for (            final PsiClass psiClass : psiClasses) {               if (psiClass != null && psiClass.isValid()) {                 final ClassNode classNode=new ClassNode(psiClass);                 classNodes.add(classNode);                 if (projectView.isShowMembers(ScopeViewPane.ID)) {                   final List<PsiElement> result=new ArrayList<PsiElement>();                   PsiClassChildrenSource.DEFAULT_CHILDREN.addChildren(psiClass,result);                   for (                  PsiElement psiElement : result) {                     psiElement.accept(new JavaElementVisitor(){                       @Override public void visitClass(                      PsiClass aClass){                         classNode.add(new ClassNode(aClass));                       }                       @Override public void visitMethod(                      PsiMethod method){                         classNode.add(new MethodNode(method));                       }                       @Override public void visitField(                      PsiField field){                         classNode.add(new FieldNode(field));                       }                       @Override public void visitReferenceExpression(                      PsiReferenceExpression expression){                       }                     } );                   }                 }               }             }             node.remove(fileNode);           }         }       }       if (classNodes != null) {         for (        ClassNode classNode : classNodes) {           node.add(classNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   public void treeWillCollapse(  TreeExpansionEvent event) throws ExpandVetoException {     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(PackageDependenciesNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<FileNode> fileNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof ClassNode) {           final ClassNode classNode=(ClassNode)childNode;           final PsiElement psiElement=classNode.getPsiElement();           if (psiElement != null && psiElement.isValid()) {             if (fileNodes == null) {               fileNodes=new HashSet<FileNode>();             }             fileNodes.add(new FileNode(psiElement.getContainingFile(),true));           }           node.remove(classNode);         }       }       if (fileNodes != null) {         for (        FileNode fileNode : fileNodes) {           node.add(fileNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   private DependencyNodeComparator getNodeComparator(){     return new DependencyNodeComparator(ProjectView.getInstance(myProject).isSortByType(ScopeViewPane.ID));   }   private void commitDocument(  final PsiFile file){     final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);     final Document document=documentManager.getDocument(file);     documentManager.commitDocument(document);   } } 
LibraryTableEditor.editLibraryTable(getApplicationServerLibrariesProvider(),myProject)
logger.info(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
id=10837
w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER
DirectoryReader.open(writer.w)
ONE_MINUS_DST_ALPHA(7)
myDispatcher.removeListener(l)
name.lastIndexOf('.')
cubeManager.mergeSegments(cube,0L,1386835200000L,false)
type.getDeclaredConstructor()
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!",excessWorkers)
_context != null
location.sourceName()
PathUtilRt.getFileName(moduleDir)
Character.toUpperCase(ch)
provider instanceof IpnbEditorProvider
socket.getSocket() == null || !connections.containsKey(socket)
loaded.getLoaded().getDeclaredConstructor()
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
LOG.error(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master")
mCallback=null
client != null && client.autofillClientIsFillUiShowing()
length=3_000
host1.getSocketAddress()
List<URLDetail>
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message",partitionSchemaName)
KieSessionModel kSessionModel
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
fragmentEntryPersistence.findByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
stall_till_cloudsize(5)
Integer.parseInt(attrValue)
statistics.addGetTimeNanos(System.nanoTime() - start)
TestEmployeeTable.class.getSimpleName()
selenium.isElementPresent("link=Control Panel")
mCaCerts != null && mCaCerts.length > 0
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
mCallback.onInputUpdated(inputId)
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin library project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).implementationDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
this.magicString
sec.getConfigurator()
BackupManagerServiceInterface svc=mService; 
tracesDir.mkdirs()
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
WordVectorSerializer.readWord2VecModel(new File("/ext/GoogleNews-vectors-negative300.bin.gz"))
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
initialCapacity > 1 << 30
SCAN_STATUS_COMPLETE=2
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=7
parent instanceof AppWidgetHostView || parent == null
service.asBinder().pingBinder()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
uri.getEncodedQuery()
assertEquals(String.format("Expected %s results but got %s. Number of evicted entries: %s.",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())
((Number)s.first()).longValue()
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),group,ActionKeys.VIEW)
sessionAboutToChange(session)
maxLength > 0 && maxLength < Integer.MAX_VALUE
new FtrlDelta(false,alpha)
firstLine.indexOf(':')
loaded.getLoaded().getDeclaredConstructor()
mesh.getLineWidth() != 1f && context.lineWidth != mesh.getLineWidth()
localMaster == null || localMaster.getAppMaster().getAppContext().getMasterService() == null
testPool.getWeightedListeningExecutorService()
new NumberFormatException("JSON forbids NaN and infinities: " + result + " at path "+ getPath())
InetAddress.getLocalHost()
return mChangingDisappearingDelay; 
mGnssCallback != null
type.getDeclaredConstructor()
new QSDetailClipper(mDetail)
securityDomain != null && !securityDomain.isEmpty()
CONTENT_SCOPE_KEY.getValue(project)
sourceHeight > 0
ssid == null || !SSID_PATTERN.matcher(ssid).matches()
LocalFileSystem.getInstance().findFileByIoFile(file)
new RegressionEvaluation(2)
l.contains("</pre>")
assertEquals("There should be no files",0,files.length)
portalTopLevelBuildData.getJobName()
atan(arr,Nd4j.copyOnOps)
copy1DRangeFromUnchecked(0,mType.getCount(),i)
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
partialUri.toLowerCase()
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
Constant.messages.getString("start.gui.cmdline.invalid.session.options",CommandLine.SESSION,CommandLine.NEW_SESSION,Constant.getZapHome())
FileUtils.setPermissions(mPackageListFilename,0640,SYSTEM_UID,PACKAGE_INFO_GID)
host.setHeaderView(mExpandIndicator)
centralDirOffset > eocdOffset
contentType + "; boundary=" + getBoundary()
setEnabledFunctions(mDefaultFunctions,true)
partId == null
hasCapability(GPS_CAPABILITY_MSB)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
hex.toUpperCase()
RowKey.prefixKeyWithSalt(key_b)
completion.onErrorResume(ex -> handler.handle(exchange,ex))
mOverlay != null && mBottomOverlay != null && mRotation != RotationUtils.getExactRotation(mContext)
XContentType.JSON.mediaType()
unsafe.compareAndExchangeObject(container,objectOffset,container,dummyValue)
analysisResult.getPackageRoots()
lastPosition <= positionCount
Boolean.parseBoolean(literalOption)
directory.mkdirs()
a.getKey()
new RedissonSession(keyPrefix,id)
return 2; 
getOptionalLong(singletonMap("long","Apio"),list)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
new CompilerException(sourcePath,e.line,e.getCause())
MockReset.after()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
mCurrentDate.get(Calendar.MONTH) != month
commState.getBoolean("sys")
rangeOffset <= thisEnd
singleLanguageProfile.getLanguage()
"TcpIpConnectionManager configured with Non Blocking IO-threading model: " + inputThreadCount + " input threads and "+ outputThreadCount+ " output threads"
assertEquals(24,instance.getCapacity())
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0) || pm.hasSystemFeature(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION,0)
Assert.assertNotEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
ArrayUtil.isEmpty(groupIds)
Slog.w(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
return flowControlUnderRuns; 
event.getRawX()
targetInfo != null && targetInfo.metaData != null
sm.getString("upgradeHandler.rst.debug",connectionId,Integer.toString(se.getStreamId()),se.getError(),se.getMessage())
timeout=5000
DEBUG=false
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
selenium.isElementPresent("link=Control Panel")
errorCount >= maxErrors
FBUtilities.getBroadcastAddress()
testClass.getSimpleName()
id=51
runtime().config.useCompressedClassPointers
BackupManagerServiceInterface svc=mService; 
logger.debug("No such directory: " + dir.getAbsolutePath())
NETWORK_ACCESS_TIMEOUT_DEFAULT_MS=2000
name == null || name.isEmpty()
!reversed
IndexReader.open(dir)
qryCfg != null && ccfg.getTypeMetadata() != null
frustumNear
DensityUtil.dpToPx(100,this)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
m.getDeclaringClass()
globalExecutionStats.getStartedSplits()
logger.error(e.getMessage(),e)
mDir.getDirIndex()
super.dispatchTouchEvent(cancel)
StringBuilder ret=new StringBuilder(internalName.length()); 
private CsvFilter filter; 
xfrm.getExt().getCy()
blog.getLocalTableBlogId()
objectMapper.reader(DataSegment.class)
methodName.startsWith("save") || methodName.startsWith("create") || methodName.startsWith("update")
assertEvaluate(buildFile).moduleLookup("txts")
Log.w(t,"Unable to obtain BouncyCastle provider! Decryption may fail!")
ProratedOrderItemAdjustmentImpl other=(ProratedOrderItemAdjustmentImpl)obj; 
av1 != null
/**   * Represents an invalid default audience value, can be used when only reading.  */ NONE(null)
mImm.getEnabledInputMethodList()
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
event.getParent()
System.nanoTime()
LocaleUtil.getSiteDefault()
mCurrentTheme != null && (themeId != null || !themeId.isEmpty())
new QSDetailClipper(mDetail)
Library.class
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
telephony.isRadioOn(getOpPackageName())
dockerClient.startContainerCmd(container.getId())
from=PERSISTENT_ANIMATION_CACHE
resultBits <= 32
LOG.lifecycle("Detection of classes for compilation ({}) plus the compilation took {}.",recompilationSpec.getClassNames().size(),clock.getTime())
formatTimeMs(fullWifiLockOnTime / 1000)
this.heading=0
holder.createWarningAnnotation(element,composeTooltipString(descriptor,deprecated))
public class RegExpParseTest extends BaseParseTestCase2 {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
equalTo(30171.0)
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
en.getString(in)
Collection<GridDrStateTransferDescriptor>
selenium.isElementPresent("link=Control Panel")
LOG.info("No SessionScavenger set, using defaults")
serialVersionUID=215521212534239L
public static final HQLTemplates DEFAULT=new HQLTemplates(); 
offset + i
pbBmp.setProcessListener(pBmpHandler)
StringBuilder buf=new StringBuilder(); 
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw_)
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new Version(V_1_1_2_ID,false,org.apache.lucene.util.Version.LUCENE_4_7)
queueLength.asString()
originalDefinition.toLowerCase().startsWith("raw") || originalDefinition.toLowerCase().startsWith("binary")
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.")
isPut(request)
assertEquals(4,StringUtil.countMatches(drl,"import "))
Messages.showErrorDialog(myMainPanel,"Error loading package list:" + e.getMessage(),"Packages")
ImmutableList<String>
new File(mantleThemeDirStr)
selenium.isElementPresent("link=Control Panel")
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_UNICODE)
selenium.isElementPresent("link=Control Panel")
result.getCause()
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
Thread.sleep(1000)
MAX_PERCENT_DIFFERENCE=0.3
state.value == rotationLocked && state.contentDescription != null
mGnssCallback != null
Session.getInstance(mailServerProperties,null)
enabled=true
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
XPathUtil.makeDocument(new ByteArrayInputStream(responseData),isValidating(),isWhitespace(),isNamespace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),true)
id=10868
cause instanceof ThreadDeath
FileHash.hash(outputFile,algo).equalsIgnoreCase(checksum)
expressionType == null || expressionType.equals(JetStandardClasses.getUnitType())
new StringBuilder(50)
IoUtil.delete(dataDir,true)
!mIsWatch && mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
i == -1 || nsname.equals("/")
curLayout.getName(locale).equals(localizedName) || curLayout.getFriendlyURL().equals(friendlyURL)
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
selenium.isElementPresent("link=Control Panel")
XContentHelper.toXContent(response,XContentType.JSON,false)
fileSpecs.size() > 0
new CountDownLatch(2)
input.getExecPath()
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
accumulator.addClass(analysis)
new FieldFrame(currentFrame,isStaticInnerType,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)
mFlexItemInEdit.setAlignSelf(AlignItems.FLEX_START)
setValue(object,value.intValue())
LOG.debug(getQueueName() + " user=" + userName+ " used="+ queueUsage.getUsed()+ " numContainers="+ numContainers+ " headroom = "+ application.getHeadroom()+ " user-resources="+ user.getUsed())
partitionKey.getType().getName()
_log.error(e,e)
json.getBytes(serializationParams.getEncoding())
info != null && parameterType.isAssignableFrom(info.getDefaultType())
Thread.sleep(25)
assertThat(provider.fetchCount,is(3))
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)
BufferUtils.newUnsafeByteBuffer(fileSize)
position.set(0,0,mRight - mLeft,mBottom - mTop)
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
labelsMask != null
result.getWarnings()
annotationHelper.printAnnotationError(element,"%s annotated element should not have a private constructor")
shuffleWithNonExistentUuids(project2.uuid(),project1.uuid())
URL.encodeComponent(content)
callback.reconnectCallback(name,jsa)
XmlUtils.readIntAttribute(parser,ATTR_DATABASE_VERSION)
return false; 
defaultDndAccess != null
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).verifyComplete()
clusterList.contains(versionedCluster)
Integer.parseInt(taskIdStr)
startActivity(intent)
r.locals.ast=locals
Integer.parseInt(topStr)
msbFragmentCollection.getMsbFragmentCollectionId()
file != null && file.isValid()
ImmutableMap.copyOf(System.getenv())
new BlockFamilyRegistryImpl()
1
!cctx.rebalanceEnabled() || locPart.state() == MOVING
selenium.isElementPresent("link=Control Panel")
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,transactionSPI)
id.getType()
checkCall(receiver)
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),locator,e)
data.contains("black") || data.contains("tuxedo")
loaded.getLoaded().getDeclaredConstructor()
this.cusolverDnSsyevd_bufferSize.invoke(null,solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
mAdapter.unregisterDataSetObserver(mObserver)
reader.getType(reader.readSmallUint(protoIdItemOffset + RETURN_TYPE_OFFSET))
new DefaultHighlighter.DefaultHighlightPainter(HIGHLIGHT_COLOR)
flags_=6
parent instanceof AppWidgetHostView || parent == null
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
methodType(Void.TYPE,StringBuilder.class,Request.class,Response.class)
hgraph.getTotalOutDegree(n)
LinkageError e
assertEquals(2,boo.getFoo().getCounter())
selenium.click("//li[4]/span/a/span")
DEBUG=false
client != null && client.autofillClientIsFillUiShowing()
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.clearNotifications(); } ,ModalityState.NON_MODAL,myProject.getDisposed())
64 * 1024
CompletableFuture<Void>
parseSitemapXml=true
assertThat(o.takeNext()).isNotNull()
map.get(key)
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id)
this.encoding == null || this.encoding.isNil()
mClocks.uptimeMillis()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name)
imageHeight / targetHeight
mImm.showStatusIconInternal(mToken,getPackageName(),iconResId)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.PNORM,Pooling2D.Divisor.INCLUDE_PADDING,(double)pnorm,outH,outW,output)
public T setStandardInput(InputStream inputStream){   operationParamsBuilder.setStdin(inputStream);   return getThis(); } 
c.close()
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
Boolean.parseBoolean(attrValue)
AbstractTreeNode<PsiElement>
computeAntiJoin(inputStatistics,inputStatistics,x,unknown)
BeanFactoryUtils.beanNamesForTypeIncludingAncestors((ListableBeanFactory)parserContext.getRegistry(),DefaultConfiguringBeanFactoryPostProcessor.class,false,false)
!locations.isEmpty() && locations.get(0).distanceTo(start) > 200
defaultDndAccess != null
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
nativeLibraryDir.getPath()
selenium.isElementPresent("link=Control Panel")
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
path.substring(7)
max() < 32
checkNotNullOrEmpty(uri,"URI should not be null")
parcelableClass.dotclass()
end + 1
mergeRefUpdate.update()
TIMESTAMPTZ_READ_METHOD.invoke(object,connection)
numExamples=1
scan.getResourcesFound()
!mShowLockscreenNotifications
createDouble(buffer.length(),init)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
selenium.isElementPresent("link=Control Panel")
!value.isNull()
rsWrap.getMobFileCacheMissCount()
selenium.isElementPresent("link=Control Panel")
context.getOpPackageName()
firstSlash <= 0
indexWriter.forceMergeDeletes(false)
dateVector.getMutator().setSafe(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
!sourcepath.isEmpty()
new ConfigurationMethod(getConstructorOrMethod(),getAnnotationFinder(),isBeforeSuiteConfiguration(),isAfterSuiteConfiguration(),isBeforeTestConfiguration(),isAfterTestConfiguration(),isBeforeClassConfiguration(),isAfterClassConfiguration(),isBeforeMethodConfiguration(),isAfterMethodConfiguration(),getBeforeGroups(),getAfterGroups(),false,getInstance())
stateUpdateQueue.getStats()
new HTTPResponseResult(resEntity,httpClient)
jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName,Integer.class)
callbackList.getBroadcastCookie(i)
ctx.writeAndFlush("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
parent.getChildCount() > 0 && mAdapter.getItemCount() > 0
Long.parseLong(value)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
/**   * Total job execution time (unaccounted for in metrics).   */ private final LongAdder8 finishedJobsTime=new LongAdder8(); 
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
mergedDDMFormFieldValues.contains(text2DDMFormFieldValue)
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
discardChannel.receive(10_000)
initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.AUTHENTICATION_INITIATOR
prots == Protections.SIGN_ENCRYPT
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"cpuinfo",pw)
new Paint()
-2
provideArguments(',',"foo","bar","").toArray()
AdviceWithTasks.removeByType(route,type,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
resultCode != RESULT_OK
mListener.getConnectionId() != -1 && request.mConnectionID != null
Environment.getOemDirectory()
mAuthorities.valueAt(i)
DefaultManagementMBeanAssembler.class
getServiceForUserLocked(userId)
-1003613275
@Override public Response description(String description){   throw new RuntimeException("Not implemented"); } 
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",30,SECONDS)
builder.length() == 0 && s != null
VertexAttribute.ColorPacked()
new MockResponse().setResponseCode(404)
VDBG=false
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource("beans.xml")
loaded.getLoaded().getDeclaredConstructor()
index >= size || index < 0
return true; 
err == 0
LocalFileSystem.getInstance().findFileByIoFile(file)
c.dataFlowInfo.getStableTypes(dataFlowValue,languageVersionSettings)
selenium.isElementPresent("link=Control Panel")
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
nextMedia.localFileAvailable()
logger.debug("Exception mapping responses to requests.",e)
NB_CACHED_PARAMS=10
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
i <= message.length()
Formatter.getInstance().getNoneIndent()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
initialTargetElement != null && targetDirectory == null
chatRoomsList.add(chatRoomID)
editor.apply()
mInjector.getUserManager().removeUserEvenWhenDisallowed(userId)
mGestureDetector != null && event.isTouchEvent()
delayDuration - 120
OPTION=36
target.addTaskAndWakeup(task)
InheritableThreadLocal<Map<String,CacheEntry>>
times + BASE_FILE_NUMBER
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ Broadcaster addAtmosphereResource(AtmosphereResource resource); 
context.registerReceiver(mBroadcastReceiver,broadcastFilter,null,mHandler)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
selenium.isElementPresent("link=Control Panel")
script.getIntOperands()
PsiFile parentScope=lambdaExpression.getContainingFile(); 
vcs == null || vcs.getDiffProvider() == null
cacheFb.setMaxEntriesLocalHeap(5)
apnContext.getWaitingApns()
new SecretKeySpec(randomBytes,MAC_ALG)
input.setSourceFileFieldName(wSourceFileNameField.getText())
ImmutableSet.copyOf(modules)
return mAppearingDelay; 
mContext.sendBroadcast(intent)
RtlUtils.isPunctuations(punctuation2)
toArrayHelper(array,0)
isInputViewShown()
LOG.warn("Unable to delete {} because listInternal returns null",path)
LOGGER.info("Could not open folder",e)
new DatagramSocket(SSDP_PORT)
imageView.setImageDrawable(null)
Long.parseLong(value)
new ConnectionException(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR)
grid(1).cache(null).localSize(CachePeekMode.ONHEAP)
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
AsyncResult<Inet4Address>
reportInteraction.performInteraction(context,config,reportBuilder,reportFile)
selenium.isElementPresent("link=Control Panel")
validateHasRequiredPropertyElements(element,filePath)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
functor != 0 && mWebView.getViewRootImpl()
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
packer.packStructHeader(2,INIT.signature())
command.runHelp(stdOut)
cfs.truncateBlocking()
tracesDir.mkdirs()
GridCacheAffinityProxy.class
csFoldingEnabled.getSelection()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
bundleRoot.getParent()
new ClusterNodesDecoder(false)
mFile.getStoragePath()
in.readByte()
public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
selenium.isElementPresent("link=Control Panel")
origin.realComponent().doubleValue() <= other
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)
_typeSettingsProperties.toString()
kompiler.getMethod("exec",PrintStream.class,String[].class)
DataStreamSink<OUT>
new PacketDecoder(new JacksonJsonSupport(),ackManager)
input().size(0)
mPanProfile.isProfileReady()
"Can not parse conflict reason: " + reasonName
(View)convertView.findViewById(R.id.repost_flag)
mObsoleteAgents.valueAt(i)
assertMockEndpointsSatisfied()
config.notifyOnOwnName()
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
myImplementation.clear(myVcsLocation)
interactor.startCommand(packageName,callback,mCommand,mArgs)
ImmutableList<String>
genericReturnType.getSort()
!(layer instanceof FrozenLayer) && layer.type() == Layer.Type.CONVOLUTIONAL
@SuppressWarnings("unchecked") T replaced=(T)targetStatement.replace(newStatement); 
public interface Constants extends ConstantsBase {   s String; } 
new ObjectMapper().readerFor(BlockIteratorState.class)
selenium.isElementPresent("link=Control Panel")
isSubrepository() || absolutePath.contains("/modules/apps/") || absolutePath.contains("/modules/private/apps/")
/**   * {@inheritDoc}  */ public Integer next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
loaded.getLoaded().getDeclaredConstructor()
mValues[8]
jsonSupport.addEventMapping("edwald",HashMap.class,Integer.class,String.class)
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
public Variable emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   Variable newValueTemp=newVariable(newValue.getLIRKind());   emitMove(newValueTemp,newValue);   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   SPARCAddressValue addressValue=asAddressValue(address);   append(new CompareAndSwapOp(asAllocatable(addressValue),asAllocatable(expectedValue),asAllocatable(newValueTemp)));   return emitConditionalMove(memKind,expectedValue,newValueTemp,Condition.EQ,true,trueValue,falseValue); } 
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n",version,expectedPath)
letters[1]
Gdx.input.getX(i)
loadModuleProble(iFace,features.mockedType,false,false,true)
Foundation.log("[error] " + tag + ": "+ message)
Time.currentTimeMillis()
LOG.debug("Error reading HTTP response from " + url)
new SeleniumBuilderContext(_BASE_DIR,".",_LIFERAY_SELENIUM_DIR)
DumbServiceImpl.getInstance(project).queueCacheUpdateInDumbMode(Arrays.asList(updater))
c.close()
greaterThanOrEqualTo(290L)
new Paint()
new byte[17]
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L,14L)
dst.equals(zr)
diff.add('-' + item)
!ON_TOP
cache.put(new Element(key,element))
sdk != null && sdk.getSdkType() instanceof PythonSdkType
!Algorithms.isEmpty(pref.get())
map.put(counter++,ValueRow.get(values))
selenium.isElementPresent("link=Control Panel")
result.expectedMinimumMessageCount(2)
cfs.getMemtableFlushAfterMins() * 60 * 1000L
proxyHTTPSServer.setText(Preferences.get("proxy.https.server"))
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
itemRenderer.func_82406_b(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
numThreads.get() >= MAX_THREADS
http2Stream.garbageCollector()
Arrays.asList(RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.TEMPERATURE,RFXComValueSelector.SET_POINT,RFXComValueSelector.CONTACT)
root.waitThis().size() > 0
~View.SYSTEM_UI_TRANSPARENT
status == SocketStatus.DISCONNECT && !processor.isComet()
UserHandle.myUserId()
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this,UserHandle.USER_ALL)
myProgressTailIcon == null && myProgressTailIconName != null
DEFAULT_VERIFY_ENABLE=true
GL11.glTexParameterfv(target,pname,params)
si.deliveryCount > 1
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
copticDate.dayOfMonth()
rangedRegion.getUniqueId()
logger.debug("Error connecting to Plex",e)
qux.getDeclaredConstructor()
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER,STANFORD_DEPENDENCIES)
1 << 7
Loggers.get(getClass()).warn(format("Termination of pool %s failed",getClass().getSimpleName()),ie)
GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))
o instanceof MkdirsOptions
dh != mBackgroundHeight
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
LinkageError e
match == null || predicate != null && !predicate.match(match,start,end,context)
runtime().config.useCompressedClassPointers
Nd4j.rand(200,200,min,max,Nd4j.getRandom())
NeoStores.class
DEBUG_STARTING_WINDOW=true
sampler.getFileField()
c.close()
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY,CppFileTypes.VERSIONED_SHARED_LIBRARY)
SchematicsLoader.INSTANCE.load(ProjectManager.getInstance().getDefaultProject(),localFile,true,false)
marketDataService.getOrderBook(CurrencyPair.LTC_USD,"LIVE")
scanFlags & SCAN_REQUIRE_KNOWN
Ints.min(startedSplits.get(),splits)
artifactFilter == null || resolvedArtifacts == null
@NotNull protected abstract T createNewStatement(@NotNull PsiElementFactory factory,@NotNull PsiElement expression,@NotNull PsiElement context); 
logger.debug("{} {}",errorCode,message)
mSharedElements.size()
pm.performDexOpt(pkg,null,true)
editor.commit()
SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode())
freezeThisOneIfNeeded != null && !mWindowPlacerLocked.mOrientationChangeComplete
Bytes.toBytes(tableNameOrRegionName)
_replaceTranslationCommand.execute(file.toPath())
hasColumn(oldTableName,"templateId")
telephony.isRadioOn(getOpPackageName())
attribute.getDefinition().getMarshaller()
MavenHelpers.getOrCreateElementBuilder(image,"name")
ticket.cancel(false)
(halfHeight / inSampleSize) > reqHeight || (halfWidth / inSampleSize) > reqWidth
private final Long id; 
mFacetCategoryMap.get(category)
selenium.isElementPresent("link=Control Panel")
LARGER_DIMENSION=1280
TimeUnit.SECONDS.toMillis(5)
wikiPagePersistence.findByN_H(nodeId,true)
@Nullable
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
activityPointList.size() - 1
message.getMessageId().setEntryLocator(id)
allDefinitions != null && composed.getInterfaces() != null
mMccStr == null
assertEquals(worldVocab.getIndex(),3)
getData() ^ 0x7
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
telephony.isRinging(getOpPackageName())
candidatePriority < highestPriority
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
(short)0600
Long.parseLong(id)
selenium.isElementPresent("link=Control Panel")
IndexReader.open(userindex)
JSONObject value
serverEnvironment != null
calendar.getTimeInMillis()
mDownloadXtraDataPending=false
System.out.println(hostResult)
options != null && options.getChildCount() > 0
new IOException(e)
Math.max(implicitOffset - 1,0)
mAuthorities.valueAt(i)
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
host1.getSocketAddress()
nextPk()
Throwable err
JvmDeclarationOriginKt.OtherOriginFromPure(myClass)
editor.rebuildHeader()
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
r[0]
Long.parseLong(attrValue)
new Paint()
schemeSpecificParts != null && data != null
tagName.equals(TAG_FORWARDING_INTENT_FILTERS) || tagName.equals(TAG_CROSS_PROFILE_INTENT_FILTERS)
ImmutableSortedMap<String,SortedMap<String,Object>>
addUpdateRequest()
@ConditionalOnEnabledHealthIndicator("elasticsearch")
typeSwitch.keySuccessor(i) == beginNode
exchFut.discoveryEvent().eventNode()
EXPLICIT_NO_UNSAFE_CAUSE != null
from > to
pubnub.unsubscribePresence(channel)
synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
? extends TypeDescription
FilenameUtils.getFullPathNoEndSeparator(destination)
list.removeFirst()
layerType != LAYER_TYPE_SOFTWARE
myEditor.getBackgroundColor()
Ints.min(startedSplits.get(),splits)
!expectedItemClass.isAssignableFrom(baseItem.getClass())
dep.getName()
CharUtils.isAsciiPrintable(CHAR_COPY)
assertTrue(message.getPayload() instanceof Collection<?>)
MockRamDirectoryService.class
attributes.getAllFlags()
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
w.unlock()
pw.print(ps.getInstantApp(user.id))
new InputStreamReader(fileObject.getInputStream(),"UTF-8")
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials) && thermostats.containsKey(provider.getThermostatIdentifier(itemName))
clientConfig.property(ClientProperties.READ_TIMEOUT,2000)
lpNameBuffer.getValue()
"content".equals(scheme) || "android.resource".equals(scheme)
Thread.sleep(1000)
id=28
doGetIsTypeCheckCallable(type)
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
mBoltPaint.setColor(fillColor)
isAllowed()
DefaultChannelFuture.setUseDeadLockChecker(true)
assertEquals(inserted.size(),table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size())
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
bfd.singularData.getSingularizer().appendBuildCode(bfd.singularData,type,statements,bfd.name,"this")
this::collapse
old + 24
ThemeUtils.fontColor(getContext())
new Paint()
mCollapseOffset > 0
mConnector.execute("volume","format",vol.id,"auto")
addDaysAndCheckForCompletion(20,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.INVOICE_PAYMENT_ERROR)
one.setAxisIndex(LEAF)
new Rect(28,14,272,14)
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).write()
@Mock HttpServletResponseWrapper servletResponse; 
String value
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SERVER_ERROR,getHttpStatusSeries(result))
mFrameSlots.remove(name)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
UNPINNED=0
ResponseEntity<String>
LOG.warn(ex,"Distributed build step failed.")
createListFromPropertyString(license)
UpgradeStepRegistrator.class
new IllegalStateException("Buffer already freed, free point: ",freePoint)
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
Long.parseLong(id)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
new int[4700]
private final QSDetailClipper mClipper; 
lock.isHeldByCurrentThread()
InetAddress.getByName("127.0.0.1")
status.isDir()
VALIDATE_AFTER_INACTIVITY_DEFAULT=1700
LOG.info("Unsupported minification resource: " + filename)
batteryService.getBatteryLevelLow()
Response.ok()
agentInstances.findAgentAndRefreshStatus(uuid)
field.getTypeDesc()
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
String dateObject=lastMessageElement.getAttributes().getAttribute("date").toString(); 
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
realm.checkIfValid()
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
Math.max(limit,1L)
MonitoringPortlet.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
this.messageService.monoPreAuthorizeBeanFindById(2L).subscriberContext(withAdmin)
removeCallbacksAndMessages(null)
paras.put(22L,10000L)
name.endsWith(node.getText())
return true; 
getService().animateCollapseNotifications()
mValues[8]
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
DEFAULT_WAKE_LOCK_TIMEOUT=60000
add(food(perc(.1,1)),COOKED_SWEETCORN,SWEETCORN_7088)
tokenLength >= 1
LOG.warn(e,"Parser exited while decoding BSER data")
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
registeredService.getAccessStrategy().doPrincipalAttributesAllowServiceAccess(principal.getId(),principalAttrs)
c.getPath() == null && getPath() != null
Validator.isNotNull(entry.getUrlTitle())
next == null || next.turnType == null
id=10801
public ArabicStemFilter create(TokenStream input){   return new ArabicStemFilter(input); } 
assignedServers.add(holder)
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",20)
isXop
mPlayer.getCurrentPosition() * 1000L
Futures.transform(Futures.allAsList(delegate.store(ArtifactInfo.builder().setRuleKeys(info.getRuleKeys()).setMetadata(metadataWithCacheKey).build(),BorrowablePath.notBorrowablePath(emptyFilePath)),delegate.store(ArtifactInfo.builder().addRuleKeys(new RuleKey(hashCode)).build(),output)),Functions.constant(true),MoreExecutors.directExecutor())
url.startsWith(completeUrl)
paras.put(20L,10000L)
/**   * Choose a default message to use if the applyAsync() method throws an exception.  * @return ZuulMessage  */ O getDefaultOutput(I input); 
Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType
req.getContentLengthLong()
!dockOnTopOrLeft
Math.max(filterExplanations.get(i).getValue(),factor)
addKeys(externalClasses,DATE,"org.joda.time.LocalDate","java.time.LocalDate")
Double.parseDouble(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","and","and_eq","asm","bitand","bitor","compl","const_cast","delete","dynamic_cast","explicit","export","friend","mutable","namespace","not","not_eq","operator","or","or_eq","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","wchar_t","xor","xor_eq","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
searchContext.sort().getSort().length > 1
deriveFontMethod.invoke(baseFont,new Object[]{floatSize})
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
timeout <= 0
3 * 60 * 1000L
selenium.isElementPresent("link=Control Panel")
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
CythonLanguageDialect._isDisabledFor(node) || MakoLanguage._isDisabledFor(node)
addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1)
Throwable e
initSize / 100d
curr != null
Class.forName(line,true,null)
EMERGENCY_ASSISTANCE_ENABLED=true
DEBUG=false
platformVersion < M
!dockerConfigPath.isEmpty()
_resourceExistsMap.get(key)
info != null
contentBitmap == null
dest.writeInt(mSubId)
getOrder()
assertFalse(blockDirectory.isBlockCacheWriteEnabled())
conf.getRestBaseURL()
listenersMap.remove(eventId)
dl.error("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
File modSource
Object id=gormMapping.getIdentity(); 
Environment.getOemDirectory()
node == null || v == node.view
RandomStringUtils.randomAscii(20)
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
myMapping.update(srcPath,outputPath)
startGridsMultiThreaded(NODES_CNT)
activity == null || activity.isFinishing()
CommandLineProcessor.processExternalCommandLine(args,null)
temp_descs.get(j)
getLock(target)
final SimulatedDpad mSimulatedDpad; 
replaces="doIntrinsicCachedTruffleObject"
mQsDensityContainer.getX()
getMeasuredWidth()
CallParticipantRecordImpl cpr=new CallParticipantRecordImpl((String)callParticipantIDs.get(i),new Date(Long.parseLong((String)callParticipantStart.get(i))),new Date(Long.parseLong((String)callParticipantEnd.get(i)))); 
getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery(),model)
getParameterValues(request,param,null)
globalScheme.getAttributes(DiffColors.DIFF_DELETED).getErrorStripeColor()
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize() || inventory.getStackInSlot(i).stackSize >= inventory.getInventoryStackLimit()
getAndAppendComparator(i,bb,sb)
i >= speedBumpIndex
TelephonyManager.getDefault().getCurrentPhoneType()
mQsDensityContainer.getX()
UpgradeStepRegistrator.class
logger.error("an error")
config.getMaxEntriesLocalHeap()
assertEquals(10,definitions.size())
new TextPaint()
DefaultCacheKeysFactory.staticGetCollectionId(cacheKey)
abandonSegment(entry.getKey(),entry.getValue())
currentTx.concatenate(matrixTx)
ROUTE_IGNORED_WARNING_CODE=5100
SKELETONS_VERSION=9
loaded.getLoaded().getDeclaredConstructor()
params.getSimulatedPlatformVersion()
GL11.glGetIntegerv(pname,params)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Map<String,String>
ArraySet<UidRange>
times(1)
logError(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
req.startAsync(req,res)
UpgradeStepRegistrator.class
mAppToken.isVisible()
ColorProperties.getColor("selectionForeground")
url.toServiceStringWithoutResolving()
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
new AudioBuffer(audioData,bufferId,presentationTimeUs)
flow.getUpdateTime() >= updateTime
DbConnectionManager.closeStatement(pstmt)
mUiHandler.removeCallbacks(pae)
Outcome.noMatch("missing database driver " + driverClassName)
new LFWLoader(imgDim,imageTransform,numExamples,useSubset)
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_velocityEngine,_templateContextHelper,false)
selenium.isElementPresent("link=Control Panel")
data.position()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT || mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_VR
new IllegalStateException("Advertising can't be both connectable and anonymous")
myToolWindowManager.isToolWindowActive(myId) || (myDecorator != null && myDecorator.isFocused())
getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
IntentFactory.create(mContext,type,classifiedText)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
new Paint()
uri.getAssetName().toLowerCase()
GithubNotifications.showInfoDialog(myPane,"Success","Connection successful for user " + user.getLogin())
node.getBeginLine()
input().size(0)
ONE_MINUS_DST_ALPHA(7)
platformVersion < M
UserHandle.myUserId()
getHttpUrl(name,httpPort)
resultSetView.getGridControl()
Mono<T>
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
clearIndex()
Thread.sleep(500)
previousLine.endsWith(StringPool.COMMA) && (previousLineTabCount == lineTabCount) && !previousLine.contains(StringPool.CLOSE_CURLY_BRACE)&& !line.endsWith(StringPool.OPEN_CURLY_BRACE)
return GCM; 
Exception throwable
mStartDelay == 0 || mSeekFraction >= 0
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
condition.signalAll()
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
Thread.sleep(1000)
internalExecutor.submit(futureTask)
@Message(id=14151,value="Could not find view %s for EJB %s") IllegalStateException viewNotFound(String viewClass,String ejbName); 
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
from("direct:a").delay(1000)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
final GridCacheAdapter cache=internalCache(i); 
new IllegalStateException("Advertising can't be both connectable and scannable")
private Adapter mListAdapter; 
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
org.apache.kylin.common.util.DateFormat.formatToTimeStr(1430438400000L)
@Override public Element detach(){   throw immutableError(this); } 
outputDirectory="."
winAnimator.prepareSurfaceLocked(recoveringMemory)
ChannelBuffers.wrappedBuffer(bytes,0,length)
Exception e
ParceledListSlice.emptyList()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
store.setConfigFile(usersFile)
Trans != NO_TRANSPOSE
msg.obj != mSmHandlerObj
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
sTestCaseCounter == 0
restrictions != null && restrictions.length > 0
private final T view; 
pluginPanel.rebuild()
releaseLock(lockName,transOwner)
ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
MAX_RETRIES_ON_ASSOCIATION_REJECT=16
revision.equals("latest.integration") || revision.equals("latest") || revision.equals("latest.release")
164 + (USE_OLD_HISTORY ? 1000 : 0)
userRecord != null && userRecord.mClientRecords != null
dockedBounds.bottom + dockDividerWidth
mVectorState == null || mVectorState.mVPathRenderer == null
data.contains("siamese") || data.contains("white")
locationUriNode.text()
minIdle < 0 || minIdle > maxPoolSize
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
mFlags.get("debug")
UpgradeStepRegistrator.class
cause.getMessage().contains("Different HTTP Scheme or Host Redirect detected on")
firstChatPanel.getDefaultContact()
cls.getDeclaredMethod(mtdName,paramTypes)
mObsoleteAgents.remove(info)
selenium.isElementPresent("link=Control Panel")
DataStreamSink<OUT>
SOCKET_TIMEOUT_MILLIS=10000
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
UserLocalServiceUtil.getUserById(userId)
t.equalsIgnoreCase(type)
generatorConfig.getModelPackageTargetFolder()
telephony.isOffhook(getOpPackageName())
logger.debug("Execution of UDF '{}' failed",name,e)
new ConnectionException(sm.getString("http2Parser.processFramePushPromise",connectionId,Integer.valueOf(streamId)),Http2Error.PROTOCOL_ERROR)
(opcode == TEXT.getOpCode()) || (opcode == BINARY.getOpCode())
intbuf.get(0)
value == null || value.equals(getString(R.string.protocol_odk_default))
DateFormat.getMediumDateFormat(context)
log.error(message)
logTable.getDatabaseMeta().getQuotedSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
Integer.parseInt(port)
zzStartRead <= zzCurrentPos
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
assertEquals(1073741824,TileSystem.MapSize(23))
hasRows(newTableName)
assertEvaluate(buildFile).moduleLookup("txts")
firstPos > mTargetPos
position - 1 >= 0
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)",Pattern.DOTALL)
new RuntimeConfigurationWarning("No py.test runner found in selected interpreter")
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
derefStub()
@ApiEndpointPreference final @NonNull StringPreferenceType apiEndpointPreference
LLVMMetadata m2
mCanSeekBack=mCanSeekForward=true
Serde<V>
new byte[4]
iterations=30
config.getProperty("peer.p2p.pingInterval",5L)
a.willChangeBounds()
getProperty().containsKey("spark.yarn.keytab")
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateMessageParam",m.getName(),m.getClass().getName()))
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapAbstractTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue("map should be empty",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse("map should not be empty",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,"bar");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           assertEquals("bar2",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format("We do not expect an entry which's key equals to %d in entry set",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     assertFalse(map1.removeEntryListener("2"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } 
viewToClick != null && viewToClick.isAttachedToWindow()
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
options.setLanguageOut(LanguageMode.ECMASCRIPT5)
contentType.split("charset=",2)
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),event.getStartTime(),endTime)
myAccountPortlet.getPortletId()
35 + (PersistentHashMapValueStorage.COMPRESSION_ENABLED ? 1 : 0)
val == null || val.length() == 0
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
this.func_180475_a(scoreobjective1,res)
hasColumn(oldTableName,"description")
loader.filePath != null && !loader.caretState.hasExplicitCaret()
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
metadata.getFaces()
logger.debug("No such directory: " + dir.getAbsolutePath())
SizeWidget.class
in.markReaderIndex().readByte()
type.getDeclaredConstructor()
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).subscriberContext(context -> context.put("foo","bar"))
AnnotatedElementUtils.findAnnotationAttributes(controllerType,annotType)
tx.getOutputs().size() > uxtoIndex
batteryService.getBatteryLevelLow()
add(nm)
Boolean.parseBoolean(System.getProperty("cassandra.native.epoll.enabled","true"))
Slog.e(TAG,"Unknown restriction: " + restriction)
FrameType.SETTINGS.check(0,settings.length)
@Nullable
selenium.isElementPresent("link=Control Panel")
entityRef.destroy()
tryHarder ? 8 : 4
new MethodCallExpression(INVOKERHELPER_RECEIVER,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",new ArgumentListExpression(target.isStatic() ? new ClassExpression(target.getDeclaringClass()) : receiver,new ConstantExpression(target.getName()),arr))
KBP_MINIMUM_SCORE=.453
BaseConnection.class
pipeline.addLast(PassportStateHttpClientHandler.PASSPORT_STATE_HTTP_CLIENT_HANDLER_NAME,new PassportStateHttpClientHandler())
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
place != null && !instruction.isReferenceWrite()
mSyncStatus.valueAt(i)
i % dictionarySize
mService.enableNetwork(netId,attemptConnect,mContext.getOpPackageName())
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
AppLog.d(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
rootView.getId()
!TextUtils.isEmpty(info.getUploaderAvatarUrl())
10 * MINUTES
RowKey.prefixKeyWithSalt(key)
newId >= max
origin >= other
@NonNull Uri uri
logger.warn("{}",general)
new Builder().setDuration(3000).setColor(android.R.color.holo_blue_bright)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
!u.equals(user)
mAlarmManager.set(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class),false)
attributes.getAllFlags()
NativeBinarySpec nativeBinary
display.getRealMetrics(dm)
logger.debug("moveToStep[" + policy + "] ["+ index.getName()+ "]"+ currentStepKey+ " -> "+ nextStepKey)
clearIndex()
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
Throwable e
Boolean.parseBoolean(params.get(name))
-26
logger.fine(String.format("emitting event %s",args))
element.getTextTrim()
native_get_videoeditor_export_level(vidCodec)
Thread.sleep(3000)
logger.trace("Adding PropertySource: " + source + " in group: "+ basename)
@Override @NotNull public ClassDescriptor getDeclarationDescriptor(){   return LazyClassDescriptor.this; } 
!mDreamsEnabledOnBatteryConfig
id=16508
sourceHeight > 0
model.getClass().getSimpleName()
win == null || !startPositioningLocked(win,true,startX,startY)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
row.setUserExpanded(true,true)
heightMode == MeasureSpec.UNSPECIFIED
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address))
realm.checkIfValid()
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
p.getParent()
rotationVector.length >= 4
parent.setAxisIndex(0)
sendObjectInfoResult.getCompressedSizeLong()
GithubNotifications.showInfoDialog(myPane,"Success","Connection successful")
null == remoteInterpreterProcess || !remoteInterpreterProcess.isRunning()
onDetachedFromWindow()
BackupManagerServiceInterface svc=mService; 
new CompositeException(t,e)
interfaces[i].isAssignableFrom(interfaceClass)
userRecord != null && userRecord.mClientRecords != null
MetricsLogger.histogram(getContext(),DEMO_SESSION_DURATION,sessionDuration)
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
optionalClient.orElse(null)
remaining == 0
assertEquals(9,definitions.size())
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
writeRepeatedSFixed64Impl(id,val)
new Spinner(getContext(),null,R.attr.actionDropDownStyle)
viewToClick != null && viewToClick.isAttachedToWindow()
initialCapacity > 1 << 30
recyclerView.getChildAdapterPosition(view)
mMatchMode=matchMode
mMccStr == null
event.getServletContext().getAttribute(SERVER_KEY)
new OidcClientTokenContextImpl(token)
id.required()
new RefProperty(modelName)
mCurrIconRow != null && mCurrIconRow.isVisible()
this.categoryWithApiModel=category
ZKMetadataProvider.getOfflineTableConfig(propertyStore,tableName)
@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
callButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
sep < 0 || sep > j
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
expandableView.getIntrinsicHeight()
inverseCopy.set(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
mWindow == null || !mWindow.getSharedElementsUseOverlay()
myTabs.getPresentation().setPaintBorder(1,-1,rightIds.size() > 0 ? 1 : 0,-1)
assertDurationAround(startedAtDate - firstLogDate,38_000)
worker.setNoData(nod != null ? RangeFactory.create(nod,nod) : null)
(this.getExecContext().getLocalWork() != null && this.getExecContext().getLocalWork().getInputFileChangeSensitive()) && mapJoinTables != null
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
name.toString()
saveAnswersForCurrentScreen(complete)
getNonCacheableSingleModelLoader()
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
StepVerifier.create(Mono.just(1).then()).verifyComplete()
scope.getActiveInspectionProfiles()
XContentType.fromMediaTypeOrFormat(template.substring(2,endOfContentName))
ACRA.log.w(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
timeNanos >= DateTimeUtils.NANOS_PER_DAY
getUpstreamBranchName()
getName().equalsIgnoreCase("enum") || getName().equalsIgnoreCase("set")
node.getText()
canWrite(clazz,mediaType)
dynamicType.getDeclaredConstructor()
id=36
selenium.isElementPresent("link=Control Panel")
delaySoFar >= mReEnableDelayMillis
type == VolumeInfo.TYPE_PUBLIC && mountUserId == UserHandle.myUserId()
case 7: 
private View mAlarmStatusCollapsed; 
getFullName()
LOG_SERVICE_START_STOP=false
TypeEvalContext.fastStubOnly(null)
setDeploymentServerId(contextValue)
10 * 1000
this.principalFactory.createPrincipal(principalFromRest.getId(),principalFromRest.getAttributes())
ImmutableSet.<DataType>of(DataTypes.STRING,DataTypes.OBJECT,DataTypes.GEO_SHAPE)
lhs == null || !lhs.isValid()
executeMethodAndConvertExceptions(httpPost)
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").withArgs(clazz.getName(),IGlobalExtension.class.getName())
interceptor.doIntercept(invocation)
ap.getSsidStr()
hasColumn("Akismet_AkismetData","mbMessageId")
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()|| shardingRule.getDataSourceRule().getDefaultDataSource().isPresent()
parameters == null || parameters.length == 0
JblasBackend.class
jsonArray.toString(1)
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
!world.isAirBlock(pos) && !canSkip(pos) && boxIterator != null
mContext.sendBroadcast(intent)
statusCode >= 500
"Port '" + port + "' is illegal. Port should not be less than 0"
field != null && field.getWrappedField() == wrappedField
/**   * Get the <em>required</em>  {@link Method} associated with the current testor container. <p>Use this method as an alternative to  {@link #getTestMethod()} for usecases in which the test method is required to be present.  * @return the test method; never {@code null}  * @throws PreconditionViolationException if the test method is not presentin this  {@code ExtensionContext}  */ default Method getRequiredTestMethod(){   return Preconditions.notNull(getTestMethod().orElse(null),"Illegal state: required test method is not present in the current ExtensionContext"); } 
new RelationshipLinkbackStage("Test",Configuration.DEFAULT,store,newCache(),0,highId,false)
myHttpHandler >= 0
!useSuper && !isStatic && GroovyCategorySupport.hasCategoryInCurrentThread()&& name.length() > 0
current.getUnresolvedSuperClass()
usersStats.getMin()
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue) && !CommonUtils.equalObjects(oldValue,value)
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
fileIds == null || fileIds.isEmpty()
nse.getErrorCode()
RedisRunner.shutDownDefaultRedisServerInstance()
Integer.parseInt(displayIdStr)
isTestOnReturn()
PaginationRequest.of(10,1)
CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
typeSettingsProperties.toSortedString()
this.getClass().getSimpleName()
StringBuilder ret
!mScreenOnEarly
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.1100,10.7530,ef),currIdx.findClosest(49.6500,10.3410,ef),73530,1462)
JDBCUtils.safeGetLong(dbResult,"time")
assertFalse(predicate.apply(pickleEvent))
toArrayHelper(array,0)
trueNegatives.incrementCount(classLabel,1.0)
layoutChildLayoutsList.sort(Comparator.comparing(Layout::getPriority))
/**   * Returns the constructor call which is on the top of the stack, or null if there's no such element.  * @return the enclosing constructor call on top of the stack, or null if no such element.  */ public ConstructorCallExpression getEnclosingConstructorCall(){   if (enclosingConstructorCalls.isEmpty())   return null;   return enclosingConstructorCalls.getFirst(); } 
new EnterSelectionDialog(composite.getShell(),str,Messages.getString("System.Dialog.SelectEnvironmentVar.Title"),Messages.getString("System.Dialog.SelectEnvironmentVar.Message"))
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
return true; 
getBooleanValue("project","thrift_target_types_enabled",false)
supplement(self,aggregate)
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
sendGetBlockHashes()
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
mAuthorities.valueAt(i)
icer_cc.toClass(Weaver.class.getClassLoader())
new StringBuilder(238)
perfRule.assertDurationAround(Long.valueOf(prof.getProperty("Xoo Highlighting Sensor")),8900L)
dbText.getText()
showDialog(parent,message,title,options,defaultOptionIndex,defaultOptionIndex,icon)
formService.populateEntityForm(cmd,entity,subRecordsMap,entityForm,true)
Set<Object>
return GCM; 
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
getConnectTimeout()
ServiceMonitorAdvice.isActive()
selenium.isElementPresent("link=Control Panel")
Flusher.register(handler)
compensationRange.contains(compensation)
callback.qualifies(itemType)
cbWhitelistExtra2.isChecked()
type.getDeclaredConstructor()
Double.valueOf(value)
Integer.parseInt(stackIdStr)
new ImagePredicate(id,idName)
/**   * <p>A  {@code TaskInputs} represents the inputs for a task.</p><p>You can obtain a  {@code TaskInputs} instance using {@link org.gradle.api.Task#getInputs()}.</p>  */ @HasInternalProtocol public interface TaskInputs extends CompatibilityAdapterForTaskInputs {   /**   * Returns true if this task has declared the inputs that it consumes.  * @return true if this task has declared any inputs.  */   boolean getHasInputs();   /**   * Returns the input files of this task.  * @return The input files. Returns an empty collection if this task has no input files.  */   FileCollection getFiles();   /**   * Registers some input files for this task.  * @param paths The input files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder files(  Object... paths);   /**   * Registers some input file for this task.  * @param path The input file. The given path is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder file(  Object path);   /**   * Registers an input directory hierarchy. All files found under the given directory are treated as input files for this task.  * @param dirPath The directory. The path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder dir(  Object dirPath);   /**   * Returns the set of input properties for this task.  * @return The properties.  */   Map<String,Object> getProperties();   /**   * <p>Registers an input property for this task. This value is persisted when the task executes, and is compared against the property value for later invocations of the task, to determine if the task is up-to-date.</p> <p>The given value for the property must be Serializable, so that it can be persisted. It should also provide a useful  {@code equals()} method.</p><p>You can specify a closure or  {@code Callable} as the value of the property. In which case, the closure or{@code Callable} is executed to determine the actual property value.</p>  * @param name The name of the property. Must not be null.  * @param value The value for the property. Can be null.  */   TaskInputs property(  String name,  Object value);   /**   * Registers a set of input properties for this task. See  {@link #property(String,Object)} for details.  * @param properties The properties.  */   TaskInputs properties(  Map<String,?> properties);   /**   * Returns true if this task has declared that it accepts source files.  * @return true if this task has source files, false if not.  */   boolean getHasSourceFiles();   /**   * Returns the set of source files for this task. These are the subset of input files which the task actually does work on. A task is skipped if it has declared it accepts source files, and this collection is empty.  * @return The set of source files for this task.  */   FileCollection getSourceFiles();   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param paths The paths. These are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #files(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object... paths);   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #file(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object path);   /**   * Registers a source directory for this task. All files under this directory are treated as source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #dir(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return this  * @deprecated Use {@link #dir(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs sourceDir(  Object path); } 
selenium.isElementPresent("link=Control Panel")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
id=8
Thread.sleep(1000)
dest.writeInt(mSubId)
OVERRIDE_PREFIX + overridesLocation.replace('/','_')
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
tracesDir.mkdirs()
new BigInteger(1,parseData(headerTck.getNumber()))
Integer.getInteger("org.mortbay.io.nio.MAX_SELECTS",25000)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
mAttributes.getAllFlags()
Lists.newArrayList()
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
new IllegalStateException("too big")
employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100.1)
holder == null || holder.provider == null
@ConditionalOnEnabledHealthIndicator("jms")
old.equals(dexArchive)
Executors.newFixedThreadPool(DEFAULT_MAX_CONNECTIONS)
routeFromMapPoint=true
Math.max(leftLen,rightLen)
this.args=newArgs
bareNumber.length()
doNotUseAnimations ? 1 : Math.max(450,(Math.abs(mStX) + Math.abs(mStY)) / 1200f * MOVE_MOVE_ANIMATION_TIME)
List<JetType>
getEffectiveHstsEnforced()
super.execute(executor,processStarter,patchers)
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
j--
RANGES.contains(builder.getTokenType()) || getCompositeSign(builder)
DEBUG_ADD_REMOVE=true
amount.toPlainString()
mInstalld.createProfileSnapshot(appId,packageName,codePath)
mAppOpsManager.noteOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
cancelSubscriptionAndCheckForCompletion(bpSubscription,clock.getUTCNow(),NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE_ADJUSTMENT)
response.getStatusCode() / 100 == 4 || response.getStatusCode() / 100 == 5
super.updateItem(group)
bindingGroup.get(PORT_OFFSET).asInt() > 0
mPanProfile.isProfileReady()
mTfs.mkdirs(new TachyonURI(dirPath),true)
ImmutableList.of("/bin/bash","-e","-c",bash)
exclude.hashCode()
lock.unlock()
equalTo(12)
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
deltaY <= 0
monitor.isCanceled() || curPropertySource == null
return mIdleTimeMillis; 
mNextNonWakeupDeliveryTime < nowELAPSED
converter.compile("/data/MultiSheetDST.xls","Another Sheet","/templates/test_template1.drl",11,2)
robot.setAutoDelay(800)
physType.comparer()
unkn_parts.addAll(Hive.get().getPartitions(tab))
second.get(j)
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
ProjectInspectionProfileManagerImpl.getInstanceImpl(project)
DateTimeZone.forID("Asia/Shanghai")
Log.w("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
pongReceived()
_node.getNodeId()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new TemplatesPortletConfigurationIcon(portletRequest)
new MediaController(mContext,token)
entry.notification.cloneLight()
cache.clear()
currentResponse != null && currentResponse.getAuthentication() != null
BaseBinaryFixtures.create(type,type,name,component,taskFactory)
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive(),true)
RadioKafkaInput.class
remainingBytes > Integer.MAX_VALUE
baseRevision.getChangeset().isEmpty()
Trans != NO_TRANSPOSE
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
selenium.click("//li[4]/span/a/span")
storedHash == null || TextUtils.isEmpty(credential)
tag.getName()
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"),e.getCause().getMessage())
id=20
testRunner.addTestListener(itl)
new DartUnitMemberUsageGroupingRule()
selenium.click("//li[4]/span/a/span")
DDLRecordServiceUtil.addRecord(themeDisplay.getScopeGroupId(),recordSetId,0,fields,serviceContext)
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
retriever.getFrameAtTime(-1)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
context.getString(R.string.notification_additional_messages,data.droppedMessages.size(),accountDescr)
FinalUtils.canBeFinal(field)
mService.saveConfiguration(mContext.getOpPackageName())
PART_COUNT=1000
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(14)
mpi < 135 || leftSide
requestRender()
assertEquals(1,resultList.size())
drawable.getIntrinsicHeight()
containsString("cookieManagerShared")
new LeftTuple(new DefaultFactHandle(1,"cheese"),null)
new MatParamTexture(texParam.getVarType(),texParam.getName(),texture,texParam.getUnit(),null)
case SUBCMD_TRIGGER: 
StructSchema<?>
randomIntBetween(4,12)
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
DLFileEntry.class
rest.getEndpointUrlChange()
getRecordCount()
Long.parseLong(this.getOptional("kylin.server.sequence-sql.expire-time","86400000"))
mInputConsumer == null && mStatusBar != null && canHideNavigationBar()
1 << 16
IOUtils.close(reader,w,dir,analyzer)
connection.psubscribe(jedisPubSub,patterns)
selenium.isElementPresent("link=Control Panel")
executing != null && (executing.getFlags() & JobInfo.FLAG_WILL_BE_FOREGROUND) == 0
new StormClientErrorHandler(client.name())
!_calledSetTotal
outputBatchSize=1000
bareAddress != null && !names.containsKey(bareAddress)
ignite.getOrCreateCache(cacheCfg)
new Person("bob")
-26
this.messageService.monoPostAuthorizeFindById(1L).subscriberContext(withUser)
CompletableFuture<Void>
ab.get1U()
getPath("checks/javadoc/Input_01.java")
loaded.getLoaded().getDeclaredConstructor()
addView(mTitleLayout)
sizeNeeded > items.length
get(nom)
onDetachedFromWindow()
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
uri.toString().equals(future.getURI().toString())
imageResOnLoading != 0
Long.parseLong(val)
mLargePaint.setColor(0x7f00ff00)
selenium.isElementPresent("link=Control Panel")
new GroovyPagesTemplate(context,request,response,pageMeta,spillGroovy)
httpResponseCode != 204
mLayoutParams != null && mLayoutParams.width >= 0
_formatWriteFeaturesToChange != 0
setup(context)
holder == null || holder.provider == null
note.getTitle()
mUiHandler.postDelayed(pae,timeout)
notifierFuture.cancel(false)
executor.execute(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
mLayerType != LAYER_TYPE_NONE
type.getDeclaredConstructor()
qux.getDeclaredConstructor()
pm.setBlockUninstallForUser(packageName,uninstallBlocked,userId)
mAttributes.getAllFlags()
Representor<Object,Identifier>
IccUtils.cdmaBcdByteToInt((byte)0x8c)
OkHttpImagePipelineConfigFactory.newBuilder(this,okHttpClient).setRequestListeners(listeners).setProgressiveJpegConfig(new SimpleProgressiveJpegConfig()).setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this)).experiment().setMediaVariationsIndexEnabled(new Supplier<Boolean>(){   @Override public Boolean get(){     return true;   } } ).experiment().setBitmapPrepareToDraw(true,0,Integer.MAX_VALUE,true)
CompletableFuture<Void>
BottomEntity bottom
new ArrayList<Wallet>(5)
StatBuckets.prettyUptimeStr(secs)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
env.getDirectories().getExecRoot(configurationSupplier.get().getMainRepositoryName())
lock.tryLock(30,TimeUnit.SECONDS)
LOG.debug(e)
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mSupportsBearing ? 1 : 0
isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)
selenium.isElementPresent("link=Control Panel")
getType().isWildcard()
createDouble(buffer.length(),init,workspace)
analysis.getTypeWithCoercions(expression)
attribute.getDefinition().getMarshaller()
new TextPaint()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
new Duration(60,TimeUnit.SECONDS)
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
!isLoaded && item.isOptional() && item.getRecursiveLink() == null
removeCachedServiceLocked(getChangingUserId())
pId + BASE_FILE_NUMBER
"0".equals(text) || "0L".equals(text) || "0l".equals(text)
log.debug("Error invalidating SSH tunnel",e)
ServerError.getCode(res)
contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
mStartActivity.task == null || mStartActivity.task == parent
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
type.isEmpty()
Math.min(titleRight,subtitleRight)
Exception e
_buildTemplateWithGradle("portlet-configuration-icon","icon-dependency-management","--dependency-management-enabled")
smppClient.scheduleReconnect()
!internalRenderers.containsKey(name)
LOG.info("Download " + fileURI + " in "+ toFile)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
is(false)
mWebViewClassic.addJavascriptInterface(mTextToSpeech,ALIAS_TTS_JS_INTERFACE,true)
Long.parseLong(attrValue)
mAttributes.getAllFlags()
t.equalsIgnoreCase(type)
return type; 
mPowerManager.isInteractive()
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,false,userId)
lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
node instanceof InspectionRootNode || node instanceof InspectionGroupNode || node instanceof InspectionSeverityGroupNode
event.fromDisplayDensityChange || event.fromDeviceOrientationChange
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
getActiveFgCall().getPhone().startDtmf(c)
mMessageReferences != null
FluxFlatMap.trySubscribeScalarMap(source,s,mapper,true)
o2.getPriority()
SAMPLE_RATE_HZ_MAX=96000
Thread.sleep(1000)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
public T setJvmArguments(String... jvmArguments){   operationParamsBuilder.setJvmArguments(jvmArguments);   return getThis(); } 
patientState.getState().getUuid()
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
return true; 
lp.resolveLayoutDirection(layoutDirection)
Exception ex
isStopped
10 * 60 * 1000L
computator.getContentRectMinusAllMargins()
!entity.get(Keys.DISPLAY_NAME).orElse(Text.EMPTY).isEmpty()
requestEncoding != null
mp.getResolvedValue()
endTracksTo("main")
selenium.isElementPresent("link=Control Panel")
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
myTempDir.getPath()
mTfs.delete(mTfs.open(path),true)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
getConnectTimeout()
delayMs <= 0
structure.getXsd()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
@Override public final DivideByOnConditionStep on(Condition... conditions){   condition.addConditions(conditions);   return this; } 
ImmutableList<Map<String,Object>>
activityManager.getLargeMemoryClass()
selenium.isElementPresent("link=Control Panel")
HttpEntity.class.isAssignableFrom(parameterType)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
LOG.error("Could not get value for property[" + field.getQualifiedFieldName() + "] for product id["+ product.getId()+ "]",e)
new Composite(wTabFolder,SWT.NONE)
HighlightInfo.newHighlightInfo(type).range(refElement).descriptionAndTooltip(message)
accountInfo.compareTo(order.getTotalAmount()) < 0
new DeadCodeEliminationPhase(Optional)
newStarred=Boolean.parseBoolean(value)
visible=true
dest.writeInt(mSubId)
alarm.getId()
Directory dir=newDirectory(); 
" firstActiveTime=" + firstActiveTime
session.sessions().createUserSession(adminRealm,admin,"admin",null,"form",false,null,null)
LocaleUtil.getSiteDefault()
mQsDensityContainer.getX()
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
senders == SendersEnum.both || senders == null
SCROLL_BAR_SIZE=4
Integer.parseInt(rightStr)
Numeric.toHexStringWithPrefixSafe(filterId)
new HeadlessEnvironment()
hasColumn(oldTableName,"commentId")
new ExecutionContext(instrumentation,executionId,graphQLSchema,queryStrategy,mutationStrategy,subscriptionStrategy,fragmentsByName,operation,variableValues,context,root)
type.isEmpty()
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
compare(other,method) >= 0
CanaryLog.d("%s",leakInfo)
Serde<V>
ap.getSsidStr()
http2Stream.garbageCollector()
selenium.isElementPresent("link=Control Panel")
context.getMainLooper()
new CompletionPhase.AutoPopupAlarm(true,hostEditor)
new Color(mParams.getCustomBackgroundColor(),true)
response.getStatusCode() / 100 == 4 || response.getStatusCode() / 100 == 5
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
streamCachingStrategy.setSpoolThreshold(1L)
((ContactJabberImpl)obj).getAddress().equalsIgnoreCase(getAddress())
sep < 0 || sep > j
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class,boolean.class)
String message
symbolUsageValidator.validateCall(iteratorResolvedCall,iteratorFunction,context.trace,loopRangeExpression)
myInflatorId == -1
Throwable e
MonitoringPortlet.setMonitoringPortletEventRequest(monitoringPortletEventRequest)
final SimulatedDpad mSimulatedDpad; 
id=52
state.isAlive()
selenium.isElementPresent("link=Control Panel")
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
V extends Identifier
currentMode == MODE_PULL_DOWN_TO_REFRESH
TurnPathHelper.getBitmapFromTurnType(ctx.getResources(),bitmapCache,TurnType.C,0,0,TurnPathHelper.FIRST_TURN,scaleCoefficient / miniCoeff,leftSide)
toolchainBuilder.addUnfilteredCxxFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
TextUtils.isEmpty(title)
restrictions != null && restrictions.length > 0
Class.forName(DEFAULT_IMPL,true,Thread.currentThread().getContextClassLoader())
context.revertReloadRequired()
coreLog.log(level,ex,String.format(format,data))
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
Throwable e
DB_VERSION=23
@Nullable
new IndexWriter(directory,autoCommit,ANALYZER,false,IndexWriter.MaxFieldLength.LIMITED)
indexStats.getPrimaries().getMerge().getCurrent()
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
r.curApp != null && r.curApp.curReceiver == r
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
iter.nextLine()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
super.dispatchTouchEvent(cancel)
new Intent(ACTION_QUICK_CONTACT)
hr != null && normalMode
param.setThrowable(xparam.getThrowable())
Slog.e(TAG,sb.toString())
smsHeader != null && smsHeader.portAddrs != null
params.appendExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
USE_DISPLAY_LIST_PROPERTIES=true
!method.hasModifierProperty(PsiModifier.STATIC)
from > to
credentials.split(":",2)
AuditEventFormatter messageFormatter
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
hz1.getLifecycleService().shutdown()
new String(expected,0,i + 1,"UTF-8")
delete.prepareRowMutations(keyspace,clientState,variables)
Subqueries.lt(0L,subquery)
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getTimeZoneId(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
arg1 == 1
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
type != null
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
10 * 1000
{abiOverride}
showRecentApps(true,false)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
theOffset != null
_dlPortletInstanceSettings != null
note.addNewParagraph(AuthenticationInfo.ANONYMOUS)
app.getTargetPointsHelper().getPointToNavigate() != null || loc.getLocationSimulation().isRouteAnimating()
url.toString()
setMode(RIGHT)
selenium.isElementPresent("link=Control Panel")
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public CharSequence getAndroidCarrierNameForSubscription(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
verify(mock)
new ServletException("Authentication failed for " + username + " in "+ _authentication)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
Assert.assertEquals(5,users.size())
selenium.isElementPresent("link=Control Panel")
new SQLException(e.getMessage(),e)
new VisorBinaryConfiguration(bc)
mOneShot=false
lineIdx > 1
selenium.isElementPresent("link=Control Panel")
portalTopLevelBuildData.getTopLevelMasterHostname()
reBoxg.setMaterial(matBullet)
bedtime - SystemClock.uptimeMillis()
styles.treeStylesCss()
new BufferedOutputStream(new FileOutputStream(newState.getFileDescriptor()))
TestPropsValues.getUserId()
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
WString.class
temporaryFolder.newFile()
mBackdrop.animate().alpha(0.002f)
DateTieredCompactionStrategyOptions.class
refType.equals(StructuredDocString.PARAMETER_TYPE)
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
System.out.format("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
mSupportView != null && mSupportView.getLayoutParams() != null
toDiscard > 0 && i < 0
mode != null && !mode.isEmpty()
logger.trace("AtmosphereResource {} is resuming",uuid())
out.writeData(entry.getValue())
mContainerView.getHeight()
DBG=false
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
Slog.d(TAG,"Unable to bind ActivityRecognitionProxy.")
Thread.currentThread().hashCode()
!myProject.isDisposed()
mDiskCache.put(diskKey,value)
app.setOwnerName(ownerName)
i < MAX_AUDIO_PORTS
partOfStatement.getLibraryId().getCanonicalText()
IoUtils.safeClose(connection,delegate)
expression instanceof PsiJavaCodeReferenceElement && !aClass.equals(PsiTreeUtil.getParentOfType(expression,PsiClass.class)) && PsiTreeUtil.getParentOfType(expression,PsiTypeElement.class) != null
_training_metrics.auc().defaultThreshold()
portalTopLevelBuildData.getJobName()
Throwable e
toolItem.getParent()
!value.isNull()
newDecl.isNovel()
remoteTableHandle.isPresent()
ctx.cache().dynamicStartCaches(cacheCfgs,false,true,false)
status().isFound()
contentType != null && charset == null
renderBlock(util,world,0,0,0,lightX,lightY,lightZ,false,true)
getTokenDisplayNames()
result == null ? 0L : result
highJson.getDouble(i)
Thread.sleep(1000)
delayMs <= 0
assertEquals(false,statement.getReferencesUniqueColumn())
into.get(j)
this.cusolverDnDsyevd_bufferSize.invoke(null,solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
{2,3,3,4,1}
mDataAuthorities == null || data == null
setColors(color)
m.getName().equals(e.getMethodName()) && m.getAnnotation(Test.class) != null
PushBufferStream.class
pw.print(ps.getInstantApp(user.id))
assertEquals(5,set.size())
private Long id; 
c.networkId == netId && c.SSID.equals(config.SSID)
mNwService.getInterfaceConfig(mTetherInterfaceName)
Math.abs(endAngle - startAngle) >= 360 || subActionItems.size() <= 1
Throwable e
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
mParent == null
portNum
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
holder == null || holder.provider == null
lock.isHeldByCurrentThread()
writer.getSourceFile(2)
Integer.parseInt(st.nextToken())
err.jspError("jsp.error.tld.mandatory.element.missing","jsp-version",uri)
_log.debug("Skipping undecodable parameter " + param,iae)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
checkValidHandle(muVMatrixHandle,null)
SESSIONS_ROOM_AFTER(412,"sessions/room/*/after/*",ScheduleContract.Sessions.CONTENT_TYPE_ID,false,null)
getActiveFgCall().getPhone().startDtmf(c)
DataManager.getInstance().getDataContext()
assertClusterSizeEventually(2,nodes[0])
new ArrayList<>(0)
NUM_DAYS_AGO=7
mAttributes.getAllFlags()
getDelegate().getDefaultCipherSuites()
Integer.parseInt(rightStr)
new String(bs2.toByteArray(),"UTF-8")
GL.glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"")
cs.getNString(columnIndex)
mkdirs()
!mStatus.showStatusLines() || (mCharging == null && mNextAlarm == null)
query.getSliceStart()
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
upgradeVersion=37
message.getType() == Message.TYPE_FILE || message.getType() == Message.TYPE_IMAGE
getSQL()
apex.stagePackage(mResolvedBaseFile.toString())
asLongReg(result)
AssertionError e
IMPL_HTTP_CLIENT4.equals(impl) || IMPL_HTTP_CLIENT3_1.equals(impl)
new LinkedHashSet<>(0)
ddmStructureLocalService.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
mSettings.writeRuntimePermissionsForUserLPr(userId,false)
display.getRealMetrics(dm)
mActionBar != null && mActionBar.isOverflowReserved()
HeaderSpec.this
URLUtils.currentUrlStartsWith(toString())
new MessageHeaderAccessor(originalMessage)
text.emptyElement(BR)
return START_REDELIVER_INTENT; 
textEditor != null && state instanceof TextEditorState
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
mPlayer.getCurrentPosition() * 1000L
PsiTreeUtil.isAncestor(exceptPart,e,false)
type.getDeclaredConstructor()
CommonCodeStyleSettings settings=getJavaSettings(); 
user.getWorld().getFullTime()
selenium.isElementPresent("link=Control Panel")
Throwable exception
rawCache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
new EngineConfig(shardId,"allocation-id",threadPool,indexSettings,null,store,newMergePolicy(),indexWriterConfig.getAnalyzer(),indexWriterConfig.getSimilarity(),new CodecService(null,logger),new Engine.EventListener(){   @Override public void onFailedEngine(  String reason,  Exception e){   } } ,IndexSearcher.getDefaultQueryCache(),IndexSearcher.getDefaultQueryCachingPolicy(),translogConfig,TimeValue.timeValueMinutes(5),Collections.emptyList(),Collections.emptyList(),null,new TranslogHandler(xContentRegistry,IndexSettingsModule.newIndexSettings(shardId.getIndexName(),indexSettings.getSettings())),new NoneCircuitBreakerService(),() -> SequenceNumbers.NO_OPS_PERFORMED,() -> primaryTerm.get(),EngineTestCase::createTombstoneDoc)
(mOomMinFreeHigh[5] * 7) / 4
mockRegionInfo.isMetaTable()
isBookmarksList()
structuralLock.isHeldByCurrentThread()
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
-10
loaded.getLoaded().getDeclaredConstructor()
cudnnSetConvolution2dDescriptor_v5(cudnnContext.convDesc,pad[0],pad[1],strides[0],strides[1],1,1,CUDNN_CROSS_CORRELATION,dataType)
columnsPerRow <= 0
params.getSimulatedPlatformVersion()
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
Validator.isNull(portalVersion) || privateApp
MigrationManager.instance.notifyDropUserType(ut)
selenium.isElementPresent("link=Control Panel")
setAttributeInternal(inodePath,false,opTimeMs,options)
method.getMethodInfo2()
mWindow == null || !mWindow.getSharedElementsUseOverlay()
mediaController != null && player != null
dist <= bestdist
cursor == null || !cursor.moveToFirst()
DBG=false
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
builder.setNeutralButton(res.getString(R.string.import_message_replace),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     Resources res=getResources();     StyledDialog.Builder builder=new StyledDialog.Builder(DeckPicker.this);     builder.setTitle(res.getString(R.string.import_title));     builder.setMessage(res.getString(R.string.import_message_replace_confirm,mImportPath));     builder.setPositiveButton(res.getString(R.string.yes),new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         DeckTask.launchDeckTask(DeckTask.TASK_TYPE_IMPORT_REPLACE,new DeckTask.TaskListener(){           @Override public void onPostExecute(          DeckTask.TaskData result){             if (mProgressDialog != null && mProgressDialog.isShowing()) {               mProgressDialog.dismiss();             }             if (result.getBoolean()) {               Resources res=getResources();               int count=result.getInt();               if (count < 0) {                 if (count == -2) {                   mDialogMessage=res.getString(R.string.import_log_no_apkg);                 }  else {                   mDialogMessage=res.getString(R.string.import_log_error);                 }                 showDialog(DIALOG_IMPORT_LOG);               }  else {                 Object[] info=result.getObjArray();                 updateDecksList((TreeSet<Object[]>)info[0],(Integer)info[1],(Integer)info[2]);               }             }  else {               handleDbError();             }           }           @Override public void onPreExecute(){             if (mProgressDialog == null || !mProgressDialog.isShowing()) {               mProgressDialog=StyledProgressDialog.show(DeckPicker.this,getResources().getString(R.string.import_title),getResources().getString(R.string.import_importing),true,false);             }           }           @Override public void onProgressUpdate(          DeckTask.TaskData... values){           }         } ,new TaskData(AnkiDroidApp.getCol(),mImportPath));         mImportPath=null;       }     } );     builder.setNegativeButton(res.getString(R.string.no),null);   } } )
copy.add(name)
pId + BASE_FILE_NUMBER
!isRemoteRegionRequested
startActivityAsUser(intent,UserHandle.CURRENT)
sendSigKill(myProcessUid)
rats.getConf()
Log_OC.d(TAG,"onResume() start")
syncMessage == null || syncMessage.length() == 0
builder.getErrors().getErrors()[3]
mMountTable.resolve(getPath(next)).toString()
new NagiosNscaStub(25669,"password")
mNextNonWakeupDeliveryTime < nowELAPSED
selenium.isElementPresent("link=Control Panel")
threadHandler.get().postAtFrontOfQueue(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
getter.getType()
new DMLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
Trans != NO_TRANSPOSE
g.paidAppName.equals("")
(Repository)ethereum.getRepository()
LOGGER.warn("Unable to process JSON",exception)
out.setSkipOnFault(value)
test(externs,js,(String)null,null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
Boolean.parseBoolean(attrValue)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
Log.v(TAG,msg)
selenium.isElementPresent("link=Control Panel")
new RangeSliceCommand(KS,CF,System.currentTimeMillis(),filter,range,null,count,true,false)
new Paint()
JNIDecoder.matches(out,getMatchingOutputFormats(inputFormat))
ATLAS_MAP_ENTRY_FIELD_COUNT=3
mCurrentVrCompositorService == null
c < 0xd800
parent instanceof View
w.lock()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public SkylarkInfo create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
ft.commitAllowingStateLoss()
mMenu.getNonActionItems()
!key.equals(OAuthConstants.SCOPE)
row < 0 || row > getRowCount() - 1
Math.abs(diff - maxAge) <= 2
OutOfCapacityException e
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
a.length > count()
routingTable.routePacket(probee,presence,false)
executeRunnableDismissingKeyguard(runnable,null,false,false)
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,true,incompleteCode)
generateRandomStringArray(10,5,false,false)
Trans != NO_TRANSPOSE
pluginPanel.rebuild()
clientBuilder.connectTimeout(timeout,TimeUnit.MILLISECONDS)
scanFlags & SCAN_REQUIRE_KNOWN
methods[index] == null || methods[index + 1] == null
log.warn(notJava6.getMessage() + " .. trying RI.")
i=1
handler.hasPermission(base,node)
mService.setWifiApConfiguration(wifiConfig)
AnnotatedElementUtils.hasAnnotation(type,Validated.class)
shortSizeDp >= 600
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
logger.warn("Couldn't write to file: " + filename)
scheme.equals("tel") || scheme.equals("sip")
appMode.getMapIconId()
cal.add(Calendar.MILLISECOND,120)
logger.debug("Error connecting to Plex",e)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
expandableView.getIntrinsicHeight()
ConcurrentHashMap<VoiceRouter.VoiceMessageListener,Integer>
mainFile.getExecPathString()
result != null && result.bitmap != null
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity",connection.getSinkChannel())
super.getBetweenDateProvider(path)
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().toEpochMilli()
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
buildExplodedWebapp(getWebappDirectory())
new ExtractionGeneratorOptions(false,propertyCheckBox.isSelected(),false)
case 11: 
pkgs.get(j)
this.spiceServiceListenerSet.remove(spiceServiceServiceListener)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Long.parseLong(attrValue)
layouts.size()
y2 < bb.maxY
createTextAttributesKey("KOTLIN_EXTENSION_PROPERTY",DefaultLanguageHighlighterColors.STATIC_FIELD)
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
mState == STATE_STARTED || mState == STATE_STARTING
mPowerManager.isInteractive()
getConnectTimeout()
ImmutableMap.of(BuildInfo.BUILD_TIMESTAMP,Key.of(KeyType.INTEGER,"0","0"),BuildInfo.BUILD_SCM_REVISION,Key.of(KeyType.STRING,"0","0"),BuildInfo.BUILD_SCM_STATUS,Key.of(KeyType.STRING,"","redacted"))
logger.trace("{} error while performing pre synced flush on [{}], skipping",exp,shardId,shard)
selenium.isElementPresent("link=Control Panel")
settings.readLPw(null,0,false)
new AssertionError()
sendKeyUp()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
@Nullable JComponent label
analysis.getTypeWithCoercions(expression)
-1101239363
lp.width != panelWidth || lp.gravity != panelGravity
c <= 'Z'
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
!assignableValue.getValue().equals(populateValueRequest.getProperty().getValue())
!active || nameSuggestionContext == null
return true; 
populateUi()
new SpannedString(first,true)
-45
ignoreUnknown=true
completeBox.setButtonDrawable(R.drawable.btn_check)
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
new IOException("Storing a directory is not yet supported.")
previousState.getNextCall()
return true; 
last.getContext()
DomUtil.getRawType(myType)
(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())
return mChangingAppearingDelay; 
getTelecomService().getVoiceMailNumber(accountHandle)
"Camera resolution: " + cameraResolution
new ArrayList<>(0)
display.getRealMetrics(mDisplayMetrics)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
to.getRegistryName()
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.INFORMATIONAL,getHttpStatusSeries(result))
selenium.isElementPresent("link=Control Panel")
Long.parseLong(args[ai])
mFragmentManager != null && mFragmentManager.findFragmentById(R.id.navigation_drawer) != null
new RoutingControlAction(this,newPath,true,callback)
dateTimeFormatter.format(value)
mock.expectedMinimumMessageCount(1)
index > widgets.length
chargeUAh > 0 && level > 0
assertEquals(2.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
ps == null || ps.getUserState().get(userId) == null || !ps.getUserState().get(userId).isEnabled(mInstantAppInstallerActivity,0)
countDownLatch.await()
read.getStartDate()
setFrame(0,false,mAnimationState.getChildCount() > 1 || !mAnimationState.mOneShot)
return true; 
DiagnosticType.warning("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
PrintAttributes.enforceValidDuplexMode(currentMode)
smsHeader != null && smsHeader.portAddrs != null
container.getAttributeModel().getEdgeTable()
paramDefines.hashCode()
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout,minConnectionEventLen,maxConnectionEventLen)
jid != null && jid.getContent() != null
selenium.isElementPresent("link=Control Panel")
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
jobDataMap.put(SchedulerEngine.JOB_STATE,jobStateClone)
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
request.getPathInfo()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
Map<String,Object>
getPlayerPosition().y
OverridingMethodsSearch.search(method,method.getUseScope(),true)
target.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
@Deprecated
dynamicType.getLoaded().getDeclaredConstructor()
pubnub.unsubscribe(channel)
sm.getString("namingContext.nameNotBound",name,name.get(0))
Exception t
current.getUnresolvedSuperClass()
is(5)
c == Double.class || c == Double.TYPE
server1.getStoreRepository().getStorageEngine(storeName)
@NonNull
Maps.newLinkedHashMap()
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),stop_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),launcherStop_.getElement())
Log_OC.d(TAG,"Canceling all syncs for " + MainApp.getAuthority())
supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS)
cfm.getColumnDefinition(columnName.key)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Mono.subscriberContext()
new ConnectionException(sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),Http2Error.COMPRESSION_ERROR)
(lo + hi) >>> 1
commitNode.getBranch()
new Paint()
new UnsupportedOperationException(getClass().getName())
debug(Log.IGNORED,ignored)
Localization.lang("Find unlinked files")
new StringBuilder(1024)
mGnssCallback != null
123456789 * 2
dialog.setVisible(true)
tracesDir.mkdirs()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
selenium.isElementPresent("link=Control Panel")
_log.warn(ioe,ioe)
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
assertNotEquals(String.format("Build target %s should not have been built locally, but it was",buildTargetRaw),BuildRuleSuccessType.BUILT_LOCALLY,logEntry.successType.get())
ImmutableList<Map<String,Object>>
1
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
bs.max() < 32
processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())
entry.key == k || (entry.key != null && k != null && k.equalsIgnoreCase(entry.key))
stores.containsKey(name)
librariesConfigurable instanceof ProjectLibrariesConfigurable || !project.isDefault()
esVersion.onOrAfter(Version.V_5_3_0_UNRELEASED)
selenium.isElementPresent("link=Control Panel")
storeField(field,isAttributeExpression,pexp,current,visitor,receiver.getData())
counter > max
put.getWriteToWAL()
JspUtil.makeJavaIdentifier(poolName)
parameter.name()
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),event.getStartTime(),endTime)
JetTypeChecker.INSTANCE.isSubtypeOf(expectedType,type)
Pair.of(buf,volumeBox)
assertTrue(strayChild.isSafelyReplaceableBy(newChild))
UastUtils.isUastChildOf(((UBinaryExpression)parent).getRightOperand(),expression,false)
allowedAudiences.containsAll(providedAudiences)
logger.fine("Parsing Dep: " + filePath)
mWM.removeViewImmediate(mView)
EXCEPTION_PATTERN.matcher(output)
side.getCapitalized()
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
onProgressUpdate(progress,max)
String painelStatus=parser.next(); 
selenium.isElementPresent("link=Control Panel")
Object[]
Assert.assertEquals(9300,Utils.calculateHeapSize(10000))
LOGGER.info(msg.apply())
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
args[0].length() == 51 || args[0].length() == 52
Class.forName(serializerConfigClassname,false,userCodeClassLoader)
tracesDir.mkdirs()
Utility.cancelTasks(followOrUnfollowTask,modifyGroupMemberTask)
commonPrefixLength == chars.length() && chars.length() == oldPsiText.length()
LOG.warn("PriviledgedActionException as:" + this + " cause:"+ cause)
i < repeatCount
TURN_DISTANCE=45
Double.parseDouble(value.toString())
RequestContext.create(ksession.getClass().getClassLoader())
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer","jenen","diejenigen")
Collection<String>
cachedDevice != null && cachedDevice.getName() != null
mPowerManager.isInteractive()
suiteClass.getSimpleName()
dockerClient.createContainerCmd("busybox")
/**   * Checkstyle frame model.   */ private final transient MainFrameModel model=new MainFrameModel(); 
openConnection(false)
new Paint()
_freemarkerEngineConfiguration.resourceModificationCheck()
PrivateDataProvider provider
sExecutorService.shutdownNow()
mQsDensityContainer.getX()
telephony.isRadioOn(getOpPackageName())
loaded.getLoaded().getDeclaredConstructor()
showedPlugins.get(i)
exchFut.discoveryEvent().eventNode()
!application.isPresent()
i=0
viewerPanel.setRedraw(true)
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkWeakWarnings,checkInfos)
writeRepeatedBoolImpl(id,val)
onlinePlayer.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
tickEnd
Assert.assertArrayEquals(serviceContext.getAssetLinkEntryIds(),assetLinkEntryIds)
new IndexWriter(dirName,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
logger.trace("myq securityToken: {}",securityToken)
dstCursor == null
Environment.getOemDirectory()
createFromResourceStream(res,value,is,srcName,null)
context.getMainLooper()
assertEquals(1,resultList.size())
model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.isElementPresent("link=Control Panel")
Throwable e
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
mDisplayContent.mDividerControllerLocked.getWidth()
um.getUsers(true)
new ImmutableInstruction3rc(deodexedOpcode,instruction.getStartRegister(),instruction.getRegisterCount(),resolvedMethod)
t.getVolumeTraded()
start + startIndex
dest.writeParcelableArray(serviceUuds,0)
assertEquals(row.getField(0),3L)
Optional<RemoteInterfaceType>
getExecutionContext()
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
TimeUnit.SECONDS.toMillis(5)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
page.getMembersByIdx(1).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(2)
mPositions[i] > 0
getRootInternal()
mAuthorities.valueAt(i)
drawable != mBackgroundDrawable || mBackgroundResource != 0
Arrays.asList(Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),"h2-15","h2-16")
callTimeout=5000
isPushGroupConversation()
buf.halfOpenElement("url")
STANDALONE
dependencyNode.getId().getSelected()
loaded.getLoaded().getDeclaredConstructor()
type.getDeclaredConstructor()
MAX_DEFAULT_FRACTIONS_DIGITS=16
Encr.decryptPassword(r.searchValue("PASSWORD").getString())
getLoaderManager().restartLoader(LOADER,null,mLoaderCallbacks)
teleport(new Target(loc),name)
myRightPrecalculated.get(lineRight)
return 9; 
Integer.toHexString(realQuality)
new byte[20]
serialVersionUID=691613091
getDefaultCountry()
Integer.parseInt(this.getOptional("kylin.restclient.connection.max-total","200"))
Localization.lang("Bibtex key patterns")
parameter.getName()
scheduleRemoveStartingWindowLocked(wtoken)
selenium.isElementPresent("link=Control Panel")
selenium.click("//li[4]/span/a/span")
dynamicType.getLoaded().getDeclaredConstructor()
bs.getDependsOnMethods()
tree.getBounds()
appearance.getInt(attr,0)
data[1] < 10
cacheDirectory.mkdirs()
id=34
isZeroLatencyTypingEnabled() && IMMEDIATE_EDITING_ACTIONS.contains(action.getClass()) && !(action.getClass() == PasteAction.class && mySelectionModel.hasSelection())
mTargetNames == null
user.getActualCompanyId()
StandardRoot.class
UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),false,event.mediaModelList,event.successMessage)
List<Expression>
sb.append(portletName)
USING_ICQ && password.length() > 8
mAlarmManager.set(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class),false)
uri.getAssetName().toLowerCase()
bulkInsertableMap.get(persistentObjectClass)
internalTransaction.getTransferToAddress()
selenium.isElementPresent("link=Control Panel")
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
256L << zoomLevel
fileExtension.equals("testcase") || fileExtension.equals("prose")
1
new WKTWriter(3)
EqualityComparer<TKey>
child.resetRtlProperties()
case 6: 
dl.error("_offset_column","Offset is only supported for regression.")
mUserPaddingStart >= 0
file.contentsToByteArray()
log.warn("Couldn't find style: " + styleId)
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
tw.close()
"https".equals(uri.getScheme())
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
mStackScroller.getChildAtRawPosition(x,y)
bestState.score()
Integer.parseInt(st.nextToken())
response.getHits().getAt(0).field("s_obj2_arr2").values()
Throwable ex
new org.apache.ws.security.message.token.UsernameToken(tokenElement)
!mKey.equals(other.mKey)
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
dataFormatModel.setDescription(row.get("description"))
Object tag
IccUtils.cdmaBcdByteToInt((byte)0x8c)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
Throwable e
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
new InternalTestCluster("network",randomLong(),createTempDir(),1,1,tribeClusterName,tribeSettingsSource,0,false,TRIBE_CLUSTER_NODE_PREFIX,true)
HttpRequest.post("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
DEBUG=false
dashboard.addWidget("issues_action_plans",1)
type != null
nativeEvent_.getKeyCode() == KeyCodes.KEY_TAB
makeProperty(obj,boolean.class,"isEnabled","setEnabled","Enabled")
client != null && client.autofillClientIsFillUiShowing()
Optional.ofNullable(certificatesFile)
display.getRealMetrics(dm)
dest.writeInt(mSubId)
Color.fromRGB(0x41CD34)
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).isEqualTo("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
logger.debug("NODE {}: Retry timout: Can't advance",node.getNodeId())
callNode.call(packArguments(frame,arguments,toLLVMNodes,cachedLength))
mapMarkersHelper.getMapMarker(o)
request.setHeader(h.getKey(),h.getValue())
@Nullable public P getParams(){   return params; } 
userInfo.getWebsite()
CopyOnWriteArrayList<IncomingServerSession>
tfs.ls(Constants.PATH_SEPARATOR,true)
dimension - 9
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
getStreamNode(vertexID)
Locale.getDefault().toLanguageTag()
return false; 
getApplicationInfo().targetSdkVersion > O
metastore.getHost()
session != null && keyName.length() > 0
DiagnosticGroups.registerGroup("oldCheckTypes",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS,DiagnosticGroups.GLOBAL_THIS)
return true; 
ImmutableList.of("jinput.jar","lwjgl.jar","lwjgl_util.jar","rt.jar")
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 100
(float)executions / iterations
LOG.debug("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
reportError(context,"encoding %s as an ARRAY was unexpected",type)
treeWalk.close()
log.debug("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
List<Library>
KeySequenceNumber.class
_start >= 0
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
new LayerVisitor(asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
new IllegalArgumentException(e.getMessage(),e)
con.commit(false)
accountHandle.getComponentName().flattenToString()
AtmosphereRequest request
serverService.getOutgoingInterceptors()
mGnssCallback != null
new IndexWriter(dir,new Analyzer(){   public TokenStream tokenStream(  String fieldName,  Reader reader){     return new TokenFilter(new StandardTokenizer(reader)){       private int count=0;       public Token next() throws IOException {         if (count++ == 5) {           throw new IOException();         }         return input.next();       }     } ;   } } ,true,IndexWriter.MaxFieldLength.LIMITED)
ArrayList<ElementNode>
trimmedLine.startsWith("catch (") || trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (")|| trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)
is(1)
connection.getHost()
row < 0 || row > getRowCount() - 1
call.getStartTime()
Math.abs(a.d - b.d) < 2e-3
assertEquals(4,StringUtil.countMatches(drl,"import "))
n.extras.getCharSequence(Notification.EXTRA_TITLE)
createScopePanel(true)
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),parentFolderId,name)
new PostgreSQLCommandExecutor(context,message,this)
mKeyguardController.isKeyguardShowing(display.mDisplayId)
liveMetadata != null && this != liveMetadata.compressionParameters
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
Arrays.asList("Bnd-LastModified","Created-By","Javac-Debug","Javac-Deprecation","Javac-Encoding")
this.thrown.expectMessage("File must not be null")
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
serviceDataUuid == null || mServiceData == null
Timber.e(error)
/**   * Logical name of the property; will be used as the field name under which value for the property is written. <p> NOTE: do NOT change name of this field; it is accessed by Afterburner module.  */ protected final SerializedString _name; 
session.users().getServiceAccount(client)
BuildNumber.fromString("SNAPSHOT")
log.info("Reset to factory defaults : onOperator")
new Paint(Paint.ANTI_ALIAS_FLAG)
child.resetRtlProperties()
minSize(new Fixed(width),new Fixed(height))
CharSequence text
settings.setTextSize(WebSettings.TextSize.SMALLEST)
binary.length < 16
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
new UnsupportedOperationException(String.format("Cannot apply plugin of class '%s' to '%s' (class: %s) as it is not a Project",pluginClass.getName(),target.toString(),target.getClass().getName()))
32 * 1024
UserGroupRoleLocalServiceUtil.createUserGroupRole(userGroupRolePK)
viewStateIndex|=VIEW_STATE_SELECTED
uid >= 0
delaySoFar >= mReEnableDelayMillis
flux.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
DEBUG=false
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
sides < 3
i > 0
Files.createDirIfNoExists(path)
type.getDeclaredConstructor()
branch.hasOperands()
!ffmpegExecuteAsyncTask.isProcessCompleted()
id=10866
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
mBondState.setBondState(address.toUpperCase(),state,reason)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
((GrReferenceList)e).getReferenceElementsGroovy()
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)")
editor.apply()
DEBUG=false
inverterRealtimeResponse == null || inverterRealtimeResponse.getBody() == null || inverterRealtimeResponse.getBody().getData() == null
r.curApp != null && r.curApp.curReceiver == r
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
sharedSecretPanel.getSecret()
Time.currentTimeMillis()
mHeader.callOnClick()
type.getDeclaredConstructor()
RecentsHorizontalScrollView.super.removeView(view)
wikiPagePersistence.findByR_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
settings.setTextSize(WebSettings.TextSize.NORMAL)
SpellCheckerBundle.message("word.0.1.is.misspelled")
mp.getResolvedValue()
Log.debug(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
mock.expectedMinimumMessageCount(3)
logger.trace("myq securityToken: {}",securityToken)
isFastScrollAlwaysVisible()
ft.commitAllowingStateLoss()
args.argsLength() > 1 ? args.getDouble(1) : 5
"Failed to generate [" + extraSource + "]"
ServiceHelper.startService(answer)
fragmentEntryPersistence.findByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
mMccStr == null
Throwable t
mWM.isKeyguardLocked()
progressHeight - 2
StringUtils.isEmpty(finalFormKey)
!method.getModifiers().contains(Modifier.STATIC) && method.getModifiers().contains(Modifier.ABSTRACT) && method.getParameters().isEmpty()&& method.getReturnType().getKind() != TypeKind.VOID && (!method.getReturnType().getKind().equals(TypeKind.DECLARED) || !builderTypeForFiltering.equals(env.getTypeUtils().asElement(method.getReturnType())))
srTree != null && srTree.Result != mySearchResult
!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
status == PlayerStatus.INITIALIZED || status == PlayerStatus.INITIALIZING || status == PlayerStatus.PREPARING
Math.min(desiredTileWidth,desiredTileHeight)
new StringBundler(7)
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
Slog.i(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
this.csrfTokenRepository.generateToken(exchange).delayUntil(token -> this.csrfTokenRepository.saveToken(exchange,token))
doReopen(false)
selenium.isElementPresent("link=Control Panel")
_typeSettingsProperties.toString()
selenium.click("//li[4]/span/a/span")
getMockEndpoint("mock:event").expectedMessageCount(6)
LOG.info(title + "; " + message)
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod("doWork")
selenium.click("//li[4]/span/a/span")
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)
map.get(key)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Math.max(1000L,connectionTimeout)
Glue optionalGlue
settings.readLPw(null,0,false)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
dep != null
BackupManagerServiceInterface svc=mService; 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
Object... objects
sleep < 0 || !run
varType instanceof PsiWildcardType || varType instanceof PsiCapturedWildcardType
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
message.getExpiresInSeconds() * 1000L
Log.w(TAG,"Unable to resolve SystemUI's UID.",e)
mObsoleteAgents.remove(info)
desktopSharingButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
mObsoleteAgents.remove(info)
dest.writeInt(mSubId)
mUiHandler.postDelayed(pae,timeout)
public SubType on(Expr.EBoolean o){   query.on(o);   return self; } 
final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig=clusterConfigService.get(DeletionRetentionStrategyConfig.class); 
DEBUG=false
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
final ClientState clientState=(ClientState)msg.obj; 
mAlpha.cancel()
Validator.isNull(PropsValues.MOBILE_DEVICE_TYPE)
ts.getJobId() == jobId
mServerFile.getModificationTimestamp() != mLocalFile.getModificationTimestampAtLastSyncForData()
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null,null)
gatherDisableActionsLocked(mCurrentUserId)
code.length > 65535
registerError(elseToken,new DeleteElementFix(elseBranch))
_freemarkerEngineConfiguration.resourceModificationCheck()
typeSettingsProperties.toSortedString()
JiveGlobals.getPropertyEncryptor().encrypt(value)
from >= to
mService.setAppPolicy(UID_A,POLICY_NONE)
LOG.debug(e)
getName()
new IllegalStateException("Redefining custom proto adapter is illegal.")
Validator.isNotNull(entry.getUrlTitle())
atlasFile.name()
toArrayHelper(array,0)
selenium.click("//li[4]/span/a/span")
"value".equals(key) || "weight".equals(key)
selenium.isElementPresent("link=Control Panel")
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
mWindowingMode != WINDOWING_MODE_PINNED
context.getContentResolver()
Map<String,Object>
loaded.getLoaded().getDeclaredConstructor()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
logoutRedirect != null
callNode.call(getCallTarget(function),packArguments(frame,function,arguments,cachedLength))
merge4dCnnData(labelsToMerge)
mDemoSlider.setDuration(4000)
expandableView.getIntrinsicHeight()
Long.parseLong(val)
new Paint(Paint.ANTI_ALIAS_FLAG)
assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON,MediaType.parseMediaType(MediaTypes.HAL_JSON_VALUE + ";charset=UTF-8"))
(Double)y
e.isAltPressed()
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
MLPMnistTwoLayerExample.class
this.originY
g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),rref.name,expr)
mGnssCallback != null
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
bar.getValue() >= 0
result=true
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
node instanceof InspectionNode || node instanceof InspectionPackageNode || node instanceof InspectionModuleNode
new DeserializationException("Error reading field " + fieldNumber + " as "+ target.getClass().getName(),e)
UUID.class
Throwable e
isFocused()
i < 100
method.getDeclaringClass()
waitOnThreads(f10)
selenium.isElementPresent("link=Control Panel")
this(60_000L); 
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
file != null && file.getFileSystem() instanceof JarFileSystem
lastVisibleIndex >= 0 && !justDeleted
config.getBoolean("single.reader.only",false)
new QSDetailClipper(mDetail)
position + dockDividerWidth
factory.getEmbeddedServletContainer()
isBusy()
thingGroupItem.getLabel() == null || !thingGroupItem.getLabel().equals(label)
part.getStartLine()
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
LOG.warn("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
ServiceLoader.load(ReportInteraction.class,getClass().getClassLoader())
ConcurrentHashMap<>
orderBook.getTimeStamp()
webSocketProcessor.close(webSocket,1000)
firstPos > mTargetPos
backgroundTaskThreadLocalManagerImpl.setUserLocalService(userLocalService)
log.debug("BouncyCastle not registered, using the default JCE provider")
inserter.close()
new IOException(e)
Glue optionalGlue
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
this.messageService.fluxPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
!hiddenElements.contains(graphElement)
origin.realComponent().doubleValue() < other
Item extends IItem
PasswordEncryptorUtil.encrypt(jPassword,user.getPassword())
StringBuilder buffer=new StringBuilder(strings[i]); 
is(500)
annotations == null || annotations.isEmpty()
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
listener.onError(new AsyncEvent(event.getAsyncContext(),request,response,event.getThrowable()))
i < 8
logger.warn("Could not locate PropertySource: " + (errorBody == null ? error == null ? "label not found" : error.getMessage() : errorBody))
sequenceFileVersion != SEQUENCE_FILE_VERSION
this.env
info == null || !mConfig.bindPermission.equals(info.permission)
new Paint()
Throwable e
notifyItemRangeChanged(getItemCount(),newData.size())
doTestPositive(301)
message.getConversation()
mContext.sendBroadcast(intent)
ServiceManager.addService(Context.DISPLAY_SERVICE,display,true)
replicaEngine.refresh("test")
!mNetworkAvailable
conn.createStatement()
/**   * Needed for statistics.   */ private final LongAdder8 rejectedJobsCnt=new LongAdder8(); 
Assert.assertEquals(runResult.stdOut,stdoutLines.length,lines.length)
new UnsupportedTemporalTypeException(String.format("Cannot get the time zone of: %s",this))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
is(2)
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP,KEY_SIMPLEPERF_CMD)
startingWindow != null && ttoken.startingView != null
xsr=null
outputDir.getAbsolutePath()
Integer.toHexString(flags)
Map<String,Object>
Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor()
Double.isNaN(rate) || Double.isInfinite(rate)
errorRelay.hasObservers()
Log.w(TAG,e.getMessage(),e)
MAX_PERCENT_DIFFERENCE=0.3
s.length() > 3 && s.charAt(3) != '<'
logger.debug("Line-in of {} is not connected",getUDN())
mFile.getStoragePath()
ts.getJobId() == jobId
croutonDurationEdit.setVisibility(View.VISIBLE)
fb.limit()
sourceHeight > 0
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
adapter.item(R.string.layer_underlay).selected(underlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_down_dark,R.drawable.ic_action_down_light).listen(listener).position(15)
cursor == null || !cursor.moveToFirst()
store.setConfigFile(usersFile)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
return _this; 
Long.parseLong(value)
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(_user.getUserId(),calendarBooking,0,false)
bucket.isExists()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
Allocation.createFromBitmap(mRS,outb,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
mapper.getFactory()
printServices.size() >= 1
verify(mWifiService,never()).stopLocalOnlyHotspot()
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(ChangingLoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
constraints.weightx=1f
new DownSamplerForExposureNode(context,writeOnlyGBufferConfig,displayResolutionDependentFBOs,FBO_16X16_CONFIG,immutableFBOs,aLabel)
statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement),constraints.getPrimaryKeyName())
descriptors[i].getPropertyType().isAssignableFrom(propertyType)
Thread.sleep(300)
!isMailSenderDefined()
DirectoryReader.openIfChanged(reader)
? extends T
sampleFactory.getDeclaredConstructor()
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",15)
new UnsupportedOperationException("PLAIN doesn't support wrap or unwrap operation")
UIPasteboard.getGeneralPasteboard()
c.writeAndFlush("[you] " + msg + '\n')
mPowerManager.isInteractive()
mService.setAppPolicy(UID_A,POLICY_NONE)
settings.readLPw(null,0,false)
cache.context().statisticsEnabled()
simple.getToSentDate()
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,false)
onLoadFailed(null)
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
Preferences.navigationVibrationEnabled(context)
loaded.getLoaded().getDeclaredConstructor()
Assert.assertTrue("Was not expecting this output " + acc,System.currentTimeMillis() - now < 5000)
assertEquals(6,result.getBySeverity(Severity.NOTE).size())
log.logError(BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",sourceFileObject.toString(),e.getMessage()),e)
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
!mRequestFilterKeyEvents || (mServiceInterface == null)
new Paint()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
@NotNull RemoteCredentialsHolder credentials
parser.nextText()
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
processEngineConfiguration.getCommandExecutor()
LOGGER.isDebugEnabled()
TupleDomain.all()
irrCubeMap.getImage()
@Mock private PanProfile mPanProfile; 
gatherDisableActionsLocked(mCurrentUserId)
@Path(PATH_RELATIONSHIP_INDEX_ID)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
Nd4j.zeros(mb,inputLength)
mEditSessionQuestions.setText(String.valueOf(repLimit))
id=48
target.getDestinationLinkAddress()
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER","ACTUATOR")
children == null
total <= 0
selenium.isElementPresent("link=Control Panel")
monitoringStatus.updateMonitoringStatusTime(System.currentTimeMillis() - 1000 * 3600l)
contribution[LIGHT_AMBIENT_B]
DEFAULT_WIDTH=0x00010000
final LongAdder8 cnt=new LongAdder8(); 
TYPEAHEAD_LOG.error(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())
new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup,SQLParserFeature.StrictForWall)
DbException.get(ErrorCode.OBJECT_CLOSED,e)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
"SELECT id, factId, combinedDue FROM cards WHERE type = 1 AND combinedDue > " + mDueCutoff + " ORDER BY combinedDue LIMIT "+ mQueueLimit
ConstantNode.forInt(config.logOfHRGrainBytes)
mInTouchMode=true
Boolean.parseBoolean(resizeableStr)
text == null || text.contains("${")
writePermission.intern()
(mOomMinFreeHigh[5] * 7) / 4
context.getMainLooper()
LOG.debug("Couldn't delete {} - does not exist",f)
this(164); 
verifyPositions(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
HeartbeatReelectionListener.class
executor.scheduleAtFixedRate(this,period,period,unit)
Character.isDigit(first) || first == '-'
isAlphaModeSupported()
Long.parseLong(args[1])
selenium.isElementPresent("link=Control Panel")
this::expand
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
logger.debug("Radio station '{}' not found",station)
Throwable e
mToolbar.setTitle(mToolbarTitle)
-29
IntentFactory.create(mContext,type,classifiedText)
selenium.isElementPresent("link=Control Panel")
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_RECORD_FUNCTION,false)
compensationRange.contains(compensation)
logger.trace("Requsting URL {}",url)
factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)
path(14)
/**   * Creates the  {@link TokenStream} of n-grams from the given {@link Reader}.   */ public NGramTokenizer create(Reader input){   return new NGramTokenizer(input,minGramSize,maxGramSize); } 
java.lang.System.currentTimeMillis() + 250
out.writeBytes(mask)
WordPress.getCurrentBlog().getLocalTableBlogId()
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkWeakWarnings,checkInfos,ignoreExtraHighlighting,getHostFile())
synchronized (this) {   classCache.clear(); } 
AssetTagFinderUtil.countByG_N(_scopeGroup.getParentGroupId(),assetTagName)
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
editor.apply()
delayDuration - 120
gauge.getValue() instanceof Number
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
redefined.getDeclaredConstructor()
new CommentByBlockCommentHandler().invoke(myFixture.getProject(),myFixture.getEditor(),myFixture.getEditor().getCaretModel().getPrimaryCaret(),myFixture.getFile())
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
mGnssCallback != null
new GraphQLException("no operation found")
Integer.parseInt(port)
WordPress.getCurrentBlog().getLocalTableBlogId()
optionsOverride.getLambdaRole()
new ConcurrentHashMap<String,Boolean>(256)
dest.writeTypedArray(remoteInputs,flags)
defaultCamelContext.removeRoute(id)
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
N node
what instanceof UpdateAppearance || what instanceof ParagraphStyle || (what instanceof SuggestionSpan && (((SuggestionSpan)what).getFlags() & SuggestionSpan.FLAG_AUTO_CORRECTION) != 0)
StringBuilder ret
Long chatId
Long.parseLong(args[2])
new StringBuilder(256)
/**   * Returns an  {@code AfterAll} {@code Trigger} with the given subtriggers.  */ public static AfterAll of(OnceTrigger... triggers){   return new AfterAll(Arrays.<Trigger>asList(triggers)); } 
new BufferedImage(region.width,region.height,page.getType())
lp.resolveLayoutDirection(layoutDirection)
pool.drain()
selenium.isElementPresent("link=Control Panel")
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
logger.info("Failed to register block {} - no id",block)
IllegalArgumentException e
row("p_comment",null,7.0,0.0,null,null,null)
AbstractStoreHandler<DelayedEntry>
activityMonitor.waitForActivityWithTimeout(2000)
new RecordReaderDataSetIterator(rr,batchSize,labelIndex,numPossibleLabels,regression)
DEBUG=false
mPolicy != null && wasPowered
selectedProperty != null && e.getOldLeadSelectionPath() != null
SDK_INT == O
request.getServletPath()
"$" + name
c.close()
queryIndex == 0 || queryProcessor.getResultContainers().size() == 1
intervalFraction * (nextValue - prevValue)
SpectralKMeansDriver.run(new Configuration(),affinities,output,1100,2,measure,convergenceDelta,maxIter)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
false && !closedWay && getOuterWays().size() == 1
currentResponse != null && currentResponse.getAuthentication() != null
croutonDurationEdit.setVisibility(View.GONE)
selenium.isElementPresent("link=Control Panel")
Flusher.register(handler)
mSyncStatus.valueAt(i)
!mShouldTranslateContents
new DecoderInfo("OMX.google.raw.decoder")
new UnsupportedOperationException("read-only")
void receiveEndOfStream(int streamId) throws ConnectionException ; 
loaded.getLoaded().getDeclaredConstructor()
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
Conv2DConfig.builder().kH(kernel[0])
updateRotation(0)
Sets.newHashSet("int","int8","int16","int32","int64","uint","uint8","uint16","uint32","uint64","uintptr","rune","float32","float64")
Arrays.asList(manageSelectors,mergeDatabaseAction,newSubDatabaseAction,close,save,saveAs,saveSelectedAs,saveSelectedAsPlain,undo,redo,cut,delete,copy,paste,mark,unmark,unmarkAll,editEntry,selectAll,copyKey,copyCiteKey,copyKeyAndTitle,editPreamble,editStrings,toggleGroups,toggleSearch,makeKeyAction,normalSearch,incrementalSearch,replaceAll,importMenu,exportMenu,openPdf,openUrl,openFolder,openFile,openSpires,togglePreview,dupliCheck,highlightAll,highlightAny,newEntryAction,plainTextImport,massSetField,manageKeywords,closeDatabaseAction,switchPreview,integrityCheckAction,autoSetPdf,autoSetPs,toggleHighlightAny,toggleHighlightAll,databaseProperties,abbreviateIso,abbreviateMedline,unabbreviate,exportAll,exportSelected,importCurrent,saveAll,dbConnect,dbExport,focusTable)
256L << zoomLevel
httpClient.getSSLSocketMiddleware()
new IndexWriter(store,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
optimize()
expectedCommentLength <= maxCommentLength
new NameAlias(nameAlias)
assertValue(context,recordClass,Trait.INSTANTIABLE,Trait.MEMBERS,Trait.HOST_OBJECT)
valueType.isIntegerNumber() || valueType.isChar()
@Override public Variable emitBitScanReverse(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IBSR,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LBSR,result,asAllocatable(value)));   }   return result; } 
activity == null || activity.isFinishing()
selenium.isElementPresent("link=Control Panel")
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
ch.unsafe().flush()
getPreferenceStore()
getRawFieldBlock(i).getRegionSizeInBytes(rowIndex,1)
PrivacyManager.getSettingBool(null,context,uid,PrivacyManager.cSettingRandom,false,false)
PREVIEW_FRAME_TIMEOUT=1000
saveLocalAttachmentTo(directory)
mValue == null || offset > mValue.length
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
viewToClick != null && viewToClick.isAttachedToWindow()
into.get(j)
TransformItem.create(R.id.ivFirstImage,Direction.LEFT_TO_RIGHT,0.20f)
deployOneTaskTestProcess()
position.setLongitude(field.getJsonNumber("Long").doubleValue())
addDaysAndCheckForCompletion(2,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
origin > other
interceptor.doIntercept(invocation)
i < 104
thumbView.setTag(R.id.glide_tag,Video.getUrl(trailer))
endPosition.getPosition() <= logfileoffset
createInstanceOn(event)
Math.sin(Math.toRadians(degrees))
new ConnectionException(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR)
indexData.rewind()
mFrameTransformation.printShortString(pw)
Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor()
i=0
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage),false)
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
blog.getLocalTableBlogId()
selenium.isElementPresent("link=Control Panel")
Thread.sleep(1000)
nameDefinitionMultimap.keySet()
selenium.isElementPresent("link=Control Panel")
StringUtils.isEmpty(value) ? false : Boolean.parseBoolean(value)
Thread.sleep(1000)
ContainerUtil.getFirstItem(expressions)
List<JetType>
E edge
stmts == null || stmts.isEmpty()
currentVersions.get(flowFile.getId()) != null && originalVersions.get(flowFile.getId()) == null
seqNoStats.v2()
evaluationText.getText().indexOf('\n') == -1 && singleLine.indexOf(evaluationText) == -1
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
mTestStream.getFlushedBytes()
id.provider != null && id.provider.info != null
GL20.glUniform2fv(location,v)
type.getDeclaredConstructor()
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
Thread.sleep(50)
closed.get()
typeTmp.get(1)
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
filter != null && !filter.isAccept(field) || field.getDeclaringClass().getAnnotation(Transient.class) != null
GridGgfsTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
j < count
NUM_OUTPUT_BUFFERS=8
new Ansi(false)
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
sketchWidth < sketchWidth0
BackupManagerServiceInterface svc=mService; 
annotationHelper.printAnnotationError(element,"%s annotated element should have an empty constructor")
runner.addExtensions(session,getLog(),lifecycleExecutor,projectBuilder)
position + dockDividerWidth
assertEquals("integer",model.getProperties().get(COUNT).getType())
final P testedPrototype
@Nullable
internalRemoveChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
ftm.associateExtension(StdFileTypes.XML,RNG_EXT)
Thread.sleep(1000)
canWrite(clazz,mediaType)
client.loginWithFacebook(fbAccessToken,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
WEB_SYNC_MANAGER=false
obj != null
@Nullable
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
ret.setComplete(e,response)
getCategoryMethodGetter(theClass,getterName,false)
name.equals("Devices") || name.equals("UUIDs")
newStarred=Boolean.parseBoolean(value)
element.getStringValue()
position.set(0,0,mRight - mLeft,mBottom - mTop)
String.format(Locale.getDefault(),"Time taken: %d.%03ds",seconds,milliseconds)
selenium.click("//li[4]/span/a/span")
SIZE_OF_INT + SIZE_OF_INT + SIZE_OF_LONG
Nd4j.create(new int[]{1,nParams},'c')
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
Arrays.asList("bool","qint32","qint64","float","double")
mQsDensityContainer.getLayoutParams()
task.abort()
mock.expectedBodiesReceivedInAnyOrder("c","b","a")
DEBUG=false
now.plusDays(3).withTimeAtStartOfDay()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES,UserHandle.getUserId(getCallingUid()))
@JsonProperty("id") Long id
public T withArguments(String... arguments){   operationParamsBuilder.setArguments(arguments);   return getThis(); } 
dest.writeLong(this.milestone)
LOG.info("Couldn't collect changes between " + oldRevision + " and "+ newRevision,e)
new DisappearAnimationUtils(context,125,1.2f,0.6f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
synchronized (points) {   points.add(point);   int size=points.size();   if (size > MAX_RESULT_POINTS) {     points.subList(0,size - MAX_RESULT_POINTS / 2).clear();   } } 
maxAge == -1
artifacts.size()
Long.parseLong(args[1])
token.getExpiresIn()
post.getUrl()
config.get(CONFIG_KEY_LOCK_READ_TIMEOUT)
!KeyEvent.isMetaKey(keyCode)
sqlRouteResult.getSqlParsedResult().getType()
m[M30]
XmppStringUtils.parseBareJid(key)
a.getInteger(R.styleable.WeekView_dayNameLength,mDayNameLength)
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
selenium.isElementPresent("link=Control Panel")
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
String javaExecutable
ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId")
bagEntry.getState() == STATE_NOT_IN_USE
vector.iterateNonZero()
StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
mp.getResolvedValue()
length == -1 || length > 4
resolver.acquireUnstableContentProviderClient(uri)
vertFilename == null
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
BasicContext.class
CONSTELLATION_TYPE_SHIFT_WIDTH=4
!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()
mUiHandler.postDelayed(pae,timeout)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted,restricted)
file.getPath()
beansXml.getOrCreateAlternatives()
nextIdx + 1
list.isInternal()
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the IQ provider.  */ public static PrivateData getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return privateDataProviders.get(key); } 
log.warn("Expected " + s.getStyleId() + " to have <w:basedOn ??")
loaded.getLoaded().getDeclaredConstructor()
Item.itemsList[item.itemID].getColorFromItemStack(item,0)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
DefaultCacheKeysFactory.staticCreateNaturalIdKey(naturalIdValues,persister,session)
Thread.sleep(3000)
(fl & FLAG_LAYOUT_NO_LIMITS) != 0 && attrs.type != TYPE_SYSTEM_ERROR
assertEquals("Unexpected events " + publisher.events,3,publisher.events.size())
value.setScale(1,RoundingMode.HALF_EVEN).doubleValue()
id=10857
getLookupString()
service.getRecordsForSelectedTab(collectionMetadata,entity,sectionCrumbs,currentTabName)
CompletableFuture<Void>
newDict.initParams(baseDir.replaceFirst(srcConfig.getHdfsWorkingDirectory(),dstConfig.getHdfsWorkingDirectory()),baseId,maxId,maxValueLength,nValues,bytesConvert)
mAppToken.isVisible()
paramType.getSimpleName()
text != null && text.length() != 0
state == AsyncState.DISPATCHING || state == AsyncState.MUST_DISPATCH
offset <= 0
JobEntryInterface.class
mAuthorities.valueAt(i)
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,tag,mustHaveFlags,mustNotHaveFlags)
selenium.isElementPresent("link=Site Name")
a.getBoolean(R.styleable.View_fadeScrollbars,true)
event.getGameState() == GameState.LOGGED_IN
mDisplayContent.mDividerControllerLocked.getWidth()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
formatter.format("%s",toString(Verbosity.Short))
val == null || val.length() == 0
((MasterSlaveDataSource)dataSource).getMasterDataSource()
command.execute(answerForm)
PushConfigurationState.class
!blocked.isDone()
clusteringSize + 1
!mQuietEnable
new BufferedInputStream(new GZIPInputStream(input))
component.setStrikethrough(object.get("strikethrough").getAsBoolean())
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
selenium.isElementPresent("link=Control Panel")
mMccStr == null
TelephonyManager.getDefault().getCurrentPhoneType()
matchAxisFilter != 0 || wrapAxisFilter != 0
mView.setVisibility(mFinalVisibility)
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false,false)
ImmutableSetMultimap<ChunkCoordIntPair,Ticket>
logger.trace("Invalid Account Credentials")
elementType == null || elementType == Object.class
ArrayUtils.equals(MiBand2Service.RESPONSE_ACTIVITY_DATA_START_DATE_SUCCESS,value,0,3)
selenium.isElementPresent("link=Control Panel")
mTestStream.getFlushedBytes()
DLFileEntry.class
delaySoFar >= mReEnableDelayMillis
selenium.isElementPresent("link=Control Panel")
ret=false
new ProtoFile("hex.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
nextTokenIs(b,IDENTIFIER)
metadata.addHaving((Predicate)null)
loaded.getLoaded().getDeclaredConstructor()
Transaction gview=null; 
new EmoteClue("Cheer at the top of the agility pyramid. Beware of double agents! Equip a blue mystic robe top, and any rune heraldic shield.",new WorldPoint(3043,4697,3),CHEER,item(MYSTIC_ROBE_TOP),any("Any rune heraldic shield",item(RUNE_SHIELD_H1),item(RUNE_SHIELD_H2),item(RUNE_SHIELD_H3),item(RUNE_SHIELD_H4),item(RUNE_SHIELD_H5)))
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,transactionSPI)
UNDEFINED
origin.realComponent().doubleValue() <= other
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
learnRate * 0.5f
String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",getId(),maxXmx)
Bytes.toBytes(tableNameOrRegionName)
mDataAuthorities == null || data == null
lineNumber=1
e2.getPointerCount()
dlFolderService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
FRAME_STATS_COUNT=16
event.isError()
id=7
type.getDeclaredConstructor()
DLStoreUtil.addFile(serviceContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,dirName + StringPool.SLASH + shortFileName,serviceContext,bytes)
dynamicType.getLoaded().getDeclaredConstructor()
availableEIPList.iterator()
new TermInfosWriter(store,"words",fis,IndexWriter.DEFAULT_TERM_INDEX_INTERVAL)
assertEquals(worldVocab.getIndex(),3)
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
pos + toFind.length() <= limit
REPLACE_IF_SAME(7)
response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty())
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,tag,mustHaveFlags,mustNotHaveFlags)
DecimalUtility.getDecimal9FromBigDecimal(bigDecimal,scale,precision)
test("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
new HazelcastInstance[nodeCount]
cascadeValidationToOne(errors,bean,associatedObject,persistentProperty,propertyName + "[" + (idx++)+ "]",idx)
BTraceUtils.setIntrusionLevel(0)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SHOW_SPLASH_SCREEN,true)
PathUtils.getTestDir(getClass()).getPath()
id=27
dist >= maxDist
(theme().getValue() == null) || AceThemes.TEXTMATE.equals(theme().getValue())
Product
Pair.newPair(1,"Killed")
getHeadNodeId(upNodeIndex)
!throwable.isPresent()
assertTrue(indicesService.hasUncompletedPendingDeletes())
Assert.assertEquals(getNotAllowedExceptionMessage("hello"),e.getCause().getMessage())
log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
chobj == null && channel.indexOf("-pnpres") > 0
context.createTaskContext().addPipelineContext(0,true,true,false)
new ByteArray(rowKeyBodyBuf,0,offSet)
tl.set(paint,mText,start,end,dir,directions,hasTabs,tabStops)
mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))
buffer.flip()
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao,false)
uri == null || uri.equals("/")
dbIdsRepository.getSnapshotId(component)
line.endsWith("warning") || line.endsWith("warnings")
appName != null && searchManager.getSearchableInfo(appName) != null
handleShowingDetail(detail,x,y,false)
orderBook.getTimeStamp()
new FsInfo(0,null,pathInfo)
log.info("Hooking new default : onErrorDropped")
LOG.info("Working dir: " + workDir.getAbsolutePath())
ContainerUtil.immutableSet(PLATFORM_IOS,PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS)
CharSequence channel
final MediaDriverBroadcastReceiver receiver=new MediaDriverBroadcastReceiver(ctx.toClientBuffer); 
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
p.size()
!subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
timeout <= 0
LOG.info("Exception while creating remote block reader, datanode {}",source,e)
parsed && name.length() > 0
protected abstract ResolvedReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration); 
certificate(certURL,password,certType,port,new NoKeystoreSpecImpl())
LineNumberConvertor.Builder.createLeft(data.getLines())
messenger.signUpObsolete(name,null,false)
this.acquireCameraInstance(cameraType)
SDK_INT <= LOLLIPOP
testAllocation("test1snippet",2,0,0)
new Duration(30,SECONDS)
lineArgs[4]
projectName.equalsIgnoreCase(executable.getProjectName())
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
field.tokenStream(docMapper.mappers().indexAnalyzer())
localBinder.getServiceInstance().restartScan()
ConfigureMapMenu.getSortedMapNamesIds(this,entrieValues,entries)
waitFor(condition,duration,SLEEP_MILLIS)
jsonHotRestartState != null
DEFAULT_WIDTH=0x00010000
receivedAcks > 0
!beanPrefix.isEmpty() || !beanSuffix.isEmpty() || beanPackageName != null
code.executeVarargs(args,null,null)
row - 0.5f
Color.fromRGB(0xDECF2A)
selenium.isElementPresent("link=Control Panel")
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
Gdx.files.internal(fileName).pathWithoutExtension()
xmlenc.writeObject(bean)
resolver.acquireUnstableContentProviderClient(uri)
mCallback.onInputUpdated(inputId)
folder.getAbsolutePath()
methodExists(setterName,fieldNode,false)
options.getGroupByInstances()
element.getText()
apk.getUrl()
heightMode == MeasureSpec.UNSPECIFIED
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mUiHandler.removeCallbacks(pae)
new ObjectRecordWithStats(key,value)
params.getSimulatedPlatformVersion()
type.getDeclaredConstructor()
rec.isValidLineInReference(pastViolation.getLine())
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
DeprecationLogger.nagUserOfDiscontinuedMethod("Task.dependsOnTaskDidWork()","Instead, check the value of \"didWork()\" for each task, or declare the task inputs and outputs and let Gradle decide what needs to be run.")
mock(ExampleService.class)
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent|| !mPipManager.isPipShown()
mPackageUsage.write(false)
onFailure(statusCode,headers,handler)
insets.left != 0
if (dockOnTopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
topVer(4,3)
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
StringBuilder buffer=new StringBuilder("["); 
mpi > -135 || !leftSide
mNavigationBarView.getPaddingLeft()
LookupElementBuilder.create(expr,referencedName)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
root.waitThis().size() > 0
WINDOW_FREEZE_TIMEOUT_DURATION=2000
(status & 0x04000000) != 0
innerLoader.parseClass(inputStream,name)
metadata.getFaceRectangles()
list != null && list.getTextLength() > 0
this.acquireCameraInstance(cameraType)
new IllegalStateException("Unable to load error page data",e)
getConnectTimeout()
writeRepeatedFixed64Impl(id,val)
request.getContentType().startsWith("application/x-www-form-urlencoded")
new DefaultDependentsSet(true)
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
cs[i].atd(row)
pk.getColumnNameInSql()
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Integer.parseInt(getOptional("kylin.engine.spark.max-partition","5000"))
new InterruptedException("TEST EXCEPTION")
index > widgets.length
new ModelRenderer(model,0,1)
LOG.debug("Retrieving location for state={} of job={} from the cache.",queryableStateName,jobId)
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
Thread.sleep(2000)
onDetachedFromWindow()
ArrayUtils.subarray(args,3,args.length)
this.e != null && getActivity() != null
tokens[position].hasPosTag("_allow_repeat")
logger.debug("Cannot handle shuffle command ({})",e.getMessage())
reformatRangeImpl(element,startOffset,endOffset,false)
ddmStructureLocalService.fetchStructure(groupId,ddmStructureKey)
sctpChannelClass.getMethod("open")
Exception t
position != -1 && position < list.size()
firstSlash <= 0
Log.e(TAG,"This will become an error",ex)
Set<String>
formService.populateEntityForm(cmd,entity,entityForm,true)
this.constraints.updateFromTuple(workingMemory,leftTuple)
fix.android.opengl.GLES20.glVertexAttribPointer(maVelocityHandle,3,GLES20.GL_FLOAT,false,0,0)
headers.addValue("Vary")
selenium.isElementPresent("link=Control Panel")
new LFWDataFetcher(imageWidth,imageHeight)
mode != null && !mode.isEmpty()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
getBaseVersion()
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallbackDeferring(new MetricCB())
memoryCacheScreens >= 0
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0 && !nameMask.endsWith("%")
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
mentionsListView.smoothScrollToPosition(0)
visitStatement(node,context)
new ImportResults(globalSettingsImported,importedAccounts,erroneousAccounts)
super.setV(v)
form instanceof IObj && !(form instanceof Var) && ((IObj)form).meta() != null
Integer.toHexString(realQuality)
uploadProgressHandler.onProgress(downloaded,total)
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
session.getPlaybackType() == MediaSession.PLAYBACK_TYPE_REMOTE && mRvc != null
g.getTarget().setDirectory("target/generated-sources/jooq")
replace(wmlTemplateString,new StringBuilder(),mappings)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
context.addStep(response,operation,new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)
listener.onError(new AsyncEvent(event.getAsyncContext(),request,response,event.getThrowable()))
LOG.error("Failed to install vim keymap.\n" + e)
Optional.ofNullable(layout)
DEBUG_GESTURES=false
mMenuView.setBackground(null)
resources.nextElement().toURI()
Class.forName(contextClassName)
!OsmandPlugin.onDestinationReached()
r != null
file.getOriginalFilename()
error.expectedMinimumMessageCount(2)
blog.getLocalTableBlogId()
mGnssCallback != null
result=true
DEFAULT_NUMBER_OF_READ_BUFFERS=256
prepared.charAt(start - 1)
loadingFinished || (prepared && enabledTrackCount == 0)
activity == null || activity.isFinishing()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN)
context.getLocation(argument)
ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
!myProject.isDisposed() && myProject.isInitialized() && file.isValid()
mSyncStatus.valueAt(i)
mUiHandler.postDelayed(pae,timeout)
mAms.mWaitForNetworkTimeoutMs=2000
!entry.getKey().isEmpty()
new StepMeta(stepPlugin.getID()[0],name,info)
TestSuiteEnvironment.getServerAddressNode1()
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,completedTasks,false,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
timeout=120000
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
queryMixin.rightJoin(target)
lock.isHeldByCurrentThread()
JBUI.Borders.empty(0,12,0,3)
log.error("SQL Validation error",ex)
UIUtil.applyRenderingHints(g2)
TelephonyManager.getDefault().getCurrentPhoneType()
weight * (yreal * Math.log(ymodel) - logfactorial - ymodel)
callNode.call(arguments)
isInputViewShown()
template.isBuiltin()
assertThat(client).replicationController("fabric8-console-controller").hasName("fabric8-console-controller")
presenceXML != null && !NULL_STRING.equals(presenceXML)
infos == null || infos.length == 0
currentStage != NodeStage.DONE && sendMessage() == false
assertEvaluate(buildFile).moduleLookup("txts")
index > widgets.length
Boolean.parseBoolean(attrValue)
TelephonyManager.getDefault().getCurrentPhoneType()
getLog().debug("Module name is " + moduleName)
new CountDownLatch(2)
port == 443
file.getPath()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
mAuthorities.valueAt(i)
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
getConnectTimeout()
realStartActivityLocked(hr,app,true,true,null)
that.getPath() == null && getPath() != null
Preconditions.checkNotNull(nativePlatforms.get(targetCpuType),"Unknown platform type " + targetCpuType.toString())
delaySoFar >= mReEnableDelayMillis
MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
new KsqlTopic("FOO","TEST_TOPIC1",new KsqlJsonTopicSerDe(),true)
mMethod.invoke(mContext,params)
new IndexWriter(ramDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
thenStore.storeChanged || elseStore.storeChanged
bm.createAshmemBitmap()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
db.hashMapCreate("cache").expireAfterWrite(1,TimeUnit.HOURS)
!status.isDir()
logger.error(message,ex)
clipItem.coerceToText(mContext)
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,mHandler,new UserHandle(mUserId))
resources.getDimensionPixelSize(R.dimen.close_handle_height)
loaded.getLoaded().getDeclaredConstructor()
Activate(app)
temp_descs.get(j)
drawable.getIntrinsicHeight()
type.getDeclaredConstructor()
loaded.getLoaded().getDeclaredConstructor()
mf.getColumnNameInSql()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
extras.getInt("quick-media",-1)
session.executePost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler)
FBUtilities.getBroadcastAddress()
path != null && path.indexOf(mHostContext.getPackageName()) < 0
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
mAuthorities.valueAt(i)
ClassHelper.make(SoftReference.class,false)
pathToFileInProject.lastIndexOf("error-prone")
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
LOGGER.debug("Following Class is no side pane: '" + componentName,e)
N node
List<Street>
mAppToken.isVisible()
StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName())
h - y
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,false,"isAppInactive",null)
value == 0
glyph.get().setSize(sizeSlider.getValue())
incomingCounter.getAndSet(0) / 1024d
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
setHasStableIds(false)
return false; 
field.getType()
new IndexWriter(storeDirectory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
task == null || !task.isCompleted()
"LEVEL".equalsIgnoreCase(ident) || "CONNECT_BY_ISCYCLE".equalsIgnoreCase(ident)
fT.replace(R.id.feeditemlistFragment,filf)
assertEvaluate(buildFile).moduleLookup("txts")
SCAN_STATUS_PARTIAL=1
sentHeaders.size() > 0 && sentHeaders.get(sentHeaders.size() - 1).getNumber() <= bestKnownBlock.getNumber()
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
user2.id()
Boolean.parseBoolean(getOptional("kylin.query.enable-dynamic-column","false"))
view.getMode()
user instanceof String
service.diff(appContext.getDevMachine(),project.getLocation(),null,NAME_STATUS,true,0,"HEAD",false)
transformedLine == null || transformedLine.isEmpty()
public static ScaleTo $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
relatedProduct.getRelatedProduct()
method.getMessageType()
mDatamodels[1] != null && !isErrorResponse(1)
body.endsWith("6") || body.endsWith("10")
userInfo == null || !userInfo.canHaveProfile()
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
fmd.getFieldType().equals(SupportedFieldType.EXPLICIT_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.BROADLEAF_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.EMPTY_ENUMERATION)
Assert.assertEquals(31,resultAll)
!cls.isInterface() && !Modifier.isAbstract(cls.getModifiers()) && !cls.isEnum()&& !cls.getSimpleName().isEmpty()
modCount
result.setUseBufferedWriter(true)
Assert.assertEquals(101200L,ret.getFee())
TelephonyManager.getDefault().getCurrentPhoneType()
criteria.andIsNull("category")
assertEquals(response.getStatusCode(),200)
_freemarkerEngineConfiguration.resourceModificationCheck()
Thread.sleep(1000)
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
data.needsTransformation() || exifRotation != 0
cs[c].set(r,(int)(rng.nextDouble() * _createFrame.factors))
Exception throwable
entry.getCreateStore()
source=event
proxyRequest.getRegion()
LoggerFactory.getLogger(ProcessUtils.class).error("Fail to kill " + process,e)
Channel channelObj=(Channel)channelSubscriptions.getItem(channel); 
new ShardPath(false,path,path,shardId)
mBackdrop.animate().alpha(0.002f)
TcpDiscoveryNode node=ring.node(nodeId); 
new Info("std::complex<float>","float _Complex","float _Imaginary","float complex","float imaginary")
selenium.isElementPresent("link=Control Panel")
!mShowLockscreenNotifications
selector.select(10)
((String)toRender).toLowerCase(Locale.US)
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString(),funType.toString())
mObsoleteAgents.remove(info)
SyncEngine.scheduleSyncAccountTasks(syncAccount.getSyncAccountId())
ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties")
pId + BASE_FILE_NUMBER
verifyNothing(decoder,text("$PHO0,6091,233606.000,A,0902.9855,N,06944.3654,W,0.0,43.8,141112,,,A/00010,00000/0/224000//"))
PUBLIC_STATUS_BAR_VISIBILITY_MASK
child.resetRtlProperties()
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
CollectionUtils.filter(filteredFeaturedProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((FeaturedProduct)arg).getProduct()).getArchived();   } } )
Trans != NO_TRANSPOSE
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
Log.e(TAG,"Stats: Failed to get summary",error)
clazz.getDeclaredField("commandProcessor")
repositoryImpl.setTypeSettings(getTypeSettings())
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]),null)
auxString2.lastIndexOf(",")
loaded.getLoaded().getDeclaredConstructor()
thrown.expect(UserCodeException.class)
WRITE_SIZE / 8
selenium.isElementPresent("link=Control Panel")
new GroupTest(false)
dpToPx(64f)
selenium.isElementPresent("link=Control Panel")
type.getName()
projectTemplatesArgs.getName()
myProgramParameters.getComponent().setDialogCaption(myProgramParameters.getRawText())
requireContext()
c.getLiquid() == null || c.getLiquid().amount == 0
longVal(doc)
Boolean.parseBoolean(getOptional("kylin.query.disable-cube-noagg-sql","false"))
mAnswer.setBackground(null)
selenium.isElementPresent("link=Control Panel")
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
deadline < now && deadline != 0
subscriber.next(String.valueOf(i))
PARTIAL_ORDERBOOK_SIZE=200L
FMLLog.log(mod.getModId(),Level.FINE,"Mod Logging channel %s configured at %s level.",mod.getModId(),level == null ? "default" : level)
String message
mpi > -135 || !leftSide
template.setDefaultReceiveQueue(this.queue.getName())
LOGD=false
LOGGER.fine("Packed texture. Reading directly from the blend file!")
N > 1
dlFileShortcut.getFileShortcutId()
button.getText()
Thread.sleep(1000)
SAMPLE_RATE_HZ_MAX=96000
intervalFraction * (nextValue - prevValue)
rs.getMetaData()
targetSdkVersion > N_MR1
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
structuralLock.isHeldByCurrentThread()
name.equals("Devices") || name.equals("UUIDs")
/**   * Pops a constructor call from the enclosing constructor call stack.  * @return the popped call  */ public ConstructorCallExpression popEnclosingConstructorCall(){   return enclosingConstructorCalls.removeFirst(); } 
highlightingItemStack.getItem()
edge.setDirection(edgeDefault)
activityNdx <= topActivityNdx
methods.put(name,closure)
DDMStructureLocalServiceUtil.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
amp*=0.0
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
System.currentTimeMillis() / 1000L
(byte)0xe2
assertEquals(conf,(Configuration)serializeDeserialize(conf))
id=10856
lineCount == 5
StringUtil.join(modulesWithKtFiles,new Function<Module,String>(){   @Override public String fun(  Module module){     return module.getName();   } } ,", ")
intent.resolveType(getContentResolver())
i <= getATN().maxTokenType
level < 96 && status != BatteryManager.BATTERY_STATUS_UNKNOWN
child.getMeasuredWidth()
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new JMenuItem(dockToTrayText)
VfsUtil.isAncestor(parent,child,false)
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN,UNSET)
selenium.isElementPresent("link=Control Panel")
input.getName().toLowerCase().startsWith(partialName.toLowerCase())
IndexReader.open(benchmark.getRunData().getDirectory())
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
c.getLiquid() == null || c.getLiquid().amount == 0
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,false)
m.setContent(InputStream.class,is)
S
null == batch || batch.isEmpty()
EditorHelper.normalizeOffset(editor,res,true)
is(2)
field.setRequired(true)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
return mAppearingDelay; 
AssetTagFinderUtil.countByG_N(_scopeGroup.getParentGroupId(),assetTagName)
randomIntAbs(VALID_CHARS.length)
DLFileEntryTypeFinderUtil.filterCountByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
testClass.getSimpleName()
CoreMatchers.anyOf(is(NestedStaticTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType" + ".net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"))
dynamicType.getLoaded().getDeclaredConstructor()
si != null && si.username != null && si.username.length() > 0
checkCall(receiver)
selenium.isElementPresent("link=Control Panel")
GraphAnswer<Id>
mService.disableNetwork(netId,mContext.getOpPackageName())
new SVNReporter(info,info.getAnchor().getFile(info.getTargetName()),false,true,SVNDepth.INFINITY,false,false,SVNDebugLog.getDefaultLog())
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,true,false,factory)
out.writeOptionalUTF(type)
mWM.isKeyguardLocked()
mBiometricUnlock.stop()
getDefaultCountry()
initialCapacity > 1 << 30
ImmutableSettings.builder().put("index.number_of_replicas",0).put("index.number_of_shards",1).put("index.mapper.dynamic",false).put("index.analysis.analyzer.sortable.type","custom").put("index.analysis.analyzer.sortable.tokenizer","keyword").putArray("index.analysis.analyzer.sortable.filter","trim","lowercase")
Collections.singletonList(entry)
ENABLE_COPY_OPTIMIZATIONS=true
new RuntimeDroolsException(this.getEvalExpression() + " : " + e,e)
ch.writeAndFlush(new LogEvent(null,-1,file.getAbsolutePath(),line))
animateHeaderDelayed()
super.mySetupMutualAuthServerIsValidClientException(cause)
message.getMessageId().setEntryLocator(id)
meta.getColumnLabel(i)
ctxLogger.info("Unsupported field type: {} for field: {}",dataType,fieldName)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
list.removeFirst()
stdErr.println(ansi.asErrorText(message))
ref.getAssociatedEntity()
{abiOverride}
new ServerPartition(partitionKeyNew,RowType.T_DOUBLE_DENSE,0.0)
log.debug("Error extracting parameters meta data",e)
CompilerTestUtil.disableExternalCompiler(myProject)
final String message
123456789 * 2
dynamicType.getDeclaredConstructor()
LinkedHashMap<String,Operator<? extends Serializable>>
anyInt()
type.getDeclaredConstructor()
MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)
historyItem.getArticleTitle()
out.getVersion().before(Version.V_7_0_0_alpha1)
Double.valueOf(args[1])
app.getSettings().SHOW_NEARBY_FAVORITES
startActivityAsUser(intent,UserHandle.CURRENT)
collectors.size() > 0
mp.getResolvedValue()
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Throwable exception
isDirect=true
targetClass != null && field != null
new WebDriverWait(driver,30)
scorecard.getUseReasonCodes()
ImmutableSet.of("key","vertex","edge","element","property","label")
iconsByFilename_.put(filespec.toLowerCase(),icon)
new WorldDataHolder(worldNameLowered)
assertEquals(303,t.request().get().getStatus())
defaultDndAccess != null
TreeUtil.insertNode(node,parent,getTreeModel(),getNodeComparator())
myProblemElements.isEmpty()
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
new IndexWriter(mDirectory,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope)
prefix.add(tmp.substring(0,tmp.length() - 1))
checkCall(receiver)
!project.isDisposed() && LookupManager.getInstance(project).getActiveLookup() != null
E edge
getBeginNode() == ((InvokeWithExceptionNode)predecessor).exceptionEdge()
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
krakenDepth.getBids()
readWifiSleepPolicy()
new KotlinStructureViewModel(file,editor)
revWalk.close()
LOG.warn("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
library.getName()
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
4 * sum / common / (common - 1)
resp.getAssertions()
srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
realm.checkIfValid()
!((IdentifierTree)var).getName().contentEquals(JUNIT_PARAMS_VALUE)
this.getClass().getName()
xml.halfOpenElement(getElementName())
mDisplay.getRealMetrics(mDisplayMetrics)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
new OwnCloudVersion(0x040004)
Object requestCacheKey
closeForbidden(ok) || getChosenElements().isEmpty()
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,true,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
lastPos > mBoundPos
new AutoValue_ModuleFiles(chunks,jsFiles,cssFiles)
itemView.getScaleY()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).descriptionAndTooltip(message)
doTest()
mContext.checkCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
selenium.isElementPresent("link=Control Panel")
Double.valueOf(data[metadata.indexOf(name)])
new V(28,new BooleanSetting(true))
_model == null || _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
mService.setAppPolicy(UID_A,POLICY_NONE)
c > ic
recipient.toShortString()
seq.length() < width || isMarked
logger.debug("Apollo bootstrap config is enabled for context {}",context)
javaVersion < 8
Files.newOutputStream(self)
hideMenu()
DEFAULT_VERIFY_ENABLE=true
measureRun(0,0,offset,mLen,false,fmi)
mv.visitInsn(DUP)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
HEIGHT=626
stack == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION
StringBuilder line=new StringBuilder(); 
Boolean.parseBoolean(attrValue)
selenium.isElementPresent("link=Control Panel")
(getSource().x() + getTarget().x()) / 3f
for (IMethodInterceptor methodInterceptor : m_methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
Long.parseLong(nfcid2,16)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AV_INPUT_FUNCTION,false)
selenium.click("//li[4]/span/a/span")
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
jvmOptions.jvmArgs(DEFAULT_JVM_9_ARGS)
mWm.addAppToken(0,null,0,0,0,false,false)
log.info("caught exception",e)
Map<String,String>
maxSize < (used / total)
equalTo(9)
last.getContext()
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
DirectoryReader r=IndexReader.open(dir); 
parsed && name.length() > 0
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
parsedResult.getType()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Trans != NO_TRANSPOSE
runtimeContextFactory.create(environment,openShiftEnvironment,id,this)
ap.getSsidStr()
public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
new Settings(getContext().getFilesDir(),new Object())
15 * 60 * 1000
_ginfo != null && _ginfo._gradient != null
hasFocus() && showClearButton && isEnabled()
sStatsd.informDeviceShutdown(true)
conf.getRestBaseURL()
!sDisplayAnswer || !getConfigForCurrentCard().has("replayq") || getConfigForCurrentCard().getBoolean("replayq")
scheduleRemoveStartingWindowLocked(wtoken)
LOGGER.warn("Could not register FileUpdateMonitor",ex)
"Surface(native-token=" + mSurfaceControl + ")"
LOGGER.warn("Could not copy BibTex key",ex)
mForceStatusBarFromKeyguard=true
fb.limit()
mHeadsUpNotificationView.releaseAndClose()
webSocketConnection.getRemote().sendStringByFuture(s)
inputBuffer.available() > 0 || inputBuffer.nbRead() > 0
new TreeModelBuilder.GenericNodeData(filePath,fileStatus,i)
mMccStr == null
colors[1]
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
cursor.getChildAt(childIndex)
StringEscapeUtils.escapeXml10(atts.getValue(i))
actionButton.setRolloverIcon(new ImageIcon(ca.getRolloverIcon()).getImage())
JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
NullPointerException e
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
matchAxisFilter != 0 || wrapAxisFilter != 0
mMime.toLowerCase().startsWith("video/") || mMime.equalsIgnoreCase(MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC)
LOGGER.fine(e.toString())
@Override public VariableExpression visitBuiltInType(BuiltInTypeContext ctx){   String text;   if (asBoolean(ctx.VOID())) {     text=ctx.VOID().getText();   }  else   if (asBoolean(ctx.BuiltInPrimitiveType())) {     text=ctx.BuiltInPrimitiveType().getText();   }  else {     throw createParsingFailedException("Unsupported built-in type: " + ctx,ctx);   }   return configureAST(new ClassExpression(ClassHelper.make(text)),ctx); } 
TypeEvalContext.slow()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
type.copyFrom(other.getType())
mAccessibilityController.isAccessibilityEnabled()
LLVMArgNodeGen.create(2)
AbstractBottomUpTraversal<TargetNode<?>,RuntimeException>
TABLE_FINISH
list.size() > 0
account != null
ScanResult.is5GHz(frequency)
uncompressedProto.length < 2500000
mIsMessageReady
mTouchMode == TOUCH_INIT_MODE && (canZoomIn() || canZoomOut())
users.size() > 50
settings.setTextSize(WebSettings.TextSize.SMALLEST)
addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,false)
myFindModel.isRegularExpressions()
ImmutableSet.Builder<ImplementationMethodDescriptor>
fragmentCollectionPersistence.findByGroupId(groupId)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
storedOverlayInfos.valueAt(i)
insets.left != 0
selenium.isElementPresent("link=Control Panel")
!config.isAutoRead()
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static CharSequence get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
XMLHandler.closeTag(XML_DATA_TAG)
System.getenv(KYLIN_HOME)
target.getDestinationLinkAddress()
justBootedUp
logger.fine(String.format("connect attempt timed out after %d",timeout))
!match && compareRecover
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
lastReturned >= streamSessions.size() - 1
statusMessage != null && statusMessage.length() != 0
return mIdleTimeMillis; 
b.getMessage()
mView.postOnAnimation(mAnimationStarter)
Log.w(mTag,"Adjusting remote volume without a controller!")
mp.getResolvedValue()
Thread.sleep(1000)
executableFlow.getStatus()
Environment.getOemDirectory()
mViewModel.getNewsDataSource()
ApplicationManager.getApplication().isUnitTestMode() || myPopup.isDisposed()
RegisterRules.class
index >= 0
getEffectiveHstsEnforced()
type.getDeclaredConstructor()
FLAG_USE_MAGNIFIER=true
entityMetadata.getVersionProperty()
isMarked(node)
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
Clock.setTime(1980,Calendar.DECEMBER,10,17,10,15)
intent.resolveType(getContentResolver())
new Paint()
Exception e
context.registerSubsystem(SUBSYSTEM_NAME,1,1)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Throwable e
10L * countStillActiveThreads()
stream.getProperty(NettyServerStream.class)
scheme.equals("tel") || scheme.equals("sip")
resource.terminate(input.getId(),extractorId)
toolchainBuilder.addUnfilteredCxxFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
AWAKE_INTERVAL_DEFAULT_MS=10000
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,true,false,factory)
Exception ex
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis)
ImplementationMethodDescriptor methodDescriptor
super.getRealtimeSegmentFlushSize(useLlc) * 100
dest.writeInt(mSubId)
mQsDensityContainer.getX()
_typeSettingsProperties.toSortedString()
new GroupDialog(frame,oldGroup)
synchronized (frontendHandler) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
selenium.isElementPresent("link=Control Panel")
xAppInfo.getIsSystem()
PersistenceManagerImpl.class
mListener.setConnectionId(1)
focusManager.requestFocus(new MyFocusCommand(),false)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
6 * width * height
getClientSSLContext()
data.eachX=4
dirs[i].isDirectory()
updateSubtreeNow(parentNode)
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
new IndexWriter(dir,new KeywordAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
assertTrue(message.getPayload() instanceof Collection<?>)
methodCall.accepts(eMethodCall,context)
lock.isHeldByCurrentThread()
this.maximumSymmetricKeyLength=128
deadline < now && deadline != 0
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
TelephonyManager.getDefault().getCurrentPhoneType()
n + 1d
events.add(0,event)
type.getDeclaredConstructor()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
List<String>
Extensions.getExtensions(FileBreadcrumbsCollector.EP_NAME,myProject)
Optional.ofNullable(certificatesFile)
selenium.isElementPresent("link=Control Panel")
contact.getDefaultContact().getPresenceStatus().getStatus() >= PresenceStatus.ONLINE_THRESHOLD
mContainerView.getHeight()
selenium.isElementPresent("link=Control Panel")
antClassLoaderClass.isInstance(loader) || loader.getClass().getName().equals("org.apache.tools.ant.AntClassLoader") || loader.getClass().getName().equals("org.apache.tools.ant.loader.AntClassLoader2")
logger.error("an error")
typeSettingsProperties.toString()
USE_DISPLAY_LIST_PROPERTIES=false
httpclient.execute(httppost,botOptions.getHttpContext())
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id,background,foreground)
addr.getHostAddress()
conn.setTargetDecoration(srcDec)
Throwable e
new TextSelection(queryStartOffset + pos.position,0)
LOGGING=false
primTarget && !ClassHelper.boolean_TYPE.equals(targetType) && !primTop&& ClassHelper.getWrapper(targetType).equals(top)
Map<Jid,Drawable>
batch.getSample().getRequiredBatchMemorySize() * 4
hour <= 23
sashSize.y > 0 && foldersSize.y > sashSize.y / 2
expandedItemsList.valueAt(i)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
new RuntimeException(e1)
mUiHandler.postDelayed(pae,timeout)
appearance.getInt(attr,0)
delaySoFar >= mReEnableDelayMillis
e.toString()
Iterable<T>
T[]
JDBCUtils.safeGetLong(dbResult,"id")
!byteBuf.readable()
selenium.isElementPresent("link=Control Panel")
mService.getProfiles(UserHandle.myUserId(),true)
Assert.assertTrue(semaphore.acquire(3,TimeUnit.SECONDS))
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
SystemProperties.getInt("ro.cdma.timetoradiorestart",60000)
cannedReplies != null && cannedReplies.length > 0
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY,String.class)
log.debug(msg,t)
mccMncs != null
newFileAnnotation.setRevisions(revisions)
new ModelNode(40)
VERSION=42
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
Executor.class
BackupManagerServiceInterface svc=mService; 
action != KeyEvent.ACTION_UP
GL20.glUniform4fv(location,v)
new IncrementalIndexSegment(index,null)
elements == null || elements.length == 0
gtype < TYPES.length && gtype >= 0
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,158}
source.getAddress() == null || source.getAddress().length() == 0
modIcon.getWidth()
file.getFile()
rematchAllNetworksAndRequests(networkAgent,oldScore)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
OK(1)
apnContext.getWaitingApns()
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
LanguageUtil.isAvailableLocale(languageId)
exchFut.discoveryEvent().eventNode()
assetUri.getAssetName().toLowerCase()
new ConstructingObjectParser<>("client_security_authenticate_response",true,a -> new AuthenticateResponse(new User((String)a[0],((List<String>)a[1]),(Map<String,Object>)a[2],(String)a[3],(String)a[4]),(Boolean)a[5],(RealmInfo)a[6],(RealmInfo)a[7]))
mSecondView.setVisibility(View.GONE)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
i < 200
info.crashInfo.stackTrace.length() > 30000
loaded.getLoaded().getDeclaredConstructor()
!MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity,src,amount))
userVector.get(index) == 0.0
arguments[1]
col2d.addiColumnVector(epsilon1d)
onCreateView(context,appWidgetId,appWidget)
findPackage(PACKAGE_PIP,false)
GridSubsetFactory.createGridSubSet(testGridSet,new BoundingBox(-180,0,0,90),0,testGridSet.getGridLevels().length - 1)
equalsToSchemaName(tag,"include") || (equalsToSchemaName(tag,"import") && rootTag.getNamespaceByPrefix(XmlUtil.findPrefixByQualifiedName(name)).equals(tag.getAttributeValue("namespace")))
disable2ForUser(what,token,pkg,mCurrentUserId)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
meta.getColumnLabel(i)
possibleCenters.elementAt(i)
public class GraphQLEnumType implements GraphQLType, GraphQLInputType, GraphQLOutputType {   String name;   private Coercing coercing;   public String getName(){     return name;   }   public void setName(  String name){     this.name=name;   }   public Coercing getCoercing(){     return coercing;   }   public void setCoercing(  Coercing coercing){     this.coercing=coercing;   } } 
CommandLineUtils.createDatabaseObject(cl,referenceUrl,referenceUsername,referencePassword,referenceDriver,referenceDefaultSchemaName,null,null)
input.getDeltaMs()
tagService.getTagsAsString(task.getId(),true)
public <A>SubType from(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).from((Expr<?>)entity);   return self; } 
MainApp.getAccountType(mContext)
mFile.getStoragePath()
arguments == null || class_gd == null
child.getMeasuredWidth()
this.thrown.expectMessage("File must exist")
selenium.isElementPresent("link=Control Panel")
config.getMaxEntriesLocalHeap()
importedFolder.getModel()
redefined.getDeclaredConstructor()
(byte)0xe2
new ObjectMapper().readerFor(Map.class)
checkCall(receiver)
props.getLong("session.time.to.live",SESSION_TIME_TO_LIVE)
Base.getContentFile("modes/java")
types == null || types.length == 0
i < size
BackupManagerServiceInterface svc=mService; 
binary.getDisplayName()
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
serverId >= 0
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,10)
mActiveAgents.remove(info)
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",15)
blockId == null || blockId >= Block.field_71973_m.length
prefs.getBoolean("show_system",false)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
blocks.size() > newChildIndex - 1
stmt.setDate(1,date)
/**   */ public class S3SnapshotRestoreOverHttpTest extends AbstractS3SnapshotRestoreTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","http");     return settings.build();   } } 
setInputMethodEnabledLocked(info.getId(),true)
trainSamplesPerIteration(-2,2)
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
success=false
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
(Compound)locationStrategy
o instanceof InternalAttribute
mSlideableView != null && mSlideableView != child
repositoryImpl.setTypeSettings(getTypeSettings())
ReflectUtil.isTypeOf(parameterType,methodParameters[i].getType())
SyntheticLibrary.newImmutableLibrary(Collections.singleton(root),Collections.emptySet(),Collections.emptySet(),excludePattern)
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-websocket-")
intervalFraction * (nextValue - prevValue)
starting != null && starting.state != ActivityState.STOPPED
putBytes(v)
_connectors != null && mex.size() == 0
four.setAxisIndex(LEAF)
addView(mTitleLayout)
address.getHost()
map.lock(key,1,TimeUnit.SECONDS)
Thread.sleep(1000)
!m.containsNonNullValue(TagMetadata.TASK_UUID) || m.getValue(TagMetadata.TASK_UUID) == 0
RuntimeException e
targetState == STATE_EXPANDED && interpolatorAnimator != null
timeout >= 0
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
LOG.warn("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
graphHeight / 2
ImmutableList<ManyValues>
Long divisor
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
pId + BASE_FILE_NUMBER
DEBUG=true
getTestVector().getNumNonZeroElements()
args[1]
mUnreachedBarPaint.setColor(mUnreachedBarColor)
BaseComponent.toLegacyText(message)
public class Arial extends BasicFontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
frontendHandler.wait()
_typeSettingsProperties.toString()
Optional.fromNullable(resourceManagement.getStats())
POSITIVE_X(0)
this.file.maxContentLength >= 0
telephony.isRadioOn(getOpPackageName())
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
mSurfaceView != null && mSurfaceView.getHolder() != null
selenium.isElementPresent("link=Control Panel")
DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,JavaScopes.RUNTIME)
BrowserApp.getContext()
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
notifier.isIgnoreExchangeSendingEvents()
@NonNull Uri uri
new RemoveSubscriptionCmd(destination,channelId)
i=0
String message
new Instant(10L)
prev.getNextProp()
delayMs <= 0
entry.getKey().contains("defaultProduct.") || entry.getKey().contains("product.")
new InputStreamReader(urlConnection.getInputStream(),StandardCharsets.UTF_8)
@NotNull protected abstract CommitColumnClass getCommitColumnCell(int index,@Nullable VcsShortCommitDetails details); 
GitLocalBranch currentBranch=repository.getCurrentBranch(); 
jvmOptions.jvmArgs(DEFAULT_JVM_9_ARGS)
Long.parseLong(name)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
log.info("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
get(nom)
this.messageService.monoPreAuthorizeBeanFindById(1L).subscriberContext(withUser)
selenium.click("//li[4]/span/a/span")
Math.max(leftLen,rightLen)
mAccessibilityController.isAccessibilityEnabled()
_constructor.newInstance(0,0,0,StringPool.BLANK,_IMAGE_URL,_IMAGE_URL)
DEBUG_RC=false
LOG.warn("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
Boolean.parseBoolean(attrValue)
N node
invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2015,10,1),new LocalDate(2016,10,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")),new ExpectedInvoiceItemCheck(new LocalDate(2015,9,1),new LocalDate(2015,10,1),InvoiceItemType.USAGE,BigDecimal.ZERO))
selenium.isElementPresent("link=Control Panel")
/**   * Enhances a public non-final class. Source class must have a public or protected no-args constructor. Code is generated for protected and public non-final methods, and package methods if the source class is not in a the java.* hierarchy.  * @param cls class to extend, uses Object.class if null  * @param interfaces interfaces to implement, can be null or empty  * @param ih interceptor used to handle implemented methods  * @param loader ClassLoader for enhanced class, uses "current" if null  * @param filter a filter to prevent certain methods from being intercepted, may be null to intercept all possible methods  * @return an instance of the enhanced class. Will extend the source class and implement the giveninterfaces, plus the CGLIB Factory interface.  * @see Factory  */ public static Factory enhance(Class cls,Class[] interfaces,Callbacks callbacks,ClassLoader loader,CallbackFilter filter){   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
selenium.isElementPresent("link=Control Panel")
serialVersionUID=1743486889
new RuntimeException(e)
TransitiveInfoCollectionApi.class
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
file.toLowerCase(Locale.ENGLISH)
Math.round(value * 100) / 100d
LOG.info(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
assertThat(controller.actions()).hasSize(6)
meta.getColumnLabel(i)
node.getStarNode()
factory.getEmbeddedServletContainer()
last != null && (System.currentTimeMillis() - last.getTime()) <= maximumAge
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
rcvdBytesCnt.longValue()
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,true)
Float.parseFloat(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
POOL_LIMIT=100
monitor.isCanceled() || curPropertySource == null
new PopupWindow(mContext,null,com.android.internal.R.attr.actionModePopupWindowStyle)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
downloadFragment == null || downloadFragment.getDownloadActivity() == null
attributes.getAllFlags()
dlFileShortcut.getFileShortcutId()
c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
new ObjectMapper().readerFor(Map.class)
wZipFilename.getText()
mService.queryDisplayStatus(getCallbackWrapper(callback))
NUM_PUBLISHERS=2
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
Math.min(titleRight,subtitleRight)
assertEquals(Service.State.FAILED,service.state())
rhs.getScore()
LensPositionSelectors.back()
attr("heuristic_label_expansion",BOOLEAN).value(false)
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
longSize >= 640
t.getType() == Term.Type.STRING && !t.isToken
/**   * Returns an  {@code AfterEach} {@code Trigger} with the given subtriggers.  */ @SafeVarargs public static AfterEach inOrder(Trigger... triggers){   return new AfterEach(Arrays.<Trigger>asList(triggers)); } 
initialCapacity > 1 << 30
request == null
layer.initializer().numParams(nnc)
bottomLeft.addPlaceholder(DatabaseBrowserView.VIEW_ID)
CommonUtils.sleepMs(200)
new PsiArrayType(mappedComponent,type.getAnnotations())
new URLClassLoader(new DefaultClassPath(runSpec.getClasspath()).getAsURLArray(),null)
execute("refresh table t4")
new IllegalStateException("Advertising can't be both connectable and anonymous")
result=90
YamahaReceiverHandlerFactory.class
!mIsOnInnerCircle && hour != 0
!webSocket.resource().getAtmosphereResourceEvent().isSuspended()
UnsafeUtils.get8(_mem,8)
mPlayer.getCurrentPosition() * 1000L
!mRenderNode.isPivotExplicitlySet()
verifyAttributes(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
public T setJavaHome(File javaHome){   operationParamsBuilder.setJavaHome(javaHome);   return getThis(); } 
request.getRemoteAddr()
fla != null && getFragmentLayout() != LAYOUT_SINGLE
logger.warn("Table spec retrieval failed, couldn't find table spec: " + modelName)
bookmarksFolderFinder.findF_E_ByG_F(groupId,folderId,queryDefinition)
featureType.getQualifiedName()
SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
mDarkIntensity != DARK_INTENSITY_NOT_SET
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,46.26952683659,DeepLearningParameters.Activation.Rectifier)
JavascriptCompiler.compile("bar()",mixedFunctions,thisLoader)
new SystemAudioActionFromTv(tv(),mAvrAddress,true,null)
pageSize > pageCache.pageSize() || pageSize < 0
Exception e
times + BASE_FILE_NUMBER
logger.trace(evt.getReason())
UserHandle.myUserId()
output.isEmpty()
myVfsEventNesting != 0
Key.class.getName()
type.getDeclaredConstructor()
case OPAQUE: 
mNwService.getInterfaceConfig(mTetherInterfaceName)
selenium.isElementPresent("link=Control Panel")
getConnectTimeout()
logger.trace("using stable discover node UUIDs with seed: [{}]",seed)
assertThat(client).replicationController("doesNotExist").hasName("fabric8-console-controller")
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).subscriberContext(context -> context.put("foo","bar"))
JsonUtf8Writer.string(buffer,strings[i])
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
peopleListFromJSON(jsonArray,localTableBlogId,!isEmailFollower,isEmailFollower,false)
selenium.isElementPresent("link=Control Panel")
ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? "main" : consoleSlot)
Integer.parseInt(rightStr)
Lists.newArrayList(header(message,failed),status(status,failed),eol())
match.getJSONArray("types")
this(type,1); 
new StringBuilder(638)
apnContext.getWaitingApns()
getTestRootDisposable()
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
hasColumn(tableName,columnName)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
object=bean
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
getConnectTimeout()
i < 300000
!(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
DLStoreUtil.addFile(portletDataContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,fileName,serviceContext,bytes)
prjFile.getParent()
Optional.fromNullable(dynamicProperties)
mBluetoothHeadset.disconnectAudio()
logger.debug("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
Long.parseLong(deadline)
searchContext & UsageSearchContext.IN_PLAIN_TEXT
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.get()
mode.contains("creat") || mode.equalsIgnoreCase("1") || mode.equalsIgnoreCase("c")
MOD_NUM=10000
Numeric.toHexStringWithPrefixSafe(filterId)
bo.write(0x08)
UserHandle.myUserId()
d.setDefaultEncoding(servletContainer.getDefaultEncoding())
SystemKeyspace.removeEndpoint(DatabaseDescriptor.getReplaceAddress())
DB_VERSION=2
ts.getJobId() == jobId
LOGGER.isTraceEnabled()
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,about,ABOUT)
keymapManager == null || actionId == null
assertEquals(20,semaphore.availablePermits())
Map<String,String>
drawable.getIntrinsicHeight()
attributes.getAllFlags()
winAnimator.prepareSurfaceLocked(recoveringMemory)
LOG.debug("Gradle execution error",e)
SmartEnterProcessors.INSTANCE.allForLanguage(language)
!"".equals(lib)
selenium.isElementPresent("link=Site Name")
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
routes.UsersController.editUserForm(username)
resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)
new Entry(i,(float)val)
case 3: 
TextUtils.isEmpty(realPath)
props.load(is)
SAMPLE_RATE_HZ_MAX=96000
selenium.isElementPresent("link=Control Panel")
Integer.valueOf(args.get(2))
TwitterRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
LocalizedTextUtil.clearDefaultResourceBundles()
blendColor(alphaFiller | dstPixels[x],srcPixels[x],mode)
dataType.toString()
"frame".equals(provides) || "sasl-frame".equals(provides)
DEBUG=false
mUserManager.isUserUnlocked(userHandle)
final JavaCoverageSuite coverageSuite=(JavaCoverageSuite)CoverageDataManager.getInstance(myProject).getCurrentSuite(); 
inputCoder instanceof KvCoder
Context.getAdministrationService().saveGlobalProperty(propToUpdate)
KotlinTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
!mRequestFilterKeyEvents || (mServiceInterface == null)
focusedStack == null || focusedStack.getTaskCount() == 0
SamplingProfiler.newThreadGroupThreadSet(group)
future.isDone()
GraphicsUtil.setupAAPainting(gpt)
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0","00:12:8A")
startActivity(intent)
type.getDeclaredConstructor()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
LabeledComponent<JTextArea>
1
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
h - y
typeSettingsProperties.toString()
!mTFS.exists(turi)
BackupManagerServiceInterface svc=mService; 
Throwable e
t.isFreeformTask() || targetStackId == FREEFORM_WORKSPACE_STACK_ID
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
Throwable e
IndexReader.open(spellindex)
mQSPanel != null && mQSPanel.getHost() != null
exchange.setRequestHeader("Authorization",_basicAuth)
sDefaults.putBoolean(KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL,false)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
new Paint()
getStepIOMeta().getInfoStreams()
VtexApis.REPLIES_URL + topicId
new PyRemoteTracebackFilter(project,null,(RemoteProcessHandlerBase)processHandler)
MeasureSpec.makeMeasureSpec(mNotificationMaxHeight,MeasureSpec.AT_MOST)
Preferences.getBoolean(AstridPreferences.P_FIRST_LIST,true)
LOG.debug("Terminating gRPC server")
case IGNITE_HANDSHAKE: 
media != null && media.getMediaType() == MediaType.AUDIO
new LinkedHashMap()
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
getEffectiveHstsEnforced()
repositoryImpl.setClassNameId(getClassNameId())
curTime == 0 || totalTime / curTime == curOps
commState.putBoolean("sys",sys)
mono.switchIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")|| (lowerCaseLine.contains("fatal: repository") && lowerCaseLine.contains("not found"))
csFoldingEnabled.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
hasErrors.get() || delegates.size() > 1
!((AbstractDrawerItem)drawerItem).isExpanded()
getConfig().getBoolean(SPIDER_PARSE_SITEMAP_XML,true)
selenium.click("//li[4]/span/a/span")
V
1
new String(encoded,B2CConverter.ISO_8859_1)
flushStatements(true)
new IndexWriter(dir1,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
query.rules().toArray()
temporalType < TYPES.length && temporalType >= 0
new IllegalStateException("Legacy advertising can't include TX power level in header")
AndroidMessenger messenger
Thread.sleep(2500)
mGestureDetector != null && event.isTouchEvent()
new ConcurrentHashMap<String,BeanDefinition>(256)
Exception t
iterator.remove()
from > to
isRunning()
log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
"true".equalsIgnoreCase(mode)
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
getNullDialog()
assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
defaultFloat=0f
ImmutableSet.of("wsagent/http","exec-agent/http","terminal","theia")
getRequestMethod != null
hasRows(oldTableName)
out.writeBytes(mask)
InetAddress.getByName("127.0.0.1")
new AssertionError("expected }, got " + currentToken + " syntax:"+ syntax)
mUiHandler.removeCallbacks(pae)
getNodeForElement(element,false)
new FieldFrame(null,true,null)
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1000
Slog.w(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
params.getSimulatedPlatformVersion()
out.writeBytes(mask)
P params
new Info("wchar_t","WCHAR").cast().valueTypes("char","int")
VERBOSE=false
mAdapter.unregisterDataSetObserver(mObserver)
mock.expectedMinimumMessageCount(10)
delaySoFar >= mReEnableDelayMillis
PublisherPeek<T>
id.provider != null && id.provider.info != null
sendCommand(CLIENT,Keyword.SETNAME.raw,name)
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)
getDelegate().getDefaultCipherSuites()
MAX_DIMEN_FOR_ROUNDING=1920
new StringBuilder(245)
cr.session_timeout_ms != null && cr.session_timeout_ms != 0
adapter.getCustomArgumentResolvers()
bin_dir.findChild("python")
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
dynamicClassType.getDeclaredConstructor()
mListener.getConnectionId() != -1 && request.mConnectionID != null
List<String>
lookup.getControllerServiceByType(requestControllerService.getType())
FsDatasetImpl.LOG.warn("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
ImmutableList<Map<String,Object>>
BeanUtils.instantiateClass(this.executorType)
log.debug(throwable,"Query %s failed",queryId)
mEnabledPrintServices.size() == 0
parent instanceof AppWidgetHostView || parent == null
buildPages.getTypesWithoutHash()
toString(includePrivateKeys,null,includeTransactions,includeExtensions,chain)
"Using bind address: " + bindAddress
resourceServer.getId()
bind != null && bind.getExplicitTemporalType() != null
isAllowed()
new ArgumentTypePreparedStatementSetter(args,argTypes)
name == null || name.isEmpty()
Long2 v
FullScreenOverdrawActivity.class
mediaDriverBroadcastReceiver.receive(this,activeCorrelationId)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
writeDelaySeconds=10
inverseCopy.set(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
setValue(object,value.intValue())
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
StringUtils.isEmpty(name)
selenium.isElementPresent("link=Control Panel")
mGnssCallback != null
updateBreakResponseBtn()
onUserBlockedChanged(unblocked.getUid(),false)
LOGGER.warn("No access to path {}",input,e)
executorService.awaitTermination(1,TimeUnit.SECONDS)
mPathBitmap == null || mPathBitmap.getWidth() != mViewPortHandler.getChartWidth() || mPathBitmap.getHeight() != mViewPortHandler.getChartHeight()
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
new SpannedString(new CustomSpannable(first),true)
mOpenStreetMapView.dispatchDraw(canvas)
Arrays.equals(valSrcQueries,other.valSrcQueries)
assertOpenEventually(countDownLatch)
mode != null && !mode.isEmpty()
_getVersion()
Keyspace table=Keyspace.open(tableName); 
data == null || mData != data
getServiceForUserLocked(userId)
length == -1 || length > 4
new StackManager(new File(stackRoot),new File(commonServicesRoot),osFamily,false,metaInfoDao,actionMetadata,stackDao)
FlipComplexLayoutActivity.class
Gson.class
in.readStringNull(10)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
System.nanoTime()
logger.info("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
lineArgs[2]
minIdle < 0 || minIdle > maxPoolSize
CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)
assertEquals(expected,result.toString())
Stream.of("CYPHER 3.1","CYPHER 3.4")
ENTER_DOZE_HIDE_WALLPAPER_DELAY=4500
asList(DERBY,FIREBIRD)
/**   * How to handle a missing part. By default, if no part matches, the  {@link org.apache.cxf.jaxrs.provider.MultipartProvider} throws a  {@link javax.ws.rs.WebApplicationException}with status 400. If this option is set to <strong>false</strong>, the parameter is set to <strong>null</strong>.  */ boolean required() default true; 
DEBUG_ALL || true
FLog.e(TAG,"Failed inserting a file into the cache",ioe)
IntermediaryCaching.class
dest.writeInt(mSubId)
vb.getData() != null && vb.getUsage() != VertexBuffer.Usage.CpuOnly
"Content-Type".equalsIgnoreCase(name)
proxy.getHost()
workspace.runBuckBuild("-c","project.embedded_cell_buck_out_enabled=true","//main/...")
context.var("double",2)
new Intent(ACTION_FEED_LIST_UPDATE)
is(500)
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
mMediaPlayer.isPlaying()
type.getDeclaredConstructor()
public SynonymFilter create(TokenStream input){   return new SynonymFilter(input,synMap,ignoreCase); } 
logger.debugf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
ctx.setInputSourceFile(context,file)
event.getRawX()
mapActions.openOptionsMenuAsDrawer()
prePassivates != null
endBounds.height()
tradeService.getBittrexOpenOrders(null)
typeSettingsProperties.toString()
attribute.getDefinition().getMarshaller()
getHost()
log.warn(notJava6.getMessage() + " .. trying RI.")
new NTCredentials(user,getProxyPass(),LOCALHOST,PROXY_DOMAIN)
myFindModel.isRegularExpressions() || myFindModel.isInCommentsOnly() || myFindModel.isInStringLiteralsOnly()
handshakeFuture == null
new IllegalStateException("Encountered null records for input index " + i)
wsSessions == null
Integer.parseInt(bottomStr)
!isVideoScalingModeSupported(mode)
AnnotatedElementUtils.hasAnnotation(type,Validated.class)
stream.rstStream()
new NeuralNetConfiguration.Builder().list()
pieces.length <= tagColumn
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
targetDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
oldVersion != 3
log.error("Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!",new Throwable())
this.rep.getAttributes().remove(name)
method.varParam(mod,parameterClass.elementType(),parameterName)
currentTransform.getInputs()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
maxTryTime=100
displayList != null && displayList.isValid()
params.getSimulatedPlatformVersion()
callButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
b == null || b.length == 0
DEBUG && heightIn != height
LlapServlet.class
authenticationBytes != null && authenticationBytes.length > 0
action == MouseEvent.RELEASE
lookup.getControllerServiceByType(requestControllerService.getType())
format.getDescription()
strat.getLevelSize(0) > 1
converterRegistry.addConverter(new EnumToStringConverter((ConversionService)converterRegistry))
a.getFont(attr)
command instanceof Comparable
model.getStatus() == FileDownloadStatus.pending && model.getSoFar() <= 0
fis.close()
loadAnimator(fragment,transition,false,transitionStyle)
ref.getAssociatedEntity()
return _repositoryConfiguration; 
d("")
isPlaybackActive(false) || hasFlag(MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY)
request.mandatoryParamAsStrings("tags")
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,4)
dlFileEntry.getDataRepositoryId()
threadSafe=true
type.getDeclaredConstructor()
p.getUnknownSearchWordLength() >= 3
DEFAULT_ADDRESS_BBOX_RADIUS * 20
(data + increment) % 4
StringUtils.trimToEmpty(comparisonObjectSchema.getName())
selenium.isElementPresent("link=Control Panel")
getDialogTitle()
mService.isDeviceOemUnlocked()
Truffle.getRuntime().getCallerFrame()
ref.getAuthorIdent()
mime == null || mime.value().length == 0
AndroidInstrumentationInfo instrumentationProvider=instrumentation.get(AndroidInstrumentationInfo.PROVIDER); 
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","impersonation")
sw.toString().getBytes("utf-8")
IndexReader.open(dir)
isAllowed()
logger.debug("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
{11,7.0f}
Preferences.navigationVibrationEnabled(context)
id=54
Void result
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.class,Timestamps.MICRO)
connection.onIdleExpired()
@NonNull
waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)
new PriorityTieredBrokerSelectorStrategy(0,1)
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
varX("listener",vclClassNode)
"null".equals(value) || value == null
selenium.isElementPresent("link=Control Panel")
builder.appendRows("4dlu, pref")
sentBytesCnt.longValue()
ThirdEyeUtils.getTimestampTimeSpecFromDatasetConfig(datasetConfig)
getPreferences().getBoolean(SIGNAL_PREF,false)
Response.ok(null,MediaType.TEXT_PLAIN)
!mScreenOnEarly
Throwable e
aa.getAllFlags()
cls.getDeclaredMethods()
T extends Model
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
origin.realComponent().doubleValue() < other
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //thrift:fake","cpp_reflection_library = //thrift:fake","[project]","thrift_target_types_enabled = true")
new ArrayList<RowSorter.SortKey>(1)
jaxbbean.addConstructorArgValue(paramsbean.getBeanDefinition())
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
selenium.isElementPresent("link=Control Panel")
completion.onErrorResume(ex -> handler.handle(exchange,ex))
sreq.getRequestURI()
mMccStr == null
new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)
now == currentPage || dotCenterX == null
checkResultByText(null,"dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}")
mSelectResponse != null && mSelectResponse.length > 0
new CompositeException(t,e)
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER && child.isVisibleLw()
imageResOnLoading != 0
assertEquals(4,StringUtil.countMatches(drl,"import "))
drawable != null && mActualHeight > mClipTopAmount
p1.isTerminated()
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_UNICODE)
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
volume.getMtpReserveSpace() * 1024L * 1024L
DLFileEntry.class
contact.getWorldManifold()
new Parameter(new IdentifierImpl("_" + f.getIdentifier().getName()),f.getType(),true)
!debuggerSettings.equals(currentSettings) || Registry.is("debugger.mayBringFrameToFrontOnBreakpoint") != myFocusAppCheckBox.isSelected()
typeSettingsProperties.toString()
benchmark.expectAround("Throughput to scroll FILE_SOURCES",throughputPerSecond,120,0.08)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
instance.criterion.sql.replace("?",instance.criterion.entryValues[instance.selectedIndex])
session.sessions().createUserSession(adminRealm,admin,"user",null,"form",false,null,null)
this.route(request).switchIfEmpty(Mono.defer(() -> other.route(request)))
legacyValue.isDefined()
selenium.isElementPresent("link=Control Panel")
/**   * set the identifier of this item  * @param identifier  * @return  */ public Item withIdentifier(long identifier){   this.mIdentifier=identifier;   return (T)this; } 
context == null || context == EGL_NO_CONTEXT
event.world.spawnEntityInWorld(newEntity)
moveInputMethodWindowsIfNeededLocked(false) || displayed
private final Long id; 
vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager())
getLogger().debug("Building MavenProject instance: " + mavenProject)
adminMaxThreads / 2
width <= 0
"Segment initialized with too large address: " + offHeapAddress + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
checkCall(receiver)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
COUNT_DATABASE.put(key,newVal)
mValues[8]
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
displayList != null && displayList.isValid()
urlMap == null || TextUtils.isEmpty(JCUtils.getCurrentUrlFromMap(urlMap,currentUrlMapIndex))
HTREEMAP_DIR_SHIFT=7
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,700,0)
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
new ActivityMvpNonConfigurationInstances<>(presenter,nonMosbyConfigurationInstance)
dbManager.getGenesisBlockId()
graph.addOrUnique(new OSRLocalNode(i,proxy.stamp().unrestricted()))
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
dynamicType.getDeclaredConstructor()
logger.debug("NODE {}: Retry timout: Advancing",node.getNodeId())
destination.isQueue()
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
executeSimpleCommand(STLS_COMMAND)
valueFactory.bootstrapping(token)
ENABLE_KERNEL_UPDATES=true
from > to
file.isFile()
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
"mvn:" + swaggerUiMavenGroupAndArtifact + "/"
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_READ,evtOld,evtOld != null,evtOld,evtOld != null,subjId,transformClo.getClass().getName(),taskName,keepBinary)
v.startDrag(clip,thumb,false)
TokenSet.create(BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
List<Class<?>>
loaded.getLoaded().getDeclaredConstructor()
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,false,"cancelAllNotifications",pkg)
evaluate(123.5f,DataTypes.FLOAT)
intervalFraction * (nextValue - prevValue)
LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort())
String message
runner.run(1,true,false)
Glide.with(activity).load(url).submit(size.getWidth(),size.getHeight())
sm.getString("deltaManager.waitForSessionState",getName(),mbr,getStateTransferTimeout())
getService().animateCollapseNotifications()
builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)
allocator.getFlowController().prepareActionAllWrite(input,weights,weightGradView,biasGradView,delta,epsNext)
version == null || version.equals("")
mMenuDrawer.isMenuVisible()
id=10833
realm.checkIfValid()
accountHandle.getComponentName().flattenToString()
DiagnosticType.warning("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time",true)
logger.debug("InterruptedException during playing a notification sound")
DirectoryReader reader=writer.getReader(); 
logger.debug("Cannot play playlist ({})",e.getMessage())
DEBUG=false
public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } 
MAX_BATCH_SIZE=1000
!note.isLocked() && showThumbnails && note.getAttachmentsList().size() > 0
(long)y & 0xFFFFFFFFL
Slog.e(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
info.getType() & 0xf
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
List<Long>
mCurrIconRow != null && mCurrIconRow.isVisible()
XmppStringUtils.parseBareJid(user)
Thread.sleep(1000)
LOG.error("Failed to load schematics",e)
isSubDelimiter(c)
new EnterSelectionDialog(shell,schemaNames,"Select a partition schema","Select the partition schema to use:")
List<Long>
singletonObject == null && allowEarlyReference
totalNbSuggestions == MAX_NUMBER_SUGGESTIONS
new EmoteClue("Panic by the mausoleum in Morytania. Wave before you speak to me. Equip a mithril plate skirt, a maple longbow and no boots.",new WorldPoint(3504,3576,0),PANIC,WAVE,item(MITHRIL_PLATESKIRT),item(MAPLE_LONGBOW),emptySlot("No boots",BOOTS))
LOGGER.warn("Could not find DropTargetDropEvent class",e)
loaded.getLoaded().getDeclaredConstructor()
a.getDimension(attr,0)
r.ensureActivityConfigurationLocked(0,true)
PostgreTableBase.class
receiver != null && mjConnector.canConnect(receiver) && receiver.canConnect(mjConnector)
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,mHandler,new UserHandle(mUserId))
lockForRescale()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
startBounds.height()
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED)
LOGGER.warn("Could not open folder",ex)
case IGNITE: 
SafeUsagesExt2Kt.foo(a,1,"1","!")
o == null || o.equals(JSONObject.NULL)
ys.atd(row)
_connector.getResponse("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
pubKeyStore == null
case READ_UNCOMMITTED: 
StringBuilder sb=new StringBuilder(); 
mBouncer.show(false,false)
name.equals("not") || name.equals("!")
checkCall(receiver)
DEBUG=false
super.onAttachedToWindow()
new WebdavEntry(resp.getResponses()[0],getUri().getPath())
TreeSet<Object>
result.signum() < 0
msg.obj != mSmHandlerObj
c == Float.class || c == Float.TYPE
TelephonyManager.getDefault().getCurrentPhoneType()
channel.disconnect()
dest.writeInt(mSubId)
1 << 8
size * 1.8f
taskName.contains(":buildSrc:")
queueUpdate()
new SpannedString(first,true)
return true; 
enabled=true
new IllegalStateException(sm.getString("endpoint.jsse.noSslContext",sniHostName))
fragmentEntryPersistence.findByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
TreeMap<Long,Double>
maxSegmentSize > numHits
Thread.currentThread().interrupted()
new Paint()
this.actual=actual
toArrayHelper(array,0)
treeWalk.close()
Long.parseLong(attrValue)
Collection<GridDrStateTransferDescriptor>
ColorProperties.getColor("primaryControlShadow")
new IllegalStateException("Advertising can't be both connectable and scannable")
Optional.ofNullable(target)
Integer.toHexString(realQuality)
key == null
deltaY <= 0
editable=false
-markerHeight
WATCHDOG_TIMEOUT_MILLIS=2000
getTestName(true)
Response.ok(null,MediaType.TEXT_PLAIN)
WebUtils.toHttp(response).sendError(HttpServletResponse.SC_UNAUTHORIZED)
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
getImages.isSelected() && e.getStateChange() == ItemEvent.SELECTED
synchronized (mAuthorities) {   writeStatusLocked(); } 
data == null || data.isEmpty()
mGnssCallback != null
mFinishing && mSupportHardware && mHwCenterX != null
pos == -1 || pos >= end
entry.maximumAmount - entry.freeConnectionsCounter.get() + entry.connections.size() > entry.minimumAmount
telephony.iccTransmitApduBasicChannel(subId,getOpPackageName(),cla,instruction,p1,p2,p3,data)
new IndexWriter(mDirectory,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
e.toString()
readWifiSleepPolicy()
LOG.error("An exception was caught while attempting to handle an activity generated exception",e)
mActionBar != null && mActionBar.isOverflowReserved()
System.arraycopy(src,0,this.bytes,0,SIZE)
display.getRealMetrics(dm)
new SelectMetadataChange(input)
Integer.parseInt(attrValue)
Long.parseLong(attrValue)
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
cursor == null
getResponse("GET","/books/" + bookId,null)
ImmutableList.of("/bin/bash","-e","-c","python convert_to_katana.py AndroidManifest.xml > $OUT")
!isBottomRightVisible
clusterService.operationRouting().getShards(clusterService.state(),request.index(),request.type(),request.id(),request.routing(),request.preference())
KeyValueHolder<String,Processor>
UIUtils.getFontHeight(group) * 15
hasRows(oldTableName)
caches.valueAt(i)
ctx.isSwapOrOffheapEnabled()
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
viewDefinition.getName()
startActivity(in)
dist <= bestdist
mGnssCallback != null
_parms._distribution == Distribution.Family.bernoulli || _parms._distribution == Distribution.Family.modified_huber
line.length()
jGitConnection.executeRemoteCommand("ssh://host.xz/repo.git",transportCommand,null)
GoPsiImplUtil.findTypeFromTypeRef(methodType.getTypeReferenceExpression())
new GrammaticalRelation(Language.UniversalChinese,"nummod","numeric modifier",MODIFIER,"QP|NP|DP",tregexCompiler,"NP|QP < ( QP  =target << M $++ NN|NP|QP)")
response.getRawStatusCode()
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",true))
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
tfs.createFile(new TachyonURI("/root/testFile1"))
getKeyFromGrant(grantAlias)
mJobs.valueAt(i)
UNIT_FIELD.getPreferredName()
cursor == null
serialVersionUID=1L
x <= maxX
Results.forbidden()
m.getConstructorOrMethod()
parser.nextText()
getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC,"")
typeSettingsProperties.toString()
private final T view; 
XmppStringUtils.parseBareJid(user)
Long chatId
mAppToken.isVisible()
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
a.getDimension(attr,0)
mLayerType != LAYER_TYPE_NONE
executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
mock.expectedMinimumMessageCount(2)
selenium.isElementPresent("link=Control Panel")
BrowseCap.isChrome() || BrowseCap.isMacintoshDesktop()
assertEquals(400,counter.get())
aliases.size() > 1
resources.getDimensionPixelSize(R.dimen.close_handle_height)
loaded.getLoaded().getDeclaredConstructor()
r - scrollX
ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
new ModelNode().set(60000L)
rightTuple.setStagePrevious(last)
new IndexMetadata(column,row.getString(INDEX_NAME),type)
text.contains("Compilation completed successfully")
expectedMinimumCount == -1 && expectedCount <= 0
displayContent.getDockedStackVisibleForUserLocked()
new CallbackStub(this)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
bedtime - SystemClock.uptimeMillis()
selenium.isElementPresent("link=Control Panel")
mBluetoothService.notifyIncomingA2dpConnection(address,false)
"Using bind address: " + bindAddress
context.var("double",2)
fill || textureImage != null
T[]
onDetachedFromWindow()
GROUP_IDLE_TIME_S=25
SCRIM_BEHIND_ALPHA_KEYGUARD=0.45f
type.getDeclaredConstructor()
IOHelper.getCharsetName(exchange,useDefault)
F.asList(ctx.store(),ctx.events(),ctx.evicts(),ctx.queries(),ctx.continuousQueries(),ctx.dr(),ctx.offheap())
Schedulers.newThread()
performDexOpt(packageName,instructionSet,false)
ImmutableList<Map<String,Object>>
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
logger.warn("license [{}] - grace",license.uid())
initialCapacity > 1 << 30
resource.toURI()
Timber.e(e,"Error enabling compression")
mDisplayContent.mDividerControllerLocked.getWidth()
String.format("Could not find method %s(%s) on %s",name,Arrays.toString(paramTypes),origTarget)
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
logger.fine("Strip code")
Throwable e
initial=100
resourceTableStream.readFully(tableBytes,0,(int)alignedSize)
importedLayout.getGroup()
context.getMainLooper()
attributes.getAllFlags()
mQsDensityContainer.getX()
sep < 0 || sep > j
majorVersion != null && majorVersion.trim().length() > 0
(Long)card[15]
new InvalidPluginRequestException("Found more than one plugin for plugin id " + pluginId)
document != null && myOnTheFly
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
into.get(j)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED)
settings.setTextSize(WebSettings.TextSize.LARGEST)
TelephonyManager.getDefault().getCurrentPhoneType()
new StringBundler(6)
selenium.isElementPresent("link=Control Panel")
url.startsWith(completeUrl)
getWebElement(locator,"1")
TokenSet.create(TEXT,TAG_NAME,MARKDOWN_LINK,MARKDOWN_ESCAPED_CHAR,TEXT_OR_LINK)
edge.setDirection(type)
cacheConfig.isUseCache()
boosted - base <= config.boostThreshold()
title.length() > 17
ExprEval.ofLong(null)
volatileSet((int)i & mask,item)
SHUTDOWN_VIBRATE_MS > 0 && context != null
!mScreenOnEarly
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
!TruffleOptions.AOT
display.getRealMetrics(dm)
args[i].charAt(0) == '-' && args[i].matches("^-[a-zA-Z]+$")
sendAdminCommandLocked(deviceOwner,action,extras,null,true)
new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.LIMITED)
mService.disconnect(mContext.getOpPackageName())
position <= mSrcDragPos
platformJars.contains(name)
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED,UserHandle.USER_CURRENT)
sm.getString("introspection.classLoadFailed",className)
CoreProxy.sendToPlayers(createItemPacket(item,orientation),container.worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance)
FutureTask<?>
index=1
SCRIM_BEHIND_ALPHA_KEYGUARD=0.45f
ref_val.startsWith("HTTP error 403") || ref_val.startsWith("HTTP error 503")
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
result.getContentType().startsWith(PresContentClient.CONTENT_TYPE)
Math.min(desired,heightSize)
loaded.getLoaded().getDeclaredConstructor()
newStart.isEmpty()
GL20.glVertexAttribPointer(indx,size,type,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())
Assert.assertEquals("Recall outside target range",0.691,r,0.001)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new TextPaint(Paint.ANTI_ALIAS_FLAG)
createOldTestNet(n)
Throwable e
classes.getPath()
condition.signalAll()
actionButton.setRolloverIcon(new ImageIcon(ca.getRolloverIcon()).getImage())
mTouchProgressOffset=0.6f
pushNotificationsSender.reset()
new IllegalStateException("Built-in library initialization failed. " + "Please ensure you have kotlin-runtime.jar in the classpath: " + e,e)
swapTempFile.delete()
Integer.parseInt(bottomStr)
String.format("Field [%s] needs to be a primitive; found [%s]",fl,foi.getTypeName())
insertIndex >= 0
meta.getDatabaseMeta().getQuotedSchemaTableCombination(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTableName()))
directoryUrl.getParameter(Constants.GROUP_KEY,"")
mUserManagerHelper.getAllUsers()
mRejectTimes[i]
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
/**   * User: anna Date: 1/10/13  */ public class JavaFXUnresolvedFxIdReferenceInspectionTest extends AbstractJavaFXQuickFixTest {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxUnresolvedFxIdReferenceInspection());   }   public void testUnknownRef() throws Exception {     doTest("Controller");   }   private void doTest(  final String controllerName){     myFixture.configureByFiles(getTestName(true) + ".fxml",controllerName + ".java");     final IntentionAction singleIntention=myFixture.findSingleIntention(getHint("unknown"));     assertNotNull(singleIntention);     myFixture.launchAction(singleIntention);     myFixture.checkResultByFile(controllerName + ".java",controllerName + "_after.java",true);   }   @Override protected String getHint(  String tagName){     return "Create Field '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/unresolvedFxId/";   } } 
toolchainBuilder.addUnfilteredCxxFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
loaded.getLoaded().getDeclaredConstructor()
myApplyData == null || myDisposed
mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
mTrustListeners.remove(i)
return true; 
T[]
matcher.find()
dynamicType.getDeclaredConstructor()
timeout >= 0
(T)item
old.isUnderlinedRaw()
config.getCredentialsProvider() != null
TokenSet.create(YAMLTokenTypes.SCALAR_STRING,YAMLTokenTypes.SCALAR_DSTRING,YAMLTokenTypes.TEXT)
Math.min(127,Math.max(-128,priority))
detector == null || !detector.isInProgress()
transform(matrix,source,width,height,true,recycle)
return false; 
mPrivateInput == null || mReplyHeader.responseCode == -1
contentType != null && charset == null
new IllegalStateException(e)
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
reusedBytes()
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
formatTimeMs(scanWifiLockOnTime / 1000)
mMenuDrawer.isMenuVisible()
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
to.getRegistryName()
opcode >= 0
subscriptionSender.setContextAttribute("[$CONTENT_TITLE$]",contentTitle,false)
LOG.warn(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
mc.getMod() == null && !mc.isImmutable()
createDouble(buffer.length(),init,workspace)
r.getKey()
new BindException(newConcept,"concept")
Assert.notNull(cached,"MapSession cannot be null")
Assert.assertEquals(20,as.getAllGlobalProperties().size())
app.getSettings().SHOW_CAMERAS.get() || app.getSettings().SPEAK_SPEED_CAMERA.get()
initialCapacity > 1 << 30
code == 10
cs[c].set(r,rng.nextFloat() > _createFrame.binary_ones_fraction ? 0 : 1)
parser.getName().equals(xhtmlExtension.getElementName()) && parser.getDepth() <= startDepth
log.debug("In OSGi: using programmatically wired maven parser")
new TextPaint()
final ActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
findCodecForFormat(true,format)
new Paint()
TestUtil.stall_till_cloudsize(5)
BitUtil.check(status,9)
FLog.e(TAG,"Failed inserting a file into the cache",ioe)
NCNameResourceCodec.encode(ci)
RingBuffer.newSequencedQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
position >= lastPos
client == null
label.getPackageIdentifier()
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.showErrorNotificationTerse("Analysis server has terminated"); } ,ModalityState.NON_MODAL,myProject.getDisposed())
new GoogleClosureCompileJavaScriptMinifier()
new MapStoreWithStoreCount(expectedStoreCount,300,50)
logger.trace("myq ReturnCode: {}",returnCode)
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
ImmutableList<E>
selenium.isElementPresent("link=Control Panel")
assertPlanEquals(expectedPlan,actualPlan)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
assertEquals(8,databases.size())
given().contentType(ContentType.BINARY).content(file).when().put("/file")
LinkedHashMap<String,ASTNode>
server.getState()
mDataAuthorities == null || data == null
selenium.isElementPresent("link=Control Panel")
@RequestMapping
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges))
logger.trace("[monitor] rescheduling check for [{}]. last access time is [{}]",recoveryId,lastSeenAccessTime)
dimensionsIterator.remove()
Thread.sleep(1000)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
Collection<GridDrStateTransferDescriptor>
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
num.set(j,numbers.get(keys[j]))
cctx != null && cctx != 0
List<String>
record == null || rawPhone == null
knownHandlers.contains(handler)
format(elem,false)
mWM.isKeyguardLocked()
new RFC6265Validator()
uri.toString().equals(future.getURI().toString())
arguments.setSourceMapBaseDirs(sourceMapSourceRoots.toString())
Math.min(titleRight,subtitleRight)
itemLeft >= headerRight
TimeValue.timeValueSeconds(randomIntBetween(1,5) * aggHistogramInterval)
"A task is in the ABORTED state but stage is " + currentState
log.error("Cannot evaluate types() for {} due to {}",requestClass,e,e)
relations.replace(oldName,newTable) == null
timeout=1000
WebServicesTestUtils.checkStringEqual("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
selenium.isElementPresent("link=Control Panel")
eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT
new RecoveryCleanFilesRequest(request.recoveryId(),shard.shardId(),remainingFilesAfterCleanup,translogView.totalOperations())
session.saveWithoutFlush(model)
cache.localSize()
((WithNode)node).getNestedStatement()
metadata.getFaceRectangles()
myEditor.getContentComponent()
StringBuilder tmpLocation=new StringBuilder(actionMapper.getUriFromActionMapping(new ActionMapping(actionName,namespace,method,null))); 
accountHandle.getComponentName().flattenToString()
entry.getKey().startsWith("sun.") || entry.getKey().startsWith("awt.") || entry.getKey().contains(".awt.")
imageView.setImageDrawable(drawable)
app.getSettings().WIKIVOYAGE_SHOW_IMAGES
new ObjectMapper().readerFor(Map.class)
@Override public HotSpotResolvedObjectType getDeclaringClass(){   return holder; } 
parent.setBytes(300L)
Mutation rm=new Mutation("Keyspace1",key); 
numExamples=1
event.causeOfChange == CommentAction.PUSH_COMMENT
Integer.parseInt(stackIdStr)
123 + (USE_OLD_HISTORY ? 1000 : 0)
mHwSession.isConfigFlagSet(flag,(int result,boolean value) -> {   halResult.value=result;   flagState.value=value; } )
lock.isHeldByCurrentThread()
writer.flush()
loaded.getLoaded().getDeclaredConstructor()
message.contains("14807") || message.contains("14883") || message.contains("11340")
UpgradeStepRegistrator.class
Utils.addMenuItem(menu,Menu.NONE,MENU_ROTATE,Menu.NONE,R.string.menu_rotate,android.R.drawable.ic_menu_always_landscape_portrait)
mPowerManager.isInteractive()
Collection<SkyKey>
TelephonyManager.getDefault().getCurrentPhoneType()
(short)0777
states.length >= 3
new GridQueryCacheObjectsIterator(new Iter(res),cctx,cctx.keepPortable())
settings.ROUTER_SERVICE.getModeValue(am)
ConfigserverUtil.createExampleConfigserverConfig(true,false)
new DataSize(40,Unit.MEGABYTE)
realm.checkIfValid()
writeOwners.clear()
mService.setAppPolicy(UID_A,POLICY_NONE)
return guess; 
Log_OC.e(TAG,"Trying to share a NULL OCFile")
SimpleScheduleBuilder.simpleSchedule().withIntervalInMilliseconds(this.refreshInterval)
tok[3]
MetricsLogger.histogram(getContext(),DEMO_SESSION_DURATION,sessionDuration)
initLocale || !mProcessesReady
verify(connection,exception)
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
assertEquals(6,scannedBeanCount)
_wValue instanceof Integer && ((Integer)_wValue > 0) || (_wValue instanceof String && _wValue != null)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
assertEquals(1840,res.getWeight(1,2),10)
LineNumberConvertor.Builder.createRight(data.getLines())
loaded.getLoaded().getDeclaredConstructor()
createHandlerResult(c,principalFactory.createPrincipal(principal.getId()))
!isStarted()
enabled=false
new RegExpBasedFilterInvocationDefinitionMap()
cupboard().withDatabase(getWritableDatabase()).delete(PhilmMovie.class,null)
/**   * Create Reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonRxClient createRx(){   Config config=new Config();   config.useSingleServer().setAddress("redis://127.0.0.1:6379");   return createReactive(config); } 
getLogger().warn("Unknown classloader [CNFE]: " + loader.getClass().getName())
propExcludedDimensions.getIntList()
list.listIterator(list.size())
Log.w("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
new TextField<String>(JMSConfiguration.GROUP_KEY,String.class)
mBackingBitmap.getWidth()
TelephonyManager.getDefault().getCurrentPhoneType()
context.init(servletContext,httpServletRequest,httpServletResponse)
Assert.assertEquals(10,v2)
Locale.getDefault().toLanguageTag()
activity == null || activity.isFinishing()
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
pur.getFileById(dirId.getId())
Simple.forClass(Runtime.NoneType.class)
moveInputMethodWindowsIfNeededLocked(false) || displayed
System.currentTimeMillis()
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")|| scheme.equalsIgnoreCase("nfc")
UpgradeStepRegistrator.class
inserter.close()
m.size()
partitionGroup.numBuffered(partition)
Math.min(titleRight,subtitleRight)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
target.getDestinationLinkAddress()
mLocalDirtyRect.set(0,0,width,height)
cache.remove(r)
getActivity() != null && getActivity().getSupportFragmentManager() != null
routes.ExtractorsResource().create(input.getId())
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo-java.lang.Class...-","foo-java.lang.Class<?>...-","foo(java.lang.Class...)","foo(java.lang.Class<?>...)")
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).switchIfEmpty(createSession(exchange))
setEnabledFunctions(mDefaultFunctions,true)
Assert.assertEquals(122L,ownerCapsuleNew.getNetUsage())
return true; 
labels.size()
remaining == 0
!proxyTransport.equals(ListeningPoint.UDP) && !proxyTransport.equals(ListeningPoint.TCP) && !proxyTransport.equals(ListeningPoint.TLS)
i >= 0
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
M
@UriParam
providerInstance.getReferencesByElement(xmlText,domCfg,context)
child.tagName.equals("base") || child.tagName.equals("script") || child.tagName.equals("link")|| child.tagName.equals("meta")|| child.tagName.equals("title")|| child.tagName.equals("style")|| child.tagName.equals("object")
e.toString()
impl.getServerFactory().setBlockInjection(false)
this.add(getPanelCommand(),getPanelCommand().getName())
new BufferedOutputStream(new GZIPOutputStream(output))
startActivity(mAdapter.intentForPosition(0))
SecurityUtils.isAuthorizationEnabled(configuration)
@Self Statement currentStatement
V
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
expirationTime == Long.MAX_VALUE || expirationTime < 0
bungee.getTranslation("outdated_server",bungee.getGameVersion())
selenium.isElementPresent("link=Control Panel")
ts.getJobId() == jobId
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
String key
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
">>> Started two caches bound to '" + POLICY_40MB_EVICTION + "' memory region."
teleport(new Target(entity),name)
MigrationManager.instance.notifyDropUserType(ut)
Arrays.hashCode(mData)
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2)
mDir.getDirIndex()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
newEntityBuilder.addComponent(new BlockComponent(type,new Vector3i(blockComponent.getPosition())))
portalTopLevelBuildData.getUserContentRelativePath()
position + dockDividerWidth
mLocation != null && isMyLocationEnabled()
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
WordPress.getCurrentBlog().getLocalTableBlogId()
i < 3
type.getDeclaredConstructor()
topFriendsGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
countDownLatch.await()
friendlyAttributes.get(friendlyName)
Thread.sleep(200)
new Paint()
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
presence.getFrom()
setUnknownLabels(collapsedUnary,mainLabel)
new LinearSectionConfig(SectionConfig.DEFAULT_GUTTER,SectionConfig.DEFAULT_GUTTER,SectionConfig.HEADER_INLINE,SectionConfig.FOOTER_STICKY)
PhoneNumberUtils.is12Key(number.charAt(i))
FBUtilities.getBroadcastAddress()
version == null || version.equals("")
mUiHandler.removeCallbacks(pae)
win.isDrawnLw() || win.hasAppShownWindows()
vis.isChecked()
npmAnalyzerPlugin.getNpmVersionFilter(version)
validationInterval=3000
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,10)
block.getEnchantPowerBonus(world,x,y,z)
boost != -1
!mShowLockscreenNotifications
mPtr != 0L
labels.size(0)
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commitAllowingStateLoss()
randomFrom(() -> new ComposeProcessor(instance.first(),randomValueOtherThan(instance.second(),() -> randomColumnProcessor(0))),() -> new ComposeProcessor(randomValueOtherThan(instance.first(),() -> randomColumnProcessor(0)),instance.second()))
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir2,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
result == null || result.getAttack() == null
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
Trans != NO_TRANSPOSE
new Message("XML_STREAM_EXC",LOG,e.getMessage())
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
new InputStreamReader(in,"UTF-8")
installProgressBar.setIndeterminate(false)
id=37
nullabilityOfB.refine(nullabilityOfA)
-26
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
new DateMathParser(formatDateTimeFormatter)
childLeftTuple.reAddRight()
getRootInternal()
selenium.isElementPresent("link=Control Panel")
wrappedBuffer(Integer.MAX_VALUE,byteBuffer)
previewData == null || mediaPager == null || mediaPager.getAdapter() == null
mergeConfigs(file,s -> ConfigFactory.parseFile(new File(s)))
noParam == null && arguments.length != 0
archive.getNameHash() != 0
animData == null || skeleton == null
metaContact.getDisplayName().contains(queryString)
blockStore.init(new HashMapDB(),new HashMapDB())
CalendarLocalServiceUtil.updateCalendar(existingCalendar.getCalendarId(),calendar.getNameMap(),calendar.getDescriptionMap(),calendar.getTimeZoneId(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
CompletionServiceImpl.isPhase(CompletionPhase.EmptyAutoPopup.class,CompletionPhase.AutoPopupAlarm.class)
Object tile=getEnergyProvider(o); 
!clientContextTakeover
(inWidth - kW + 2 * padW) / sW
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
callback.done(false)
Arrays.asList(expected.get(2),expected.get(0),expected.get(1),expected.get(2),expected.get(4),expected.get(3),expected.get(4),expected.get(4),expected.get(5),expected.get(6))
Thread.sleep(1000)
this(0L,null); 
socket.getPoller().add(socket)
getTokenDisplayNames()
saveToFile(false)
myFixture.getAllQuickFixes("struts-action-method.xml")
selenium.isElementPresent("link=Control Panel")
duration(0,15,18873,0)
String.format("%s: language=%s description=%s",commentFrame.id,commentFrame.language,commentFrame.description)
ViewFileSystemTestSetup.createConfig()
new IllegalStateException("Advertising can't be both connectable and anonymous")
smallIcon != null && smallIcon.getType() == Icon.TYPE_RESOURCE
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
new StringBuilder(1024)
selenium.isElementPresent("link=Control Panel")
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
portalBatchBuildData.getWorkspaceDir()
new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask,0.7f)
TIMESTAMPTZ_READ_METHOD.invoke(object,connection)
updateSubtreeNow(node)
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
TelephonyManager.getDefault().getCurrentPhoneType()
temporaryFolder.newFile()
selenium.isElementPresent("link=Control Panel")
string.length() > 0
mDisplay.getRealMetrics(mDisplayMetrics)
listener != null && mHandler == null
Exception t
StringBuilder buffer
!allResources.isEmpty()
singletonObject == null && allowEarlyReference
synchronized (references) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
Log_OC.d(TAG,"Initializing Fragments in onAccountChanged..")
new DefaultGoApiResponse(500)
" firstActiveTime=" + firstActiveTime
buf.readShort()
refreshRotationLockTile()
webappsDir.getAbsolutePath()
attachmentsDir.getAbsolutePath()
mentionsListView.smoothScrollToPosition(0)
LayoutLocalServiceUtil.validateImportPortletInfo(userId,targetPlid,targetGroupId,portletId,parameterMap,larFile)
FluentIterable.from(Default.class.getDeclaredClasses())
WikiTestUtil.addPage(TestPropsValues.getUserId(),_node.getNodeId(),ServiceTestUtil.randomString(),originalContent,true,true,serviceContext)
_freemarkerEngineConfiguration.resourceModificationCheck()
Slog.w(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
new GitException("Invalid reference to commit for merge " + request.getCommit())
e.getMessage()
platformVersion < M
Throwable e
MiscUtil.hashCode(Family)
Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
ConstantNode.forConstant(stamp(),JavaConstant.NULL_POINTER,null)
property != null && method.getName().equals(refex.getText())
journalArticle.getResourcePrimKey()
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle","jboss-har","jboss-sar")
selenium.isElementPresent("link=Control Panel")
CANCEL_TIMEOUT_LIMIT=300
this.e != null && getActivity() != null
mGnssCallback != null
mCryptoPerformanceMap.get(userId)
PrintAttributes.enforceValidDuplexMode(currentMode)
userType("a",1)
return tsrObject; 
inner.deletedRelationships()
hazelcastFactory.newHazelcastInstance(newConfig())
EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>
new IndexWriter(ram,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
parser.nextHexInt()
LOG.debug("Couldn't run process with PTY",t)
mLastAnnouncementWasQuickSettings && !mTracking && !isCollapsing()
polyLats.length - 1
Assert.assertEquals(3,latch.getCount())
bbbGW.userDisconnectedFromGlobalAudio(emm.voiceConf,emm.userid,emm.name)
System.out.println()
SAMPLE_RATE_HZ_MAX=96000
mBottomRightStrip=drawable
mediaController.show()
new TextPaint()
shadowSize <= 0
entity instanceof ProcessDefinitionEntity
Response.ok(null,MediaType.TEXT_PLAIN)
setExpression(expressions.get(myHistoryIndex))
status.isDir()
message.getMessage().getExpiresInSeconds() * 1000L
logger.trace("Return Object {} now at size {}",b,count.getAndDecrement())
vec == null || DKV.get(vec._key) == null
getServiceForUserLocked(userId)
"*********** Traced requests text saved to " + currentTextFile + ".txt"
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_SERVER,true)
selenium.isElementPresent("link=Control Panel")
pY + pHeight
!metaInjectMeta.isNoExecution()
selenium.isElementPresent("link=Control Panel")
Integer.parseInt(stackIdStr)
callback.onPulseFinished()
printMultiCatch(cc)
new ProtoFile("descriptor.proto","google.protobuf",NO_STRINGS,NO_STRINGS,Arrays.asList(message),NO_SERVICES,map("java_package","com.google.protobuf"),NO_EXTEND_DECLARATIONS)
client.replicationControllers()
displayList != null && displayList.isValid()
component.length >= 3
con.getClass().getSimpleName()
allocator.getFlowController().prepareActionAllWrite(x,activations,gamma,beta,mean,var)
String message
1 << 8
ASHMEM_SIZE=296
selenium.isElementPresent("link=Control Panel")
null == Configuration.getResource(dataSourceName)
new IllegalStateException("Advertising can't be both connectable and scannable")
CellUtil.estimatedHeapSizeOfWithoutTags(cell)
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ Broadcaster removeAtmosphereResource(AtmosphereResource resource); 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
items[27]
singleValueAggregation.has(String.valueOf(VALUE)) && !singleValueAggregation.get(String.valueOf(VALUE)).isJsonNull()
ReflectionUtil.setAccessible(m).invoke(executor,new Object[1])
ConfigUtils.absoluteStormLocalDir(stormConf)
id=10865
!JDBCUtils.safeGetBoolean(dbResult,"COLUMN_IS_NULLABLE")
logger.info("started [{}] instances with [{}] stage=prod tag",nodes,prodInstances)
mPowerManager.isInteractive()
VERSION=2
new CrypticClue("Search the boxes in the goblin house near Lumbridge.",BOXES,new WorldPoint(3245,3245,0),"Goblin house on the eastern side of the river.")
first != null && first.getIndexInFile() == j - 2
-StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))
@Nullable
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_method_name"))
new SpannedString(first,true)
callbackList.getBroadcastCookie(i)
private WelcomePagerAdapter mAdapter; 
onProgressUpdate(progress,max)
parameter.name()
new DataCompletenessScheduler(collection)
fileFilters.get(childModule)
T[]
mUiHandler.removeCallbacks(pae)
Boolean.parseBoolean(attrValue)
in.readByte()
status_ != null && status != null
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
ultimateRecyclerView.enableDefaultSwipeRefresh(true)
bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
artifact.getId()
new RuntimeConfigurationWarning("No nosetest runner found in selected interpreter")
m.getDeclaringClass()
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Slave.DoesNotExists.Message",slaveServerName)
future.isDone()
statesByName.put(counterName,state)
input.getExecPath()
new GroupTest(false)
replicaId < nReplicas
timeout >= 0
notApplicationArguments(b,l + 1,GroovyGeneratedParser::paren_argument_list_inner)
SVNURL.parseURIEncoded(myUrl)
TestUtil.stall_till_cloudsize(5)
findAnnotationAttributes(element,annotationType.getName())
new Paint()
Thread.sleep(1500)
this.subscribe(parentGroup,contactIdentifier,null)
readIf("AUTO_INCREMENT") || readIf("BIGSERIAL") || readIf("SERIAL")
assertEquals(9,definitions.size())
type.getDeclaredConstructor()
new MultiIterator(iterableList)
ldapConfig.getCrlFilter()
CommonUtils.truncateString(query.getQuery(),512)
Collection<FunctionDesc>
s.array.length == 2
commentsListView.setSelection(0)
entry.notification.cloneLight()
JavaAssistUtils.toPinpointParameterType(parameterTypes)
lengthInWords >> 8
(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
res + _bias
ServletRequestAttributes requestAttributes=new GrailsWebRequest(request,response,getServletContext()); 
elm.getLocalName()
NestedSetBuilder.linkOrder()
new ApiException(ApiException.Type.BAD_TYPE,e)
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),null,null,null,null,new FsInfo(0,pathInfo),null,null,null,null,null,null)
blog.getLocalTableBlogId()
context.getLogger().logAttributeWarning(address,MESSAGES.invalidJSFSlotValue(slot.asString()),SLOT_ATTRIBUTE_NAME)
property("script",TypeEditor.TextAreaEditor)
new Origin(origin,nativeGetQuotaForOrigin(origin),nativeGetUsageForOrigin(origin))
info != null && info.isConnected() == true
type.getDeclaredConstructor()
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
commentsListView.smoothScrollToPosition(0)
myDetailsHolder.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
mAdapter == null || !mIsAttached
targetJar.isFile()
mService.queryDisplayStatus(getCallbackWrapper(callback))
DynamicCounter.increment(filterName,"status","unknown","type",filter.filterType())
new EnumValidator<TransactionMode>(TransactionMode.class,true,true)
new Paint(Paint.ANTI_ALIAS_FLAG)
DEBUG=false
imeWin.getFrameLw()
stack.getFluidID()
pinScrollBy(hdelta,vdelta,false,0)
endsWith("/home/source")
public static TimeArray timeArray(OffsetTime[] values){   return new TimeArray(values); } 
Object listener=myListeners.get(frame); 
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
memoryReservation.addAndGet(bytes)
checkNoPlanNodeMatches(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
getEffectiveHstsEnforced()
new IncrementalIndexSegment(rtIndex,null)
new IllegalStateException("Legacy advertising can't include TX power level in header")
token.equals("»") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties")
mGnssCallback != null
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
randomIntBetween(1,10)
mContext.startActivityAsUser(intent,new UserHandle(mCurrentUser))
doTestWithRuntime()
listView.getCount()
FileUtil.isAncestorThreeState(dir.getPath(),changeCandidate.getPath(),false)
sr.getLastStartId()
conn.createStatement()
selenium.isElementPresent("link=Control Panel")
ir.mHandler != null && ir.mImageListener != null
selenium.isElementPresent("link=Control Panel")
factory.getEmbeddedServletContainer()
!serverContextTakeover
driverPropertySource.getPropertiesWithDefaults()
getResource(exchange).switchIfEmpty(Mono.defer(() -> {   logger.trace("No matching resource found - returning 404");   exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);   return Mono.empty(); } ))
Session.getDefaultInstance(mailServerProperties)
mService.mAppTransition.isTransitionSet()
bedtime - SystemClock.uptimeMillis()
SortedQueue<Node>
loaded.getLoaded().getDeclaredConstructor()
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
SourceStreamT[]
Number value2
perc(.10,4)
Exception e
authHeader != null && authHeader.size() > 0
decompiler.addPreservedComment(ts.getString())
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
Long2 v
Thread.sleep(500)
ContactModel::getTwitterSn
uri.getAssetName().toLowerCase()
c.context()
ReflectUtil.isTypeOf(parameterType,methodParameters[i].getType())
selenium.isElementPresent("link=Control Panel")
mock.expectedMessageCount(1)
localCache.put(name,cacheEntry)
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
aa.getAllFlags()
oppositeWindow == w || oppositeWindow != null && oppositeWindow.getOwner() == w
Assert.assertTrue("Test output points to null",input.size() > 1)
ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
m.getDeclaringClass().getName().startsWith("org.gridgain") || m.getDeclaringClass().getName().startsWith("org.apache.ignite")
Files.newOutputStream(self)
getSslStoreProvider().getTrustStore()
dialog.dismiss()
TypeEvalContext.slow()
value + MINIMUM_BACKLIGHT
!transmittableAudioEncodings.contains(sdp)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new LayerView(this,0x0f00ff00)
assertEquals(2,grailsApplicationAwares.size())
Long.parseLong(value)
assertThat(targetConnectionCount).isLessThanOrEqualTo(goodServerStats.getTotalRequestsCount())
generateFluentSetters()
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)
parser.nextText()
mUiHandler.removeCallbacks(pae)
assertNotNull(stubTree)
info.getSubscriberIdForSubscriber(subId,mContext.getOpPackageName())
keySet.isEmpty()
new IndexWriter(indexStore,new StandardAnalyzer(new String[]{}),true,IndexWriter.MaxFieldLength.LIMITED)
return 31.5f; 
fileTypeName.equals(fileType.getName())
s2 <= s1
Slog.w(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
Preconditions.checkNotNull(location,"location")
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_script_name"))
new IndexWriter(indexStore,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new StringBuilder(740)
AlluxioLogServerProcess.class
rep.saveStepAttribute(id_transformation,id_step,"file_type_field",fileTypeField)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
context == null || context == EGL_NO_CONTEXT
jid.getEscapedLocal()
setExpression(expressions.get(myHistoryIndex))
i < 200
new File(propertyFiles.get(fileName),fileName)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
clampScreenBrightness(mCurrentScreenBrightnessSetting)
paramType.getSimpleName()
dependentMeasureRef.equals(that.getDependentMeasureRef())
awaitBusy(() -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0,1,TimeUnit.MINUTES)
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amounts[face.getIndex()] / flow.capacity,1,min,max,fluidBuffer,sides)
fMethodDescriptions.putIfAbsent(method,description)
minBukkitBuildVersion=699
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
String assetId
Throwable e
startActivity(mAdapter.intentForPosition(0))
firstChatPanel.getDefaultContact()
time != -1 && Math.abs(mLastModified * 1000 - time) >= 86400000
mCurrentDate.get(Calendar.MONTH) != month
mWM.removeViewImmediate(mView)
getProperties().put("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
PortalBatchBuildData portalBatchBuildData=getBuildData(); 
mPanelClosedOnDown && !mHeadsUpManager.hasPinnedHeadsUp() && !mTracking&& !mStatusBar.isBouncerShowing()&& !mStatusBar.isKeyguardFadingAway()
ran.nextInt(250)
topicRegistrations == null || topicRegistrations.isEmpty()
Integer.parseInt(getOptional("kylin.engine.spark.max-partition","5000"))
resetAndUpdateValuesFromDeck()
new IllegalArgumentException("ClassInfo's name should be non-null")
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=40
doConfigureRemote(fork)
entry.notification.cloneLight()
initialCapacity > 1 << 30
application.getBaseContext()
item.getName().equals(name)
1
annotation.value()
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
_contextHandler != null && _contextHandler.getBaseResource() == null
val == null || val.length() == 0
loaded.getLoaded().getDeclaredConstructor()
result.setBytes(8L)
jobLoader.findJobEntriesWithID(JobMeta.STRING_SPECIAL)
add(bytes)
isGreaterOrEqual(platformVersion,M)
assertTrue(metaInject.init(spyMeta,data))
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
Map<String,Fields>
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
offset > 0
coyoteRequest.getReadListener() == null
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER && child.isVisibleLw()
position == -1 || position >= itemsList.size()
allSortedModules.stream()
LOGGER.info("Intercepted " + method.getFullMethodName())
parser.getBoolean(KEY_ANIMATION_DISABLED,false)
type.getDeclaredConstructor()
pubnub.enablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
options.put("updated",true)
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1,false)
getTimeout(ticketToUpdate)
anchorView.getApplicationWindowToken()
Arrays.hashCode(mData)
!mStopped || mReportNextDraw
userInfo == null || !userInfo.canHaveProfile()
checkCall(receiver)
T
assertEquals(10,rows.size())
Long.parseLong(args[ai])
verifyAttributes(decoder,binary("232302004200000880316890202968001e02582d00000000000000050000320000018901920000001dc1e2001601081154255d0202005a0053875a00a57e5a00af80"))
klass.getDeclaredFieldsUnchecked(false,declaredFields)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
getListeners(listener)
!mMediaPlayer.isPlaying()
this.getTheSocket()
IDLE_TIMEOUT=10
o.getRate()
Details_DialogLayout.findViewById(R.id.ll_location)
3 * 60 * 1000L
BaseNoGui.getTargetBoard()
twitter1.getPublicTimeline()
mp.getResolvedValue()
lock.isHeldByCurrentThread()
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
mParent == null
config.getStrategyImpl()
Maths.logisticGradientValue(predictRating)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"gfxinfo",pw)
new OneRun(42.56819,1.603231,42.571034,1.520662,17710,446)
commitIfNecessary(sessionToUse,message)
ENABLE_APK_ASSETS_CACHE=false
_log.warn(ioe,ioe)
synchronized (mAuthorities) {   writeStatusLocked(); } 
getDialect() instanceof PostgreSQLDialect || getDialect() instanceof HSQLDialect
graph.getEdgesAndMetaEdges()
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
jniGetLocalAnchorB(addr,tmp)
readWifiSleepPolicy()
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class,false,false)
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).descriptionAndTooltip(message)
logException(exception)
!hasAnnotation(annotatable,annotationMirror) || annotatable instanceof JAnnotationArrayMember
selenium.isElementPresent("link=Control Panel")
myClass != null && myClass.isContentsLoaded()
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)
row.length < 1
WordPress.getCurrentBlog().getLocalTableBlogId()
TABLE_FINISH
SystemInfo.isMac || myTestModeFlag
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
assertEquals(1,conceptStopWords.size())
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
note.getTag() != null && note.getTag().getId() != 0
this.deliveryDelay >= 0
Thread.sleep(0,1)
req.getContentLengthLong()
realm.checkIfValid()
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS,Manifest.permission.GET_ACCOUNTS_PRIVILEGED)
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
-4
new EnumValidator(ParticipantStatus.class,true,false)
Arg args
new String(data,0,read,"UTF-8")
factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
op == CALL
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
Thread.currentThread().interrupted()
worldPath.resolve(getChunkFilename(chunkPos))
LOGGER.warn("Could not execute unmarkEntries",ex)
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE || item.getType() == DownloadActivityType.HILLSHADE_FILE || item.getType() == DownloadActivityType.WIKIPEDIA_FILE
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,count)
logger.debug("Cannot play line-in ({})",e.getMessage())
E edge
hasPartialTag(tokens[pos - 1],"SUB","EIG","VER:AUX:3:","ADV:TMP")
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_NAME)
PortletFileRepositoryUtil.addPortletFileEntry(portletDataContext.getScopeGroupId(),portletDataContext.getUserId(kbArticle.getUserUuid()),KBArticle.class.getName(),kbArticle.getClassPK(),PortletKeys.KNOWLEDGE_BASE_ADMIN,kbArticle.getAttachmentsFolderId(),inputStream,fileName,mimeType,true)
getConnectTimeout()
IQ.Type.error == packet.getType() || IQ.Type.result == packet.getType()
Map<K,V>
payload.writeBytes((byte[])each)
logger.trace("rapidRefreshFutureEnd stopping")
mTextColorLink.getColorForState(ds.drawableState,0)
device == AudioSystem.DEVICE_OUT_HDMI || device == AudioSystem.DEVICE_OUT_HDMI_ARC
super.addHeader(name,value)
group.getGroupId()
(outputFolder + File.separator + apiFolder).replace("/",File.separator)
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
0 <= newCursorPos && newCursorPos <= text.length()
new StringBuilder(256)
mMccStr == null
VcsTestUtil.assertEqualCollections(localTags,myLocalTags)
new ConcurrentHashMap<String,InjectionMetadata>(256)
expirationPeriod * 60L * 1000L
Class.forName(mUfsClz).getConstructor(String.class,TachyonConf.class)
deploymentUnit.getParent() != null
TestSuiteEnvironment.getHttpAddress()
ft.commitAllowingStateLoss()
!mShowLockscreenNotifications
new int[3456]
SelectTimeZonePacificStandardTimeCPMATest.class
Executors.newScheduledThreadPool(1,new NamedThreadFactory("Strong-Reference-Leak-Detector"))
Log_OC.d(TAG,"onResume() start")
Thread.sleep(1000)
MetricsLogger.histogram(getContext(),DEMO_SESSION_DURATION,sessionDuration)
new OptionParser(false)
mScaleType.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
goalStartXp <= 0 || currentXp > goalEndXp
ImmutableList.copyOf(interceptors)
case REPEATABLE_GROUP: 
modifyList(ns,arg)
lastPos > mBoundPos
data.getTestPassed()
_buildTemplateWithGradle("npm-billboardjs-portlet","billboardjs-dependency-management","--dependency-management-enabled")
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
mService.setAppPolicy(UID_A,POLICY_NONE)
retryHandler.onComplete(results)
getPreferences().getBoolean(DEBUG_PREF,false)
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").bold("#")
node.toAppliedPTransform(getPipeline())
convertImportsToSingleLine=false
analysisResult.getPackageRoots()
UnsafeUtils.get8(_mem,8)
baseComparator.compare(itemStack1,itemStack2)
verify(mock)
loaded.getLoaded().getDeclaredConstructor()
b == null || b.length == 0
private final PropertyKey mPortKey; 
entry.getValue()
" firstActiveTime=" + firstActiveTime
@NonNull BluetoothDevice bluetoothDevice
dh != mBackgroundHeight
!trackMotionScroll(delta,delta)
API_KEY == null || API_KEY == ""
this.addEventHandler(KeyEvent.KEY_PRESSED,event -> {   Optional<KeyBinding> keyBinding=preferences.getKeyBindings().mapToKeyBinding(event);   if (keyBinding.isPresent()) { switch (keyBinding.get()) { case ENTRY_EDITOR_NEXT_PANEL: case ENTRY_EDITOR_NEXT_PANEL_2:       tabbed.getSelectionModel().selectNext();     event.consume();   break; case ENTRY_EDITOR_PREVIOUS_PANEL: case ENTRY_EDITOR_PREVIOUS_PANEL_2: tabbed.getSelectionModel().selectPrevious(); event.consume(); break; case HELP: HelpAction.openHelpPage(HelpFile.ENTRY_EDITOR); event.consume(); break; case CLOSE_ENTRY_EDITOR: close(); event.consume(); break; default : } } } )
s2.isUnsubscribed()
Long.valueOf(jvmName.split("@")[0])
ClassLoaderUtil.accept(cl,false,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
processGoType(resolveType,processor,state)
writer.flush()
(status & 0x20000000) != 0
greaterThanOrEqualTo(2)
public DeclaredType getSourceSection(){   return sourceSection; } 
childLeftTuple.reAddLeft()
new ShingleFilter(tokenStream,minShingleSize,maxShingleSize)
v[3]
@Override protected Void doInBackground(Void... params){   helper.delete(groupsToDelete,getSelectedFavorites());   favoritesSelected.clear();   groupsToDelete.clear();   return getString(R.string.favourites_delete_multiple_succesful); } 
stripFilter.skipWhiteSpace(charBuffer,stringWriter,true)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
"Adding new Docker node " + newNode
ShrinkWrap.create(JavaArchive.class).addAsManifestResource("beans.xml")
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
DEFAULT_WAKE_LOCK_TIMEOUT=60000
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
successfullyFundedTextView.setText(bannerSuccessfulString)
TestUtil.nextInt(random(),3,IndexWriter.MAX_TERM_LENGTH)
(Integer)strategy.getOrNull("test",third)
new Converter(file.getProject())
mWindow == null || !mWindow.getSharedElementsUseOverlay()
String.format(Locale.getDefault(),"Time taken: %02d:%02d.%03d",minutes,seconds,milliseconds)
servers == null || servers.isEmpty()
targetSdkVersion > N_MR1
ap.getSsidStr()
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
RoleLocalServiceUtil.loadGetRole(companyId,name)
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
/**   * Represents an Eclipse-specific external artifact dependency.  * @since 2.14  */ @Incubating public interface EclipseExternalDependency extends ExternalDependency, HasClasspathAttributes { } 
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
new WorldPoint(1428,3866,0)
getExecutionContext(event,false)
fireMessageReceived(ctx,message,e.getRemoteAddress())
getIntent().getExtras().getLong(EXTRA_PERSON_ID)
Response header(String name,Property property); 
mStackScroller.getChildAtRawPosition(x,y)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",true)
listener == null
{CUSTOM_STUDY_REV,DECK_OPTIONS,MORE_OPTIONS}
mSelectPhotoView.getSelectFiles() != null && mSelectPhotoView.getSelectFiles().size() > 0
MAX_ACTION_BUTTONS=3
moveInputMethodWindowsIfNeededLocked(false) || displayed
Thread.sleep(50)
sceneToLocalTransformation.preConcat(parent.getSceneToLocalTransformation())
/**   * The lower value in the range.  * @return the lower value in the range.  */ T getFrom(); 
entry.notification.cloneLight()
clusterNodeInfo.containsFlag(Flag.NOADDR) || clusterNodeInfo.containsFlag(Flag.HANDSHAKE)
Integer.parseInt(tokens[3])
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new PruneRedundantProjections())
files != null && changesList.isEmpty()
new GroupTest(true)
className.lastIndexOf("org.openmrs.")
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
cancelHardwareAnimations(true)
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
logger.info(logMessage,ve)
~PFLAG3_FITTING_SYSTEM_WINDOWS
Long.parseLong(attrValue)
origin < other
mSeekBar.setProgress(0,true)
loaded.getLoaded().getDeclaredConstructor()
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
selenium.isElementPresent("link=Control Panel")
avatar != null && avatar.getSmallImage() != null && avatar.getSmallImage().getFileReference() != null
assertTrue(indicesService.hasUncompletedPendingDeletes())
!(exception ? throwable instanceof RuntimeException : throwable == null)
tw.close()
{4,7,5,11,6,5,7,5,11,11}
resolveSession.getStorageManager().createMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
UpgradeStepRegistrator.class
TokenSet.create(TEXT,TAG_NAME,MARKDOWN_LINK,MARKDOWN_ESCAPED_CHAR,TEXT_OR_LINK)
new Intent(Intent.ACTION_USER_PRESENT)
pointer.isEmpty() || pointer.equals("#")
start + emoji.length()
@JsonProperty("id") Long id
cachedMemoryUsageBytes <= softMemoryLimitBytes
addOption(url,"MV_STORE","true")
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
new EnterSelectionDialog(shell,Condition.getRealOperators(),"Operator","Select the operator:")
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
state != SocketState.CLOSED
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
LOG.info("Unsupported minification resource: " + filename)
private RelativeLayout btnScrollDown; 
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector))
!exclude
currentResponse != null && currentResponse.getAuthentication() != null
isInputViewShown()
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
cursor == null || !cursor.moveToFirst()
removeCachedServiceLocked(getChangingUserId())
reader.waitFor()
hasColumn(tableName,columnName)
return false; 
mRepeat > 0
lockForRescale()
config.highlightOwnName() && usernameMatcher != null
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")|| (lowerCaseLine.contains("fatal: repository") && lowerCaseLine.contains("not found"))|| lowerCaseLine.contains("[remote rejected] (permission denied)")
context.getString(R.string.history_attach_removed,attachmentName,item)
latch.await(70,TimeUnit.SECONDS)
enabled=false
handles[count]
structuralLock.isHeldByCurrentThread()
mySide2.select(titles)
mBluetoothHeadset.disconnectAudio()
tracesDir.mkdirs()
assertClusterSizeEventually(2,nodes[0])
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true,false)
mValues[8]
RequestContextHolder.getRequestAttributes()
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
mSyncStatus.valueAt(i)
link.bone.getWorldBindPosition()
HiveRexUtil.simplify(rexBuilder,node)
copy1DRangeFromUnchecked(0,mType.getCount(),i)
MonitoringPortlet.isMonitoringPortletEventRequest()
new Color(mParams.getCustomBackgroundColor(),true)
BufferUtil.zeroBuffer(1)
HIVE_PARTITION_OFFLINE(6,USER_ERROR)
Log_OC.e(TAG,"Trying to share a NULL OCFile")
e.toString()
objectCache.put(parent,parentObjects)
volume.getMtpReserveSpace() * 1024L * 1024L
preMergedCustomer.isRegistered()
selenium.isElementPresent("link=Control Panel")
!MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player,entity))
assertTrue(String.format("Expected to find %s marker in file but was none",MARKER),offset >= 0)
serialVersionUID=1L
height > 0
STUB_VERSION=46
clusterProperties.getMaxRedirects()
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
loaded.getLoaded().getDeclaredConstructor()
type.isEmpty()
ScrollUtil.findScrollPane(myContent)
!isVideoScalingModeSupported(mode)
10 * 1024 * 1024
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
util.getDataTestDirOnTestFS(table)
runPartialSorter(sorter,NUM_RECORDS,25)
diff <= freeLimit
zone5.equals(zone4)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,newDeviceState,prevDeviceState)
parent instanceof PsiReturnStatement || parent instanceof PsiResourceVariable
stmt.execute(sql)
o2.getParameterTypes()
assertTrue(getProjectActions().toString(),getProjectActions().contains(id))
serialVersionUID=1787028237
value == null
Assert.assertArrayEquals(serviceContext.getAssetLinkEntryIds(),assetLinkEntryIds)
TokenSet.create(RegExpTT.CHARACTER,RegExpTT.CARET,RegExpTT.DOLLAR,RegExpTT.REDUNDANT_ESCAPE)
externalDependency.resolve(configuration.isTransitive())
-1
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
mWindow == null || !mWindow.getSharedElementsUseOverlay()
clearIndex()
new TextPaint()
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
socket.getPoller().add(socket)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
env.getDirectories().getExecRoot(configurationSupplier.get().getMainRepositoryName())
fLines.addElement(st.nextToken())
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
new int[26]
!mTileState
LOG.warn("Failed to look for classes in " + jarFileName + ": "+ ioEx)
ImmutableList<Map<String,Object>>
highlightValue(highlight,false)
checkManageOrCreateUsersPermission("setupRestrictedProfile")
initialCapacity > 1 << 30
newLogMergePolicy(false)
"none".equals(max_items)
response.getBytes(Charset.defaultCharset())
path != null && path.indexOf(mHostContext.getPackageName()) < 0
logger.debug("mmap address is: " + Pointer.nativeValue(addr))
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults,numResults)
addTrailingCells(true)
private final String myClassName; 
Thread.sleep(10000)
preOutput != null && preOutput.isAttached()
log.info("Cannot fetch column count for cursor : " + e.getMessage())
now == currentPage || dotCenterX == null
executor.execute(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
startActivity(intent)
SystemClock.uptimeMillis()
LOGGER.trace(exception.apply().toString())
_vresponse == null && _parms._response_column != null
info != null
"/".equals(requestURI) || "/index.jspx".equals(requestURI) || "/w/".equals(requestURI)|| "/w/index.jspx".equals(requestURI)
@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
r.toLocalRuleString()
result < START_SUCCESS
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
FileChooser.chooseFile(new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
this.constraints.updateFromFactHandle(workingMemory,handle)
mRvc == null || !session.isActive()
public <A>SubType leftJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).leftJoin((Expr<?>)entity);   return self; } 
eventFunc.equals("conf_api_sub_mute") || eventFunc.equals("conference_api_sub_mute")
mWindowingMode != WINDOWING_MODE_PINNED
factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
MessagingService.instance().sendRR(cm.makeMutationMessage(),endpoint,responseHandler,false)
transferCallButton != null
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
"Unknown id: " + id
512 * 1024 * 1024
loaded.getLoaded().getDeclaredConstructor()
assertTrue(cache.context().systemTx())
type.getDeclaredConstructor()
return _this; 
List<UIDMeta>
field.getType().toJavaName()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
mPowerManager.isInteractive()
new Intent(Intent.ACTION_USER_PRESENT)
textureLink.getFieldValue("norfac")
Trans != NO_TRANSPOSE
Throwable e
mNoteTypeSpinner.setSelection(position,false)
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED || error == FingerprintManager.FINGERPRINT_ERROR_CANCELED
!MessageDigest.isEqual(ourMac,theirMac)
provider.setClient(c2)
((HttpOutput)out).isWritten()
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
StringBuilder line=new StringBuilder(); 
cart != null && !(cart instanceof NullOrderImpl)
proxyHTTPSServer.getText()
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId)
sm.getString("namingContext.nameNotBound",name,name.get(0))
Criterion.or(MetadataCriteria.withKey(ProducteevTask.METADATA_KEY),MetadataCriteria.withKey(TagService.KEY),MetadataCriteria.withKey(NoteMetadata.METADATA_KEY))
read(buffer,0,(int)Math.min(buffer.length,len))
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
focusedStack == null || focusedStack.getTaskCount() == 0
connectPanDeviceNative(objectPath,"nap")
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
new Paint()
out.annotateTo(reader.getOffset(),"%s",StringIdItem.getOptionalReferenceAnnotation(dexFile,paramaterIndex,true))
!ON_TOP
new TextPaint(Paint.ANTI_ALIAS_FLAG)
pId + BASE_FILE_NUMBER
val == null || val.length() == 0
postResourcesElementDesc.getStoreFactory()
injectField(annotationNode.up().up(),fieldDecl)
selenium.isElementPresent("link=Control Panel")
ids2.size()
Reflect.on(result).set(childName,Convert.convert(childElement.getTextContent().trim(),childType))
mDataAuthorities == null || data == null
configType == null || wordTypesType == null || configType == null
log.isWarnEnabled()
EDGEVILLE_HOME_TELEPORT=98
deltaY >= 0
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
final LongAdder8 sum=new LongAdder8(); 
DynamicAttributeRanking.refreshMinMax(this,graph)
i < path.length() && path.charAt(i) == PERIOD
layoutAlgorithm.getStackTransform(t,stackScroll,mTmpTransform,null)
newSearcher(r)
contentService.submitContentFromSandbox(contentIds,"UserSandBox","NumeroUno","NoteTest")
globalExecutionStats.getStartedSplits()
new Dialog(ActivityApp.this)
meta.getCompareStepName()
server.getClass()
chart.createBufferedImage(bounds.width,bounds.height,BufferedImage.TYPE_INT_RGB,null)
role != null && role != MUCRole.none
(Number)resultList
Collections.emptyList()
doTestWrapMethod(true)
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,true))
mv.visitVarInsn(ALOAD,resultIdx)
((PsiManagerImpl)manager).getFileManager().findViewProvider(file)
isCancelled() || isDone()
tag_values.getId("web03")
suffix.add(tmp.substring(1))
schemas == null || schemas.size() == 0
RedisRunner.shutDownDefaultRedisServerInstance()
_formatDefinition(definition,indent,level,!nestedDefinitions.isEmpty())
from >= to
Thread.sleep(1000)
UpgradeStepRegistrator.class
Throwable e
executorService.scheduleWithFixedDelay(fileWatcherRunnable,0,30,TimeUnit.SECONDS)
ret.shapeInfoDataBuffer()
"could not execute request: " + request
10 * 1000
PsiFormatUtil.getExternalName(psiMethod,false)
addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()
response.addHeader(WWW_AUTHENTICATE,value)
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
connectedHeaders.setVersion("1.1")
new GdxRuntimeException("Failed to read Vorbis.",e)
Optional.fromNullable(dynamicProperties)
traceTag != 0 && Trace.isTagEnabled(traceTag)
mAuthorities.valueAt(i)
new HttpParameter("retweets",retweets)
Math.abs(delta_loss)
checkCall(receiver)
snap.getGravity() == Gravity.CENTER_HORIZONTAL || snap.getGravity() == Gravity.CENTER_VERTICAL
account.getId()
mCameraUser.submitRequest(request,false)
Bytes.toBytes(tableOrRegionName)
Float.parseFloat(strings[i])
!"None".equals(tree.getClientProperty("JTree.lineStyle"))
DEBUG_ALL_ACTIVITIES || true
new IllegalArgumentException(sm.getString("pojoMethodMapping.pongWithPayload",m.getName(),m.getClass().getName()))
XContentType.JSON.mediaType()
HttpUtil.removeParameters(uri)
mUiHandler.removeCallbacks(pae)
new StringBuilder(560)
hashSymbols.values()
new AssetDisplayField(classTypeField.getName(),classTypeField.getLabel(),classTypeField.getType())
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())
reordableChildren.size() >= actionUrl.getAbsolutePosition()
response.getRawStatusCode()
offset < range.getEndOffset()
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
t instanceof EntityExistsException || t instanceof ConstraintViolationException
Transaction g
PyTokenTypes.ADDITIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.SHIFT_OPERATIONS.contains(expression.getOperator())
Integer.parseInt(displayIdStr)
LOG.trace(msg,this)
mBottomRightStrip=mContext.getResources().getDrawable(resId)
matchAxisFilter != 0 || wrapAxisFilter != 0
getFastAdapter().notifyAdapterItemChanged(position)
list.append(ai)
candidate.getArgumentMapping()
new BufferedInputStream(new GZIPInputStream(input))
node.getLifecycleService().shutdown()
checkCall(receiver)
request.getDueAfter()
getOptionalLong(singletonMap("long","Apio"),list)
a.willChangeBounds()
new Paint()
@Alive({REG,ILLEGAL})
8 * 1024 * 1024
callback.done(false)
n.doubleValue()
selenium.isElementPresent("link=Control Panel")
firstPos > mTargetPos
myToolWindow == null || !myToolWindow.isVisible()
FSDirectory.getDirectory(sub.toString())
name.equals("Devices") || name.equals("UUIDs")
instrumentation.isRedefineClassesSupported()
@Override public final Chunk reloadFromBytes(byte[] ary){   _mem=ary;   initFromBytes();   return (D)this; } 
mucUser.getDecline() != null && ((Message)packet).getType() != Message.Type.ERROR
GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))
headRef()
!mMediaPlayer.isPlaying()
startActivity(intent)
commit.getTime()
Utils.intNow(1000)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
recordingDescriptorDecoder.endPosition()
patched != null && (patched.startOffset != patched.endOffset || info.startOffset == info.endOffset)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers2.kt")
Slog.e(TAG,sb.toString())
new NativeAllocationRegistry(Bitmap.class.getClassLoader(),nativeGetNativeFinalizer(),nativeSize)
alterStatement.getUpdateColumns().put(oldName,oldDefinition)
typeSettingsProperties.toString()
permissions+=128
(SubscribeForm)actionForm
new Paint(Paint.ANTI_ALIAS_FLAG)
mHasSurface && !isGoneForLayoutLw() && !resizingWindows.contains(this)
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
final ClientState clientState=(ClientState)msg.obj; 
mFragments.mCurState < Fragment.CONTENT && mFragments.mActivity != null
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
Assert.assertEquals(4,providers.size())
ft.commitAllowingStateLoss()
holder.setGone(getLoadFailViewId(),visible)
mWindowManager.removeViewImmediate(mContainer)
hook.stopPlay(program)
FileUtil.join(sdkHomePath,"bin",GoConstants.GO_EXECUTABLE_NAME)
ccCompilationContextInfo != null
Thread.sleep(1000)
DarkIconDispatcher.getTint(tintArea,mMobileActivity,tint)
new Rect(left,top,right,bottom)
chain.filter(exchange).subscriberContext((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
items[i].getValue("")
totalTimeMeasurement.startedAt()
new NetworkRequestHandler.ResponseException(504,0)
args.length != 7
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
ExprEval.ofDouble(null)
log.warn("Couldn't find style: " + styleId)
JobEntryInterface.class
tfs.createFile(new TachyonURI("/root/testFile1"))
adapter.item(R.string.layer_hillshade).selected(HILLSHADE.get() ? 1 : 0).icons(R.drawable.ic_action_hillshade_dark,R.drawable.ic_action_hillshade_light).listen(listener).position(13)
preloadQueue.size == 0 || tasks.size() == 0
listener.iterationDone(policyNet,policyIterationCount,policyEpochCount)
public Builder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mDataAuthorities == null || data == null
workspace.runBuckCommand("test","//:foo","--config","apple.xctool_path=does/not/exist")
childLeftTuple.reAddRight()
postfix.startsWith("id")
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to time: " + value.toStringUtf8(),e)
AndroidResource resourceRule1=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res1")).build()); 
mDownloadXtraDataPending=false
getDelegate().getDefaultCipherSuites()
new ArgumentPreparedStatementSetter(args)
Conv2DConfig.builder().kH(kernel[0])
ReferenceCountUtil.release(holder)
mAnimator.getPhaseX()
addTo(instant.getMillis(),scalar,instant.getChronology())
childQuerySpec.limit()
length >= 70
Mono.subscriberContext()
lpNameBuffer.getValue()
element.getText()
mCoveredFadeColor != 0
mUiHandler.removeCallbacks(pae)
masm.add(size,scratch1,result,delta)
mPowerManager.isInteractive()
mPlayer.getCurrentPosition() * 1000L
exchFut.discoveryEvent().eventNode()
num.set(j,numbers.get(keys[j]))
value < maximumValue
handshake.getProtocolVersion()
mDisplay.getRealMetrics(mDisplayMetrics)
userGroupMember.getUserGroupId()
SHORT_CF_NAMES_DEFAULT=false
DLAppLocalServiceUtil.deleteFileShortcut(classPK)
journalArticle.getResourcePrimKey()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
selenium.isElementPresent("link=Control Panel")
host.getHost()
tempMat4.set(worldMatrix)
ColorProperties.getColor("controlDarkShadow")
a.length >= size
R resource
application.getBaseContext()
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
err == 0
mSupportView != null && mSupportView.getLayoutParams() != null
Maps.newTreeMap()
LOG.info("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
CellUtil.estimatedHeapSizeOfWithoutTags(cell)
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
new Random()
subColumn.getLocalDeletionTime() < gcBefore
notificationManager.cancelAsUser(NOTIFICATION_ID,id,UserHandle.ALL)
to.serialize()
stackTrace.length <= depth
imeWin.getFrameLw()
synchronized (this) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
calendar.add(Calendar.DATE,-1)
httpclient.query(query)
mUserStates.valueAt(i)
this.getStyleClass().add("document-viewer")
ServiceLoader.load(ReportingAdministrator.class,getClass().getClassLoader())
command.execute(answerForm)
new ModelRenderer(model,0,1)
for (SampleStream sampleStream : streams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
log.info("Hooking new default : onOperator")
BufferUtil.zeroBuffer(1)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
params.getSimulatedPlatformVersion()
!isLoaded && item.isOptional() && item.getRecursiveLink() == null
COLUMNS=6
logger.error("An error occurred while executing a command: ",e)
loaded.getLoaded().getDeclaredConstructor()
assertEquals(flowerVocab.getIndex(),2)
PRAYER_ENHANCE(ItemID.PRAYER_ENHANCE_4,GameTimerImageType.ITEM,"Prayer enhance",290,ChronoUnit.SECONDS)
composeText.getText()
AndroidDistinguishedNameParser dnParser=new AndroidDistinguishedNameParser(cert.getSubjectX500Principal()); 
ddmStructureLocalService.updateStructure(ddmStructure.getStructureId(),nameMap,descriptionMap,xsd,serviceContext)
tmpHopp.getGraphHopperStorage()
EgoBuilder.class
socketWrapper.getReadTimeout()
scheduleRemoveStartingWindowLocked(wtoken)
dispatchInstallPluginAction()
log.getParent()
new Paint()
{abiOverride}
a7 == a.a7
this.getClass().getName()
typeSettingsProperties.containsKey(oldStagingPortletId)
args.isTestingModeEnabled()
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
mf.filter(r,originalMessage,transformed.message())
new IllegalStateException("Advertising can't be both connectable and scannable")
!isIgnoreUriScheme()
scanFlags & SCAN_NEW_INSTALL
selenium.isElementPresent("link=Control Panel")
tnCount=70
ScanFilterAndProjectOperator.class
!ExpressionUtils.isNullLiteral(args[0])
extra != -38
temp_descs.get(j)
/**   * The upper value in the range.  * @return the upper value in the range  */ T getTo(); 
range.getEndOffset()
context == null || context == EGL_NO_CONTEXT
cachedValues.put(entry,NULL) == null
softWrapsIndex < softWraps.size() && line < lineCount
cs == null || cs.length() == 0
return this; 
Config.defaults()
mUiHandler.removeCallbacks(pae)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValueExact()
sqlRouteResult.getSqlParsedResult().getType()
targetInfo != null && targetInfo.metaData != null
ImmutableList.of("/bin/bash","-e","-c",command)
hasColumn(tableName,columnName)
scoreobjective1 != null
new SettingsValidators.InclusiveIntegerRangeValidator(0,100)
connection.getParser().setListener(websocket)
Thread.sleep(1000)
realm.checkIfValid()
listener.onTestIgnored(test)
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
log.info(error,cause)
Simple.forClass(String.class)
origin >= other
Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
rewardView::setCardBackgroundColor
log.info("Reset to factory defaults : onNextDropped")
anchorView.getApplicationWindowToken()
assertTrue(message.getPayload() instanceof Collection<?>)
mStackScroller.getChildAtRawPosition(x,y)
context.getResponse().setContentLength(byteContent.length)
declaredMethods[i].isBridge() || name.indexOf('+') >= 0
_log.warn(ioe,ioe)
onHold & ON_HOLD_REMOTELY
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
mConnector.execute("volume","format",vol.id,"auto")
typeSer.writeTypeSuffix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
parentId != null
ContainerResources.from(9.2,4,16)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
j++
mEventInterceptor.onPreMeasurePopupView(this,mContentView,w,h)
logger.debug("Playlist '{}' not found",playlist)
getPreferences().getBoolean(DEBUG_PREF,false)
new ModuleDescriptorImpl(Name.special("<built-ins module>"),storageManager,ModuleParameters.Empty.INSTANCE$,this)
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,false,"getAppStandbyBucket",null)
entity.isImmutable() || !Mirrors.isInstance(types,typeElement,PACKAGE_ANDROID_OS + ".Parcelable") || Mirrors.overridesMethod(types,typeElement,"writeToParcel")
child.getNodeValue() != null && child.getNodeValue().indexOf(lSep) == -1
styleBox.setSelectedIndex(1)
loaded.getLoaded().getDeclaredConstructor()
!plugin.isEnabled()
p.isFeaturedProduct()
mAms.mWaitForNetworkTimeoutMs=2000
resources.getDimensionPixelSize(R.dimen.close_handle_height)
Status.createStatuseList(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
/**   * Include the name of each field when printing it. <strong>default: false</strong>  */ boolean includeFieldNames() default true; 
mPanProfile.isProfileReady()
new UnsupportedOperationException("read-only")
log.debug("In OSGi: using programmatically wired maven parser")
super.isDither()
getJSONValue(activity.getExtraData(),"title",kbTemplate.getTitle())
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis)
a.getDimension(attr,0)
newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,false)).setRAMBufferSizeMB(1.0)
getExpressionTypesFromInput(session,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
mClocks.uptimeMillis()
copy1DRangeFromUnchecked(0,mType.getCount(),i)
minutes * 60 * 1000l
!disableBluetoothContactSharing
Exception e
new Requirement(Skill.SLAYER,85)
field.getFieldInfo2()
providerConfig.setTimeout(5000)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
RawTCPInput.class
args.toArray()
id=19
p.getQuery()
(showcaseX != 1000000 && showcaseY != 1000000) && !hasNoTarget
this.posColumn=column
mImage.getFrameCount() > 1
new Paint()
mListener.setConnectionId(1)
mClearPaint.setColor(0x0000ff00)
mCallback.onInputUpdated(inputId)
info.getVoiceMailAlphaTagForSubscriber(subId,mContext.getOpPackageName())
List<String>
latch.awaitFirst()
Assert.assertEquals(expected,result)
session.closeInternal(new CloseReason(code,reasonPhrase))
id=10808
(S)capability
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
valueClass(NullWritable.class)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
getPagesAndOrPostsString(postItemsNotUploaded)
isAccessibilityFocusable()
LAST_VERSION=287
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
timeout >= 0
Proxy.getInvocationHandler(other).getClass().getName()
assertEquals(129,blockHashesMessage.getBlockHashes().size())
Assert.assertFalse(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
loadExternalSettingLinks(preferenceCategoryMore)
from >= to
(Number)array[this.index]
fragmentEntryPersistence.countByG_FCI_S(groupId,fragmentCollectionId,status)
JsonObject.createObjectMapper().getFactory()
proto.getRootRelativePath()
!crawlId.equals("-all") && crawlId.startsWith("-")
data.position()
assertEquals(expected,actual)
containsString("Eclipse")
await().atMost(20,TimeUnit.SECONDS)
filter.getTickSize()
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
telephony.isRadioOn(getOpPackageName())
mAppToken.isVisible()
getListeners(listener)
mShadowDrawable != null && mSlideableView != null
ACRA.log.w(LOG_TAG,"Could not delete report : " + files[i])
!proportional
Log_OC.e(TAG,"Unhandled conflict decision " + decision)
assertEquals(13,handler.getErrors().size())
String.format("Cannot resolve placeholder '%s' in value '%s'",placeholder,value)
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
mActiveAgents.remove(info)
cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
LOG.error("Failed to register State Store bean {}",e.getMessage())
selenium.isElementPresent("link=Control Panel")
new DeleteOptions.Builder()
mMccStr == null
new Rect(left,top,right,bottom)
logger.debug("{} {}",errorCode,message)
System.currentTimeMillis() + 10000
LOG.error(getName() + " caught: ",e)
callContactItem.setText(detail.getContactAddress())
Integer.parseInt(tokens[3])
sTestCaseCounter == 0
GridGgfsTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
String.format("%s/view/instances;_since=%d;state.name=running;tags.key=owner;" + "_expand:(instanceId,tags:(key,value))",eddaClient.getBaseUrl(region),startTime,BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY)
inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 && evt.getButtonIndex() <= 2
@Nullable
!ON_TOP
annotationHelper.printAnnotationError(element,"%s annotated element should have only one constructor")
anyInt()
Long.toString(bitstampOrder.getId())
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString(),"-Xlinker","-rpath","-Xlinker","@loader_path/Frameworks")
attribute.getDefinition().getMarshaller()
return mChangingAppearingDelay; 
mDownloadXtraDataPending=true
endFunction("delete_column_statistics_by_partition: ",ret != false,null)
new IllegalStateException()
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,true)
new Paint()
new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(),route,null,list)
selenium.isElementPresent("link=Control Panel")
new IllegalStateException("UTF-8 not supported!")
shard.idCache().onRemoval(readerCache.sizeInBytes())
public Object getKey(){   return this.key; } 
loaded.getLoaded().getDeclaredConstructor()
conversation.getContactJid().split("/",2)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
(P)in.readOptionalNamedWriteable(PersistentTaskParams.class)
InvokerHelper.setProperty(target,"layout",answer)
row == null || row.size() == 0
BufferUtil.zeroBuffer(1)
SystemInfo.isWindows && (UIUtil.isUnderDarcula() || UIUtil.isUnderIntelliJLaF()) && frame instanceof IdeFrameImpl
range.getTo()
name.equals("Devices") || name.equals("UUIDs")
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
t != null && t.st == ST.LABEL
cc.getLazy()
stopwatch.elapsed(MILLISECONDS)
stepLightIdleStateLocked("s:shell")
TimeUnit.SECONDS.toMillis(5)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
invalidate(true)
UpgradeStepRegistrator.class
configurable.apply()
Map<String,Object>
/**   * @author Vitaliy.Bibaev  */ public interface TerminatorStreamCall extends StreamCall, TypeBeforeAware {   @NotNull GenericType getResultType(); } 
PoolResources.elastic("tcp-client-pool")
miniBatchSize[i]
settings.isShowExcludedFiles() == isShowExcludedFiles() && settings.isUseFileNestingRules() == isUseFileNestingRules()
LOG.error(getName() + " caught: ",e)
typeDefinition.isEnum() || typeDefinition.isInterface() || typeDefinition.isAnonymous()|| typeDefinition instanceof GrTypeParameter
BROKER_PORT=11092
delegates.tabs.makeTabName(jobMeta,false)
from > to
public Integer getId(){   return id; } 
RepositorySpoonStartExtensionPoint.class
ResponseEntity<Object>
new Text(this.comboComposite,SWT.READ_ONLY)
selenium.isElementPresent("link=Control Panel")
10 * 60 * 1000L
Boolean.parseBoolean(attrValue)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
defaultMappingsDir.exists()
hasMatch=false
pendingCommit.createBackupSegmentInfos(true)
temp.requestFocusInWindow()
mSearchFab.setScaleY(0.0f)
logger.isInfoEnabled()
new MonoWhen(true,a -> Tuples.fromArray((Object[])a),p1,p2,p3)
getNode(indexConfigPrefix + "/nrtMode",false) == null
-2
VERSION_META_ARRAY=1
paymentStateContext.getPaymentInfoPlugin() == null || paymentStateContext.getPaymentInfoPlugin().getStatus() == null
!url.isEmpty()
mValues[8]
!mIsOnInnerCircle && hour != 0
!isEnabledTracker() || sessionURL == null
imeWin.getFrameLw()
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
maxTotalConnections <= 0
LOG.warn("Failed to get next entry from " + jarFileName + ": "+ ioEx)
Boolean.parseBoolean(this.getOptional("kylin.query.escape-default-keyword","false"))
disable2ForUser(what,token,pkg,mCurrentUserId)
@NotNull T statement
checkNotNull(getPropDefFromClass(superType,pname),"getPropDefFromClass(%s, %s) returned null",superType,pname)
123 + (USE_OLD_HISTORY ? 1000 : 0)
writer.close()
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
ServiceLoader.load(ReportingAdministrator.class,getClass().getClassLoader())
value.getType().getName()
font.draw(batch,results,20,300)
super.onActivityCreated(state)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
servletPath.equals("/") || servletPath.equals("/*")
new Paint()
LOGGER.error("runCommand error: " + ex.getMessage(),ex)
parcel.writeString(mViewIdResourceName)
!AtmosphereRequest.class.isAssignableFrom(request.getClass())
preserve.asString()
lock.isHeldByCurrentThread()
appName != null && searchManager.getSearchableInfo(appName) != null
model == null
propValue == null || CommonUtils.equalObjects(propValue,defValue)
ensureYellow()
Toolkit.class
15 * 60 * 1000
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)
mAdapter.unregisterDataSetObserver(mObserver)
sublistsProperty.get().stream()
rematchAllNetworksAndRequests(networkAgent,oldScore)
final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider(); 
sharedOptsCount.containsKey(thread)
errorMessage.contains(" is deprecated")
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
onCreateView(context,appWidgetId,appWidget)
getTestName(true)
mSearchInput.setFocusableInTouchMode(focusable)
Trans != NO_TRANSPOSE
CvsVfsUtil.findFileByIoFile(targetFile)
!mKey.equals(other.mKey)
s.createTextMessage()
connection.onIdleExpired()
type.getDeclaredConstructor()
parameterAnnotations++
mSyncStatus.valueAt(i)
AbstractAegisProvider.clearContexts()
getConfigurables()
authManager.setupCredentials(client,url,credentialsProvider,LOCALHOST)
getRepoUrl().equals(gitHubRepo.getRepoUrl()) && getBranch().equals(gitHubRepo.getBranch())
logger.debug("copy {} to {}",srcFile.getAbsolutePath(),destPath)
Number[]
field.getType()
mCurrentDate.get(Calendar.MONTH) != month
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
targetY - orginY
Color.blue(color)
logger.trace("Retreiveing door data")
@Nullable Exception cause
statistics.addGetTimeNanos(System.nanoTime() - start)
!allowPrivate.isNull()
children == null
case 16: 
expandableView.getIntrinsicHeight()
new Requirement(Skill.FARMING,63)
FiltersTopComponent.findInstance().getUiModel().getSelectedRoot()
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
Conv2DConfig.builder().kH(kernel[0])
type.getDeclaredConstructor()
new TextPaint()
final LongAdder8 sum=new LongAdder8(); 
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false,1)
net.getLayerWiseConfigurations()
Collection<SkyKey>
Integer.parseInt(displayIdStr)
this.messageService.monoPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
boneIndexes.size() > 0 && vertexGroups.size() > 0
result.whenComplete((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
d.isObjectVisible(tag,val,zoom,type,nightMode)
Math.min(maxReturned * 2,maxRows)
SC_DUPLICATE_FILE_EXCEPTION=490
new NextOccurrenceAction(editorSearchComponent,editorSearchComponent.getSearchTextComponent(),true)
id=10831
addView(root,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
hashInd != -1 && hashInd < 8
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).executeUpdateDelete(wrapper)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
_log.warn(ioe,ioe)
selenium.isElementPresent("link=Control Panel")
disable2ForUser(what,token,pkg,mCurrentUserId)
builder != null
mActionBarTop.getVisibility() != GONE
caught.isArrayPattern()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message),supplier.get())
stackIterator.remove()
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)
selectNext(currentCellPanel,false)
chunk.split("%n",-2)
Long.parseLong(deadline)
req.getContentLengthLong()
CodeStyleSettings.class.getField(name)
lookup.isSelectionTouched() || !onExplicitAction
getConnectTimeout()
sourceHeight > 0
Collections.singletonList(pi)
schemeSpecificParts != null && data != null
stream.rstStream()
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
myScopeSlider.setValue(3)
DEBUG_DRAG=false
world.setBlock(x,y,z,targetID,targetMeta,2)
sDefaults.putBoolean(BOOL_SHOW_CDMA_CHOICES,false)
InetAddress.getLocalHost()
((IEnergyHandler)source).extractEnergy(o.getOpposite(),energyExtracted,false)
headers.getCommand()
new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END)
proxy == null
selenium.isElementPresent("link=Control Panel")
ScanResult.is5GHz(frequency)
System.currentTimeMillis()
lock.isHeldByCurrentThread()
IndicesOptions.fromOptions(true,false,true,false)
parsedResult.getType()
ListWithDefault<T>
HotSpotGraalRuntime.getInstance().lookupType(arguments.get(index),(HotSpotResolvedJavaType)accessingClass,false)
clazzes.put(name,clazz)
StringBuilder result=new StringBuilder(); 
60L + 120L
hasCapability(GPS_CAPABILITY_MSB)
!fixedValues
mAnswer.setBackground(null)
(CounterCell)cell
ENCODED_ZONE_ID=1
tagService.getTagsAsString(task.getId(),true)
loaded.getLoaded().getDeclaredConstructor()
process.getErrorStream()
service.handlePinMmiForPhoneAccount(accountHandle,dialString,mContext.getOpPackageName())
conn.setTargetDecoration(srcDec)
ddmStructureLocalService.fetchStructure(dlFileEntryType.getGroupId(),"auto_" + fileEntryTypeId)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
constraintSystem.getTypeParameterDescriptors()
Long.parseLong(args[1])
logger.fine("Moving functions + variable into deeper modules")
pw.print(ps.getInstantApp(user.id))
myNameDefiners == null
Exception t
context == null || context == EGL_NO_CONTEXT
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,1,mUserId)
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
disable2ForUser(what,token,pkg,mCurrentUserId)
log.debug("mlocking " + file + " with length "+ length)
new RuntimeException("Error while creating the data flow plan for an iteration: The iteration end was not specified correctly.")
CompilerDirectives.inCompiledCode() || forceNulling
new ClosureCodeRemoval(compiler)
LOGGER.warn("Could not execute paste",ex)
String className=""; 
assertEquals("Unable to open ''.",iter.next().getMessage())
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
DEBUG=false
settings.setWorkersEnabled(false)
rawCache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
version >= 2
"*********** Traced requests text saved to " + currentTextFile + ".txt"
num.set(j,numbers.get(keys[j]))
mConnectionById.containsKey(callId)
123456789 * 2
proxyFactory.createClass().getDeclaredConstructor()
_typeSettingsProperties.toString()
mMccStr == null
loaded.getLoaded().getDeclaredConstructor()
currentPosition < input.size() && (next=this.input.get(currentPosition++)) != null
MARKER_FILE_VERSION=3
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
fileInfo.getUfsPath()
sessionAboutToChange(session)
w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER
PATH.getPath()
mPreferences.getBoolean(CLASSIC_NOTIFICATION,false)
val > mMaxValue || result.length() > String.valueOf(mMaxValue).length()
priorityWayEncoder.getBits()
StringBuilder buffer=new StringBuilder(); 
4 * Constants.KB
writer.valueNull()
StringBuilder buffer=new StringBuilder(); 
new DefaultGoApiResponse(500)
structuralLock.isHeldByCurrentThread()
bits2[1]
Throwable e
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false,runtimeOnlyFlags)
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,false,"isAppInactive",null)
public class XpathRegressionNestedForDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
150 * 1024 * 1024L
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).subscriberContext(withUser)
args != null && args.size() != 0
volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.getMountUserId() == userId
createProject(path,creationPlace,false)
doNotUseAnimations ? 1 : ZOOM_MOVE_ANIMATION_TIME
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
cf.setInMemory(false)
WordPress.getCurrentBlog().getLocalTableBlogId()
plugin.getKey()
VERSION=42
findCodecForFormat(true,format)
info.crashInfo.stackTrace.length() > 30000
tracesDir.mkdirs()
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,mContext.getOpPackageName(),callbackIntent)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
websocketComponent.setMaxThreads(20)
filters={XSSHtmlFilter.class}
Integer.parseInt(attrValue)
Integer.parseInt(attrValue)
(filterMap.getDispatcherMapping() & FilterMap.FORWARD) != 0
logger.warn("Table spec retrieval failed, couldn't find table spec: " + modelName)
JobQueueUtils.getFeedbackQueueName(jobClientNodeGroup)
Throwable e
LOG.debug("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals("bind")
new Paint()
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope,Property.Filtered)
propertyDescriptor.setType(inType,type,Collections.<TypeParameterDescriptor>emptyList(),DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor),ReceiverDescriptor.NO_RECEIVER)
new KsqlException(e.getMessage(),e)
e != null && getActivity() != null
origKey + 100
new GridLayout(0,1,0,4)
reportDrawNeeded=true
assertThat(client).replicationController("doesNotExist").hasName("fabric8-console-controller")
List<Integer>
VDBG=false
view.switchMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
mError == null
permissions=256
!entry.getKey().equals(name)
@Override public void headersEnd(int streamId) throws ConnectionException {   Stream stream=getStream(streamId,true);   StreamProcessor streamProcessor=new StreamProcessor(stream,adapter,socketWrapper);   streamProcessor.setSslSupport(sslSupport);   socketWrapper.getEndpoint().getExecutor().execute(streamProcessor); } 
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(hardLinkFile)
getDefaultCountry()
typeSettingsProperties.toString()
_connector.getResponse("GET /foo HTTP/1.0\n\n")
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
fileList == null || fileList.isEmpty()
Exception e
_ddmStructureLocalService.fetchDDMStructure(structureId)
lastDot >= 0 && lastDot + 1 < fullName.length() && ((PsiDirectory)element).getName().equals(fullName.substring(lastDot + 1))
LocaleUtil.getSiteDefault()
retriever.getFrameAtTime(-1)
ConcurrentHashMap<String,Channel>
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDh,unrotDw)
varX("name",ClassHelper.STRING_TYPE)
new Vector2(1,0)
CellNames.simpleDense(SuperColumns.scName(name))
Util.SDK_INT <= 26
status.getRole()
@ConditionalOnEnabledHealthIndicator("jms")
address.getHost()
this.privateKeyLocation
Integer.parseInt(bottomStr)
return true; 
newChain.getText()
win.isDrawnLw() || win.hasAppShownWindows()
createAggregator(aggregationBuilder,indexSearcher,fieldType)
assertInCompletionList("<caret>UIView","animationDidStart","animationDidStop:finished:")
@Override protected Text setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
this.jumpSpeed=jumpSpeed
IccUtils.cdmaBcdByteToInt((byte)0x8c)
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer","jenen")
i >= 1
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
lbHttpSolrServer.setAliveCheckInterval(1000)
LOGGER.warn("Could not execute exportToClipboard",ex)
new SAXException(e.getMessage(),e)
client == null || client.getGameState() != GameState.LOGGED_IN
RedisRunner.shutDownDefaultRedisServerInstance()
holder.setGone(getLoadingViewId(),visible)
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
type.getDeclaredConstructor()
configTimeRegionFactoryHolder.remove()
LOGGER.warn("Could not perform drage and drop",nfe)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
Ignition.start()
OptionSpec<Long>
context == null || context == EGL_NO_CONTEXT
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title1,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,null,serviceContext)
result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION
attributes != null && !attributes.isEmpty()
selenium.isElementPresent("link=Control Panel")
HashMap evaluator=new HashMap(); 
getDefaultCountry()
remaining == 0
context.containsMetaEntity(fqcn)
shuffleWithNonExistentUuids(project2.uuid(),project1.uuid())
createUrl(Url.removeTail(url.toDecodedString()),false)
ImmutableList<TypedVar>
mPanProfile.isProfileReady()
return 4093; 
!resources.isEmpty()
MeasureTypeFactory.getUDAFs()
List<Object>
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
@GUIMenuSortOrder(2)
return mAppearingDelay; 
segments.add(segment)
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
receiverStatusListener.waitForEvent(12000,3)
id=16501
CodeStyleManager.getInstance(myProject).reformatTextWithContext(file,ranges)
loader.start()
currentNetworkInfo != null && currentNetworkInfo.getState() == NetworkInfo.State.CONNECTED
getServiceForUserLocked(userId)
@Override public String apply(String json) throws Exception {   Controller controller=createController();   return controller.applyJson(json); } 
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
this.getFieldValue().orElse(null)
FileUtil.loadFile(conflictsFile,CharsetToolkit.UTF8,true)
new DeadCodeEliminationPhase(Optional)
getImportRootPath()
loaded.getLoaded().getDeclaredConstructor()
assertEquals("stream",server.mode())
selenium.isElementPresent("link=Control Panel")
clipItem.coerceToText(mContext)
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
disable2ForUser(what,token,pkg,mCurrentUserId)
sr0.getValue().f2
selenium.isElementPresent("link=Control Panel")
glyph.setSize(16)
!BlockStoreContext.INSTANCE.hasLocalWorker()
blockRoot.getToken() == null || blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
i=0
Strings.isNullOrBlank(password)
public Builder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
DeprecationLogger.nagUserWith("<someIdeTask>.beforeConfigured is deprecated! Replaced by beforeMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
gl.marginHeight=0
GridNode sndNode
application.getBaseContext()
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,Integer.MAX_VALUE,1)
new ClientException(ClientException.ErrorType.CONFIGURATION,"Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:" + niwsClientConfig.getProperty(CommonClientConfigKey.NIWSServerListFilterClassName),e)
TimeUnit.SECONDS.toMillis(timeoutSeconds)
line.length()
c == '[' && !levelTokens.empty()
selenium.isElementPresent("link=Control Panel")
new IllegalStateException("Invalid state: iterator has " + seqRRs.size() + " sequence readers but "+ maxSeqReaders+ " RDDs of sequences - List<List<Writable>> were provided")
p.isFeaturedProduct()
LinkageError e
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
return true; 
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
getBeanClass(factoryClassName).getDeclaredMethods()
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,mHandler,new UserHandle(mUserId))
context == null || context == EGL_NO_CONTEXT
target == null || !target.equals(element)
future.channel().writeAndFlush(request)
serviceTester.systemRunning()
ArraySet<UidRange>
loaded.getLoaded().getDeclaredConstructor()
getCluster().getDescription().getAny()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
id=10862
!isObjectMethod(method) || method.getName().equals("toString")
LinkedHashMap<String,Operator<? extends Serializable>>
grammar.getTokenDisplayNames()
locationServicesStatus.isLocationProviderRequired()
(low + high) >>> 1
lookup.getReportingTaskByType(requestReportingTask.getType())
add(5309,1,0)
killBillClient.completePayment(completeTransactionWithTypeAndKey,pluginProperties,createdBy,reason,comment)
deserializerForCreator(config,enumClass,factory,null,null)
pTMXTiledMap.getTileHeight()
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
copyProps.remove(PoolingConnectionProvider.POOLING_PROVIDER)
new HashMap<>()
tz.getOffset(System.currentTimeMillis())
next + SEPARATOR.length()
SCAN_STATUS_PARTIAL=1
Log_OC.e(TAG,"\t file is NULL")
Environment.getOemDirectory()
unlockInner(lockedLocks)
_buildProjects(gradleProjectDir,mavenProjectDir,gradleOutputDir,mavenOutputDir,_GRADLE_TASK_PATH_BUILD)
testBadSentence(origBadSrcSentence,suggestedCorrection,expectedSrcMatchStart,expectedSrcMatchEnd,rule.getSrcRule(),lang,srcTool)
Object useGrouping=properties.get(NumberFormatSample.PROP_USE_GROUPING); 
attr("heuristic_label_expansion",BOOLEAN).value(false)
final TicketGrantingTicket tId=getCentralAuthenticationService().createTicketGrantingTicket(TestUtils.getCredentialsWithSameUsernameAndPassword()); 
base.length() - 5
value.equalsIgnoreCase("strict")
E edge
isPrettyLogging() && (contentType != null && contentType.indexOf("xml") >= 0) && cos.size() > 0
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
rightTuple.setStagePrevious(last)
new LiferayLocalRepository(repositoryService,dlRepositoryLocalService,dlRepositoryService,repositoryId)
GL20.glUniform1iv(location,v)
mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
isSubDelimiter(c)
DLFileEntryTypeFinderUtil.filterFindByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
getResultHandler(result).handleResult(exchange,result).onErrorResume(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
user.isAuthorized("essentials.world." + user.getWorld().getName())
ComponentOption that=(ComponentOption)o; 
LOG.error("Exception occurred during processing request: {}",e.getMessage(),e)
new IndexWriter(ram,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
sourceNodeTextData != null
assertThat(response).isEqualTo("Ok.\n")
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getDeviceId(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
newUiPrefs.enableStyleDiagnostics()
expected.getAll()
this(client,path,true,false,Integer.MAX_VALUE,Executors.newSingleThreadExecutor(defaultThreadFactory),false,false,new DefaultTreeCacheSelector()); 
buffer.indexOf(partToMatch,indexOf + replacement.length())
Math.min(desiredTileWidth,desiredTileHeight)
Clock.getTime() - ourLastTimePressed.get() < 100
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available),FormatUtils.getSizeFromBytes(quota - used - available))
destroy.isInternal()
shortComment.lastIndexOf(')')
ServerToClientMessage.instantiateMessage(makeChanges,DateUtilities.now())
m.size()
new Handler().postDelayed(new Runnable(){   @Override public void run(){     new AboutDialog().show(getSupportFragmentManager(),"ABOUT_DIALOG");   } } ,300)
message.getPresence().getResourcepart()
SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode())
new String(payload,"UTF-8")
webRequest.getNativeResponse(HttpServletResponse.class)
in.readByte()
new Type(null,"java.lang","java.lang.Object",tableName)
StringBuilder sb=new StringBuilder(); 
psiFile == null || psiFile instanceof PsiCompiledElement
libraryModel::commit
player.getDisplayName()
parser.nextText()
mValues[8]
/**   * Specify an ending condition for this trigger. If the  {@code until} fires then the combinationfires. <p>The expression  {@code t1.orFinally(t2)} fires every time {@code t1} fires, and finishesas soon as either  {@code t1} finishes or {@code t2} fires, in which case it fires one last timefor  {@code t2}. Both  {@code t1} and {@code t2} are executed in parallel. This means that{@code t1} may have fired since {@code t2} started, so not all of the elements that {@code t2}has seen are necessarily in the current pane. <p>For example the final firing of the following trigger may only have 1 element: <pre>  {@code Repeatedly.forever(AfterPane.elementCountAtLeast(2)) .orFinally(AfterPane.elementCountAtLeast(5))} </pre><p>Note that if  {@code t1} is {@link OnceTrigger}, then  {@code t1.orFinally(t2)} is the sameas  {@code AfterFirst.of(t1, t2)}.  */ public OrFinallyTrigger orFinally(OnceTrigger until){   return new OrFinallyTrigger(this,until); } 
setting.detach(this)
Schema.builder().addNullableField("id",Schema.FieldType.INT32)
sqlRouteResult.getSqlParsedResult().getType()
fieldType.storeTermVectors()
new PercentType(percent)
public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
SCAN_STATUS_PARTIAL=1
LOG(5)
object.getDataSource()
getter.getType()
new StringBuilder(238)
Arrays.asList("jacocoant","sonarqube-ant-task","hsqldb","activemq-all","mina-core","ftplet-api","ftpserver-core")
parent == null || !parent.isValid()
setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
MainActivity.class
tracesDir.mkdirs()
rulesJars.exclude(excludedJar)
varX("name",ClassHelper.STRING_TYPE)
new RunAutomaton(automaton,false)
ContextNameConverter.class
_log.warn(ioe,ioe)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
loaded.getLoaded().getDeclaredConstructor()
platformVersion < M
si.deliveryCount > 1
exclBuilder.grow(numExcludedDocs)
JMeterUtils.getPropDefault("proxy.cert.validity",90)
/**   * The lower value in the range.  * @return the lower value in the range.  */ T getFrom(); 
new Rectangle(5,2,ERROR_ICON_WIDTH,ERROR_ICON_HEIGHT)
ATLAS_MAP_ENTRY_FIELD_COUNT=3
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
messageParts.remove(mpi)
new DatabaseFormatterDb2()
getTelecomService().getVoiceMailNumber(accountHandle)
listener.iterationDone(valueNet,valueIterationCount,valueEpochCount)
assertEquals(avDegree,1.0)
started.compareAndSet(true,false)
hasPrevChange()
new IndexWriter(ramDir1,new StandardAnalyzer(),create,IndexWriter.MaxFieldLength.LIMITED)
mEnginesHelper.isEngineEnabled(mRequestedEngine)
name.equalsIgnoreCase(pkg.getName())
subscriptionSender.setContextAttribute("[$CONTENT_TITLE$]",contentTitle,false)
!mMediaPlayer.isPlaying()
length == -1 || length > 4
k < FILES
LOGGER.isDebugEnabled()
ColorProperties.getColor("sliderGradientLight")
System.currentTimeMillis() / 1000L
startServer(new HttpServlet(){   @Override protected void doGet(  HttpServletRequest req,  HttpServletResponse resp) throws ServletException, IOException {     if (req.getHeader("Via") != null)     resp.addHeader(PROXIED_HEADER,"true");     if (target.equals(req.getRequestURI())) {       if (query.equals(req.getQueryString())) {         resp.setStatus(200);         return;       }     }     resp.setStatus(404);   } } )
surfaceHeightFacet.getWorld(pos.getX(),pos.getY())
lp.width != panelWidth || lp.gravity != panelGravity
type == null || type == Object.class
resultMetaData.getColumnLabel(i)
target.getDestinationLinkAddress()
/**   * Created by Marcin on 2015-12-19.  */ public class Chip extends LinearLayout {   private ImageView icon;   private TextView title;   private ImageView close;   private OnRemoveListener onRemoveListener; public interface OnRemoveListener {     void onDismiss();   }   public Chip(  Context context){     super(context,null,R.attr.carbon_chipStyle);     initChip(null,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs){     super(context,attrs,R.attr.carbon_chipStyle);     initChip(attrs,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr){     super(context,attrs,defStyleAttr);     initChip(attrs,defStyleAttr);   }   @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){     super(context,attrs,defStyleAttr,defStyleRes);     initChip(attrs,defStyleAttr);   }   private void initChip(  AttributeSet attrs,  int defStyleAttr){     inflate(getContext(),R.layout.carbon_chip,this);     title=(TextView)findViewById(R.id.carbon_chipText);     icon=(ImageView)findViewById(R.id.carbon_chipIcon);     close=(ImageView)findViewById(R.id.carbon_chipClose);     close.setOnClickListener(new OnClickListener(){       @Override public void onClick(      View v){         if (onRemoveListener != null)         onRemoveListener.onDismiss();       }     } );     if (attrs != null) {       TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.Chip,defStyleAttr,0);       setCornerRadius((int)a.getDimension(R.styleable.Chip_carbon_cornerRadius,0));       setText(a.getString(R.styleable.Chip_android_text));       int iconRes=a.getResourceId(R.styleable.Chip_carbon_icon,0);       if (iconRes != 0) {         setIcon(iconRes);       }  else {         setIconVisible(false);       }       int color=a.getColor(R.styleable.Chip_android_background,0);       setBackgroundColor(color);       a.recycle();       Carbon.initElevation(this,attrs,defStyleAttr);     }   }   public void setText(  String text){     if (text != null) {       title.setText(text);       title.setVisibility(View.VISIBLE);     }  else {       title.setVisibility(View.GONE);     }   }   public void setText(  int resId){     setText(getResources().getString(resId));   }   public String getText(){     return (String)title.getText();   }   public View getTitleView(){     return title;   }   public void setIcon(  int iconRes){     icon.setImageResource(iconRes);     setIconVisible(iconRes != 0);   }   public void setIcon(  Drawable drawable){     icon.setImageDrawable(drawable);     setIconVisible(drawable != null);   }   public void setIcon(  Bitmap bitmap){     icon.setImageBitmap(bitmap);     setIconVisible(bitmap != null);   }   public Drawable getIcon(){     return icon.getDrawable();   }   public View getIconView(){     return icon;   }   public void setIconVisible(  boolean visible){     icon.setVisibility(visible ? VISIBLE : GONE);     setPadding(visible ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingTop(),getPaddingRight(),getPaddingBottom());   }   public void setRemovable(  boolean removable){     close.setVisibility(removable ? VISIBLE : GONE);     setPadding(getPaddingLeft(),getPaddingTop(),removable ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingBottom());   }   public boolean isRemovable(){     return close.getVisibility() == VISIBLE;   }   public void setOnRemoveListener(  OnRemoveListener onRemoveListener){     this.onRemoveListener=onRemoveListener;   } } 
checkField(clazz,"octets")
new AnAction("Left | Right","",VcsUtil.ourNotDot){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=true;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourDot : VcsUtil.ourNotDot);   } } 
selenium.isElementPresent("link=Control Panel")
uploadArchivesTask.finalizedBy(updateFileVersionsTask)
getChildren().add(0,tabsContainerHolder)
cursor.shouldRetry()
stmt.execute(sqlQuery)
selenium.isElementPresent("link=Control Panel")
List<Library>
logger.info("OAuth clients imported: " + clients)
synchronized (mAuthorities) {   writeStatusLocked(); } 
attributes.getAllFlags()
mono.switchIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Super extra cool this annotation!!!")
superClass == Object.class || superClass == null
_typeSettingsProperties.toSortedString()
oldestInflightEntry == null
mPm.getUserBadgedIcon(icon,new UserHandle(userId))
P params
logger.info("No file to compact for user defined compaction")
getCurrentTab().handleDiscourseCopy()
assertEquals(2,visitor.getTables().size())
new ProgressDialog(this,R.style.ProgressDialogTheme)
new WorldPoint(2487,3005,0)
new IllegalStateException("Advertising can't be both connectable and scannable")
evaluate("value = read_config('foo', 'bar')").moduleLookup("value")
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName,database.escapeObjectName(schemaName,Schema.class),database.escapeObjectName(tableName,Table.class))
-1
isHoverable() || isHovered()
@Nullable
LOGGER.info("Generated {} star-tree records from {} segment records",numStarTreeRecords,numSegmentRecords)
!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
dst.equals(zr)
new HashSet<>(0)
mService.addOrUpdatePasspointConfiguration(config)
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","No data returned")
currentBlog.getLocalTableBlogId()
setSelectedEditor(selectedComposite,false)
new RuntimeException(e)
new VersionMismatchLogRequest()
mPackageUsage.write(false)
Utils.writeUtf8File(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
minPriority == null ? 0 : minPriority
Long.parseLong(timeString)
Optional.ofNullable(authorizedPeers)
private RGB color; 
FBUtilities.getBroadcastAddress()
getBoolean(ASYNC_CLIENT + "acceptAnyCertificate",false)
end + 1
new EnterSelectionDialog(shell,err_lines,Messages.getString("ChefLog.Dialog.ErrorLines.Title"),Messages.getString("ChefLog.Dialog.ErrorLines.Message"))
Preconditions.checkNotNull(thirdOperand)
Thread.sleep(1000)
IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(),jpa,options)
mChildrenExpanded ? mDividerHeight : mChildPadding
mPositionScroller.startWithOffset(position,offset)
Exception e
ViewWebContentAssignedToMyRolesDueDateDetailsTest.class
mat2.equals(mat1)
Intent.ACTION_LOCALE_CHANGED.equals(action) || Intent.ACTION_TIMEZONE_CHANGED.equals(action)
dragNode.isNodeDescendant(target)
type.getDeclaredConstructor()
VERSION_META_ARRAY=1
LineNumberConvertor.Builder.createRight(data.getLines())
StringBuffer sb=new StringBuffer("RuleFlowProcessInstance"); 
mActiveAgents.remove(info)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
registerTags(ACTION_REFERENCE_PROVIDER,"action",NAMESPACE_TAGLIB_STRUTS_UI,"form","submit","url")
String message
!getLocationEnabled()
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
_log.warn(ioe,ioe)
!(topicParts.length > 2) || !topicParts[0].equals(TOPIC_PREFIX)
new IllegalStateException("Legacy advertising can't include TX power level in header")
(dir == null) || baseDir.equals(dir)
value < maximumValue
factory.getDeclaredConstructor()
triggerProto.getAfterEndOfWindow()
getJSONValue(activity.getExtraData(),"title",kbTemplate.getTitle())
value.getType().getName()
Observable.interval(0,1,TimeUnit.SECONDS)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
new GridBagConstraints(1,1,1,1,0.3,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,15),0,0)
states.length >= 3
count > 0
new StringBuilder()
mAttributes.getAllFlags()
LOGGER.warning("Unable to load image using AWT loader!")
LOG.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24))
getBaseType()
centerButton(mButtonNegative)
(halfHeight / inSampleSize) > reqHeight || (halfWidth / inSampleSize) > reqWidth
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
list.append(ai)
"0.0.0.0:" + DEFAULT_NM_COLLECTOR_SERVICE_PORT
format.getName()
@NonNull BluetoothDevice bluetoothDevice
config.getIdleConnectionInPoolTimeoutInMs()
TransitiveInfoCollection current
ufsPath.toString()
getPointer().getShort(0)
pos < end
selenium.isElementPresent("link=Control Panel")
((SQLDataSource)dataSource).getSQLDialect().storesUnquotedCase()
type.getCanonicalText(false)
LOG.warn(e)
new InterpreterLaunchContext(getJavaProperties(),option,interpreterRunner,id,group)
context.getAssets().addAssetPathAsSharedLibrary(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
anyInt()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
!mMediaPlayer.isPlaying()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
LOG.trace("removing shm " + shm)
GitWorkingDirectoryFactory.newGitWorkingDirectory(portalGitWorkingDirectory.getUpstreamBranchName(),JenkinsResultsParserUtil.getProperty(portalReleaseProperties,"lp.plugins.dir"),"liferay-plugins-ee")
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
selenium.isElementPresent("link=Control Panel")
LOG.warn("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
Environment.getOemDirectory()
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope)
mAdapter.unregisterDataSetObserver(mObserver)
actor.addCaptureListener(listener)
cfstore.markCurrentSSTablesReferenced()
settings.getPosition()
Objects.hash(expressions,withOrdinality)
win.isDrawnLw() || win.hasAppShownWindows()
new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource(),context.getRuleBase().getConfiguration().isAlphaMemory(),context.getRuleBase().getConfiguration().getAlphaNodeHashingThreshold())
selenium.isElementPresent("link=Control Panel")
new WelcomeScrollablePanel(new GridBagLayout())
colon > 0
mock.expectedMessageCount(1)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
logger.trace("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
mTextColorLink.getColorForState(ds.drawableState,0)
Http11Processor.class
mState != STATE_INITIALIZED
dataType.toString()
paymentStateContext.getPaymentInfoPlugin() == null || paymentStateContext.getPaymentInfoPlugin().getStatus() == null
StrictMath.log(docCount)
assertTrue(message.getPayload() instanceof Collection<?>)
list.getAdapter().getCount() - 1
Long.parseLong(nfcid2,16)
getExecutionContext()
softClassCache.putIfAbsent(beanClass,results)
selenium.click("//li[4]/span/a/span")
type.getDeclaredConstructor()
mAlpha.cancel()
ChannelBuffers.wrappedBuffer(request.getByteData())
maxAlongDimension.isVector()
Thread.sleep(1000)
mStackScroller.getChildAtRawPosition(x,y)
Class.forName(DEFAULT_IMPL,true,Thread.currentThread().getContextClassLoader())
GuiActivator.getUIService().getConferenceChatManager().createChatRoom(chatRoomName.trim(),getSelectedProvider().getProtocolProvider(),new ArrayList<String>(),"",false,true,true)
checkCall(receiver)
testPackage.getFormattedSuccessRate()
mInstalld.createProfileSnapshot(appId,packageName,codePath)
/**   * 是否搜索模块类同包以及子包的其他类  */ boolean scanPackage() default true; 
TypeEvalContext.slow()
mDisplayContent.mDividerControllerLocked.getWidth()
System.out.println("JVM options:")
originalRemoteAddr != null
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName,database.escapeObjectName(schemaName,Schema.class),database.escapeObjectName(tableName,Table.class))
condition.signalAll()
mode.getFormattedName().toLowerCase(Locale.ENGLISH)
this.optimizedDispatch || isSlave()
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
hashingOutputStream.write('\n')
Class<CommitColumnClass>
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
RecentsActivity.EVENT_BUS_PRIORITY + 2
mEditSessionQuestions.setText(String.valueOf(repLimit))
application.getBaseContext()
ComplexityWidget.class
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName,database.escapeObjectName(schemaName,Schema.class),database.escapeObjectName(tableName,Table.class))
!ON_TOP
mMccStr == null
next.getValue() == null || next.getValue().get() == null
selenium.isElementPresent("link=Control Panel")
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
Log.w(TAG,"Unable to resolve SystemUI's UID.",e)
synchronized (mLock) {   mScreenOnTime=readScreenOnTimeLocked(); } 
config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
RepositorySpoonStartExtensionPoint.class
e.toString()
checkCall(receiver)
ColorProperties.getColor("desktopBackgroundColor")
isUri(url)
Thread.sleep(1000)
classMapper.realClass(classAttribute)
holder.setGone(getLoadFailViewId(),visible)
Log.w(TAG,"read property failed, e:" + e)
DEBUG=false
new Paint(Paint.ANTI_ALIAS_FLAG)
new Paint()
UpgradeStepRegistrator.class
role.description().orNull()
dest.writeInt(mSubId)
Log.debug(this + " JVM BUG(s) - injecting delay" + _jvmFix2+ " times")
case FORWARD: 
T[]
isTouched(0.5f,1)
JDKAsyncHttpProvider.class
new URI(scheme,userInfo,server.host,server.port,path,null,null)
sslPrincipal.getName()
BlockLiquid.getFlowingBlock(material)
Thread.sleep(1000)
@Override public final NullProperty clone(){   return this; } 
!mGsmPhone.mSST.isConcurrentVoiceAndData()
t.equalsIgnoreCase(type)
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
Blocks.dirt.getUnlocalizedName()
new WorldPoint(2783,3214,0)
modelNodeInternal.asImmutable(ModelType.untyped(),null)
new int[2450]
imageView.setImageDrawable(drawable)
promise.setFailure(new ClosedChannelException())
homeListView.setSelection(0)
versionObject.getVersionBase()
builder.humanReadableField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
InsertReturningStep<R>
selenium.isElementPresent("link=Control Panel")
defaultDndAccess != null
selenium.isElementPresent("link=Control Panel")
dataType.equalsIgnoreCase("NVARCHAR") || dataType.equalsIgnoreCase("NCHAR")
profileManager.loadSettingsProfiles(settings)
!KeyEvent.isMetaKey(keyCode)
remaining == 0
node.set("persons",persons)
getClientConfig().getAddresses()
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
new Spinner(getContext(),null,R.attr.actionDropDownStyle)
camera.setMatrices()
tmpMap.size()
metadata.getClassName()
holder.addCallback(callback)
Allocation.createFromBitmap(mRS,outb,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractAclCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
ciManagement.getSystem()
Exception e
new DeadCodeEliminationPhase(Required)
filterPipeline.addFirst(new Canvas(width,height,croppingPosition))
new Notification(R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
WebServicesTestUtils.checkStringEqual("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
new TestMtpManager(getContext())
closeTo(2889.0,200.0)
mStartup || isTaskRoot()
Variable emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue); 
mIconRes != -1
array1[3]
args[1]
treeWalk.close()
mFileLength - mPos >= mBlockSize
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
Bytes.toString(tableName)
object == null
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
mgr.mergeSegments(cube,0,Long.MAX_VALUE,false)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
P extends PersistentTaskParams
Sets.newLinkedHashSet()
codeStyleManager.reformatRange(elementParent.getContainingFile(),elementParent.getTextOffset(),elementParent.getTextOffset() + elementParent.getTextLength(),true)
d.setDefaultEncoding(servletContainer.getDefaultEncoding())
GL.glGenTextures(n,textures,Memory.getPosition(textures))
a.willChangeBounds()
1
IoUtils.safeClose(connection,delegate)
sep < 0 || sep > j
checkCall(receiver)
new Bitmap(nativeInt,null,isMutable,null,density)
getEndpoint().getConfig().getIndexType()
types != null && !types.isEmpty()
LOG.info(e)
lineBuf.length() - 3
SamplingProfiler.newThreadGroupThreadSet(group)
getName()
interactor.startCommand(packageName,callback,mCommand,mArgs)
? extends CommitParents
main.call(args)
Exception t
old + 23
win.isWinVisibleLw() && !winAnimator.isAnimationSet() && winAnimator.applyAnimationLocked(transit,false)
_TestUtil.randomFixedByteLengthUnicodeString(random,fixedBytesLength)
arg1 == 1
conceptAnswer.getAnswerConcept()
buildPages.getTypesWithoutHash()
case 15: 
loc == null
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,false)
saleAdjustmentPrice.lessThanOrEqual(retailAdjustmentPrice)
mBackdrop.animate().alpha(0.002f)
entry.notification.cloneLight()
entry.cacheContentViews(mContext,notification.getNotification())
!patient.isVoided() && patient.getIdentifiers().size() == 1
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
pieces.length <= tagColumn
intervalFraction * (nextValue - prevValue)
mIam.getStackInfo(WINDOWING_MODE_FULLSCREEN,ACTIVITY_TYPE_STANDARD)
telephony.isIdle(getOpPackageName())
LogAdapter.createLog(name)
data.metadataRowMeta.getString(outputData)
Mockito.verify(mRMClient).stop()
AnnotatedElementUtils.findAnnotationAttributes(controllerType,annotType)
target.getDestinationLinkAddress()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
selenium.isElementPresent("link=Control Panel")
targetDescription.getDeclaredValueClassName()
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
are("resource1-reflections.xml","resource2-reflections.xml")
GL20.glGetActiveAttrib(program,index,256,size,typeTmp)
delegate.open(filename,grabSize,idType,highIdSupplier,maxId)
graphVersion.incNodeAndEdgeVersion()
checkIfDestroyed()
isAccessibilityFocusable()
List<Double>
valueClass(NullWritable.class)
logger.debug("An exception occurred while parsing a date : '{}'",e.getMessage())
masm.add(64,resultRegister,zr,ptr,AArch64Assembler.ShiftType.LSL,encoding.shift)
ohCache.memUsed()
r != null && passThruFields != null
sentBytesCnt.longValue()
SpatialIndexPartReader<NativeIndexValue>
((BCECPrivateKey)privKey).getD()
new TrustException("DERIVED_KEY_ERROR",e,LOG)
c * c
HiveRexUtil.simplify(rexBuilder,node)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(13)
setSDesEncryptionOnDescription(mediaType,description,null)
directoryUrl.getParameter(Constants.GROUP_KEY,"")
endPos < bufEnd
state.value == rotationLocked && state.contentDescription != null
assertEquals(4,StringUtil.countMatches(drl,"import "))
reply.getJMSCorrelationID()
bean.getCollectionTime()
getService().animateCollapseNotifications()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
localSettings.getMaxConcurrentStreams() <= activeRemoteStreamCount.incrementAndGet()
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
new IterableAlgorithmRunner(blockScanner)
MAX_ERROR_RETRIES_DEFAULT=10
assertEquals(9,tokens.size())
commitLock.unlock()
new Date(1)
new ConnectionException(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR)
c * c
new StepMeta(stepnode,transMeta.getDatabases(),transMeta.getCounters())
volume.getMtpReserveSpace() * 1024L * 1024L
mUserPaddingStart > 0
subscriptionSender.setContextAttributes("[$ENTRY_ID$]",entry.getEntryId(),"[$ENTRY_TITLE$]",entry.getTitle(),"[$ENTRY_TYPE$]",LanguageUtil.get(locale,entry.getType()),"[$ENTRY_URL$]",entry.getUrl(),"[$PORTLET_NAME$]",LanguageUtil.get(locale,(entry.isAlert() ? "alert" : "announcement")))
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logger.info("--> checking snapshot status for all currently running and snapshot with empty repository")
!isPartialResponse(message) || callback == null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)
? super IN
@TruffleBoundary private static Object parseBooleanOrNull(String s){   if ("true".equals(s)) {     return Boolean.TRUE;   }  else   if ("false".equals(s)) {     return Boolean.FALSE;   }  else {     return null;   } } 
Double.valueOf(value)
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]),null)
definition.getAllPortTypes()
request.getPathInfo()
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
v.layout(viewLeft,viewTop,viewLeft + viewWidth,viewTop + viewHeight)
mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder
checkCall(receiver)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
h.addParameters("--name-status","--first-parent","--no-abbrev","-M","--pretty=format:" + COMMITTED_CHANGELIST_FORMAT,"--encoding=UTF-8",revisionName,"--")
owner.getEnergyFrozenBalance()
DfsSearchResult.addOne(stats.totalTermFreq())
pw.print(ps.getInstantApp(user.id))
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
mConnector.execute("volume","format",vol.id,"auto")
IOException e
Log_OC.d(TAG,"Canceling all syncs for " + MainApp.getAuthority())
is(false)
assertEquals(adjustedInvoice.getAmount().compareTo(BigDecimal.ZERO),0)
final ClientState clientState=(ClientState)msg.obj; 
!isPersistent
randomAlphaOfLengthBetween(6,20)
getServiceForUserLocked(userId)
retriever.getFrameAtTime(-1)
getVoiceUsed()
new JtxTests()
getInt(DISPLAY_OPTION,1)
IGNORE("ignore")
sm.getString("namingContext.nameNotBound",name,name.get(0))
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).onErrorResume(exceptionHandler)
mFile.getStoragePath()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
3L * 1024 * 1024
loaded.getLoaded().getDeclaredConstructor()
log.debug("Can't set auto-commit state: " + e.getMessage())
getSelectedTextColor(ctx)
WeakSafeReadWriteLock strongReference
existingType != null || aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
new IllegalStateException("Invalid state: iterator has " + rrs.size() + " readers but "+ maxReaders+ " RDDs of List<Writable> were provided")
IndexReader.open(benchmark.getRunData().getDirectory())
Slog.e(TAG,sb.toString())
expiresPctx.evaluateActionQueue(workingMemory)
add(bytes)
readdirCacheBuilder.maximumSize(maxReaddirs)
selenium.isElementPresent("link=Control Panel")
DEBUG=false
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
new LeftTuple(f1,sink)
element.attributeValue("type")
mService.publish(mContext.getOpPackageName(),clientId,publishConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,true,callback,clientId))
_isPosInf(text)
readIf("READ") || readIf("FETCH")
file.isFile()
intent.putExtra(EXTRA_THEME,0)
tests.add(0,clazz.getGenericsTypes()[0].getType())
i < nodeCount
canonicalURL || !virtualHostname.equalsIgnoreCase(_LOCALHOST)
Helpers.msgLong(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
dir.getAbsolutePath()
mv.visitVarInsn(ALOAD,resultIdx)
new VideoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration))))
activityNdx <= topActivityNdx
epsilon.muli(activationDerivative)
ViewConfiguration.getMultiPressTimeout()
merge4dCnnData(labelsToMerge)
selenium.isElementPresent("link=Control Panel")
trimmedLine.contains(delimiter)
/**   * The number of public elements in this segment's region.   */ private final LongAdder8 pubSize=new LongAdder8(); 
DEFAULT_MAX_METHODS=100
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).descriptionAndTooltip(message)
sqlRouteResult.getSqlParsedResult().getType()
blog.getLocalTableBlogId()
platformVersion < M
JDBCUtils.safeGetLong(dbResult,"id")
am.getPassword(account)
String.class
group != null && this == group.mInternalConnection
@Override public synchronized AstyanaxKeyColumnValueStore openDatabase(String name) throws StorageException {   if (openStores.containsKey(name))   return openStores.get(name);  else {     ensureColumnFamilyExists(name);     AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy);     openStores.put(name,store);     return store;   } } 
CxxPlatform platform
resolvedMode.toString()
deferUpdateBounds(HOME_STACK_ID)
new Rect(left,top,right,bottom)
new Paint()
DEBUG_STARTING_WINDOW_VERBOSE || false
!inRaidChambers || event.isHidden()
child.resetRtlProperties()
assertPlanEquals(expectedPlan,actualPlan)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
-121
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
stringMap.put(entry.getKey(),valueToString(joiner,entry.getValue()))
timeFormatter.format(value)
IBinder.FIRST_CALL_TRANSACTION + 65
Exception e
minSimilar > 1
POSITIVE_Y(2)
Float.parseFloat(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
executeKeywords != null && executeKeywords.length > 0
command.getOldName()
Exception e
file.isValid() && file.getVirtualFile() != null
Throwable exception
Assert.assertEquals(_VALUE_1,_recordCacheListener._value)
state.value == rotationLocked && state.contentDescription != null
lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())
Slog.d(TAG,"showSaveLocked(): no mStructure")
id=19904
!TextUtils.isEmpty(library.getLibraryWebsite()) || !TextUtils.isEmpty(library.getRepositoryLink())
Timber.w(error)
Slog.w(TAG,"Session failed to close due to remote exception",e)
config().getDouble(BASE_PATH + "tolerance")
contains(modifier,getModifiers())
12 * ClassSize.REFERENCE
mock.setMinimumResultWaitTime(1500)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
TestSuiteEnvironment.getServerAddressNode1()
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
UpgradeStepRegistrator.class
fileShortcut.getUuid()
SafeUsagesExt2Kt.foo(a,1,"1","!")
new Double(((Integer)value).intValue())
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).subscriberContext(withUser)
Thread.currentThread().interrupt()
new GroupTest(false)
id=16700
subModule.update(persistencePackage)
@SuppressWarnings("unused")
new CompilerException(sourcePath,e.line,e.getCause())
String.format("Keyspace mismatch (found %s; expected %s)",cf_def.keyspace,ksName)
DISPLAY_TASKS_PORTRAIT + 1
mState != STATE_INITIALIZED
systemId.length()
!mIsOnInnerCircle && hour != 0
button.getButtonGroup()
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
Strings.isNotBlank(newPassword)
processSelectedKeys()
mWM.isKeyguardLocked()
mAvailablePhysicalRequestKeys == null
dynamicType.getDeclaredConstructor()
Long.parseLong(row.getValue(partitionCol).toString())
obtainMessage(MSG_TIMEOUT,state,0)
RecentsVerticalScrollView.super.removeView(view)
dockerClient.createContainerCmd("busybox")
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE| MATCH_DISABLED_COMPONENTS
containerLats.length - 2
AbstractCompactionIterable.class
Utils.convertDpToPixel(dataSet.getBarBorderWidth())
((ExecutorService)executor).isTerminated()
selenium.isElementPresent("link=Control Panel")
destinationFactory == null
Boolean.parseBoolean(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
getPlayerPosition().y
compensationRange.contains(compensation)
wrapper.joinWithTimeout()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
TypesUtil.isAssignable(component,ltype,expression)
format == null || "".equals(format)
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
decoderLayerSizes == null
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
JOINER.join("java_binary(","    name = '%s',","    srcs = glob([ 'com/example/generated/*.java' ]),","    main_class = 'com.example.generated.Main',","%s",")","")
String key
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
dis.readFully(serializedData,0,length)
new FileInputStream(engineSocket.getFileDescriptor(),true)
b == null
Nd4j.createUninitialized(forwardPassShapes[i])
specFactory.createInputFilesSpec(value)
@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
new HotSpotDebugConfig(GraalOptions.Log,GraalOptions.Meter,GraalOptions.Time,GraalOptions.Dump,GraalOptions.MethodFilter)
profile.getMaximumInstances()
converter.tryConvertTo(rightValue.getClass(),leftValue)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,true)
new UDFArgumentTypeException(1,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
value.toLowerCase().startsWith(constraintLowerCase)
retVal.setProperty(p.getKey(),p.getValue())
CacheManagerCheck.class
ByteBuffer.allocate(4)
TelephonyManager.getDefault().getCurrentPhoneType()
mSkipWebLineCount=0
op == ASSIGN || op == ASSIGNMENT_OPERATOR
mPlayPause != null && getActivity() != null
mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE
args.getLong(KEY_GID,-1)
path(14)
(Long)18003000L
attribute.getDefinition().getMarshaller()
field.hasName()
testLogger.info("[v] Unsecure sync completed")
type.getDeclaredConstructor()
new UnsupportedOperationException("Work in progress: DefaultDependencyMetadata is not really a DependencyMetadata")
return 524288; 
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
new EnterSelectionDialog(shell,CalculatorMetaFunction.calcLongDesc,Messages.getString("CalculatorDialog.SelectCalculationType.Title"),Messages.getString("CalculatorDialog.SelectCalculationType.Message"))
RowKey.prefixKeyWithSalt(key)
mInputConsumer == null && mStatusBar != null && canHideNavigationBar()
file.toFile()
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
configureWriteBufferForWrite()
List<String>
scope.getVariable(name)
sonarQubeIsUpWatcher.waitForLog(20,TimeUnit.SECONDS)
mValues[8]
log.info("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2)
IsotonicMDS.class
descriptorParser.parseMetaData(parserSettings,moduleDescriptorFile,false)
Observable.concatEager(_getCachedData(),_getFreshData())
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
E edge
cause instanceof ThreadDeath
read=28
intervalFraction * (nextValue - prevValue)
new Paint(Paint.ANTI_ALIAS_FLAG)
assertThat(stack.selectChangelog("ISSUE-1")).isEmpty()
Thread.sleep(800)
!swipeVertical
file != null && file.isDirectory()
activityNdx <= topActivityNdx
role.getChatUser().getAddress().toString()
resources.getDimensionPixelSize(R.dimen.close_handle_height)
rematchAllNetworksAndRequests(networkAgent,oldScore)
mMat[7]
registerError(expression,expression)
IllegalArgumentException e
component.getSources()
new MediaDriverBroadcastReceiver(toClientReceiver)
new Paint()
new SimpleDateFormat(format,Locale.US)
PsiTypesUtil.isDenotableType(substitutor.substitute(typeParameter),expression)
selenium.isElementPresent("link=Control Panel")
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null,false)
startNode != null || justScanInScope
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false,false)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
UpgradeStepRegistrator.class
mService.mAppTransition.isTransitionSet()
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
new ProtocolException(sm.getString("upgradeHandler.upgrade.fail",connectionId))
origin.realComponent().doubleValue() >= other
ChronicleEngineEndpoint endpoint
scrollWebElementIntoView(webElement)
EqualityComparer<TKey>
new ThreadPoolExecutor(1,5,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>())
value == Byte.MAX_VALUE
loaded.getLoaded().getDeclaredConstructor()
from >= to
case 5: 
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
isFocused()
popupWindow.setContentWidth(menuWidth)
firstChatPanel.getChatStatusIcon()
id=10846
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
isAssignableFrom0(supertypeName,iface,cl)
uri.getAssetName().toLowerCase()
LOG.warn("register druid-driver mbean error",ex)
new InetSocketAddress("localhost",0)
c == Short.class || c == Short.TYPE
builder.field(Fields.LARGEST,largest)
pbBmp.setProcessListener(pBmpHandler)
typeSettingsProperties.toSortedString()
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
logger.fine("attempting reconnect")
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
new IllegalStateException("Legacy advertising can't include TX power level in header")
disable2ForUser(what,token,pkg,mCurrentUserId)
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000)
end < 0
scanFlags & SCAN_NEW_INSTALL
view.getFloatZoom()
tracesDir.mkdirs()
transaction.commitAllowingStateLoss()
3 * 1000
type.getDeclaredConstructor()
CharSequence channel
0 - originX
ColorProperties.getColor("buttonGradientDark")
Configuration conf
maxInvocationCountObservedDuringWarmup * 2
filters={StringFilterAggregator.class}
ReferencesSearch.search(method,method.getUseScope().intersectWith(myRules.getSearchScope()),false)
/**   * {@inheritDoc}  */ @Override public ObjectProperty clone(){   ObjectProperty p=(ObjectProperty)super.clone();   p.value=value;   return p; } 
gatherDisableActionsLocked(mCurrentUserId)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
dynamicType.getLoaded().getDeclaredConstructor()
createFromResourceStream(res,value,is,srcName,null)
next != null && next.getElementType() == ElementType.WHITE_SPACE
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
"sort: " + fileName + " "+ entityName+ " "+ referenceEntity
mContext.getClass()
parameters.length >= 2
Object other
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
telephony.isIdle(getOpPackageName())
new OptionValue<>(0.0D)
mService.mDisplayContents.valueAt(displayNdx)
appearance.getFloat(attr,0)
CloudJettyRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders); 
!isClassNameIdSpecified(classNameId,getRequiredClassNameIds())
descriptor.getKind() != ClassKind.TRAIT && descriptor.getKind() != ClassKind.OBJECT
rm.add(new QueryPath(cfName,cosc.super_column.name,column.name),column.value,column.timestamp,column.ttl)
ViewWSRPClickToInvokeResourceServingPhaseRDPTest.class
getFragmentManager().beginTransaction().replace(R.id.content_frame,fragment,CATEGORY_TAG)
klass.getDeclaredFieldsUnchecked(false,declaredFields)
_buf.position() - temp
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
new Paint()
(((Map<String,Object>)argsEl)).get("hit") instanceof Boolean
line.startsWith("ProGuard, version") || line.startsWith("Reading ") || line.startsWith("    processed in")
ev.mTimeSamples.length >= NT
new StringPreference("map_underlay",null,false)
private PostgreServerPostgreSQL serverExtension; 
Thread.sleep(1000)
factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)
HashSet<>
assertMockEndpointsSatisfied()
mClocks.uptimeMillis()
i < tupleType.getElementCount()
mSyncStatus.valueAt(i)
ArraysUtil.toString(extensionArray)
new RunAutomaton(automaton,false)
child.resetRtlProperties()
public class PrivateKeyJwsSignatureProvider implements JwsSignatureProvider {   private PrivateKey key;   private SecureRandom random;   private AlgorithmParameterSpec signatureSpec;   public PrivateKeyJwsSignatureProvider(  PrivateKey key){     this(key,null);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  AlgorithmParameterSpec spec){     this(key,null,spec);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  SecureRandom random,  AlgorithmParameterSpec spec){     this.key=key;     this.random=random;     this.signatureSpec=spec;   }   @Override public byte[] sign(  JwtHeaders headers,  String unsignedText){     try {       return CryptoUtils.signData(unsignedText.getBytes("UTF-8"),key,Algorithm.toJavaName(headers.getAlgorithm()),random,signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js","webgl.js")
new UnsupportedOperationException("CorrespondingDeclaration not available for unsolved symbol.")
dh != mBackgroundHeight
_matcher.group(1)
zController.enqueue(doRequestStop())
temp.reAddRight()
mLocalDirtyRect.set(0,0,width,height)
Integer.parseInt(topStr)
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))
new Duration(30,SECONDS)
Lists.newArrayList(binary.getApiDependencies())
httpResponseCode != 204
CodegenUtilKt.calcTypeForIEEE754ArithmeticIfNeeded(expression,bindingContext,context.getFunctionDescriptor(),state.getLanguageVersionSettings())
NettyHandlerSettings.class
sm.getString("aprListener.tcnValid",major + "." + minor+ "."+ patch,Library.APR_MAJOR_VERSION + "." + Library.APR_MINOR_VERSION+ "."+ Library.APR_PATCH_VERSION)
/**   * An SQL dialect for Postgres 9.4 and later. Adds support for various date and time functions  */ public class PostgreSQL94Dialect extends PostgreSQL93Dialect {   /**   * Constructs a PostgreSQL94Dialect  */   public PostgreSQL94Dialect(){     super();     registerFunction("make_interval",new StandardSQLFunction("make_interval",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamp",new StandardSQLFunction("make_timestamp",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamptz",new StandardSQLFunction("make_timestamptz",StandardBasicTypes.TIMESTAMP));     registerFunction("make_date",new StandardSQLFunction("make_date",StandardBasicTypes.DATE));     registerFunction("make_time",new StandardSQLFunction("make_time",StandardBasicTypes.TIME));   } } 
target.getContext().isInContext(nodeName)
result.getSecond()
allTags == null
new UpgradePermission(true)
oconf.getJSONObject("rev").getDouble("fuzz")
assertEquals(avDegree,0.5)
fetchDefaultLayout(groupId,privateLayout)
fragment.getEndVisualColumn()
context == null || context == EGL_NO_CONTEXT
parseRobotsTxt=true
mUiHandler.removeCallbacks(pae)
-Math.sin(Math.PI / 8)
counter > max
config.getProperty("peer.p2p.pingInterval",5)
Double.parseDouble(param.getValue())
mapLayerConfiguration.setOpacityFactor(((float)cachedOverlayTransparency) / 255.0f)
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
super(name,true,new DebugValue(name + "_Flat",true){   @Override public String toString(  long value){     return valueToString(value);   } } ); 
arguments.size() % 2 == 0 && argumentsAreTabular(arguments) == 2
signedResults.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
new ObjectMapper().readerFor(Map.class)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
(P)in.readOptionalNamedWriteable(PersistentTaskParams.class)
mService.queryDisplayStatus(getCallbackWrapper(callback))
new HashMap<K,CacheObj<K,V>>(capacity + 1,1.0f)
Boolean.parseBoolean(params.get(name))
selenium.isElementPresent("link=Control Panel")
n.extras.getCharSequence(Notification.EXTRA_TITLE)
AbstractInstrumenter instrumenter
memoryReservation.addAndGet(bytes)
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
_freemarkerEngineConfiguration.resourceModificationCheck()
cfs.getSSTables().size() > 1 || !cfs.getTracker().getCompacting().isEmpty()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).descriptionAndTooltip(message)
containsString("cookieManagerShared")
externalMediaDir.getPath()
targetInfo != null && targetInfo.metaData != null
result.assertJson(this.getClass(),"search_debt_rules_sticky.json",false)
version > 1
UserHandle.myUserId()
client.post(getAbsoluteUrl(url),params,responseHandler)
setop.getIDLName()
pull(local)
((DartUriElement)parentParent).getUriStringAndItsRange().second.getStartOffset()
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).descriptionAndTooltip(message)
ai.uid < Process.FIRST_APPLICATION_UID
jmsConfig.getMaxSuspendedContinuations()
TypeScriptJqueryClientCodegen.class
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
dispatchInstallPluginAction()
mLabelView != null && mLabelView.getLayoutParams() != null
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
testProviderConfig()
syncOperation.delay <= 0
addKeys(externalClasses,DATE,"org.joda.time.LocalDate","java.time.LocalDate")
complete.expectedBodiesReceivedInAnyOrder("finish","stop","faulted","except")
FileUtil.toContainerFile(u)
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
!Objects.isNull(value)
service.asBinder().pingBinder()
expectation.getTimes()
PsiReplacementUtil.replaceExpression(expression,newMethodCallExpression.toString())
EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)
isFetchSyncActive=false
holder.addCallback(callback)
@Input
c.close()
strings.length >= 5
onProgressUpdate(progress,max)
_log.warn(sb.toString())
return re; 
K key
node.getText()
(Number)array[this.index]
deltaY >= 0
newVarcharColumnDefBuilder().setColumnName("b_qualifier").setLimit(10)
Exception t
ddmTemplateModel.setResourceClassNameId(sourceClassNameId)
chargeUAh > 0 && level > 0
alterStatement.getUpdateColumns().put(oldName,oldDefinition)
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
mock.expectedMinimumMessageCount(2)
return false; 
result.ocFile.getMimeType()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).descriptionAndTooltip(message)
stringMap.put(entry.getKey(),valueToString(joiner,entry.getValue()))
current != null && current.getTextLength() == 0
isInputViewShown()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
loaded.getLoaded().getDeclaredConstructor()
Character.isJavaIdentifierPart(buffer.charAt(i))
loader.start()
new EnterSelectionDialog(shell,files,Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogMessage"))
JSRootConfiguration.getInstance(getProject()).storeLanguageLevelAndUpdateCaches(JSLanguageLevel.JS_1_7)
mock.expectedBodiesReceivedInAnyOrder("Hello World")
removed.isEmpty()
ParallelStreams::iterativeSum
sm.getString("serverContainer.duplicatePaths",path,old.getEndpointClass(),sec.getEndpointClass())
lastPos < mTargetPos
CxxPlatform platform
bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
serialVersionUID=1122388635
AUTH_TYPE_NEGOTIATE.equals(this.authType)
new NotificationCompat.Builder(context,CHANNEL_ID)
Collections.singletonList(new PartitionInfo(topic,0,null,null,null))
s.contains("://") || s.startsWith(MAILTO_PREFIX) || s.startsWith("//")
line.isEmpty() || line.startsWith("##")
getReduceValuesForReduceSinkNoMapAgg(parseInfo,destination,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
new Parameter(new IdentifierImpl(parameter.getName()),typeToType(parameter.getType(),ConverterUtil.isAnnotatedAsNotNull(parameter.getModifierList())),true)
OfferDeliveryType.AUTOMATIC != deliveryType
mNwService.getInterfaceConfig(mTetherInterfaceName)
queryIds.remove(deadQuery)
LinkedHashMap<DeclarationDescriptor,EnclosedValueDescriptor>
return GCM; 
config.swapChase()
psiElement().afterLeaf(".",PsiKeyword.RETURN)
event.getRawY()
LOG.debug("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
new SafeTextModel(value,Mode.relaxed)
mVectorState == null || mVectorState.mVPathRenderer == null
new AccountInfo(mtGoxAccountInfo.getLogin(),mtGoxAccountInfo.getTradeFee(),MtGoxAdapters.adaptWallets(mtGoxAccountInfo.getWallets()))
T
Arrays.asList("bool","qint32","qint64","float","double")
selenium.click("//li[4]/span/a/span")
mListener.getConnectionId() != -1 && request.mConnectionID != null
metadata.getFaces()
factory.lookup(DefaultBroadcaster.class,id,true)
logger.debug("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
Boolean.parseBoolean(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
assetUri.getAssetName().toLowerCase()
!newDefaultSubIdObj.equals(mDefaultSubId)
public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.isElementPresent("link=Control Panel")
target.getAddress() == null || target.getAddress().length() == 0
public String comments() default ""; 
!inventory.getStackInSlot(i).isItemEqual(stack) || !ItemStack.func_77970_a(inventory.getStackInSlot(i),stack)
Maths.logisticGradientValue(predictRating)
sharedElements.get(localName)
chargeUAh > 0 && level > 0
dest.writeInt(mSubId)
indexService.newQueryShardContext()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
return true; 
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
value < maximumValue
-4
three.setAxisIndex(LEAF)
layerType != LAYER_TYPE_SOFTWARE
!current.hasAccuracy() || Double.isNaN(current.getAccuracy())
Long.parseLong(subSecs)
removedGenerator.equals(next.getClass())
status != null
remaining == 0
mCallback.onInputUpdated(inputId)
extensionsMap.put(mimeType,extensions)
DataStreamSink<OUT>
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
out.getVersion().before(Version.V_1_4_0)
type.getDeclaredConstructor()
public LocalQueryRunner printPlan(){   printPlan=true;   return this; } 
cs[c].set(r,(int)(rng.nextDouble() * _createFrame.factors))
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValueExact()
args.length < 1
mService.setAppPolicy(UID_A,POLICY_NONE)
dest.writeInt(mSubId)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
selenium.isElementPresent("link=Control Panel")
randomSize=true
new IllegalStateException("Advertising can't be both connectable and anonymous")
interactor.startCommand(packageName,callback,mCommand,mArgs)
tenantApi.uploadPluginConfiguration(pluginName,pluginConfig,requestOptions)
enabled=true
/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ V load(K key); 
GlobalSearchScope.allScope(getProject())
"Content-Type".equalsIgnoreCase(name)
MkdirsOptions.class
classNameOptional.isPresent()
CHECK_PKGNAME=true
ranges == null || ranges.length == 0
Executors.newScheduledThreadPool(1)
!isExpanded()
getEffectiveHstsEnforced()
dest.writeInt(mTxPower)
Arrays.asList(TYPE_INTEGER,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING,TYPE_STRING,TYPE_STRING,TYPE_STRING,TYPE_INTEGER,TYPE_STRING)
psiTypeParameter.getName()
str == null || str.length() == 0
TIMEOUT=30000
delegate.writeEmptyElement(prefix,localName,namespaceURI)
parent instanceof PsiReturnStatement || parent instanceof PsiResourceVariable
log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
selenium.isElementPresent("link=Control Panel")
Assert.assertEquals(122L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
_buildTemplateWithGradle("freemarker-portlet","freemarker-dependency-management","--dependency-management-enabled")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
LOG.warn("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
new String(bytes,"UTF-8")
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
ConfigPropertyVetoException ex
target.getDestinationLinkAddress()
toolchainInfo != null
Element.F64_2(mRS)
handoffExecutor != null
new IllegalArgumentException("This code called statusNotice(null)")
IllegalArgumentException.class
CHECK_PKGNAME=true
settings.readLPw(null,0,false)
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port),e)
params.getSimulatedPlatformVersion()
void execute() throws Throwable ; 
new DisappearAnimationUtils(context,125,0.6f,0.45f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
mState != STATE_PREPARE && mState != STATE_FINISHED
logger.debug("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
getTestName(false)
inUtc || allDay
Boolean.parseBoolean(resizeableStr)
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().switchIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
selenium.isElementPresent("link=Control Panel")
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
Thread.sleep(3000)
length=3_000
ImageView divider=new ImageView(mContext); 
new DisappearAnimationUtils(context,125,0.6f,0.45f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
dstCursor == null
actualHeight > reqHeight
public T addProgressListener(ProgressListener listener){   operationParamsBuilder.addProgressListener(listener);   return getThis(); } 
myUnqualifiedOrLocalResolve && localProcessor.isEncounteredDynamicClasses()
currentCall != null && currentCall == callId
viewable=true
telecomManager != null && !mHandleVolumeKeysInWM
file.isFile()
loaded.getLoaded().getDeclaredConstructor()
matcher.find()
shouldAutoCancel(sbn) || mRemoteInputManager.getKeysKeptForRemoteInput().contains(notificationKey)
add(comp,BorderLayout.CENTER)
IBinder.FIRST_CALL_TRANSACTION + 65
bits2[1] == true
MeasureSpec.makeMeasureSpec(myHeight,MeasureSpec.EXACTLY)
!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled() || dataSet.getEntryCount() == 0
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=2
heartbeatIntervalSeconds < 0
hasCapability(GPS_CAPABILITY_MSB)
wifiConfig == null || wifiConfig.isValid()
password.length() > 8
resourceUrl.toString()
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
remaining == 0
sendResourcesChangedBroadcast(true,true,pkgList,uidArray,null)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
thenStore.storeChanged || elseStore.storeChanged
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
javaWriter.emitSingleLineComment("foo")
id.getType()
Integer.parseInt(stackIdStr)
cat.getDefaultParentCategory() != null && cat.getAllParentCategories().indexOf(cat.getDefaultParentCategory()) < 0
eocBound == Bound.END
Integer.parseInt(sid[0],16)
verify(client).atomicIncrement((AtomicIncrementRequest)any())
channels.toArray(new Channel[channels.size()])
any()
chatButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_PRESSED))
!CollectionUtils.isNaturalSortedSet(key.classDef.getMethods())
Throwable e
HttpConnectionUtil.getClient(timeout)
value.getType().getName()
stall_till_cloudsize(5)
mode != null && !mode.isEmpty()
interfacesToImplement.contains(interfaceToImplement)
new KeyEvent(eventTime,SystemClock.uptimeMillis(),KeyEvent.ACTION_UP,keyEventCode,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)
final StringBuilder replacement=new StringBuilder(tag.getValue().getText()); 
parentVirtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
new DatagramDnsQuery(null,addr,1)
selenium.isElementPresent("link=Control Panel")
convert(pkgAnnotation)
Map.Entry<String,RealmObjectSchema>
type == BSON.B_GENERAL || type == BSON.B_BINARY
typeSettingsProperties.toSortedString()
mContext.startActivityAsUser(intent,UserHandle.CURRENT)
mItems.add(toPosition - preItemCount,item)
movementComp.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),state.getPosition(),1.0f)))
LOGGER.fine(e.toString())
sourceSet.getOutput()
asList(CUBRID,DERBY,FIREBIRD,ORACLE,SQLSERVER,SYBASE)
MediaUploadReadyListener processor=new MediaUploadReadyProcessor(); 
!ON_TOP
logger.debug("Cannot add to group ({})",e.getMessage())
new OneRun(49.8020,9.2470,50.4940,10.1970,125633,2449)
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
mNavigationView != null && item != NavigationItemEnum.INVALID
Messages.getString("BaseStep.SafeMode.Exception.MixingTypes","" + (i + 1),referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
commState.getBoolean("syncCommit")
new IllegalStateException("Fields should be either date based or time based")
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
Simple.forClass(MutableList.class)
leftTuple.setStagePrevious(last)
langModuleLanguageProperties.containsKey(languageKey)
length == 0 || !StringUtil.startsWithIgnoreCase(lookupString,prefix)
ConcurrentMap<String,Long>
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.INVOICE_PAYMENT_ERROR)
public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
flux.onErrorResume(ex -> Flux.error(getReadError(bodyParameter,ex)))
currentFactory != null && currentFactory != newFactory
Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
(byte)0xe2
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
for (EventListener listener : eventListeners) addEventListener(listener); 
COOKIE_SYNC_MANAGER=false
loaded.getLoaded().getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
new InterpreterContext("","1","","",null,null,null,null,null)
i=1
(operations.byteAt(contractType / 8) & (1 << (contractType % 8))) != 0
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
BufferUtil.zeroBuffer(1)
3.0 + (3 * random().nextDouble())
aClass.getManager().getElementFactory().createType(aClass)
majorVersion < MSSQL_SERVER_VERSIONS.MSSQL2008
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
out.writeByte(CLASS_CONSTANT_VALUE_TAG)
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,true,aggregationAnnotation.approximate(),factory)
setupExceptions == null
!Const.isEmpty(tablename)
-1494091503
Thread.sleep(1000)
@NotNull ModuleExtension o
loader.start()
popupWindow.setContentWidth(menuWidth)
in.getVersion().before(Version.V_7_0_0_alpha1)
selenium.isElementPresent("link=Control Panel")
buildPages.getTypesWithoutHash()
!TextUtils.isEmpty(text)
callTimeout=5000
Assert.assertEquals(5,latch.getCount())
super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,true,false); 
!BuildConfig.SUPPRESS_DOGFOOD_WARNING && BuildConfig.ENABLE_DEBUG_TOOLS && !SettingsUtils.wasDebugWarningShown(this)
var.isUseReferenceDirectly()
lastGoodQuery.getOriginalQuery()
new StepMeta(selstepid,selstepname,(StepMetaInterface)svi)
new HttpPanelResponse(false,extension,httpMessage)
PokemonMetaRegistry.getHighestForFamily(getPokemonFamily())
layerType != LAYER_TYPE_SOFTWARE
new TestMtpManager(getContext())
loaded.getLoaded().getDeclaredConstructor()
id=10859
adminClient.describeConsumerGroup(groupId,0)
getNewValue()
Integer.parseInt(topStr)
Exception ex
Slog.w(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.")
new Origin(origin,nativeGetQuotaForOrigin(origin),nativeGetUsageForOrigin(origin))
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
revWalk.close()
renditionTypes=new int[0]
mGBDevice.getHardwareVersion()
filter.getTickSize()
mPanProfile.isProfileReady()
value.toLowerCase().startsWith(constraintLowerCase)
appearance.getFloat(attr,0)
sharedPreferences.edit().remove(PREF_KEY_HIDDEN_DEFAULT_ENGINES).apply()
assertContains(actualTables,expectedTables)
totalExternalAccounts > 0
new GitException("Remote url " + url + " is invalid. ")
addTest(AB_NEW_LOGIN_YES_GOOGLE,new int[]{1,1,1},new int[]{1,0,0},new String[]{"old-welcome","new-welcome","new-quick-welcome"},true)
i <= DatabaseDescriptor.getIndexInterval()
jp.getDoubleValue()
delegate.writeEmptyElement(prefix,localName,namespaceURI)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
selenium.isElementPresent("link=Control Panel")
logger.warn("[{}] {}",request.getJobId(),msg)
selenium.isElementPresent("link=Control Panel")
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS))
Arrays.asList("internal:discovery/zen/fd*","internal:coordination/fault_detection/*",TransportLivenessAction.NAME)
position + dockDividerWidth
appearance.getFloat(attr,0)
cachedIntentions.getEditor()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
assertEquals(0,responseBody.get("bucket_count"))
new InstrumentationSpec(FileTypeSet.of(JavaSemantics.JAVA_SOURCE)).withSourceAttributes("srcs").withDependencyAttributes("deps","data","exports","runtime_deps","binary_under_test")
selenium.isElementPresent("link=Control Panel")
annotation.authentication()
@JsonProperty("Index") private Long index=null; 
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
{4,7,5,11,6,5,7,5,11,11}
this.mMesh.postDraw(this.mShaderProgram)
listener.iterationDone(cg,iterationCount,epochCount)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
bungee.getTranslation("outdated_client",bungee.getGameVersion())
j < arguments.length
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
resultSet.getDate(1)
infos == null || infos.isEmpty()
selenium.isElementPresent("link=Control Panel")
new RendezvousAffinityFunction(false,512)
mAppToken.isVisible()
temp_descs.get(j)
VibrationEffect.get(VibrationEffect.EFFECT_TICK,false)
protected RunProfileState createCommandLineState(@NotNull ExecutionEnvironment environment,@NotNull Module module){   return new MvcCommandLineState(environment,cmdLine,module,false); } 
format == null || "".equals(format)
request.getDecodedRequestURI()
incomingConnector.accept(connectEvent,true)
a.willChangeBounds()
DiagnosticFactory0<PsiElement>
delayMs <= 0
config.addProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES,snm.getConfig())
currentTextFile + ".txt"
callTimeoutMillis=3000
e.toString()
elementUtil.isWeakOuterType(element)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
_scored_valid != null
jsonObject.get(ERROR_KEY).toString()
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
mock.expectedMessageCount(2)
sLon == null || "".equals(sLon)
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
Exception nre
is.readFully(data)
cnt != 0
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
_jsonObjectFile.getParent()
transferCallButton != null
type.getDeclaredConstructor()
fulfillmentAmount.compareTo(new BigDecimal(0D)) == 0 || resultAmount.compareTo(fulfillmentAmount) <= 0
Throwable e
selenium.isElementPresent("link=Control Panel")
ai.uid < Process.FIRST_APPLICATION_UID
Flyway.configure(classLoader).configuration(createFlywayConfig(envVars))
@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println("nodeCount = " + nodeCount);     System.out.println("operations = " + operations);     System.out.println("keyCount = " + keyCount);     Config config=new Config();     config.getReplicatedMapConfig("test").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName="test";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key="foo-" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println("---------------------");           System.out.println("key = " + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println("value[" + j + "] = "+ map.get(key)+ " , store version : "+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } 
assertEquals(3,data.size())
logger.getLogger().warning("Failover took:" + (end - start) / 1000000 + "ms")
!mTileState
new ActionModeImpl(mContextView.getContext(),callback)
System.currentTimeMillis() - lastTimeLocationFixed
from >= to
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
obj.getRequiredTokens()
classNameLocalService.getClassNameId(rendererFactory.getClassName())
serviceContext.getModifiedDate(null)
LOG.error("Should have transformed " + managedClassName + " but didn't")
configureSwipeToRefresh(view)
@Define("tableName") final String tableName
0 != mUnwantedNetworkCapabilities
i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]
(flags & 0x01) != 0
clearTetheredNotification()
typeSettingsProperties.toSortedString()
Throwable exception
mBluetoothHeadset.disconnectAudio()
null == mImage || shadow
implementationMethodDescriptors.build()
Assert.assertEquals(result.getReceipt().getEnergyUsageTotal(),52439)
_connector.getResponse("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\nUser-Agent: Mozilla/5.0 (test)\n\n")
socket.closeLatch.await(10,TimeUnit.SECONDS)
rootSaveDir.mkdirs()
new LaserRow(spriteTubeMiddle,0,8,8,16)
checkNoPlanNodeMatches(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
console.getStdErr()
imageWidth / images.size()
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
type.getDeclaredConstructor()
original.getKeyProperty("path") != null || properties.get("context") != null
!isEventIgnored(event) && !myChangeListManager.isIgnoredFile(event.getFile()) && (isDirectoryVersioningSupported() || !event.getFile().isDirectory())
new NotificationCompat.Builder(context,Manager.CHANNEL_ID).setDefaults(options.getDefaults()).setExtras(extras).setOnlyAlertOnce(false)
chooser.showOpenDialog(null)
!mQuietEnable
LOG.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
Character.toUpperCase(ch)
Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
note1.getId()
Files.deleteIfExists(dir.toPath())
mMccStr == null
legacyValue.isDefined()
field.holder().isInitialized()
TelephonyManager.getDefault().getCurrentPhoneType()
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,true)
preferences.put("cityAdminLevel",s)
Throwable e
RenderingRuleProperty.createOutputIntProperty(OBJECT_TYPE)
number == null || s == null
cssClassName.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
ref.getAuthorIdent()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
mService.getWifiServiceMessenger()
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
vb.getData().rewind()
sendKeyDown(keycode)
map.putSingle(OAuthConstants.CLIENT_AUDIENCE,audience)
config.getPatterns() != null && config.getPatterns().length() != 0
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
_typeSettingsProperties.toString()
Sets.<Long>newHashSet()
DEBUG_GESTURES=false
mActiveStreamType == -1 || streamType != mActiveStreamType
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
batteryService.getBatteryLevelLow()
logger.debug("Cannot add to group ({})",e.getMessage())
mMatchMode=matchMode
props.setProperty(JdbcConnectionParams.PROPERTY_URL,saveUrl)
!getLocationEnabled()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT || mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_VR
!mkdirs(mBaseDir)
Lists.<User>newArrayList(new DefaultUser().setLogin("john").setName("John"),new DefaultUser().setLogin("steven").setName("Steven"))
currentBlog.getLocalTableBlogId()
new SQLExecuteTemplate(executeEngine,backendConnection.isSerialExecute())
Slog.w(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
getPlayer(server,args,1,true)
assertThat(repo.rules()).hasSize(17)
holder == null || holder.provider == null
note == null || mAddNote
internalRemovePlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
logoArea.setLineWrap(false)
checkCall(receiver)
isUpdateAvailable()
Log_OC.d(TAG,"onSaveInstanceState()")
new float[4]
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while","type")
new Max(0)
refreshRotationLockTile()
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
a.getInt(com.android.internal.R.styleable.Animator_duration,300)
selenium.isElementPresent("link=Control Panel")
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
true || DEBUG_WALLPAPER
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
SelectTimeZonePacificStandardTimeCPMATest.class
new NeuralNetConfiguration.Builder().list()
updateExistingRefreshToken(currentRefreshToken,at)
inputItem.getItemDetails()
new Integer(item.getSeq())
element.getText()
"memberOf".equalsIgnoreCase(attribute.getId()) || "isMemberOf".equalsIgnoreCase(attribute.getId())
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
IndexerRegistryUtil.getIndexer(baseModel.getModelClass())
mPositionAnimator.isStarted()
messenger.sendCodeObsolete(res)
isAccessibilityFocusable()
mGnssCallback != null
DEFAULT_HOME_DB_CACHE_COUNT=500
sep < 0 || sep > j
show.isInternal()
private final T view; 
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
upgradeVersion=37
new IndexSizeExceededException("%s",getOutOfRowsReason())
pageSize > pageCache.pageSize() || pageSize < 0
T[]
out.println(indent + "public void setup() {")
rhs.getScore()
Arrays.hashCode(mData)
this(true,false); 
assertThat(provider.fetchCount,is(2))
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
gran.next(input)
state.isAlive()
regSocial * trusterWeightValue * userFactorValue* userFactorValue
new GridDhtPartitionDemander(cctx,demandLock)
rhs.getScore()
DEFAULT_GROUP_OWNER_INTENT=6
DEBUG_STARTING_WINDOW=false
((WithNode)node).getNestedStatement()
typeName.equalsIgnoreCase("Integer") || typeName.equalsIgnoreCase("int")
Response.ok(null,MediaType.TEXT_PLAIN)
JsonObject.createObjectMapper().getFactory()
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
r != null && !r.finishing
queryBuilder.append(FlowManager.getTableName(table))
super.onContextItemSelected(item)
List<Exception>
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/JavaStaticMethod.kt")
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
timeout=1800000
mUiHandler.removeCallbacks(pae)
loginWindow.setVisible(true)
expandableView.getIntrinsicHeight()
new Histogram(1,10,100,1000,10 * 1000,100 * 1000)
h / 2
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","case","default","type")
NFC_UID=1027
note != null && note.get_id() != 0
n2
m.getProgress()
groupIdProperty.eq(0L)
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
!this.fs.delete(filePath,false)
new TypeList.Explicit(enterTypes)
nearbyTransportStopRoutes != null && nearbyTransportStopRoutes.size() > 0
avatar.init(Screen.dp(56),22)
10 * 1024 * 1024
callElement.getText()
mPowerManager.isInteractive()
new LongObject(300000000l,"foobar")
ATLAS_MAP_ENTRY_FIELD_COUNT=3
times + BASE_FILE_NUMBER
is(false)
client.getHintArrowTargetType() != HintArrowType.NONE.getValue()
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)),Substitution.of("%workspace_name%",ruleContext.getWorkspaceName()))
this.messageService.monoPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
testModules("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
selenium.isElementPresent("link=Control Panel")
@NotNull
StringBuilder buffer=(StringBuilder)TransactionSynchronizationManager.getResource(bufferKey); 
@NotNull JsonNumberLiteral value
N node
keyProvider.getAuthKey(activity)
new StringBundler(5)
@Nullable
buffer.flip()
mNavigationBarView.getPaddingLeft()
lp.resolveLayoutDirection(layoutDirection)
e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive()
defaultDndAccess != null
!user.canAfford(money)
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,false,"cancelAllNotifications",pkg)
CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
ISOChronology.getInstanceUTC()
source.readLong()
getMeasuredWidth()
new LeftTuple(new DefaultFactHandle(2,"cheese"),null)
mHandlerCaller == null
addDaysAndCheckForCompletion(2,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
msg.hasCacheMetrics(nodeId)
appearance.getInt(attr,0)
Exception t2
String message
hc.notifyFirstSampleAfterLoopRestart()
between(1,10)
!file.exists() || file.renameTo(newFile)
new EnterSelectionDialog(shell,files,"Files read","Files read:")
UpgradeStepRegistrator.class
"false".equals(showRelationships) || result.hasErrors()
new RuleMatch(this,0,len,getMessage())
Helpers.exec(j4p,"setProfileOverrides(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
target.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
variantData.get(key)
return true; 
configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
mf.getColumnNameInSql()
configurator.setExcludeAllEntriesMode()
new StringBuilder(245)
mPowerManager.isInteractive()
LOG.info("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"))
entry.rxBytes == 0 && entry.txBytes == 0
new IllegalStateException("Advertising can't be both connectable and scannable")
ab.get1U()
parsedVersion != null && parsedVersion.getDimensionForVersion() == dimension
MANAGEMENT_API_MICRO_VERSION=1
dateHeader / 100
s1.isStrictlyNegative()
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
structuralLock.isHeldByCurrentThread()
body.isEmpty()
String lhsText=assignment.getLeft().getText(); 
LinkageError e
bc.getAsyncWriteService()
new EnumValidator<Mode>(Mode.class,false,true)
/**   * clockwise   */ CW(0)
Boolean.parseBoolean(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
params.getSimulatedPlatformVersion()
notifyAll()
/**   * This is  {@link SurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.2.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class SurrogateRegisteredServiceAccessStrategy extends BaseSurrogateRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-1688944419711632962L;   private boolean surrogateEnabled;   private Map<String,Set<String>> surrogateRequiredAttributes=new HashMap<>();   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> attributes){     if (isSurrogateAuthenticationSession(attributes)) {       if (!isSurrogateEnabled()) {         return false;       }       return doPrincipalAttributesAllowSurrogateServiceAccess(attributes);     }     return super.doPrincipalAttributesAllowServiceAccess(principal,attributes);   }   /**   * Do principal attributes allow surrogate service access?.  * @param principalAttributes the principal attributes  * @return the boolean  */   protected boolean doPrincipalAttributesAllowSurrogateServiceAccess(  final Map<String,Object> principalAttributes){     if (!enoughRequiredAttributesAvailableToProcess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. There are not enough attributes available to satisfy requirements");       return false;     }     if (!doRequiredAttributesAllowPrincipalAccess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. The principal does not have the required attributes specified by this strategy");       return false;     }     return true;   } } 
assertCompletionVariants(myProjectPom,"RELEASE","LATEST","2.0.2")
data.getSenderId() != myUid() || data.getUnreadCount() > 0
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
ArrayIndexOutOfBoundsException.class
activePopupHandler == null && pph != null
ActivityOptions.makeBasic()
new SslContextBuilder(true)
mDuration >= 0 && mTransitions != null
JsonObject.createObjectMapper().getFactory()
klass.getDeclaredFieldsUnchecked(false,declaredFields)
GL11.glTranslatef(0.5F,0.5F,0.5F)
new MailFolder(folders[i].getMessageCount(),folders[i].getName(),folders[i].getNewMessageCount())
SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
refTableName.split("\\.")[1]
quoineTicker.getLastTradedPrice()
Id
Logger.getInstance(getClass()).warn("error loading UITheme '" + path + "', "+ "pluginId="+ myDescriptor.getPluginId().getIdString(),e)
constraintSystem.getTypeParameterDescriptors()
pathParameterMap != null
new ShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=2
scope.getActiveInspectionProfiles()
super.onDestroy()
editText.setTextKeepState(task.getValue(property))
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
redefinesClasses=true
Messages.getString(key,param1,param2,param3)
out.writeInt(sampleCount)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
log.error("Problem in JSR223 script " + e,e)
storedHash == null || TextUtils.isEmpty(credential)
ONE_MINUS_DST_ALPHA(7)
params.getSimulatedPlatformVersion()
mAuthStatusText=statusText
mWindowManager.removeViewImmediate(mPopupView)
reducer.getKeyColumns()
engine.execute(query).dumpToString()
mCallback.onInputUpdated(inputId)
super.onRequestSendAccessibilityEventInternal(child,event)
new GenerationException("Couldn't parse type: " + typeDefinition,e)
calendar.getTimeZone().getRawOffset()
ArraysUtil.toString(extensionArray)
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
loc != null
applicationContext.close()
fileName.lastIndexOf('.')
file.getFile()
new ScriptField_Point(mRS,PART_COUNT)
backtrack(ans,comb,k,i + 1,n - i)
new SQLExecuteTemplate(executeEngine,backendConnection.isSerialExecute())
out.writeFloat(mProgress)
reportDrawNeeded=true
new TextPaint()
IS_EMPTY + 1
telephony.iccTransmitApduBasicChannel(subId,getOpPackageName(),cla,instruction,p1,p2,p3,data)
dockedBounds.left - dockDividerWidth
lastGoodQuery.getOriginalQuery()
date.getYear()
localMessage == null || localMessage.isSet(Flag.DELETED)
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.name,null,pkgSetting.installerPackageName,null)
customReportContent != null && customReportContent.length != 0
MAX_PERCENT_DIFFERENCE=0.3
localScale.multLocal(scale)
pkgs.get(j)
parcel.readString()
new AssertionError("type=" + type)
ReflectionUtils.invokeMethod(httpClientConnectCallbackMethod,httpClient,listener,uri,worker,this.undertowBufferPool,options)
parent.getOuterClass()
UIUtils.createComposite(panel,2)
!PRESERVE_WINDOWS
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
logger.trace("myq ReturnCode: {}",returnCode)
TelephonyManager.getDefault().getCurrentPhoneType()
new RebalanceStealInfo(0,(int)Math.random() * 5,partition,Arrays.asList("testStoreName"),(int)Math.random() * 3).toJsonString()
mapConfig.getBackupCount()
Key.class.getName()
GlobalSearchScope.allScope(getProject())
witnessCapsule.createReadableString()
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
resource.removeExtractor(input.getId(),extractorId)
user.getSystemId() == null || user.getSystemId().equals("")
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
getLogger().warn("Unknown classloader [IAE]: " + e.getMessage())
desc.getVersion()
replacement instanceof PsiStatement && !(replacement.getLastChild() instanceof PsiJavaToken) && !(replacement.getLastChild() instanceof PsiComment)
result.setEncodingAndType(st.getResponseSOAPContext().getContentType())
nsDescriptor.getAttributeImpl(localName,namespace)
mMenu.getNonActionItems()
limit != 0
Boolean.parseBoolean(resizeableStr)
new TaskData(addedCount,null,true)
BeanParamUtil.getInteger(contact,actionRequest,"suffixId")
WindowedValue.valueInGlobalWindow(4,PaneInfo.NO_FIRING)
new WorldPoint(1428,3866,0)
protected OSGIConfigPropertiesService configProperties; 
"Unknown id: " + id
m.set[j]
verify(mock)
compare(leftValue,rightValue) >= 0
Foundation.log("[error] " + tag + ": "+ message)
PlatformPatterns.or(psiElement().withParent(PsiExpression.class),psiElement().inside(PsiClassObjectAccessExpression.class),psiElement().inside(PsiThisExpression.class),psiElement().inside(PsiSuperExpression.class))
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
Math.max(1,amount)
logger.error("{} is already cancelled",impl.uuid())
mSyncStatus.valueAt(i)
selenium.isElementPresent("link=Control Panel")
relatedProduct.getRelatedProduct()
this.serviceRpcServer.addProtocol(RpcKind.RPC_WRITABLE,HAServiceProtocol.class,this)
document != null && line < document.getLineCount()
Lists.newArrayList("timestamp")
quoineTicker.getLastTradedPrice()
selenium.click("//li[4]/span/a/span")
Locale.getDefault().toLanguageTag()
store.setConfigFile(usersFile)
Integer.parseInt(stackIdStr)
Matrix.setIdentityM(outTemp,0)
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT,true)
mSyncStatus.valueAt(i)
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)
Long.parseLong(subSecs)
Exception e
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).onErrorContinue()
mccMncs != null
Slog.i(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
_freemarkerEngineConfiguration.resourceModificationCheck()
!moduleFileIndex.isInTestSourceContent(fileOrDir)
new RuntimeIOException("Error opening output file",e)
STATUS_DRAW=0x1
Foundation.log("[error] " + tag + ": "+ message)
fileChooser.setCurrentDirectory(defaultSelection)
new int[100]
(Relationship)container
new CamelExchangeException("JettyClient failed with state " + exchangeState,exchange,exchange.getException())
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
this.thrown.expectMessage("File must exist")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
Long.parseLong(value)
Boolean.parseBoolean(resizeableStr)
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
intermediateArtifacts.combinedArchitectureBinary()
groupingSets.isEmpty()
mProgressFooterView != null
Object key=next.getKey(); 
_buildTemplateWithGradle("npm-isomorphic-portlet","isomorphic-dependency-management","--dependency-management-enabled")
removedTerrains.add(tq)
mObsoleteAgents.remove(info)
PsiTreeUtil.getParentOfType(e,PyTryPart.class,false)
DEFAULT_ROW_FLUSH_BOUNDARY=75000
expandableView.getIntrinsicHeight()
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
listeners.executed(context)
DEBUG_ALL || true
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
this.httpHandler.handle(req,resp).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
Thread.sleep(4000)
_connector.getResponse("GET /foo?status=206&data=42 HTTP/1.0\n\n")
dest.writeInt(mSubId)
buffer.putInt(0x0)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
ImmutableList<String>
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
findCodecForFormat(true,format)
bindings.or(ImmutableMap.<ColumnHandle,Object>of())
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
new Paint()
pgl.loadVertexShader(vertFilename)
column.getLabel()
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"gfxinfo",pw)
GenericAttributeValue<Boolean>
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
MainActivity.class
Item.itemsList[item.itemID].getColorFromItemStack(item,0)
BaseOutputLayerSpace.Builder<Builder>
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,fout)
GL20.glGetVertexAttribiv(index,pname,params)
mSyncStatus.valueAt(i)
Boolean.parseBoolean(attrValue)
type == Short.class
ImmutableList<Map<String,Object>>
private void _compareJarFiles(final Path expected,final Path actual) throws IOException {   Files.walkFileTree(expected,new SimpleFileVisitor<Path>(){     @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {       Path fileName=dir.getFileName();       if (_ignoredDirectories.contains(fileName.toString())) {         return FileVisitResult.SKIP_SUBTREE;       }       return FileVisitResult.CONTINUE;     }     @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {       Path relativize=expected.relativize(file);       Path fileInActual=actual.resolve(relativize);       Assert.assertTrue(Files.exists(fileInActual));       return FileVisitResult.CONTINUE;     }   } ); } 
startActivity(in)
Integer.parseInt(stackIdStr)
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName(),e.getMessage())
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
fmd.getValueCount() == 0 && (!fmd.hasGroupCount() || fmd.getGroupCount() == 0)
!match && compareRecover
Optional.ofNullable(target)
callback.onPulseFinished()
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
deltaY >= 0
UIUtil.getParentOfType(JComboBox.class,c) != null || UIUtil.getParentOfType(JSpinner.class,c) != null
useInternetToDownload.setOnPreferenceChangeListener(this)
String.format("Gaussian:  min=%d,max=%d,mean=%f,stdev=%f",min,max,mean,stdev)
builder.createStructureViewModel()
mAdapter.swapDirectory(directory,storageManager)
topLevelBuildData.getWorkspaceDir()
y > 9
schemeSpecificParts != null && data != null
NotificationColorUtil.calculateContrast(foregroundColor,backgroundColor)
"cache." + propertiesName + ".size"
mAms.mWaitForNetworkTimeoutMs=2000
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
E edge
TypeMismatchException e
new ByteSizeValue(133,ByteSizeUnit.BYTES)
conf.getRestBaseURL()
target.getDestinationLinkAddress()
socketWrapper.getReadTimeout()
items[30]
log.warn("Couldn't find style: " + styleId)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mPendingFileUris.iterator()
totalLength / 10
final DomAnchor parent
new IllegalArgumentException("Command not found in spout message: " + shellMsg)
ProxyOutputStream.amountTransfered.getAndSet(0) / 1000d
mHiddenForOtherReasons=true
mPowerManager.isInteractive()
traceIds.isEmpty()
value.toLowerCase().startsWith(constraintLowerCase)
Utils.isRawValue(value)
HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
new BinaryWebSocketFrame(finalFragment,rsv,payload)
ipnbFilePanel.getSelectedCellPanel()
IndexReader.open(dir)
realm.checkIfValid()
mParent == null
immediate=true
private GenericSendAndReceiveGateway gateway; 
this.addUnsafeEnchantments(stack.getEnchantments())
iconId <= 1
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodType.ofLoaded(loadedMethodType)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
Exception e
new UnsupportedOperationException("Not implemented")
!result.isDigestQuery()
" firstActiveTime=" + firstActiveTime
disable2ForUser(what,token,pkg,mCurrentUserId)
!isPassword || shouldSpeakPasswordsForAccessibility()
deltaY <= 0
UpgradeStepRegistrator.class
UpgradeStepRegistrator.class
AddPortletSMChildPageTest.class
LatLon location
Throwable e
factory.terminateAll()
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
!mIsOnInnerCircle && hour != 0
!ffmpegExecuteAsyncTask.isProcessCompleted()
mParent == null
SupervisedModel rawModel=makeSupervisedModel(); 
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid) && !isProfileOwner(callingUid)
new ObjectMapper().readerFor(DatanodeAdminProperties.class)
d.size(0)
greaterThanOrEqualTo(1)
new StringBundler(5)
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
d.setAutoMirrored(false)
modifyList(ns,arg)
CellUtil.estimatedHeapSizeOfWithoutTags(c)
!isNullOrEmpty(number)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
NullableCoder.of(StringUtf8Coder.of())
@NotNull public SoftWrapModelEx getSoftWrapModel(){   return myDelegate.getSoftWrapModel(); } 
(CallRenderer)callPanel
resources.getDimensionPixelSize(R.dimen.close_handle_height)
filtersId != null && !filtersId.isEmpty()
checkCall(receiver)
~View.SYSTEM_UI_TRANSPARENT
isInputViewShown()
view != null && view.getParent() == this
HttpRequest.post("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,device)
gsonWrappedStack.toJsonTree(inputStack,WrappedStack.class)
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName(),res.getString(R.string.app_name))
fm.beginTransaction().remove(samples)
selenium.isElementPresent("link=Control Panel")
viewRect.width > 0 && targetLocation.x >= hOffset + viewRect.width
!typeTreeStruct.embedded()
numConnections=20
loaded.getLoaded().getDeclaredConstructor()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
findCodecForFormat(true,format)
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l,null,null,0,0)
CONSTELLATION_TYPE_SHIFT_WIDTH=4
-1.1f
_connector.getResponse("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
nativeLinkable.getBuildTarget()
requestCode == RC_EMAIL_FLOW && resultCode == ResultCodes.OK
t3.getSort()
showTooltip == null || showTooltip.targetActor == null
transform.setToRotation(new Vector3(1,0,1).nor(),rotAngle)
preMergedCustomer.isRegistered()
entry != null && !DropboxUploadMode.force.equals(mode)
assertPlanEquals(expectedPlan,actualPlan)
routes.IndicesResource().delete(index)
{4,5,5,11,6,5,7,7,11,11}
evaluate(123.5f,DataTypes.FLOAT)
this.mTileRows
@Override public final DivideByOnConditionStep on(String sql){   and(sql);   return this; } 
cacheScaled5.setColors(red)
continueUpdateBounds(HOME_STACK_ID)
assertRemoveSubsystemResources(servicesB)
dst.remaining()
mCommand != null
selenium.isElementPresent("link=Control Panel")
targetDatabase.setObjectQuotingStrategy(originalStrategy)
note.addNewParagraph(AuthenticationInfo.ANONYMOUS)
r.nextBoolean()
port=47506
getLog().debug("Compiling Kotlin sources from " + sourceRoots)
getStepIOMeta().getInfoStreams()
equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
Log.w(TAG,"releaseInfoLock error",e)
new ClassFormatException("Unexpected element value kind in annotation: " + type)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,true)
rng.nextInt() % 100 + 200
sharedElements.get(localName)
PropertiesComponent.getInstance().setValue(BOLD_TABS,false,true)
centerButton(mButtonNegative)
LocaleUtil.getSiteDefault()
AnnotatedElementUtils.findAnnotationAttributes(type,annotationType)
mConsumerCounter=TIMEOUT_OCCURRED
"select actionId from ResourceAction where name = '" + newName + "'"
analysis.getType(aggregate)
threadSafe=true
String.format(Locale.US,"(\\d{0,%d})(\\.\\d{1,%d})?",integer,fraction)
_buildTemplateWithGradle("form-field","field-dependency-management","--dependency-management-enabled")
selenium.isElementPresent("link=Control Panel")
analysis.getType(windowFunction)
list.append(pi)
PApplet.degrees(angle)
Builder<M,B>
logger.trace("NODE {}: App version requested but Version class not supported",this.getNodeId())
schemeSpecificParts != null && data != null
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
language.is(knownLanguage) || knownLanguage.getDialects().contains(language)
mService.saveConfiguration(mContext.getOpPackageName())
session.setOffline(false)
selenium.click("//li[4]/span/a/span")
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
Throwable onlyIfJUnitIsNotAvailable
request.getExcludeMessage()
builder.add(fileDir).xy(3,5)
-26
OptimisticOptimizations.ALL.remove(OptimisticOptimizations.Optimization.UseExceptionProbability,OptimisticOptimizations.Optimization.RemoveNeverExecutedCode,OptimisticOptimizations.Optimization.UseTypeCheckedInlining,OptimisticOptimizations.Optimization.UseTypeCheckHints)
!Arrays.equals(oldVal,val)
!FileSystems.getDefault().canResolveSymbolicLink()
this.acquireCameraInstance(cameraType)
longSize >= 640
item.send(new StringType(modeString))
new HumanReadableException(e,"Couldn't get dependency %s of target %s.",buildTargetForDep,buildTarget,e.getHumanReadableErrorMessage())
IBluetoothSap.class
selenium.isElementPresent("link=Control Panel")
getScrollMode(scroll,hasFirstRow,useLimitOffset,queryParameters)
result.getReceipt().getEnergyTotal()
nextTokenIs(b,IDENTIFIER)
(long)y & 0xFFFFFFFFL
super.resolveLayoutDirection(layoutDirection)
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(3)
display.getRealMetrics(dm)
mAdapter != null && mDataSetObserver != null
tagDataService.getTag(filter.title,TagData.ID)
typeSettingsProperties.toSortedString()
Integer.parseInt(attrValue)
result.getReceipt().getEnergyTotal()
DISABLE=false
Context.getProviderService().getAllProviderAttributeTypes(true)
Boolean.parseBoolean(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
mWindowManager.removeViewImmediate(mContainer)
assertEquals(13,tokens.size())
totalBytesOnTiers.containsKey(tierAlias) && totalBytesOnTiers.get(tierAlias) > 0
appendValue(value,sb,variables)
setChangePincodeView(true)
lsize < rsize
format(arguments[i],false)
getFinalRunnable() == null && myMore != null
sendMessageAtFrontOfQueue(CMD_STOP_AP)
new ConcurrentHashMap<String,Object>(256)
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Arrays.hashCode(mData)
3.0 + (3 * random().nextDouble())
settings.readLPw(null,0,false)
Validator.isBlank(body)
UpgradeStepRegistrator.class
PART_COUNT=1000
fileContent.getFileName().indexOf('$') < 0
getConnectTimeout()
myVMParameters.getComponent().setDialogCaption(myVMParameters.getRawText())
hasColumn("CalendarBooking","vEventUid")
savedNetwork.setParams(newParams)
onDetachedFromWindow()
new HTTPArgument(getArgumentName(),value,false)
loader.stop()
AsyncProjectViewSupport.class
keySet.isEmpty()
new StringBuilder(256)
classFilter.getRejectedIDs()
new int[97]
removeUser != UserHandle.USER_ALL
noteReleaseWifiLock(wifiLock)
ActionController<Id>
new ConstructingObjectParser<>("realm_info",true,a -> new RealmInfo((String)a[0],(String)a[1]))
file == null || !file.isValid()
new KsqlEngine(kafkaTopicClient,schemaRegistryClientFactory,clientSupplier,metaStore,ksqlConfig,adminClient)
ChannelGroup channelGroupObj=(ChannelGroup)channelGroupSubscriptions.getItem(group); 
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"meminfo",pw)
BeanFactoryUtils.beanOfTypeIncludingAncestors(context.getParent(),ConfigClientProperties.class)
RoleLocalServiceUtil.loadGetRole(companyId,name)
cachedMemoryUsageBytes <= softMemoryLimitBytes
Map<String,Object>
status == BackupConstants.TRANSPORT_OK
timedOut.await(1000,TimeUnit.MILLISECONDS)
myClassName.length() == 0 || myClassName.startsWith("javax.swing")
LocalFileSystem.getInstance().refreshAndFindFileByPath(fullPath.replace(File.separatorChar,'/'))
newNode.makeNonIndexableRecursive()
msgLog.debug(msg,true)
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
mUiHandler.removeCallbacks(pae)
jvmOptions.jvmArgs(DEFAULT_JVM_ARGS)
!material.getUseTickets()
mFinishing && mSupportHardware && mHwCenterX != null
_connector.getResponse("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\nUser-Agent: Mozilla/5.0 (test)\n\n")
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase,false)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
{1,0,0,0,0,0,0,0,0,0}
CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
BackupManagerServiceInterface svc=mService; 
new IllegalStateException(sm.getString("wsRemoteEndpoint.wrongState",this.state))
editor == null && this.formattingService != null
Throwable e
AtmosphereRequest.newInstance()
ESTestCase.randomAlphaOfLengthBetween(5,10)
disables.contains(a.getName())
pageContext.getRequest()
return true; 
assertEquals(939,trackPoints.size())
msgLog.warn("Exception occurred while setting up store modules. Attempting to close things down.",e)
System.setProperty(KYLIN_JOB_JAR,path)
!Navigation.checkNavigationCategory(undoCategoryList.get(note))
response.getRawStatusCode()
EnglishUdLas=88.72648417258083
@NonNull
LOGGER.info("Attaching API Key: " + apiKey)
state != null && state.mTint != null
!mTFS.exists(turi)
fdoProvider.getFdoMode() != FdoMode.OFF || fdoProvider.getPrefetchHintsArtifact() != null
tileBox.getDensity()
Localization.menuTitle("Quality")
_typeSettingsProperties.toSortedString()
mVibratorService.vibrate(null,2000,new Binder())
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
returnTypeOfGetMethod != null && !TypeUtils.noExpectedType(expectedType)
aProject.getTasks().configureEach(captureReportingTasks)
container.lookup(ArtifactResolver.ROLE,"default")
log_lines[9].substring(0,774)
new DefaultConfiguration(new DefaultConnectionProvider(connection),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
mock.expectedMinimumMessageCount(1)
Log_OC.e(TAG,"initFragments() called with invalid NULLs!")
nameTextField.getText()
(int)step + 4
uri.toString().equals(future.getURI().toString())
leftTuple.setStagePrevious(last)
logger.error("failed to create index [{}]",e,indexMetaData.index())
ByteBuffer.allocate(4)
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.USER_CURRENT)
String name
methodExists("of",typeNode,false)
6 * width * height
Trans != NO_TRANSPOSE
Env.fromString(env)
SCAN_STATUS_COMPLETE=2
Exception e
previous != null && previous != data
varX("name",ClassHelper.STRING_TYPE)
type.getDeclaredConstructor()
mRemote.transact(GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
_freemarkerEngineConfiguration.resourceModificationCheck()
scopeGroup.isLayoutSetPrototype() || scopeGroup.isRegularSite() || scopeGroup.isUser()
copy1DRangeFromUnchecked(0,mType.getCount(),i)
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean","mock:result")
addContactButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
DBG=true
createRx(config)
minSize(new Fixed(width),new Fixed(height))
new ArrayList<>(0)
return true; 
o.getRule().isDefaultOff() || o.getRule().getCategory().isDefaultOff()
SC_FILE_NAME_EXCEPTION=492
String message
count > 0
mock2.expectedMinimumMessageCount(2)
Simple.forClass(SkylarkNestedSet.class)
MapActivity.launchMapActivityMoveToTop(mapActivity)
transferCallButton != null
selenium.isElementPresent("link=Control Panel")
mNoteTypeSpinner.setSelection(position,false)
FileUtil.toContainerFile(u)
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
!isAllFiles()
companyAssetCategory.getCategoryId()
new IndexWriter(dirName,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selectRestriction(spRestriction.getSelectedItemPosition())
suiteMethod.invoke(null)
tracesDir.mkdirs()
mImageManager.load(holder.mImgAvatarOrBlavatar,imageUrl,null)
CacheProjection<K,V>
odi.close()
assertCompletionVariants(myProjectPom,"org.codehaus.plexus","test","org.apache.maven.plugins","org.codehaus.mojo","intellij.test")
FileCopyPasteUtil.createDataFlavor(DataFlavor.javaJVMLocalObjectMimeType,Class.class)
Slog.e(TAG,"Starting rect for app requested, but none available",new Throwable())
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
mMat[5]
wrapper == null || !wrapper.isShowing()
from > to
tracesDir.mkdirs()
config.isAnimateGrass()
fieldDescription.isVisibleTo(instrumentedType)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
is(2)
AbstractAegisProvider.clearContexts()
isAValuesDirectory(parentFile.getName()) || parentFile.getName().startsWith("raw")
obj.getIss()
String message
TreeSet<String>
context.getVariableResolver().replaceTokens(bsz)
feedEntryStatusDAO.findUnreadByCategories(children,null,0,1,ReadingOrder.desc,true)
!((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
identifier != null && identifier.isPhysical()
loaded.getLoaded().getDeclaredConstructor()
getVirtualMachine().canRedefineClasses()
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
getMaxSheetTranslation()
!pluginManager.isExecuted()
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
dynamicClassType.getDeclaredConstructor()
buildInitPendingIntent(vol)
new RoutingControlAction(this,newPath,true,callback)
UpgradeStepRegistrator.class
UISettings.getInstance().getShowEditorToolTip()
TelephonyManager.getDefault().getCurrentPhoneType()
new CompletionItemCapabilities(true)
index < next
new ListenerInfo("ajp",server.getLocalAddress(),openListener,null,server)
y * width
connection.hlen(key)
PATH_ITERATIONS * 10
Thread.sleep(100)
_log.warn(ioe,ioe)
(UnsubscribeForm)actionForm
throwable.getMessage()
selenium.isElementPresent("link=Control Panel")
value.equals(values[i])
jailName == null || config.getProperty(jailName.toLowerCase()) == null
rs.getNString(columnIndex)
settings.readLPw(null,0,false)
display.getRealMetrics(dm)
log.error("Error while closing command context",exception)
synchronized (mService) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
Ddeml.INSTANCE.DdeFreeDataHandle(hData)
phys.sync()
System.currentTimeMillis()
stack.get(stack.size() - 4).longValueSafe()
item(MITHRIL_PLATEBODY)
new Paint()
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","span","strike","strong","sub","sup","u","ul")
target.getParentFile().isDirectory()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
map.addv2(key,tmp)
yvel == 0.f || Math.abs(xvel) > Math.abs(yvel)
this.date=timestamp
leftTuple.setStagePrevious(last)
Arrays.asList("Java","CSharp","Cpp")
logger.fine("Expanding Jquery Aliases")
final ImportControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
selenium.isElementPresent("link=Control Panel")
date.getYear()
ONE_MINUS_DST_ALPHA(7)
!availableLocale.equals(defaultLocale)
parentFile.isFile()
state.getTypeMapper().mapType(type)
Arrays.hashCode(valSrcQueries)
out.writeFloat(mProgress)
mFragments.mCurState < Fragment.CONTENT && mFragments.mActivity != null
targetProject.ensureEvaluated()
getShortName()
new PageException("分页参数不是合法的数字类型!",e)
mBiometricUnlock.stop()
success >= 139
!mRenderNode.isPivotExplicitlySet()
checkArgument(partitionColumns.size() == values.size(),"Partition value count does not match the partition column count")
_log.warn(ioe,ioe)
Ln.d("An exception occured during service execution :" + e.getMessage())
nextTypeId >= allocatedIds.length
mListener.getConnectionId() != -1 && request.mConnectionID != null
NetworkParameters.oldTestNet()
case READ_UNCOMMITTED: 
socketFile.toString().length() >= 104
loaded.getLoaded().getDeclaredConstructor()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
Collections.emptyList()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
Object[]
public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
pluginContainer.lookup(ComponentConfigurator.ROLE,pluginRealm)
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
simple.getToReceivedDate()
setZrtpEncryptionOnDescription(mediaType,description,null)
selenium.isElementPresent("link=Control Panel")
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
CAMERASERVER_UID=1047
agent != null && agent.getHeader() != HttpHeader.USER_AGENT
mPowerManager.isInteractive()
telegram.getTimestamp() > currentTime
Integer.parseInt(value)
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
ReflectUtils.getBeanSetters(target)
new ObjectTagging(new ArrayList<Tag>())
op2.z()
highlightInfo != null && !(rType instanceof PsiMethodReferenceType)
assertEquals(inserted.size(),table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size())
MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS=2000
sDefaults.putBoolean(KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL,false)
LOG.info("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
entry.rxBytes == 0 && entry.txBytes == 0
Arrays.hashCode(mData)
FAILURE_PATTERN.matcher(output)
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
Utils.stackTrace(exception,false)
String whitelistArray=mJpSettings.jetpackProtectWhitelist.toString().replace("[","").replace("]",""); 
preferences.get("cityAdminLevel","8")
address != null && address.indexOf('?') != -1
Long.parseLong(nfcid2,16)
_log.warn(ioe,ioe)
RuntimeException.class
Arrays.asList(RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.BATTERY_LEVEL,RFXComValueSelector.WIND_DIRECTION,RFXComValueSelector.AVG_WIND_SPEED,RFXComValueSelector.WIND_SPEED,RFXComValueSelector.TEMPERATURE,RFXComValueSelector.CHILL_TEMPERATURE)
DEFAULT_VERIFY_ENABLE=true
resultTypes[i]
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
POOL_SIZE > 0
m.getDeclaringClass()
IntentFactory.create(mContext,type,classifiedText)
config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
format(elem,false)
any()
new NodeHistogram(application,range,responseTimes)
_buildTemplateWithGradle("npm-react-portlet","react-portlet-dependency-management","--dependency-management-enabled")
fluid.getBlockID() > 0
is(true)
viewWidth <= 0 || viewWidth > screenWidth
converterTemplate(converter)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
Integer.parseInt(bottomStr)
Boolean.parseBoolean(conf.get("mapreduce.job.is-mem-hungry"))
return testFileEntry; 
pgl.blendFunc(PGL.SRC_ALPHA,PGL.ONE)
operand instanceof PsiLiteralExpression
mImm.getEnabledInputMethodList()
new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/JavaStaticMethod.kt")
Thread.sleep(3000)
context.getMainLooper()
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
new Config(null)
LinkageError e
mCurrentDate.get(Calendar.MONTH) != month
new SystemException("Unable to communicate with OpenId provider",ioe)
cg.getUpdater().update(gradient[0],1,batchSize)
/**   * counter-clockwise   */ CCW(1)
image.getRGB(j,i)
assertEquals("rt",cfg.resultType)
_vecs[1]
SPEC_REGEN_TICKS=50
new LinkedHashMap<>(0)
requestRender()
checkCall(receiver)
DirectoryReader.openIfChanged(reader)
Long.parseLong(val)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new JpsMavenRepositoryLibraryDescriptor(groupId,artifactId,version,includeTransitiveDependencies)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
providedScope=true
mHotspotBounds.set(left,top,right,bottom)
view != null && view.getParent() == this
str.chomp19(context)
assertEquals(1d / (totalTime / 1000d),calculator.getRate(),0.0001d)
Integer.toString(9)
stack == null || stack.mStackId != DOCKED_STACK_ID
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
TokenSet.create(ABSTRACT_KEYWORD,ASSERT_KEYWORD,BOOLEAN_KEYWORD,BREAK_KEYWORD,BYTE_KEYWORD,CASE_KEYWORD,CATCH_KEYWORD,CHAR_KEYWORD,CLASS_KEYWORD,CONST_KEYWORD,CONTINUE_KEYWORD,DEFAULT_KEYWORD,DO_KEYWORD,DOUBLE_KEYWORD,ELSE_KEYWORD,EXTENDS_KEYWORD,FINAL_KEYWORD,FINALLY_KEYWORD,FLOAT_KEYWORD,FOR_KEYWORD,GOTO_KEYWORD,IF_KEYWORD,IMPLEMENTS_KEYWORD,IMPORT_KEYWORD,INSTANCEOF_KEYWORD,INT_KEYWORD,INTERFACE_KEYWORD,LONG_KEYWORD,NATIVE_KEYWORD,NEW_KEYWORD,PACKAGE_KEYWORD,PRIVATE_KEYWORD,PUBLIC_KEYWORD,SHORT_KEYWORD,SUPER_KEYWORD,SWITCH_KEYWORD,STRICTFP_KEYWORD,SYNCHRONIZED_KEYWORD,THIS_KEYWORD,THROW_KEYWORD,PROTECTED_KEYWORD,TRANSIENT_KEYWORD,RETURN_KEYWORD,VOID_KEYWORD,STATIC_KEYWORD,WHILE_KEYWORD,TRY_KEYWORD,VOLATILE_KEYWORD,THROWS_KEYWORD,ENUM_KEYWORD)
nodeEngine.getClusterService()
Object value
V extends Identifier
subProperties.putIfAbsent(subName,value)
Math.abs(a.d - b.d) < 2e-3
CompletableFuture<Void>
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) != null
defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary
JavadocTagContinuationIndentationCheck.class
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
c instanceof JComponent && ((JComponent)c).getClientProperty(CLICK_INFO) != null
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.name,null,pkgSetting.installerPackageName,null)
Slog.w(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
LOGGER.warn("Could not attach file",ex)
displayContent.getDockedStackVisibleForUserLocked()
public static XQueryBuilder xquery(File file) throws IOException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
new Person("bob")
ReflectionUtils.findMethod(user.getClass(),userPropertyToUse,new Class[0])
level < 0 || values.length == 0
node.getEndLine()
assertEquals(12,beanCount)
3.0 + (3 * random().nextDouble())
clauses.size() > 0 && conj == CONJ_AND
this.route(request).map(RouterFunctions::cast).switchIfEmpty(Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))
telephony.isIdle(getOpPackageName())
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
Boolean.parseBoolean(this.getOptional("kylin.query.escape-default-keyword","false"))
anyOf(success(),successNoContent(),serverError())
Media.class
activityNdx <= topActivityNdx
source.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
networkInfo == null || networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
mService.getConnectionInfo(mContext.getOpPackageName())
logger.debug("Cannot add group member ({})",e.getMessage())
new ConnectionException(sm.getString("http2Parser.payloadTooBig",Integer.toString(payloadSize),Integer.toString(maxPayloadSize)),Http2Error.FRAME_SIZE_ERROR)
((Activity)getContext()).finish()
new V(9,new BooleanSetting(Account.DEFAULT_SORT_ASCENDING))
TelephonyManager.getDefault().getCurrentPhoneType()
poiParentCategory != null && poiParentCategory.length() > 0
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mWindow == null || !mWindow.getSharedElementsUseOverlay()
mockRequest.addHeader("Authorization","bearer " + TGT_ID)
from >= to
StringBuilder sb=new StringBuilder(); 
log.warn("Error parsing command line: " + e.getMessage())
mMediaPlayer.isPlaying()
super.getBetweenDateProvider(path)
getPolicy().getMaxBinaryMessageSize()
taskName.contains(":buildSrc:")
got == possible || got < expected
new ObjectMapper().readerFor(Map.class)
size=6
mAdapter.unregisterDataSetObserver(mObserver)
startMediaTimeState != START_NOT_SET
insertAfter != null && firstMissing != null
new Packet(data,0)
counts != null && lineCount > 2
new BuilderImpl<>(clazz,this::_getNameOrFail,biConsumer,relatedCollectionsSupplier)
width - 4
buildHistoryNewItem(sectionTitle)
IllegalStateException nsee
UsageDetailMode.DETAIL == usageDetailMode && usage.getUsageType() == UsageType.CONSUMABLE
assertEvaluate(buildFile).moduleLookup("txts")
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
clazz == null || !(clazz instanceof JSQualifiedNamedElement)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) && getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) && getChatopsAuthToken().equals(ChatOpsRepo.getChatopsAuthToken())
Number rate
given().contentType(ContentType.BINARY).content(inputStream).when().put("/file")
enclosingHeight - height - insetBottom
@Nullable
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(24)
metrics.getExecutionTimePercentile(75)
methodName.startsWith("getUseScope")
setterVisibility=Visibility.NONE
mAccessibilityController.isAccessibilityEnabled()
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
blog.getLocalTableBlogId()
e.printStackTrace(System.out)
myError != null
type.isEmpty()
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
RedisRunner.shutDownDefaultRedisServerInstance()
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commitAllowingStateLoss()
sendKeyDown(keycode)
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsRead")
instance2.getLifecycleService().shutdown()
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,event.successMessage)
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
keySet.isEmpty()
recycle(false)
new Paint()
mode.contains("advent") || mode.equalsIgnoreCase("2") || mode.equalsIgnoreCase("a")
mThumbPosition >= getThumbScrollRange() / 2
Math.max(1,amount)
telephony.isIdle(getOpPackageName())
ckj * (-puf)
{0,0}
_testUploadPortlet.put(testFileEntry)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
assertEquals(1,classLoaderAwares.size())
task.stack != null && tr.stack != null && task.stack != tr.stack
selenium.isElementPresent("link=Control Panel")
groupVM.getGroupType() == GroupType.GROUP && groupVM.isMember().get() && groupVM.getIsCanCall().get()
selenium.isElementPresent("link=Control Panel")
enabled=true
pId + BASE_FILE_NUMBER
new MappingValueRename(outputMapping,outputField)
recompile(source,name,oldClass)
Optional.ofNullable(this.servicesManager.findServiceBy(service))
hyphenationFile.toURI()
ImmutableBiMap<Integer,String>
!StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField._TAGS.field())
executeJobExecutorForTime(10000,200)
selenium.isElementPresent("link=Control Panel")
c.close()
public Builder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } 
height <= 0
remaining == 0
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
event.getX()
reject(e)
mMccStr == null
!languageContribution.isValid(credentials)
userRecord != null && userRecord.mClientRecords != null
customer.getId()
selenium.isElementPresent("link=Control Panel")
ReadCommand command
new ArrayList<>(0)
DEBUG_RC=false
state != SocketState.CLOSED
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
mActiveAgents.remove(info)
CompilationUnitTree tree
public AfterWatermarkEarlyAndLate withEarlyFirings(OnceTriggerStateMachine earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,true)
pId + BASE_FILE_NUMBER
ultimateRecyclerView.setDefaultOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
LOG.warn("Cannot access storage directory " + rootPath)
displayContent.getDockedStackVisibleForUserLocked()
block.blockMaterial.isToolNotRequired()
Response.ok(null,MediaType.TEXT_PLAIN)
Constant.isDailyBuild(progVersionStr)
new RuntimeException(e)
testClass.getSimpleName()
new ArrayList<>(0)
DEFAULT_TETHER_OFFLOAD_DISABLED=1
copticDate.dayOfMonth()
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
stationItemName != null && openSprinkler != null
ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,AppleBinaryDescription.class,AppleBundleDescription.class,AppleTestDescription.class,HalideLibraryDescription.class,SwiftLibraryDescription.class)
5 * 1000
new TypeList.Explicit(enterTypes)
targetElement != null && targetElement != file
dic.buildRouterChain()
source != null && !source.isEmpty()
schemeSpecificParts != null && data != null
eligible.size() > allowedSegCountInt
settings.readLPw(null,0,false)
block.localsLiveIn.andNot(block.localsLiveKill)
myRightPrecalculated.get(lineRight)
assertEquals("Should have exact number of build phases",4,target.getBuildPhases().size())
_instanceDataManagerConfiguration.getBoolean(DIRECT_REALTIME_OFFHEAP_ALLOCATION,false)
temp_descs.get(j)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).descriptionAndTooltip(message)
drawable != null
mFiles.indexOf(file)
LOG.fatal("Cannot run ThriftServer",e)
InsertReturningStep<R>
shell.evaluate(script.toString(),source)
mjCtx.getOldMapJoin() == null || setReducer
mapper.getFactory()
handlers.length == 0 || handlers[0] == null
isAvailable(oldStatus)
configurations.maybeCreate(Dependency.ARCHIVES_CONFIGURATION)
getSelectTableQuery().query(database)
params.getSimulatedPlatformVersion()
o2.getParameterTypes()
me.getComponent() == myCurrentComponent || me.getComponent() == myQueuedComponent
++polled < maxResults
assertRestrictBackgroundOn()
nextMapping == null || column > getColumn(nextMapping)
getAction().toString()
FileType.of(".so",".dylib")
line.split(HgChangesetUtil.ITEM_SEPARATOR,-1)
VCS_BLAME=1
mState == STATE_UNINITIALIZED
PoolResources.elastic("tcp-client-pool")
logger.trace("Retreiveing door data")
state.isAlive()
alluxioUriToLoad.getPath()
parser.nextText()
event.get(factory.getName())
performDexOpt(packageName,instructionSet,false)
Collections.singletonList(new IntPair(0,data.getLines()))
dstCursor == null
pathParameterMap != null
(OutputScrapingExecutionFailure)executionResult
new WitnessService(appT,context)
LOG.warn("register druid-driver mbean error",ex)
mAdapter != null && mDataSetObserver != null
mCallback.onInputUpdated(inputId)
@NotNull
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
mGnssCallback != null
new ChunkUpdater(c,tessellator,worldProvider,this)
mPowerManager.isInteractive()
presentation.updateValueView()
newFlagged=Boolean.parseBoolean(value)
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,false,userId)
FileContentUtilCore.reparseFiles(fileSet)
new IllegalStateException("Advertising can't be both connectable and scannable")
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST
response.location()
new DummyUpgradeStep()
DataList<T>
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()).build()
StringUtils.isEmpty(initExpr) ? 0L : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
_typeSettingsProperties.toString()
Integer.parseInt(stackIdStr)
csFoldingEnabled.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
selenium.isElementPresent("link=Control Panel")
args.add(mActivity)
localInputFuture.cancel(mayInterruptIfRunning)
Response.ok(null,MediaType.TEXT_PLAIN)
builder.appendRows("4dlu, pref")
details.setProperty(fileName,Long.toString(timestamp))
expectation.getTimes()
MIN_PORT_NUMBER <= port
registerError(expression,expression)
length < 0
JvmDeclarationOriginKt.OtherOriginFromPure(myClass,function)
imageView.setImageDrawable(drawable)
new JBossServerCapabilities()
ServiceLoader.load(ReportInteraction.class,getClass().getClassLoader())
new Text(this.comboComposite,SWT.READ_ONLY)
LOG.debug("Getting synchronous method stub from channel")
Simple.forClass(Boolean.class)
scriptField.setInitialText("")
DeclaredType fooTypeMirror=types.getDeclaredType(fooElement); 
Variable emitBitScanForward(Value operand); 
mBackdrop.animate().alpha(0.002f)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
validate()
isListViewFling() || !isVisible()
@Specialization(guards="escapingValue == null") protected LLVMTruffleObject escapingNull(@SuppressWarnings("unused") Object escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return LLVMTruffleObject.createNullPointer(); } 
conditionCache.get(method)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).switchIfEmpty(EMPTY_FORM_DATA)
allOf(withContentDescription("drawer open"),withParent(withId(R.id.toolbar)))
userImpFactor.addEqual(userFactors.row(userIdx,false))
assertPlanEquals(expectedPlan,actualPlan)
mParent == null
status().isSeeOther()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
_securityHandler != null && _securityHandler.getHandler() == null
Mono.subscriberContext()
getItemViewType(wantedPosition)
-998173294
log.warn("Couldn't get font " + fontName)
MultiMap.create()
RetryHandlingBlockMasterClient.class
s.createTextMessage()
Exception e
this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)
this(dataSource,true); 
MORE_DEBUG && okay && mAgent != null
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
Throwable e
expected == float.class || expected == Float.class
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
event.getRawX()
cell.localCopy(HeapAllocator.instance)
typesArray.length != row.productArity()
info.getRegionNameAsString()
main.getOutput()
renameContactPanel.getNewName()
-13
buildInitPendingIntent(vol)
surfaceHeightFacet.getWorld(pos.getX(),pos.getY())
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
new TypeMismatchException("'" + toName(object.getClass()) + "."+ field.getName()+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(field.getType()))
selenium.isElementPresent("link=Control Panel")
mListener.getConnectionId() != -1 && request.mConnectionID != null
checkCall(receiver)
connection.hlen(key)
node1.isEquivalentToTyped(node2)
mBluetoothGatt.registerScanner(this,mWorkSource)
data.split("\\s*,\\s*",-1)
javaWriter.emitSingleLineComment("foo")
topLevelEditor.getDocument()
0 <= newCursorPos && newCursorPos <= text.length()
signature.getFile()
Environment.getOemDirectory()
ensureYellow()
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
getCurrCapacityUsed()
!mShowAnimations && mShowTimer && mCardTimer.getVisibility() == View.INVISIBLE
fileSystem.renameFile(backup,file)
i=1
partialUri.toLowerCase()
ImmutableList<SuggestedFix>
transaction.commitAllowingStateLoss()
tv.setTextSize(TypedValue.COMPLEX_UNIT_PX,mTextView.getTextSize())
20000 * 4 * 4
type.getDeclaredConstructor()
sep < 0 || sep > j
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
getActiveFgCall().getPhone().startDtmf(c)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.LOCKDOWN_IN_POWER_MENU,0,getCurrentUser().id)
getClusterMap().set(buildAttributeName(name),value)
edgeId >= edgeCount
timeout >= 0
builder.build()
previousDataInputs != null
ohCache.memUsed()
precision=1E5
rhs.getScore()
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,true,progress)
proposalController.processProposals()
get(context,R.string.pref_auto_viewed,false)
!mQuietEnable
outputArtifact != null && !isLtoIndexing
VERSION=42
ModuleType.get(module).getIcon()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
@SkipWhenEmpty
AbstractBottomUpTraversal<T,RuntimeException>
!ON_TOP
locationRequest.setFastestInterval(fastestUpdateInterval)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new Random()
removeFlagFromCache(account,ids,flag)
1 << 3
CommonUtils.randomAlphaNumString(random.nextInt(10))
rhs.getScore()
this.constraints.updateFromTuple(workingMemory,leftTuple)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isElementPresent("link=Control Panel")
response.location()
public ArabicLetterTokenizer create(Reader input){   return new ArabicLetterTokenizer(input); } 
method.getReturnType().getName()
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
getAnimation(id,false)
sceneToLocalTransformation.preConcat(parent.getSceneToLocalTransformation())
_buildTemplateWithGradle("content-targeting-tracking-action","tracking-dependency-management","--dependency-management-enabled")
connection.getErrorStream()
WatchlistConfig.getInstance().isConfigSecure()
T v
DEBUG=false
new BitSet(hashSize)
callTimeout=5000
IllegalArgumentException e
assertEquals(1024,((CacheHashTable)db.engine).cacheMaxSize)
interceptorParamTypes.length - 3
Byte.toUnsignedLong(seed[0])
app.setOwnerName(ownerName)
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
console.getStdErr()
mAppliedTemporaryAutoBrightnessAdjustment=false
ofSeconds(10)
Aria.download(this).getTaskList()
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
revIdx < myParametersNotNull.length
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
getSQL()
new MockNode(settings.build(),Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
size > maxListFill
assertTrue("File:" + file.getPath() + "; time:"+ modified,timestamp[i] != modified)
topLevelBuildData.getUserContentRelativePath()
new WitnessService(appT,context)
defaultRequestConfig.getConnectTimeout()
new Interval(startTime,endTime,ISOChronology.getInstanceUTC())
requestRender()
rootReference.root.isComplete()
new IndexWriter(rd1,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
FileUtils.forceDelete(localRepoDir)
20000 * 4 * 4
6 * width * height
SAM<Integer>
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
assertRestrictBackgroundOn()
unlockForRescale()
mStackScroller.getChildAtRawPosition(x,y)
mSite.getSpaceAllowed()
badgeText.length() == 1 || badgeText.length() == 0
LOGGER.error("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
KotlinPluginUpdater.Companion.getInstance().kotlinFileEdited(virtualFile)
mNetd.setDnsConfigurationForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
selenium.isElementPresent("link=Control Panel")
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
groupType == null || device.isGatewayExtras()
m.executeAsync()
Assert.assertEquals(1,clusterEventListeners.size())
participantAddresses.get(1)
String activeTab
size * 1.8f
loaded.getLoaded().getDeclaredConstructor()
getExecutionException()
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
dstCursor == null
databaseFile.getName()
pressedView.post(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
new StringBundler(2)
historyItem.getArticleTitle()
Beans.newDuration(casProperties.getAuthn().getOauth().getAccessToken().getMaxTimeToLiveInSeconds()).getSeconds()
-904632508
@Override public AbstractConfigValue getValue(String path){   return find(path,null,path); } 
Long4 v
tag.setLabelposition("top")
blockIo && !ContainerThreadMarker.isContainerThread() && isAsync()
new IndexWriter(dir,new MyAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
tokens.get().match('(','[','=',',',':',';','{')
firstPostObject.optJSONObject("discussion")
Math.min(20,myListModel.getSize())
LogAdapter.createLog(name)
refreshRotationLockTile()
VoiceInteractionManagerServiceStub.this
new URI(sb.toString(),false)
LensPositionSelectors.external()
account.getJid().toBareJid() + ": resumption failed but server acknowledged stanza #" + serverCount
assertEvaluate(buildFile).moduleLookup("txts")
new StringBuffer(self.length() + 16)
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))
bin_dir.findChild("python")
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
this.exchanges.remove(requestId)
assertPlanEquals(expectedPlan,actualPlan)
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Assert.assertTrue("First build time (" + timeOne + ") is not greater than second build time ("+ timeTwo+ ")",timeOne > timeTwo)
new ArrayList<>(0)
rt.allowCallsFrom=DEFAULT_CALLS_SOURCE
showPasswordFieldAndFocus()
@DELETE
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
copy.replaceFirst("@" + maybeUserName,"")
private CharSequence text; 
Collections.singletonList(replyAtSameTime)
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
PApplet.splitTokens(properties.getStringAttribute("points"))
graphBuilderConfig.unresolvedIsError()
_typeSettingsProperties.toSortedString()
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_NAME)
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),any())
super.getBetweenProvider(path)
Long.valueOf(p.getProperty("numberid.id"))
compose(f -> f.map(new Elapsed<>()))
value < maximumValue
qp.isExclusiveMaximum()
List<Long>
leafOutcomeValue.advance(doc)
new SpannedString(new CustomSpannable(first),true)
assertRestrictBackgroundOn()
otherWriter.write(line)
Set paramNames=Collections.EMPTY_SET; 
StringBuilder buffer=new StringBuilder("("); 
id=10802
si.id == id && si.taskRemoved == taskRemoved
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
objectFile.createDefinedSymbol(heapSection.getName(),heapSection,0,0,false,false)
selenium.isElementPresent("link=Control Panel")
pk.getColumnNameInSql()
request.getServletPath()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
this.chatroom.getIdentifier().equalsIgnoreCase(chatRoomName)
getSessionTimeout().getSeconds()
Thread.sleep(1000)
builder.and(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
log.debug("Double activation of SQL context")
gatherDisableActionsLocked(mCurrentUserId)
pgl.loadFragmentShader(fragFilename)
!isRunsOutsidePortal(absolutePath) && !className.equals("DeepNamedValueScanner") && !className.equals("ProxyUtil")&& newContent.contains("import java.lang.reflect.Proxy;")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul","var")
selenium.isElementPresent("link=Control Panel")
doTest("va","val ... = ...","var ... = ...","vararg","private","values","variables")
!proportional
assertEquals(1,pools.size())
needRefresh=true
getClass().getSimpleName()
Arrays.asList("Prozent","Gramm","Kilogramm","Uhr")
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity",connection.getSourceChannel())
XmppStringUtils.parseBareJid(address)
data != null || (resultCode != RESULT_CANCELED || (requestCode == 1 || requestCode == 3))
logger.fine("transport is open - connecting")
assertEquals(8,tool.check("I can give you more a detailed description").size())
currentBuilder.getRootImmediately()
element.isRoot()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
e.toString()
apnContext.getWaitingApns()
Boolean.parseBoolean(attrValue)
selenium.isElementPresent("link=Control Panel")
partCount=1
SameValueContextualRule<ConfirmEmail,Email,String>
new HandlingEvent(cargo,new Date(10),new Date(20),HandlingEvent.Type.CLAIM,sesto,null)
totalExternalAccounts > 0
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(5,TimeUnit.SECONDS)
new LeftTuple(f0,sink1)
newEntityBuilder.addComponent(new BlockComponent(type,new Vector3i(blockComponent.getPosition())))
stepLightIdleStateLocked("s:shell")
Integer.parseInt(taskIdStr)
getFullName()
final SimulatedDpad mSimulatedDpad; 
MapsForgeTileSource.createFromFiles(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
nodeEngine.getSharedService(LockService.SERVICE_NAME)
writeOwners.clear()
AtlasBuildContext.atlasMainDexHelper.getMainSoFiles()
cfg.entrySet()
onDetachedFromWindows()
handleImpl.getObject()
private PostgreServerPostgreSQL serverExtension; 
sizeChanged && getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
public SnowballFilter create(TokenStream input){   return new SnowballFilter(input,language); } 
/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends BaseCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } 
um.getEnabledProfileIds(mCurrentUserId)
ImmutableList<Map<String,Object>>
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commitAllowingStateLoss()
poList[2]
softClassCache.putIfAbsent(beanClass,results)
mAdapter != null && mDataSetObserver != null
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
new WitnessService(appT,context)
case 4: 
new FrameTask.DataInfo(train,1,false,true,!classification,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
new Message("XML_STREAM_EXC",LOG,e.getMessage())
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
clientCodeVerifier == null
LOG.info("Too many MultiFetch errors, falling back to Fetch only.")
old.isUnderlinedRaw()
i <= uri.length() - 2
List<Fragment>
type.getInternalName()
Integer.parseInt(this.getOptional("kylin.server.auth-user-cache.expire-seconds","300"))
ExternalSystemBundle.message("orphan.modules.dialog.text")
graph.getEdgesAndMetaEdges()
getBorderRadius() >= 0.5f || getPathEffectForBorderStyle() != null
WrapAlloyTemplateTaskTest.class
randomFrom(SearchType.QUERY_THEN_FETCH,SearchType.DFS_QUERY_THEN_FETCH)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])
toCal.get(Calendar.ERA)
Number rate
((Scorecard)serializable).getUseReasonCodes()
ctx.cache().getOrStartCache(cacheName)
IoUtils.safeClose(connection)
LOG.warn("Unable to close socket selector")
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
!hasCollapsibleActionView()
TEST_UTIL.waitUntilAllRegionsAssigned(tableName)
imeWin.getFrameLw()
order=12
MAX_ARITY=25
accountSettings.isSynchronization() || SettingsManager.isSyncAllAccounts()
Key.class.getName()
owner == null || resultType instanceof PsiPrimitiveType
dist <= bestdist
targetBox.setEnabled(false)
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
serviceDataUuid == null || mServiceData == null
passCodeIsEnabled()
inputItems.length > index
return false; 
String.format(Locale.ROOT," CH: %6.2fms, without CH: %6.2fms",chTime * 1.e-6 / run,noChTime * 1.e-6 / run)
HexaDecimalToBinary objConvert=new HexaDecimalToBinary(); 
mCurrentVrCompositorService == null
selenium.isElementPresent("link=Control Panel")
id=53
tracesDir.mkdirs()
eKernel.length == 3
setNextBackupId(buf,1)
ExprEval.ofDouble(null)
return mIdleTimeMillis; 
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
precision == null || precision.isEmpty()
EqualityComparer<TKey>
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,value))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
header.findViewById(R.id.avatar_bgrnd)
sortedRanges.size()
first.getWeight()
logger.debug("Trying to map {} to {}",t,path)
ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
new Random()
@Test
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
(Number)array[this.index]
_resourceReferences.add(file)
mActiveStreamType == -1 || streamType != mActiveStreamType
ProjectRootManager.getInstance(project).getFileIndex().isInTestSourceContent(virtualFile)
a.getString(attr)
new InputStreamReader(this.getClass().getResourceAsStream(tokens[0]),"UTF-8")
createHandlerResult(tokenCredential,p)
pubnub.getConfiguration().getProxySelector()
reference.resolve() == null && reference.getReferenceName() != null
computeRealHorizontalScrollRange()
message.isExpired()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
types != null && type != null
batch.getMutations(keyspace,clientState,variables)
host == null || host.isAlias()
loaded.getLoaded().getDeclaredConstructor()
entry.rxBytes == 0 && entry.txBytes == 0
mInner.cancel()
prefsWriter.apply()
GitBekParentFixer.prepare(myProject,root,this)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
dockerClient.copyArchiveToContainerCmd(container.getId())
mAttacher.getDisplayMatrix()
/**   * @return When this column is a {@link ForeignKey} and a Model, returning true with save the modelbefore adding the fields to save as a foreign key. If false, we expect the field to not change and must save the model manually outside of the ModelAdapter. This also applies to ModelContainer objects as foreign key fields.  */ boolean saveForeignKeyModel() default false; 
GL20.glGetUniformfv(program,location,params)
parentVirtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
final LongAdder8 msgCntr=new LongAdder8(); 
BlockingManager.getInstance().getCachedBlockedContacts(account)
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
loading.dismissAllowingStateLoss()
new IllegalStateException(String.format("%s,push=%b",this,isPush()))
assertEquals(4,StringUtil.countMatches(drl,"import "))
assertEquals("helloworld",ss.getSalt())
ret.setComplete(response)
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
getSelectedIconColorRes()
mapper.getTypeFactory().constructType(InspectContainerResponse.class)
new WorldPoint(2487,3005,0)
new Intent(ACTION_FEED_LIST_UPDATE)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
!StringUtil.isNullOrEmpty(websiteDir)
a.getDimensionPixelSize(attr,DEFAULT_MAX_WIDTH)
updatedLocation != null
cr.isUnderflow() && !last
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
LOG.info(title + "; " + message)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
ReadCommand sent
"Failed to create OutgoingJingleSession.\n" + calleeAddress + " does not support jingle"
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
baseComparator.compare(itemStack1,itemStack2)
mCryptConnector.execute("cryptfs","deleteuserkey",userHandle)
item.annotationType()
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new ServletHolder(getAccountServlet)
prefix(dst)
field.getValueClass().isInstance(value)
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
shouldPersist=true
_connector.getResponse("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
exitCode != ExitCode.FATAL_DISK_FULL
this.getAuthorities() != null && !this.getAuthorities().isEmpty()
container.addon.updateBuildingInfo()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
U.compareAndSwapLong(_counts,longRawIdx(x),o,o + 1)
resource.getPath().contains("LanguageTool.uno.jar")
rightResult.cardinality()
hazelcastFactory.newHazelcastInstance(newConfig())
new InetSocketAddress(0)
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24))
SCAN_STATUS_COMPLETE=2
matcher.find()
requestRender()
Color.fromRGB(0xD88198)
tradeService.getBittrexOpenOrders(null)
Thread.sleep(1000)
IOException e
compressedProto.length < 391000
directory == null || (!directory.exists() && !directory.mkdirs())
subProperties.putIfAbsent(subName,value)
/**   * Saves the  {@link CacheWriteEntry}.  * @param cacheWriteEntry the {@link CacheWriteEntry}  * @return the {@link CacheReadEntry} for the written {@link CacheWriteEntry}  * @throws IOException if an I/O exception occurs  */ CacheEntry write(CacheWrite cacheWrite) throws IOException ; 
UpgradeStepRegistrator.class
connection.psubscribe(jedisPubSub,patterns)
System.nanoTime()
holder.setGone(loadEndViewId,visible)
selenium.isElementPresent("link=Control Panel")
new StringParser(charset)
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
tupleOrigin != null && tuples.containsKey(tupleOrigin)
!content.contains("&")
new Rect(left,top,right,bottom)
partitionKey.getType().getName()
Session.getDefaultInstance(prop,null)
tracesDir.mkdirs()
selenium.isElementPresent("link=Control Panel")
new Rectangle(x,y,width,height)
method.getDeclaringClass()
matcher.find()
lp.resolveLayoutDirection(layoutDirection)
new Integer(item.getSeq())
GitFileUtils.delete(myProject,root,e.getValue(),"--ignore-unmatch")
@Override protected ContentEntryEditor createContentEntryEditor(String contentEntryUrl){   myContentEntryEditor=new MyContentEntryEditor(contentEntryUrl,getEditHandlers());   return myContentEntryEditor; } 
return tsrObject; 
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
Set<String>
req.getPathInfo()
UserHandle.myUserId()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
measureRun(0,0,offset,mLen,true,fmi)
event instanceof LogEvent
DescriptorUtils.getParentOfType(from,ClassDescriptor.class,false)
assertEquals(1,pools.size())
mAuthorities.valueAt(i)
position + dockDividerWidth
Flux.from(inputStream).concatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
tracesDir.mkdirs()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
dockedBounds.top - dockDividerWidth
MiddleEntity middle
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateSessionParam",m.getName(),m.getClass().getName()))
Loader.getResource(resourceName)
getPreferences().getBoolean(SIGNAL_PREF,false)
Platform.isPPC()
new MaxCandidatesCondition(5)
nameMethod.invoke(hero)
!isSmartLockAvailable()
(fl & FLAG_LAYOUT_NO_LIMITS) != 0 && attrs.type != TYPE_SYSTEM_ERROR
mMenu.getNonActionItems()
justBootedUp
message.getToTag()
type.getDeclaredConstructor()
Assert.assertEquals(48,c.getInt(0))
(StringBuilder)TransactionSynchronizationManager.getResource(bufferKey)
new DeadCodeEliminationPhase(Required)
connectionProperties.containsKey("oracle.url")
Thread.sleep(1000)
Math.max(0,Integer.parseInt(split[1]) - 1)
DEBUG_RC=false
!newDefaultSubIdObj.equals(mDefaultSubId)
multiValueRow.get(0)
256 * 256 * 12.8
MetadataInstrument2.class.getSimpleName()
LOG.debug("did not find superclass names when mapping inheritance....")
cause instanceof LinkageError
AudioSystem.isMicrophoneMuted()
node1.isEquivalentToTyped(node2)
tryExtractRequired(buildingInfo.entitiesRequiredItems.get(schematicEntity),buildingInfo.entitiesRequiredFluids.get(schematicEntity),true).isPresent()
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
logger.debug("Cannot handle stop command ({})",e.getMessage())
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
public static IdeaTitledBorder createTitledBorderSimpleWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),0,1,new Insets(3,0,6,0)); } 
setIntegerPart(String.valueOf(integerPart))
cal.set(1900,0,1,hour,minute,second)
isAllowedByCurrentUserSettingsLocked(p.getName())
payload.intPayload[2]
getPreferences().save(fos,"")
hex.length()
mentionsListView.setSelection(0)
titleTextField.getText()
mAdapter == null || !mIsAttached
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   return dht().drPauseState(); } 
mAlpha.cancel()
doTestNoDocValues(type)
loadWallpaper(forDraw,false)
new Version(0,1,0)
assertEquals(1234,localReplicatedMapStats.getOwnedEntryMemoryCost())
new StringBuilder(256)
Integer.parseInt(sessionTTL)
Timber.v(e,"Permanent failure during XOAUTH2")
mHotspotBounds.set(left,top,right,bottom)
selenium.isElementPresent("link=Control Panel")
service.getAdnUriForPhoneAccount(accountHandle,mContext.getOpPackageName())
assertFalse(found)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
new int[97]
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } ,indicator.getModalityState())
1
(ElementNode)children.nextElement()
getSharedLocalInspectionTool() == null
instance.getPublicIpAddress()
assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName,"Members")
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,count)
((MasterSlaveDataSource)dataSource).getMasterDataSource()
this.thrown.expectMessage("File must exist")
super.isDither()
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
HIVE_PARTITION_OFFLINE(6,USER_ERROR)
clipItem.coerceToText(mContext)
new FindResultUsageInfo(findManager,psiFile,prevOffset,findModel,result)
x509ExtendedTrustManager.checkClientTrusted(chain,authType,engine)
Integer.parseInt(leftStr)
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),startTime,event.getEndTime())
mDeviceProvisionedController.isCurrentUserSetup()
mPlayer.getCurrentPosition() * 1000L
4 * 4 * 3
IllegalStateException.class
PrintAttributes.enforceValidDuplexMode(currentMode)
tag.setLabelposition("top")
selenium.isElementPresent("link=Control Panel")
DirectoryReader reader=IndexReader.open(dir); 
/**   * Changes permission on current working directory so that the directory is owned by the user and the group remains azkaban. Leverages execute-as-user with "root" as the user to run the command.  * @param effectiveUser user/proxy user running the job  */ private void assignUserDirOwnership(final String effectiveUser) throws Exception {   final ExecuteAsUser executeAsUser=new ExecuteAsUser(this.sysProps.getString(AZKABAN_SERVER_NATIVE_LIB_FOLDER));   final String groupName=this.sysProps.getString(AZKABAN_SERVER_GROUP_NAME,"azkaban");   final List<String> changeOwnershipCommand=Arrays.asList(CHOWN,effectiveUser + ":" + groupName,getWorkingDirectory());   info("Change current working directory ownership to " + effectiveUser + ":"+ groupName+ ".");   final int result=executeAsUser.execute("root",changeOwnershipCommand);   if (result != 0) {     error("Failed to change current working directory ownership. Error code: " + Integer.toString(result));   } } 
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
telephony.isRadioOn(getOpPackageName())
Throwable ex
annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
Iterable<String>
new StringBundler(9)
String.format("Examples labeled as %s classified by model as %s: %d times%n",expected,actual,count)
index=1
selenium.isElementPresent("link=Control Panel")
selenium.click("//li[4]/span/a/span")
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() != 0
serializedSettings != null
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_velocityEngine,_templateContextHelper,false)
unwindNode != null && unwindNode.isAlive()
targetMethod.recordCall(posBefore,posAfter - posBefore,target,debugInfo,false)
componentSettings.getAsDouble("segments_per_tier",10.0d)
ColorProperties.getColor("primaryControlDarkShadow")
List<String>
Thread.sleep(40000)
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
paramType.getSimpleName()
Throwable e
dexFile.readOptionalUint(out.getCursor())
child.resetRtlProperties()
System.arraycopy(objectArray,0,newObjectArray,0,4)
selenium.isElementPresent("link=Control Panel")
BackupManagerServiceInterface svc=mService; 
Slog.e(TAG,message,th)
callback.onPulseFinished()
endPos < bufEnd
mPanProfile.isProfileReady()
shard.applyIndexOperationOnReplica(3,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id2",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
out.writeByte(ENUM_CONSTANT_VALUE_TAG)
Flags.BITFIELD.isSetIn(mdType.getFlags()) || (baseType != UNKNOWN_TYPE && baseType.getSize() != size)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
sub.next(dataBuffer)
return authDecisionStatementProviders; 
@Override public CharsRefBuilder append(char c){   grow(ref.length + 1);   setCharAt(ref.length++,c);   return this; } 
Const.trim(optimizationLevelAsString)
LOG.debug(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
Integer.parseInt(leftStr)
PaginationRequest.of(10,1)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
formatted.split("\n",-1)
/**   * A decorator around a  {@link org.gradle.caching.BuildCacheService} that passes through the underlying implementationuntil a number  {@link BuildCacheException}s occur. The  {@link BuildCacheException}s are counted and then ignored. After that the decorator short-circuits cache requests as no-ops.  */ public class ShortCircuitingErrorHandlerBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private static final Logger LOGGER=LoggerFactory.getLogger(ShortCircuitingErrorHandlerBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final int maxErrorCount;   private final AtomicBoolean enabled=new AtomicBoolean(true);   private final AtomicInteger remainingErrorCount;   public ShortCircuitingErrorHandlerBuildCacheServiceDecorator(  int maxErrorCount,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.maxErrorCount=maxErrorCount;     this.remainingErrorCount=new AtomicInteger(maxErrorCount);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader){     if (enabled.get()) {       try {         return super.load(key,reader);       }  catch (      BuildCacheException e) {         recordFailure();       }     }     return false;   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer){     if (enabled.get()) {       try {         super.store(key,writer);       }  catch (      BuildCacheException e) {         recordFailure();       }     }   }   @Override public void close() throws IOException {     if (!enabled.get()) {       LOGGER.warn("The {} build cache was disabled during the build after encountering {} errors.",getRole(),maxErrorCount);     }     super.close();   }   private void recordFailure(){     if (remainingErrorCount.decrementAndGet() <= 0) {       if (enabled.compareAndSet(true,false)) {         LOGGER.warn("The {} build cache is now disabled because {} errors were encountered",getRole(),maxErrorCount);       }     }   } } 
child.resetRtlProperties()
new VertexBuffer(this,PGL.ARRAY_BUFFER,4,PGL.SIZEOF_FLOAT)
isCompressionSupported(httpRequest) && !(httpResponse instanceof CompressionServletResponseWrapper) && !(httpResponse.getClass().getSimpleName().startsWith("Compression"))
referencingEntity(other).orElseThrow(IllegalStateException::new)
2.0f * zFar * zNear* rangeReciprocal
tile.getUrn().getModuleName()
VcsTestUtil.assertEqualCollections(tags,myTags)
TypeMirror formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER).asType(); 
Thread.sleep(1000)
ConfigureUtil.configureSelf(configureClosure,this,delegate)
mAdapter == null || !mIsAttached
SAMPLE_ERROR_MILLIS=750
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)
assertTrue(message.getPayload() instanceof Collection<?>)
Throwable e1
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
FileUtil.loadFile(GenerateKeywordStrings.DEST_FILE,true)
queryBuilder.append(FlowManager.getTableName(table))
new IntentStarter(act,Intent.ACTION_VIEW,Uri.parse("market://search?q=text to speech engine"))
selenium.isElementPresent("link=Control Panel")
mSharedElements.size()
firstSlash <= 0
@UriParam(label="producer",defaultValue="true")
customization.getStructureAnchor()
buffer.readableBytes() < 8
new ArgumentTypePreparedStatementSetter(args,argTypes)
cursor.getCurrentValueEndPosition()
StringBuilder ret=new StringBuilder(100); 
assertThat(provider.fetchCount,is(2))
GL20.glUniform3iv(location,v)
replaces={"doCachedTypeCachedOffset","doCachedType"}
eventFunc.equals("conf_api_sub_unmute") || eventFunc.equals("conference_api_sub_unmute")
sessionInfo != null && sessionInfo.isTransactional()
objects[1]
logger.debug("TuneIn service not found")
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final HttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
DatabaseFactory.getInstance().openDatabase(config.getString("database.url"),config.getString("database.user"),config.getString("database.password"),config.getString("database.driver"),null,null,null,resourceAccessor)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
m.getDeclaringClass()
selenium.isElementPresent("link=Control Panel")
QMMetaEvent[]
PrintAttributes.enforceValidDuplexMode(currentMode)
getJavaType(keyColumns.get(0).getType(resolver()),Mode.POJO)
private final MessageHeaderAccessor headerAccessor; 
new StringBuilder(1024)
LOG.error(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master")
webSocketProcessor.close(webSocket,1000)
melody.length() - 1
!state.isFrameTypePermitted(FrameType.DATA)
result.add(0,new InetSocketAddress("idontexist",80))
selenium.isElementPresent("link=Control Panel")
new CachedSpiceRequest<T>(request,requestCacheKey,cacheExpiryDuration)
mObsoleteAgents.remove(info)
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
CvsVfsUtil.findFileByIoFile(targetFile)
UpgradeStepRegistrator.class
Looper.prepareMainLooper()
!isImmutable(element)
adapter == IResultSetController.class || adapter == ResultSetViewer.class
StringUtil.isNotEmpty(source)
new ExportCSVTask(targetContext,habitList,selected,archiveFilename -> {   assertThat(archiveFilename,is(not(nullValue())));   File f=new File(archiveFilename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
cls.getDeclaredMethods()
UserHandle.myUserId()
new IllegalStateException("Legacy advertising can't include TX power level in header")
sstable.markObsolete()
accountHandle.getComponentName().flattenToString()
isBookmarksList()
onCreateView(context,appWidgetId,appWidget)
oldValue == null
owners.add(0,Receiver.<String>make(clazzGT.getType()))
tokens.next().expect(Token.IDENTIFIER,'{',"::")
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
StringBuilder sb=new StringBuilder(); 
1000 * 1000 * 1
Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor()
!mgr.isToolWindowRegistered(((ToolWindowImpl)myWindow).getId())
listener != null && mHandler == null
mStack.size() > 1
d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
useInternetToDownload.setOnPreferenceChangeListener(this)
c == null || !c.moveToFirst()
field.getDeclaringClass()
rotationVector.length >= 4
mAuthorities.valueAt(i)
this.convertLocalToSceneCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
is_topic=false
config.getMaxEntriesLocalHeap()
Slog.e(TAG,"couldn't inflate view for notification " + ident,exception)
Log_OC.e(TAG,"Trying to share a NULL OCFile")
@Override
sigmoidDerivative(ndArray,true)
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,true)
mMat[7]
getTestName(false)
Log_OC.e(TAG,"\t file is NULL")
mPlayer.getCurrentPosition() * 1000L
appearance.getFloat(attr,0)
lp.resolveLayoutDirection(layoutDirection)
shard.applyDeleteOperationOnReplica(1,2,"test","id",VersionType.EXTERNAL,mappingConsumer)
Integer.parseInt(taskIdStr)
usersFile.getPath()
value & 0xFF
available > 0 || !read
Map<RealmObject,RealmObject>
logger.trace("Error while matching regex [" + matcher.toLowerCase() + "] for string ["+ matched.toLowerCase()+ "] "+ pse.getMessage())
statistics.addPutTimeNanos(System.nanoTime() - start)
new LeftTuple(new DefaultFactHandle(2,"cheese"),null)
body.getContentType().mediaType()
new CacheCreateConfigRequest(cacheConfig,false,partitionId)
throwParserError(e)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_velocityEngine,_templateContextHelper,false)
DeletionRetentionStrategyConfig.class
serialVersionUID=914169633
selenium.isElementPresent("link=Control Panel")
keyed=true
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
System.setProperty(AUDIT_PROVIDER_KEY,provider)
lock.isHeldByCurrentThread()
new RxNettyHttpServer()
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
Assert.assertEquals(6034503930L,trace.getReceipt().getEnergyFee())
getInitializerGroovy()
time_delta < 1 << (Short.SIZE - Const.FLAG_BITS)
new Paint()
this.sessionAuthenticationStrategy
sigma[i] != 0.0
w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER
listAdapter.notifyDataSetChanged()
realm.checkIfValid()
new Paint()
new GameObjectQuery().idEquals(objectId)
new IllegalArgumentException(Localizer.getMessage("org.apache.jasper.compiler.ELParser.invalidQuoting",expression))
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
synchronized (this) {   return (Class[])classCache.values().toArray(new Class[0]); } 
conn.setTargetDecoration(srcDec)
realm.checkIfValid()
makeTypeWithArguments(node)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
Collectors.toCollection(LinkedHashSet::new)
new Message(MESSAGE_TEXT,false)
curArticle.getResourcePrimKey()
mBottomRightStrip=mContext.getResources().getDrawable(resId)
logger.warn("Invalid state {}",r)
selenium.isElementPresent("link=Control Panel")
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
Pair<ByteBuffer,Column>
defaultCallTimeout=30000
ap.getSsidStr()
mConnectionById.containsKey(callId)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
DateFormat.getMediumDateFormat(context)
Log.i(TAG,"Prepare done")
number=0
List<URLDetail>
FORCE_LOGGING=false
payload.writeBytes((byte[])each)
? extends A
hideable && shouldHide(releasedChild,yvel) && (releasedChild.getTop() > collapsedOffset || Math.abs(xvel) < Math.abs(yvel))
refDefault != null
selenium.isElementPresent("link=Control Panel")
getType().isWildcard()
adapter == null || !adapter.isClass(element)
ServiceManager.addService(Context.INPUT_SERVICE,inputManager,false,DUMP_FLAG_PRIORITY_CRITICAL)
context.init(servletContext,httpServletRequest,httpServletResponse)
loaded.getLoaded().getDeclaredConstructor()
checkCall(receiver)
AWAKE_INTERVAL_DEFAULT_MS=10000
Thread.sleep(1000)
visitStatement(node,context)
parent.incrementPrioritizableForTree0(amt,oldParent)
SourceSatelliteView view
log.isWarnEnabled()
fs0.create(path,128,false,1,CFG_GRP_SIZE,F.asMap(GridGgfs.PROP_PREFER_LOCAL_WRITES,"true"))
assertEquals("[]",q.toString())
mExpandedChild.getHeight() <= mContractedChild.getHeight()
new UnsupportedOperationException("Spatial index only supported with the MVStore")
"Cannot find hibernate configuration file in CLASSPATH: " + HIBERNATE_CFG
driverFile.getFile()
drawable != null
execute("DROP INDEX " + indexName)
case UPGRADE_TASKS: 
!r1
serializer.serializeInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
position + dockDividerWidth
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
(rsv & RSV_BITMASK) != 0
AUTH_TYPE_NEGOTIATE.equals(this.authType)
DEBUG=false
number.longValue()
Simple.forClass(skylarkType)
timeMillis + MILLIS_IN
port >= 21000
new IllegalStateException("Unexpected rule: " + ruleStr)
model.getProductOptionValidationType()
getResource(TEST_AUTOCONFIG_FILE,myClassLoader,updateStatus)
Observable.create(takeWhile(source,new Func1<String,Boolean>(){   @Override public Boolean call(  String s){     return false;   } } )).toBlockingObservable().lastOrDefault("")
LOG.warn("Plugin " + plugin.getName() + " has an artefact "+ shortName+ " without a package name "+ "This could lead to artefacts being excluded from the application")
new GitVersion(1,7,3,0)
Throwable e
value == null || value.equals("")
j--
mDark == dark || mContractedChild == null
(sms.getUserData() == null) && (SmsEnvelope.TELESERVICE_MWI != teleService) && (SmsEnvelope.TELESERVICE_VMN != teleService)
adapterCount < MIN_ADAPTER_STACK
imeWin.getFrameLw()
/**   * Visits the specified list result.  * @param listResult the list result  * @return the result of the visit  */ T visitListResult(ListResultData listResult); 
previousAttribute.compareToIgnoreCase(attribute)
new Environment(settings,conf)
lock.tryLock(2000,MILLISECONDS)
new IOException(msg)
CodeStyleManager.getInstance(myProject).reformatTextWithContext(file,ranges)
model.addAttribute("cookie",cookieV)
new IllegalArgumentException("Property 'targetCacheManager' is required")
redefined.getDeclaredConstructor()
masm.cas(size,result,newVal,address,true,true)
new BroadcastAction(message)
SystemInfo.isMac ? 3 : 2
anyOf(nullValue(),(Matcher)allOf(instanceOf(Long.class),greaterThan(0L)))
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
innerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
new ElementsChooser<ComponentElementProperties>(true)
Thread.sleep(1000)
!isProcessTerminated()
model.getColumn(cell.col)
logger.debug("gave up waiting for query reply from device {}",m_address)
w.getStart() >= oldEndOffsetInLine
LinkageError e
E edge
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
t.join(0)
selenium.isElementPresent("link=Control Panel")
refresh(asynchronous,recursive,postRunnable)
paused
synchronized (mAuthorities) {   writeStatusLocked(); } 
getSelectedIconColorRes()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION,false)
requestRender()
dir.setMaxSizeInBytes(3)
artifact.getId()
_log.warn(ioe,ioe)
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName(),ex)
cxxDeps.get(ruleResolverInner,cxxPlatform)
job.build()
new IllegalStateException("Failed to create working path: " + workingPath,e)
current != null && current.getVersion() != null
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).getSeconds()
new ProcessBuilder("/system/bin/timeout","-k","15s","10s","/system/bin/logcat","-v","time","-b","events","-b","system","-b","main","-b","crash","-t",String.valueOf(lines))
LOGGER.warn("Caught exception while updating segment status for table {}",tableNameWithType,e)
testClass.getSimpleName()
Long.parseLong(val)
addTypes.get("subway_region")
measured.setPara(source,bufEnd,bufEnd,textDir)
frontendHandler.wait()
metadata.getFaces()
myTreeBuilder == null || myTreeBuilder.isNodeBeingBuilt(event.getPath())
LOG.warn("delete failed: {}",e.getMessage())
etp.setSummary(etp.getText())
Number rate
LogUtils.initializeDefaultTestConsoleLogger()
context.getAssets().addAssetPathAsSharedLibrary(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
DEBUG_FOCUS=true
copy1DRangeFromUnchecked(0,mType.getCount(),i)
ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))
Cheese.class
handler.isProcessTerminating()
DLFileEntry.class
mBindingServices.isEmpty()
mRemote.transact(START_ACTIVITY_WITH_CONFIG_TRANSACTION,data,reply,0)
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
LOGGER.debug("Application registered itself as {}",response.getBody())
checkCall(receiver)
getContext().enforceCallingPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
(longValue() >> 16) & 0xFFFF
new DropTableEvent(tbl,true,deleteData,this)
Slog.d(TAG,"showSaveLocked(): no mStructure")
i=2000
ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)
display.getRealMetrics(dm)
checkCall(receiver)
return false; 
ActorSDK.sharedActor().style.getDefaultBackgrouds()[3]
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
requestFocusInWindow()
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
useOsmandKeyboard || !orientationPortrait
sslPrincipal.getName()
new LightweightThread(null,null,new Merge3Test())
mAdapter == null || !mIsAttached
@Override public O getDefaultOutput(I input){   return input; } 
String.format("<html>Commits that exist in <code><b>%s</b></code> but don't exist in <code><b>%s</b></code> (<code>git log %s..%s</code>):</html>",secondBranch,firstBranch,firstBranch,secondBranch)
getPaymentMethodById(account.getPaymentMethodId(),true,context)
guiResource.getImageTransGraph()
!task.isFreeformTask() || includeFreeformTasks
return requires; 
classType.getCanonicalText()
new SingleInetAddressDns()
selenium.isElementPresent("link=Control Panel")
body.isEmpty()
handleImpl.getObject()
clientArchiver.createArchive(project,archive)
telephony.isIdle(getOpPackageName())
Long.parseLong(attrValue)
{2,1}
SamplingProfiler.newThreadGroupThreadSet(group)
new FormAttachment(wAttributes,margin * 3)
code == 10
message.processMessage(null)
cc.getLazy()
bucket.isExists()
CompletableFuture<Void>
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
fullName != null && fullName.length() > selectedFullName.length()
factory.get(fResultClass,NO_ANNOTATIONS,retrofit)
mEncoder.swithToSoftEncoder()
Matchers.containsInAnyOrder(createSymbolicReference("java.lang.String",3,5))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,125000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
performDexOpt(packageName,instructionSet,false)
stats.facetFilter(standardFilters(range,filter))
IndexerRegistryUtil.getIndexer(baseModel.getModelClass())
assertEquals(4933401l,received.get(0)[1])
StringUtil.first(oldDefaultList.getName(),30,true)
typeSettingsProperties.toSortedString()
new IllegalStateException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION))
args.isTestingModeEnabled()
_buildTemplateWithGradle("npm-angular-portlet","angular-dependency-management","--dependency-management-enabled")
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
Integer.getInteger("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
clickListener == null
Build.VERSION.SDK_INT < 21
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
i < 3
List<Exception>
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
!sDisplayAnswer || !getConfigForCurrentCard().has("replayq") || getConfigForCurrentCard().getBoolean("replayq")
DDMStructureLocalServiceUtil.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
messenger.sendCodeObsolete(res)
grabFrame(false,true,false,false)
ConcurrentLRUCache<String,Long>
new AlertDialog.Builder(this)
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)|| (getStatus().getState() == OperationState.FINISHED)
getTelecomService().endCall(mContext.getPackageName())
proto.getRootRelativePath()
scannedUnit.setExcludeUnlistedClasses(true)
engine.execute(query).dumpToString()
LAST_VERSION=1001
currentType != Type.INT
selenium.isElementPresent("link=Control Panel")
Preconditions.checkState(Files.exists(dir),"Dir [%s] does not exist.",dir.toAbsolutePath())
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
gl.marginWidth=5
fpId == 0
service.getInterface()
mActiveStreamType == -1 || streamType != mActiveStreamType
nextValue >= 0x9F
logger.trace("Received MyQ  JSON: {}",dataString)
className.equals(Classes.COROUTINE_NAME)
this.setParticipantState(stateString)
itemMatches(target,itemStack,false)
delaySoFar >= mReEnableDelayMillis
meta.getEncoding()
QueryCursor<Cache.Entry<Integer,Person>>
port.readBytes(serialEvent.getEventValue())
err == 0
read.getStartDate()
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
selenium.isElementPresent("link=Control Panel")
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
GL20.glUniform1iv(location,v)
flushIntervalSecs == 0
serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN
_typeSettingsProperties.toString()
fileIds == null || fileIds.isEmpty()
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
new GroovyBugError("The lookup for " + name + " caused a failed compilaton. There should not have been any compilation from this call.",cfe)
new LocalizedXStreams(classLoader,runtimeOptions.getConverters())
setImageDrawable(icon,false)
typeSettingsProperties.toString()
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withUser)
return false; 
registerWithArgs(sizeMethods,"size",o,methodArgs)
current.getSuperClass()
assertNotNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
var.setValueType(guessType(value))
mContext.sendStickyBroadcastAsUser(intent,UserHandle.ALL)
getService().animateCollapseNotifications()
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
Arrays.asList("d","D","s","S","w","W","b","B","A","G","Z","z","Q","E","t","n","r","f","a","e","h","H","v","V","R","X","b{g}")
storedOverlayInfos.valueAt(i)
ts >= timeout
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
listJobInstances(project,cube,startTime,endTime)
new StreamException(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR,streamId)
LOG.fine(() -> String.format("Discovering tests during launcher %s phase in engine '%s'.",phase,testEngine.getId()))
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
sendKeyUp()
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
selenium.isElementPresent("link=Control Panel")
endpoint.getBus().getInInterceptors().size() >= 1
list.append(pi)
Assertions.checkArgument(isTopLevelSource,"AdsMediaSource must be the top-level source used to prepare the player.")
fromTypeID != null && !"/type/object".equals(fromTypeID)
document != null && document.getRootTag() != null
visibleOnly=true
etp.setSummary(s)
templatesToAddressList(engine,to,model)
((MainTimeLineActivity)getActivity()).setMentionsListView(listView)
MergeEntries.class
new CheckboxTreeViewer(parent,style)
@NotNull
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Collection<GridDrStateTransferDescriptor>
setBackground(null)
sStatsd.informDeviceShutdown()
onDetachedFromWindow()
group != null && !"0".equals(group)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null))
parser.nextText()
Thread.sleep(1000)
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.DoesNotExists.Message",clusterSchemaName)
toArrayHelper(0)
new UnsupportedOperationException(msg)
assertEquals(0L,n2.expireLinkNodeRecid)
intellijProject == null || intellijProject.isDisposed()
text.indexOf('@') == -1 && textView.isEnabled()
stream.rstStream()
(types != null) && (types.length > 0) && ((types.length > 1) || Validator.isNotNull(types[0]))
final String clientSecret="your client secret"; 
bssid == null || !BSSID_PATTERN.matcher(bssid).matches()
db.qualityProfiles().activateRule(builtInProfile,rule,ar -> ar.setSeverity(Severity.MINOR))
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).doAfterTerminate(() -> _isFetching.onNext(false))
tableLayoutHandle.getPartitions().isPresent()
!this.isStompConnected || conn == null
new Selector(10000,failedAuthenticationDelayMs,metrics,time,"MetricGroup",channelBuilder,new LogContext())
!isShowOffline
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
checkDirectory(config.getString("tsd.http.staticroot"),!MUST_BE_WRITEABLE,DONT_CREATE)
type.getDeclaredConstructor()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
mPackages.add(0,coreModulesPackage)
resolve(originalPath,propName,settings,configPath,mustBeValid)
retVal=(constValue + constValue2 == x)
assertThat(dtos).extracting("id").containsOnly(100L,103L)
wikiPagePersistence.findByR_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
(Source)value
mPowerManager.isInteractive()
DBSSchema.class.isAssignableFrom(childType) || DBSEntity.class.isAssignableFrom(childType)
value >= 0
c.getLiquid() == null || c.getLiquid().amount < c.getCapacity()
new SQLiteBooksDatabase(this,"LIBRARY_NG")
assertEquals("List size",3,retList.size())
isAllowedByCurrentUserSettingsLocked(p.getName())
E edge
telephony.isRinging(getOpPackageName())
elementText.substring(i + 1,range.getEndOffset())
setEnabledFunctions(mDefaultFunctions,true)
200 * (1 - start)
dlFileEntry.getDataRepositoryId()
public NetworkCatalogItem libraryItem(){   TreeMap<Integer,String> urlMap=new TreeMap<Integer,String>();   urlMap.put(NetworkCatalogItem.URL_CATALOG,getLink(URL_MAIN));   return new OPDSCatalogItem(this,getTitle(),getSummary(),getIcon(),urlMap,myExtraData); } 
getDelegate().getDefaultCipherSuites()
deltaY <= 0
mUiHandler.postDelayed(pae,timeout)
doInvoke(args.first(),args.rest())
Log.d(TAG,"Got null argument for a defined keyset, ignoring!")
colon > 0
prefs.getBoolean(PERSIST_SERVICE,false)
!ApplicationManager.getApplication().isInternal()
lock.isHeldByCurrentThread()
new AtSet(COMMA,RPAR,COLON,ARROW,RBRACE,LBRACE)
Validator.equals(type,"toggle-card") || Validator.equals(type,"toggle-switch")
drawable != null && mActualHeight > mClipTopAmount
AstyanaxKeyColumnValueStore store=new AstyanaxKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy); 
Exception e
stack.peek()
assertThat(local)
setImageDrawable(icon,false)
selenium.isElementPresent("link=Control Panel")
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
getValidator().call(result)
rackIdToNodes.getOrDefault(rid,Collections.emptyList())
packageName.equals(shortName)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
return true; 
Integer.parseInt(rightStr)
checkManageOrCreateUsersPermission("query user")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
userImpFactor.addEqual(userFactors.row(userIdx,false))
return false; 
propertiesComponent.setValue(CONFIGURED_V2,"true")
new Location(user.getWorld(),x,y,z,user.getLocation().getYaw(),user.getLocation().getPitch())
Arrays.asList(gA0,gA1,gB2,gB3,gC1,gC2)
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING,Binder.getCallingUserHandle())
sorted_files.get(i).createReader(canUseDrop)
UpgradeStepRegistrator.class
nodeEngine.getClusterService()
mOneShot=false
owner.getEnergyFrozenBalance()
mCryptConnector.execute("cryptfs","createnewuserdir",userHandle,path)
event.prepare(new SimpleUri("engine:tabbingUI"),ButtonState.DOWN,0)
-.12
scheduleRemoveStartingWindowLocked(wtoken)
API_KEY == null || API_KEY == ""
ctx.getApplicationContext()
GlobalSearchScope.allScope(getProject())
buildChannelsUriForInput(inputId,false)
new Paint()
sLon == null || "".equals(sLon)
glyph.get().setSize(sizeSlider.getValue())
N node
response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty())
dest.writeInt(mSubId)
packet.getType() != IQ.Type.result && packet.getType() != IQ.Type.error
cell.localCopy(HeapAllocator.instance)
Long.parseLong(value)
minutes >= 2 || (minutes > 0 && seconds == 0)
!service.mRequestFilterKeyEvents || (service.mServiceInterface == null)
mPanProfile.isProfileReady()
new RuntimeException("Error loading MultiDataSet at path " + path + " - DataSet may be corrupt or invalid."+ " Spark MultiDataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
result == null
public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
methodMatches(method,null,PsiType.INT,HardcodedMethodConstants.COMPARE_TO,PsiType.NULL)
node.getTextLength() > 1
config.getEndTime()
myDisposed
assertContainsParams(CollectionAdminRequest.createCollectionWithImplicitRouter("foo",null,"bar",1).getParams(),ACTION,NAME,"shards","router.name",ZkStateReader.NRT_REPLICAS)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY) || isEmulator
selenium.isElementPresent("link=Control Panel")
assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
menu.hasSelectedMenus()
getContactType(getJsonString(email,"type"))
DirDiffViewer.canShowRequest(context,request)
new StringBundler(4)
data == null || mData != data
selenium.isElementPresent("link=Control Panel")
layoutRevision.getIconImageId()
id=41
JZVideoPlayer.onScrollAutoTiny(view,firstVisibleItem,visibleItemCount,totalItemCount)
getTypeDeclaration(swaggerModel.getAdditionalProperties())
currentNumOfAttempts >= maxAttempts
newField(r,"id","",Field.Store.YES,Field.Index.NOT_ANALYZED)
movementComp.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),state.getPosition(),1.0f)))
Object.class
new Coordinator(node.getName(),clusterService.getSettings(),clusterService.getClusterSettings(),transportService,namedWriteableRegistry,allocationService,masterService,() -> persistedState,hostsResolver -> testClusterNodes.nodes.values().stream().filter(n -> n.node.isMasterNode()).map(n -> n.node.getAddress()).collect(Collectors.toList()),clusterService.getClusterApplierService(),Collections.emptyList(),random())
AndroidInstrumentationInfo instrumentationProvider=instrumentation.get(AndroidInstrumentationInfo.PROVIDER); 
!mScreenOnEarly
offsets == null || offsets.get(offsets.size() - 1) >= text.length()
@LargeTest
LOG.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
childLeftTuple.reAddLeft()
mismatchedCompanyIdDLFileEntryMetadatas.size()
components.afterEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
zkClient.destroy()
findAnnotationAttributes(element,annotationType,false,false)
buildPages.getTypesWithoutHash()
realUserTagEventDel.getTagId()
interfaces[i].isAssignableFrom(interfaceClass)
mAppToken.isVisible()
null == user || UserExt.USER_STATUS_C_VALID != user.optInt(UserExt.USER_STATUS)
Long.valueOf(3)
NB_CACHED_PARAMS=10
Thread.sleep(1000)
CommentListBean mentionsComment=intent.getParcelableExtra(BundleArgsConstants.MENTIONS_COMMENT_EXTRA); 
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,value,channel,t)
seenVertices.contains(endAncestor)
XmppStringUtils.parseBareJid(user)
SamplingProfiler.newThreadGroupThreadSet(group)
year=2014
ImmutableList<String>
DEBUG=false
Long.toString(localExpire)
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName(),e)
TextUtils.isEmpty(number)
String message
DEBUG=false
randomIntBetween(2,8)
zzStartRead == zzCurrentPos
origin < other
new Paint()
GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))
p.isPrimitive()
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
@UnrelatedTwo
mAztecImageLoader != null && isFinishing()
modulePath.relativize(relativePath)
length - 1
replacePsiElementWithLambda(element,false,false)
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=1000
uniqueExpiryCallbackPresent
myIcon.getIconHeight() - 1
callGasWord.longValueSafe()
from >= to
this.propertyDescriptorCache.putIfAbsent(pd.getName(),pd)
par == null || par.isEmpty()
assertTrue(e.getMessage(),exceptionMessage.contains("Invalid core"))
-1
File.listRoots()[0].getPath()
enabled=true
IOUtils.toInputStream(responseString,"UTF-8")
jdbcTemplate.queryForObject(sql,int.class)
30 * 60 * 1000
response.addHeader(WWW_AUTHENTICATE,value)
Log_OC.d(TAG,"onSaveInstanceState() start")
return false; 
new ConversationPrefsHelper(context,mThreadId)
private final ProjectionsFactory projections=new ProjectionsFactory(Module.HQL,getTarget()){   @Override public <A,Q extends SimpleExpression<A>>Collection<Expression<?>> list(  ListPath<A,Q> expr,  ListExpression<A,Q> other,  A knownElement){     return Collections.<Expression<?>>singleton(expr.size());   } } ; 
fluidFuel.getBlockID()
UpgradeStepRegistrator.class
info.crashInfo.stackTrace.length() > 30000
LocaleUtil.getSiteDefault()
new StatsLogEventWrapper(tagId,10)
seriesInfo.Index.toPlainString()
assertEquals(10,definitions.size())
new MapVectorLayer(null,true)
P extends PersistentTaskParams
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
assertEquals(0,url.getPort())
IDHandler.getBounds(RelationCategory.PROPERTY,false)
setImageDrawable(icon,false)
log.error("Cannot retrieve roles for {} from {} due to {}",user.getName(),ab.getType(),e.toString(),e)
loaded.getLoaded().getDeclaredConstructor()
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title","_id","_version","_score","_uid","_source")
UpgradeStepRegistrator.class
intervalFraction * (nextValue - prevValue)
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)
SECONDS.toMillis(10)
_log.warn(ioe,ioe)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(13)
isReturnGeneratedKeys() || isReturnGeneratedKeys() && generatedKey.isPresent()
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
repositoryImpl.setName(getName())
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
logger.debug("Cannot play radio ({})",e.getMessage())
mPlayer.getCurrentPosition() * 1000L
stmt.execute(sql)
List<URLDetail>
references.get() <= 0
minorVersion=18
mActivity.getSupportFragmentManager()
JSParameterTableModel.createParameterTypeCellFragment("",myProject,JavaScriptSupportLoader.ECMA_SCRIPT_L4)
new StandardTypeConverter(conversionService)
to.getRegistryName()
activate(false)
mEvdoEcio >= 0
parsedResult.getType()
_subBlocks.size() >= newChildIndex
Object tag
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
cursor == null
DynamicAttributeRanking.refreshMinMax(this,graph)
builder.build()
((SipStackImpl)this.stack).obtainLocalAddress(dst,dstPort,localAddress,0)
left != right
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
onCreateView(context,appWidgetId,appWidget)
type.getDeclaredConstructor()
listener != null && mHandler == null
EntryStream.of(1,1,2,null,3,null).nonNullValues()
downNode <= myDownIndex
NullPointerException.class
ExitUtil exitUtil(); 
index.getUUID()
LOGGER.debug("Following Class is no side pane: '" + componentName,e)
getChildFragmentManager().beginTransaction().replace(R.id.stats_pager_container,fragment)
{false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
telephony.isRinging(getOpPackageName())
toEventData(key)
row.getInt(6)
rematchAllNetworksAndRequests(networkAgent,oldScore)
Assert.assertEquals(50000,trace.getReceipt().getEnergyUsage())
String message
getEffectiveHstsEnforced()
@Override public synchronized AstyanaxKeyColumnValueStore openDatabase(String name) throws StorageException {   if (openStores.containsKey(name))   return openStores.get(name);  else {     ensureColumnFamilyExists(name);     AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy);     openStores.put(name,store);     return store;   } } 
/**   * GridGain handshake.   */ IGNITE_HANDSHAKE
UserManager.getInstance()
AdviceWithTasks.beforeByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
updater.myComponent.isVisible()
VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)
log.debug("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
setPlayedDuration(playedDurationWhenStarted + position - startPosition)
type.getDeclaredConstructor()
new PartialEscapeAnalysisPhase(null,runtime(),assumptions,iterativeEscapeAnalysis)
ModalityState.any()
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
!chatSession.isDescriptorPersistent() && !(chatSession instanceof ConferenceChatSession) && !ConfigurationManager.isAddContactDisabled()
new Rect(left,top,right,bottom)
artifact.getExecPath()
g.cachesx()
LOG.debug("AFTER decResourceRequest:" + " applicationId=" + " priority=" + priority.getPriority() + " resourceName="+ resourceName+ " numContainers="+ resourceRequestInfo.remoteRequest.getNumContainers()+ " #asks="+ ask.size())
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_PUT,updateVal,true,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
!WebUtils.isForward(request)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
index >= 2
_typeSettingsProperties.toSortedString()
mRecyclerView.smoothScrollBy(hScroll,vScroll)
mSharedElements.size()
ExceptionUtils.handleThrowable(t2)
StackHelper.isMatchingItem(reqStk,invStk,true,true)
logger.debug("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
SyncToAsyncChannelServer.class
assertEquals(1234,deserialized.getOwnedEntryMemoryCost())
printGraph("After Canonicalization",graph)
startNextLoop.setSelected(true)
mUiHandler.removeCallbacks(pae)
latch.await(5,TimeUnit.MINUTES)
mLocalDirtyRect.set(0,0,width,height)
new Paint()
activeCount >= maxActive
123 + (USE_OLD_HISTORY ? 1000 : 0)
super.doClose()
ddmStructureLocalService.deleteStructure(ddmStructure.getStructureId())
mFacetCategoryMap.get(category)
item(IRON_PLATEBODY)
ref.getParentObject()
minPriority == null ? 1 : minPriority
new NullPointerException("string cannot be null")
DEBUG=false
feedEntryStatusDAO.findAll(user,true,0,1,ReadingOrder.desc,true)
? extends CharStream
appearance.getInt(attr,0)
app().gitblit()
hasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
config.getStrategyImpl()
osmandSettings.DAYNIGHT_MODE.get().toHumanString(this)
packageNames != null && packageNames.length == 1
position.offset(mLeft,mTop)
dependency == null || dependency == NULL
nodeManager.getWorkerNodes()
result.getPath()
!isObjectMethod(method) || method.getName().equals("toString")
Promise<Object>
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
timeout=50_000L
mHandler.obtainMessage(MSG_RESULT,status,0,currentPackage)
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
c <= 'Z'
VMRuntime.is64BitInstructionSet(getPreferredInstructionSet())
Exception e
response != null
Validator.isNotNull(getKeywords())
120L * dbManager.getDynamicPropertiesStore().getTransactionFee()
!mGsmPhone.mSST.isConcurrentVoiceAndData()
pinScrollBy(mAutoScrollX,mAutoScrollY,true,0)
assertEquals(7,ti.nrOfInvocations)
length / 2.0f
NetworkAddress.formatAddress(inet.address().getAddress())
timeout=10000
"Adding new Docker node " + newNode
FinalUtils.canBeFinal(field)
nServers < 4
getTelecomService().getVoiceMailNumber(accountHandle)
parent == null || !(parent instanceof PsiReferenceExpression)
SettingsNewActivity.class
fileIds == null || fileIds.isEmpty()
commit.getAuthorTime()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
!isTrivial()
return true; 
factory.getOrCreateProxyByName(packet.name)
qName.getComponents()
delimiterText != null && delimiterText.equals(SQLConstants.DEFAULT_STATEMENT_DELIMITER)
DirDiffViewer.canShowRequest(context,request)
checkDatabaseConnection(monitor)
setImageDrawable(icon,false)
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commitAllowingStateLoss()
mService.getWifiServiceMessenger(mContext.getOpPackageName())
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs(),TypeDescriptors.longs())
mPowerManager.isInteractive()
new CacheConfiguration(CACHE2_NAME)
LOG.warn("The given country from the response: " + billToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
idleTimeoutGuard=-1
endIndex <= 0
new AssertionError("type=" + type)
paramType.getSimpleName()
lastTime >= 0 && nowELAPSED < minTime
ManifestUtils.getOrCreateManifest(archive)
javaLibsByIdentity.containsKey(javaLibrary)
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
assertEquals(7,beanCount)
log.debug("Can't check auto-commit state",e)
map.tryPut(key,newValue,60,TimeUnit.SECONDS)
getView() == null || EventQueue.isDispatchThread()
mServiceMap.get(userId)
settings.setTextSize(WebSettings.TextSize.SMALLEST)
typeSettingsProperties.toSortedString()
System.out.format("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
Ints.saturatedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
type.getDeclaredConstructor()
new IgniteCheckedException("Failed to start near cache " + "(a cache with the same name without near cache is already started)")
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)
pgl.loadFragmentShader(fragURL)
podStatus != null && !"Succeeded".equals(podStatus.getPhase())
attributes.setProperty(ATTRIBUTE_INITIAL_POOL_SIZE,Integer.toString(initialPoolSize))
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
/**   * {@link Builder#prefixWith(Tree,String)}    */ public static SuggestedFix prefixWith(Tree node,String prefix){   return builder().prefixWith(node,prefix).build(); } 
factory.getDestination(getEndpointInfo("sna","foo","https://localhost:9002"),bus)
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
RowKey.prefixKeyWithSalt(key_b)
indexOf(source,ch,origFromIndex)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
readWifiSleepPolicy()
assertThat(provider.fetchCount,is(1))
LOGGER.trace(exception.apply().toString())
mBluetoothGatt.registerScanner(this,mWorkSource)
!Boolean.parseBoolean(ac)
ImportAutoConfigurationWithItemsTwo.class
LOG.fine("Found operation: " + ori.getMethod().getName())
new PseudoDescription().loadSilent(getClass().getClassLoader())
removeCallbacksAndMessages(null)
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
_cats + cid
_paginator.concatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
lValue.getNominalType()
private String getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
assertEquals(13,singlePackageBeanCount)
new String[5]
WordPress.getCurrentBlog().getLocalTableBlogId()
toArrayHelper(array,0)
createNextExchange(processor,nextExchange)
profile.setMaxLength(230)
/**   * Called to resolve a input from a variable. Null if not possible.  * @param input is never null  * @return null if not possible/invalid  */ I parseValue(Object input); 
assertEquals(8,data.size())
/**   * Returns a wrapper around  {@code ciphertextSource}, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using  {@code additionalData} asadditional authenticated data. The additional data is not included in the ciphertext and has to be passed in as parameter for decryption.  */ OutputStream newEncryptingStream(OutputStream ciphertextDestination,byte[] associatedData) throws GeneralSecurityException, IOException ; 
!mDreamsEnabledOnBatteryConfig
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
clazz.getDeclaredField("commandProcessor")
MinecraftServer.getServer().worldServers
GL20.glGetVertexAttribfv(index,pname,params)
c <= 'Z'
Const.isEmpty(port) || "-1".equals(port)
TEST_MAP_SIZE=30000
entry.lastModified()
dest.writeValue(this.milestone)
ap.getSsidStr()
extra != -38
msbFragmentCollection.getMsbFragmentCollectionId()
expandableView.getIntrinsicHeight()
table == null
nestedBuilder.types("FormInstanceSettings")
collisionPoints.get(0)
log.debug("Null primary key column for '" + object.getName() + "'")
new StringBuffer(self.length() + 16)
client().admin().cluster().prepareHealth("t").setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(true)
label.getPackageIdentifier()
loc != null && isSortedByDistance
added.isEmpty()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Util.threadFactory("Rate Limited Dispatcher",true)
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots),true)
length == -1 || length > 4
calendar.add(Calendar.DATE,2)
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)
cache.localPeek(key)
9 * 60 * 1000
thingType != null && thingType.getConfigDescriptionURI() != null
assertEquals(2,versions.size())
TelephonyManager.getDefault().getCurrentPhoneType()
version == null || version.equals("")
anchorView.getApplicationWindowToken()
Color.fromRGB(0xABABAB)
Matchers.anyLong()
Constant[]
new LightweightThread(null,null,this)
new StringBuilder(238)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
XmppStringUtils.parseBareJid(from)
expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser","JDK16","JDK17","JDK18")
!(listener instanceof ISuiteListener) && !(listener instanceof ITestListener) && !(listener instanceof IReporter)&& !(listener instanceof IAnnotationTransformer)
assertPlanEquals(expectedPlan,actualPlan)
priority > 127
Files.copy(zipFile.getInputStream(zipEntry),file.toPath(),StandardCopyOption.REPLACE_EXISTING)
JedisException e
dynamicType.getLoaded().getDeclaredConstructor()
nextStatement instanceof PsiThrowStatement || isStatementNeededForInitializationOfVariable(statement,nextStatement)
List<HostAddress>
-0f
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
SOCKET_TIMEOUT_MILLIS=10000
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
users.get(j)
constraints.weightx=0.5f
zkWorker2.getWorker()
getPreferences().put(key,value)
this.highlightingItemStack
new Version(V_1_0_0_Beta2_ID,false,org.apache.lucene.util.Version.LUCENE_4_6)
disable2ForUser(what,token,pkg,mCurrentUserId)
ConfigHelper.class
c.getName()
Exception ex
!value.isNull()
String[]
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,FOLDER_NAVIGATION)
project == null || project.isDisposed()
pyElement == rightExpression || !(pyElement instanceof PyExpression)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
resources.getDimensionPixelSize(R.dimen.close_handle_height)
DirectoryReader.openIfChanged(oldReader)
stores.next().getIdentityMap()
in.readUShortx()
config.getMaxEntriesLocalHeap()
new IllegalArgumentException(checkedValue + " should not be null")
result == JOptionPane.NO_OPTION || result == JOptionPane.CLOSED_OPTION
LineNumberConvertor.Builder.createLeft(data.getLines())
row.getTable().moveLastOver(row.getIndex())
((HotSpotResolvedObjectType)type).getFingerprint() != 0
new StringBuilder(729)
document.addNumber("size",dlFileEntry.getSize())
serviceDataUuid == null || mServiceData == null
countNewlines(fragment) + 1
statistics.addPutTimeNanos(System.nanoTime() - start)
i < endValue
callback.onPulseFinished()
mClocks.uptimeMillis()
Throwable err
FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}",targ.getClassName(),mod.getModId(),e)
assertEquals("that/has/two/bangs",result)
new Paint(Paint.ANTI_ALIAS_FLAG)
type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType
stat.st_ctim.tv_nsec.longValue()
response.get(ROLLED_BACK)
mParent == null
selenium.click("//li[4]/span/a/span")
chargeUAh > 0 && level > 0
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"))
selenium.isElementPresent("link=Control Panel")
4 >= buf.length - count
entry.getKey().getServerName()
UpgradeStepRegistrator.class
StringUtils.stringToInt(localMediaId)
mLocalDirtyRect.set(0,0,width,height)
!showNotifications.isNull()
logger.debug("Line-in of {} is not connected",remoteHandler.getUDN())
mObsoleteAgents.remove(info)
position.setLongitude(field.getJsonNumber("Long").doubleValue())
entity.addComponent(delayedComponent)
child.getMeasuredWidth()
end < 0
type.getSimpleName()
assertEquals("that/has/one/bang",result)
mListener.onFragmentInteraction(shouldSendMagicLink)
type.getDeclaredConstructor()
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to time: " + value.toStringUtf8(),e)
category.isDefaultOff() && !enabledRuleCategories.contains(category.getId()) && !enabledRules.contains(rule.getId())
zkController.getZkStateReader().getReplicaProps(collection,shardId,coreNodeName)
intervalFraction * (nextValue - prevValue)
srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
intBuffer.clear()
src.onTouchEvent(e)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
ClassLoader filteredGroovy=classLoaderFactory.createFilteringClassLoader(groovyClassLoader,filteredGroovySpec); 
mCryptConnector.execute("cryptfs","deleteuserkey",userHandle)
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
PsiTreeUtil.getParentOfType(context,JetClassBody.class,true,JetBlockExpression.class,JetProperty.class)
dest.writeInt(mSubId)
model != null && model.size() == 1
loaded.getLoaded().getDeclaredConstructor()
LOGGER.error("Something went wront : {}",element,errorMessage)
config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
from >= to
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) <= -1
typesToMatch.length > 1
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
urlToLoad.getText().toString().equals("")
obj.getFileName()
mode == Mode.COMPILED || mode == Mode.ROOTS
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0 && mInstaller != null
packet.getFrom().split("/",2)
mock.expectedMinimumMessageCount(1)
mMccStr == null
Slog.d(TAG,"Unable to bind FusedProxy.")
append(text,simpleTextAttributes)
params.get(key)
assertEquals(10,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
QueryProcessor.executeInternal("SELECT * FROM cql_keyspace.table2;")
consumer.receive(5000)
mChildrenExpanded ? mDividerHeight : mChildPadding
context.start()
stepLightIdleStateLocked("s:shell")
mAuthorities.valueAt(i)
LOG.warn("Shortcuts of global AnActions should not be changed outside of KeymapManager",new Throwable())
this.thrown.expectMessage("File must not be null")
DUE_DILIGENCE_MILLIS=100
DBG=true
m.getParameterTypes()
StringBuilder buffer=new StringBuilder(); 
new ProtoFile("search.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
AssetTagFinderUtil.countByG_N(_scopeGroup.getParentGroupId(),assetTagName)
yAmount != 0
new IndexWriter(dir,sa,IndexWriter.MaxFieldLength.LIMITED)
fieldNameNode.getCharno()
getLog().debug("Compiling Kotlin sources from " + sourceRoots)
in.readData()
opSetSMS.addMessageListener(messageSourceService)
context.setDelayer(2000)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
new InternalTopHits(name,topHitsContext.from(),topHitsContext.size(),topHitsContext.sort(),Lucene.EMPTY_TOP_DOCS,InternalSearchHits.empty())
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
getConnectTimeout()
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
selenium.isElementPresent("link=Control Panel")
req.getPathInfo()
JvmDeclarationOriginKt.OtherOriginFromPure(myClass,valueOfFunction)
myScopeSlider.setValue(2)
replaces="doDirect"
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
dockedBounds.left - dockDividerWidth
Thread.sleep(100)
Long.parseLong(value)
new RuntimeException("error initializing deserializer: " + deserializer.getClass().getName(),e)
60L + 120L
dynamicType.getDeclaredConstructor()
tokensToUpdateInSystemTable.add(token)
JavaSourceGroovyPackagesSecuritySuite.suite()
r.toLocalRuleString()
parent != null && ProjectFileIndex.getInstance(project).isInContent(parent)
Log.v(TAG,msg)
selenium.isElementPresent("link=Control Panel")
@NotNull
new SystemVibrator(context)
mOuterRadius * 0.9f
new BeanDefinitionStoreException(bd.getResourceDescription(),curName,ex.getMessage(),ex)
9 + count
enablePreload=false
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
FSA.read(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
inflater.inflate(R.layout.mdtp_date_picker_dialog,container,false)
new Builder().setDuration(5000).setColor(android.R.color.holo_red_light)
t.getDeclaredConstructors()
LOGGER.debug("Register profile {} for organization {}",qualityProfile.getQProfileName(),organization.getKey())
repoSelectorPanel.add(label)
isAllowed()
assertEquals(3,StringUtil.countMatches(drl,"import "))
nestedBuilder.types("FormInstanceSettings")
LOG.debug("Error reading HTTP response from " + url)
hashInd == -1 || hashInd < 8
remaining == 0
dependency == null || dependency == NULL
WordPress.getCurrentBlog().getLocalTableBlogId()
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
targetDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
DataStreamSink<OUT>
ConferenceChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper); 
? extends T
loaded.getLoaded().getDeclaredConstructor()
mAllowGeneratedReplies=true
type.length() == 0
fieldNameNode.getCharno()
new NonAnnotatedConfigurationProblem(metadata.getClassName(),reader.getResource(),metadata)
regionUrl != null && ec2 != null
Log_OC.e(TAG,"Trying to share a NULL OCFile")
makeTypeWithArguments(node)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
((Number)s.first()).doubleValue()
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table) || TABLE_GLOBAL.equals(this.table)
InternalAttribute attribute=(InternalAttribute)o; 
mState != STATE_PREPARE && mState != STATE_FINISHED
/**   * The lower value in the range.  * @return the lower value in the range.  */ T getFrom(); 
TestSuiteEnvironment.getHttpAddress()
delayMs <= 0
initialCapacity > 1 << 30
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
greaterThanOrEqualTo(1)
object.getDataSource()
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
LOGGER.debug("Skipped over attribute [{}] since it's already contained by the principal",k)
InputMethodManager.getInstance()
Pair.<DataType,Object>create(SET,((SetType)type).elements)
argumentsLength == 1
showFullResult ? 999_999 : limit
endpoint.setDataSource(target)
line < 0
gatecoinOrder.getSide()
EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response
return true; 
viewerPanel.setRedraw(true)
"Interceptors contributed by endpoint: " + i3
mCurrentDate.get(Calendar.MONTH) != month
/**   * The tested prototype instance  */ private final P testedPrototype; 
in.getDepth() >= outerDepth
getDelegate().handle(exchange).onErrorResume(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
V data=function.apply(entry.getValue()); 
tagName.equals(TAG_FORWARDING_INTENT_FILTERS) || tagName.equals(TAG_CROSS_PROFILE_INTENT_FILTERS)
expect(cluster.getClusterName()).andReturn("clusterOld").times(1)
volume.getMtpReserveSpace() * 1024L * 1024L
blog.getLocalTableBlogId()
this.getClass().getName()
assertEquals(ChronicleEngineMapEventType.REMOVE,mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))
(dispatcherMapping & FORWARD) != 0
drained != null && tank.canFill(side,drained.getFluid())
callBacks.stream()
"No class type found for " + classTypeName
user.getUsername()
sizeNeeded > items.length
buf.getUnsignedByte(buf.readerIndex() + 2)
!isLoaded && item.isOptional() && item.getRecursiveLink() == null
new ModelNode(512)
FRAME_STATS_COUNT=16
Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION))
id=4
new Intent(Intent.ACTION_USER_PRESENT)
type.getName()
crashInfo != null && crashInfo.durationMillis != -1
clearIndex()
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED)
retriever.getFrameAtTime(-1)
new GroupTest(true)
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
status.isDir()
parseKeywordIf(ctx,"DOUBLE PRECISION") || parseKeywordIf(ctx,"DOUBLE")
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
ReturnPoshiElement returnPoshiElement=null; 
resultEndpoint.expectedMinimumMessageCount(2)
new NodeStats(discoveryNode,no,indices,os,process,jvm,threadPool,fs,null,null,null,null,null,null,null)
promise.tryFailure(new ClosedChannelException())
a.getString(attr)
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
Element[]
filterCollection.getBranchFilter() != null && !filterCollection.getBranchFilter().getBranchNames().isEmpty()
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
win.mAppToken != null ? win.mAppToken.mAppStopped : true
resolvedMode.toString()
runPartialSorter(sorter,NUM_RECORDS,25)
Lists.newArrayList(stream1,stream2)
2
scanFlags & SCAN_NEW_INSTALL
getFullJID(0)
WsRemoteEndpointImplServer.class
session.initBounds(context,param)
i=1
logger.debug("tried to fail engine but could not acquire lock - engine should be failed by now [{}]",failure,reason)
Long.parseLong(val)
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
display.getRealMetrics(mDisplayMetrics)
queueView.get().getExcerpt(index.longValue())
user.isSystem()
/**   * {@code "x-frame-options"}  */ public static final AsciiString X_FRAME_OPTIONS=new AsciiString("x-frame-options"); 
VERSION=19
logger.warn("{}",general)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:10500}")
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
compensationRange.contains(compensation)
public static Object replaceCommandVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _commandMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _commandMap.containsKey(matcher.group(1))) {     String varValue=getStringFromCommandMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
getConcept() != null && getConcept().getDescription() != null
line.toString(charset)
null != mData && mData.size() > 0
inMessage.getExchange().getOutMessage()
endsWith("/home/source")
mMountTable.resolve(getPath(dir)).toString()
modelCalcinator.renderPart("Calcinator")
Exception e
mPtr != 0L
photo.writableBytes()
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
this.onGetInputStream()
id=10
new AlertDialog(P.mContext,0,false)
calendar.get(HOUR_OF_DAY)
theiaProjectTree.waitItem(projectName)
stateUpdateQueue.getStats()
sender.getHostString()
windowIndex >= playbackInfo.timeline.getWindowCount()
from >= to
VideoContent.createRemoteVideo(fileReference,baseVideoContent.getW(),baseVideoContent.getH(),baseVideoContent.getDuration(),baseVideoContent.getFastThumb())
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ assertName+ " />"
uri.append(AMPERSAND)
realm.getColumnIndices()
structuralLock.isHeldByCurrentThread()
MetadataInstrument2.class.getSimpleName()
mDeviceOwner.getProfileOwnerPackageName(i)
res.sendError(501,"Websocket protocol not supported")
notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
isInputViewShown()
from > to
config.getMapConfig(mapName).setTimeToLiveSeconds(10)
super.getHibernateTemplate().execute(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     crit.add(Expression.allEq(queryMap));     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
zkController.getZkStateReader().getReplicaProps(collection,shardId,cd.getCloudDescriptor().getCoreNodeName())
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
SessionErrors.add(actionRequest,e.getClass().getName(),e)
new int[100]
@Override public void receiveEndOfStream(int streamId) throws ConnectionException {   Stream stream=getStream(streamId,true);   if (stream != null) {     stream.receivedEndOfStream();   } } 
annotatorImplementation.custom(inputProps,property)
focusOwner.isShowing()
"Refreshing storefiles of region " + bestRegionReplica + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
left < chartCalculator.mContentRect.left
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
/**   * @param ctx Transaction context.  * @param key Key.  * @throws IgniteCheckedException If failed.  */ private void unlock(TxContext ctx,Object key) throws CacheException {   if (ctx.unlocked(key)) {     txCtx.remove();     Transaction tx=cache.tx();     assert tx != null;     try {       tx.commit();     }   finally {       tx.close();     }     assert cache.tx() == null;   } } 
telephony.isIdle(getOpPackageName())
h - y
DiagnosticFactory0.create(ERROR)
new PostgreSQLCommandExecutor(context,message,this)
anyObject(Grouped.class)
entity.getClass()
node.getEndLine()
RESULT_TIMEOUT=5000
display.getRealMetrics(dm)
getSslStoreProvider().getTrustStore()
assertThat(client).replicationController("fabric8-console-controller").hasName("fabric8-console-controller")
!isEnabled() || listener == null
ZonePlannerMapDataServer.instance.getChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
loaded.getLoaded().getDeclaredConstructor()
prev.getDifficultyTarget()
300 * 1000L
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
assertEquals(0,ginfo._val.residualDeviance(),1e-3)
StringBuilder buffer=getCurrentBuffer(); 
setSDesEncryptionOnDescription(mediaType,description,null)
(mOomMinFreeHigh[5] * 7) / 4
Arrays.asList(new CommaWhitespaceRule(messages),new DoublePunctuationRule(messages),new GenericUnpairedBracketsRule(messages),new HunspellNoSuggestionRule(messages,this),new LongSentenceRule(messages),new UppercaseSentenceStartRule(messages,this),new MultipleWhitespaceRule(messages,this),new SentenceWhitespaceRule(messages),new WordRepeatBeginningRule(messages,this),new PostReformPortugueseCompoundRule(messages),new PortugueseReplaceRule(messages),new PortugueseWordRepeatRule(messages,this))
display.getRealMetrics(mDisplayMetrics)
module != null && !module.isDisposed()
GroovyBundle.message("groovy.configure.facet.question.text",module.getName())
wrappersToPrimitives.put(wrapperType,primitiveType)
{8,10}
tearDownOnShutdown.setSelected(true)
readdirCacheBuilder.maximumSize(maxReaddirs)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
private final DynamicTransformerRegistry dynamicTransformerRegistry; 
getTestVector().getNumNonZeroElements()
assertThat(emptyScannable.scan(Scannable.Attr.LARGE_BUFFERED)).isNull()
synchronized (mService) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
sr.getLastStartId()
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
!wNoExecution.getSelection()
new IllegalArgumentException("No value for parameter named '" + name + "'.")
selenium.isElementPresent("link=Control Panel")
refreshRotationLockTile()
copy1DRangeFromUnchecked(0,mType.getCount(),i)
ONE_MINUS_DST_ALPHA(7)
selenium.isElementPresent("link=Control Panel")
maxCallCount=100
mBiometricUnlock.stop()
IBinder.FIRST_CALL_TRANSACTION + 65
settings.getChangeAfterFilter()
selenium.isElementPresent("link=Control Panel")
heartbeatIntervalSeconds < 0
new Rect(left,top,right,bottom)
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
logger.fine("Aliasing common strings")
jabberStatusToPresenceStatus(o2,parentProvider)
platformVersion < M
wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())
getDelegate().getDefaultCipherSuites()
src[i]
isGreaterOrEqual(platformVersion,M)
f.isFile()
IndexOutOfBoundsException e
getExecutionException()
getOptionalDate(singletonMap("date","2017-04-03"),list)
LOG.debug("Looking for service: " + service + ". Current token is "+ token)
Long4 v
_traceInfo.get(key)
number=0
componentClasses != null && !componentClasses.isEmpty()
@Nullable
Thread.sleep(1000)
_logHandle.invoke(sb,request,response)
config.getDouble("modulus")
assertEquals("Invalid number of completion items",itemsNumber.intValue(),myItems.length)
getVFile(name,false)
CompilerDirectives.inInterpreterOrLowTier()
assertThat(registration.getScopes()).containsOnly("openid","profile","email")
mapConfig.getBackupCount()
Boolean.parseBoolean(context.getInitParameter(VALIDATE))
Build.VERSION.SDK_INT >= 16
mScrollView.post(() -> mScrollView.restoreDefaultFocus())
(!(getParent() instanceof ViewRootImpl)) && (mPrivateFlags & IS_ROOT_NAMESPACE) != 0
args != null && args.length == 2
maxAge == -1
LOGGER.warn(msg.apply())
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
artifact.getId()
checkCall(receiver)
c.content().readSlice(CONTENT_LENGTH)
getClientConfig().getAddresses()
LOG.warn("Async Kafka commit failed.",cause)
result.getType()
ViewFileSystemTestSetup.createConfig()
ActivityRecord r=(ActivityRecord)it.next(); 
pk.getColumnNameInSql()
rhs == null || !rhs.isValid()
(filterMap.getDispatcherMapping() & FilterMap.REQUEST) != 0
Long.parseLong(val)
public @Nullable DatabaseAttachment getAttachment(AttachmentId attachmentId){   SQLiteDatabase database=databaseHelper.getReadableDatabase();   Cursor cursor=null;   try {     cursor=database.query(TABLE_NAME,PROJECTION,PART_ID_WHERE,attachmentId.toStrings(),null,null,null);     if (cursor != null && cursor.moveToFirst())     return getAttachment(cursor);  else     return null;   }   finally {     if (cursor != null)     cursor.close();   } } 
type.getDeclaredConstructor()
greaterThanOrEqualTo(0L)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
SC_FILE_EXTENSION_EXCEPTION=491
return mDisappearingDelay; 
rdi != null && !rdi.getPath().equals("/")
code == null || code.length() == 0
SamplingProfiler.newThreadGroupThreadSet(group)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).descriptionAndTooltip(message)
builder.humanReadableField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",10)
DataStreamSink<OUT>
file.getName()
Thread.sleep(20000)
log.info("\"FocusKiller\" library not found or there were problems loading it.",t)
planRouteContext.getSnappedMode().getMapIconId()
@NonNull BluetoothDevice bluetoothDevice
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
anchorView.getApplicationWindowToken()
Simple.forClass(type)
OrderByComparator<V>
assetTagLocalService.checkTags(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
timeout=120_000L
log.error("Problem in JSR223 script ",e)
instruction.getNarrowLiteral()
editor.selectPrevTab()
new MqttFixedHeader(UNSUBACK,false,AT_LEAST_ONCE,false,0)
payload.writeBytes((byte[])each)
perc(.10,4)
result.expectedMinimumMessageCount(3)
EPS_THRESHOLD=1e-5
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
new FileAttribute("python_language_level_persistence",1,true)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
getParser().parse(argsToUse)
DirectoryReader oldReader; 
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
model.replaceWhiteSpace(wsRange,newWhiteSpace)
myCredentialsMap.containsKey(scope) || quietly
selenium.isElementPresent("link=Control Panel")
rec.isValidLineInReference(pastViolation.getLine())
getMockEndpoint("mock:test.after.1").expectedMessageCount(10)
@Override public JavaExecHandleBuilder setIgnoreExitValue(boolean ignoreExitValue){   super.setIgnoreExitValue(ignoreExitValue);   return this; } 
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,Integer.MAX_VALUE,1)
builder.build()
loaded.getLoaded().getDeclaredConstructor()
LOGGER.warn("Could not find DropTargetDropEvent class",e)
mCallback.onInputUpdated(inputId)
60L + 120L
private JTextArea errorLabel; 
new UnsupportedOperationException("Field is not supported")
ctClass.getDeclaredMethod("paintBackground")
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
visibility != View.VISIBLE && mZoomManager != null
url.toString()
Assert.assertEquals(3,definitions.size())
result > CodeStyleSettings.MAX_RIGHT_MARGIN || block == null
responseHeaderRegex == null || responseHeaderRegex.length() == 0
issue.getRuleKey().toString()
mQueryTextView.length()
executeRollbackScript(rollbackScript,contexts,labelExpression)
preAuthorizedToken == null
createTestBlockCapsule(1533529947843L + 3000L * 6,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
e.toString()
new BindException(newConcept,"concept")
final StringBuilder buf=new StringBuilder(); 
log.error("Filtering key {} due to exception",k,e)
host_unknown
timed.dispose()
packageName.equals(shortName)
format(arg,false)
AbstractDynamoDbConfigurationSource.class
orig.getGenericsTypes()
selenium.isElementPresent("link=Control Panel")
mFailedAttempts >= MAX_FAILED_ATTEMPTS
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
FileTemplateManager.getDefaultInstance()
countDownLatch.await()
assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor",element.getText())
callback.onPulseFinished()
nextMedia.localFileAvailable()
mv.visitInsn(DUP)
near.getAndRemove(key)
lastPos < mTargetPos
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
rs.getMetaData()
action != KeyEvent.ACTION_UP
dirs[i].isDirectory()
processEngineConfiguration.setEnableSafeBpmnXml(true)
verifyPosition(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
labels.size(0)
BinaryFunction<Object>
request.getPathInfo()
getI18NString(key,null,Locale.getDefault())
PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId)
bop.getBindingOutput()
private final DynamicTransformerRegistry dynamicTransformerRegistry; 
new AssertionError("already exists: " + topic)
biomeList[biome.biomeID].typeList.toArray(new Type[0])
new CommandLineException("Parsed request isn't available.")
mBiometricUnlock.stop()
SCRIM_BEHIND_ALPHA_KEYGUARD=0.45f
Boolean.parseBoolean(attrValue)
assertEquals(Locale.GERMANY,format1.getLocale())
ev.mStateSamples.length >= NS
timeout=20000
selenium.isElementPresent("link=Control Panel")
mesh.getNumVertices() / 4
_fragmentEntryLocalService.deleteFragmentEntry(fragmentEntryId)
threadCount=25
s.equalsIgnoreCase(s2)
loaded.getLoaded().getDeclaredConstructor()
(read=channel.read(byteBuffer)) >= 0
new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"))
mPreferredHost.equals("localhost")
LOG.info("No SessionScavenger set, using defaults")
onNoteBlockTextClickListener != null && textView != null
new Dimension(30000,GRID_SIZE)
PublisherPeek<T>
telephony.getCdmaEriTextForSubscriber(subId,getOpPackageName())
p.attention(alarm.getType() + "")
uri.getAssetName().toLowerCase()
((EventFactHandle)((ObjectVariableContextEntry)context).left).getEndTimestamp()
getMediaFileMimeType(imageFile,true)
Exception pe
FastMath.min(origin,num.doubleValue())
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
listAdapter.notifyDataSetChanged()
mQsDensityContainer.getX()
durableSubscriptions.remove(key)
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,1)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
!(application.change().upgrades(deployment.version()) || application.change().upgrades(deployment.applicationVersion()))
element.getText()
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equalsIgnoreCase(type)
mDeviceOwner.getProfileOwnerPackageName(i)
ReferenceCountUtil.release(holder)
parameters.substring(x + 1,y)
final ImageView buttonFavorite=(ImageView)view.findViewById(R.id.context_menu_fav_button); 
GridCacheEntry<String,String>
RedisRule.bindToDefaultPort()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
List<CallServiceInfo>
generateFluentSetters()
delegate.open(filename,idType,highIdSupplier,maxId)
super.getThickness() + 6
void execute() throws Throwable ; 
DiagnosticFactory0.create(ERROR)
log.error("Problem in JSR223 script ",e)
StringBuilder message=new StringBuilder(); 
Slog.w(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
getNodeAddresses(node,U.sameMacs(locNode,node))
rs.isLast()
mImm.hideStatusIconInternal(mToken)
XmlTag context
JournalArticleLocalServiceUtil.searchCount(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"","",null,null,status,null,true)
!TextUtils.isEmpty(addresses)
XmlUtils.readIntAttribute(parser,ATTR_DATABASE_VERSION)
protected XmlElementDescriptor createElementDescriptor(final XmlTag tag){   return new RelaxedNsXmlElementDescriptor(tag); } 
selenium.isElementPresent("link=Control Panel")
public Builder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
IQ.Type.error == packet.getType() || IQ.Type.result == packet.getType()
mContext.sendBroadcast(intent)
layer.setLayerPaint(mLayerPaint)
Messages.getString("Spoon.Dialog.PromptSave.Message",spoon.makeGraphTabName(transMeta))
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
parts.length < 2
now == currentPage || dotCenterX == null
selenium.isElementPresent("link=Control Panel")
cSet.setConceptSet(this)
parcel.readString()
mp.getResolvedValue()
"Unknown or Unsupported Option '" + key + "'"
viewable=true
new IllegalStateException("Test IllegalStateException")
powerBase=40
new SelectOneSearchWidget(RuntimeEnvironment.application,formEntryPrompt,false)
MainActivity.class
ps.pkg != null && ps.pkg.mOverlayTarget != null
bukkit.getRawNote()
add(food(4),SARDINE,CAKE,_23_CAKE,SLICE_OF_CAKE,CHOCOLATEY_MILK,BAKED_POTATO,EDIBLE_SEAWEED)
mAdapter == null || mAdapter.getCount() == 0
tracesDir.mkdirs()
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
ris.setAmount(amount)
Integer.valueOf(1)
this.mTitle.compareToIgnoreCase(another.mTitle)
Void ignored
spellParser.isParsing()
getExecutionContext()
configInstance.getIntProperty(namespace + "eurekaServer.connectTimeout",5)
stopWatch.taken() < 1000
ImmutableList<ConformanceConfig>
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Exception getExceptionThrown(){   return exceptionThrown; } 
config.getDouble("modulus")
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
intBuffer.clear()
audioSink.getId()
((BCECPrivateKey)privKey).getD()
fillPaint.getTypeface()
cc.serialize()
testMissingJarReferences(_netBeansJars,_NETBEANS_PROPERTIES_FILE_NAME)
from + 1
new MccEntry(230,"cz",2,"Europe/Prague","cs")
checkNotNullOrEmpty(jsonText,"Json should not be null")
selenium.isElementPresent("link=Control Panel")
when(rs.wasNull()).thenReturn(true)
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
clientArchiver.createArchive(project,archive)
id=15
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD),null,Globals.journalAbbreviationLoader.getRepository())
Configuration.getMs(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
ApplicationManager.getApplication().invokeLater(this::stopDumb,ModalityState.current(),__ -> isDisposed())
Thread.sleep(50)
i < MAX_AUDIO_PORTS
config().getDouble(BASE_PATH + "tolerance")
three.setAxisIndex(LEAF)
new FileHyperlinkRawData("spec/personSpec.js",21,-1,3,s.length())
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
assertNotSame("Cannot find text '" + element + "' in file "+ path,-1,index)
portletDataContextClone.setDataStrategy(portletDataContext.getDataStrategy())
LOG.debug(e)
Slog.e(TAG,sb.toString())
new WorldPoint(3013,3179,0)
logger.warn("license [{}] - expired",license.uid())
mWindowManager.removeViewImmediate(mContainer)
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,REAL,DOUBLE,VARCHAR)
mPowerManager.isInteractive()
attachmentArray.getString(0)
className.getValue()
performDexOpt(packageName,instructionSet,false)
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
new Paint()
Math.abs(delta_loss)
width - originX
case BUILD_IMAGE: 
!NetworkUtils.checkConnection(this)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
startActivity(intent)
param.setThrowable(new FileNotFoundException("XPrivacy"))
assertFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
methodFlatteningResolver.hashCode()
LOGGER.debug("Following side pane could not be found: " + componentName,e)
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true,false)
prettyPrintFileName(file,false)
platformVersion < M
protected abstract T getTreeByKey(FBTree.Key key); 
mState != STATE_PREPARE && mState != STATE_FINISHED
Exception e
result.ocFile.getMimeType()
selenium.isElementPresent("link=Control Panel")
!Algorithms.isEmpty(ref)
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
Tomcat.addServlet(ctx,"myServlet",new HelloWorld())
TestUtils.randomByte() + 128
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(new ForwardingLoggerInterceptor(memoryDatabase)).appendParameterBinder(Pipe.Binder.install(Forwarder.class))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
ApplicationMode.toHumanString(osmandSettings.APPLICATION_MODE.get(),this)
POSITIVE_Y(2)
c.getPath() == null && getPath() != null
Integer.toHexString(flags)
1.083f * t
setWindowingMode(windowingMode,false,false,false)
super(project,root); 
Localization.lang("Bibtex key patterns")
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
entry.getType() != null && entry.getType() != MarketEntryType.Platform
Mono.subscriberContext()
testProviderConfig()
-balloon.getShadowBorderSize()
" firstActiveTime=" + firstActiveTime
builder.appendRows("4dlu, pref")
Exception ex
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
!newDefaultSubIdObj.equals(mDefaultSubId)
getFirstNode(element)
assertFalse(mDisabled.hasFocus())
SUBCMD_TRIGGER + " <channelUID> [<event>]"
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
evaluation.evalTimeSeries(actual,predicted)
r.ensureActivityConfigurationLocked(0,true)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
Thread.sleep(1500)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)
mViewAbove.setCurrentItem(0,animate)
holder == null || holder.provider == null
UserHandle.myUserId()
_typeSettingsProperties.toString()
items[15]
"declaringClass".equals(propName) || "format".equals(propName)
MILLISECONDS.toNanos(30)
this.targetValidator.validateValue(beanType,propertyName,value,groups)
mMccStr == null
new StackManager(stackRoot,commonServices,osFamily,false,metaInfoDao,actionMetadata,stackDao)
logger.debug("An exception occurred while parsing a date : '{}'",e.getMessage())
remaining == 0
mValues[8]
diff <= 1000
mBackdrop.animate().alpha(0.002f)
page != Page.ARCHIVE && page != Page.CONVERSATION_MENU_OVER_CONVERSATION_LIST
!mTileState
args.length < 2
LOGGER.debug("no property for " + type + ", "+ format)
Throwable e
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
@Override @NotNull public FrameworkSupportConfigurable createConfigurable(final @NotNull FrameworkSupportModel model){   return new FrameworkSupportConfigurableBase(this,model,getVersions(),getVersionLabelText()); } 
mUiHandler.removeCallbacks(pae)
Boolean.parseBoolean(attrValue)
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
new IllegalStateException(sm.getString("http11Processor.upgrade"))
_isPosInf(text)
WordPress.getCurrentBlog().getLocalTableBlogId()
selectedPos <= lastPos
resolver.acquireUnstableContentProviderClient(uri)
1 << 27
field.set(instance,value)
e.getPresentation().setEnabledAndVisible(false)
Long.parseLong(timeout)
CANCELLED(125)
new Point(bounds.x + bounds.width,20)
objectCache.put(parent,parentObjects)
/**   * Visits the specified value result.  * @param valueResult the value result  * @return the result of the visit  */ T visitValueResult(ValueResultData valueResult); 
selenium.isElementPresent("link=Control Panel")
new IOException(msg,e)
new TextPaint()
-Float.parseFloat(position.getChildByName("Y").getText())
getMockEndpoint("mock:test.after.1").expectedMessageCount(10)
mapper.setAttributePrefix("ROLE_")
config.swapChase()
type.getPresentableText()
timer.schedule(timerTask,period,period)
final Throwable e
isAvailable(oldStatus)
settings.readLPw(null,0,false)
new IllegalStateException("Advertising can't be both connectable and anonymous")
deltaY >= 0
assertModel(MODEL).query("select state, count(*) as c from zips group by state order by state").limit(3)
err == 0
writeRepeatedBoolImpl(id,val)
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
mDrawer != null && view.getContext() != null
FileUtils.setPermissions(fstr.getFD(),0640,SYSTEM_UID,PACKAGE_INFO_GID)
writeOwners.size()
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
user.getActualCompanyId()
!Boolean.parseBoolean(ac)
loaded.getLoaded().getDeclaredConstructor()
new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,trimmed)),SaveService.getFileEncoding("UTF-8")),false)
60 * 1024 * 1024
annotation.getContainingFile() == annotationOwner.getContainingFile()
state.isAlive()
checkCall(receiver)
writer.valueNull()
mRemote.transact(START_ACTIVITY_WITH_CONFIG_TRANSACTION,data,reply,0)
getSsl(ClientAuth.NEED,"password","src/test/resources/test.jks","src/test/resources/test.jks")
AssetVocabularyUtil.fetchByG_N(groupId,vocabulary.getName())
logger.fine("Recording function information")
anyAreSet(state,FLAG_SHOULD_RESUME_READS)
DLFileEntryMetadataLocalServiceUtil.getFileVersionFileEntryMetadatas(dlFileVersion.getFileVersionId())
entity.getClass()
mAttributes.getAllFlags()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name)
type.getDeclaredConstructor()
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
selenium.isElementPresent("link=Control Panel")
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
new SonarException(String.format("Project [%s] doesn't exist on server",projectKey),e)
lineArgs[4]
new VariableInformation(1,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
viewFlow.getChildWidth()
MAX_INDEX_NAME_BYTES=255
selenium.isElementPresent("link=Control Panel")
valueFormatter != null && !(valueFormatter instanceof ValueFormatter.Raw)
(ObjectSerializer)value
mSyncStatus.valueAt(i)
ENABLE_AGGREGATED_IN_MEMORY_STATS=false
new ByteSizeValue(20,ByteSizeUnit.MB)
createReactive(config)
blog.getLocalTableBlogId()
Map.class
m.size()
ResolvedJavaType accessingClass
DBG=false
new DescribeInstances(awsConfig).execute()
!PixelFormat.formatHasAlpha(mRequestedFormat)
from > to
verify(mWifiService,never()).stopLocalOnlyHotspot()
pc.getPlugin() == null || pc.getPlugin().equals(plugin)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
JSONValue.parseWithException(value)
selenium.isElementPresent("link=Control Panel")
public JMeterProperty clone(); 
? super T
scheduleRemoveStartingWindowLocked(wtoken)
i > 0
Color.rgba8888ToColor(color,colorInt)
findTypeFromRefInner(expression)
mapper.getTypeFactory().constructType(InspectContainerResponse.class)
return 9; 
assertNotNull(message + ": expected should not be null",expected)
new RendezvousAffinityFunction(false,512)
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help,HELP)
scriptsToUpdate.add(n)
new WelcomePagerAdapter(this,getIntent().hasExtra(TOKEN_MANUAL_SHOW))
rows.get(0).key.key.equals(startKeyBytes)
final Integer firstLineKey=lines.firstKey(); 
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     final ProgressWindow progressWindow=new ProgressWindow(false,null);     progressWindow.setTitle("Looking for TODOs...");     progressWindow.setText("Please wait...");     final Runnable process=new Runnable(){       public void run(){         if (myAllTodos == null)         return;         ApplicationManager.getApplication().runReadAction(new Runnable(){           public void run(){             myAllTodos.rebuildCache();             myCurrentFileTodos.rebuildCache();           }         } );         ApplicationManager.getApplication().invokeLater(new Runnable(){           public void run(){             myAllTodos.updateTree();             myCurrentFileTodos.updateTree();           }         } ,ModalityState.NON_MMODAL);       }     } ;     Thread thread=new Thread(new Runnable(){       public void run(){         ProgressManager.getInstance().runProcess(process,progressWindow);       }     } ,"Todo finder");     thread.start();   } } ,ModalityState.NON_MMODAL)
subCursor.getString(COLUMN_NAME)
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
myProjectView.isAbbreviatePackageNames(myPaneId)
FBUtilities.getLocalAddress()
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest","true")
return mDisappearingDelay; 
gapExpression != null
selenium.isElementPresent("link=Control Panel")
VERSION=42
((Number)s.first()).floatValue()
file.contains("http://") || file.contains("https://")
saveJSONArray(json,filename,null)
target.getParentFile().isDirectory()
getExecutionContext()
mUserPaddingStart >= 0
GenericStructContainer parent
connection.pexpireAt(key,millisecondsTimestamp)
modItems == null || engine == null
assertFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
mPowerManager.isInteractive()
LOG.debug("Value selected for the metric should be a number: " + context)
callback.onPulseFinished()
organization.toUnescapedModel()
Integer.parseInt(taskIdStr)
application.getBaseContext()
WebSockets.sendPongBlocking(applicationData,webSocketChannel)
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
ConfigureUtil.configure(closure,this,false)
SimpleHandler.getInstance().postDelayed(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } )
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static DecodedJWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
timeout=30000
@Nullable
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
mapper.writerFor(planType)
data.position()
meta.isUsingSecureAuthentication()
new LightweightThread(null,null,this)
entity != null
!ResultSetUtils.isServerSideFiltering(controller) || !controller.isHasMoreData()
assertFalse(found)
getDelegate().getDefaultCipherSuites()
input.getCharSequence(action)
Collectors.toMap(Entry::getKey,Entry::getValue,(k,v) -> k)
((JetPostfixExpression)element).getOperationReference()
new StepMeta("SelectValues",stepName,svm)
dh != mBackgroundHeight
@Specialization protected LLVMBoxedPrimitive fromLong(long value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
ps.pkg != null && ps.pkg.mOverlayTarget != null
type.getDeclaredConstructor()
new SpannedString(first,true)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mEncoder.swithToSoftEncoder()
@DELETE
!version.equals("1.2") && !version.equals("2.0") && !version.equals("2.1")
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
new RuntimeException(e)
modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)|| modifiers.branchContains(TokenTypes.LITERAL_STATIC)
Integer.parseInt(leftStr)
mService.queryDisplayStatus(getCallbackWrapper(callback))
typeTreeStruct.embedded(true)
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0) || pm.hasSystemFeature(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION,0)
TestSuiteEnvironment.getHttpAddress()
script_params.addParametersString(myConfig.getParams())
!mapServiceContext.hasRegisteredListener(mapName)
c.close()
searchBack.postDelayed(new Runnable(){   @Override public void run(){     searchBack.setImageDrawable(ContextCompat.getDrawable(SearchActivity.this,R.drawable.ic_arrow_back_padded));   } } ,600L)
new Paint()
view.getStylesheets().add(0,AbstractDialogView.class.getResource("Main.css").toExternalForm())
Response description(String description); 
scheduleRemoveStartingWindowLocked(wtoken)
dockedBounds.bottom + dockDividerWidth
ContainerUtil.newTroveSet("intellij.platform.commercial","intellij.idea.ultimate.resources","intellij.platform.commercial.verifier","intellij.platform.commercial.license","intellij.platform.propertyInspector","intellij.platform.graph","intellij.platform.graph.impl","intellij.diagram","intellij.diagram.impl","intellij.uml")
addListenerMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)
mService.getWifiServiceMessenger(mContext.getOpPackageName())
packet.getAttribute("from").split("/",2)
m.getTablePerHierarchy()
service.asBinder().pingBinder()
JspUtil.makeJavaIdentifier(varName)
c < 28
layer.activate(input)
range.getTo()
(dispatcherMapping & REQUEST) != 0
checkCall(receiver)
i <= 10
column.getLabel()
JiveGlobals.getPropertyEncryptor().encrypt(value)
new TreeMap<>(String.CASE_INSENSITIVE_ORDER)
singleLanguageProfile.getLanguage()
Long.parseLong(args[2])
weekRange.add(Calendar.DATE,6)
Collections.shuffle(builders,random)
new Button("cancel"){   public void onSubmit(){     doReturn();   } } 
MeasureSpec.makeMeasureSpec(myHeight,MeasureSpec.EXACTLY)
tempPinnedTaskBounds != null && stack.isAnimatingBoundsToFullscreen()
vel < mFlingExpandMinVelocityPx
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
selenium.isElementPresent("link=Control Panel")
new StringLengthValidator(1,true,true)
i >= speedBumpIndex
MethodNotFoundException.class
if (mSelecting) {   for (int i=0; i < this.getCount(); i++)   if (!mListAppSelected.contains(this.getItem(i)))   mListAppSelected.add(this.getItem(i)); }  else mListAppSelected.clear(); 
type.resolveMember(name,location,direction,resolveContext,false)
synchronized (mAuthorities) {   writeStatusLocked(); } 
old + 9
si.id == id && si.taskRemoved == taskRemoved
new GridBagConstraints(0,1,1,1,0.7,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,0),0,0)
dest.writeTypedArray(remoteInputs,flags)
fieldType.storeTermVectorOffsets()
return true; 
assertNotNull(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
List<UsageInfo>
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new ObjectMapper().readerFor(IspResponse.class)
buffer.nextOneRow(changeColumns,true)
Mono.subscriberContext()
am.getClass().getField("mContext")
from > to
YogaNode.jni_YGNodeSetOwner(child.mNativePointer,0)
expression == null || primaryIndexes.size() > indexes.size()
server.getClass()
LoopContextStateRetrieval retrievalToAdapt
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
_TestUtil.randomFixedByteLengthUnicodeString(random,fixedBytesLength)
Arg args
Long.parseLong(val)
analysis.primaryKeyLiterals() != null && analysis.primaryKeyLiterals().size() > 1
mQsDensityContainer.getX()
query.field("relyOnPrevCycle").equal(false)
@Override protected LibraryTree getTreeByKey(FBTree.Key key){   return key != null ? myLibrary.getLibraryTree(key) : myLibrary.getRootTree(); } 
mGnssCallback != null
getDelegate().getDefaultCipherSuites()
Byte.parseByte(param.getValue())
assertEquals(response.getStatusCode(),200)
!filename.endsWith(".jpg")
verify(mock)
message.getConversation()
JavaSourceGroovyPackagesNonSecuritySuite.suite()
times(1)
Throwable e
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
mNetd.setDnsConfigurationForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
codeFormatter.processText(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true),true)
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Builder<M,B>
MockReset.after()
policy_init == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
entry.notification.cloneLight()
(Class<? extends TruffleObject>)receiverClass
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
mConnectionById.containsKey(callId)
mProviderRequest.reportLocation && !mDisableGps && isEnabled()
logger.debug("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
pluginClasspathUrl.toString()
null == Configuration.getResource(dataSourceName)
StampFactory.declaredTrusted(type.getComponentType())
mMat[5]
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
Collection<T>
UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
execute()
compression != Compression.NONE && compression.compressor == null
StreamletNamePrefix prefix
a.getDimensionPixelSize(R.styleable.CollapsingToolbarLayout_scrimVisibleHeightTrigger,-1)
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
connectedHeaders.setVersion("1.1")
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,newDeviceState,prevDeviceState)
dataSourceContainer.getDriver().getFullName()
new MalformedException("Unused message placeholder: " + phName,node)
partValue=total / partCount
evaluate("value = read_config('foo', 'bar')").moduleLookup("value")
AttributeCache.instance().get(packageName,realTheme,styleable.Window,userId)
asList(8L)
new HashSet<Class<?>>(5)
N > 1
memoryReservation.addAndGet(bytes)
queryDefinition.getOrderByComparator("JournalArticle")
telephony.getNetworkTypeForSubscriber(subId,getOpPackageName())
name.trim()
diff <= 1000
hostConfig.getCpuQuota()
popupWindow.setContentWidth(menuWidth)
Arg args
containerLog.error(sm.getString("dataSourceRealm.getRoles.exception",username),e)
remaining == 0
Collectors.groupingBy(OrderRoot::getFile,LinkedHashMap::new,Collectors.toList())
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
obj.getFileName()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
colDesc.getUpgradedType()
COOKIE_SYNC_MANAGER=false
d1.isTimeOut() || d2.isTimeOut()
this(null,null,null,true); 
GLMTest.residualDevianceTest(model) - 1e-2
return true; 
variableType.matches(allowedClassName)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
user.isAuthorized("essentials.world." + toPlayer.getWorld().getName())
getJmxUrl(name,rmiServerPort,rmiRegistryPort)
state.isAlive()
SCAN_STATUS_PARTIAL=1
DEFAULT_ROW_FLUSH_BOUNDARY=75000
group.getAvatar() != null && group.getAvatar().getFullImage() != null
delegate.writeEmptyElement(prefix,localName,namespaceURI)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
selenium.click("//li[4]/span/a/span")
button.setPadding(50,5,10,5)
in.readUShortx()
categoryMap.get(category.getParentId(),rootCategory)
TelephonyManager.getDefault().getCurrentPhoneType()
delaySoFar >= mReEnableDelayMillis
new VectorDrawableAnimatorUI(this)
new GridQueryCacheObjectsIterator(res.iterator(),cctx,cctx.keepPortable())
newFileAnnotation.setRevisions(revisions)
this.getDrawnBoundingBoxE6().getLongitudeSpanE6()
connection.psubscribe(jedisPubSub,patterns)
duration.getHours()
rep.getJobEntryAttributeString(id_jobentry,"success_condition")
selenium.isElementPresent("link=Control Panel")
"Unable to get queryfields for SQL: " + Const.CR + sNewSQL
ap.getSsidStr()
ImmutableMultimap<Feature<?>,Feature<?>>
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Simple.forClass(Runtime.NoneType.class)
assertEquals(11,definitions.size())
assertEquals(1,sink.getModified().size())
mapConfig.getBackupCount()
assertSameLines("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>test</groupId>\r\n"+ "    <artifactId>project</artifactId>\r\n"+ "    <version>1</version>\r\n"+ "    <dependencies>\r\n"+ "        <dependency>\r\n"+ "            <groupId>group</groupId>\r\n"+ "            <artifactId>artifact</artifactId>\r\n"+ "            <version>version</version>\r\n"+ "        </dependency>\r\n"+ "    </dependencies>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
lineArgs[2]
TestTextureArrayCompressed app=new TestTextureArrayCompressed(); 
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
String message
artifact.getId()
triggerProto.getAfterEndOfWindow()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,commentFragment).commitAllowingStateLoss()
Throwable e
expandableView.getIntrinsicHeight()
ENABLE_SQLITE_LOG=false
expression.getContainingFile()
!GrantCredentialsPermissionActivity.class.getName().equals(targetActivityInfo.getClass().getName()) && !CantAddAccountActivity.class.equals(targetActivityInfo.getClass().getName()) && PackageManager.SIGNATURE_MATCH != pm.checkSignatures(authUid,targetUid)
probe.getIrradianceMap() != null
mGnssCallback != null
exchange.getPartitioningScheme().isReplicateNullsAndAny()
Throwable e
sleepAtLeastMillis(1000)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
item.getMedia() != null && item.getMedia().getId() == id
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .start()
Restart.class
PlatformTestUtil.startPerformanceTest("VF.getPath() performance failed",4000,new ThrowableRunnable(){   @Override public void run(){     for (int i=0; i < 1000000; ++i) {       file.getPath();     }   } } )
Double.valueOf(args[1])
ClientTest.class
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new IndexWriter("index",ANALYZER,false,IndexWriter.MaxFieldLength.LIMITED)
new PBEKeySpec(secretKey.toCharArray(),char2byte(salt),65536,128)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
structuralLock.isHeldByCurrentThread()
imageParser.isSelected() && e.getStateChange() == ItemEvent.SELECTED
ONE_MINUS_DST_ALPHA(7)
IllegalArgumentException ise
getJSDocType(operation)
this.typeDescriptorCache.putIfAbsent(pd,td)
postJob.toString()
BufferUtils.newUnsafeByteBuffer(fileSize)
Long.parseLong(nfcid2,16)
(Number)array[this.index]
Values.stringOrNoValue(stringValue(offset))
LinkageError e
OverridingMethodsSearch.search(method,method.getUseScope(),false)
selenium.isElementPresent("link=Control Panel")
defaultDndAccess != null
getMyApplication().getSettings().WIKIVOYAGE_SHOW_IMAGES
config.getMaxEntriesLocalHeap()
scanFlags & SCAN_REQUIRE_KNOWN
new File(dex.getParentFile(),FilenameUtils.getBaseName(file) + "_dex2jar.jar")
setupDockerConfiguration(configurationBuilder,envs,commandShell,springBoot,war,bundle,jar)
completionContext.offset > end
AbilityRegistryProxy.setAsNotRecoverable(itemStack)
(parentRestricted && !restricted) || (!parentAsked && asked) || hook.whitelist() != null
DUPLICATE_OPS_TOLERANCE=10
ScriptingUtil.exec(null,portletObjects,language,script,new String[0])
new String(temp,UTF8)
new FakeCommitsInfo(fakeCommits,base,resultRef,subjectRef)
TransMeta.addStep(deletedStep)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
Assert.assertEquals(122L,ownerCapsuleNew.getFreeNetUsage())
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
showPoint != null && showPoint.getComponent() != null
cacheConfig.isUseCache()
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
DvcsUtil.guessRepositoryForFile(project,getRepositoryManager(project),DvcsUtil.getSelectedFile(project),HgProjectSettings.getInstance(project).getRecentRootPath())
in.readByte()
new Dimension(750,600)
zeroState[1][1]=0.251F
isFocused()
childLeftTuple.reAddRight()
!JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
IOException ioe
DEBUG=false
recordSetVersion2.getVersion()
!finished || !processorQueue.isEmpty()
analyzedSentence.getTokensWithoutWhitespace()
new ImmutableInstruction3rc(Opcode.INVOKE_DIRECT_RANGE,instruction.getStartRegister(),instruction.getRegisterCount(),instruction.getReference())
l.getInt() != null || l.getHex() != null
processNonPersistent=false
outboundRequest("localhost",port,"",httpRequest)
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,60_000)
Throwable ex
component.setObfuscated(object.get("obfuscated").getAsBoolean())
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
writer.flush()
_connector.getResponse("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
LOGGER.warn("Could not execute paste",ex)
BackupManagerServiceInterface svc=mService; 
dest.writeTypedArray(remoteInputs,flags)
Period.months(lExpr.getIntervalYear())
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","my-app","impersonation")
assertEquals(3L,countDownLatch.getCount())
DEFAULT_WIDTH=0x00010000
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
Generics.newTreeMap()
new LayerView(this,0x0f00ff00)
clearFromMember.join()
tests.add(0,objectExpressionType.getGenericsTypes()[0].getType())
selenium.isElementPresent("link=Control Panel")
poList[2]
CrawlDatum val=new CrawlDatum(); 
logger.warn("license [{}] - invalid",license.uid())
!COMMENTS.contains(type2) && BLOCKS.contains(parentType) && !(node1.getTreeNext() instanceof PsiErrorElement)&& !(node1.getLastChildNode() instanceof PsiErrorElement)
Slog.w(TAG,"Session failed to close due to remote exception",e)
SyncEngine.scheduleSyncAccountTasks(syncAccount.getSyncAccountId())
TupleDomain.all()
removeGzipFromETag(ifnm)
epochs <= 0
type.equals(SyncConstants.TYPE_FILE) || type.equals(SyncConstants.TYPE_PRIVATE_WORKING_COPY)
"Second position set to " + pos2 + " ("+ region.getArea()+ ")."
ParceledListSlice<ActivityManager.RecentTaskInfo>
params[9]
Thread.sleep(2000)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
InstanceCreationUtils.newInstance(view.getContext(),entry.getValue(),VIEW_DELEGATE_CONSTRUCTOR_SIGNATURE)
params.getSimulatedPlatformVersion()
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
ctx.alloc().buffer()
isDelegateLastClassLoaderName(classloaderName)
state.value == rotationLocked && state.contentDescription != null
subscriptionManager.getOnSubscribeFunc(new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){   } } ,new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){     lastNotification.get().accept(o);   } } ,null)
LOG.info(e)
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
LOG.info(e)
testLogger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
Set<String>
public static BuildConfigSpec addBuildParameterGitSource(BuildConfigSpecBuilder builder,String gitUrl){   return builder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource().build(); } 
List<String>
BaseComponent.toLegacyText(message)
intervalFraction * (nextValue - prevValue)
Localization.menuTitle("Tools")
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
groupType == null || device.isGatewayExtras()
lp.resolveLayoutDirection(layoutDirection)
factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)
bundleRoot.getParent()
weekRange.add(Calendar.DATE,6)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
transaction.commitAllowingStateLoss()
DEBUG=false
@NonNull BluetoothDevice bluetoothDevice
c.close()
times(1)
concLvl < 1
AudioSystem.isMicrophoneMuted()
/**   * Creates an empty struct with the given location.   */ public SkylarkInfo createEmpty(Location loc){   return SkylarkInfo.createSchemaless(this,ImmutableMap.of(),loc); } 
containerName != null
entry.getKey().get(4,String.class)
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
new Duration(30,SECONDS)
c.getRemovedMessageStatement()
element.getTextTrim()
Exception t2
SystemKeyspace.setLocalHostId(hostId)
sep == null || "".equals(sep)
row.slider.setProgress(newProgress,true)
CharSequence channel
? extends T
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
Integer.parseInt(taskIdStr)
StringUtil.equalsIgnoreCase(packageName,filter)
-982640606
param.setThrowable(xparam.getThrowable())
selectedFile != null && fileFilter != null
binding.getKey().getTypeLiteral().getRawType()
Assertions.assertThrows(EmptyStackException.class,() -> stack.pop())
reader.getType(reader.readSmallUleb128())
final GenericStructContainer parent
_viewFinder.setTorchMode(this._torchMode)
Integer.parseInt(taskIdStr)
logger.warn("Table spec retrieval failed, couldn't read file: " + sourceFile)
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
verify(tsService,Mockito.timeout(5000)).save(deviceId,expected,0L)
mPositionAnimator.isStarted()
win.isDrawnLw() || win.hasAppShownWindows()
chunkLength != C.LENGTH_UNBOUNDED && chunkLength != 0
parent.setAxisIndex(0)
loaded.getLoaded().getDeclaredConstructor()
assertThat(props).hasSize(6)
mAttributes.getAllFlags()
dic.buildRouterChain()
stream != null && stream.myStorage == this
Number rate
Integer.toHexString(realQuality)
(JobResponse)result
pmmlScorecard.getUseReasonCodes()
HELSINKI{   @Override public ServiceNowProducer get(  ServiceNowEndpoint endpoint) throws Exception {     return new HelsinkiServiceNowProducer(endpoint);   } } 
mUiHandler.postDelayed(pae,timeout)
entry.getCheckName().equalsIgnoreCase(checkAlias)
TestPropsValues.getUserId()
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
/**   * @param arg  * @return  */ T convert(S arg); 
Thread.sleep(1000)
mTfs.free(mTfs.open(path),true)
gatt.setPeriodicAdvertisingEnable(this.advertiserId,enable)
SafeUsagesExt1Kt.foo(a,1,"1","!")
defaultDndAccess != null
DBG=false
!r1
page.getRetainedSizeInBytes()
fileAccess.writeFile(new Runnable(){   public void run(){     cache.close();   } } )
_typeSettingsProperties.toSortedString()
AdviceWithTasks.removeByToString(route,toString,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
List<Long>
Math.max(dgg / gg,0.0)
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
String message
callExpression != null && callExpression.resolveCalleeFunction(PyResolveContext.defaultContext()) != null
comboBox != myReplaceComboBox
mPowerManager.isInteractive()
mMat[7]
mUserManagerHelper.getAllUsers()
System.currentTimeMillis()
mUiHandler.removeCallbacks(pae)
(Long)src
new UnsupportedOperationException("Deprecated: should not be called")
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static Factory getStaticFactory(SQLDialect dialect){   return DEFAULT_INSTANCES[dialect.ordinal()]; } 
new String(bytes,"UTF-8")
network.predecessors(producedNode)
new TwoDimTable("Coefficients","glm coefficients",ns,new String[]{"Coefficients"},colTypes,colFormats,"names")
colors.getThemeAttributeId(i,0)
elementType == null || elementType == Object.class
!propertiesFile.equals(myResourceBundle.getDefaultPropertiesFile().getVirtualFile())
File canonicalFile
Iterables.filter(getPlayers(),new Predicate<ProxiedPlayer>(){   @Override public boolean apply(  ProxiedPlayer input){     return (input == null) ? false : input.getName().toLowerCase().contains(partialName.toLowerCase());   } } )
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
validator.error("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
CoerceFailedException.simple(pathRelativeToProjectRoot,object,getOutputClass(),e.getMessage())
popupWindow.setContentWidth(menuWidth)
disable2ForUser(what,token,pkg,mCurrentUserId)
15 * 60 * 1000
GridCacheProjection<String,String>
Utils.convertDpToPixel(dataSet.getBarBorderWidth())
lock.isHeldByCurrentThread()
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
me.getComponent() == myCurrentComponent || me.getComponent() == myQueuedComponent
CLOB_LENGTH=9999999
Map<RealmObject,RealmObject>
Boolean.parseBoolean(attrValue)
return mAppearingDelay; 
return true; 
CloudScanConfiguration.class
descrTextView.setTextColor(color)
OverrideImplementUtil.getMethodSignaturesToOverride(aClass)
builder.length() == 0 && s != null
this.mAngularVelocity
this.notifyItemChanged(getItemCount())
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
serialVersionUID=5318897374067731021L
sampleFormat != null && trackOutput != null
lookup="java:/queue/myAwesomeQueue"
centerButton(mButtonNegative)
(byte)0xe2
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).descriptionAndTooltip(message)
dir.getAbsolutePath()
mGesturesPopup != null && mGesturesPopup.isShowing()
selenium.isElementPresent("link=Control Panel")
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
position < -1f || position > 1f ? 0f : 1f - (scale - 1f)
expectedType.equivalent(schema.getField(field).getType(),Schema.EquivalenceNullablePolicy.IGNORE)
stackIterator.remove()
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
state.isAlive()
new StatsLogEventWrapper(tagId,10)
this.evaluator.prepareRightObject(handle)
collection.setOnScrollListener(onScrollListener)
Long.parseLong(id)
field.createField(fieldType.indexedToReadable(indexedValue),1.0f)
s.tryAcquire(4,2,TimeUnit.SECONDS)
LOG.error("Couldn't upload logs for " + containerId + ". Skipping this container.",e)
epochNum=100
IOUtils.toString(stencilsetStream,"utf-8")
RegionRegistry.class
sampleFactory.getDeclaredConstructor()
selenium.click("//li[4]/span/a/span")
containerName.endsWith("list") || containerName.endsWith("set")
f.isFile()
new ColorUIResource(0x743A3A)
BIG_ENDIAN=0x78563412
timeUnit.toMillis(timeToLive)
logger.warn("{}",builder.toString())
stompConnection.receive(5000)
size=24
initialCapacity <= capacity
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
mService.setAppPolicy(UID_A,POLICY_NONE)
parentGroupId <= 0
DEBUG=false
realm.checkIfValid()
functionFactory.expm1(iX)
new File(mantleThemeDirStr)
accessLevel1 == accessLevel2 && myNextComparator != null
keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE
152 + (USE_OLD_HISTORY ? 1000 : 0)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Math.max(tmp.getMaximumFractionDigits(),10)
ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())
mCallback.onInputUpdated(inputId)
GRADIENT_SCRIM_ALPHA=0.45f
log.warn("Couldn't get font " + fontName)
waitLatch.await(1000,TimeUnit.MILLISECONDS)
new IntentStarter(act,TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA)
jobsLogs.operationsLog()
StringBuilder buffer=new StringBuilder("{ "); 
display.getRealMetrics(dm)
(currentCon != null) && (currentCon.getMode() == Conversation.MODE_MULTI) && (!alwaysNotify)&& notify
delayMs <= 0
Long id
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
fragmentEntryPersistence.countByG_FCI(groupId,fragmentCollectionId)
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
LatLon location=settings.getLastKnownMapLocation(); 
checkCall(receiver)
val == null || val.length() == 0
response.setStatus(500)
answer == null || comparator.compare(value,answer) < 0
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(path1))
NB_CACHED_PARAMS=10
loaded.getLoaded().getDeclaredConstructor()
tfs.createFile(new TachyonURI("/root/testFile1"))
intent.resolveType(getContentResolver())
type.getDeclaredConstructor()
portalTopLevelBuildData.getBuildURL()
new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
account.hasSpamFolder()
result.whenComplete((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
defaultDndAccess != null
chargeUAh > 0 && level > 0
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(mAm.mContext,TAG,pw)
Thread.sleep(5000)
mMenu.getNonActionItems()
e.toString()
new GridConcurrentHashSet<>(entries.size())
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
mDeviceProvisionedController.isCurrentUserSetup()
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .start()
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
accountService.withdrawBitstampFunds(Currency.BTC,new BigDecimal(1).movePointLeft(4),"1PxYUsgKdw75sdLmM7HYP2p74LEq3mxM6L",null)
selenium.isElementPresent("link=Control Panel")
BackupManagerServiceInterface svc=mService; 
argCount > paramCount || argCount == paramCount - 1
b.getId()
remaining == 0
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
KotlinTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
Log_OC.e(TAG,"Server check tried with OperationService unbound!")
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
synchronized (clz) {   mgr=managersCache.get(clz);   if (mgr != null)   return (T)mgr;   try {     Method method=clz.getDeclaredMethod("newInstance",KylinConfig.class);     method.setAccessible(true);     mgr=method.invoke(null,this);   }  catch (  Exception e) {     throw new RuntimeException(e);   }   managersCache.put(clz,mgr); } 
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"),new RuntimePermission("accessClassInPackage.com.sun.jndi.url.ldap"))
log.warn("Error parsing command line: " + e.getMessage())
F.isEmpty(diffs)
ds.numExamples()
start <= offset
asyncContext.currentAsyncTraceObject()
currentFragment=FRAGMENT_SIGNUP
Stream.of("CYPHER 3.4")
text != null && text.length() != 0
PFLAG3_ASSIST_BLOCKED=0x4000
mAppliedTemporaryAutoBrightnessAdjustment=false
a.getDimension(attr,0)
FILES_LINES[i]
LOG.debug("Skipping invalid VCS root: " + root)
queryType != null && !CommonUtils.isEmpty(wordPart)
parsed && name.length() > 0
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } )
service.getName()
getConfigurables()
new CompositeException(t,e)
serializer.serializeInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
ir.mHandler != null && ir.mImageListener != null
createFromResourceStream(res,value,is,srcName,null)
Utility.isWifi(context)
size=1000
headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")
LAST_VERSION=487
stack.peek()
LOG.warn("Process %s exited with error code %d",buckPyProcess,exitCode)
FastMath.min(origin,num.floatValue())
testLogger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
m.getVersioned()
r != null && !r.finishing
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
fields.put(PERMISSIONS,perms)
File.createTempFile("push-attachment","tmp",context.getCacheDir())
StringUtils.escapeForHtml(text,false)
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
folder.toUnescapedModel()
EmbeddedServerPortFileWriter.class
endsWith("/home/source")
log.error("Error opening session file " + file.getAbsolutePath(),e)
near.getAndRemove(key)
FBUtilities.getBroadcastAddress()
controller != null && controller.getState() != ServiceController.State.UP
Thread.sleep(50)
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
EMERGENCY_ASSISTANCE_ENABLED=true
columnController.createColumns(false)
ValueGeometry.getFromEWKB(bytes)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
type.getDeclaredConstructor()
callback.onPulseFinished()
winAnimator.prepareSurfaceLocked(recoveringMemory)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted,crestricted)
props.getProperty(SAVE_IDLE_TIME,TRUE)
setFullscreen(true)
peopleListFromJSON(jsonArray,localTableBlogId,false,false,false)
service.getAllGtasksFromListId(DEFAULT_LIST,false,false)
return false; 
time < 7
deltaY <= 0
return name; 
selenium.isElementPresent("link=Control Panel")
minY + maxY
portalTopLevelBuildData.getUserContentRelativePath()
apnContext.getWaitingApns()
Namespace.CURRENT.getUriString()
zipInspector.assertFileDoesNotExist("assets/secondary-program-dex-jars/metadata.txt")
child1.setBytes(100L)
getViewHeightWithTitle()
checkCall(receiver)
CommonBundle.getWarningTitle()
defaultDndAccess != null
mOneShot=false
odi.close()
UpgradeStepRegistrator.class
entry == null || entry.get() == null
MiddleEntity middle2=new MiddleEntity(); 
new MaterializingOperator(operatorContext,sourceTypes)
um.getUsers(true)
Class[]
Map<String,FilterBuilder>
executorService.scheduleWithFixedDelay(fileWatcherRunnable,0,30,TimeUnit.SECONDS)
mat2.equals(mat1)
Throwable e
getVal(path,true)
handleStartServer()
_typeSettingsProperties.toString()
containingClass.getContainingClass()
newDirectory()
subjectBuilder.build()
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) == PackageManager.PERMISSION_GRANTED
mAdapter.unregisterDataSetObserver(mObserver)
!allowPrivate.isNull()
"Can't have more than 32767 vertices per batch: " + maxVertices
LOG.debug(" job " + job.getName() + " completed ")
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
ServiceAnnouncingChatHandlerProvider.class
Long.parseLong(args[1])
bucket.isExists()
attributes != null && !attributes.isEmpty()
logger.fine(String.format("encoded %s as %s",obj,str))
assertEvaluate(buildFile).moduleLookup("txts")
Long.parseLong(attrValue)
Wait.waitFor(new Wait.Condition(){   @Override public boolean isSatisified() throws Exception {     return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;   } } ,120000)
selenium.click("//li[4]/span/a/span")
NATCommand.insert(externalAddress,InetAddress.getByName(ipv6Str))
@Nullable
FunctionTypesKt.isFunctionType(valueParameterOrReceiver.getOriginal().getType())
c <= 'Z'
getAncestors()
_typeSettingsProperties.toSortedString()
mediaVideoItem.getHeight() / 2
SimpleAttributeBinding attributeBinding
/**   * Transforms the given object, and returns the transformed value.  * @param original The object to transform.  * @return The transformed object.  */ OUT transform(IN original); 
selenium.isElementPresent("link=Control Panel")
/**   * @return the root {@link PkgControl} object loaded.  */ private ImportControl getRoot(){   return stack.peek(); } 
par == null || par.isEmpty()
!match && compareRecover
progress.dismissAllowingStateLoss()
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(5,TimeUnit.SECONDS)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
Mockito.any(WorkerNetAddress.class)
fluids.containsKey(fluid.getName())
indexer.getSummary(result,themeDisplay.getLocale(),snippet,portletURL,null,null)
updaterOrigina.getStateViewArray().unsafeDuplication(true)
m.size()
resolved.build()
dest.writeInt(mSubId)
Long.valueOf(contentLength)
out.writeInt(mProgress)
lastIme != null
CommonPreference<Boolean>
resolver.acquireUnstableContentProviderClient(uri)
item < txId
DatabaseDescriptor.getListenAddress().getHostAddress()
timeMillis + MILLIS_IN
__logger.warn("Unable to set 'this.bundle.install' " + " for the bundle " + bundle.getSymbolicName(),t)
updatable=true
getDefaultCountry()
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
mStackScroller.getChildAtRawPosition(x,y)
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
fragment == null || fragment.getView() == null
redisson.getMap("123")
mAdapter != null && mDataSetObserver != null
mAuthorities.valueAt(i)
mNavigationBarView.getPaddingLeft()
videoStream != null && videoStream.getDirection() != MediaDirection.INACTIVE
new SemanticException(TYPE_MISMATCH,node,"%s",e.getMessage())
schedulerEngine instanceof SchedulerEngineClusterManager
selenium.isElementPresent("link=Control Panel")
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1,false)
(title != null && title.length() > 0) && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(ALPHA") == -1) && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(BETA") == -1)&& (!title.matches("Example\\d+"))&& (!name.startsWith("org.apache.jmeter.examples."))&& (!name.startsWith("org.apache.jmeter.report."))&& (!name.equals("org.apache.jmeter.control.gui.ReportGui"))
DEBUG=false
newHighlyAvailableDatabaseBuilder(path)
eventFunc.equals("conference_add_member") || eventFunc.equals("conference_member_add")
GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))
builder.toString()
!stateSpec.defaultStateAsResource() && LOG.isDebugEnabled() && getDefaultState(component,name,stateClass) != null
-819961245
cannedReplies != null && cannedReplies.length > 0
cacheFb.setMaxEntriesLocalHeap(5)
R
BufferUtil.zeroBuffer(1)
a.getDimension(attr,0)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
range.getEndOffset()
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
lock.isHeldByCurrentThread()
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
addStringLocalization(objectName,lang,name)
true || mSpew
parts.length < 2
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
NSNumber.numberWithLongLong(val)
Optional.ofNullable(caCertificatesFile)
rteCl.readableBytes()
e.getMessage()
buildTools.isPresent()
new IllegalStateException("This method should not be used for any fields the DateBuilder or TimeBuilder can't handle")
checkValidNanoOfDay(nanoOfDay)
assertEquals(1,tabGenerator.getInitialValue())
bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())
createPermissionsXmlAsset(new JndiPermission("*","lookup"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"))
rsMaxRows > 0 && connection.getDataSource().getInfo().supportsResultSetLimit()
encodeMapValue(value)
new ProcessBuilder("/system/bin/timeout","-k","15s","10s","/system/bin/logcat","-v","time","-b","events","-b","system","-b","main","-b","crash","-t",String.valueOf(lines))
cancelHardwareAnimations(true)
LOG.trace("removing shm " + shm)
((FloatValue)input).getValue().doubleValue()
randomFrom("_lang1","_lang2")
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
assertThat(response).isEqualTo("Woop woop. yay\n")
PsiElement file=null; 
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
loaded.getLoaded().getDeclaredConstructor()
new ClassPathResource("word2vecserialization/google_news_30.bin.gz").getFile(".gz")
mTargetSdk > O
friendlyAttributes.get(friendlyName)
location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
selenium.isElementPresent("link=Control Panel")
log.info(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
unitOfWork != null && onCompletions != null
selenium.isElementPresent("link=Control Panel")
new IllegalStateException("Advertising can't be both connectable and anonymous")
itemCache.put(item.id,item)
Long.parseLong(val)
selenium.isElementPresent("link=Control Panel")
cursor.getFloat(1)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
accountHandle.getComponentName().flattenToString()
_CLASS_Report.class
new DeadCodeEliminationPhase(Optional)
!mySpaceBetweenParentheses
showRecentApps(true,false)
part.getContentType().toLowerCase(Locale.ROOT)
new NameAlias(nameAlias)
!tagData.containsNonNullValue(TagData.NAME) || tagData.getValue(TagData.NAME).length() == 0
DEFAULT_MOVE_COST=7
Thread.sleep(1000)
Integer.parseInt(bottomStr)
E edge
config == null
MAX_ACTION_BUTTONS=3
new EnterSelectionDialog(shell,dbNames,"Select the database","Select the partitioned database to import from")
Navigation.checkNavigation(Navigation.NOTES) || (Navigation.checkNavigation(Navigation.ARCHIVE) && !archive)
DBG=false
myPreferredFocusedComponent instanceof AbstractButton
file.toURI()
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
mScaleType.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
(ResourceAdapterXmlDeploymentService)controller.getService()
internalCluster().getDataNodeInstance(SystemCollectSource.class)
route.toString()
AddFriendsActivitiesPortletTest.class
log.debug("Error extracting callable results",e)
assertCompletionVariants(myProjectPom,"org.codehaus.plexus","intellij.test","test","org.apache.maven.plugins","org.codehaus.mojo")
setIntegerPart(String.valueOf(integerPart))
result.getName()
new WorkerConnector(connName,connector,ctx,statusListener)
outboundRequest("localhost",port,"",httpRequest)
DeprecationLogger.nagUserWithDeprecatedBuildInvocationFeature(deprecation,String.format("This %s",suffix),null)
new long[0]
mMccStr == null
parts.length > 2
selenium.isElementPresent("link=Control Panel")
new SinglePeriodTimeline(durationUs,durationUs,0,0,!isLive,isLive)
clients.values()
new Short(getShortValue(workingMemory,object))
callback.onPulseFinished()
map.tryPut(key,value,60,TimeUnit.SECONDS)
KeyHelper.generateRegistrationId(false)
new File(EXPORT_DIR).mkdirs()
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
historyRoot.mkdirs()
~HIDDEN
one.setAxisIndex(LEAF)
this.thrown.expectMessage("File must not be null")
value + MINIMUM_BACKLIGHT
JDBCUtils.safeGetInt(dbResult,"pid")
lType == null || rType == null
LinkedHashMap<String,Account[]>
type.isEmpty()
HeaderSpec.this
position >= getItemCount()
display.getRealMetrics(dm)
Assert.assertTrue(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
DBG=false
new Exception("Apparent connection leak detected")
GlobalSearchScope.allScope(getProject())
secondString.substring(i + 1)
XContentType.JSON.mediaType()
GL11.glGetFloatv(pname,params)
Exception e
new LinkedFileViewModel(linkedFile,entry,databaseContext,dialogService,taskExecutor)
Math.floor(internalPower[in] / totalPowerContained * totalPowerConsumed)
from > to
originalRemoteAddr != null
PATH.getPath()
sendMessageAtFrontOfQueue(CMD_STOP_AP)
headers.addValue("Vary")
return EOF_DATA; 
new Info("basic/types").cppTypes("signed","unsigned","char","short","int","long","bool","float","double","_Bool","_Complex","_Imaginary","complex","imaginary")
klass.getDeclaredFieldsUnchecked(false,declaredFields)
buf.getShort()
tokens.length - 1
new DateMathParser(formatDateTimeFormatter)
sampler.getFileField()
/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 2; 
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
Integer.parseInt(attrValue)
!fields.contains(name)
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,false)
synchronized (mAuthorities) {   writeStatusLocked(); } 
client != null && client.autofillClientIsFillUiShowing()
uuid.getLeastSignificantBits()
mProgressListener != null && deltaX >= 0
destinationMap.remove(destination,adapter)
modelCache.put(key,model)
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
Settings.Global.getInt(mContext.getContentResolver(),SETTING_ENABLE_SCORER,0)
context == null || context == EGL_NO_CONTEXT
!ON_TOP
dest.writeInt(mSubId)
mPwCollection.getGroupedPwPairsSortedByRank(Utils.newDistanceComparator())
Thread.sleep(1000)
mQueryTextView.length()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
dest.writeInt(mSubId)
mf.filter(popup.getMenu(),true)
new IllegalArgumentException("unable to find any unassigned shards to explain [" + request + "]")
mItemFilterListener != null && mOriginalItems != null
getSelectedIconColorRes()
mDownView != null && mDownView instanceof ContextualUndoView
new IllegalArgumentException(e.getMessage(),e)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
clampScreenBrightness(mCurrentScreenBrightnessSetting)
ctx.cache().getOrStartCache(cacheName)
db.delete(CONNECTION_TABLE_NAME,null,null)
applicationContext.close()
Assert.assertEquals(120L,assetCapsuleNew.getNetUsage())
old.equals(dexArchive)
log.error("Could not set transaction isolation: {}@{}",isolation,System.identityHashCode(dsc),ex)
isUp()
LOGGER.error("Unsupported {} : {} for serviceId : {}",OAuthConstants.REDIRECT_URI,redirectUri,serviceId)
callback.qualifies(itemType)
imageView.setImageDrawable(null)
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid) && !isProfileOwner(callingUid)
compound.getTag("tile_pos")
mAttributes.getAllFlags()
JsonRecordHiveMapper.class
TypeMismatchException e
logger.debug("Couldn't get interpreter editor setting")
csFoldingEnabled.getSelection()
{port,ioe.toString(),pid}
Keyspace table=Keyspace.open(tableName); 
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
@Autowired GraphTraversalService graphTraversalService; 
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
chatTabbedPane.addTab(currentChatPanel.getDefaultContact().getDisplayName(),new ImageIcon(Constants.getStatusIcon(currentContactStatus)),firstChatPanel)
!handler.doProcess()
Slog.w(TAG,"Invalid wallpaper data")
wms.getGeoServer().getGlobal()
MimeTypeUtil.isImage(mFile)
new DeadCodeEliminationPhase(Optional)
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
view.getCompoundDrawablesRelative()
parent instanceof AppWidgetHostView || parent == null
holder == null || holder.provider == null
dockedBounds.right + dockDividerWidth
new TextPaint()
checkManageOrCreateUsersPermission("query user")
agentUri.getSchemeSpecificPart()
log.warn("Failed to retrieve instances from Eureka",e)
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
GitBlit.self().processCommitMessage(repositoryName,html)
!mScreenOnEarly
Boolean.parseBoolean(resizeableStr)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallback mBluetoothGattServerCallback=new IBluetoothGattServerCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
Iterables.getLast(cluster.getNodes()).getStatus().setAvailable()
!mShowLockscreenNotifications
selenium.click("//li[4]/span/a/span")
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=1000
!(exception ? throwable instanceof RuntimeException : throwable == null)
rightTuple.setStagePrevious(last)
64 * 1024
super(position,message); 
if (mAllowUndeclaredRTE) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),"javadoc.classInfo","@throws",tag.getArg1());   } } 
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
duration <= 0 && IDLE_TIMEOUT > 0
selenium.click("//li[4]/span/a/span")
Id
drawable != null
e.getCommandResult().getErrorMessage().contains("ns not found")
sharedOptsCount.containsKey(thread)
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
DataStreamSink<OUT>
war.setWebXML(SimpleWebTestCase.class.getPackage(),"web.xml")
/**   * set the tag of this item  * @param object  * @return  */ public Item withTag(Object object){   this.mTag=object;   return (T)this; } 
context == null || context == EGL_NO_CONTEXT
targetDatabase.getObjectQuotingStrategy()
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
(lo + hi) >>> 1
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
from >= to
Simple.forClass(SkylarkList.class)
selenium.isElementPresent("link=Control Panel")
folderName=FONT_16SP
this.rightLabel
value.setScale(1,RoundingMode.HALF_EVEN).doubleValue()
rowKeyColumnIO.writeColumnWithoutDictionary(buffer,0,length,recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
mHeadsUpNotificationView.releaseAndClose()
MacMessages.showYesNoDialog(title,message,YES_BUTTON,NO_BUTTON,SwingUtilities.getWindowAncestor(parent))
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
r.setAltitude(alt)
COUNT=3000
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
pos == -1 || pos >= end
KeyWords link=new KeyWords(); 
place == null || aClass == null
Environment.getCurrent().isReloadEnabled() || !Metadata.getCurrent().isWarDeployed()
userInfo == null || !userInfo.canHaveProfile()
print(StatementGenerator.generateStringLiteral(node))
new QueryBuilder.Options(getIdentifierQuoteString(),true,null,null,false,false)
assertPhoneNumberNotEqual("123123","0123123",false)
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
moduleProperties.setProperty(FAB_MODULE_DESCRIPTION,model.getDescription())
activityNdx <= topActivityNdx
LOG.assertTrue(file != null,"Virtual file should not be null!")
server.getPlayerExact(name)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
new Paint()
structure.getXsd()
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
Boolean.parseBoolean(attrValue)
cached.get(group)
DBUtils.removeDownloadInfo(info.galleryBase.gid)
log.debug("Double activation of SQL context")
CacheData<RealmObject>
client.getStatusCodeReply()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
id=10871
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,fromNode,direction,relTypes)
selenium.isElementPresent("link=Control Panel")
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
type.isAssignableFrom(number.getClass())
filterTypes.length()
selenium.isElementPresent("link=Control Panel")
Throwable e
engine.execute(cypher).dumpToString()
LOGGER.warn("Could not execute open URL",ex)
Long.parseLong(attrValue)
_addTestVariant("small.hd","uuid1",100,101)
InetAddress.getByName("127.0.0.1")
ref.getAuthorIdent()
Exception e
selenium.isElementPresent("link=Control Panel")
_activeBC.proxPen(_beta)
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
offset + i
myNodeComparator.compare(node,node1) > 0 || isLoadingNode(node1)
Integer.parseInt(nextArgRequired())
selenium.isElementPresent("link=Control Panel")
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false,false)
Objects.hash(expressions,withOrdinality)
getMeasuredWidth()
new SystemVibrator(context)
selenium.isElementPresent("link=Control Panel")
assertComputationDurationAround(350_000L)
tempBitmap != null && tempBitmap.getWidth() != 0 && tempBitmap.getHeight() != 0
m.size()
wpdb.savePost(post)
accountHandle.getComponentName().flattenToString()
/**   * Returns first child <b>element</b> with given name or <code>null</code> if no such children exist.  */ public Element getFirstChildElement(String elementName){   if (childNodes == null) {     return null;   }   for (int i=0, childNodesSize=childNodes.size(); i < childNodesSize; i++) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
meta.getEnclosure()
Spacing.createSpacing(0,0,0,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE)
this.comparatorIgnoringType
a.willChangeBounds()
IOUtils.toString(classpathUrl,UTF_8)
context.getOpPackageName()
config.addProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES,snm.getConfig())
(NotificationListener)null
outputRowData=null
serialVersionUID=1138731961
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
code == 10
renderManager.render(tpf,true)
new char[8192]
injectField(annotationNode.up().up(),fieldDecl)
added.isEmpty()
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),locator,e)
waitFor(pin,mode,-1)
new StringBuilder(245)
assertThat(list.isInternal()).isTrue()
JDBCUtils.safeGetStringTrimmed(resultSet,"ROLENAME")
Integer.parseInt(taskIdStr)
pinScrollBy(hdelta,vdelta,false,0)
s.charAt(0)
RESULT_TIMEOUT=5000
logger.debug("Cannot play sound ({})",e.getMessage())
selenium.isElementPresent("link=Control Panel")
type.isAssignableFrom(number.getClass())
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
checkCall(receiver)
mParent == null
new DefaultTaskClassValidatorExtractor(new ClasspathPropertyAnnotationHandler(),new CompileClasspathPropertyAnnotationHandler())
containerKeyName=elementName
result == null || result.getAttack() == null
mLastNotificationMillis=-rateLimitMillis
mHotspotBounds.set(left,top,right,bottom)
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
addEnergy(10)
depthError("modelZ")
c == '\\' && i + 1 < cursor
WindowedValue.valueInGlobalWindow(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
return 0; 
StringBuilder sb=new StringBuilder(); 
configElements[0]
return mChangingDisappearingDelay; 
mp.getResolvedValue()
pY + pHeight
DIARY_QUEST_GROUP_ID=119
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
TURN_DEGREE_MIN=35
handleException(error)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
allocator.getFlowController().prepareActionAllWrite(input,activations)
getPreferenceStore()
!swipeVertical
accountCapsule.getFreeAssetNetUsage(tokenName)
new QueryException(e,"Error in preloading targets. %s",e.getMessage())
ImmutableList.of(sourceNode)
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to timestamp with time zone: " + value.toStringUtf8(),e)
Slog.w(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
(node1.getUserObject() instanceof NodeDescriptor) && ((NodeDescriptor)node1.getUserObject()).getElement() == null
new ShardRouting(indexName,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
type == BSON.B_GENERAL || type == BSON.B_BINARY
RequestListener<Object,GlideDrawable>
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
(application.change().downgrades(deployment.version()) || application.change().downgrades(deployment.applicationVersion()))
selenium.isElementPresent("link=Control Panel")
handleImpl.getObject()
mMime.toLowerCase().startsWith("video/") || mMime.equalsIgnoreCase(MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC)
DEBUG=false
new MockQueryExecution(2)
assertFalse(mDisabled.hasFocus())
project == null || project.isDisposed()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
DEBUG=false
assertEquals(6,scannedBeanCount)
MSG_LOGIN_RESPONSE=0x4000
sourceHeight > 0
CLOCK_DAEMON.schedule(timerTask,period,period)
public static BlockContainerEE alchemySquare; 
cmdbCompItem != null
settings.setTextSize(WebSettings.TextSize.LARGEST)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
new LayerView(this,0x0f00ff00)
slaveMasters.containsKey(nodeId)
parsedResult.getType()
fragmentCollectionPersistence.findByGroupId(groupId)
@LargeTest
HSTRETCH_DURATION=0.5f
temporaryFolder.newFile()
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
Optional<DescriptorDigest>
TelephonyManager.getDefault().getCurrentPhoneType()
builder.build()
result.getReceipt().getEnergyUsageTotal()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6313_p,client.field_6324_e)
!"/remote.html".equals(path) && !_remote && !_allowed.contains(path)&& (!from.equals("localhost") && !from.startsWith("127.") && from.indexOf(":1") < 0 || !to.equals("localhost") && !to.startsWith("127.0.0.") && to.indexOf(":1") < 0)
selenium.isElementPresent("link=Control Panel")
logger.fine(String.format("close (%s)",reason))
superMenu.addSeparator()
ne(Expressions.constant(constant))
dl.error("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
parser.parseLight(GroovyElementTypes.CONSTRUCTOR_BLOCK,builder)
application.getBaseContext()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
enableRefreshTime=true
BooleanQuery[]
getResources().getDrawable(R.drawable.ic_gesture_white_24dp)
request.getDecodedRequestURI()
new IllegalArgumentException("Could not inspect meta data for database type.  You have to supply it explicitly.",e)
new LiferayRepository(repositoryService,dlRepositoryLocalService,dlRepositoryService,repositoryId)
event.fromDisplayDensityChange || event.fromDeviceOrientationChange
new AccountCapsule(toAddress,AccountType.Normal)
ReviewChangesActivity.Companion.startForResult(this,view,requestModel,getPresenter().getRepoId(),getPresenter().getLogin(),pullRequest.getNumber(),isAuthor,isEnterprise())
PublisherPeek<T>
offset <= 0
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
from > to
info.crashInfo.stackTrace.length() > 30000
new Paint()
mDataAuthorities == null || data == null
localInputFuture.cancel(mayInterruptIfRunning)
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名",e)
t.getMessage()
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
Map<String,Object>
@Mock private PanProfile mPanProfile; 
return 10; 
9 * 60 * 1000
playerData.getCurrencyBalanceList()
structuralLock.isHeldByCurrentThread()
tfp != null && ctxt.isPrototypeMode()
0.0 == CheckUtils.parseFloat(text,type)
FragmentActivity activity=fragment.getActivity(); 
log.debug("BouncyCastle not registered, using the default JCE provider")
nse.getErrorCode()
this.children.add(0,body)
key != null
dest.writeInt(mSubId)
Assert.assertEquals(editor.getMarkersQuantity(ERROR_OVERVIEW),12)
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
parts.get(0)
dynamicType.getDeclaredConstructor()
jfe.getMapCounters()
logger.fine(String.format("writing packet %s",packet))
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
sha3(ephemeralKey.getPubKeyPoint().getEncoded(false),1,64)
TIMESTAMPTZ_READ_METHOD.invoke(object,connection)
mSmallestWidthDp >= 600
Log_OC.d(TAG,"onPause() start")
new Random()
mEntryValues[which]
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,true)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)
createHandlerResult(tokenCredential,this.principalFactory.createPrincipal(uid))
stepLightIdleStateLocked("s:shell")
oldCfm.isThriftIncompatible()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
psiClass != null && !(psiClass instanceof PsiTypeParameter)
new FairAffinityFunction(false,512)
mock.expectedBodiesReceivedInAnyOrder("Hello World 3")
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,false,1)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
popupWindow.setContentWidth(menuWidth)
c.getOpenCount()
DeploymentDescription.getReplaceDeploymentOperation(locale)
LOG.error("Cannot close the writer for {}",recordPathTemp,e)
assertEquals(13,beanCount)
application.getBaseContext()
groupField.createField(group.groupValue.utf8ToString(),1.0f)
page.getLogicalSizeInBytes()
MultiMap.create()
Messages.showErrorDialog(IdeBundle.message("error.list.of.plugins.was.not.loaded"),IdeBundle.message("title.plugins"))
planRouteContext.getSnappedMode().getMapIconId()
powerManager.isDeviceIdleMode()
FlowManager.getWritableDatabaseForTable(getTable())
sbn.getPostTime()
Thread.sleep(sleptAlready ? 10 : delay)
generatePomXML(kfs,releaseId)
return true; 
QuotaCache.this.namespaceQuotaCache.containsKey(ns)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
mAuthorities.valueAt(i)
60L + 120L
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
action != KeyEvent.ACTION_UP
edge.setDirection(EdgeDirection.DIRECTED)
greaterThanOrEqualTo(0L)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,false)
new RationalTanhDerivative(x,y,z,n)
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
!mIsOnInnerCircle && hour != 0
mUiHandler.removeCallbacks(pae)
status.getLastModificationTimeMs()
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadUrl.Null"))
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
logger.debug("InterruptedException during playing a notification sound")
CLOCK_DAEMON.schedule(timerTask,period,period)
e.getMessage().startsWith("fields stored in the db can't have . in them")
name.equals("getSimOperator") || name.equals("gsm.sim.operator.numeric")
assertTrue(message.getPayload() instanceof Collection<?>)
getResources().getString(R.string.upgrade_import_no_file_found,"'.apkg'")
Slog.d(TAG,"Unable to bind FLP Geofence proxy.")
beansXml.getOrCreateAlternatives()
logger.debug(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
connections.containsKey(manager)
N node
!data.getCrc32().equals(Long.toString(newCrc32))
BigDecimal.valueOf(0.25)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
toolWindow.activate(null,false)
children.removeAllElements()
/**   * Received messages count.   */ private final LongAdder8 rcvdMsgsCnt=new LongAdder8(); 
contentLength >= 0
contact != null
/**   * The resource.   */ private R mResource; 
getTelecomService().getVoiceMailNumber(accountHandle)
DEBUG_ADD_REMOVE=true
incomingEdges.containsKey(dest)
mMatchMode=matchMode
setFloatingLabelInternal(mode)
testClass.getSimpleName()
new OneRun(43.733802,7.413433,43.739662,7.424355,2227,105)
i=2
sTextLayoutBuilder.setTextDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING,true)
Float.parseFloat(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
q.removeFirst()
Boolean.parseBoolean(notification.getFieldValue("isNewAlert"))
service.asBinder().pingBinder()
shadowSize <= 0
timeUnit != null
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new OAuth2RefreshToken("refresh-token",this.accessToken.getIssuedAt())
globalExecutionStats.getStartedSplits()
j.next()
public void setMaxFrameSize(long maxFrameSize) throws ConnectionException {   if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.maxFrameSize=(int)maxFrameSize; } 
new byte[18]
FileUtils.deleteQuietly(root)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true)
assertEquals(arr2,view.getBinaryByteArray(0,0))
origin.realComponent().doubleValue() > other
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
s.length() - 1
type.getDeclaredConstructor()
FilterResult::isDeclined
return mDisappearingDelay; 
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
turnOffPlugin()
type.getDeclaredConstructor()
mSearchFab.setScaleY(1.0f)
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
r2.getName()
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
qux.getDeclaredConstructor()
bedtime - SystemClock.uptimeMillis()
log.debug("Committed all active tasks {} and standby tasks {} in {}ms",taskManager.activeTaskIds(),taskManager.standbyTaskIds(),timerStartedMs - now)
cell != null && cell.recon != null
focusedStack == null || focusedStack.getTaskCount() == 0
String.format("DEF_SYSTEM_FONT_SIZE: %.2f",DEF_SYSTEM_FONT_SIZE)
this.cusolverDnDsyevd.invoke(null,solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
-4
assertEquals(1,resultList.size())
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
logger.debug("Cannot play line-in ({})",e.getMessage())
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
timeout <= 0
telephony.isOffhook(getOpPackageName())
new IllegalStateException("BUG: This code should never be called")
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
getBaseName()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
/**   * Represents black  */ BLACK('0',0x00)
selenium.isElementPresent("link=Control Panel")
(mOomMinFreeHigh[5] * 7) / 4
this(0L,null); 
Assert.assertEquals("after evaluation of: " + code,expected,actualString)
dist >= maxDist
Nd4j.randn(order,shape).muli(FastMath.sqrt(2.0 / (fanIn + fanOut)))
mPhones.contains(phone)
DEBUG=false
RemovePortletSMTest.class
SAMPLE_RATE_HZ_MAX=96000
log.debug("Not supported by dialect",ignore.getMessage())
now.plusDays(3).withTimeAtStartOfDay()
e.getPresentation().setEnabledAndVisible(false)
assertPlanEquals(expectedPlan,actualPlan)
ap.getSsidStr()
formatStrutsConfigXML(fileName,newContent)
new IntPreference("overlay_transparency",200,false)
callback.onSuccess(patchText,context)
LOG.debug(ex.getLocalizedMessage(),ex)
selenium.isElementPresent("link=Control Panel")
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
end <= textLength
this.setProperty(TIMEOUT,newTimeout)
maskArray != null && maskArray.isAttached()
blog.getLocalTableBlogId()
setEnabledFunctions(null,true,false)
CompilationAlarm.trackCompilationPeriod(options)
@NonNull BluetoothDevice bluetoothDevice
getConfig().getBoolean(ENABLED,true)
Long.parseLong(args[ai])
currentType != globalType && currenType != Type.INT
List<Class>
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
urlString.lastIndexOf("/monitoring")
listAdapter.notifyDataSetChanged()
!message.isDiscussion()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
LOG.debug("Skipping invalid VCS root: " + root)
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Cool this annotation!")
/**   * {@inheritDoc}  */ public Integer next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
foundTargetWs && winAnim.getShown() && winAnim.mLastAlpha > 0f
Map<Long,Object>
length > 15
ZONE2_SOURCE_INTERNETRADIO(120)
accountHandle.getComponentName().flattenToString()
WikiPage parent
selenium.isElementPresent("link=Control Panel")
getServiceForUserLocked(userId)
Simple.forClass(Tuple.class)
near.getAndRemove(key)
StringBuilder buffer=new StringBuilder("("); 
Throwable cause
routes.BuffersResource()
DaggerAutoFactoryProcessorComponent.builder()
autoClear || !successful
warningBytes > limitBytes && limitBytes != LIMIT_DISABLED
FileUtilRt.loadFile(new File(getBasePath() + File.separator + getTestDir()+ File.separator+ getTestName(true)+ "."+ ext),true)
out.readFully(compressed,0,chunkSize)
AudioSystem.isMicrophoneMuted()
selenium.isElementPresent("link=Control Panel")
kompiler.getMethod("exec",PrintStream.class,String[].class)
STATUS.isReleaseToRefresh(mStatus)
3 + ((parameterTypes.length * 2) - 1)
new AnalyzedToken(word,currTag,lemma,pos)
!dataChanged || isDirectChildHeaderOrFooter(focusedChild) || focusedChild.hasTransientState()|| mAdapterHasStableIds
mValues[8]
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),JIG)
mContext.startActivityAsUser(intent,new UserHandle(mCurrentUser))
assertThat(new XooPlugin().getExtensions()).hasSize(17)
final GenericStructContainer parent
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
this.findPreference(PREFERENCE_CATEGORY_ADVANCED).setIcon(advanced)
new PathResourceManager(tmpDir,10485760,false,false,false)
ByteArray.fromString(assetId)
note1.getId()
selenium.isElementPresent("link=Control Panel")
e == null
c1.getQualifiedName()
Throwable e
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
keyCode == KeyEvent.KEYCODE_SEARCH && event.getRepeatCount() < 1
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true,false)
NoopChatHandlerProvider.class
LOG.warn(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
ConfiguredTargetValue.key(label,defaultTargetConfiguration)
name.equals(Context.CLIPBOARD_SERVICE) || name.equals("clipboardEx")
new Intent(Intent.ACTION_USER_PRESENT)
public EdgeNGramTokenizer create(Reader input){   return new EdgeNGramTokenizer(input,side,minGramSize,maxGramSize); } 
maximumGridSize=512
content.toHtml(false)
rats.setConf(editConfig.getText())
assertEquals(11,databases.size())
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
selenium.isElementPresent("link=Control Panel")
titleTextField.getText()
this(url,null,null,true); 
stall_till_cloudsize(5)
checkResources(apps[i],false)
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
target.getText()
file.getPath()
food(8)
recall(classLabel)
ImmutableSet<String>
connection.prepareStatement(getUsersSQL,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)
Slog.w(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0)
LOG.warn("SpaceReserver failed to free tier {} to {} bytes used: {}",tierAlias,reservedSpace,e.getMessage())
indexStats.getPrimaries().getMerge().getCurrentSize()
mIconBase.clone().iconText((String)mIcons.get(i))
context == null || context == EGL_NO_CONTEXT
{6,30,54,78,102}
entry.getValue()
ParceledListSlice<ActivityManager.RecentTaskInfo>
IllegalDataException.class
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").withArgs(clazz.getName(),IGlobalExtension.class.getName())
LOG.error("Failed to reconfigure vim keymap.\n" + e)
public class RetryFailure extends AssertionError {   private static final String MESSAGE="Test failed despite retries";   public RetryFailure(  Throwable cause){     super(MESSAGE,cause);   } } 
createDouble(buffer.length(),init,workspace)
new ConversionException("Expected a proto but was: " + body.mimeType())
remaining == 0
myTypeChecker.checkExpressionIsAssignableToType(lOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null,false)
returnTypeElement == null || returnType == null
it.setJavadocComment("Super extra cool this annotation!!!")
new IllegalStateException("Wrong header information type: " + fieldsFromHeader)
assertEquals(939,trackPoints.size())
interactor.startCommand(packageName,callback,mCommand,mArgs)
value.toLowerCase().startsWith(constraintLowerCase)
mFolderName.equals(mAccount.getInboxFolderName())
mState != STATE_PREPARE && mState != STATE_FINISHED
List<Id>
mMat[7]
HashSet<>
Helper.interpretSizeSource(jaxbElement.getLength(),jaxbElement.getScale(),jaxbElement.getPrecision())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION,false)
dpToPx(8f)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
blog.getLocalTableBlogId()
val == null || val.length() == 0
tracesDir.mkdirs()
Object minIntDigits=properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
si.deliveryCount > 1
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
{0,400}
mapReader.containsPoiData()
findChildByType(PyElementTypes.TARGET_EXPRESSION)
verify(mock)
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
routeController != null
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
rhs.getScore()
new ObjectMapper().readerFor(Map.class)
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
-3
Thread.sleep(300)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
fuel >> 14
System.getProperty("tests.coverage","false")
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_CALL_W)
Exception e
subProtocol != null && subProtocol.length() > 0
stack == null || stack.mStackId != DOCKED_STACK_ID
public class XpathRegressionJavadocVariableTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"6:9: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS" + "/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
ReplicationList.class
saveStatusLabel != null && storageManager != null
info.getGroupIdLevel1(mContext.getOpPackageName())
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
dynamicType.getLoaded().getDeclaredConstructor()
return true; 
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
paramType.getSimpleName()
Exception e
mainFile.getExecPathString()
serverSocket == null || !serverSocket.isBound()
g("enum")
delegate.tokenize(token,regex,group)
selenium.click("//li[4]/span/a/span")
CONNECTION_TIMEOUT_SECONDS=60
next.getLabels().size(1)
type.getDeclaredConstructor()
telecomManager != null && !mHandleVolumeKeysInWM
pos + toFind.length() <= limit
new Interval(startTime,endTime,ISOChronology.getInstanceUTC())
Locale.getDefault().getLanguage()
temp_descs.get(j)
selenium.isElementPresent("link=Control Panel")
_typeSettingsProperties.toString()
type.getDeclaredConstructor()
getProperties().requestCacheEnabled()
template.isBuiltin()
Float.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
from("direct:c").delay(1000)
showScopeSettings(xpe,true)
x <= maxX
input.size(0)
db.getQueryFields(sNewSQL,param,info)
headers.getCommand()
statistics.addGetTimeNanos(System.nanoTime() - start)
return false; 
d < 0.025f
mUserPaddingStart > 0
localLOGV || false
mSelectPhotoView.getSelectFiles() != null && mSelectPhotoView.getSelectFiles().size() > 0
service.cancelMissedCallsNotification(mContext.getOpPackageName())
Thread.sleep(1000)
tok[3]
t.equalsIgnoreCase(type)
logger.debug("gave up waiting for query reply from device {}",m_address)
GRADIENT_SCRIM_ALPHA=0.45f
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Super extra cool this annotation!!!")
new DigestOutputStream(mBase64OutputStream,digest)
loaded.getLoaded().getDeclaredConstructor()
JavaConversions.asJavaIterable(logManager.allLogs())
dialog.dismiss()
new SimpleAttributeDefinition("ha",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,true)
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mSyncStatus.valueAt(i)
group != null && this == group.mInternalConnection
excludesPattern == null || requestURI == null
writeRepeatedSFixed64Impl(id,val)
enableRefreshTime=true
Mono.subscriberContext()
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
"Surface(native-token=" + mSurfaceControl + ")"
Boolean.parseBoolean(attrValue)
warningBytes > limitBytes && limitBytes != LIMIT_DISABLED
selenium.isElementPresent("link=Control Panel")
/**   * Indicates that all Facebook users are able to see posts made by the application.  */ EVERYONE(NativeProtocol.AUDIENCE_EVERYONE)
Long.parseLong(val)
displayContent.getDockedStackVisibleForUserLocked()
plugin.processPayment(account.getId(),directPaymentId,account.getPaymentMethodId(),amount,currency,properties,callContext)
client.getVertx().setTimer(1000,id -> checkExpired())
Slog.d(TAG,"Hardware Activity-Recognition not supported.")
Simple.forClass(Runtime.NoneType.class)
telephony.isRadioOn(getOpPackageName())
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false)
mAccountStore.hasAccessToken()
TIMEOUT_SECONDS=20
T actor
constructors.length > 0 && list != null
new StringBuilder(560)
getPreferenceStore()
Slog.w(TAG,"Invalid wallpaper data")
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(mAm.mContext,TAG,pw)
assetUri.getAssetName().toLowerCase()
new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies")
node.getLocalName()
connectPanDeviceNative(objectPath,"nap")
LOG.info("touchbar-server isn't running, skip nst loading")
mAdapter != null && mDataSetObserver != null
log.warn("Couldn't find style: " + styleId)
into.get(j)
Files.deleteIfExists(file.toPath())
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
column.length > -1 && !column.isPrimaryKeyAutoIncrement
order.getSide().equalsIgnoreCase("buy")
range.getEndOffset()
getService().animateCollapseNotifications()
getSonicResourceCachePath()
new Paint()
intervalFraction * (nextValue - prevValue)
error.getMessage()
@Override public final DivideByOnConditionStep orExists(Select<?> select){   return or(exists(select)); } 
fileContentBag == null
stmt.bind()
logger.warn("Cannot parse " + str + " using 0 minutes")
log.debug("BouncyCastle not registered, using the default JCE provider")
size=100
file.getFile()
mNextNonWakeupDeliveryTime < nowELAPSED
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true,false)
parsedResult.getType()
m.mul(beta1)
store.setConfigFile(usersFile)
qryCfg != null && ccfg.getTypeMetadata() != null
Theme.fromJSONV1_2(object)
request.getPathInfo()
literalValue != null && literalValue.getElementList().size() > 1
annotationHolder.createWarningAnnotation(expression,"Cannot resolve target pattern")
getIEuiccController().getEid(mCardId,mContext.getOpPackageName())
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
!"".equals(callRingtone.canPlayType("audio/mpeg;"))
m.size()
hz1.getLifecycleService().shutdown()
uncompressedProto.length < 1800000
Arrays.asList(mvn,"org.apache.maven.plugins:maven-archetype-plugin:2.2:generate",property("interactiveMode","false"),property("archetypeGroupId",archetype.groupId),property("archetypeArtifactId",archetype.artifactId),property("archetypeVersion",archetype.version),property("groupId",groupId),property("artifactId",artifactId),property("version",version),property("package",packageName),property("fabric8.profile",artifactId))
input.floatValue() != value.floatValue()
sectionStartTagToken.word()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
resourceTableStream.readFully(tableBytes,0,(int)alignedSize)
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post)
Optional.ofNullable(((IndicesRequest)message).indices())
WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
Arrays.binarySearch(vipAddresses,key.getName()) >= 0
ImmutableList<Arg>
holder.getListener().onCaptureSequenceAborted(CameraDeviceImpl.this,requestId,lastFrameNumber)
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,true)
!ResultSetUtils.isServerSideFiltering(controller) || !controller.isHasMoreData()
update.getName()
mPPS != null && mSPS != null
SVID_SHIFT_WIDTH=8
new ArrayList<>(data.size())
new Paint(Paint.ANTI_ALIAS_FLAG)
OutOfCapacityException e
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER,UserManager.DISALLOW_ADD_MANAGED_PROFILE)
Math.max(1,amount)
telephony.isRinging(getOpPackageName())
res.setStopThread(true)
si.deliveryCount > 1
selenium.isElementPresent("link=Control Panel")
this.rightLabel
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
DataBufferUtils.read(channel,this.bufferFactory,3)
media != null && media.getMediaType() == MediaType.AUDIO
reader.maxDoc()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
curLocation != null && curlatLng != null
Exception e
mActiveAgents.remove(info)
getParents(directory,owner).find(dir -> Comparing.equal(element,dir))
Localization.menuTitle("Quality")
getCluster().getDescription().getAny()
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
n <= k && i > 0
spoon.addChefGraph(newJobMeta)
audioSink.getId()
id=10864
value.toLowerCase().startsWith(constraintLowerCase)
CLOSE_TIMEOUT=1000
Log.w(TAG,e.getMessage(),e)
mResolver.stop()
widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST
generator.generate(signedByKeyPair.getPrivate())
shouldPause.or(this::shouldPauseOnTargetNodeJobsCounter)
new AnalyzedToken(word,currTag,lemma,pos)
LOG.info(title + "; " + message)
visitStatement(node,context)
assertEquals(input.getFieldCount(),4)
new IllegalArgumentException("unable to find any shards to explain [" + request + "] in the routing table")
Utils.convertDpToPixel(dataSet.getBarBorderWidth())
super.reopen()
ApplicationManager.getApplication().getMessageBus().connect(this)
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     if (!Disposer.isDisposed(myUi)) {       myUi.setDataPack(dataPack);       myProject.getMessageBus().syncPublisher(VcsLogDataHolder.REFRESH_COMPLETED).refresh(dataPack);     }   } } )
i < totalReplyTo
endpointA.expectedBodiesReceivedInAnyOrder("A blue car!","A blue car, again!")
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
i < 5
cache.removeAll(new HashSet<>(keys))
Log.w(mTag,"Adjusting remote volume without a controller!")
redeliveryDelayResult > maximumRedeliveryDelay
Throwable e
mService.setAppPolicy(UID_A,POLICY_NONE)
Jid.class
LOGGER.debug(e.getMessage(),e)
String message
DEBUG=false
protocolProvider.getProtocolDisplayName()
mInner.cancel()
context.getMainLooper()
selenium.isElementPresent("link=Control Panel")
constraintCache.getAllObjects(monitor,schema)
addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1)
mUiHandler.removeCallbacks(pae)
width - originX
selenium.isElementPresent("link=Control Panel")
new Paint()
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
Thread.sleep(1000)
clazz == null
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(3)
A a
new ObjectMapper().readerFor(Map.class)
graphVersion.incNodeAndEdgeVersion()
(registerCount & 0xFFFFFF00) != 0
artifactResolver.resolve(artifact,resolutionRepositories,localRepository)
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0c,0x02,0x06,0x00,0x00,0x00,0x02,0x0d,0x0a,0x02,0x00,0x00,0x6f,0x4e}))))
DELAY=60000
myEditor.getContentComponent()
private void _compareManifestFiles(File expected,File actual) throws IOException {   Manifest expectedManifest=new Manifest(new FileInputStream(expected));   Manifest actualManifest=new Manifest(new FileInputStream(actual));   Attributes expectedAttributes=expectedManifest.getMainAttributes();   Attributes actualAttributes=actualManifest.getMainAttributes();   for (  Object name : expectedAttributes.keySet()) {     if (_ignoredAttributes.contains(String.valueOf(name))) {       continue;     }     String expectedValue=(String)expectedAttributes.get(name);     String actualValue=(String)actualAttributes.get(name);     Assert.assertEquals(expectedValue,actualValue);   } } 
internalCluster().getDataNodeInstance(BlobIndicesService.class)
type != null
connection.pexpireAt(key,millisecondsTimestamp)
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
message.setHeader("Message-ID",cursor.getString(12))
@Nullable
case 6: 
AudioSystem.isMicrophoneMuted()
isGreaterOrEqual(platformVersion,M)
Log_OC.e(TAG,"Incorrect action sent " + intent.getAction())
config.getOrcStreamBufferSize()
selenium.isElementPresent("link=Control Panel")
a.willChangeBounds()
product.encode()
str.toLowerCase(Locale.ENGLISH)
AbstractBootstrap<ServerBootstrap,ServerChannel>
logger.debug("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
new ShowArticleOnTouchListener("feature_articles/about.html",getActivity(),version)
stall_till_cloudsize(5)
typeSettingsProperties.toString()
TimeUnit.SECONDS.toMillis(4)
f * w * f* h
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
_paginator.concatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
mService.removeNetwork(netId)
logger.debug("{}: Blocks waiting to be proceed: lastBlock.number: [{}]",name,blocks.get(blocks.size() - 1).getNumber())
link.next(ACTIVE_STATE,ALL_STATES)
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
TimeUnit.MILLISECONDS.toMillis(1000)
mMccStr == null
mGnssCallback != null
nativeDraw(canvas,color,extras,false)
V extends Identifier
this.convertLocalToSceneCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
request == null
addr.intValueSafe()
items[18]
synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
matrix != null && applyMatrix
mProfileCursor == null || mProfileCursor.getCount() == 0
_constructor.newInstance(0,0,1,StringPool.BLANK,StringPool.BLANK,StringPool.BLANK)
public class ParseTest extends BaseParseTestCase2 {   public void test1() throws Throwable {     myFixture.testHighlighting("test1.regexp");   }   public void test2() throws Throwable {     myFixture.testHighlighting("test2.regexp");   }   public void test3() throws Throwable {     myFixture.testHighlighting("test3.regexp");   }   public void test4() throws Throwable {     myFixture.testHighlighting("test4.regexp");   } } 
lines[i].length() >= cutWidth
RECENT_SKETCHES_MAX_SIZE=10
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
c.close()
origin <= other
Assert.assertTrue("Test output points to null",input.size() > 1)
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
new ArrayList<Wallet>(5)
LOG.debug("Couldn't run process with PTY",t,logContent)
TestEmployeeTable.class.getSimpleName()
from("direct:b").delay(1000)
!mQuietEnable
HybridDecryptWrapper.class
logger.isInfoEnabled()
doConfigureRemote(fork)
name.equals("getSimOperatorName") || name.equals("gsm.operator.alpha")
mask.isColumnVectorOrScalar()
doInvoke(args.first(),(args=args.rest()).first(),args.rest())
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
10 * 1000
mCurrentPage == newPageIndex
@Alive protected AllocatableValue deltaValue; 
Object[]
specWidthMode == MeasureSpec.EXACTLY || specWidthMode == MeasureSpec.AT_MOST
size=10.0f
fieldAnnotations != null
loadScriptByName(scriptName,groovyLoader)
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
ssid == null || !SSID_PATTERN.matcher(ssid).matches()
loaded.getLoaded().getDeclaredConstructor()
assetDisplayPageEntry.getLayoutPageTemplateEntryId()
fragmentEntryPersistence.findByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
assertLeftRightCategory(7,category2a)
PortalWebResourcesUtil.getPathLastModified(path,theme.getTimestamp())
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
Optional.ofNullable(authorizedPeers)
rematchAllNetworksAndRequests(networkAgent,oldScore)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
selenium.isElementPresent("link=Control Panel")
getConnection(URL)
false || DEBUG_WALLPAPER
Long.parseLong(args[ai])
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage")
new SpannedString(new CustomSpannable(first),true)
gl2.glGetProgramiv(program,GL2ES2.GL_INFO_LOG_LENGTH,val,0)
ViewConfiguration.getMultiPressTimeout()
{26,31}
is.readFully(data)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
Thread.currentThread().hashCode()
getObjectMapper().readerFor(clazz)
telephony.isOffhook(getOpPackageName())
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
new IllegalArgumentException(sm.getString("pojoMethodMapping.partialPong",m.getName(),m.getClass().getName()))
Locale.getDefault().toLanguageTag()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
PyDictLiteralExpression dict=(PyDictLiteralExpression)elementGenerator.createFromText(LanguageLevel.forElement(expression),PyExpressionStatement.class,"{" + stringBuilder.toString() + "}").getExpression(); 
new Tailer(new File(s),new LogTailerListener(),1000,false,true)
patientExitObs != null && patientExitObs.size() > 0
mapper.getTypeFactory().constructType(AuthConfig.class)
assertThat(System.currentTimeMillis() - startTime).isBetween(450L,600L)
implementationMethodDescriptors.build()
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize()
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out2p)
appearance.getFloat(attr,0)
dfa == null || dfa.states.isEmpty()
syncOperation.delay <= 0
processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
mParent == null
parser.getBoolean(KEY_SEND_TRON_LOG,false)
removeFlagFromCache(account,ids,flag)
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Exception t
testClass.getSimpleName()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
LOG.error("Cache flusher failed for entry " + fqe,ex)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
N node
stackIterator.remove()
accountHandle.getComponentName().flattenToString()
observable.timeout(waitTime,timeUnit).toBlocking()
Assert.assertEquals(1,map.size())
selenium.isElementPresent("link=Site Name")
generateFluentSetters()
assertEquals(11,definitions.size())
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
compressedProto.length < 380000
mDark == dark || mContractedChild == null
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
sendResourcesChangedBroadcast(true,true,pkgList,uidArray,null)
hashSymbols.values()
Assert.assertEquals(8,resources.size())
sampleFactory.getDeclaredConstructor()
result3.getMatches()
loaded.getLoaded().getDeclaredConstructor()
Float.parseFloat(encoding.substring(equalsPos + 1))
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)
new ModelNode(40)
FileTypeIdIndexer indexer
startPoint != null && endPoint != null
assertTrue(voyageReport.has("onboardCargos"))
!isBottomRightVisible
assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())
LinkageError e
return false; 
ServiceContextThreadLocal.getServiceContext()
broadcasterFactoryClassName != null && broadcasterFactory == null
mAnswer.setBackground(null)
this.messageService.fluxPreAuthorizeBeanFindById(2L).subscriberContext(withAdmin)
mv.visitAnnotation(Type.getDescriptor(NotNull.class),false)
30 * 60 * 1000L
intervalFraction * (nextValue - prevValue)
user.getActualCompanyId()
assertPhoneNumberNotEqual("123123","0123123",false)
file == null || beforeDir == null || afterDir == null
dataSource.setSoftMinEvictableIdleTimeMillis(Long.parseLong(getConnectionAge()))
AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true,false)
crPluggableScmMaterial.getFilterIgnores()
RecentsActivity.EVENT_BUS_PRIORITY + 2
logger.warn("Field sorting failed!")
StreamException se
new SAXException(e.getMessage(),e)
showStatusChangedInChat=false
logger.trace("Error while matching regex [" + matched + "] for string ["+ matcher+ "] "+ pse.getMessage())
providers.size() > 0
convert(connection.getRedisClient().getAddr())
assertEquals(0.0,biaOp.currentResult().doubleValue(),1e-1)
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
inputPath.toFile()
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
LOG.d(TAG,"Incoming Result")
Exception e
DEBUG=false
props.getProperty("exporter","com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter")
line.startsWith(StringPool.TAB + "public abstract class ") || line.startsWith(StringPool.TAB + "public class ") || line.startsWith(StringPool.TAB + "public enum")
deleteAction.delete(markerFile)
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
user.getHome(user.getLocation())
Thread.sleep(2000)
mClearPaint.setColor(0x0000ff00)
config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
innerClass.addConstructor(ACC_PUBLIC,new Parameter[0],null,null)
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
mExpandedDialog != null && mExpandedParams != null
selenium.isElementPresent("link=Control Panel")
mono.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
logger.debug("Cannot handle command ({})",e.getMessage())
doInvoke(args)
CompilationAlarm.trackCompilationPeriod(options)
new Paint()
t.replace(R.id.frame,new SampleListFragment())
guiResource.getImageSlaveTree()
id=10863
Throwable ex
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
account.getId()
/**   * Reads next record from input  */ public String read() throws Exception {   return input[index++]; } 
new JobMeta(space,(space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,metaStore,null)
i.getTouchIconUrl() == null
new CopyableValueComparator(sortOrderAscending,type)
logger.warn("{} failed to send failure [{}] while failing shard [{}]",channelThrowable,request.shardRouting.shardId(),t,request.shardRouting)
request.getRelaxLocality() == true
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
JavaModuleType.getModuleType().modifyProjectTypeStep(settingsStep,moduleBuilder)
new IllegalArgumentException("permission cannot be null or empty")
new StandardTypeConverter(conversionService)
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
_connector.getResponse("GET /foo HTTP/1.0\n\n")
(CachedConstructor)chooseMethod("<init>",constructors,arguments,true)
return true; 
return false; 
Exception ex
responseRaw(p)
MethodNotFoundException.class
synchronized (mAuthorities) {   writeStatisticsLocked(); } 
PendingIntent.getBroadcastAsUser(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
loaded.getLoaded().getDeclaredConstructor()
PUSHING_SECTION(1)
appWindowToken == null || !appWindowToken.isVisible()
DownloaderIndexFromGoogleCode.getContent(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
return long_TYPE; 
new Location(resource,metadata)
"Error: Access with origin " + origin + " denied."
selenium.isElementPresent("link=Control Panel")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
assertPlanEquals(expectedPlan,actualPlan)
Throwable e
Cheese.class
localNodeData.dcLocalAddress.getHostAddress()
loaded.getLoaded().getDeclaredConstructor()
random.randomValues().nextBasicMultilingualPlaneTextArray()
StampFactory.declaredTrusted(type.getComponentType())
page.getLogicalSizeInBytes()
selenium.isElementPresent("link=Control Panel")
value.readUnsignedInteger(offset,size)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])
canonicalURLParts.length > 1
Long.toString(contentLength)
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
Math.sqrt(x[i] * y[i])
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
checkManageOrCreateUsersPermission("setupRestrictedProfile")
now >= deadline
traceElements.size()
a.getLayoutDimension(R.styleable.BootstrapButton_android_layout_width,0)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new ArrayList<>(0)
Collections.sort(reflectionBackends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
pathParts[2] != null && pathParts[2].length() > 1
getLogger().warn("Unknown classloader: " + loader.getClass().getName())
"Missing " + gradlePropertiesPath
InputType.convolutionalFlat(height,width,channels)
Thread.sleep(1000)
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
countNewlines(fragment) + 2
addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1)
Assert.assertNotNull(ex.getCause())
loaded.getLoaded().getDeclaredConstructor()
new Message("XML_STREAM_EXC",LOG,e.getMessage())
kbArticleVersion.setPriority(priority)
xfrm.getExt().getCy()
loaded.getLoaded().getDeclaredConstructor()
client.getLocalPlayer().getInteracting().getName().contains(FISHING_SPOT)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)
Collection<String>
pkgs.get(j)
mCurrentDate.get(Calendar.MONTH) != month
(shape != LINES) && (shape != LINE_STRIP) && (shape != TRIANGLES)
replyMsg.toString().getBytes()
j < inputStream.getGroupingFields().getKeysCount()
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
mBatteryStatus=BATTERY_STATUS_UNKNOWN
new Paint(Paint.ANTI_ALIAS_FLAG)
myDetachIsDefault
behindFraction * GRADIENT_SCRIM_ALPHA_BUSY
myStartupManager.runWhenProjectIsInitialized(new Runnable(){   public void run(){     runnable.run();   } } )
getSupportActionBar()
Thread.sleep(100)
new CompositeException(t,e)
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
output.contains("BUILD FAILED") || output.contains("FAILURE: Build failed with an exception.") || error.contains("BUILD FAILED")
new SimpleMongoDbFactory(mongo(),getDatabaseName(),credentials)
Exception ex
pk.getColumnNameInSql()
from >= to
Math.max(o.outWidth / targetWidth,o.outHeight / targetHeight)
mPanProfile.isProfileReady()
staticColumns.values()
toolchainInfo != null
PreferenceManager.instantVideoUploadEnabled(context)
DummyObject t
in.readVLong()
volume.getMtpReserveSpace() * 1024L * 1024L
Files.deleteIfExists(file.toPath())
origin >= other
loaded.getLoaded().getDeclaredConstructor()
mSyncStatus.valueAt(i)
LOGGER.warn("Could not attach file",ex)
assertEquals("throughput",65.680128659,model.getThroughput(),0.0000001)
valueType.isIntegerNumber() || valueType.isChar()
mHandlerCaller == null
client.login(email,password,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
selenium.isElementPresent("link=Control Panel")
Exception e
internalCluster().getDataNodeInstance(SystemCollectSource.class)
new RemoveFileOperation(PATH_TO_DELETE,false,account,false,MainApp.getAppContext())
new UnsupportedOperationException("read-only")
new Paint()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
!useLayoutWithDefault() && (!hasValidSelection || mLastSelected != checkedPos) && mAlwaysButton != null
assertEquals(response.getResponseBody().length(),3873)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
assertEquals(builder.size(),1)
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).collect(Collectors.toList())
Number.class.isAssignableFrom(c) || c.isPrimitive()
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
logger.trace(evt.getReason())
resultSetView.getGridControl()
d.isObjectVisible(tag,val,zoom,type,nightMode)
mContext.sendBroadcast(intent)
new TimeProfiler(LOG).setLevelToDebug()
delayMs <= 0
Color.fromRGB(0xC354CD)
PreferenceManager.instantVideoUploadEnabled(this)
buffer.writeInt(TYPE_LEN)
deadline < now && deadline != 0
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
seconds * 1000L
counter > max
popupWindow.setContentWidth(menuWidth)
~PFLAG3_FITTING_SYSTEM_WINDOWS
Log.w(TAG,"read property failed, e:" + e)
setImageDrawable(icon,false)
Assert.assertFalse(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
client.getTransport()
metadata.getFaceRectangles()
Response example(String type,Object example); 
a.willChangeBounds()
new IllegalArgumentException("pAssetBasePath must end with '/' or be lenght zero.")
new ToolbarActionBar(toolbar)
partValue=total / partCount
BackupManagerServiceInterface svc=mService; 
origin.realComponent().doubleValue() > other
Arrays.asList(createBlock(0),createBlock(1),createBlock(2),createBlock(3),createBlock(4),createBlock(5),createBlock(6))
max() >= 32
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
logger.fine(String.format("emitting packet with ack id %d",ids))
addDaysAndCheckForCompletion(6,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE)
ParceledListSlice.emptyList()
expectedClockTime - 1000
testLogger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
new IndexResponse(shardId,"type","id" + i,randomInt(20),randomInt(),createdResponse)
mService.removeNetwork(netId,mContext.getOpPackageName())
private final ExecutorService compileQueue; 
getHandledPredicate()
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
Assert.assertEquals(120L,ownerCapsuleNew.getNetUsage())
assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
mUiHandler.removeCallbacks(pae)
localFileSystem.refreshAndFindFileByPath(keyMapsPath)
AndroidApkBuilder.execute(context.getProject(),resPackagePath,item.getClassesDexPath(),item.getSourceRoots(),externalLibPaths,item.getNativeLibsFolders(),finalPath,unsigned,item.mySdkPath)
loaded.getLoaded().getDeclaredConstructor()
Thread.sleep(1000)
mSyncStatus.valueAt(i)
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))
selenium.isElementPresent("link=Control Panel")
mSyncStatus.valueAt(i)
new ThingUID(WEMO_LIGHTSWITCH_TYPE_UID,device.getDetails().getSerialNumber())
L.log(Level.WARNING,"Audio clip {0} uses an external .resS file that doesn't exist!",name)
return true; 
clientPortAddress == null
configuration.getSuperTypeAnnotation()
e.printStackTrace(System.out)
cc.serialize()
this.getComponentCount()
index < 5
xStreamConfigurators.equals(_xStreamConfigurators)
NewIndexDescriptor descriptor
@Nullable
!disableBluetoothContactSharing
!thread.isOutgoing() || thread.isOutgoingCall()
!mPrefWriteAnswers
log.error("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
blog.getLocalTableBlogId()
subCursor.getString(COLUMN_NAME)
new ConcurrentHashMap<String,Object>(256)
private Long version; 
new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)
sm.getString("contextConfig.fixDocBase",context.getPath())
Timber.i("Creating SAVING_DIALOG")
res + _bias
mWidth - mMinWidth
inform == null && databaseMeta.getDatabaseType() != DatabaseMeta.TYPE_DATABASE_MSSQL
prefs.getInt(ACRA.PREF_LAST_VERSION_NR,0)
myBaseVersion=21
xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(543)
telephony.isOffhook(getOpPackageName())
offset > 32767
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_class_name"))
dataFormatModel.setDescription(row.get("description"))
height <= 0
intervalFraction * (nextValue - prevValue)
getGravity(objectId,gravity)
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER,UserManager.DISALLOW_ADD_MANAGED_PROFILE)
data.getTestPassed()
new S_Command("00FE30",1,20.0)
/**   * The upper value in the range.  * @return the upper value in the range  */ T getTo(); 
items[i].getValue("")
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
Exception e
new Max()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION,false)
rsWrap.getMobFileCacheMissCount()
selenium.isElementPresent("link=Control Panel")
metadata.getFaceRectangles()
getRequestParameters()
TextSecureCommunicationFactory.createManager(context,e164number,password)
mOverlay != null && mBottomOverlay != null && mRotation != RotationUtils.getExactRotation(mContext)
this.httpHandler.handle(request,response).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
public Long getId(){   return id; } 
renderingAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
enabled=true
nodeEngine.getClusterService()
impl._handler_method.getName()
expr.or(right)
queue.notifyAll()
w1.getGradient(target,(label - 1),this.alpha)
LanguageExtensionPoint<CompletionConfidence>
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
"ppc64".equals(arch) || "ppc64le".equals(arch) || "aarch64".equals(arch)
args.length != 2
context.getOpPackageName()
assertEquals(SNAPPY_CODEC,write.getCodec().toString())
msg.obj != mSmHandlerObj
readSync.notifyAll()
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
mAppToken.isVisible()
msg.getHistoryRef().getHistoryType()
configuration.copy()
traces.remove()
_log.warn(ioe,ioe)
Thread.sleep(1000)
Integer.valueOf(args.get(2))
new IOException("should execute connector.connect() first")
arr.size(oi) != 1 && !isVector(arr.shape())
InternalDecorator.this.isFocused()
assertEquals(11,definitions.size())
mAuthorities.valueAt(i)
CONNECTION_TIMEOUT=30000
properties.containsKey(STRING_RECENT_SEARCHES)
e.getMessage()
userRecord != null && userRecord.mClientRecords != null
sampleFactory.getDeclaredConstructor()
new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
rematchAllNetworksAndRequests(networkAgent,oldScore)
dockedBounds.top - dockDividerWidth
new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(SessionState state) -> {   if (state == SessionState.SESSION_VALID) {     s.release();   } } ,null)
InputStream input=new BufferedInputStream(new FileInputStream(file)); 
@Override public CDATA detach(){   throw ImmutableElement.immutableError(this); } 
senders == SendersEnum.both || senders == null
CONSTELLATION_TYPE_SHIFT_WIDTH=4
new ObjectMapper().readerFor(DiskBalancerWorkItem.class)
selenium.isElementPresent("link=Control Panel")
DescriptorRenderer.TEXT.renderTypeWithShortNames(getActualParameterType(descriptor))
mBindingServices.isEmpty()
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
log.debug("No slayer task for {} in the Task database",taskName)
p.size()
myUnqualifiedOrLocalResolve && localProcessor.processingEncounteredAnyTypeAccess()
mOuterRadius * 0.9f
BuildAndDecodeJarTest.class
appearance.getInt(attr,0)
Exception e
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
new SystemVibrator(context)
private final ExecutionHandler executionHandler; 
drivers.keySet()
type.getDeclaredConstructor()
0 != mUnwantedNetworkCapabilities
verify(mock)
new Setting<>("repositories.s3.secret_key",CLOUD_S3.SECRET_SETTING,Function.identity(),Property.NodeScope,Property.Filtered)
client.get().uri("/").exchange().expectStatus().isOk().expectBody(String.class)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
Log.warn("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
localPort == 0 && platform != null
pubnub.unsubscribe(channel)
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
mBottomRightStrip=drawable
-height
64 * 1024
rewrite == null
sep < 0 || sep > j
fileIds == null || fileIds.isEmpty()
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:10500}")
Assert.assertEquals(6,latch.getCount())
vector.getValue(1)
view.addCallback(listener.callback)
maxSize < (used / 1024 / 1024)
selenium.click("//li[4]/span/a/span")
new PartialEscapeAnalysisPhase(null,runtime(),assumptions,false)
noClasses.get() && myBC.getCompilerOptions().getFilesToIncludeInSWC().isEmpty() && !Utils.IS_TEST_MODE
mListener.getConnectionId() != -1 && request.mConnectionID != null
parser.nextText()
mCryptoPerformanceMap.get(userId)
engine.execute(query).dumpToString()
timeout=120000
selenium.isElementPresent("link=Control Panel")
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis)
log.info("Not found",e)
child.getMeasuredWidth()
case 2: 
ArrayBlockingQueue<BodyChunk>
parcelableClass.dotclass()
childAttributes != null
assertThat(o.takeNext()).isNotNull()
"null".equals(value) || value == null
externalDependency.resolve(configuration.isTransitive())
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
new WSSecHeader(actor,mustUnderstand,saaj.getSOAPPart())
dst.limit()
resolver.acquireUnstableContentProviderClient(uri)
note == null || mAddNote
writer.flush()
times(5)
Throwable e
proxyHTTPSPort.getText()
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.keywords"))
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
new TrustException("ENCRYPTED_KEY_ERROR",e,LOG)
new ElasticsearchIllegalStateException("search_type [" + searchType + "] not supported")
uuid.replace("-","").substring(0,7)
createAggregator(aggregationBuilder,indexSearcher,fieldType)
level >= 95
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
FloatList list
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
imeWin.getFrameLw()
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()),type.isLob())
new RuntimeException("Failed to serialize object: " + object.toString(),e)
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))
!sDisplayAnswer || !getConfigForCurrentCard().has("replayq") || getConfigForCurrentCard().getBoolean("replayq")
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
multipleTopologyChangeWorker(TOP_CHANGE_THREAD_CNT)
selenium.isElementPresent("link=Control Panel")
input.getTargetStepDefinitions()
ReactiveHelper.schedule(runnable,"Multicast next step")
getFirstWindowIndexInSource(sourceIndex)
AuditManager.class
document.addNumber("size",dlFileEntry.getSize())
System.arraycopy(points,0,temp,0,pointCount)
origin.realComponent().doubleValue() <= other
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
_typeSettingsProperties.toString()
Trans != NO_TRANSPOSE
LOG.error(e.getMessage(),e)
shard.idCache().onRemoval(readerCache.sizeInBytes())
mock.setResultWaitTime(4000)
close.setVisibilityImmediate(removable ? VISIBLE : GONE)
interpreterSetting.getGroup()
replace(str,0,searchStr,replacement,true)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
data.position()
new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage,entry.cache)
result == null && exception != null
key.isInstance(v)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(reindex)
new File(EXPORT_DIR).mkdirs()
mGnssCallback != null
Expression.eq("searchable",searchable)
false || mSpew
getOverrideConfiguration()
atlasFile.name()
longValue() & 0xFFFF
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao,false)
is(true)
new Field(name,DateField.dateToString(value),true,true,false)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,1)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
Simple.forClass(SkylarkList.class)
generateFluentSetters()
mSaveToDiskTask.getStatus()
return type; 
OCDirId >= 0
Helpers.exec(j4p,"setProfileFeatures(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
DiagnosticFactory2<JetNamedDeclaration,CallableMemberDescriptor,DeclarationDescriptor>
mSeekBar.setProgress(mLastProgress > -1 ? mLastProgress : mOriginalStreamVolume,true)
Map<RealmObject,RealmObject>
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
@NonNull
Assert.assertEquals(46,classes.size())
LinkedHashSet<>
lowers != null
Element.F64_2(mRS)
l.maxCpus(lic.maxCpus())
qp.isExclusiveMaximum()
Math.max(mXAxis.mAxisMinimum,pos.y)
logger.info("started [{}] instances with [{}] stage=prod tag",nodes,prodInstances)
result == JOptionPane.NO_OPTION || result == JOptionPane.CLOSED_OPTION
!externalEditCheckInterval_.hasElapsed()
IndexReader.open(benchmark.getRunData().getDirectory())
CompletableFuture<Void>
layerType != LAYER_TYPE_SOFTWARE
Transaction g
mUserPaddingEnd >= 0
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
PrintAttributes.enforceValidDuplexMode(currentMode)
r.scheduleConfigurationChanged(taskConfig,true)
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,amount,razberryLimit)
am.getRecentTasks(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE)
DomAnchor<DomElement>
mSettingsButton != null && !mHasSettingsPanel
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
executionStats.getStartedSplits()
batteryService.getBatteryLevelLow()
hintedMessage.getMessageId()
selenium.isElementPresent("link=Control Panel")
Slog.e(TAG,sb.toString())
Throwable e
startActivity(in)
new IllegalArgumentException(String.format("A type named %s does not exist. Make sure it is a canonical reference.",element))
cache(1)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
JSInjectionController.getConcatenationText(value)
font != null && foreground != null
maxLength > 0 && maxLength < Integer.MAX_VALUE
selConnection > 0 && activeFile != null
commentsListView.smoothScrollToPosition(0)
resources.getDimensionPixelSize(R.dimen.close_handle_height)
sizeNeeded > items.length
selenium.isElementPresent("link=Control Panel")
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0 && type == ActionMode.TYPE_PRIMARY
endsWith("/home/source")
minor == TCN_RECOMMENDED_MIN
K
customer.getId()
fileService.getResource(getResourcePath(versionedBundleName))
/**   * Create the  {@link RxBleClientMock} instance using the configured values.  */ public RxBleDevice build(){   if (this.rssi == -1)   throw new IllegalStateException("Rssi is required. DeviceBuilder#rssi should be called.");   if (this.deviceMacAddress == null)   throw new IllegalStateException("DeviceMacAddress required." + " DeviceBuilder#deviceMacAddress should be called.");   if (this.scanRecord == null)   throw new IllegalStateException("ScanRecord required. DeviceBuilder#scanRecord should be called.");   RxBleDeviceMock rxBleDeviceMock=new RxBleDeviceMock(deviceName,deviceMacAddress,scanRecord,rssi,rxBleDeviceServices,characteristicNotificationSources);   for (  BluetoothGattService service : rxBleDeviceServices.getBluetoothGattServices()) {     rxBleDeviceMock.addAdvertisedUUID(service.getUuid());   }   return rxBleDeviceMock; } 
service.asBinder().pingBinder()
Throwable e
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage),false)
selenium.isElementPresent("link=Control Panel")
DirectoryReader newReader; 
logger.debug("There is no alarm running on {}",getUDN())
myType.isValid()
{2,1}
Timber.i("Creating PROGRESS_DIALOG")
getService().animateCollapseNotifications()
mAuthorities.valueAt(i)
mc.theWorld.getScoreboard().getPlayersTeam(player.name)
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
super.dispatchTouchEvent(cancel)
VMRuntime.is64BitInstructionSet(getPreferredInstructionSet())
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
part.getPartitionPath()
Observable.concatEager(_getCachedData(),_getFreshData())
isActive() && mInfo != null
return false; 
return false; 
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
getStorage().getCodeHash(codeAddress)
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")|| scheme.equalsIgnoreCase("nfc")
DEBUG_FOCUS=false
MetricsLogger.histogram(getContext(),DEMO_SESSION_DURATION,sessionDuration)
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
instruction.getWideLiteral()
SamplingProfiler.newThreadGroupThreadSet(group)
!mIsInitialized
public TextContainer getUri(){   return uri; } 
SIZE_V1=17
this.mWidth != this.mBaseWidth || this.mHeight != this.mBaseHeight
metadataDao.persist(metadata)
SLTestTruffleBoundary01BuiltinFactory.getInstance()
mAppToken.isVisible()
error || status == SocketStatus.STOP
getAncestors()
loaded.getLoaded().getDeclaredConstructor()
assertEquals(5,outs.size())
assertThat(response.content()).contains("\"Compute Engine Database Connection\":","\"Compute Engine State\":","\"Compute Engine Tasks\":","\"Elasticsearch\":","\"State\":\"GREEN\"")
new RuntimeException(e)
subCursor.getString(COLUMN_NAME)
{1,0,0,0,0,0,0,0,0,0}
new Dimension(550,350)
logger.info(String.format("Submitting %s metric for metric emission pool",metric.getName()))
Slog.w(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
rhs == null || !rhs.isValid()
JavaSdkImpl.getMockJdk17("java 1.5")
mState.value || Prefs.getBoolean(mContext,Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN,false)
BackgroundTask.wrap(() -> renderPage(page))
MOD_NUM=10000
randomIntBetween(11,50)
randomNonNegativeLong()
LOG.warn("Failed to add Connection id={}, clientId={} due to {}",info.getConnectionId(),clientId,e.getLocalizedMessage(),e)
myNodeComparator.compare(node,node1) > 0 || isLoadingNode(node1)
final PsiExpression expression=(PsiExpression)location; 
type.getDeclaredConstructor()
count < 0
LOGGER.debug("Following side pane could not be found: " + componentName,e)
sp[Z] <= zbuffer[offset + x]
public static TutorialSupportFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
cache.remove(r)
Slog.w(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
new ProtoFile("waffles.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
doubleVal(doc)
nameTextField.getText()
compose(f -> f.map(new Elapsed<>()))
convert31XToMeters(xB,xA)
return true; 
_typeSettingsProperties.toString()
modulePath.split(File.pathSeparator)[0]
clientConfig.property(ClientProperties.READ_TIMEOUT,2000)
new MediaFormat(MimeTypes.APPLICATION_ID3,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,null)
postfix.equals("id")
toBeContained == null || !toBeContained.initialized
bottomLeft.addPlaceholder(DatabaseBrowserView.VIEW_ID)
blockChainSummary.size() == 1 && blockChainSummary.get(0).getNum() == 0
jobLoader.findJobEntriesWithID(JobMeta.STRING_SPECIAL)
tracesDir.mkdirs()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
wrapper == null || !wrapper.isShowing()
stage.compareTo(currentStage) < 0
WATCHDOG_TIMEOUT_MILLIS=2000
!mandatory
o instanceof IndexReader || o.getClass().getSimpleName().equals("SegmentCoreReaders")
selenium.isElementPresent("link=Control Panel")
region == null || !region.isValid()
post.setRequestHeader(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
mAppToken.isVisible()
old + 25
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
_mockSettingsLocatorHelper.getServerSettings("com.liferay.portal")
stepDone()
rootNode instanceof DBNDatabaseFolder
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,15)
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
new AutoValue_RegistrationResponse(configuration,configurationOverride,actions,assignments)
new IndexWriter(dir1,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
!StringUtil.endsWithChar(testDataPath,File.separatorChar)
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Boolean.parseBoolean(resizeableStr)
/**   * Gets the value of the val property.  * @return possible object is {@link String }  */ public String getVal(){   return val; } 
focused == null || focused == root
decoder.decode(null,null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf2)))
IllegalDataException.class
DEFAULT_LABEL_MIPMAP=false
tableCache.getObject(monitor,this,childName)
new IllegalStateException("Advertising can't be both connectable and anonymous")
args[0].length() == 51 || args[0].length() == 52
StackHelper.isMatchingItem(reqStk,invStk,true,true)
pathWrapper.setWaypoints(points)
LOCAL_OPTION.getLongOpt()
mapper.getTypeFactory().constructType(InspectExecResponse.class)
isRunsOutsidePortal(absolutePath) || fileName.endsWith("GetterUtil.java")
mPowerManager.isInteractive()
TokenSet.create(PyTokenTypes.STRING_LITERAL,PyElementTypes.STRING_LITERAL_EXPRESSION)
list.removeFirst()
new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
field.precision != null && field.scale == null
Mockito.any(ProducerRecord.class)
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false,runtimeOnlyFlags)
blog.getLocalTableBlogId()
field.getFieldInfo2()
getParents(directory,owner).find(dir -> Comparing.equal(element,dir.getVirtualFile()))
responseRaw(p)
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
Reflection.methodHandle(bigArrayField.getType(),"sizeOf")
SelectTimeZonePacificStandardTimeCPMATest.class
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_class_name"))
resolved instanceof PsiMember && PsiTreeUtil.isAncestor(myOuterClass,resolved,true) && becomesInaccessible(((PsiMember)resolved))
addContactButton.setPressedIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
BLOCK_INTENSITY_FACTOR=0.7f
selenium.isElementPresent("link=Control Panel")
new StreamWriterExecOutputHandle(outputStream,true)
Mockito.any(ProducerRecord.class)
mVibratorService.vibratePattern(null,new long[]{0},0,new Binder())
new String(bs3.toByteArray(),"UTF-8")
ZKMetadataProvider.getOfflineTableConfig(propertyStore,tableName)
element.isRoot()
m[M30]
new IOException(msg)
contract.getNewContract()
i >= speedBumpIndex
sum > 1
Matchers.<Map.Entry<String,String>>containsInAnyOrder(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
LOG.assertTrue(matcher2.matches(),"Cannot find closing </" + marker + ">")
@SqlQuery
return parsedAST; 
filter.setPageSize(1000)
jsonArray.toString(1)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME && proc.setProcState > ActivityManager.PROCESS_STATE_NONEXISTENT
ch.writeAndFlush(new LogEvent(null,-1,file.getAbsolutePath(),line))
LLVMArgNodeGen.create(2)
scanFlags & SCAN_NEW_INSTALL
intervalFraction * (nextValue - prevValue)
LOG.debug("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
Trans != NO_TRANSPOSE
saveLocalAttachmentTo(directory)
future.awaitUninterruptibly()
logger.debug("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
stopAllGrids()
V extends Identifier
e.toString()
(T)item
mBackgroundScaledBitmap == null
ViewWebContentAssignedToMyRolesDueDateTest.class
testLogger.info("[v] Secure sync completed")
asyncContext.currentAsyncTraceObject()
ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
mOuterRadius * 0.9f
e.toString()
limitOrder.getOriginalAmount()
service.setDomainEventNotifier(domainEventNotifier)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
DataStreamSink<OUT>
Preconditions.checkNotNull(pinnedInodes)
new RuntimeException()
this.totalBytesWritten+=b
return true; 
keyRowMeta.getString(two)
logger.fine("Creating extern file for exports")
line.endsWith("warning") || line.endsWith("warnings")
log.warn(notJava6.getMessage() + " .. trying RI.")
error == null && mEditPostActivityHook != null
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword())
ImmutableList.copyOf(result)
getActiveFgCall().getPhone().startDtmf(c)
server0.getStoreRepository().getStorageEngine(storeName)
mMccStr == null
intent.resolveType(getContentResolver())
expectedValue.equals(oldObject)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
(String)request.getAttribute("aui:form:useNamespace")
i < 3
endBounds.height()
MESSAGES.pathEntryNotFound(relativeTo)
serviceDataUuid == null || mServiceData == null
return false; 
ServerToClientMessage.instantiateMessage(makeChanges,DateUtilities.now())
log.info("jmeterthread.startearlier=true (see jmeter.properties)")
LOG.info("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
size() > this.capacity
shuffleWithNonExistentUuids(project1.uuid(),project3.uuid())
mWriteOwners != null && includingOwners
VersionNumber.parse(playVersion).getMicro()
t.equalsIgnoreCase(type)
config != Config.ARGB_8888 || colorSpace == ColorSpace.get(ColorSpace.Named.SRGB)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
case 6: 
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
mSyncStatus.valueAt(i)
ClassCastException e
super(pDuration,pFromValueA,pToValueA,pModiferListener); 
mListener.getConnectionId() != -1 && request.mConnectionID != null
style[j] instanceof WPImageSpan
FULFILLMENT_GROUP
initLocale || !mProcessesReady
_typeSettingsProperties.toString()
Context.getEncounterService().saveEncounter(encounter)
if (VDBG) log("returning Locked NetworkInfo"); 
ConstantNode.forConstant(newMethod.getEncoding(),tool.getMetaAccess())
mUndoBarHideListener.onUndoBarHide(mUndoToken == null)
addon.updateBuildingInfo()
getUserStateLocked(resolvedUserId)
mPowerManager.isInteractive()
conf.getRestBaseURL()
entity.func_189777_di() != ZombieType.NORMAL && entity.func_189777_di() != ZombieType.HUSK
store.unregisterMBean()
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
selenium.click("//li[4]/span/a/span")
service.getDomain().id()
@Path(PATH_RELATIONSHIP_INDEX_ID)
LOGGER.warning("Unable to load image using DDS loader!")
setImageDrawable(icon,false)
logger.debug("Cannot play track ({})",e.getMessage())
getJSDocType(cm,var)
private BigDecimal location; 
public abstract class AbstractHikariConfig implements HikariConfigMXBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty("hikaricp.configurationFile");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn("The connectionCustomizerClassName property has been deprecated and may be removed in a future release");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn("The connectionCustomizer property has been deprecated and may be removed in a future release");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException("connectionTimeout cannot be less than 1000ms");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException("validationTimeout cannot be less than 1000ms");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException("driverClassName specified class '" + driverClassName + "' could not be loaded",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException("idleTimeout cannot be negative");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn("The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.MetricRegistry");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException("maxPoolSize cannot be less than 1");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException("minimumIdle cannot be negative");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn("connectionCustomizationClass specified class '" + connectionCustomizerClassName + "' could not be loaded",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error("when specifying driverClassName, jdbcUrl must also be specified");       throw new IllegalStateException("when specifying driverClassName, jdbcUrl must also be specified");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error("both driverClassName and dataSourceClassName are specified, one or the other should be used");       throw new IllegalStateException("both driverClassName and dataSourceClassName are specified, one or the other should be used");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error("one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified");       throw new IllegalArgumentException("one of either dataSource or dataSourceClassName must be specified");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn("both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName="HikariPool-" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn("validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout.");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error("maxLifetime cannot be negative.");       throw new IllegalArgumentException("maxLifetime cannot be negative.");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn("maxLifetime is less than 30000ms, using default {}ms.",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn("idleTimeout is less than 10000ms, using default {}ms.",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn("idleTimeout is greater than maxLifetime, setting to maxLifetime.");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn("leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms.");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug("HikariCP pool {} configuration:",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if ("dataSourceProperties".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty("password","<masked>");           value=dsProps;         }         value=(prop.contains("password") ? "<masked>" : value);         LOGGER.debug((prop + "................................................").substring(0,32) + (value != null ? value : ""));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException("Exception copying HikariConfig state: " + e.getMessage(),e);         }       }     }   } } 
new StringBuilder(194)
tessellator.tessellatePolygon(true,mode == CLOSE,normalMode == NORMAL_MODE_AUTO)
DarkIconDispatcher.getTint(tintArea,mMobileActivity,tint)
node.getLifecycleService().shutdown()
waitUntilElement(feedbackText,"Feedback message should be present").is().visible()
Utility.isWifi(context)
(Number)resultList
loaded.getLoaded().getDeclaredConstructor()
centerButton(mButtonNegative)
sublistsProperty.get().stream()
createFromResourceStream(res,value,is,srcName,null)
out.getVersion().before(Version.V_7_0_0_alpha1)
isGreaterOrEqual(platformVersion,M)
ts.getJobId() == jobId
!condition.isEmpty()
commandExecutor.evalWriteAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,false)
UnsatisfiedLinkError ex
cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)
mSmallBatteryDevice ? 15 : 30
tracesDir.mkdirs()
assertEquals(0,responseBody.get("bucket_count"))
BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)
public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
usersFile.getPath()
status.isDir()
return DISABLED; 
new ArrayList<>(1)
compressed.limit()
super.endPass(n)
mFlags.get("debug")
isGreaterOrEqual(platformVersion,M)
dist <= bestdist
rowKeyColumnIO.writeColumnWithoutDictionary(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
"mvn:" + swaggerUiMavenGroupAndArtifact + "/"
_log.warn(ioe,ioe)
val == null || val.length() == 0
StorageProxy.cas(keyspace(),columnFamily(),key,clusteringPrefix,expected,updates,options.getSerialConsistency(),options.getConsistency())
DynamoDbDeploymentContextTableCache.class
DB_VERSION=2
Element.F64_2(mRS)
ModuleOrderEntry orderEntry
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null))
IndexReader.open(dir)
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
UIUtil.getParentOfType(JComboBox.class,c) != null || UIUtil.getParentOfType(JSpinner.class,c) != null
new String[13]
StringBuilder newKeys=new StringBuilder(); 
PostgreTableBase.class
Exception e
ListDataSource.unbounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
mBiometricUnlock.stop()
tileBox.getDensity()
new MapProducerCapabilities(false,false,false,true,null)
getService().animateCollapseNotifications()
subCursor.getString(COLUMN_VALUE)
stack.get(stack.size() - 3).longValueSafe()
mMccStr == null
response.get(ROLLED_BACK)
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,null,false,false)
selenium.click("//li[4]/span/a/span")
asList(DERBY,CUBRID,FIREBIRD,ORACLE,SQLSERVER,SQLITE,SYBASE)
GL.glGenTextures(n,toBuffer(textures,offset),0)
service.getDataStore().getEnsembleContainers()
LOG.warn(e)
counter > max
getConfig()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
HttpEntity.class.isAssignableFrom(parameterType)
TelephonyManager.getDefault().getCurrentPhoneType()
selenium.isElementPresent("link=Control Panel")
nextArg()
doesAddToastWindowRequireToken(attrs.packageName,callingUid,parentWindow)
lp.resolveLayoutDirection(layoutDirection)
expandableView.getIntrinsicHeight()
setterVisibility=Visibility.ANY
clusterService().localNode().getName()
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
selenium.isElementPresent("link=Control Panel")
Slog.w(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
c.getLiquid() == null || c.getLiquid().amount < c.getCapacity()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
file != null && file.isPhysical()
clipItem.coerceToText(mContext)
new RoutingControlAction(this,newPath,true,callback)
new HostAddress(host,port)
Map<String,Object>
scheduleRemoveStartingWindowLocked(wtoken)
event.getRawY()
mBatteryStatus=BATTERY_STATUS_UNKNOWN
UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_MTP) || UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_PTP)
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
GoPsiImplUtil.findTypeFromTypeRef(methodType.getTypeReferenceExpression())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").bold("#")
mAnswer.setBackground(null)
" firstActiveTime=" + firstActiveTime
result.getReceipt().getEnergyTotal()
temporaryFolder.newFolder()
viewHolder.getItemViewType() == TYPE_EDIT || viewHolder.getItemViewType() == TYPE_DIVIDER
adminService.createInstance(containerName,sshPort,rmiRegistryPort,rmiServerPort,null,jvmOptsBuilder.toString(),collectionAsString(features),featuresUrls)
adviced.getDeclaredConstructor()
this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD
initialCapacity > 1 << 30
containsString("cookieManagerShared")
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
DEFAULT_VERIFY_ENABLE=false
new IllegalStateException("Advertising can't be both connectable and scannable")
executor.execute(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
!Objects.equals(builtInVersion,configuredVersion)
(flags & Const.FLAG_FLOAT) != 0x0
this.controller.saveService(data2)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
_parms._sample_rate < 1 || _parms._sample_rate_per_class != null
logger.trace("using stable discover node UUIDs with seed: [{}]",seed)
scanFlags & SCAN_NEW_INSTALL
attribute == null || attribute.getMetaAttribute().isReadOnly()
LOG.info("writeToDisk == true but configFilename == null")
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
@Nullable
sourceHeight > 0
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,true)
julLogger.severe("Hello world")
oldFreeSpace >= 0
1
feedForward(true)
mRvc == null || !session.isActive()
deployOneTaskTestProcess()
Thread.sleep(1000)
new RoutingControlAction(this,newPath,true,callback)
mount("/ticket",TicketPage.class,"r","f")
curComp.equals(service)
flux.onErrorResume(ex -> Flux.error(getReadError(bodyParameter,ex)))
logger.debug("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
from("direct:start").transform(body().append(" World")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to("mock:foo").delay(1000)
UpgradeStepRegistrator.class
FilteredBatchServerViewProvider.class
new ServletException("non-HTTP request or response",e)
ctx.sendUpstream(e)
ConcurrentHashMap<VoiceRouter.VoiceMessageListener,Integer>
capturedWildcardType.getUpperBound(false)
!subscribers[i].queue.isEmpty()
logger.trace("AtmosphereResource {} is resuming",uuid())
readIdentifierWithSchema(schema.getName())
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
ThemeUtils.fontColor(getContext())
mCryptoPerformanceMap.get(userId)
cudnnSetConvolution2dDescriptor_v5(cudnnContext.convDesc,pad[0],pad[1],strides[0],strides[1],1,1,CUDNN_CROSS_CORRELATION,dataType)
logger.getLogger().warning("Failover took:" + (end - start) / 1000000 + "ms")
qux.getDeclaredConstructor()
((StringLiteral)literal).getValue()
GridCacheAdapter metaCache=getFieldValue(fs,"meta","metaCache"); 
partitionKey.getType().getName()
Field[]
Number rate
position == -1 || position >= itemsList.size()
new IncrementalIndexSegment(rtIndex,null)
"Unknown id: " + id
getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).findFirst()
getTestIgniteInstanceName(nodeCount() + servers + i)
Arrays.asList("Image","ProgressBar","ScrollView","Horizontal ScrollView","Dropdown Picker","Dialog Picker","Switch","Text","TouchableBounce","TouchableHighlight","TouchableOpacity","TouchableWithoutFeedback","Toolbar","TextInput","View","ScrollView Item (same id used for all items)")
onProgressUpdate(progress,max)
LOGGER.warn("Could not execute markEntries",ex)
r.curApp != null && r.curApp.curReceiver == r
getCustomInitBinderArgumentResolvers()
Pair<SimpleMatch,PsiElement>
-37.0f
JvmDeclarationOriginKt.OtherOriginFromPure(aClass,descriptor)
Map<IdeFrame,Object>
BeanMapper.mapList(books,BookDto.class)
new java.util.Date(System.currentTimeMillis() - 3600 * 24)
assumeTrue("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
selenium.isElementPresent("link=Control Panel")
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
sharedOptsCount.containsKey(thread)
mFiles.indexOf(file)
incomingMessage.getMessagePayloadByte(1)
productVersion.startsWith("9") || productVersion.startsWith("10") || productVersion.startsWith("11")
XmppStringUtils.parseBareJid(user)
externalViewRecordVersion == lastKnownZkVersion
assertEquals(avDegree,1.0)
wifiConfig == null || wifiConfig.isValid()
super.onStop()
mVectorState == null || mVectorState.mVPathRenderer == null
assertThat(pod).hasName(expectedId)
DEFAULT_PORT=1433
new LayerView(this,0x0f00ff00)
(Number)array[this.index]
entries == null || entries.length == 0
columnTypes[column] == INT || columnTypes[column] == CATEGORICAL
sharedElements.get(localName)
mStackScroller.getChildAtRawPosition(x,y)
standalone=false
new ObjectMapper().readerFor(Map.class)
mInner.cancel()
parameters.getFlashMode() == null && flashState
outLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
latch.await(10000,TimeUnit.MILLISECONDS)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)
shouldUsePool(bis)
fragmentEntryPersistence.countByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
selenium.isElementPresent("link=Control Panel")
endsWith("/home/source")
LOG.error("Failed to install vim keymap.\n" + e)
HashMap.class
hits3.length()
MapActivity.getMapActions()
fromLongClick && (mViewFlags & ENABLED_MASK) != ENABLED
node.set("persons",persons)
type.equals("document_library") || type.equals("image")
FieldAccess.forField(delegateField).read()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
Long.parseLong(timeString)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
tJvmGcDetailed.getJvmGcNewTime()
message + end
new Random()
decoderLayerSizes == null
paramType.getSimpleName()
new RastriginFunctionModel(10,conf)
externalMediaDir.getPath()
line.startsWith("//") || line.startsWith("--") || line.startsWith("#")|| line.startsWith("REM")|| line.startsWith("/*")|| line.startsWith("*")
final CharSequence subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo); 
format == DecodeFormat.ALWAYS_ARGB_8888 || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN
URL.encodeComponent(content)
mUiHandler.removeCallbacks(pae)
adapter.item(R.string.layer_recordings).selected(SHOW_RECORDINGS.get() ? 1 : 0).icons(R.drawable.ic_action_audio_dark,R.drawable.ic_action_audio_light).listen(listener).position(12)
Integer.parseInt(this.getOptional("kylin.restclient.connection.default-max-per-route","20"))
Locale.getDefault().toLanguageTag()
new BooleanPreference("map_vector_data",false,false)
op == ASSIGN || op == ASSIGNMENT_OPERATOR
new int[8573]
l.hasSensor(sensor) && l.removeSensor(sensor) == 0
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=false
new IndexWriter(indexDir,ANALYZER,!add,IndexWriter.MaxFieldLength.LIMITED)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
_connector.getResponse("METHOD /f" + ooo + " HTTP/1.0\n\n")
src.onTouchEvent(e)
MapsForgeTileSource.createFromFiles(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
index.getUUID()
db.activityDao().getByKey(dbSession,activityKey)
r.getUri().getPath()
j.hasNext()
input.getExecPath()
gavin.getStudentNumber()
odi.close()
Throwable e
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
profileManager.loadSettingsProfiles(settings)
/**   * Callback that is invoked <em>before</em> each test method has been invoked.  * @param context the current test extension context  */ void beforeEach(TestExtensionContext context) throws Exception ; 
myRegisteredPasses == null || psiFile == null
classNameLocalService.getClassNameId(rendererFactory.getClassName())
!mScreenOnEarly
Slog.e(TAG,sb.toString())
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) == PackageManager.PERMISSION_GRANTED
super.resolveLayoutDirection(layoutDirection)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
getTestName(false)
(a & 0xe0) == 0xc0
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
(Repository)ethereum.getRepository()
elementType == null || elementType == Object.class
getExitCode() != 0 || isTimeout()
assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)
StringUtil.isEmpty(name)
onDetachedFromWindows()
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
responseFilters.isEmpty()
mBuffer.remaining() >= toRead
T[]
lastFailureException instanceof SocketTimeoutException
cctx.toCacheObject(writeObj0)
properties.getProperty(protocol + ".extended")
scheduleRemoveStartingWindowLocked(wtoken)
throwable.getMessage()
fb.limit()
String.format("/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])",name,user.getName(),String.join(",",user.getRoles()))
String key
N node
modulePath.split(File.pathSeparator)[0]
mValues[8]
xml.halfOpenElement(IQ.QUERY_ELEMENT)
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
String getValueAsString(String dimension); 
DBG=false
(group == null) || !group.isActive()
order.getDosingInstructions()
return mIdleTimeMillis; 
loaded.getLoaded().getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
dir.mkdirs()
(Number)array[this.index]
request.getPrincipal()
cs[0].set(r,_createFrame.real_range * rng.nextDouble())
participantAddresses.get(2)
logError(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
ts.getJobId() == jobId
-909763073
generateFluentSetters()
MUCOwner iq=new MUCOwner(); 
i=1
events == null && this.calDavLoader != null
tracesDir.mkdirs()
_log.warn(ioe,ioe)
setValue(object,value.intValue())
Number.class.isAssignableFrom(c) || c.isPrimitive()
LOGGER.lifecycle(exception.apply().toString())
mDarkIntensity != DARK_INTENSITY_NOT_SET
routine != null && routine.handler().isForQuery()
LOG.warn("Could not append. Requesting close of wal",e)
loc == null
new Builder().setDuration(3000).setColor(android.R.color.holo_blue_bright)
mouse().alt().pressAt(1,1)
checkCall(receiver)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
node == null || v == node.view
deltaY <= 0
tag.getReferencedObjectId()
TYPEAHEAD_LOG.error(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
String changeList
return false; 
counter < max
ACTIVATION_CONFLICT
id >= EVENT_CODE_BY_ID.length
e.printStackTrace(System.out)
gl.marginWidth=5
new Paint(Paint.ANTI_ALIAS_FLAG)
showRecentApps(true,false)
PublisherPeek<T>
/**   * {@inheritDoc}   */ @Override public MapProperty clone(){   MapProperty prop=(MapProperty)super.clone();   prop.value=cloneMap();   return prop; } 
mf.getColumnNameInSql()
context.var("long",2)
/**   * Use this merge bean post processor for collection member removal tasks that should take place before the persistence layer is initialized. This would include removing class transformers for load time weaving, and the like. See {@link org.broadleafcommerce.common.extensibility.context.merge.AbstractRemoveBeanPostProcessor} for usage information.  * @see org.broadleafcommerce.common.extensibility.context.merge.AbstractRemoveBeanPostProcessor  * @author Jeff Fischer  */ public class EarlyStageRemoveBeanPostProcessor extends AbstractRemoveBeanPostProcessor implements PriorityOrdered {   protected int order=Integer.MIN_VALUE;   /**   * This is the priority order for this post processor and will determine when this processor is run in relation to other priority ordered processors (e.g.  {@link org.springframework.context.annotation.CommonAnnotationBeanPostProcessor}) The default value if Integer.MIN_VALUE.  */   @Override public int getOrder(){     return order;   }   /**   * This is the priority order for this post processor and will determine when this processor is run in relation to other priority ordered processors (e.g.  {@link org.springframework.context.annotation.CommonAnnotationBeanPostProcessor}) The default value if Integer.MIN_VALUE.  * @param order the priority ordering  */   public void setOrder(  int order){     this.order=order;   } } 
inStream.remaining()
Util.killAsync(ffmpegLoadLibraryAsyncTask) || Util.killAsync(ffmpegExecuteAsyncTask)
group != null && this == group.mInternalConnection
viewOutlineAlpha=1f
StringIndexKey key
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
getConnectTimeout()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default",e)
PortalPermissionUtil.check(getPermissionChecker(),ActionKeys.ADD_COMMUNITY)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
private void checkGroupHasCapacity(SchedulerGroup groupContext) throws OutOfCapacityException {   if (groupContext.numPending() >= maxPendingPerGroup && groupContext.totalReservedThreads() >= resourceManager.getTableThreadsHardLimit()) {     throw new OutOfCapacityError(String.format("SchedulerGroup %s is out of capacity. numPending: %d, maxPending: %d, reservedThreads: %d threadsHardLimit: %d",groupContext.name(),groupContext.numPending(),maxPendingPerGroup,groupContext.totalReservedThreads(),resourceManager.getTableThreadsHardLimit()));   } } 
mConnectionById.containsKey(callId)
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this,UserHandle.USER_ALL)
immediate=true
((EventFactHandle)((ObjectVariableContextEntry)context).left).getEndTimestamp()
new JedisClusterCommand<Set<String>>(connectionHandler,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } 
globalDisplay_.showHtmlFile(result_.getOutputFile())
drawable != mBackgroundDrawable || mBackgroundResource != 0
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK && data != null
Object[]
getViewAtRelativeIndex(1)
ONE_MINUS_DST_ALPHA(7)
doGetIsTypeCheckCallable(type)
PrivacyManager.getSettingBool(-mAppInfo.getUid(),PrivacyManager.cSettingOnDemand,false,false)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
checkResultByFile(expectedFile,psiFile,false)
platformVersion < M
i <= position + totalAddedItems
getExecutionException()
type.getDeclaredConstructor()
tracesDir.mkdirs()
mapper.setAttributePrefix("ROLE_")
focused == null || focused == root
logger.trace("Requsting URL {}",url)
event.getRawX()
Assert.hasText(this.key,"A Key is required so CasAuthenticationProvider can identify tokens it previously authenticated")
childQuerySpec.limit()
channel.getId()
createHandlerResult(c,principalFactory.createPrincipal(username,attributes))
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",DOUBLE)
numErrors != 0
logger.debug("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
orderUsingCustomerPayment || !cartHasTemporaryCreditCard
E edge
new GeocodeFarmGeocoder(null,null,0)
new WorldPoint(2914,3433,0)
Thread.sleep(1000)
DEBUG=false
addToSet(mVisibleTrackedIds,id)
Runnable t=new RunAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); 
String message
UI_MODE_SERVICE.equals(name)
mAttributes.getAllFlags()
LOG.warn("Error invoking metrics timer",e)
ctx.sendUpstream(e)
MessageNotifier.updateNotification(context,masterSecret,true,false,reminderCount + 1)
host.getHost()
keyFrameMeta.timestamps[i] >= ts
ImmutableSortedMap<String,T>
mEditText.getCompoundPaddingBottom()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).descriptionAndTooltip(message)
fileIds == null || fileIds.isEmpty()
CRASH_AT_SIZE=20_000
mQsDensityContainer.getLayoutParams()
mediaItemsNotUploaded <= sNotificationData.currentMediaItem
selenium.click("//li[4]/span/a/span")
selenium.isElementPresent("link=Control Panel")
DKV.put(chunkKey(_nchunks++),c,fs,true)
DISMISS_TO_VIEW_RATIO_LIMIT=.4
gen.setHead(false)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
putValues(types,AmenityType.SHOP,"fuel","car_wash","car_repair","car","car_parts")
selenium.isElementPresent("link=Control Panel")
uri.getAssetName().toLowerCase()
ATLAS_MAP_ENTRY_FIELD_COUNT=3
vb.getData().rewind()
DEBUG=false
mergeRefUpdate.update()
tfs.getFile(fileId)
assertPlanEquals(expectedPlan,actualPlan)
structuralLock.isHeldByCurrentThread()
gatherDisableActionsLocked(mCurrentUserId)
FastMath.min(origin,num.doubleValue())
NestedSetBuilder.linkOrder()
intervalFraction * (nextValue - prevValue)
project.getExtensions().add(IdeaModel.class,"idea",ideaModel)
cors.isAllowCredentials()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).descriptionAndTooltip(message)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
"Stream " + importerName
visibility != View.VISIBLE && mZoomManager != null
r.get(11)
SmartEnterProcessors.INSTANCE.allForLanguage(language)
config.getMaxEntriesLocalHeap()
Integer.parseInt(topStr)
tmpls.length()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
MockWeakReference<Object>
Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
Arrays.asList("groovy","org.codehaus.groovy","groovyjarjarantlr","groovyjarjarasm","groovyjarjarcommonscli","org.apache.tools.ant","com.sun.tools.javac")
Integer.toString(hours)
type.getDataFormat(routeContext)
Exception e
super.equals(jumpTouchData) && (_branch == jumpTouchData._branch) && (_branchNumber == jumpTouchData._branchNumber)
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
Thread.sleep(1000)
Exception t
assertEquals(2,props.getDisabledPlugins().length)
!isPartialUpdate || id.views == null
MUST_COMPLETE(true,false,false)
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
size <= 1
spellParser.isParsing()
AppLog.d(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
selenium.isElementPresent("link=Control Panel")
mMccStr == null
testClass.getSimpleName()
this.appView.setInitialScale(0)
BonusPackHelper.requestStringFromUrl(url,mUserAgent)
doConvertAndCast(returnType)
Q.row(j).minus(delta_qj.scale(lRate))
mFlexItemInEdit.setAlignSelf(AlignItems.STRETCH)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
DBG=true
world.setBlock(x,y,z,targetID,targetMeta,2)
startupManager.runWhenProjectIsInitialized(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
return newName; 
scanFlags & SCAN_REQUIRE_KNOWN
PatchedRouteInfo r; 
Number value2
typeSettingsProperties.toSortedString()
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
dest.writeInt(mSubId)
selenium.isElementPresent("link=Control Panel")
defaultShift >= Block.blocksList.length
bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())
61L + 122L
view.getMode()
ai.uid < Process.FIRST_APPLICATION_UID
Math.min(values().length - 1,value)
_node.getNodeId()
new CompoundShelfFileProcessor("shelf")
apnContext.getWaitingApns()
log.logError(BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",realFilenameSource,e.getMessage()))
setPin(file,true)
settings.getChangeAfterFilter()
mFile.getStoragePath()
return GCM; 
LOG.info("Couldn't collect changes between " + oldRevision + " and "+ newRevision,e)
assertFalse(storer().shouldProcess(curi1))
new LeftTuple(f1,sink)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
context.isOnlyCount() || context.size() == 0
queryStrings.append(key)
List<Element>
logger.trace("Propose response {} from {}",msg.payload,msg.from)
dynamicType.getLoaded().getDeclaredConstructor()
backUpDirs == null || backUpDirs.length <= 1
listToUpdate.add(attrs.getValue("data-wpid"))
assertClusterSizeEventually(2,data2,data3)
zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName())
stackIterator.remove()
dest.writeInt(txPower)
CONFIG_VERSION.getPath(container)
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0 || (win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD)
mLayoutParams != null && mLayoutParams.height >= 0
result.add(0,new InetSocketAddress("idontexist",80))
fragment.getEndVisualColumn()
Assert.assertEquals(5000,counter)
containsInAnyOrder(proc("dbms.listConfig","(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, value :: STRING?, dynamic :: BOOLEAN?)","List the currently active config of Neo4j.","DBMS"),proc("db.constraints","() :: (description :: STRING?)","List all constraints in the database.","READ"),proc("db.indexes","() :: (description :: STRING?, indexName :: STRING?, tokenNames :: LIST? OF STRING?, properties :: " + "LIST? OF STRING?, state :: STRING?, type :: STRING?, progress :: FLOAT?, provider :: MAP?, id :: INTEGER?, " + "failureMessage :: STRING?)","List all indexes in the database.","READ"),proc("db.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\")).","READ"),proc("db.awaitIndexes","(timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\")).","READ"),proc("db.resampleIndex","(index :: STRING?) :: VOID","Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\")).","READ"),proc("db.resampleOutdatedIndexes","() :: VOID","Schedule resampling of all outdated indexes.","READ"),proc("db.propertyKeys","() :: (propertyKey :: STRING?)","List all property keys in the database.","READ"),proc("db.labels","() :: (label :: STRING?)","List all labels in the database.","READ"),proc("db.schema","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? " + "OF " + "RELATIONSHIP?)","Show the schema of the data.","READ"),proc("db.schema.visualization","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)","Visualize the schema of the data. Replaces db.schema.","READ"),proc("db.schema.nodeTypeProperties","() :: (nodeType :: STRING?, nodeLabels :: LIST? OF STRING?, propertyName :: STRING?, " + "propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the nodes in tabular form.","READ"),proc("db.schema.relTypeProperties","() :: (relType :: STRING?, " + "propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the relationships in tabular form.","READ"),proc("db.relationshipTypes","() :: (relationshipType :: " + "STRING?)","List all relationship types in the database.","READ"),proc("dbms.procedures","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?, mode :: STRING?)","List all procedures in the DBMS.","DBMS"),proc("dbms.functions","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?)","List all user functions in the DBMS.","DBMS"),proc("dbms.components","() :: (name :: STRING?, versions :: LIST? OF" + " STRING?, edition :: STRING?)","List DBMS components and their versions.","DBMS"),proc("dbms.queryJmx","(query :: STRING?) :: (name :: STRING?, " + "description :: STRING?, attributes :: MAP?)","Query JMX management data by domain and name." + " For instance, \"org.neo4j:*\"","DBMS"),proc("db.createLabel","(newLabel :: STRING?) :: VOID","Create a label","WRITE"),proc("db.createProperty","(newProperty :: STRING?) :: VOID","Create a Property","WRITE"),proc("db.createRelationshipType","(newRelationshipType :: STRING?) :: VOID","Create a RelationshipType","WRITE"),proc("db.index.explicit.searchNodes","(indexName :: STRING?, query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit index. Replaces `START n=node:nodes('key:foo*')`","READ"),proc("db.index.explicit.seekNodes","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit index. Replaces `START n=node:nodes(key = 'A')`","READ"),proc("db.index.explicit.searchRelationships","(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index. Replaces `START r=relationship:relIndex('key:foo*')`","READ"),proc("db.index.explicit.auto.searchNodes","(query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit automatic index. Replaces `START n=node:node_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekNodes","(key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit automatic index. Replaces `START n=node:node_auto_index(key = 'A')`","READ"),proc("db.index.explicit.auto.searchRelationships","(query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit automatic index. Replaces `START r=relationship:relationship_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekRelationships","(key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)","Get relationship from explicit automatic index. Replaces `START r=relationship:relationship_auto_index(key = 'A')`","READ"),proc("db.index.explicit.addNode","(indexName :: STRING?, node :: NODE?, key :: STRING?, value :: ANY?) :: (success :: BOOLEAN?)","Add a node to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.addRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, key :: STRING?, value :: ANY?) :: " + "(success :: BOOLEAN?)","Add a relationship to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.removeNode","(indexName :: STRING?, node :: NODE?, key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) " + ":: (success :: BOOLEAN?)","Remove a node from an explicit index with an optional key","WRITE"),proc("db.index.explicit.removeRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, " + "key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) :: (success :: BOOLEAN?)","Remove a relationship from an explicit index with an optional key","WRITE"),proc("db.index.explicit.drop","(indexName :: STRING?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Remove an explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forNodes","(indexName :: STRING?, config = {} :: MAP?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a node explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forRelationships","(indexName :: STRING?, config = {} :: MAP?) :: " + "(type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a relationship explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.existsForNodes","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a node explicit index exists","READ"),proc("db.index.explicit.existsForRelationships","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a relationship explicit index exists","READ"),proc("db.index.explicit.list","() :: (type :: STRING?, name :: STRING?, config :: MAP?)","List all explicit indexes - YIELD type,name,config","READ"),proc("db.index.explicit.seekRelationships","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (relationship :: RELATIONSHIP?)","Get relationship from explicit index. Replaces `START r=relationship:relIndex(key = 'A')`","READ"),proc("db.index.explicit.searchRelationshipsBetween","(indexName :: STRING?, in :: NODE?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in' and ending at 'out'.","READ"),proc("db.index.explicit.searchRelationshipsIn","(indexName :: STRING?, in :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in'.","READ"),proc("db.index.explicit.searchRelationshipsOut","(indexName :: STRING?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, ending at the node 'out'.","READ"),proc("dbms.clearQueryCaches","() :: (value :: STRING?)","Clears all query caches.","DBMS"),proc("db.createIndex","(index :: STRING?, providerName :: STRING?) :: (index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a schema index with specified index provider (for example: CALL db.createIndex(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.createUniquePropertyConstraint","(index :: STRING?, providerName :: STRING?) :: " + "(index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a unique property constraint with index backed by specified index provider " + "(for example: CALL db.createUniquePropertyConstraint(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.index.fulltext.awaitEventuallyConsistentIndexRefresh","() :: VOID","Wait for the updates from recently committed transactions to be applied to any eventually-consistent fulltext indexes.","READ"),proc("db.index.fulltext.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Similar to db.awaitIndex(index, timeout), except instead of an index pattern, the index is specified by name. " + "The name can be quoted by backticks, if necessary.","READ"),proc("db.index.fulltext.createNodeIndex","(indexName :: STRING?, labels :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, " + "config = {} :: MAP?) :: VOID",startsWith("Create a node fulltext index for the given labels and properties."),"SCHEMA"),proc("db.index.fulltext.createRelationshipIndex","(indexName :: STRING?, relationshipTypes :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, config = {} :: MAP?) :: VOID",startsWith("Create a relationship fulltext index for the given relationship types and properties."),"SCHEMA"),proc("db.index.fulltext.drop","(indexName :: STRING?) :: VOID","Drop the specified index.","SCHEMA"),proc("db.index.fulltext.listAvailableAnalyzers","() :: (analyzer :: STRING?, description :: STRING?)","List the available analyzers that the fulltext indexes can be configured with.","READ"),proc("db.index.fulltext.queryNodes","(indexName :: STRING?, queryString :: STRING?) :: (node :: NODE?, score :: FLOAT?)","Query the given fulltext index. Returns the matching nodes and their lucene query score, ordered by score.","READ"),proc("db.index.fulltext.queryRelationships","(indexName :: STRING?, queryString :: STRING?) :: (relationship :: RELATIONSHIP?, " + "score :: FLOAT?)","Query the given fulltext index. Returns the matching relationships and their lucene query score, ordered by " + "score.","READ"),proc("db.stats.retrieve","(section :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve statistical data about the current database.","READ"),proc("db.stats.retrieveAllAnonymized","(graphToken :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve all available statistical data about the current database, in an anonymized form.","READ"),proc("db.stats.status","() :: (section :: STRING?, status :: STRING?, data :: MAP?)","Retrieve the status of all available collector daemons, for this database.","READ"),proc("db.stats.collect","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Start data collection of a given data section. Valid sections are 'QUERIES'","READ"),proc("db.stats.stop","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Stop data collection of a given data section. Valid sections are 'QUERIES'","READ"),proc("db.stats.clear","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Clear collected data of a given data section. Valid sections are 'QUERIES'","READ"))
new ObjectMapper().readerFor(DiskBalancerWorkStatus.class)
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
typeSettingsProperties.toSortedString()
new InvalidPluginRequestException("No artifacts in maven layout found for plugin id" + pluginId)
LOG.debug("Getting asynchronous method stub from channel")
consoles.waitJDTLSStartedMessage()
specModel.getRawProps()
LOG.info("Failed to get file text from file " + fileName,e)
selenium.isElementPresent("link=Control Panel")
a.getInteger(R.styleable.WeekView_dayNameLength,mDayNameLength)
isUnique
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
connectionManager.write(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
database instanceof SybaseASADatabase || database instanceof SybaseDatabase
p.getTeleport()
selenium.isElementPresent("link=Control Panel")
display.getRealMetrics(dm)
spellParser.isParsing()
60 * 1024 * 1024
mLastUpdate == null || DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
Thread.sleep(1000)
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
uri.indexOf("http://") == -1 && uri.indexOf("https://") == -1
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon")
attributesBuilder.put(toPresentationForm(node),attributes)
view != null && view.getParent() == this
file.getFileNameOnly()
times(1)
platformVersion < M
selectedPos <= lastPos
selenium.isElementPresent("link=Control Panel")
computeRealHorizontalScrollRange()
EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)
r.toLocalRuleString()
boosted - base <= config.boostThreshold()
TelephonyManager.getDefault().getCurrentPhoneType()
SharingEntryActionKey::getBitwiseValue
JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
type.isEmpty()
new IOException("",se)
private Stream getStream(int streamId,boolean unknownIsError) throws ConnectionException {   Integer key=Integer.valueOf(streamId);   Stream result=streams.get(key);   if (result == null && unknownIsError) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR);   }   return result; } 
Thread.sleep(1000)
connection.remote().incrementAndGetNextStreamId()
15 * 60 * 1000
Parser.htmlParser()
/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Integer autoCommitInterval; 
ImmutableSet.of(UNUSED_VARIABLE,UNUSED_PARAMETER,ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE,VARIABLE_WITH_REDUNDANT_INITIALIZER,UNUSED_FUNCTION_LITERAL,USELESS_CAST,UNUSED_VALUE)
scores.getAlgorithm()
networkOperator != null && !networkOperator.isEmpty()
new SkylarkTest("--incompatible_disallow_dict_plus=false")
!paragraphNote.getId().equals(this.getId())
fromLongClick && (mViewFlags & ENABLED_MASK) != ENABLED
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
GL20.glGetVertexAttribfv(index,pname,params)
getEffectiveHstsEnforced()
ArraySet<Integer>
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0 && mInstaller != null
list.append(pi)
whitePoint=9f
msg.getSpannableString()
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
to.getRegistryName()
mRvc == null || !session.isActive()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent) || mRunning2dInVr != running2dInVr
Field field
initOpenSSLConfCmdCipher("CipherString",ENABLED_CIPHER,"MaxProtocol","TLSv1.2")
new ByteBuddy().subclass(Foo.class).method(isDeclaredBy(Foo.class)).intercept(FixedValue.value("Hello World!")).method(named("foo")).intercept(FixedValue.value("Hello Foo!")).method(named("foo").and(takesArguments(1))).intercept(FixedValue.value("...")).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
callVideoButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
ev.mStateSamples.length >= NS
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0 || !reportToActivity
mDisplayContent.mDividerControllerLocked.getWidth()
new NTCredentials(proxyUser,proxyPass,LOCALHOST,PROXY_DOMAIN)
print(StatementGenerator.generateStringLiteral(node))
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
i < rank() && size(i) == 1
latch.await(5,TimeUnit.MINUTES)
annotationHelper.printAnnotationError(element,"%s annotated element should have only one constructor")
selenium.isElementPresent("link=Control Panel")
app.isDispatchThread() || app.isHeadlessEnvironment()
PrintAttributes.enforceValidDuplexMode(currentMode)
!be.hasField(BibtexFields.MARKED)
DEBUG=false
Object context
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
ttl >= 0
getter.getContainingClass().findMethodsByName(suggestedName,true).length != 0
WordPress.getCurrentBlog().getLocalTableBlogId()
defaultCometSupport(defaultToBlocking)
new KerasModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
m.getDeclaringClass()
new Textifier(ASM5){   @Override public void visitMethodEnd(){     System.out.println(cr.getClassName() + ":" + methodName+ methodDesc);     for (    Object line : getText()) {       System.out.print(line);     }     System.out.println();     System.out.println();     super.visitMethodEnd();   } } 
(NON_DOUBLE_LONG & in) == 0L
myBook.addUidWithNoCheck(uid)
onPackageAppeared(pkgList[i],mChangeType)
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",resolvers,entityID)
T stagedModel
CharSequence text
new Origin(origin,nativeGetQuotaForOrigin(origin),nativeGetUsageForOrigin(origin))
openConnection(false)
target.isVectorOrScalar()
/**   * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.  * @param self          the proxy instance.  * @param thisMethod    the overridden method declared in the superclass or interface.  * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.  * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.  * @return              the resulting value of the method invocation.  * @throws Exception    if the method invocation fails.  */ Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Throwable ; 
public class BuildOperationFiringBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private final BuildOperationExecutor buildOperationExecutor;   private final RoleAwareBuildCacheService delegate;   public BuildOperationFiringBuildCacheServiceDecorator(  BuildOperationExecutor buildOperationExecutor,  RoleAwareBuildCacheService delegate){     this.buildOperationExecutor=buildOperationExecutor;     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  final BuildCacheKey key,  final BuildCacheEntryReader reader) throws BuildCacheException {     return super.load(key,new BuildOperationFiringBuildCacheEntryReader(reader,key));   }   @Override public void store(  final BuildCacheKey key,  final BuildCacheEntryWriter writer) throws BuildCacheException {     super.store(key,new BuildOperationFiringBuildCacheEntryWriter(writer,key));   } private class BuildOperationFiringBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryReader(    BuildCacheEntryReader delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void readFrom(    final InputStream input) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Loading entry " + key + " from "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.readFrom(input);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } private class BuildOperationFiringBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryWriter(    BuildCacheEntryWriter delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void writeTo(    final OutputStream output) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Storing entry " + key + " in "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.writeTo(output);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } } 
mRemote.transact(REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
factory.getEmbeddedServletContainer()
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
mMccStr == null
Arrays.asList("NameNode RPC","NN Connection Load","NameNode GC count","NameNode GC time","NameNode Host Load")
Slog.d(TAG,"Unable to bind FLP Geofence proxy.")
topLevelBuildData.getMasterHostname()
logger.trace("NODE {}: App version requested but version is unknown",this.getNodeId())
logger.error("failed to create index [{}]",e,indexMetaData.index())
mConnector.execute("volume","format",vol.id,"auto")
req.getContentLengthLong()
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
outLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
isFocused()
GATEWAY_TIMEOUT=504
intervalFraction * (nextValue - prevValue)
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
serverConfig.getRenewalPercentThreshold() * expectedNumberOfRenewsPerMin
mConnectionById.containsKey(callId)
selenium.isElementPresent("link=Control Panel")
sm.getString("apr.write.error",Integer.valueOf(-written),Long.valueOf(socket),wrapper)
request.getSize() > 0 && request.getSoFar() == 0
um.getUsers(true)
win.isDrawnLw() || win.hasAppShownWindows()
sep < 0 || sep > j
findCodecForFormat(true,format)
result.getReceipt().getEnergyUsageTotal()
mOneShot=false
selenium.click("//li[4]/span/a/span")
@Override public final DivideByOnConditionStep and(Condition c){   condition.addConditions(c);   return this; } 
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
serversByLoad.firstKey()
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
rs.isLast()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
currentResponse != null && currentResponse.getAuthentication() != null
accounts.length > 0 && mNavigationView != null
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
FunctionTypesKt.isNonExtensionFunctionType(calleeType)
rawCache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
Throwable e
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
expectQueryToFail("UserWith:Colon",ldapUserPassword,MALFORMED_CREDENTIALS_ERROR)
DEBUG=false
ColorProperties.getColor("tableGrid")
Formatter.getInstance().createContinuationIndent()
public T setStandardOutput(OutputStream outputStream){   operationParamsBuilder.setStdout(outputStream);   return getThis(); } 
currentTransform.getInputs()
PrintAttributes.enforceValidDuplexMode(currentMode)
"Can't have more than 32767 vertices per batch: " + maxVertices
new TwoColorsIcon(12,((MyInfo)infos.get(0)).myColor,((MyInfo)infos.get(1)).myColor)
loaded.getLoaded().getDeclaredConstructor()
new StringBuilder(url)
mSite.getSpaceAllowed()
loadAnimator(fragment,transition,false,transitionStyle)
longSize >= 640
Executors.newCachedThreadPool()
textDelimiterTrailing.getSelection()
data.synonymForSchema.findTableOrView(data.session,data.synonymFor) == null
isBuiltin || scope.getNamedElement(name) == null
days >= 2 || (days > 0 && hours == 0)
assertEquals("throughput",94.17869828,model.getThroughput(),0.00000001)
getTupledSet()
c >= 0x80
getIntent().getExtras().getLong(EXTRA_PERSON_ID)
Integer.parseInt(bottomStr)
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
new Tag(line,column,text,on,this)
new IllegalStateException("Advertising can't be both connectable and anonymous")
methodName.equalsIgnoreCase("scan")
LOGGER.warn("{} - Thread starvation or clock leap detected (housekeeper delta={}).",poolName,clockSource.elapsedDisplayString(previous,now))
changeInfo.getNewParametersSignatureWithoutParentheses((JetCallableDefinitionUsage<PsiElement>)this)
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
SHOW_FQ_TYPE_NAMES=false
cnt=0
node1.isEquivalentToTyped(node2)
format == null || "".equals(format)
greaterThanOrEqualTo(0L)
Map<String,Object>
appearance.getInt(attr,0)
Map<String,String>
((JavaLibrary)exported).getImmediateClasspaths()
listener != null && mHandler == null
assertEquals("incorrect number of elements",20,nodeInfo.length())
this.numberOfMessages=1000
Exception e
TestUtils.getService()
nextPos < mBoundPos
fileSystem.renameFile(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
runOTIafterNTI=false
typeSettingsProperties.toString()
internalTransaction.getTransferToAddress()
TelephonyManager.getDefault().getCurrentPhoneType()
new MockNode(settings,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
new ExecutionEnvironment(new MockProfile(),MOCK_EXECUTOR,myProject,null)
selenium.isElementPresent("link=Control Panel")
SecurityAutoConfiguration.class
Throwable e
pkgs.get(j)
(Number)array[this.index]
concatRef.isEightBits=true
mActiveAgents.remove(info)
selenium.isElementPresent("link=Control Panel")
perthread.setSelected(false)
b == null || b.length == 0
private void _runTearDown() throws Exception {   try {     _runClassCommandName(_testClassName + "#tear-down");   }  catch (  Exception e) {     throw e;   }  finally {     LoggerUtil.stopLogger();     SeleniumUtil.stopSelenium();   } } 
props.getProperty(propName)
cancelHardwareAnimations(true)
log.debug("Can not authenticate " + ac.getUsername() + " due to "+ e.toString(),e)
createFileFromText(name,language,text,true,true)
ConversionException e
createRenderScript(true)
ig0.context().query().dynamicTableCreate(SCHEMA_NAME,getEntity(),TMPL_NAME,null,1,true)
dest.writeInt(mTxPower)
mPm.getUserBadgedIcon(icon,new UserHandle(userId))
clientCodeVerifier == null
IndexReader.open(dir)
StreamOut.transferSSTables(session,ssTableReaders,ranges,OperationType.BOOTSTRAP)
Long.parseLong(name)
ap.getSsidStr()
!subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
m.getDeclaringClass()
new Paint()
entry.notification.cloneLight()
optionsMenuHelper.item(R.string.settings_activity).icons(R.drawable.ic_action_settings_dark,R.drawable.ic_action_settings_light)
views.html.search.noresults.render(currentUser(),q,searchResult,stream)
DirectoryReader r=IndexReader.open(d); 
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
copy1DRangeFromUnchecked(0,mType.getCount(),i)
Integer.parseInt(bottomStr)
service.setDomainEventNotifier(domainEventNotifier)
-37.0f
ReferenceCountUtil.release(holder)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name) || LocationManager.FUSED_PROVIDER.equals(name)
public Long getOpenSslContext(){   return openSslContext; } 
UpgradeStepRegistrator.class
day=20
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
ZLOptionEntry option
in.getDepth() >= outerDepth
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
loaded.getLoaded().getDeclaredConstructor()
internalCacheDir == null
account.getId()
versionNumber < BUKKIT_VERSION && versionNumber > 100
new ObjectMapper().readerFor(DiskBalancerWorkItem.class)
mp.getResolvedValue()
holder == null || holder.provider == null
type.getModifiers()
new MaybeCompressedFileResource(new FileResource(tarFile))
e.getTag(OSMTagKey.TUNNEL) != null && !e.getTag(OSMTagKey.TUNNEL).equalsIgnoreCase("no")
ids1.size()
AtomicIndexReader reader=getOnlySegmentReader(IndexReader.open(dir)); 
new IndexWriter(d,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
args[1]
cfs.getMemtableThroughputInMB() * 1024L * 1024L
klass.getDeclaredFieldsUnchecked(false,declaredFields)
TelephonyManager.getDefault().getCurrentPhoneType()
l < Integer.MIN_VALUE + 1 || l > Integer.MAX_VALUE
@Parameter(names="-usedefaultlisteners",description="Whether to use the default listeners") public String useDefaultListeners="true"; 
buildPages.getTypesWithoutHash()
Integer.parseInt(row.getValue(partitionCol).toString())
currentBuilder.getRootImmediately()
new WorldPoint(2800,3074,0)
rowsRet <= 0 || work.getLimit() == totalRows
Assert.assertEquals(7,latch.getCount())
overlay.getTimestampFrom() <= sample.getTimestamp()
a.getDimension(attr,0)
Integer.toString(types.size())
substringBox.setSelected(true)
Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())
!mParams.isZoomSupported() || !mParams.isSmoothZoomSupported()
indexStats.getPrimaries().getMerge().getCurrentSize()
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver,UserHandle.USER_ALL)
new ModLoaderModContainer(bmClazz,canonicalFile)
id=25
new Insets(6,4,0,0)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
Log.i(TAG,"Prepare done")
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
client.getStatusCodeReply()
6 * width * height
topNProjector.finish()
new Span("> IDLE")
return HEARTBEAT; 
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200),CommonUtils.truncateString(consumer.getObjectName(),200))
childLeftTuple.reAddLeft()
AL_KHARID(180.0,30,13105,new WorldPoint(3299,3194,0))
new V(8,new BooleanSetting(true))
db.checkTableExists(realTablename)
Log.d(TAG,"setSubtitleAnchor in MediaPlayer")
collector.getRangeCounters(range)
IllegalArgumentException e
ir.mHandler != null && ir.mImageListener != null
StringBuilder sb=new StringBuilder(); 
createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY)
errors.addAllErrors(bindingResult)
artifactResolver.collect(request)
"top: new NRT point (version=" + version + ") is older than current (version="+ curVersion+ "); skipping"
BackupManagerServiceInterface svc=mService; 
PortalTopLevelBuildData portalTopLevelBuildData=getBuildData(); 
ev.mTimeSamples.length >= NT
stat.st_mode.intValue()
sshClient.connect(sshHost,sshPortNum)
PyMandatoryEncodingInspection.class
f.close(true)
@Override public Word2VecMojoWriter getMojo(){   return new Word2VecMojoWriter(this); } 
Timber.e(e,"Argument %s is incorrect")
hasRows("SyncDLObject")
service.handlePinMmi(dialString,mContext.getOpPackageName())
getCamelContext().getTypeConverter().convertTo(int.class,timeout)
new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)
r2.getName()
opSetSMS.addMessageListener(messageSourceService)
dockedBounds.right + dockDividerWidth
telephony.isRinging(getOpPackageName())
ph.setTimeStampGroups(groupsFile.lastModified())
EqualityComparer<TKey>
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
sliceInput.getRetainedSize()
DiagnosticFactory2.create(ERROR,INCOMPATIBLE_DECLARATION)
KEY_LENGTH=64
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
m.getTablePerHierarchy()
SmsHeader.toByteArray(header).length + 2
HttpUtil.removeParameters(uri)
limitOrder.getOriginalAmount()
win == null || !startPositioningLocked(win,true,startX,startY)
parent.getExactOverriddenJoinColumn(propertyName)
available=false
s.setAutoCommitDelay(10)
intent.resolveType(getContentResolver())
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,19,getLayoutLog())
mIconId != 0
new EnterSelectionDialog(shell,files,"Files read","Files read:")
metadata.getColumnLabel(columnNumber)
Integer.parseInt(topStr)
Map<Byte,UdpMessageTypeEnum>
specWidthMode == MeasureSpec.EXACTLY || specWidthMode == MeasureSpec.AT_MOST
ep.getLoaderForClass()
sanitizeName(name)
4 * 6
mAccessibilityController.isAccessibilityEnabled()
new LayerView(this,0x0f0000ff)
"false".equals(showRelationships) || result.hasErrors()
ImageUtilities.createBufferedImageForDisplay(capture.getNextFrame())
implementationMethodDescriptors.build()
new RuntimeException("Error loading MultiDataSet at path " + pds.getPath() + " - MultiDataSet may be corrupt or invalid."+ " Spark MultiDataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
new IllegalStateException()
JDBCUtils.safeGetLong(dbResult,"time")
Matrix.multiplyMM(m,0,matrix.getDoubleValues(),0,mTmp,0)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
builder.appendRows("4dlu, pref")
shardDao.insertShard(shard,tableId,null,0,0,0,0)
lock.isHeldByCurrentThread()
Iterables.getLast(cluster.getNodes()).getStatus().setAvailable()
is(true)
StringBuilder resultPath=new StringBuilder(DefaultGroovyMethods.join(config.getClasspath(),File.pathSeparator)); 
g.clipRect(offX,y,width - offX,height)
Integer.parseInt(attrValue)
editor.selectPrevTab()
a.willChangeBounds()
!hasCollapsibleActionView()
out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader())
logger.warn("Configuration for influxdb not yet loaded or broken.")
WordPress.getCurrentBlog().getLocalTableBlogId()
webRequest.getNativeResponse(HttpServletResponse.class)
MultiLayerNetwork.class
hasPrevChange()
new DefaultPaymentMethod(input,getPaymentMethodDetail(pluginPms,input.getExternalId()))
del != null
config.getMaxEntriesLocalHeap()
nestedBuilder.types("FormSuccessPageSettings")
from >= to
decompiler.addPreservedComment(ts.getString())
TagPluginManager.class
selenium.isElementPresent("link=Control Panel")
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
type.isInterface()
createDouble(buffer.length(),init,workspace)
super.resolveLayoutDirection(layoutDirection)
Log.e(TAG,"This will become an error",ex)
ActionListener[]
StringBuilder sb=new StringBuilder(); 
new Insets(6,4,0,0)
new InTransformReader(reader,Collections.singletonMap("{http://bar}test","test2"),null,null,null,false)
updateChildren()
Metric<Long>
new TextPaint()
s.elapsed(TimeUnit.NANOSECONDS)
ImmutableMultiset<String>
@NotNull
new File(helpersPath)
IOConverter.toInputStream(s,null)
LinkedHashMap<String,Operator<? extends Serializable>>
InputMethodManager.getInstance()
case 5: 
block != null && block.getTextRange().getLength() > 1
position < 0 || position >= list.size()
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(),ex)
new Vector3f().interpolateLocal(point1,point2,0.5f)
refDefault != null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
request.createInputStream()
assertEquals(1.337026596069336,score,1e-4)
Trans != NO_TRANSPOSE
attributes.getAllFlags()
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
name == null || name.equals(yamlKeyValue.getKeyText())
flipX=1
parameters2.size()
lock.isHeldByCurrentThread()
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
settings.setTextSize(WebSettings.TextSize.SMALLER)
getVoiceUsed()
AvroValue<GenericRecord>
private final String resource; 
selenium.isElementPresent("link=Control Panel")
workDir.getAbsolutePath()
connectionTimeout / 4
CharArrayUtil.indexOf(whiteSpace,pattern,0) < 0
DEBUG=false
Void value
Localization.lang("Find unlinked files")
mResolver.stop()
DEBUG=false
VDBG=false
final P testedPrototype
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
context == null || context == EGL_NO_CONTEXT
hotDrinkDelay=300
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
selenium.isElementPresent("link=Control Panel")
mStartActivity.task == null || mStartActivity.task == parent
Environment.getOemDirectory()
attributes != null && !attributes.isEmpty()
getTestName(false)
timeout >= 0
checkIfDestroyed()
entries == null || entries.length == 0
simpleRecyclerViewAdapter.insertFirst("rand added item")
mStackSupervisor.mAppVisibilitiesChangedSinceLastPause || mService.mStackSupervisor.getStack(PINNED_STACK_ID) != null
Thread.sleep(1000)
connect(monitor,null,null,false,true)
Character.isLetterOrDigit(c)
detachViewFromParent(--index)
current >= 0
sstable.markObsolete()
!singleBccRecipientFromAccount
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
parameters == null || parameters.isEmpty()
ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),parser::getTokenLocation)
logError(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
-1L
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
uncompressedProto.length < 1100000
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
myPromptHooksExtensionFile == null || !myPromptHooksExtensionFile.exists()
/**   * Default implementation of FtpClientFactory.  * @author iwein  */ public class DefaultFtpClientFactory implements FtpClientFactory {   private static final Log logger=LogFactory.getLog(FtpClientFactory.class);   private static final String DEFAULT_REMOTE_WORKING_DIRECTORY="/";   private FTPClientConfig config;   private String username;   private String host;   private int port=FTP.DEFAULT_PORT;   private String password;   private String remoteWorkingDirectory=DEFAULT_REMOTE_WORKING_DIRECTORY;   private int clientMode=FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE;   public void setConfig(  FTPClientConfig config){     Assert.notNull(config);     this.config=config;   }   public void setHost(  String host){     Assert.hasText(host);     this.host=host;   }   public void setPort(  int port){     Assert.isTrue(port > 0,"Port number should be > 0");     this.port=port;   }   public void setUsername(  String user){     Assert.hasText(user,"'user' should be a nonempty string");     this.username=user;   }   public void setPassword(  String pass){     Assert.notNull(pass,"password should not be null");     this.password=pass;   }   public void setRemoteWorkingDirectory(  String remoteWorkingDirectory){     Assert.notNull(remoteWorkingDirectory,"remote directory should not be null");     this.remoteWorkingDirectory=remoteWorkingDirectory.replaceAll("^$","/");   }   /**   * Set client mode for example <code>FTPClient.ACTIVE_LOCAL_CONNECTION_MODE</code> (default) Only local modes are supported.  */   public void setClientMode(  int clientMode){     this.clientMode=clientMode;   }   public FTPClient getClient() throws SocketException, IOException {     FTPClient client=new FTPClient();     client.configure(config);     if (!StringUtils.hasText(username)) {       throw new MessagingException("username is required");     }     client.connect(host,port);     setClientMode(client);     if (!FTPReply.isPositiveCompletion(client.getReplyCode())) {       throw new MessagingException("Connecting to server [" + host + ":"+ port+ "] failed, please check the connection");     }     if (logger.isDebugEnabled()) {       logger.debug("Connected to server [" + host + ":"+ port+ "]");     }     if (!client.login(username,password)) {       throw new MessagingException("Login failed. Please check the username and password.");     }     if (logger.isDebugEnabled()) {       logger.debug("login successful");     }     client.setFileType(FTP.BINARY_FILE_TYPE);     if (!remoteWorkingDirectory.equals(client.printWorkingDirectory()) && !client.changeWorkingDirectory(remoteWorkingDirectory)) {       throw new MessagingException("Could not change directory to '" + remoteWorkingDirectory + "'. Please check the path.");     }     if (logger.isDebugEnabled()) {       logger.debug("working directory is: " + client.printWorkingDirectory());     }     return client;   }   /**   * Sets the mode of the connection. Only local modes are supported.  */   private void setClientMode(  FTPClient client){ switch (clientMode) { case FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE:       client.enterLocalActiveMode();     break; case FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE:   client.enterLocalPassiveMode(); break; default : break; } } } 
UpgradeStepRegistrator.class
tempBitmap != null && tempBitmap.getWidth() != 0 && tempBitmap.getHeight() != 0
selenium.isElementPresent("link=Control Panel")
new IfNode(currentGraph.unique(new IsNullNode(object)),successor,deopt,1,graphId)
new BottomEntity()
page.getRetainedSizeInBytes()
next != null
Thread.sleep(1000)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
ch == '&' && JdbcConstants.POSTGRESQL.equals(dbType)
checkCall(receiver)
Assert.assertEquals(256,intValue)
Objects.equals(e.getNewRange(),e.getOldRange())
Throwable e
logger.warn("couldn't execute commandLine '" + commandLine + "'",e)
UPDATING
vel < mFlingExpandMinVelocityPx
cls.getDeclaredMethods()
BlogsEntryLocalServiceUtil.updateEntry(_entry.getUserId(),_entry.getEntryId(),_entry.getTitle(),_entry.getSubtitle(),_entry.getDescription(),_entry.getContent(),1,1,2012,12,00,true,true,new String[0],null,null,serviceContext)
RowKey.prefixKeyWithSalt(key)
IllegalArgumentException.class
this == NTI_ONLY
ManifestUtils.getOrCreateManifest(archive)
Database.builder(database)
JSONValue.parseWithException(isr)
Float.parseFloat(param.getValue())
temp.reAddLeft()
mService.queryDisplayStatus(getCallbackWrapper(callback))
conn.getResponseCode() == 200
DefaultAlluxioWorker.class
poiCategory != null && poiCategory.length() > 0
DEBUG=false
verify(mWifiService).stopLocalOnlyHotspot()
context == null || context == EGL_NO_CONTEXT
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
ImageView divider=new ImageView(mContext); 
currentCondition.toString().trim().equals(condition.trim())
current >= 0
type.getDeclaredConstructor()
IllegalArgumentException.class
selenium.isElementPresent("link=Control Panel")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
event.getRawY()
!container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
waitForJobExecutorToProcessAllJobs(5000,500)
new JSONOrderedObject()
callNode.call(arguments)
intervalFraction * (nextValue - prevValue)
curOffset=0
node.getBeginLine()
ImapException ie
pathParameterMap != null
LOG.warn(e)
appearance.getInt(attr,0)
MonitoringPortlet.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
List<ByteBuffer>
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).containsOffset(offset)
mEnginesHelper.isEngineEnabled(mRequestedEngine)
interceptors.addLast(newAInterceptor(a))
new MaxNParallelTestClassProcessor(testTask.getMaxParallelForks(),reforkingProcessorFactory,actorFactory)
profile.getActiveRules(true)
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
getCurrentTab().handleHTMLCopy()
action != KeyEvent.ACTION_UP
preMap.size()
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
in.markReaderIndex().readByte()
Assert.assertEquals(7,renderedDDMFormFieldsMap.size())
doThrow(exception).when(fs).renameFile(any(File.class),any(File.class))
Log_OC.e(TAG,"Unexpected intent " + intent.toString())
end + 1
LinkedHashMap<String,Operator<? extends Serializable>>
settings.setWorkersEnabled(false)
JSONValue.parseWithException(isr)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
preparedStatement.setNCharacterStream(paramIndex,tmpReader)
mMccStr == null
myEditor.getScrollingModel().getVisibleAreaOnScrollingFinished()
log.info("{}: Requesting {} transactions for dep resolution",vAddress,needToRequest.size())
selenium.isElementPresent("link=Control Panel")
resources.getDimensionPixelSize(R.dimen.close_handle_height)
types.get(i)
mTo == 0
addTypes.get("subway_region")
mPersistFileService.shutdown()
vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager())
backupFile(w,true)
i < 1254
elementToDelete == null
LoopContextStateRetrieval retrievalToAdapt
builder.field(Fields.SUM,0.0d)
shuttingDown
actionUrl.getActionType() == ActionUrl.DELETED && reordableChildren.size() != actionUrl.getAbsolutePosition()
sTestCaseCounter == 0
x < 3
new TextSelection(queryStartOffset + pos.position,0)
final ActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
mAppToken.isVisible()
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
LayoutHelper.getGBC(2,9,1,1.0D,0,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2))
mSeekBar.setProgress(mLastAudibleStreamVolume,true)
Throwable ignored
selenium.isElementPresent("link=Control Panel")
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
packetSize=160
WordPress.getCurrentBlog().getLocalTableBlogId()
setMargins(view.findViewById(R.id.studyoptions_mainframe),LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,4f,4f,4f,4f)
rest.getEndpointUrlChange()
pw.print(ps.getInstantApp(user.id))
getSongProgressMillis() > 5000
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameClass.run();   } } 
mapper.getFactory()
service.getCharacteristic(charUuid.getUuid(),charInstId)
origin < other
logger.debug("Error connecting to Plex",e)
_typeSettingsProperties.toSortedString()
adapterCount <= MIN_ADAPTER_STACK
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
selenium.isElementPresent("link=Control Panel")
Thread.sleep(1000)
useDisMax=jp.getIntValue() != 0
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
assertThat(measures.get("files")).isEqualTo(3)
Thread.sleep(1000)
selenium.isElementPresent("link=Control Panel")
offset >= 0
new DexBackedMethodReference(dexFile,methodIndex)
callGasWord.longValueSafe()
metric.getKey().toLowerCase(Locale.ROOT)
readWifiSleepPolicy()
codeItem.getOffset()
case WRITE_OUT: 
pk.getColumnNameInSql()
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
scannedUnit.setExcludeUnlistedClasses(true)
testClass.getSimpleName()
Throwable e
createOrcWriterOptions(oi,conf,cacheWriter,allocSize)
selenium.isElementPresent("link=Control Panel")
windowIndex >= currentTimeline.getWindowCount()
directContext.timers().deleteTimer(gc,TimeDomain.EVENT_TIME)
JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA")
upnpBox.isSelected()
new ObjectMapper().readerFor(IspResponse.class)
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
bdtemp.doubleValue()
ImmutableList.copyOf(sourcesAsStrings)
settings.getDateAfterFilter()
!CodeStyleSettingsManager.getSettings(myProject).LINE_COMMENT_AT_FIRST_COLUMN
getOptionalString(singletonMap("string",42),list)
attacher.addRefreshableView(view,null,refreshListener)
cCurrentVersion=466
LOGGER.debug("no property for " + type + ", "+ format)
Boolean.parseBoolean(attrValue)
type.getDeclaredConstructor()
fpId == 0
new Requirement(Skill.FARMING,63)
configList == null || configList.size() == 0
selenium.isElementPresent("link=Control Panel")
response.setStatus(statusCode)
new int[127]
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
patientExitObs != null && patientExitObs.size() > 0
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
endPos < bufEnd
commonRegisterProblem(message," not support this syntax. Raise with no arguments can only be used in an except block",len,node,null,false)
this.registry.getValue().removeXAResourceRecovery(recovery)
((Scorecard)serializable).getUseReasonCodes()
new Paint()
concurrency > (shift<<=1)
_connector.getResponse("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
123456789 * 2
WEB_SYNC_MANAGER=true
logCommand.setFollowCopies(false)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
new JavaRecursiveElementVisitor(){   @Override public void visitDocComment(  PsiDocComment comment){   }   @Override public void visitJspFile(  JspFile file){   }   @Override public void visitMethod(  PsiMethod method){     final PsiModifierList modifierList=method.getModifierList();     if (modifierList.hasModifierProperty(PsiModifier.NATIVE)) {       problems.add(manager.createProblemDescriptor(modifierList,"Native methods aren't allowed in App Engine application",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));     }     super.visitMethod(method);   }   @Override public void visitNewExpression(  PsiNewExpression expression){     final PsiJavaCodeReferenceElement classReference=expression.getClassReference();     if (classReference != null) {       final PsiElement resolved=classReference.resolve();       if (resolved instanceof PsiClass) {         final String qualifiedName=((PsiClass)resolved).getQualifiedName();         if (qualifiedName != null && sdkManager.isMethodInBlacklist(qualifiedName,"new")) {           final String message="App Engine application should not create new instances of '" + qualifiedName + "' class";           problems.add(manager.createProblemDescriptor(classReference,message,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));         }       }     }     super.visitNewExpression(expression);   }   @Override public void visitMethodCallExpression(  PsiMethodCallExpression expression){     final PsiReferenceExpression methodExpression=expression.getMethodExpression();     final PsiElement element=methodExpression.resolve();     if (element instanceof PsiMethod) {       final PsiMethod method=(PsiMethod)element;       if (method.getModifierList().hasModifierProperty(PsiModifier.NATIVE)) {         problems.add(manager.createProblemDescriptor(methodExpression,"App Engine application should not call native methods",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));       }  else {         final PsiClass psiClass=method.getContainingClass();         if (psiClass != null) {           final String qualifiedName=psiClass.getQualifiedName();           final String methodName=method.getName();           if (qualifiedName != null && sdkManager.isMethodInBlacklist(qualifiedName,methodName)) {             final String message="AppEngine application should not call '" + StringUtil.getShortName(qualifiedName) + "."+ methodName+ "' method";             problems.add(manager.createProblemDescriptor(methodExpression,message,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));           }         }       }     }     super.visitMethodCallExpression(expression);   }   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     final PsiElement resolved=reference.resolve();     if (resolved instanceof PsiClass) {       final PsiFile psiFile=resolved.getContainingFile();       if (psiFile != null) {         final VirtualFile virtualFile=psiFile.getVirtualFile();         if (virtualFile != null && !fileIndex.isInSource(virtualFile)) {           final List<OrderEntry> list=fileIndex.getOrderEntriesForFile(virtualFile);           for (          OrderEntry entry : list) {             if (entry instanceof JdkOrderEntry) {               final String className=((PsiClass)resolved).getQualifiedName();               if (className != null && !sdkManager.isClassInWhiteList(className)) {                 problems.add(manager.createProblemDescriptor(reference,"Class '" + className + "' is not included in App Engine JRE White List",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));               }             }           }         }       }     }     super.visitReferenceElement(reference);   } } 
mView.postOnAnimation(mAnimationStarter)
interceptor.doIntercept(invocation)
updateAll(tableCollection,modelSaver.getWritableDatabase())
mValues[8]
mBondState.setBondState(address.toUpperCase(),state,reason)
this.originals
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
log.error("Problem in JSR223 script " + e,e)
mv.visitParameterAnnotation(0,Type.getDescriptor(Nullable.class),false)
sharedOptsCount.containsKey(thread)
map.get(key)
expect(IDENTIFIER,"Expecting qualified name")
rulesJars.exclude(excludedJar)
commandExecutor.evalWriteAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
Log_OC.e(TAG,"Trying to send a NULL OCFile")
window.onBackwardSliceLoaded(topSortKey)
m.getDeclaringClass()
exclusiveConsumer2.receive(1000)
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,tag,notification.toString())
delegate.toJson(writer,new Envelope<>(value))
component.setSelectedIndex(selected)
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
file.getName()
mJobs.valueAt(i)
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
mAppToken.isVisible()
Q.row(j).minus(delta_qj.scale(lRate))
mThumbPosition >= getThumbScrollRange() / 2
presence.getFrom()
TelephonyManager.getDefault().getCurrentPhoneType()
tiClus.setText(STRING_CLUSTERS)
PaginationRequest.of(10,1)
new StringBundler(9)
!mTextServicesManager.isSpellCheckerEnabled() || mTextServicesManager.getCurrentSpellCheckerSubtype(true) == null
this.thrown.expectMessage("File must not be null")
assertThat(o.takeNext()).isNotNull()
new TextPaint()
Exception t
!world.getBlockMaterial(x,y,z).isLiquid()
Boolean.parseBoolean(attrValue)
context.getOpPackageName()
factory.getEmbeddedServletContainer()
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
new AffineTransform(mTextScaleX,mTextSkewX,0,1,0,0)
longSize >= 640
getMainAreaHeight()
CharacterComponent.class
cfStandardTable != null && cfStandardTable.getType() != Resource.Type.UNDEFINED
info.getLine1NumberForSubscriber(subId,mContext.getOpPackageName())
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
Object statistics
lock.isHeldByCurrentThread()
t.type.tsym.flatName()
mStartActivity.task == null || mStartActivity.task == parent
!value.isNull()
NumberFormatException expected
userComponents.valueAt(j)
protocolProvider.getProtocolDisplayName()
Object maxFractDigits=properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
5 * Bytes.SIZEOF_BOOLEAN
Integer.parseInt(taskIdStr)
new Paint()
JettyWebSocketClient.WS_URI.getDisplayName()
Throwable e
LOG.debug("Detected JMX protocol is null for clusterName = " + clusterName + ", componentName = "+ componentName)
origin.realComponent().doubleValue() < other
selenium.isElementPresent("link=Control Panel")
@Specialization protected LLVMBoxedPrimitive fromShort(short value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
driverFile.getFile()
logError(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
factory.getDestination(getEndpointInfo("foo","bar","http://localhost:9001"),bus)
AvailablePortFinder.getNextAvailable(3000)
Thread.sleep(2500)
expired++
assertTrue(message.getPayload() instanceof Collection<?>)
selenium.waitForVisible("//iframe[contains(@title,'Rich Text Editor')]")
request.path()
expectQueryToFail("UserWith:Colon",ldapUserPassword,MALFORMED_CREDENTIALS_ERROR)
public SuggestedFix build(){   return new SuggestedFix(fixes,importsToAdd,importsToRemove); } 
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
LOGGER.warn("Could not perform drage and drop",ioex)
types.length > Tuple.MAX_ARITY
"true".equalsIgnoreCase(mode)
setContentType(response,TEXT_HTML,gspEncoding,true)
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
Integer.parseInt(leftStr)
i > 0
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
assertThat(provider.fetchCount,is(1))
this.cusolverDnDsyevd.invoke(null,solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
fullIdeArtifact.getBaseVersion()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
BufferUtil.zeroBuffer(1)
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).subscriberContext(withUser)
assertEquals("List size",3,retList.size())
getView() == null || EventQueue.isDispatchThread()
getActivity()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
StringBuilder buffer=new StringBuilder(); 
getInFaultInterceptors()
remaining == 0
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
testLogger.info("[v] Secure sync completed")
logger.info("Plugin class " + pluginClass)
timeout / 50
onDetachedFromWindows()
mAuthorities.valueAt(i)
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)
if (DBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
parent != null && parent != root
Slog.e(TAG,sb.toString())
project.getExtensions().add(IdeaModel.class,"idea",ideaModel)
LOG.debug("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
((OverriderUsageInfo)usage).getOverridingMethod()
readWifiSleepPolicy()
mVerticalScrollBarMode == SCROLLBAR_ALWAYSOFF && (mActualScale - mMinZoomScale <= MINIMUM_SCALE_INCREMENT)
context.getComments()
copyFileEntryMetadata(dlFileVersion.getCompanyId(),dlFileVersion.getFileEntryTypeId(),fileEntryId,dlFileVersion.getFileVersionId(),newDlFileVersion.getFileVersionId(),serviceContext)
JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING || JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING_CHANGING_URL
1L << 36
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
awaitPartitionMapExchange(true,true,null)
getConnectTimeout()
element.getLocalName()
wZipFilename.getText()
ArtifactCompileScope.createScopeWithArtifacts(moduleScope,Collections.singletonList(myArtifact),true)
new Random()
String.format(Locale.ROOT,"User [%s] already exists",username)
final LongAdder8 qrys=new LongAdder8(); 
XMLInputFactory.newInstance()
LARGE_SIZE=40
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
StorageUtils.getCacheDirectory(context)
selenium.isElementPresent("link=Control Panel")
mHandler.obtainMessage(MSG_RESULT,status,0,currentPackage)
addEnergy(10)
selenium.isElementPresent("link=Control Panel")
enums.size()
sharedLibrary != null
new CrypticClue("In a town where thieves steal from stalls, search for some drawers in the upstairs of a house near the bank.","Guard",DRAWERS,new WorldPoint(2611,3324,1),"Kill any Guard located around East Ardougne for a medium key. Then search the drawers in the upstairs hallway of Jerico's house, which is the house with pigeon cages located south of the northern East Ardougne bank.")
userId != UserHandle.getCallingUserId() && checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
partitionId >= 0
List<Library>
assertTrue(fileName + " not generated",f.exists())
realm.checkIfValid()
callbackList.getBroadcastCookie(i)
MethodHandles.insertArguments(ci.handle,ci.handle.type().parameterCount() - 2,false,true)
Throwable e
hook(new XMediaRecorder("setOutputFile",XRestriction.cMedia,new String[]{"RECORD_AUDIO","RECORD_VIDEO"}),"android.media.MediaRecorder")
_log.warn(ioe,ioe)
version.onOrBefore(Version.V_1_0_0_Beta2) || version.onOrAfter(Version.V_2_0_0_beta1)
new OutputStreamWriter(output,ContentUtils.DEFAULT_CHARSET)
externalMediaDir.getPath()
position.set(0,0,mRight - mLeft,mBottom - mTop)
mUiHandler.removeCallbacks(pae)
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,0.012242754628809,DeepLearningModel.DeepLearningParameters.Activation.Rectifier)
userRecord != null && userRecord.mClientRecords != null
logger.warn("Writing large partition {}/{}:{} ({}) to sstable {}",metadata.ksName,metadata.cfName,keyString,FBUtilities.prettyPrintMemory(rowSize),getFilename())
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
new SimpleDateFormat("dd-MMM-yyyy",Locale.US)
new CrypticClue("Search for a crate in a building in Hemenster.",CRATE_357,new WorldPoint(2636,3454,0),"House north of the Fishing Contest quest area. West of Grandpa Jack.")
origin > other
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
targetWidth == 0
newline(2)
winAnimator.prepareSurfaceLocked(recoveringMemory)
logger.debug("Using override port of %d on client %s",overridePort,clientName)
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
selenium.isElementPresent("link=Control Panel")
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
new LeftTuple(f0,sink)
DataStreamSink<OUT>
concatRef.isEightBits=true
Map<String,Object>
mGnssCallback != null
ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
mMccStr == null
ISelectionProvider.class
field.createField(fieldType.indexedToReadable((String)sortValue),1.0f)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())
HiveConf.setLongVar(jobConf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
holder.setGone(getLoadFailViewId(),visible)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
lp.resolveLayoutDirection(layoutDirection)
si.id == id && si.taskRemoved == taskRemoved
javacError(message,null)
Loader.getResource(AUTOCONFIG_FILE,classLoader)
durableSubscriptions.remove(key)
Map<String,Object>
selenium.click("//li[4]/span/a/span")
src.getMaxFileSize()
WEB_SYNC_MANAGER=false
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
OPTION=36
parser.parse(INFO_OPTIONS,args,true)
off > buf.length
mUserManagerHelper.getAllUsers()
Boolean.parseBoolean(attrValue)
LOGGER.isDebugEnabled()
RuntimeException.class
super.onAttachedToWindow()
autoCommit != null && autoCommit != conn.getAutoCommit()
c.close()
mUserPaddingStart >= 0
new NullSafeComparator<>(comparator,true)
myCards.add(card)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
mUiHandler.removeCallbacks(pae)
this.getDrawnBoundingBoxE6().getLatitudeSpanE6()
javaChannel().isOpen() && config().getSoLinger() > 0
catalog.getStyleByName(info.getWorkspace(),info.getName())
mail.getClass().getSimpleName()
new QueryException(e,"Error in preloading targets. %s: %s",e.getClass(),e.getMessage())
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
storeField(field,true,pexp,current,visitor,receiver.getData())
mSharedElements.size()
loaded.getLoaded().getDeclaredConstructor()
0 != mUnwantedNetworkCapabilities
loaded.getLoaded().getDeclaredConstructor()
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
from > to
@Override public Response description(String description){   this.setDescription(description);   return this; } 
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static CharSequence get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
list.isInternal()
pendingInactive.addAll(inactive.values())
sentence.getTokensWithoutWhitespace()
/**   * Returns an immutable  {@link Message} based on the fields that set in this builder.   */ public abstract M build(); 
from >= to
AutoImportFix.createFactory()
attribute.getDefinition().getMarshaller()
info != null
message + end
mappers.mapper().searchQuoteAnalyzer()
StringBuilder buf=new StringBuilder(name.length() + parameters.length * 10); 
UpgradeStepRegistrator.class
new DeoptimizeNode(node.action(),node.reason(),node.getSpeculation())
mThumbPosition >= getThumbScrollRange() / 2
showRecentApps(true,false)
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
RowKey.prefixKeyWithSalt(key)
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new RoutingControlAction(this,newPath,true,callback)
((FillLayout)parentLayout).marginHeight=0
Boolean.parseBoolean(attrValue)
activity.createTimeListPreference(settings.LIVE_MONITORING_INTERVAL,SECONDS,MINUTES,1000,R.string.live_monitoring_interval,R.string.live_monitoring_interval_descr)
return true; 
mock.expectedMinimumMessageCount(2)
Thread.sleep(500)
ignite.jcache(CACHE_NAME)
i < path.length() && path.charAt(i) == PERIOD
refreshRotationLockTile()
drawable != null && mActualHeight > mClipTopAmount
selenium.isElementPresent("link=Control Panel")
assembledServletDefinitions.put(servletName,entry.getValue())
stepsNumber=1
builder.breakOp(" ")
lookupService.lookupPrincipalByName(user)
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
benchmark.expectAround("Throughput to index issues",throughputPerSecond,6500,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
new MccEntry(204,"nl",2,"Europe/Amsterdam","nl")
new ProxyClassLoader(BookStore.class.getClassLoader())
writeString(writer,fieldName,String.valueOf(reader.getDouble()))
ClassLoader rootClassLoader=classLoaderFactory.createFilteringClassLoader(classLoader,rootSpec); 
selenium.isElementPresent("link=Control Panel")
new LayerView(this,0x0f00ff00)
hasRows(newTableName)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
editor.apply()
cursor.getCurrentValueEndPosition()
synchronized (mAuthorities) {   writeStatusLocked(); } 
new GroupDialog(frame,null)
getRedeliveryDelay()
type.getDeclaredConstructor()
winAnimator.prepareSurfaceLocked(recoveringMemory)
JSLinterUtil.validateInterpreterAndPackage(collectedInfo.getProject(),TsLintDescriptor.PACKAGE_NAME,collectedInfo.getState(),collectedInfo.getVirtualFile())
e.printStackTrace(css_.err)
RandomDocumentPicks.randomIngestDocument(random(),Collections.emptyMap())
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")&& !str.endsWith("-javadoc.jar")
"Executing SQL script from " + scriptPath
formatTimeMs(scanWifiLockOnTime / 1000)
mActiveStreamType == -1 || streamType != mActiveStreamType
getOrder()
new LwjglPreferences(name,".prefs/")
myInitialSelection >= 0 && myIpnbPanels.size() > myInitialSelection
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
isTestOnReturn()
EnumDict<Object>
EPS_THRESHOLD=1e-5
mp.getResolvedValue()
@Nullable
new UnsupportedOperationException("Not implemented")
dynamicType.getLoaded().getDeclaredConstructor()
log.debug("Can't set auto-commit state: " + e.getMessage())
new Window(window,windowSize,begin,end)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
StreamException se
VMDebug.attachAgent(library,classLoader)
newHeight - BORDER_THICKNESS
Throwable e1
Entity::propertyVisibility
popup.requestFocusInWindow()
connection.getContentLength()
super.onPause()
viewHolder.getItemViewType() == TYPE_EDIT || viewHolder.getItemViewType() == TYPE_DIVIDER
!exists
final UUID userToken=getUUID(r,"user_token"); 
outerClassField.isPrivate()
getKeyFromGrant(grantAlias)
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
getOverrideConfiguration()
ClassFileVersion.forThisVm()
resultList.last()
new StringBuilder(253)
selenium.isElementPresent("link=Control Panel")
INDENT_BREAK_FROM_CASE
logger.debug("Cannot play playlist ({})",e.getMessage())
IccUtils.cdmaBcdByteToInt((byte)0x8c)
Table.isModelTable(tableName)
appearance.getFloat(attr,0)
Assert.assertEquals(120L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
Throwable ex
ver.isNightly()
highlighterStart <= end
mFs.mkdirs(new Path(path))
x instanceof ISeq || x instanceof IPersistentList
appInfo.metaData.get(key)
amp*=0.9
answer == null
MessageOutput.Factory<DiscardMessageOutput>
LOGGER.fine(e.toString())
TreeClassChooserFactory.getInstance(project).createAllProjectScopeChooser(title)
VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1
toolItem.getParent()
loaded.getLoaded().getDeclaredConstructor()
new BindException(newConcept,"concept")
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
qux.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
Long.parseLong(name)
Utils.writeUtf8File(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
mCameraUser.submitRequest(request,true)
e.toString()
new StringBuilder(726)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
ScanResult.is5GHz(frequency)
strat.getLevelSize(0) > 1
remaining == 0
scores.getAlgorithm()
Throwable exception
/**   * Our event dispatcher.  */ private MediaEventDispatcher mediaDispatcher=new MediaEventDispatcher(); 
selenium.isElementPresent("link=Control Panel")
sep < 0 || sep > j
alertDialogBuilder.setNegativeButton(resources.getString(R.string.title_deny),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=true;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),true);     latch.countDown();   } } )
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
method.getGenericReturnType().toString()
platformVersion < M
mKeyguardController.isKeyguardShowing(display.mDisplayId)
createTestBlockCapsule(1533529947843L + 3000L * 7,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
logger.trace("new cluster state [{}] after waiting for master election to fail shard [{}]",state.prettyPrint(),shardRoutingEntry)
setIntegerPart(String.valueOf(integerPart))
mTo == 0
Object minFractDigits=properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
Integer.parseInt(v)
assertEquals(conf,(Configuration)serializeDeserialize(conf))
continueUpdateBounds(HOME_STACK_ID)
rdi != null && !rdi.getPath().equals("/")
originalRemoteAddr != null
public Exception getCause(){   return reason; } 
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
pm.performDexOpt(pkg,null,true)
LOG.warn("src link in the context java doc window does not attached")
remaining == 0
version > 0
option.getJavaType()
x2 - x1
result.length <= list.size()
new AnalyzedToken(word,currTag,lemma,pos)
UpgradeStepRegistrator.class
logger.debug("File descriptor is: " + fd)
ArraySet<UidRange>
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
mInner.cancel()
newDecl.isNovel()
ActorSDK.sharedActor().style.getDefaultBackgrouds()[2]
underlying.next()
modelNode.hasDefined(LOCAL)
RELAX_TIMING ? 2000 : 100
mapper.getTypeFactory().constructType(Statistics.class)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
DarkIconDispatcher.getTint(mTintArea,mWifiActivity,mIconTint)
Resources.getResource(AbstractNativeExecutableStarter.class,NATIVE_STARTER_CXX_SOURCE)
out.writeInt(this.connectionAddress.getPort())
mUiHandler.postDelayed(pae,timeout)
MethodSpec.methodBuilder("getDatabaseName").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement("return $S",databaseNameString)
value="email_index"
eventListeners != null
isFastScrollAlwaysVisible()
defaults.put(PREVIEW_PANEL_HEIGHT,0.65)
Assert.assertEquals(3,definitions.size())
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
tracesDir.mkdirs()
synchronized (mLock) {   updateDisplayLocked(); } 
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
result.ocFile.getMimeType()
Trans != NO_TRANSPOSE
lastPosition == null || position.getFixTime().compareTo(lastPosition.getFixTime()) > 0
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.getDefaultInstance())
world.setBlock(i,j,k,blockId,meta,3)
UI_TIMEOUT=5000
builder().experimentalAnalysisTestingImprovements(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true)
ListUtil.isEmpty(exclusions)
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
mActivities.remove(id)
serialVersionUID=1325597275
expression.getElse()
getFragmentManager().beginTransaction().replace(R.id.content_frame,fragment,CATEGORY_TAG)
LOG.warn("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
!rootPortletId.equals(PortletKeys.WIKI_DISPLAY)
refreshRotationLockTile()
textEndOffset > document.getTextLength()
new AffineTransform(mTextScaleX,mTextSkewX,0,1,0,0)
selenium.isElementPresent("link=Control Panel")
String message
mUiHandler.removeCallbacks(pae)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
RESULT_TIMEOUT=5000
new DroolsParserException(e.toString(),e.getCause())
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
pool != null && pool.getDataSource().getClass().isAssignableFrom(iface)
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build,Collector.Characteristics.UNORDERED)
new IllegalStateException("Advertising can't be both connectable and anonymous")
ImmutableSet<SourcePath>
e.toString()
mWm.freezeRotation(-1)
context.getOpPackageName()
telephony.getVoiceMessageCountForSubscriber(subId,getOpPackageName())
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
Thread.sleep(500)
this.get(0)
mNwService.setInterfaceConfig(mTetherInterfaceName,ifcg)
selenium.isElementPresent("link=Control Panel")
executeJobExecutorForTime(10000,200)
case 2: 
((BCECPrivateKey)privKey).getD()
gatherDisableActionsLocked(mCurrentUserId)
bar.setResultWaitTime(3500)
return ctx; 
upload1.getUploadEndTimestamp() == 0 || upload2.getUploadEndTimestamp() == 0
serialVersionUID=879945540
mService.disableEphemeralNetwork(SSID)
indexLock.writeLock()
instructions == null
logExitAPICall(log,transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames,null)
mAttributes.getAllFlags()
patternLen == 0 || nameIndex >= nameLen
server.getClass()
getTestName(true)
group.getRoles()
e.toString()
-latitude
ai.uid < Process.FIRST_APPLICATION_UID
si.deliveryCount > 1
i - sizeDifference >= 0
assertTrue(Modifier.isFinal(modifiers))
qux.getDeclaredConstructor()
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""),mTouchDisabled ? "T" : "f")
logger.debug("Cannot handle control command ({})",e.getMessage())
max=3
Color.blue(endColor)
expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR
Set<PyRequirement>
XMLOutputFactory.newInstance()
model.getName()
new StringBuilder(120)
_node.getNodeId()
project == null || project.isDisposed()
(parentRestricted && !restricted) || (!parentAsked && asked) || hook.isDangerous()|| !clear
a.getDimension(attr,0)
1L << rem
getJSONValue(activity.getExtraData(),"title",kbArticle.getTitle())
props2.size() == 1 && !props2.get(0).getName().contains(".")
model.hasData() && container.isReadyToRun() && !model.isUpdateInProgress()
_log.warn(ioe,ioe)
mLteSignalStrength > 31
new IllegalArgumentException("the ast is null")
binaryResultsDirectory.getAsFile().getOrNull()
GrailsDataBinder.createBinder(instance,instance.getClass().getName(),request)
index <= myIntermediateCalls.size()
private final T view; 
Env.fromString(env)
selenium.isElementPresent("link=Control Panel")
resources.getDimensionPixelSize(R.dimen.close_handle_height)
status().isFound()
rematchAllNetworksAndRequests(networkAgent,oldScore)
BackupManagerServiceInterface svc=mService; 
DEPENDENCIES dependencies
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
c <= 'Z'
1
mCollapseOffset > 0
@Override
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
MavenBuild.create(new File("projects/struts-1.3.9-diet/pom.xml")).setGoals("clean package","org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar")
Observable.interval(0,1,TimeUnit.SECONDS)
liquid.canonical() != null && liquid.canonical().getRenderingIcon() != null
this.nextNode
anyLong()
new SubjectSearchEmitterFragment()
format.getShape() == JsonFormat.Shape.STRING || format.hasPattern() || format.hasLocale() || format.hasTimeZone()
resource.removeExtractor(input.getId(),extractorId)
selenium.isElementPresent("link=Control Panel")
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
state.addNullness(false,x)
executeMethodAndConvertExceptions(httpPatch)
allowedAudiences.containsAll(providedAudiences)
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"",str -> null != str)
FileUtil.isAbsolutePlatformIndependent(workingDirectory)
Number value=list.get(i); 
verify(collector,never())
ColorProperties.getColor("menuDisabledForeground")
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
!algo.equals(alloc.algo)
(float)getMax() / 20
!showNotifications.isNull()
disabledIf.map(DisabledIf::expression)
new ProgressDialog(getActivity(),R.style.ProgressDialogTheme)
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
op.getResultAsObject(false)
selenium.isElementPresent("link=Control Panel")
testLogger.info("[v] Unsecure sync completed")
items[32]
"Refreshing storefiles of region " + bestRegionReplica + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
ALIASES.addOperationParameterDescription(resources,"infinispan.container",op)
Maps.newTreeMap()
public class PublicKeyJwsSignatureVerifier implements JwsSignatureVerifier {   private PublicKey key;   private AlgorithmParameterSpec signatureSpec;   public PublicKeyJwsSignatureVerifier(  PublicKey key){     this(key,null);   }   public PublicKeyJwsSignatureVerifier(  PublicKey key,  AlgorithmParameterSpec spec){     this.key=key;     this.signatureSpec=spec;   }   @Override public boolean verify(  JwtHeaders headers,  String unsignedText,  byte[] signature){     try {       return CryptoUtils.verifySignature(unsignedText.getBytes("UTF-8"),signature,key,Algorithm.toJavaName(headers.getAlgorithm()),signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
logger.fine("attaching ack callback to event")
{abiOverride}
fragmentManager.beginTransaction().replace(containerId,tabsFragment)
updateChildren()
Integer.valueOf(setting)
host1.getSocketAddress()
child.resetRtlProperties()
selenium.isElementPresent("link=Control Panel")
ChannelBuffers.buffer(order(),length)
LOG.warn(msg)
getSupportActionBar().setDisplayHomeAsUpEnabled(false)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
mCurrentVrCompositorService == null
StringBuilder sb=new StringBuilder(100); 
Throwable exception
request.mandatoryParamAsStrings("tags")
getTestName(true)
mWPAndroidGlueCode.setTitle(title.toString())
Collection<GridDrStateTransferDescriptor>
a.getFont(attr)
Settings.Global.getInt(mContext.getContentResolver(),SETTING_ENABLE_SCORER,0)
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
return str2; 
lock.isHeldByCurrentThread()
new Paint()
getCutoffText(RECENTLY_PLAYED_CUTOFF,context)
myBalloon != null && size.width < myBalloon.getSize().width
!documentsToCommit.isEmpty() || currentTask != null
AndroidExcludedRefs.createAppDefaults()
new SingleThreadedBuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())
selenium.isElementPresent("link=Control Panel")
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24))
t.isFreeformTask() || targetStackId == FREEFORM_WORKSPACE_STACK_ID
firstPos > mTargetPos
invocation.addAttachments(context)
CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
verifyPositions(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
assertEvaluate(buildFile).moduleLookup("txts")
LOG.d(TAG,"Incoming Result")
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
start.set(Calendar.DAY_OF_MONTH,startDay)
node1.isEquivalentToTyped(node2)
new BooleanPreference("show_view_angle",false,false,true)
60L + 120L
"[1.9.4]".equals(mcVersionString) || "[1.9,1.9.4]".equals(mcVersionString) || "[1.9.4,1.10)".equals(mcVersionString)
intent.resolveType(getContentResolver())
mQsDensityContainer.getX()
new NeuralNetConfiguration.Builder().kernelSize(20,20)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
logger.trace("Retreiveing door data")
location.getExtent()
WEB_SYNC_MANAGER=false
new DisappearAnimationUtils(context,125,1.2f,0.6f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
merc.getDistribution()
mFile.getStoragePath()
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
getResponse("GET","/books/" + bookId,null)
URLDetail wd
animation.setDuration(300L)
formatTilesDefsXML(fileName,newContent)
mAdapter != null && mDataSetObserver != null
parsed && name.length() > 0
getClassInternalName(exceptionType)
CRASH_AT_SIZE=20_000
type == BinaryMapAddressReaderAdapter.POSTCODES_TYPE
userInfo == null || !userInfo.canHaveProfile()
context == null || context == EGL_NO_CONTEXT
internalRemoveChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
telephony.isRinging(getOpPackageName())
LOGGER.error("Error during XML parsing",e2)
ListWithDefault<T>
public static IdeaTitledBorder createTitledBorderSimpleWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),15,1,new Insets(3,0,6,0)); } 
ProratedOrderItemAdjustmentImpl other=(ProratedOrderItemAdjustmentImpl)obj; 
slot_name_value_pair(context,fc)
httpRequest.getSession().removeAttribute(HttpSessionIntegrationFilter.ACEGI_SECURITY_AUTHENTICATION_KEY)
topPanel.addView(mCustomTitleView,0,lp)
application.getBaseContext()
Slog.e(TAG,sb.toString())
lightSpecular[lightCount][3]
mAuthorities.valueAt(i)
sep < 0 || sep > j
JavaScriptClassContributor.getItemsByNameStatic(name,project,includeNonProjectItems)
@ConditionalOnEnabledHealthIndicator("diskspace")
mOuterRadius * 0.9f
_parms._export_native_model_prefix != null && _parms._export_native_model_prefix != ""
globalExecutionStats.getStartedSplits()
getService().animateCollapseNotifications()
jMethod.put("used",mUsed)
AndroidDistinguishedNameParser dnParser=new AndroidDistinguishedNameParser(cert.getSubjectX500Principal()); 
!DescriptorUtils.isTopLevelDeclaration(descriptor) || !(descriptor instanceof FunctionDescriptor) || descriptor instanceof ConstructorDescriptor
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
cacheFb.setMaxEntriesLocalHeap(5)
Simple.forClass(value.getClass())
cfg.setIdentity(identity)
theClass.getConstructor()
JBUI.Borders.empty(6,0)
LOG.warn("Failed to look for classes in " + jarFileName + ": "+ ioEx)
resp.setHeader("Access-Control-Allow-Headers",headers)
MAX_RETRIES_ON_ASSOCIATION_REJECT=16
new SpannedString(first,true)
callNode.call(getIndirectCallTarget(getContext(),function),arguments)
from > to
epsi(otherArr)
mContext.startActivityAsUser(shortcutIntent,UserHandle.CURRENT)
scheduleRemoveStartingWindowLocked(wtoken)
Object model
progress != null && progress.isResumed()
httpResponseCode != 204
c <= 'Z'
FRAME_STATS_COUNT=16
writePermission.intern()
serviceDataUuid == null || mServiceData == null
value <= count
Exception t
msbFragmentEntry.getMsbFragmentEntryId()
uri.getAssetName().toLowerCase()
LOG.debug("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
Assert.assertEquals(120L,ownerCapsuleNew.getNetUsage())
!JACKSON_16
mListener.getConnectionId() != -1 && request.mConnectionID != null
new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis(),ISOChronology.getInstanceUTC())
Boolean.parseBoolean(attrValue)
log.error("Problem in JSR223 script ",e)
cause instanceof KBArticleImportException || cause instanceof KBTemplateContentException || cause instanceof KBTemplateTitleException|| cause instanceof NoSuchTemplateException|| super.isSessionErrorException(cause)
params.getSimulatedPlatformVersion()
mMccStr == null
new Paint()
mDrawBitmap == null || mDrawBitmap.getWidth() != mViewPortHandler.getChartWidth() || mDrawBitmap.getHeight() != mViewPortHandler.getChartHeight()
type == VertexDataType.VertexBufferObject || Mesh.forceVBO
LensPositionSelectors.lensPosition(LensPosition.BACK)
v.makeCopy(null)
mUserManager.isUserUnlocked(userHandle)
20000 * 4 * 3
applicationStatistics.incrListUserTimes()
Integer.parseInt(getOptional("kylin.engine.spark.min-partition","1"))
a.getString(attr)
mMessageReference != null && mMessageReference.flag != null
log.error("Exception while processing message: " + e,e)
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public PropertyKey getBindHostKey(){   return mBindHostKey; } 
JobQueueUtils.getFeedbackQueueName(jobClientNodeGroup)
DirectoryReader reader=IndexReader.open(dir); 
map.get(beanName).getType()
ReplicationListResponse.class
shadowSize <= 0
case 12: 
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
assertTrue(dr.isFailure())
new LocalTachyonClusterResource(Constants.GB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
type.createBlockBuilder(new BlockBuilderStatus(),4)
setValue(object,value.intValue())
filterNotTypes.length()
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
e.printStackTrace(System.out)
JDBCUtils.safeGetString(dbResult,"PROCESS")
getContext().registerReceiver(mReceiver,filter,null,mHandler)
appWindowToken == null || !appWindowToken.isVisible()
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
SimpleOrderedMap<Object>
assertTrue("reuse-address",networkConfig.isReuseAddress())
case AUTOGENERATED: 
selenium.isElementPresent("link=Control Panel")
pathEditor.reset(sdk != null ? sdkModificator : null)
mapper.getTypeFactory().constructType(Event.class)
((ResolvedJavaType)obj).toJavaName()
assertPlanEquals(expectedPlan,actualPlan)
computator.getContentRectMinusAllMargins()
mono.onErrorResume(ex -> Mono.error(getReadError(bodyParameter,ex)))
o instanceof XidImpl
sessionTrackingModes.contains(SessionTrackingMode.COOKIE) && sessionTrackingModes.contains(SessionTrackingMode.URL)
TYPE_ATSC_M_H=0x00030300
this.onGetInputStream()
getBoldStatus(elements[0])
new GenericItem("Test","Test"){   @Override public List<Class<? extends State>> getAcceptedDataTypes(){     return null;   }   @Override public List<Class<? extends Command>> getAcceptedCommandTypes(){     return null;   } } 
DynamicAttributeRanking.refreshMinMax(this,graph)
Thread.sleep(2000)
statistics.addRemoveTimeNanos(System.nanoTime() - start)
returnPoshiElement == null
ClientCnxn.class
entry.getValue().getLastAccessed() < expireTime
doTestWrapMethod(true)
mUiHandler.postDelayed(pae,timeout)
mm.tryLock(key,10,TimeUnit.SECONDS)
InputMethodManager.getInstance()
assertEquals(strangeVocab.getIndex(),0)
_isNegInf(text)
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
typeAddrPair.getTypeReferenceField().getTypeDescriptor()
i >= 1000
ImmutableList.of(base)
dynamicType.getLoaded().getDeclaredConstructor()
atLeast(2)
OperatorGroupBy<Long,T>
getMaxSheetTranslation()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent) || mRunning2dInVr != running2dInVr
timeout=90000
if (sIsSELinuxEnabled) {   if (packageName == null) {     sServiceAppDataFile=new ZygoteService();   }  else   if (packageName.equals("android")) {     sServiceAppDataFile=BinderService.getService(BinderService.TARGET_APP);   }  else {     sServiceAppDataFile=new DirectAccessService();   } }  else {   sServiceAppDataFile=new DirectAccessService(); } 
JDBCUtils.safeGetInt(dbResult,"pid")
getDelegate().handle(exchange).onErrorResume(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
referenceStep.isPartitioned()
periodStr.equals("null") || periodUnit == 'n'
tnCount=70
Element.F64_2(mRS)
future.awaitUninterruptibly()
Integer.parseInt(attrValue)
UIUtils.getFontHeight(group) * 15
client.disconnect()
appContext.getSystemService(Context.WINDOW_SERVICE)
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_CAMERA,showCamera)
assertNull(trie.get("tee:bar"))
w.lock()
1 + 3
procs.getInt("NULLABLE")
Integer.parseInt(leftStr)
TelephonyManager.getDefault().getCurrentPhoneType()
return true; 
t.type.tsym.flatName()
log.error("Problem in JSR223 script ",e)
"Invalid version for inner update [isNew=" + entry.isStartVersion() + ", entry="+ entry+ ", newVer="+ newVer+ ']'
info.prefixedName()
mUiHandler.removeCallbacks(pae)
new Paint(Paint.ANTI_ALIAS_FLAG)
Long.parseLong(deadline)
List<Long>
pos == 0 && aggregator == null
changeName.equals("changeWithNestedTags") || changeName.equals("sampleChange") || changeName.equals("output")
defaultDndAccess != null
topPanel.addView(mCustomTitleView,0,lp)
format.getName()
panel.getTabIndex() == 0 && tab.indexOfComponent(panel) != -1
Log.w(t,"Unable to obtain BouncyCastle provider! Decryption may fail!")
convert31XToMeters(xB,xA)
" firstActiveTime=" + firstActiveTime
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
context.getBeanNamesForType(type,false,false)
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
log.debug("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
config != Config.ARGB_8888 || colorSpace == ColorSpace.get(ColorSpace.Named.SRGB)
System.setProperty(KYLIN_JOB_JAR,path)
protected Task createTaskCompile(File wsdlFile,File tmpDir,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Compile",wsdlFile);   JavaCompile javaCompile=GradleUtil.addTask(_project,taskName,JavaCompile.class);   javaCompile.setClasspath(getConfiguration());   File tmpBinDir=new File(tmpDir,"bin");   javaCompile.setDestinationDir(tmpBinDir);   javaCompile.setSource(generateTask.getOutputs());   return javaCompile; } 
scheduler.scheduleAtFixedRate(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
cache.flushAndForce()
mPowerManager.isInteractive()
inLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
Math.min(desired,heightSize)
tfoi.setSpecifyingFormat(wSpecifyFormat.getSelection())
DEFAULT_VIBRATION=300L
app.invokeLater(() -> Messages.showErrorDialog(text,title),ModalityState.any())
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(10)
LOG.error("Could not get value for property[" + field.getQualifiedFieldName() + "] for product id["+ product.getId()+ "]",e)
source.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
Object[]
addTest(18,18,0.0f)
processEngineConfiguration.getCommandExecutor()
wsSessions == null
Component.isNestedTree(component) || node.hasNestedTree()
dlFileEntryType.getName(Locale.getDefault())
assertThat(t).isEqualTo(e)
LinkedHashMap<String,ASTNode>
ImmutableList<Arg>
LOGGER.debug(msg.apply())
driverPropertySource.getPropertiesWithDefaults()
getDoubleValue(key,0)
mTask != null && mTask.icon != null
bo.write(0x08)
StringBuilder error=new StringBuilder("GroovyServlet Error: "); 
getSonicResourceCachePath()
@Input(InputType.Association) AbstractBeginNode loopBegin; 
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mSeekBar.setProgress(0,true)
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
mValues[8]
Log.w(TAG,e.getMessage(),e)
true || mSpew
quoineTicker.getLastTradedPrice()
DefaultJavaLibrary libraryRule=AndroidLibraryBuilder.createBuilder(buildTarget).addSrc(src).build(graphBuilder); 
_resourceReferences.contains(file)
Long.valueOf(count1).compareTo(Long.valueOf(count2))
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
dynamicType.getLoaded().getDeclaredConstructor()
new Prepared(implementations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),finding)
property.getGetter().valueOrNull()
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
mNotificationsUtilsWrapper.mapJsonToFormattableContent(headerArray.getJSONObject(i))
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Schedulers.computation()
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).verifyError(IllegalStateException.class)
totalTimeMeasurement.startedAt()
mSearch.isManualSearch() && mSingleAccountMode && mAccount.allowRemoteSearch()
mUserStates.valueAt(i)
compressedSliceInput.getRetainedSize()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).subscriberContext(withUser)
getTaskWriterCount(session) > 1 && !node.getPartitioningScheme().isPresent()
idAnnotation != null && !method.isBridge()
this.counterpart.split("/",2)
ConstantNode firstMethodConstantNode=ConstantNode.forConstant(firstMethodConstant,metaAccess,graph); 
newDecl.isNovel()
in.readVInt()
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.user.password=password")
!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
CharSequence text
new Handler(IoThread.getHandler().getLooper()){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
iconSize * DisplayMetrics.DENSITY_MEDIUM >= availableHeight
/**   * An action to create an implementation of  {@link ExecutingTransformer} that support Java 9 modules.  */ protected enum FactoryCreationOption implements PrivilegedAction<Factory> {/**   * The singleton instance.  */ INSTANCE; @Override @SuppressFBWarnings(value="REC_CATCH_EXCEPTION",justification="Exception should not be rethrown but trigger a fallback") public Factory run(){   try {     return new Factory.ForJava9CapableVm(new ByteBuddy().subclass(ExecutingTransformer.class).name(ExecutingTransformer.class.getName() + "$ByteBuddy$ModuleSupport").method(named("transform").and(takesArgument(0,JavaType.MODULE.load()))).intercept(MethodCall.invoke(ExecutingTransformer.class.getDeclaredMethod("transform",Object.class,String.class,Class.class,ProtectionDomain.class,byte[].class)).onSuper().withAllArguments()).make().load(ExecutingTransformer.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER_PERSISTENT.with(ExecutingTransformer.class.getProtectionDomain())).getLoaded().getDeclaredConstructor(ByteBuddy.class,TypeLocator.class,TypeStrategy.class,LocationStrategy.class,Listener.class,NativeMethodStrategy.class,InitializationStrategy.class,BootstrapInjectionStrategy.class,DescriptionStrategy.class,RawMatcher.class,Transformation.class));   }  catch (  Exception ignored) {     return Factory.ForLegacyVm.INSTANCE;   } } @Override public String toString(){   return "AgentBuilder.Default.ExecutingTransformer.InheritanceAction." + name(); } } 
input.getName().toLowerCase().startsWith(partialName.toLowerCase())
hits2.length()
device.getMaxConnectionState()
SCRIM_BEHIND_ALPHA_KEYGUARD=0.45f
((BigDecimal)getConfig().get(INTERVAL)) != null && ((BigDecimal)getConfig().get(INTERVAL)).intValue() > 0
String message
PostgreSQLConnectorConfig.class
connection.getContentLength()
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsWrite")
timestamp - base_time >= Const.MAX_TIMESPAN
notifyAll()
TreeSet<String>
new TextPaint()
jniGetLocalAxisA(addr,tmp)
index > widgets.length
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
verifyAttributes(decoder,binary("79790020940A035985708053908307060104900402788950301217070401538F0003E8210D0A"))
mPtr != 0L
superClasses.length == 1 || node.isNewStyleClass()
revWalk.close()
Long.valueOf(2)
i < 10000
childLeftTuple.reAddRight()
new UnsupportedOperationException(getClass().getName())
buffer.size()
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
loaded.getLoaded().getDeclaredConstructor()
new ConcurrentMapCache("")
doTest(true)
temp.reAddLeft()
Files.exists(start,LinkOption.NOFOLLOW_LINKS)
PortalTopLevelBuildData portalTopLevelBuildData=getBuildData(); 
new DefaultConfiguration(connectionProvider,null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
getInputs().files(new Callable<FileCollection>(){   public FileCollection call() throws Exception {     IvyPublicationInternal publicationInternal=getPublicationInternal();     return publicationInternal == null ? null : publicationInternal.getPublishableFiles();   } } )
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
_log.info("Skipping parameter with key " + key + " because of invalid value "+ kvp[1],iae)
mLteSignalStrength > 31
loaded.getLoaded().getDeclaredConstructor()
_appendables == null || _appendables.length == 0
tracesDir.mkdirs()
assertContains(actualTables,expectedTables)
Exception e
generateFluentSetters()
evaluate("value = read_config('foo', 'bar', 'baz')").moduleLookup("value")
myMaxRowCount=30
selenium.isElementPresent("link=Control Panel")
CommitColumnClass
mNaturallyPortrait ? "true" : "false"
mExpandedDialog != null && mExpandedParams != null
client.completion(className,buf,cursor)
return 211; 
endFunction("delete_column_statistics_by_table: ",ret != false,null)
offset(1000000.0)
new FtrlDelta(true,alpha)
StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName())
lowByte.equals("")
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
imageUrl.length() > MAX_FILE_NAME_LENGTH
myPriorityRange.intersects(element.getTextRange())
this(file,EXTENDED_NCSA_FORMAT); 
i >= 0
createRx(config)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
cfs.truncateBlocking()
MethodCallUtils.isCallToMethod(expression,"java.util.Formatter",null,"format",null) || MethodCallUtils.isCallToMethod(expression,"java.io.Writer",null,"append",null) || MethodCallUtils.isCallToMethod(expression,"com.google.common.base.Preconditions",null,"checkNotNull",null)|| MethodCallUtils.isCallToMethod(expression,"org.hibernate.Session",null,"close")
display.getRealMetrics(mDisplayMetrics)
sm.getString("standardContext.stoppingContext",logName())
@Override
mBondState.setBondState(address.toUpperCase(),state,reason)
justBootedUp
BackChannelConduit.class
logger.trace("Error while matching regex [" + matcher + "] for string ["+ matched+ "] "+ pse.getMessage())
request.getPathInfo()
callbackList.getBroadcastCookie(i)
id.getType()
MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)
result.ocFile.getMimeType()
mChildrenExpanded ? mDividerHeight : mChildPadding
lock.isHeldByCurrentThread()
con.getClass().getSimpleName()
Exception e
collectCount <= lim
scanFlags & SCAN_NEW_INSTALL
labelCursor == null
getActivity() != null && getActivity().findViewById(R.id.detail_title) != null
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
selenium.isElementPresent("link=Control Panel")
indexSpec.setMaxLeafRecords(10000)
RCFileMergeMapper.jobClose(outputPath,success,job,console)
reactContext.runOnJSQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
Arrays.asList(Visualizer.class,ConfigElement.class,Assertion.class,Timer.class,PreProcessor.class,PostProcessor.class,SampleListener.class)
selenium.isElementPresent("link=Control Panel")
mEase3.setTextColor(mNextTimeTextRecomColor)
found != null && found != r
dlFileShortcut.getFileShortcutId()
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"cpuinfo",pw)
height <= 0
logger.error("Failed to execute lifecycle policy [{}] for index [{}]",policyName,idxMeta.getIndex().getName())
batteryVp > full
frag.addElement("status")
logger.isInfoEnabled()
LOG.info(title + "; " + message)
internalCluster().getDataNodeInstance(BlobIndicesService.class)
text.contains("Compilation completed successfully")
verifyAttributes(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
assertPlanEquals(expectedPlan,actualPlan)
message.getMessageId().getEntryLocator()
logger.error("Invalid Atmosphere Version {}",javascriptVersion)
parser.hasNext(5)
logger.warn("Configuration for influxdb not yet loaded or broken.")
BackupManagerServiceInterface svc=mService; 
report(n,MISPLACED_ANNOTATION,"@abstract","function with a non-empty body cannot be abstract")
builder.length() == 0 && s != null
tag2.getText()
realm.checkIfValid()
LOGGER.warn("Found legacy attribute value [{}] which will be converted to [{}] as part of a service multifactor authentication policy." + "The definition SHOULD manually be upgraded to the new supported syntax",valueToConvert,RegisteredServiceMultifactorPolicy.FailureModes.UNDEFINED)
targetType.getDeclaredConstructor()
((MapType)toCheck).getValuesType()
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
ticket.notifyAll()
mTextColorLink.getColorForState(ds.drawableState,0)
LLVMMetadata m2
verify(instrumentation,times(2)).isRedefineClassesSupported()
sNotificationData.currentPostItem > sNotificationData.totalPostItems
appearance.getInt(attr,0)
mActiveAgents.remove(info)
Files.createDirectories(destPath)
(visibility & VISIBILITY_MASK) == VISIBLE && mAttachInfo != null
queue.size() > 100000
mTrustListeners.remove(i)
mCollapsingTextHelper.setCollapsedTextGravity(gravity)
deltaY >= 0
ArraysUtil.join(nodes1,nodes2)
shift > 0 && newroot.length == 1
getData() ^ 0x7
new StringBuilder("Unexpected cipher suites: ")
currencyPair.counter.getCurrencyCode().toUpperCase()
new IllegalStateException("Advertising can't be both connectable and anonymous")
mock.expectedMinimumMessageCount(2)
mConnector.executeForList("volume","list","broadcast")
DEFAULT_BG_LOW_JOB_COUNT=1
setVerticalAlignment(CENTER)
DEFAULT_ALLOW_SPILLING=true
platformVersion < M
new GitException(ERROR_UPDATE_REMOTE_NAME_MISSING)
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
ONE_MINUS_DST_ALPHA(7)
Slog.d(TAG,"FLP HAL not supported")
writeDirectly(serverInfo + columnEnd)
id=16506
mGnssCallback != null
(System.currentTimeMillis() - startTime) < 30
log.error("Problem in JSR223 script ",e)
case 9: 
anchorView.getApplicationWindowToken()
writer.writeUshort(getReferenceIndex(instruction))
mapper.getTypeFactory().constructType(AuthConfig.class)
localPlayer.getWorldLocation().distanceTo(trapLocation) <= 2
localLOGV || true
command.getOldName()
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
assertEquals(10,sqlStatements.size())
logger.info(getName() + " has been started")
ConfigPropertyVetoException ex
position >= lastPos
ZLAndroidLibrary.Instance()
bestState.score()
log.error("Error while closing command context",exception)
LOG.error("{} failed to start",processRef)
buf.readShort()
resultMetaData.getColumnLabel(i)
doNothing().when(safeOutputStreamConsumer).errOutput(anyString())
origin <= other
res > mLen
Log_OC.e(TAG,"Unexpected intent " + intent.toString())
mNavigationBarView.getPaddingLeft()
taskIds.size()
getHandledPredicate()
oldVersion=9
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mBluetoothService.notifyIncomingA2dpConnection(address,true)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRole"),e.getCause().getMessage())
assertEquals(expected,actual)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
sampler.getFilename()
new FairAffinityFunction(false,512)
sep < 0 || sep > j
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
log.warn("Error parsing command line: " + e.getMessage())
lo != null
shuffleWithNonExistentUuids(project1.uuid(),project3.uuid())
c == null || c == interfaceClass
reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz)
pm.performDexOpt(pkg,null,true)
response.getLongContentLength()
basicFieldMetadata.getForcePopulateChildProperties() == null || !basicFieldMetadata.getForcePopulateChildProperties()
private final RulesProfile qProfile; 
LOGGER.info(msg.apply())
analysis.getTypeWithCoercions(expression)
mQsDensityContainer.getX()
assertEquals(10,batchExecutionAssistant.processedCount())
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
mPowerManager.isInteractive()
AuthUI.getInstance().silentSignIn(this,getSelectedProviders()).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     if (task.isSuccessful()) {       startSignedInActivity(null);     }  else {       showSnackbar(R.string.sign_in_failed);     }   } } )
file.getName()
invoiceDao.create(invoice,1,true,context)
getServiceForUserLocked(userId)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
new WitnessService(appT,context)
return 0; 
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
handleIncomingUser(Binder.getCallingPid(),callingUid,userId,type == ActivityManager.INTENT_SENDER_BROADCAST,false,"getIntentSender",null)
suggestion.getTooltip() != null && suggestion.getTooltip().getString() != null
params.getSimulatedPlatformVersion()
binary.getDisplayName()
hour <= 23
sendGetBlockHeaders(syncManager.getGapBlock().getHash(),FORK_COVER_BATCH_SIZE,0,true)
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.resourceLoader,this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
parent instanceof AppWidgetHostView || parent == null
dbStat.setInt(1,sessionType.getPid())
new DeoptimizeNode(deoptAction,deoptReason,speculation)
mappers.mapper().searchQuoteAnalyzer()
disable2ForUser(what,token,pkg,mCurrentUserId)
chatButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
logger.trace("Creating bloom filter for {} elements and spec {}",numElements,spec)
join("when() requires an argument which has to be 'a method call on a mock'.","For example:","    when(mock.getArticles()).thenReturn(articles);","","Also, this error might show up because:","1. you stub either of: final/private/equals()/hashCode() methods.","   Those methods *cannot* be stubbed/verified.","2. inside when() you don't call method on mock but on some other object.","")
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
data[1] > 10
DateUtils.parseDateStrictly(source,iso8601Patterns)
logger.fine(String.format("decoded %s as %s",str,p))
mService.getProfiles(UserHandle.myUserId(),false)
Bytes.toBytes(tableNameOrRegionName)
module.getProject()
target.getDestinationLinkAddress()
scheduler.getJobNames(groupName)
new LeftTuple(new DefaultFactHandle(1,"cheese"),null)
walk.close()
logger.debug("Cannot update the group coordinator ({})",e.getMessage())
this.tvShows.removeAll(tvShows)
new GroupTest(true)
v2 & 0xc0
null != m_parallel || XmlSuite.DEFAULT_PARALLEL.equals(m_parallel)
target == null || target.getNumFields() < this.mappings.size() + 1
version.getId()
MAX_DIMEN_FOR_ROUNDING=1920
assertEquals(8,LambdaOperations.values().length)
proxy == null || proxy != view.getAnimation()
id.required()
labelsMask != null
super.notifyListenersAboutRemovedElement(element)
selenium.isElementPresent("link=Control Panel")
dist >= maxDist
Integer.parseInt(stackIdStr)
rows[1].getLock().writeLock().unlock()
templatesToAddressList(engine,bcc,model)
new Rect(left,top,right,bottom)
i=2
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
mFinishing && mSupportHardware && mHwCenterX != null
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required",Constant.getZapHome())
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
platformVersion < M
getOldValue()
"Expanded " + before + " to "+ repository
version < 6.3
sep < 0 || sep > j
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
out.writeInt(sampleCount)
ServiceAnnouncingChatHandlerProvider.class
Exception t3
public Builder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } 
selenium.isElementPresent("link=Control Panel")
collector.awaitFinish(4000)
System.nanoTime()
log.debug(msg,t)
return true; 
conn.setTargetDecoration(srcDec)
message.getExpiresInSeconds() * 1000L
entityRenderMap.put(info.target,info.renderer)
log.error("Problem in JSR223 script " + e,e)
mUiHandler.removeCallbacks(pae)
greaterThanOrEqualTo(0L)
StateManagementUtils.createClearForkedExecutionMojoBinding()
invocations >= 4
getService().animateCollapseNotifications()
"+" + localNumberImprecise.substring(0,difference) + bareNumber
invokerFilterHelper.destroy()
Throwable exception
selenium.isElementPresent("link=Control Panel")
mBiometricUnlock.stop()
selenium.isElementPresent("link=Control Panel")
return toSelect; 
Thread.currentThread().interrupted()
mDuration >= 0 && mTransitions != null
defaultDndAccess != null
buffer.putInt(0x0)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
!mDreamsEnabledOnBatteryConfig
frequencyKhz <= 30000
settings.setTextSize(WebSettings.TextSize.LARGEST)
GL.glDeleteTextures(n,textures,Memory.getPosition(textures))
polyLats.length - 2
Localization.lang("Look up document identifier")
context.revertRestartRequired()
expected == double.class || expected == Double.class
new Mutation(KSNAME,ByteBufferUtil.bytes(key))
fragmentCollectionPersistence.findByGroupId(groupId,start,end)
ex.getLocalizedMessage().equals("no source files") || ex.getLocalizedMessage().equals("error: no source files")
mContext.getPackageManager().getApplicationInfoAsUser(sbn.getPackageName(),0,sbn.getUser().getIdentifier())
selenium.isElementPresent("link=Control Panel")
tmpls.length()
startActivityAsUser(intent,UserHandle.CURRENT)
ImmutableSet<ImplementationMethodDescriptor>
/**   * Telnet port.  */ private Integer port=5000; 
b.setSubject(TEST_SUBJECT).setSentDate(SENT_DATE).setHideTimeZone(true)
type == TRIANGLE || type == TRIANGLES
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
CommonBundle.getWarningTitle()
prefs.getBoolean(ACRA.PREF_DISABLE_ACRA,false)
ActorSDK.sharedActor().style.getTextPrimaryInvColor()
checkCall(receiver)
iconSize * DisplayMetrics.DENSITY_LOW >= availableHeight
Integer.parseInt(taskIdStr)
new IllegalStateException("Legacy advertising can't include TX power level in header")
ImmutableMap<String,EnvironmentIdExtractor>
dest.writeInt(mSubId)
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,myProject,myLastSelectedArtifact,false)
b == null || b.length == 0
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin library project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).implementationDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(2L)).subscriberContext(withAdmin)
fileMeasures.get(6L)
expression.getElse()
Thread.sleep(1000)
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
getClass().getSimpleName()
superClass == Object.class || superClass == null
Priority.getInstance()
queryIndex == 0 || queryProcessor.getResultContainers().size() == 1
PsiBundle.message("cannot.resolve.symbol")
getConfig().getBoolean(SPIDER_POST_FORM,true)
selenium.isElementPresent("link=Control Panel")
{4,7,5,11,6,5,7,5,11,11}
Throwable e
bb.get() == SEMICOLON_BYTE
schedulerName.equals(BOUNDED_FCFS_ALGORITHM)
type.getDeclaredConstructor()
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName) || "Metadata".equals(subSectionName)
is(8)
JvmDeclarationOriginKt.OtherOriginFromPure(element)
a("")
e.toString()
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,false)
pur.getFileById(dirId.getId())
type.getDeclaredConstructor()
query.isCatchup()
toArrayHelper(0)
Exception ex
report(n,MISPLACED_ANNOTATION,"@abstract","constructors cannot be abstract")
String.format("'%s'",targetPlatform.getName())
categories.size() > 0 && settingsViewCat != null
rootNode instanceof DBNDatabaseFolder
maxNamesLen - opt.length() + 3
calendar.add(Calendar.DATE,2)
mThumbPosition >= getThumbScrollRange() / 2
viewCache.getObject(monitor,this,name,DB2View.class)
LOG.error("Cannot create writer for app " + this.applicationId + ". Skip log upload this time. ",e1)
IllegalStateException.class
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
List<DelayedEntry>
AbstractBootstrap<ServerBootstrap,Channel>
loaded.getLoaded().getDeclaredConstructor()
Log_OC.e(TAG,"initFragments() called with invalid NULLs!")
clampScreenBrightness(mCurrentScreenBrightnessSetting)
selenium.isElementPresent("link=Control Panel")
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitude()
Boolean.valueOf(value)
selenium.isElementPresent("link=Control Panel")
mUserPaddingEnd > 0
Localization.menuTitle("Check integrity")
Slog.w(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
new CountDownLatch(2)
enabled=true
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
completion.switchOnError(ex -> handler.handle(exchange,ex))
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
mMatchMode=matchMode
matcher.find()
mBottomRightStrip=drawable
getDatabase().update(table,values,whereClause,whereArgs)
urlString.lastIndexOf("/monitoring")
new PoolBagEntry(null,0,pool)
fireCallPeerChangeEvent(CallPeerChangeEvent.CALL_PEER_STATE_CHANGE,oldState,newState,reason)
mGnssCallback != null
new HashSet<>(0)
selenium.isElementPresent("link=Control Panel")
new Paint()
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
VERSION=9
Integer.parseInt(st.nextToken())
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]),null)
result=55
this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)
os.write(bytes,0,len)
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=true
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
LOG.info("Failed to get file text from file " + fileName,e)
needRefresh || !isAllSized()
selenium.isElementPresent("link=Control Panel")
new StringBuilder(726)
new NeuralNetConfiguration.Builder().kernelSize(20,20)
parcelableClass.dotclass()
tracesDir.mkdirs()
telephony.isRadioOn(getOpPackageName())
selenium.isElementPresent("link=Control Panel")
mPackageUsage.write(false)
size=500
StringBuilder targetUrl=new StringBuilder(); 
ArraySet<UidRange>
new RendezvousAffinityFunction(false,512)
distance * MILES_KILOMETRES_RATIO
if (override) {   if (sb.charAt(sb.length() - 1) == ';') {     sb.deleteCharAt(sb.length() - 1);     sb.append(" !important;");   }  else {     Timber.d("AnkiFont.getCSS() - unable to set a font attribute important while override is set.");   } } 
defaultDndAccess != null
new UncheckedIOException(e)
getRecordCount()
mBindingServices.isEmpty()
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
test("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
V
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
selenium.isElementPresent("link=Control Panel")
mAdapter == null || !mIsAttached
a.length > count()
keyCode == KeyEvent.KEYCODE_SEARCH && event.getRepeatCount() < 1
new Paint()
getLogger().warn("Unknown classloader [IAE]: " + e.getMessage())
tool instanceof LocalInspectionToolWrapper && ((LocalInspectionToolWrapper)tool).getTool().getID().equals(shortName) || tool.getShortName().equals(shortName)
new int[3168]
context.getMainLooper()
getClassInternalName(exceptionType)
WordPress.getCurrentBlog().getLocalTableBlogId()
BrokerService broker=null; 
ListDataSource.unbounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
new PageException("不支持该SQL转换为分页查询!",e)
mAms.mWaitForNetworkTimeoutMs=2000
!showNotifications.isNull()
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
curLocation != null && curlatLng != null
_buf.position() - temp
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   @Override public void run(){     postUiTask.run(roots);   } } )
false && mNumOps.getOpsAdded() >= opsAllowed
in.markReaderIndex().readByte()
appInfo.targetSdkVersion > O
callback.onPulseFinished()
recursiveUFSDeletes.remove(ancestorPair)
Slog.i(TAG,"Failed to build intent for " + packageName)
assertThat(cluster).host(2).comesUpWithin(120,SECONDS)
shortComment.lastIndexOf(']')
DEFAULT_TIMEOUT_MILLIS=1000
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
CommandLineTransformer.transform("-i","-np","-v","-J-Xmx1g","-J-Xms1m","-nojmx","\"c:\\path to\\русский каталог\"")
domElement != null && domElement.getXmlTag() != null
selectionChildIndices[j] == i || (selectionChildIndices[j] == C.INDEX_UNSET && streamChildIndices[j] == i)
mStackScroller.getChildAtRawPosition(x,y)
token.equals("?") && !prevToken.equals("!") && !prevToken.equals("\u00a0")&& !prevToken.equals("\u202f")
localVideoEnabled && !audioManager.isSpeakerphoneOn() && !audioManager.isBluetoothScoOn()&& !audioManager.isWiredHeadsetOn()
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
sExecutorService.shutdownNow()
out.writeFloat((Float)obj)
assertPlanEquals(expectedPlan,actualPlan)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.click("//li[4]/span/a/span")
flags_=6
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
latch.await(600,TimeUnit.SECONDS)
numTouched >= 1
cache.localPeek(key)
mPowerManager.isInteractive()
mock.expectedMinimumMessageCount(3)
movementComponent.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
selectePathTemp != null
CACHE_MANAGER.addCacheIfAbsent(storageCache)
ys.atd(row)
new ChunkedUploadRemoteFileOperation(mContext,mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict(),timeStamp,size)
createFromResourceStream(res,value,is,srcName,null)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
finishAndRemoveTask()
new UdpConnector(localUdpPort,address,remoteUdpPort)
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
attributes.getAllFlags()
application.getBaseContext()
_log.warn(ioe,ioe)
rs.getNString(columnName)
new IncorrectOperationException(getClass().getName())
isGreaterOrEqual(platformVersion,M)
final ClientState clientState=(ClientState)msg.obj; 
Thread.sleep(800)
logoutRedirect != null
handler.update(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
StringBuffer b=new StringBuffer("ProcessInstance "); 
new TreeMap<>(String.CASE_INSENSITIVE_ORDER)
answer == 0
newName.equalsIgnoreCase(code[i].getPrettyName())
type.getDeclaredConstructor()
selenium.isElementPresent("link=Control Panel")
createDouble(buffer.length(),init,workspace)
battery.addPower(MjAPI.MJ,false)
assertEquals("The bus id should be changed","test",bus.getId())
initIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
chainHeight != 0 && confidenceProto.hasAppearedAtHeight()
private final QSDetailClipper mClipper; 
i < 2000
selenium.isElementPresent("link=Control Panel")
Integer.parseInt(leftStr)
server.getState()
partition.getParameters()
E edge
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
mResolver.start()
super.getAttributeAsString(FOUNDATION_ATTR_NAME)
in.getDepth() >= outerDepth
new KafkaComponent(context)
home.getAbsolutePath()
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
movementComponent.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
group.isCompany()
mMccStr == null
UnitBitSet.MAX_CHARS_IN_WORD < letters.length()
Assert.assertTrue(semaphore.acquire(3,TimeUnit.SECONDS))
IOException e
subjectBuilder.build()
ProxyHelper.createProxy(endpoint,false,ISay.class)
new MimeException(me)
Collections.sort(reflectionBackends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
Integer.parseInt(nextArgRequired())
U
display.getRealMetrics(mDisplayMetrics)
internalCluster().startNodesAsync(1)
substitutor.substituteAndCapture(parameters[i].getType())
memberRequestPersistence.update(memberRequest,false)
NameTable.getSpecificObjCType(var.getType())
TelephonyManager.getDefault().getCurrentPhoneType()
contentType != null && charset == null
KeyValue<String,Integer>
inLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
times + BASE_FILE_NUMBER
receiverUserId != mCurrentUserId && !isUidALocationProvider(receiver.mUid)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
T id
packageNames != null && packageNames.length == 1
annotations == null || annotations.isEmpty()
transform(matrix,source,width,height,true,recycle)
case 3: 
assertEquals("[]",q.toString())
mock.expectedBodiesReceivedInAnyOrder("Hello World 2")
TelephonyManager.getDefault().getCurrentPhoneType()
policyResources.stream()
logger.debug("running policy with current-step[" + currentStep.getKey() + "]")
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
LOG.info("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
script.getIntOperands()
heatpumpValues[66]
assertFalse(model.getUniqueItems())
command <= 0x07
queueLength.asString()
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
shortSizeDp >= 600
Thread.sleep(1000)
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
mDataAuthorities == null || data == null
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth")
new Paint(Paint.ANTI_ALIAS_FLAG)
animation == mHeaderInAnimation
TimeValue.timeValueMillis(100)
new Intent(ACTION_QUICK_CONTACT)
(new OpenEphyraCorpus()).commandLine("")
File modSource
dest.writeInt(mSubId)
new FormAttachment(wExcludeWildcardField,margin)
new GitException(String.format(ERROR_BRANCH_LIST_UNSUPPORTED_LIST_MODE,listMode))
mDisplayContent.mDividerControllerLocked.getWidth()
this.mPointerID == TouchEvent.INVALID_POINTER_ID
isNavBarVirtKey && !down && !canceled
new IndexWriter(tmpDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
view.isLaidOut() || view.getWidth() != 0 || view.getHeight() != 0
trade.getLimit()
request.getContentLengthLong()
tw.close()
Collection<SkyKey>
Arrays.asList("txt","text","yml","properties","csv","json","xml","atom","rss","png","jpe","jpeg","jpg","gif","wbmp","bmp")
endpoint.getHostAddress()
repositoryImpl.setClassNameId(getClassNameId())
StringBuilder sb=new StringBuilder(); 
UpgradeStepRegistrator.class
parent instanceof PsiReturnStatement || parent instanceof PsiResourceVariable
private final ReloadAction reloadAction; 
any(Object.class)
dest.writeInt(mSubId)
JobQueueUtils.getFeedbackQueueName(jobClientNodeGroup)
randomFrom("allocate","rollover","forcemerge","shrink")
Class.forName(proxiedDriver,true,Thread.currentThread().getContextClassLoader())
annotation.authentication()
-frustumNear
_sharingEntryService.addOrUpdateSharingEntry(user.getUserId(),classNameId,classPK,themeDisplay.getScopeGroupId(),shareable,sharingEntryPermissionDisplayActionKey.getSharingEntryActionKeys(),expirationDate,serviceContext)
region == null
Name.identifier(name)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,false)
isES() || major < 3
resp.setHeader("Access-Control-Allow-Headers",headers)
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
S extends Capability
packet.getAttribute("from").split("/",2)
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THREADS))
paintFooterLine.setColor(footerColor)
src.getParent()
ImageView divider=new ImageView(mContext); 
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws Exception {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
nextY < 0 || Float.isInfinite(nextY)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
cookies.rowMap()
bookmarksFolderFinder.findF_E_ByG_F(groupId,folderId,queryDefinition)
tw.close()
mPackageUsage.write(false)
mPowerManager.isInteractive()
font.draw(batch,results,20,300)
super.resolveLayoutDirection(layoutDirection)
new ScriptC_errorCalculator(mRS)
T extends PsiStatement
mListener.setConnectionId(1)
t.getVolumeTraded()
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
ps == null || ps.getUserState().get(userId) == null || !ps.getUserState().get(userId).isEnabled(mInstantAppInstallerActivity,0)
dest.writeInt(mSubId)
assertRestrictBackgroundOn()
loadedLibraries.get(libnameversion2)
assertClusterSizeEventually(2,nodes[0])
@XmlElement protected String value; 
addTest(AB_NEW_LOGIN_NO_GOOGLE,new int[]{1,1},new int[]{1,0},new String[]{"old-welcome","new-welcome"},true)
i < Integer.MAX_VALUE
UserHandle.myUserId()
(device=1 << i) != AudioSystem.DEVICE_OUT_DEFAULT
result.getName()
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
paramEntry.getValue()
message.getFilteredFields()
type.getInternalName()
exportAttributes && attributeModel != null
@Specialization protected LLVMSharedGlobalVariable escapingGlobal(LLVMGlobal escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMSharedGlobalVariable(escapingValue); } 
twitter1.getRetweeterIds(1021608606934822912L,-1)
stack.peek()
!success
tree == null || tree instanceof PrimitiveTypeTree
Mono.subscriberContext()
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
DiagnosticFactory2<PsiElement,EffectiveVisibility,EffectiveVisibility>
mQsDensityContainer.getX()
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) != null
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
FastMath.min(origin,num.doubleValue())
userId > 0
inUtc || allDay
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,createdBy,reason,comment)
prev.isGuardBindsCache()
input.doubleValue() != value.doubleValue()
Long.parseLong(attrValue)
@Override public Variable emitBitScanForward(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   append(new SPARCBitManipulationOp(BSF,result,asAllocatable(operand),this));   return result; } 
getServiceForUserLocked(userId)
Log_OC.e(TAG,"Trying to open a NULL OCFile")
PersistentTask<P>
new SslContextBuilder(false)
getDefinedPackage(pname)
FBUtilities.getLocalAddress()
userInfo == null || !userInfo.canHaveProfile()
sExecutorService.shutdownNow()
RuntimeContext.class
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
loadAnimator(fragment,transition,false,transitionStyle)
height - 3
Thread.sleep(10)
media != null && media.getMediaType() == MediaType.AUDIO
String.format(Locale.ROOT,"route weight: %.6f (CH) vs. %.6f (no CH) (diff = %.6f)",chWeight,noChWeight,(chWeight - noChWeight))
(portletId == null) || !portletId.startsWith(PortletKeys.WIKI_DISPLAY)
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
Setting.listSetting("searchguard.audit.config.http_endpoints",Lists.newArrayList("localhost:9200"),Function.identity(),Property.NodeScope)
Engineer manager=new GnomeEngineeringManager(); 
new TileSourceManager.TileSourceTemplate(dir,dir.getName(),url)
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).variables(parameters.getVariables())
dest.writeInt(txPower)
DLFileEntryTypeFinderUtil.filterFindByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
ps.saveRelationship(rel)
new Location(target2.getWorld(),x,y,z,target2.getLocation().getYaw(),target2.getLocation().getPitch())
@DELETE
settings.readLPw(null,0,false)
writer.getSourceFile(2)
storeDirList != null && storeDirList.length > (numBackups + 1)
LOG.debug(e)
settings.readLPw(null,0,false)
str.chomp19(context)
HdmiCec.getTypeFromAddress(curAddress)
duration(0,15,18873,0)
moveInputMethodWindowsIfNeededLocked(false) || displayed
STUB_VERSION=38
getNextWindowIndex()
c1.getQualifiedName()
Integer.parseInt(quantifier)
indexData.rewind()
mPackageUsage.write(false)
mAudioQuality=AUDIO_QUALITY_NONE
WebSocketEventListener.class.cast(l).onHandshake(event)
bLocations[0].getHosts()
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
LinkedHashMap<FrameworkType,FrameworkSupportNode>
line >= 0L
logger.debug("license [{}] - valid",license.uid())
pyClass.getQualifiedName()
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
private static class TestException extends RuntimeException {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
mWM.isKeyguardLocked()
selenium.click("//li[4]/span/a/span")
ScanResult.is5GHz(frequency)
user.isAuthorized("essentials.world." + user.getWorld().getName())
_freemarkerEngineConfiguration.resourceModificationCheck()
r.setAltitude(alt)
new HttpParameter("retweets",retweets)
{abiOverride}
a.getKey()
_buildTemplateWithGradle("panel-app","panel-dependency-management","--dependency-management-enabled")
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
selenium.isElementPresent("link=Control Panel")
instance2.getLifecycleService().shutdown()
Utilities.isMac() || Utilities.isUnix()
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),any())
sentencePartToEndOfError.length() - lastLineBreakPosInError
!Objects.isNull(value)
new Entry[2048]
id=10805
UnsatisfiedLinkError ex
getPlayerPosition().y
throwable.getMessage()
public UrlCreator getReverseMapping(final String controller,final String action,Map params){   if (params == null)   params=Collections.EMPTY_MAP;   UrlMapping mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,action,params.keySet()));   if (mapping == null) {     mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,null,DEFAULT_ACTION_PARAMS));     if (mapping == null) {       return (UrlMapping)mappingsLookup.get(new UrlMappingKey(null,null,DEFAULT_CONTROLLER_PARAMS));     }   }   return mapping; } 
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
typeSettingsProperties.toSortedString()
new ResourceContactPhoto(R.drawable.ic_profile_default,R.drawable.ic_person_large)
mView.postOnAnimation(mAnimationStarter)
!ON_TOP
baseURI != null && systemId != null
existingType != null || aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
UI_MODE_SERVICE.equals(name)
sharedElements.get(localName)
gatt.enableAdvertisingSet(this.advertiserId,enable,timeout)
(i - blockStart) > 0
new StringBuilder(256)
appearance.getFloat(attr,0)
sqlRouteResult.getSqlParsedResult().getType()
DynamicCounter.increment(filterName,"status","fail","type",filter.filterType())
httpServletRequest.getParameterValues(name)
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
assertThat(set.contains("123")).isTrue()
graphModel.getGraph().getNodeCount()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
getName()
new RedissonSession(keyPrefix,id)
isPost(request)
assertTrue(user.isGeoEnabled())
ACRA.log.w(LOG_TAG,"Error while converting " + key.name() + " to JSON.",e)
service.getCharacteristic(charUuid.getUuid(),charInstId)
logger.debug("Cannot paly favorite ({})",e.getMessage())
logger.warn("Could not commit session",t1)
new Paint()
counter > max
TelephonyManager.getDefault().getCurrentPhoneType()
dao.mergeWithFlush((WidgetLayoutEntity)anyObject())
reporterCtl.setVoidCallable(MockControl.ONE_OR_MORE)
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
scheduleRemoveStartingWindowLocked(wtoken)
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
convert(connection.getRedisClient().getAddr())
Thread.sleep(500)
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).verifyError(IllegalStateException.class)
ImmutableList.of("/bin/bash","-e","-c","python signer.py $APK key.properties > $OUT")
Stream.of("CYPHER 3.1","CYPHER 3.4")
info != null
q2 instanceof AndQueryNode
value + MINIMUM_BACKLIGHT
makeSnapshots(allEndpoints)
new IllegalArgumentException(sm.getString("pojoMethodMapping.noPayload",m.getName(),m.getClass().getName()))
MapUtil.getBoolean(parameterMap,_IMPORT_BLOGS_DATA)
mService.getWifiServiceMessenger(mContext.getOpPackageName())
NUM_DOCS_PER_TYPE=2000
new IllegalStateException("Wrong header information type: " + fieldsFromHeader)
moveInputMethodWindowsIfNeededLocked(false) || displayed
new RuntimeException(e)
Slog.d(TAG,"Hardware Activity-Recognition not supported.")
id=10855
is(1)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
log != null && log.isDebugEnabled()
numDataDims == 1
getPreferenceStore()
presentation.setEnabled(true)
List<Class<?>>
endPos < bufEnd
mPlayer.getCurrentPosition() * 1000L
typeSettingsProperties.toString()
Long.parseLong(args[ai])
!entry.isInTrashImplicitly()
body.toByteArray()
level < RF_STATUS_FULL_SIGNAL
return false; 
element.getLocalName()
stream2.getId()
new IOException(e.getMessage(),e)
ChannelBufferHolders.messageBuffer(queue)
node.getLifecycleService().shutdown()
DiagnosticType.error("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
loaded.getLoaded().getDeclaredConstructor()
Validator.isNotNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
getXmlPackages()
mMapView.invalidateMapCoordinates(frameLeft - 2,frameTop - 2,frameRight + 2,frameBottom + 2)
LOG.debug("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
(child.mViewFlags & VISIBILITY_MASK) == VISIBLE
mRvc == null || !session.isActive()
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
new Paint()
return false; 
Assert.assertEquals(3,definitions.size())
config.isList("socialspy-commands")
U.error(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
_buildTemplateWithGradle("soy-portlet","soy-dependency-management","--dependency-management-enabled")
logger.warn("InfluxDB is not yet connected")
mf.getColumnNameInSql()
protected Task createTaskJar(File wsdlFile,Task compileTask,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME,wsdlFile);   Jar jar=GradleUtil.addTask(_project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (isIncludeSource()) {     jar.from(generateTask.getOutputs());   }   jar.setDestinationDir(getDestinationDir());   String wsdlName=FileUtil.stripExtension(wsdlFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
cacheSkipStore.removeAll(data.keySet())
marshallerCache().context().preloader().syncFuture().listen(new CI1<IgniteInternalFuture<?>>(){   @Override public void apply(  IgniteInternalFuture<?> f){     ctx.marshallerContext().onMarshallerCacheReady(ctx);   } } )
case INODE_REFERENCE: 
this.getId()
mLastUpdate == null || DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
5 * 60 * 1000
mode.getMenuInflater()
assertEquals(12,md.references().size())
printLine("Unable to connect due to unrecognised server certificate")
invalidate(true)
target.getDestinationLinkAddress()
selenium.isElementPresent("link=Control Panel")
getMeasuredWidth()
mGesturesPopup != null && mGesturesPopup.isShowing()
addFileType("WEBP",FILE_TYPE_WEBP,"image/webp")
other.unsafeBitcoinSerialize()
UpgradeStepRegistrator.class
name == null || name.isEmpty()
@ConditionalOnEnabledHealthIndicator("solr")
incomingDir.mkdirs()
getPropertyAsBoolean(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED,true)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
Integer.parseInt(leftStr)
id=10852
--remainingReleaseCount == 0 && loader != null
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
DBG=false
offsetHandler.returned()
Math.abs(endAngle - startAngle) >= 360 || subActionItems.size() <= 1
nextPos < mBoundPos
proxyClassName.equals(otherClassName)
new GroupTest(true)
new TestUserResource()
createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR)
candidate.getArgumentMapping()
new EntryCustomizationDialog(JabRefFrame.this)
i < 100
m22 != 1
previousScroll == scrollY || mainScroll.getChildAt(0) == null
parts != null && parts.size() % 2 != 0
inner.innerSetException(new TimeoutException(),false)
-1
context.getContentResolver()
name + "." + signatureEntry.getKey()+ "."+ outputEntry.getKey()
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
readWifiSleepPolicy()
new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
selenium.isElementPresent("link=Control Panel")
Optional.ofNullable(target)
new SyncDateFormat[2]
promise.tryFailure(new ClosedChannelException())
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
recyclerView.getChildAdapterPosition(view)
pgl.loadVertexShader(vertFilename)
TCN_RECOMMENDED_PV=28
myType.isValid()
RESULT_TIMEOUT=5000
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
filterNotTypes.length()
type.getDeclaredConstructor()
createSequence(crs,(Point)data.get(i),(Point)data.get(i))
Simple.forClass(Integer.class)
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword())
service.getDomain().id()
cacheController.get(internalTenantContext.getTenantRecordId(),cacheLoaderArgument)
sender.waitForClose(1000)
lValue.getNominalType()
FunExtKt.foo("")
postAgg.getName().equalsIgnoreCase(topNMetricName)
accountHandle.getComponentName().flattenToString()
start.set(Calendar.DAY_OF_MONTH,startDay)
return false; 
LOGGER.isDebugEnabled()
mPlayer.getCurrentPosition() * 1000L
2 >= buf.length - count
log.warn(exception.getMessage())
173 != errors.size()
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
maxRecents > 0 && !doTrim
Entry<String,Channel>
id=19
scanFlags & SCAN_REQUIRE_KNOWN
public Builder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new ObjectMapper().readerFor(Map.class)
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
m.setContent(InputStream.class,is)
mConnector.execute("volume","format",vol.id,"auto")
selenium.isElementPresent("link=Control Panel")
existing.getScriptParameters()
"Unknown or Unsupported Option '" + key + "'"
new NameValuePair[4]
1
mAppToken.isVisible()
case 11: 
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
CHAIN_CONSTRUCTION
policy != null && policy.hasCycle()
jfe.getMapCounters()
parseLibraryFileChunk(jar,libDescription,zip,classesPerChunk)
messageRecord.isEndSession()
addInfo(msg,e)
Throwable e
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L
android.provider.Downloads.Impl.isStatusSuccess(statusCode)
selenium.isElementPresent("link=Control Panel")
mConnectionById.containsKey(callId)
!JiveGlobals.getBooleanProperty("xmpp.socket.directBuffer",false)
childParams.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER && childParams instanceof GridLayoutParams
this.repositories.add(0,repository)
LOG.info("Unable to read HTTP response content",e)
MINOR_VERSION=5
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
assertNotNull("Should find entry",getThreadCacheEntry(LOCAL_HOST))
log.debug("Can't set transaction isolation level",e)
isAllowedByCurrentUserSettingsLocked(p.getName())
logger.trace("[monitor] rescheduling check for [{}]. last access time is [{}]",recoveryId,lastSeenAccessTime)
new LocalComponentDependencyMetadata(componentId,selector,clientConfiguration,attributes,dependencyConstraint.getAttributes(),null,Collections.<IvyArtifactName>emptyList(),Collections.<ExcludeMetadata>emptyList(),false,false,false,true,dependencyConstraint.getReason())
@Override public final DivideByOnConditionStep on(String sql,Object... bindings){   and(sql,bindings);   return this; } 
getInstalledCode("queueTest",Object.class,Object.class)
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2)
child.resetRtlProperties()
testPool.getWeightedListeningExecutorService()
DEFAULT_ADDRESS_BBOX_RADIUS * 5
mSite.getSpaceAllowed()
mSelectResponse != null && mSelectResponse.length > 0
DefaultAlluxioWorker.class
tracesDir.mkdirs()
in.readData()
Assert.assertTrue(System.currentTimeMillis() - now < 5000)
DEBUG=false
sep < 0 || sep > j
new Field(_name,columns.getString(4),null,_class.getPackage().getName(),_class.getName(),_class.getSimpleName(),_type)
@Override public Variable emitBitCount(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IPOPCNT,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LPOPCNT,result,asAllocatable(value)));   }   return result; } 
Color.fromRGB(0x6689D3)
assertEquals(1,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
dest.writeInt(mSubId)
websocketComponent.setMaxThreads(20)
assertEquals("Invalid content-length",11,outputMessage.getHeaders().getContentLength())
myUnqualifiedOrLocalResolve && localProcessor.processingEncounteredAnyTypeAccess()
HashMap<String,Object>
new ProcessBuilder(startScript,mMesosAddress)
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,WALL_17050,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPS_29993,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,ROCKY_HANDHOLDS_26400,ROCKY_HANDHOLDS_26401,ROCKY_HANDHOLDS_26402,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,LOOSE_RAILING,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,ORNATE_RAILING,ORNATE_RAILING_17000,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,BROKEN_FENCE_2618,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990,TUNNEL_30959,HOLE_30966,OBSTACLE,OBSTACLE_30767,OBSTACLE_30964,OBSTACLE_30962,LOOSE_RAILING_2186,LITTLE_BOULDER,ROCKSLIDE_33184,ROCKSLIDE_33185,NULL_33327,NULL_33328)
InspectionsConfigTreeTable.getAdditionalShift()
type.getDeclaredConstructor()
LOG.debug(ex.getLocalizedMessage(),ex)
pairs != null && pairs.getKeyValues() != null
TestType_Table.nativeBoolean.is((Boolean)null)
selenium.isElementPresent("link=Control Panel")
nextTokenIs(b,IDENTIFIER)
rootElement.findElementAt(offset)
selenium.isElementPresent("link=Control Panel")
mAdapter != null && mDataSetObserver != null
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
new ClusterRule()
UIUtil.createImage(myEditorComponent,rect.width,rect.height,BufferedImage.TYPE_INT_RGB)
getEffectiveHstsEnforced()
((TextMessage)replyMsg).getText().getBytes()
second.get(j)
saveJSONArray(json,filename,null)
asList(ASE,CUBRID,DB2,DERBY,FIREBIRD,H2,MYSQL,ORACLE,SQLITE,SQLSERVER,SYBASE)
mService.setEnableAutoJoinWhenAssociated(enabled)
myAlignmentProvider.addPair(myNode,childNode,false)
var.isUseReferenceDirectly()
InputMethodManager.getInstance()
Arrays.asList(MimeTypes.VIDEO_MP4,MimeTypes.VIDEO_WEBM,MimeTypes.VIDEO_H263,MimeTypes.AUDIO_MP4,MimeTypes.AUDIO_MPEG)
mValues[8]
globalExecutionStats.getStartedSplits()
this.registrations.remove(handler)
drawer.addDrawerListener(toggle)
private final ChannelPipeline pipeline; 
Class.forName(name,false,getClass().getClassLoader())
disable2ForUser(what,token,pkg,mCurrentUserId)
assertNotNull("Failed to trigger savepoint",savepointPath)
new MapProducerCapabilities(false,false,false,true,null)
mBackdrop.animate().alpha(0.002f)
new FontComboBox(false)
readWifiSleepPolicy()
new BindException(newConcept,"concept")
UI_MODE_SERVICE.equals(name)
setValue(object,value.intValue())
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24))
expected == int.class || expected == Integer.class
new String(buffer,0,len,"UTF-8")
paramType.getSimpleName()
ThreadLocal<String>
apnContext.getWaitingApns()
public String getBuffer(){   return this.buffer; } 
Thread.sleep(500L)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Throwable err
checkCall(receiver)
log.debug("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
buildTools.isPresent()
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",featuresConfig.isLegacyOrderBy(),false)
mUiHandler.removeCallbacks(pae)
pathGroup.paths.get(j)
BasicChaosMonkey.class
verify(mWifiService).stopLocalOnlyHotspot()
assertEquals(0.7592592592592592,mm.auc_obj()._auc,1e-8)
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
type.getPresentableText()
!pluginManager.isExecuted()
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
instance.managementService.destroy()
Long.parseLong(attrValue)
"Stream " + importerName
consumer.consume(new PlainTextFileType(),new ExactFileNameMatcher(".gitignore"),new ExactFileNameMatcher(".gitmodules"))
messageVerifier.verifyMessage(responseHeaders,requestCtx.getMethod(),requestCtx.getUriInfo().getAbsolutePath().getPath())
private final DateTime createdDate; 
i < 10000
private final JDialog myWindow; 
URLUtils.currentUrlEquals(uriBuilder.build().toASCIIString())
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
from > to
type.getDeclaredConstructor()
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
PATH.getPath()
certGen.addExtension(X509Extension.subjectKeyIdentifier,false,new SubjectKeyIdentifierStructure(pubKey))
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
log.debug("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
selenium.isElementPresent("link=Control Panel")
Throwable t
m.size()
new XXssProtectionHeaderWriter()
public class RegExpParseTest extends BaseParseTestCase {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
childLeftTuple.reAddRight()
GridTestUtils.waitForCondition(new GridAbsPredicate(){   @Override public boolean apply(){     return backupQueue(ignite(1)).isEmpty();   } } ,5000)
trade.getPrice()
expiring || !isValid
new IllegalArgumentException("font cannot be null.")
getMockEndpoint("mock:event").expectedMessageCount(6)
lock.isHeldByCurrentThread()
repository.loadForRequest(null)
this.transactionsRepository.getTransaction(this.xidTransactionID)
new Paint()
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,fout)
mCurrentVrCompositorService == null
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
getOverrideConfiguration()
x + 1 >= size
ClassHelper.makeWithoutCaching(type.getName())
new IndexWriter(directory,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
arguments[1]
physType.comparer()
45 * displayMetrics.density
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
InputType.recurrent(convNIn,length)
grantRuntimePermissionsLPw(deviceProvisionPackage,ACCOUNTS_PERMISSIONS,userId)
sr.getLastStartId()
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
PluginServices.getTagDataService().getTag(tag.tag,TagData.ID,TagData.USER_ID,TagData.MEMBER_COUNT)
HttpConnectionUtil.getClient(timeout)
!mRenderNode.isPivotExplicitlySet()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
T[]
-1l
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
Thread.sleep(2500)
new DefaultPlexusContainer(null,null,classWorld)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
assertEvaluate(buildFile).moduleLookup("txts")
StringBuilder ret=new StringBuilder(internalName.length()); 
HttpConnectionUtil.getClient(timeout)
DiagnosticType.error("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
getConversionByClass(value.getClass())
updateCloseButton()
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE || mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET
TIME_SCALE=600
edge.setDirection(edgeDefault)
assertClusterSizeEventually(2,nodes[0])
tree.getBounds()
Color.fromRGB(0x3B511A)
new RelativeCoordinatesProvider(hRef,hDelta,vRef,vDelta)
defaultDndAccess != null
alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)
mImm.getEnabledInputMethodList()
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
LOG.warn("PriviledgedActionException as:" + this + " cause:"+ cause)
msbFragmentCollection.getMsbFragmentCollectionId()
invalidate(true)
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
return true; 
onPackageDisappeared(pkgList[i],mChangeType)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
new Paint()
sSwipeMinDistance=100
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(256)
worldRenderer.getChunkProvider().addRegionEntity(spawnZoneEntity,4)
StringBuilder buffer=new StringBuilder(); 
Boolean.parseBoolean(attrValue)
template.setDefaultReceiveQueue(this.queue.getName())
reply.getJMSMessageID()
case 7: 
metadata.getFaceRectangles()
assertEquals(1000,timeout)
fLines.addElement(st.nextToken())
StringBuilder sb=new StringBuilder(); 
model.hasData() && container.isReadyToRun() && !model.isUpdateInProgress()
SCROLL_BAR_SIZE=10
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
callerPackage == null
mask.length()
node1.isEquivalentTo(node1)
root != null && root.isShowing()
restrictedListeners.load(is)
List<UsageInfo>
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
DarkIconDispatcher.getTint(mTintArea,mWifiActivity,mIconTint)
_typeSettingsProperties.toSortedString()
@Override public Response doBackgroundCall(){   mTraktClient.setAuthentication(mUsername,mPassword);   return mTraktClient.accountService().test().status; } 
StringBuilder ret
RedisRunner.shutDownDefaultRedisServerInstance()
type.getDeclaredConstructor()
this.traceHandlers.remove(traceHandler)
mMccStr == null
new EndlessRecyclerOnScrollListener(footerAdapter){   @Override public void onLoadMore(  final int currentPage){     footerAdapter.clear();     footerAdapter.add(new ProgressItem().withEnabled(false));     Handler handler=new Handler();     handler.postDelayed(new Runnable(){       @Override public void run(){         footerAdapter.clear();         for (int i=1; i < 16; i++) {           fastItemAdapter.add(fastItemAdapter.getAdapterItemCount(),new SampleItem().withName("Item " + i + " Page "+ currentPage));         }       }     } ,2000);   } } 
Object[]
StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName())
service.asBinder().pingBinder()
wordDetector.getCursorOffset()
assertOrderCount("ds1",1L)
validateFriendlyURL(group.getCompanyId(),group.getGroupId(),group.getClassNameId(),group.getClassPK(),friendlyURL)
"simple".equalsIgnoreCase(language) && expression.indexOf("${") >= 0
lights != null && lights.shadowMap != null
return 1; 
Throwable e
app.getSettings().SHOW_TRAFFIC_WARNINGS.get() || app.getSettings().SPEAK_TRAFFIC_WARNINGS.get()
new SafeTextModel(value,Mode.none)
UpgradeStepRegistrator.class
client.execute_cql3_query(formattedQuery,key,Compression.NONE,state.settings.command.consistencyLevel)
mSyncStatus.valueAt(i)
callback.onPulseFinished()
mWM.isKeyguardLocked()
change.isMoved()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
DISPLAY_TASKS_PORTRAIT + 1
StateManagementUtils.createEndForkedExecutionMojoBinding()
AtmosphereInterceptorWriter.class
mService.removePasspointConfiguration(fqdn)
dest.writeTypedArray(remoteInputs,flags)
assertEquals(row.getField(0),2L)
new Location(target2.getWorld(),x,y,z,target2.getLocation().getYaw(),target2.getLocation().getPitch())
messenger.requestSmsObsolete(res)
permissions+=64
lastPos < mTargetPos
incrementAppWidgetServiceRefCount(appWidgetId,fc)
tileBox.getDensity()
customer.getId()
type.getDeclaredConstructor()
selectedFile != null && fileFilter != null
loaded.getLoaded().getDeclaredConstructor()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
buf.getUnsignedShort(buf.readerIndex() + 2)
position.set(0,0,mRight - mLeft,mBottom - mTop)
Tomcat.addServlet(ctx,"myServlet",new HelloWorld())
setVisibilityBasedOnFlag(mBtnPlay,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
IllegalArgumentException e
assertTrue(jmsTemplate.isPubSubDomain())
adaptTestForTrain(_output._names,null,_output._domains,adaptFrm,_parms.missingColumnsType(),true)
root.isDownloads()
metadata.getFaceRectangles()
found != null && found != r
Log.e(TAG,"This will become an error",ex)
cluster.close()
GL.glBindTexture(target,texture)
System.arraycopy(orig,0,target,0,20)
Locale.getDefault().toLanguageTag()
new PriorityTieredBrokerSelectorStrategy(1,1)
Log_OC.d(TAG,"Canceling all syncs for " + MainApp.getAuthority())
selenium.isElementPresent("link=Control Panel")
LOG.error(exc)
auxString2.substring(0,auxString2.lastIndexOf(","))
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
transGraph.screen2real(transGraph.getLastMove().x,transGraph.getLastMove().y)
args.length != 3
log.error(message)
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
StringBuilder buffer=new StringBuilder("("); 
format.getShape() == JsonFormat.Shape.STRING || format.hasPattern() || format.hasLocale() || format.hasTimeZone()
key.equals("authmechanismproperties")
Log_OC.d(TAG,"onCreateView")
timeout >= 0
archivePath.get()
!file.isInLocalFileSystem() || myExcludedFileIndex == null
from > to
properties.itemType > ItemViewProperties.ID_NOT_IN_ACTIONBAR
commands_.vcsRevert()
Thread.sleep(1000)
name.endsWith(".mxml") && !name.startsWith("TestApp.") && !name.startsWith("Constructor.")
ContainerUtil.getFirstItem(expressions)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
hasRows(newTableName)
args.length > 9
poList[2]
mSelector.setHotspot(x,y)
context.formatNewLine()
onDetachedFromWindow()
len >= 1000
stmts == null || stmts.isEmpty()
StringBuilder buffer=null; 
return 16; 
jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName,int.class)
deployOneTaskTestProcess()
Integer.toHexString(realQuality)
load(key,false)
parent.setAxisIndex(0)
location.add(deltaX / delta,deltaY / delta,deltaZ / delta)
blog.getLocalTableBlogId()
selenium.isElementPresent("link=Control Panel")
size=500
queryBuilder.append(columnAliases[i].getAliasName())
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
getSupportFragmentManager()
GlobalSearchScope.allScope(getProject())
batteryService.getBatteryLevelLow()
weekRange.add(Calendar.DATE,6)
BinaryFile.class
cause instanceof VirtualMachineError
Environment.getOemDirectory()
(inGC - timeInGC) * 100.0
mRS.nMeshGetIndices(mID,idxIDs,primitives,idxCount)
CassandraSplitManager.class
batteryVp > medium
Trans != NO_TRANSPOSE
TranslatingCompilerFilesMonitor.getInstance().scanSourceContent(myProject,roots,roots.size(),true)
selenium.isElementPresent("link=Control Panel")
intervalFraction * (nextValue - prevValue)
bulkInsertableMap.containsKey(persistentObjectClass)
selenium.click("//li[4]/span/a/span")
pFromY - pToY
(BrokerService)context.getBean("broker")
buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)
selenium.isElementPresent("link=Control Panel")
imageView.setImageDrawable(null)
mockRequest.addHeader("Authorization","bearer " + TGT_ID)
Object minFractDigits=properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
blog.getLocalTableBlogId()
mAttacher.getDisplayMatrix()
log.warn("Query failed to validate : '{}'",executionInput.getQuery())
LogFactory.getLogger().debug("Could not find table or view " + tempTable.getName() + " for column "+ column.getName())
source.getName()
sharedElements.get(localName)
{ENDPOINT_DISPLAY_ITEMS,DISPLAY_ITEM_BIT_CLOCK,0x10,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
fieldDeser.getPropertyValueDirect(currentObject)
String message
scrollWebElementIntoView(webElement)
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123)
RandomStringUtils.randomAlphanumeric(50)
Integer.parseInt(taskIdStr)
recommendedVersion == null || recommendedVersion.equals(seenVersion)
new LowerCaseFilter(matchVersion,result)
FileType.of(".so",".dylib")
super.getDataEncodingWithDefault(DEFAULT_ENCODING)
symbolUsageValidator.validateCall(resultingCall,resultingCall.getResultingDescriptor(),trace,byKeyword)
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(false)
serviceDataUuid == null || mServiceData == null
returnSecurityError || MessageUtils.isRequestor(message)
mService.setAppPolicy(UID_A,POLICY_NONE)
checkCall(receiver)
sendMessageAtFrontOfQueue(CMD_STOP_AP)
LOGGER.warn("Could not perform drage and drop",nfe)
layoutRevision.getIconImageId()
id=19905
U
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
new VertexBuffer(this,PGL.ARRAY_BUFFER,4,PGL.SIZEOF_FLOAT)
new IllegalStateException("Legacy advertising can't include TX power level in header")
outLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
QueryLogger.builder()
logger.trace("Removing: {}",r)
byteLength >= VECTOR_SIZE && (srcOffset % VECTOR_SIZE) == (destOffset % VECTOR_SIZE)
getPath("checks/javadoc/Input_01.java")
session.setMaxInactiveInterval(getMaxInactiveInterval(),false)
/**   * Returns the next pseudorandom  {@link ArrayValue} of period elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of period elements.  */ private DurationArray nextPeriodArray(){   return Values.durationArray(nextPeriodArrayRaw(minArray(),maxArray())); } 
mResolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
selenium.isElementPresent("link=Control Panel")
getDelegate().getDefaultCipherSuites()
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
accountApi.setEmailNotificationsForAccount(accountId,invoiceEmailJsonWithoutNotifications,requestOptions)
owners.add(0,Receiver.<String>make(clazzGT.getType()))
materialScrollBar.addIndicator(new CustomIndicator(this),true)
Integer.parseInt(taskIdStr)
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
mSeekBar.setProgress(mVolumeBeforeMute,true)
selenium.isElementPresent("link=Control Panel")
rm.getColumnDisplaySize(i)
selenium.isElementPresent("link=Control Panel")
strategy.getFullJavaIdentifier(parameter)
mEditText.getCompoundPaddingBottom()
public Message sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
res > mLen
new FunctionIntrinsicWithReceiverComputed(){   @NotNull @Override public JsExpression apply(  @Nullable JsExpression receiver,  @NotNull List<JsExpression> arguments,  @NotNull TranslationContext context){     return new JsInvocation(new JsNameRef("substring",receiver),arguments);   } } 
CxxBinary resultRule=binaryBuilder.build(graphBuilder,filesystem,targetGraph); 
registryCache.put(channel.getName(),registry)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public String getViewIdResourceName(){   return mViewIdResourceName; } 
assertU(commit())
Class.forName(className,true,value.getClass().getClassLoader())
Math.max(leftLen,rightLen)
mHeartbeatExecutor != null
Exception e
value()
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
baseAt(i).getFile().getAbsolutePath()
(count + numSkipped + skipInterval) >= df
@NonNull
DEBUG_LOC_AGAIN
new PojoMessageHandlerAsyncString(pojo,m,session,params,indexString,false,indexBoolean,indexSession)
scale(30000)
entry.lastModified()
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
mHotspotBounds.set(left,top,right,bottom)
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
NativeLibraryHelper.Handle.create(pkg)
!wNoExecution.getSelection()
uid >= 0
/**   * This is  {@link GroovySurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.3.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class GroovySurrogateRegisteredServiceAccessStrategy extends BaseSurrogateRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-3998531629984937388L;   private String groovyScript;   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> principalAttributes){     if (isSurrogateAuthenticationSession(principalAttributes)) {       try {         final Object[] args={principal,principalAttributes,LOGGER};         final Resource resource=ResourceUtils.getResourceFrom(this.groovyScript);         return ScriptingUtils.executeGroovyScript(resource,args,Boolean.class);       }  catch (      final Exception e) {         LOGGER.error(e.getMessage(),e);       }       return false;     }     return super.doPrincipalAttributesAllowServiceAccess(principal,principalAttributes);   } } 
GtkPreferredJComboBoxRendererInspection.class
VERSION=42
ServletTestSuite testSuite=new ServletTestSuite(testClass); 
assertProtonResourceLimits(0.9,0.77,new ContentClusterBuilder().protonMemoryLimit(0.77).getXml())
1
type.getDeclaredConstructor()
exchange.getPartitioningScheme().isReplicateNullsAndAny()
selenium.isElementPresent("link=Control Panel")
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
queueAccess.get(queueAccess.size() - 1) == selectedItem.getId()
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
!isSite()
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(reindex)
popupWindow.setContentWidth(menuWidth)
changeAffiliationByAdmin(jids,"admin")
searchExtensionManager.getProxy()
option.getJavaType()
jarURL.toURI().getSchemeSpecificPart()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
_buildTemplateWithGradle("content-targeting-report","report-dependency-management","--dependency-management-enabled")
Control.getSingleton().getExtensionLoader().addonFilesRemoved()
enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,"stopLockTaskModeOnCurrent")
status().isSeeOther()
audioTrack.getPlaybackHeadPosition()
this.getDefaultReadOnly()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
FLING_VEL_THRESHOLD=300
syncOperation.delay <= 0
if (DBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
m.getDeclaringClass()
callback.onUploadFailure(0,0)
UpgradeStepRegistrator.class
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
name.equals("Devices") || name.equals("UUIDs")
PApplet.splitTokens(properties.getStringAttribute("points"))
lastException != null && i < (flushRetriesNumber - 1)
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target2.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
imageViewShadow.setBackgroundResource(R.drawable.shadow)
postApply(p.getLayer(),p.getParamName(),gradView,paramView)
Integer.parseInt(stackIdStr)
proposedBackground=background
DEFAULT_WIDTH=0x00010000
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
MimeTypeUtil.getFileTypeIconId(null,mFile.getName())
session.users().getServiceAccount(client)
jarURL.toURI().getSchemeSpecificPart()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
String.valueOf(0xFL)
height < 0 && pos.getBlockY() - height - 1 < 0
contact.getUser()
partSpec.size()
mRvc == null || !session.isActive()
gasPrice != null && gasPrice.length > HASH_LENGTH
READ_ITEM_DELAY=10
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false,false)
toEventData(key)
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,false)
mRecyclerView.smoothScrollBy(hScroll,vScroll)
new InternalOutputBuffer(res,Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE)
activity == null || activity.isFinishing()
copticDate.dayOfMonth()
contentType.startsWith(PresContentClient.CONTENT_TYPE)
gatt.enableAdvertisingSet(this.advertiserId,enable,timeout)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
table == null
getKeyFromGrant(grantAlias)
new GSPSitemeshPage()
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
Loader.getResource(resourceName)
position >= 0 && position < size()
subCursor.getString(COLUMN_ATTENDEE_ID_NAMESPACE)
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),false,Variance.IN_VARIANCE,Name.identifier("P" + j),j)
entry != null && (entry.info.flags & ApplicationInfo.FLAG_INSTALLED) != 0
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
isLockscreenPublicMode(userId)
FileUtil.isAbsolutePlatformIndependent(workingDirectory)
sleep < 0 || !run
FISHING_ROD(346,1,64)
diff < leeway + 1
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,null))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
queryParams != null && !queryParams.isEmpty()
selenium.isElementPresent("link=Control Panel")
tagName.equals(TAG_FORWARDING_INTENT_FILTERS) || tagName.equals(TAG_CROSS_PROFILE_INTENT_FILTERS)
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
localNodeData.dcLocalAddress.getHostAddress()
size >= _STORAGE_SIZE_DENOMINATOR
msg.containsKey(SECURITY_PROCESSED) || isGET(msg) || msg.getExchange() == null
new ZuulException(errorMsg,causeMsg,true)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.N || !autoConnect
mService.reconnect(mContext.getOpPackageName())
loaded.getLoaded().getDeclaredConstructor()
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
DEBUG_OBB=false
Integer.parseInt(taskIdStr)
note == null || mAddNote
configuration.numEvents*=100
telephony.isRinging(getOpPackageName())
display.getRealMetrics(dm)
random.nextInt(currentSize + 1) != 0
-6f
majorVersion < MSSQL_SERVER_VERSIONS.MSSQL2008
!mStatus.showStatusLines() || (mCharging == null && mNextAlarm == null)
workDir.getAbsolutePath()
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
lookup="java:jboss/mail"
Collections.sort(scheduledJobs,njec)
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
new ShardRouting(index,shardId,currentNodeId,null,null,primary,state,version,null,AllocationId.newInitializing(),true)
field.getType()
data.batchBuffer.add(outputRowData)
RenderUtil.loadResources(resources,resFolderWrapper)
clipItem.coerceToText(mContext)
Expression.eq("searchable",searchable)
resolver.acquireUnstableContentProviderClient(uri)
environmentSubstitute(getWorkDirectory())
!folder.isInTrashImplicitly()
T aValue
myCardModel.getQuestionAlign()
type.getDeclaredConstructor()
displayContent.getDockedStackVisibleForUserLocked()
new IllegalStateException("Could not access Field '" + classField.getName() + "'",e)
oldestNode == null || oldestNode.getLastSent() == null
response.setStatus(statusCode)
selenium.isElementPresent("link=Control Panel")
dropdownItem.setHref(getPortletURL(),"navigation","private-pages")
UpgradeStepRegistrator.class
rhs.getScore()
@NonNull
policy != null && policy.hasCycle()
Variable emitBitCount(Value operand); 
new Notification(R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
currentPropertyJoinTableOverride != null
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
StringBuilder buffer=new StringBuilder(); 
hasRows(newTableName)
!file.exists() || file.renameTo(newFile)
initialCapacity > 1 << 30
myCache1.get("myKey1").getObjectValue()
newDto(RecipeDto.class).withContent(DEFAULT_DOCKER_IMAGE)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
selenium.isElementPresent("link=Control Panel")
exception.equals(StringPool.OPEN_CURLY_BRACE) || exception.equals(StringPool.SEMICOLON)
roundDist == 1000
temp.reAddRight()
platformVersion < M
excludeFilePathMatcherList.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
StringBuilder ret
ColorProperties.getColor("primaryControlColor")
addView(mTitleLayout)
type.getDeclaredConstructor()
logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
next != null && next.isHomeActivity()
StringBuilder sb=new StringBuilder(); 
selenium.isElementPresent("link=Control Panel")
OverridingMethodsSearch.search(method,method.getUseScope(),true)
selenium.isElementPresent("link=Control Panel")
originalLanguage != null && metaObject != null
sendKeyDown(keycode)
logger.getLogger().warning("Failover took:" + (end - start) / 1000000 + "ms")
parentPackageInTree != null || (aPackage != null && aPackage.getParentPackage() != null)
System.currentTimeMillis() - lastTimeLocationFixed
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
"Interrupted when attempting to close writer for end point: " + eldest
new Notification(notification,nodeService)
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
((Scorecard)serializable).getUseReasonCodes()
ast.createQueryTranslator(hql,hql,Collections.EMPTY_MAP,sessionFactory(),null)
sr.getLastStartId()
actionName.startsWith("android.net.netmon.lingerExpired") || actionName.startsWith("com.android.server.sip.SipWakeupTimer") || actionName.startsWith("com.android.internal.telephony.data-reconnect")|| actionName.startsWith("android.net.netmon.launchCaptivePortalApp")
scanner.acceptsInput(fqn)
mCryptoPerformanceMap.get(userId)
@Override public HttpResponseMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
this instanceof ScatterData || this instanceof CombinedData
order=2
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategyManager()
user.isSystem()
Long.parseLong(strings[i])
mState == StatusBarState.SHADE_LOCKED && !isCollapsing()
scrollSwipingToLoadMoreToDefault()
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
@Specialization protected LLVMBoxedPrimitive fromFloat(float value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
regUser * trusteeWeightValue * trusteeFactorValue* trusteeFactorValue
copy1DRangeFromUnchecked(0,mType.getCount(),i)
setComplete(mLength)
Throwable e
origin.realComponent().doubleValue() >= other
new SafariWebDriverImpl(projectDirName,portalURL)
logger.error("An error occurred while executing a command: ",e)
final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider(); 
GL20.glGetActiveAttrib(program,index,256,size,typeTmp)
outputBufferProcessors=3
LOGGER.debug("text : {}",text)
mCursor.close()
name.equals("Devices") || name.equals("UUIDs")
creationDateField != null && "".equals(((String)creationDateField.get()).trim())
!showNotifications.isNull()
computeRealHorizontalScrollRange()
rowMeta.size()
VERSION=5
e.getSuppressed()[1]
!socket.isOutputShutdown()
DirectoryReader r; 
parameter.getName()
msbFragmentEntry.getMsbFragmentEntryId()
Math.max(clientCount,1)
onPackageAppeared(pkgList[i],mChangeType)
LOG.debug("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
sublistsIndices.keySet().stream()
new IndexWriter(directory,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
locationUriNode.text()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
m.getParameterTypes()
new ThingUID(WEMO_LIGHTSWITCH_TYPE_UID,device.getDetails().getSerialNumber())
evaluate("pkg = package_name()").moduleLookup("pkg")
new ModelNode().set(25000L)
Assert.assertNotNull(request.getContentType())
new LightweightThread(null,null,this)
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
new StatusBarIconView(getContext(),null,null)
channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)
dest.writeStringList(userIds)
log.info(message,exception)
? extends T
Thread.sleep(1000)
ccfg0.setWriteBehindFlushFrequency(60_000)
new IllegalArgumentException(Localizer.getMessage("org.apache.jasper.compiler.ELParser.invalidQuotesForStringLiteral",input))
concatRef.isEightBits=true
List<JetType>
Settings.Secure.putStringForUser(cr,OWNER_INFO,"",userId)
getUserStateLocked(resolvedUserId)
ColorProperties.getColor("tabTitle")
event.setHandled(true)
SCAN_STATUS_PARTIAL=1
final ImageView buttonMore=(ImageView)view.findViewById(R.id.context_menu_more_button); 
findCodecForFormat(true,format)
new ShowcaseViewBuilder(activity,showcaseTemplateId)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(1,Duration.ofMillis(100),Duration.ofMillis(2000),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 1/1").hasCause(exception))
mViewModel.onNewsCardShown(item,getCurrentTag())
itemView.getScaleY()
savedInstanceState.containsKey(STATE_SELECTED_ITEMS)
theClass == MetadataGeneratingExpandoMetaClass.class
this.getTheSocket()
readWifiSleepPolicy()
file == null || beforeDir == null || afterDir == null
metadata.getPropertyClosureIterator()
new IllegalStateException("cannot use driverClassName and dataSourceClassName together.")
resTarget.withAppendedFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
media != null && media.getMediaType() == MediaType.AUDIO
super.dialog.setMinimumSize(545,458)
AWAKE_INTERVAL_DEFAULT_MS=10000
defaultDMLFilename()
MoreTypes.asTypeElement(e.getTypeMirror())
replaces="doCachedTypeCachedOffset"
pos + toFind.length() <= limit
HornetQEmbeddedConfigurationFactory.class
movementComponent.collider.setWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
assertLeftRightCategory(5,category2c)
testClass.getSimpleName()
exportStatusCounts(exporter)
n.longValue()
_replaceTranslationCommand.execute(file.toPath())
res + _bias
pv.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector))
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
offset < text.length()
selenium.isElementPresent("link=Control Panel")
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
checkCall(receiver)
groupIndex.numOrd()
SaveImageCmdExec.class
logger.fine("attempting reconnect")
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
myRootHandler == null || !myRootHandler.isValid()
superClazz.getSuperclass()
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavadocComment()
stepLightIdleStateLocked("s:shell")
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     associatedTask.setUpdated(new Date());     activateTask(associatedTask,true,false);   } } ,myProject.getDisposed())
changeAffiliationByAdmin(jids,"owner")
@Override public SyncSession create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
ConversionException e
new IllegalStateException("Legacy advertising can't include TX power level in header")
collectAndCheckHighlighting(checkWarnings,checkInfos,checkWeakWarnings,ignoreExtraHighlighting)
GithubApiUtil.removeProtocolPrefix(GithubSettings.getInstance().getHost())
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF
l.contains("<pre>")
loaded.getLoaded().getDeclaredConstructor()
copy1DRangeFromUnchecked(0,mType.getCount(),i)
runtime.minus(provided)
message.getMessageId().setEntryLocator(sequenceId)
Thread.sleep(300)
modIcon.getWidth()
FutureTask<?>
lock.unlock()
LOG.info("Too many MultiFetch errors, falling back to Fetch only.")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
StatList.getObjectUseStats(itemstack.getItem())
512 * 1024 * 1024
assertPlanEquals(expectedPlan,actualPlan)
future1.get(2,TimeUnit.SECONDS)
this.targetValidator.validateValue(beanType,propertyName,value,groups)
val == null || fetch(obj.getClass(),Cnd.where(mf.getName(),"=",val)) == null
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)&& !mMimeType.equalsIgnoreCase("application/xhtml+xml")
/**   * {@inheritDoc}  */ @Override public Broadcaster addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource<?, ?> r");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn("Too many resource. Forcing resume of {} ",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn("failed to resume resource {} ",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } 
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,null,false,false)
projectMeasures.get(2L)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
!isEmpty(aggregate.getPrincipals())
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
isAvailable(oldStatus)
view.getFloatZoom()
!proportional
new Handler(mMainHandler.getLooper()){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
caches.valueAt(i)
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
filename.endsWith(ext)
db.activityDao().getByKey(dbSession,activityKey)
targetConfig.trimConfigurations()
case 2: 
new Handler(mMainHandler.getLooper()){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
Throwable ex
new ModelNode().set(600000L)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,1000)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.2f,FOLDER_NAVIGATION)
side.getCapitalized()
source.isInteractive()
fragmentEntryPersistence.countByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
InvokerHelper.getMetaClass(obj.getClass()) == mc || !(mc instanceof ExpandoMetaClass)
checkCall(receiver)
sourceHeight > 0
Latkes.getStaticServePath()
routes.ExtractorsResource().create(input.getId())
new HazeNode(context,writeOnlyGBufferConfig,hazeIntermediateConfig,aLabel)
resourceList == null || resourceList.getResourceVariablesCount() <= 1
getContext().enforceCallingPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
leftTuple.setStagePrevious(last)
cfg.setMetricsUpdateFrequency(5_000)
createCondition.isInternal()
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
Simple.forClass(SkylarkList.class)
/**   * The failure that occurred.  */ Throwable getFailure(); 
CONSTELLATION_TYPE_SHIFT_WIDTH=4
assertEquals("to",13,sr.getToInt())
T value
mExpandedChild.getHeight() <= mHeadsUpChild.getHeight()
stopwatch.elapsed(MILLISECONDS)
ir.mHandler != null && ir.mImageListener != null
Long.parseLong(delay)
dateTimeFormatter.format(value)
mCurrIconRow != null && mCurrIconRow.isVisible()
useEquals()
DataStreamSink<OUT>
account.getWebAddress()
Thread.sleep(1000)
serverSocket == null || !serverSocket.isBound()
nspe.getMessage()
_certWilds.isEmpty()
status < 0
!value.isNull()
keyRowMeta.getString(one)
dynamicType.getDeclaredConstructor()
{0,400}
(res == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
Lifecycle lifecycle=(Lifecycle)it.next(); 
getLastCustomNonConfigurationInstance()
builder.length() == 0 && s != null
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid(),(r != null && r.info != null) ? r.info.packageName : "",(r != null && r.info != null) ? (r.info.isInstantApp() ? StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__TRUE : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__FALSE) : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__UNAVAILABLE,r != null ? (r.isInterestingToUserLocked() ? StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__FOREGROUND : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__BACKGROUND) : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__UNKNOWN)
logger.debug("Could not find original user Authentication object!")
o instanceof SpanRegexQuery
for (SampleStream sampleStream : streams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
LinkedHashMap<String,ASTNode>
javaSource
isUri(url)
new SystemVibrator(context)
new AnnotationNode(desc,true)
setRestitution(objectId,restitution)
thirdMessageReceived.await(60,TimeUnit.SECONDS)
card.init()
SystemInfo.isMac ? 5 : 8
user.getActualCompanyId()
layoutPageTemplateLocalService.updateLayoutPageTemplate(getUserId(),pageTemplateId,name,layoutPageTemplateFragments,serviceContext)
AbstractCollection self
mVibratorService.vibrate(null,2000,new Binder())
Long.parseLong(attrValue)
new IntRangeValidator(0,true,true)
new GridCacheQueryReadEvent<>(cctx.localNode(),"SQL query entry read.",EVT_CACHE_QUERY_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SQL,cctx.namex(),qry.queryClassName(),qry.clause(),null,null,qryInfo.arguments(),qry.subjectId(),taskName,key,val,null,null)
Results.xml()
assertFalse(mDisabled.hasFocus())
ThemeEnforcement.obtainStyledAttributes(context,attrs,R.styleable.TabLayout,defStyleAttr,R.style.Widget_Design_TabLayout,R.styleable.TabLayout_tabTextAppearance)
T event
DEBUG_STARTING_WINDOW=true
loaded.getLoaded().getDeclaredConstructor()
currentType != Type.INT
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty&& !"__proto__".equals(propertyName)
Class.forName(name,false,getClass().getClassLoader())
Long.parseLong(nfcid2,16)
getImportRootPath()
c.close()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
WordPress.getCurrentBlog().getLocalTableBlogId()
setColor(barBackgroundColor)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
selenium.isElementPresent("link=Control Panel")
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
HtmlUtil.escape(_href)
calendar.set(Calendar.YEAR,2030)
internalCluster().getDataNodeInstance(ClusterService.class)
logger.debug("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
!visible || outerCircleCenter == null
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
cleanString(nameAttribute.getValue())
this.policy.setMaxBinaryMessageSize(anno.maxBinaryMessageSize())
new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END)
new Paint()
((MasterSlaveDataSource)dataSource).getMasterDataSource()
RuntimeVersion.isAtLeast11()
dest.writeInt(mSubId)
event.getParent()
callTimeoutMillis=6000
smppClient.scheduleReconnect()
player.sendStatusMessage(new TextComponentString("Not an air block @" + placePos),true)
dh != mBackgroundHeight
System.getenv(Tokens.FAUNUS_HOME)
name.equals(blacklistName) || name.startsWith(blacklistName)
myProject.isDisposed() || myProject.isDefault()
tracesDir.mkdirs()
pmmlScorecard.getUseReasonCodes()
UnsatisfiedLinkError ex
thrown.expect(UserCodeException.class)
discoveredFileCollectionSnapshotter.registerSerializers(serializerRegistry)
row("p_comment",null,7.0,0.0,null,null,null)
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),true)
return areaWidth; 
mService.subscribe(mContext.getOpPackageName(),clientId,subscribeConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,false,callback,clientId))
Thread.sleep(300)
mockRegionInfo.isMetaTable()
p.getDependencies()
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
userRecord != null && userRecord.mClientRecords != null
action != KeyEvent.ACTION_UP
new UdpConnector(localUdpPort,remoteAddress,remoteUdpPort)
private final QSDetailClipper mClipper; 
element.getLocalName()
!blockchain.isBlockExist(hash)
selenium.click("//li[4]/span/a/span")
Log_OC.e(TAG,"\t account is NULL")
mInner.cancel()
FunExtKt.foo("")
queryProcessor.curJobRunning.get() <= 0
startingWindow != null && ttoken.startingView != null
resolution.apply(initializationStrategy,classFileLocator,typeStrategy,byteBuddy,nativeMethodStrategy,bootstrapInjectionStrategy,accessControlContext,listener)
keycode == KeyEvent.KEYCODE_HEADSETHOOK || keycode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
SamplingProfiler.newThreadGroupThreadSet(group)
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
course.getLessons(true)
namespaceDescriptor.getFqName()
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
getNetworkPolicies(mContext.getOpPackageName())
r.getUri().getPath()
maxInactiveInterval * 1000L
Locale.getDefault().toLanguageTag()
server0.getStoreRepository().getStorageEngine(storeName)
elapsed >= config.getConnectionTimeout()
mSharedElements.size()
newHighlyAvailableDatabaseBuilder(path)
DEFAULT_BG_LOW_JOB_COUNT=1
operations.remove(query,metadata.getJavaType(),metadata.getCollectionName())
mQsDensityContainer.getX()
v.getCreationTime() + timeToLive < now
getSubprojects()
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build,Collector.Characteristics.UNORDERED)
PopulateAnalysisUuidOnMeasures::handle
measured.setPara(source,bufEnd,bufEnd,textDir)
size * 1.8f
chain.resolveUrlPath(resourceUrlPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),startTime,event.getEndTime())
container.getVersionId()
return mChangingAppearingDelay; 
Trans != NO_TRANSPOSE
!url.isEmpty()
FILE_TYPE_STOREDIRECT=3
((SoapFault)ex).getSubCode() != null && !SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE.equals(soapFault.getNamespaceURI())
addOn != null && AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()
TimeUtils.millis()
mMatchMode=matchMode
OverrideResolver.generateOverridesInFunctionGroup(methodName,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
constr.gridy=2
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
newFlagged=Boolean.parseBoolean(value)
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
Builder<M,B>
selenium.isElementPresent("link=Control Panel")
!isCancelled0(result)
native_get_videoeditor_export_level(vidCodec)
fragmentCollectionPersistence.findByGroupId(groupId,start,end)
remaining <= 0
context.report(ISSUE,node,context.getLocation(node),"Don't call sleep. Use MockTimer instead.")
mUiHandler.removeCallbacks(pae)
@Override
return false; 
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
c.setNickname(nickName)
List<Language>
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
new NotificationCompat.Builder(this)
mSeekBar.setProgress(0,true)
ActorSDK.sharedActor().style.getTextPrimaryInvColor()
new LinkedHashSet<String>(256)
5 * 60 * 1000
functionFactory.lossNegativeLogLikelihood(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
LOG.debug("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
this.col=column
SECOND_FLOOR != null && SECOND_FLOOR.get() != null
targetInfo != null && targetInfo.metaData != null
/**   * Adds a query to the scheduler priority queue. This call always succeeds or throws exception if the queues are out of capacity. This will never block for resources to become available.  * @param query query to add to the list of waiters  * @throws OutOfCapacityError if the internal query queues are full  */ void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityException ; 
tagName.equals("uses-permission-sdk-m") || tagName.equals("uses-permission-sdk-23")
JsAstUtils.pureFqn(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
dpToPx(8f)
Map<RealmObject,RealmObject>
um.getUsers(true)
SCAN_STATUS_COMPLETE=2
RCTCamera.getInstance().setFlashMode(_cameraType,flashMode)
logger.debug("Cannot clear queue ({})",e.getMessage())
sendKeyUp()
types.get(typeId)
text.contentEquals(((TextButton)button).getText())
expected == char.class || expected == Character.class
map.set(key,"value",5,TimeUnit.SECONDS)
((TextMessage)replyMsg).getText().getBytes()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
new OperationSetTypingNotificationsGibberishImpl(this,persistentPresence)
new String(byteArrayOutputStream.toByteArray(),"UTF-8")
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
toArrayHelper(0)
JournalArticleLocalServiceUtil.search(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"","",null,null,status,null,false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
mThumbnail.copy(Config.HARDWARE,false)
metrics.getExecutionTimePercentile(75)
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true,true)
AsyncResult<Void>
pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)
child.disposeUIResources()
LOG.debug("Looking for service: " + service + ". Current token is "+ token)
customReportContent != null && customReportContent.length != 0
docDeleted == false && lastFieldValue != null
/**   * @throws Exception  * @see org.springframework.batch.item.ItemReader#read()  */ public Order read() throws Exception {   recordFinished=false;   while (!recordFinished) {     process((FieldSet)super.read());   }   log.info("Mapped: " + order);   Object result=order;   order=null;   return result; } 
updateChildren()
reader.getType(reader.readSmallUleb128())
Bytes.toBytes(tableNameOrRegionName)
precision=1E5
new Rect(left,top,right,bottom)
assertNull(trie.get("tee:bar"))
returnPoshiElement == null
new StringBundler(10)
!content.contains("&")
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
selenium.isElementPresent("link=Control Panel")
stack.peek()
defaultDndAccess != null
Simple.forClass(type)
Throwable e
generateFluentSetters()
context.getDataSource()
loaded.getLoaded().getDeclaredConstructor()
Validator.isNotNull(entry.getUrlTitle())
root.isDownloads()
log.info("Setting account {} to AUTO_PAY_OFF because of default payment method deletion",account.getId())
buttons.size() > 3 && categoryTypes.size() > 4
observable.timeout(waitTime,timeUnit).toBlocking()
CACHE.findOrInsert(classLoader,new TypeCache.SimpleKey(type,additionalInterfaces),new Callable<Class<?>>(){   @Override public Class<?> call() throws Exception {     return new ByteBuddy().with(new NamingStrategy.SuffixingRandom("SpockMock")).ignore(none()).subclass(type).implement(additionalInterfaces).implement(ISpockMockObject.class).method(any()).intercept(MethodDelegation.withDefaultConfiguration().withBinders(Morph.Binder.install(ByteBuddyInvoker.class)).to(ByteBuddyInterceptorAdapter.class)).transform(Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)).implement(ByteBuddyInterceptorAdapter.InterceptorAccess.class).intercept(FieldAccessor.ofField("$spock_interceptor")).defineField("$spock_interceptor",IProxyBasedMockInterceptor.class,Visibility.PRIVATE).make().load(classLoader).getLoaded();   } } ,CACHE)
(byte)201
inetAddresses == null || inetAddresses.isEmpty()
order=0
service.getAllGtasksFromListId(listId,false,false)
Exception e
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_STRING)
super.destroyProcessImpl()
1L << 36 - 1
cache.remove(key)
Math.min(titleRight,subtitleRight)
Throwable e
new BindException(newConcept,"concept")
view != null && view.getParent() == this
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
forced == null && con.getListener().isForceDefault()
poList[2]
mTo == 0
stsClient.setKeySize(128)
tw.close()
Rule.DEFAULT_WEIGHT * 1.1
requestFiles == null
foregroundScanPeriod=p
"access-control/default is missing operations: " + defaults
matcher.group(2)
result.getPath()
(DataProvider)object
TimeValue.timeValueSeconds(randomIntBetween(1,5) * aggHistogramInterval)
mDataAuthorities == null || data == null
public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
command <= 0x07
checkpoint(true,true)
JSParameterTableModel.createDefaultValueCellFragment("",createFakeClass(),JavaScriptSupportLoader.ECMA_SCRIPT_L4)
new Paint()
getAnonID() != null && getWordPressComUserName() != null
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
refreshRotationLockTile()
@Parameters(name="{0}") public static List<String> getList() throws Exception {   List<String> classCommandNames=new ArrayList<>();   String testName=PropsValues.TEST_NAME;   if (testName.contains("#")) {     classCommandNames.add(testName);   }  else {     String className=testName;     Element rootElement=PoshiRunnerContext.getTestcaseRootElement(className);     List<Element> commandElements=rootElement.elements("command");     for (    Element commandElement : commandElements) {       classCommandNames.add(className + "#" + commandElement.attributeValue("name"));     }   }   return classCommandNames; } 
responseModels.entrySet()
refreshRotationLockTile()
Boolean.parseBoolean(this.getOptional("kylin.query.security.table-acl-enabled","true"))
Math.min(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
Observable.just(activityFeedButton,currentUserButton,filterExpandMoreButton,filterTextView,loginButton,searchButton)
clickListener == null
service.getDomain().id()
sendTo("bar")
preserve.asString()
mContext.sendBroadcast(intent)
mPowerManager.isInteractive()
NTP_TIMEOUT=10000
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","three")
mismatchedCompanyIdDLFileEntryMetadatas.size()
mRvc == null || !session.isActive()
Throwable t
c.set(IDAUTHORITY_WAIT_MS,100)
commState.putBoolean("sys",sys)
"DROP INDEX " + PATTERN_ITEM_INDEX
GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))
mTarget != null && target == null
logger.debug("Apollo bootstrap config is enabled for context {}",context)
i < 0x8000
private SimpleAttributeBinding attributeBinding; 
new IncorrectOperationException(getClass().getName())
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
ColorProperties.getColor("inactiveTextColor")
rootSaveDir.mkdirs()
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
remoteMsgId != null && conversation.findMessageWithRemoteId(remoteMsgId,counterpart) != null
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
TelephonyManager.getDefault().getCurrentPhoneType()
dest.writeTypedArray(remoteInputs,flags)
flushIntervalSecs == 0
getActiveFgCall().getPhone().startDtmf(c)
b.getTypeByte()
dlFileEntry.isInTrash()
dir.mkdirs()
mEntryValues[which]
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,true,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
message.setHeader("Message-ID",cursor.getString(12))
selenium.isElementPresent("link=Control Panel")
getMeasuredWidth()
flags_=6
new PackageConfig("")
OrderUtils.getPriority(((DecoratingProxy)obj).getDecoratedClass())
GitHandlerUtil.doSynchronously(h,GitBundle.getString("rebasing.title"),h.printableCommandLine(),false)
LAYERS=5
mDuration >= 0 && mTransitions != null
log.warn(notJava6.getMessage() + " .. trying RI.")
data.needsTransformation() || exifRotation != 0
_parms._sample_rate < 1 || _parms._sample_rate_per_class != null
N node
StringBuilder xml=new StringBuilder(request.getContentLength()); 
intsScratch.values[0]=ordinal
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
params.get(key)
JournalTestUtil.updateArticle(article,"Content: Enterprise. Open Source. For Life.",article.getContent(),serviceContext)
m.getDeclaringClass()
LOG.debug("Failed to get mount information: {}",e.getMessage())
sendMessageAtFrontOfQueue(CMD_STOP_AP)
ENABLE_COPY_OPTIMIZATIONS=true
configurationPair.getKey()
input.getExecPath()
Number rate
p.getQuery()
(currentTimeNanos - previousTimeNanos) >= SPANS[index + 1]
CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider<XmlNSDescriptorImpl>(){   @Override public Result<XmlNSDescriptorImpl> compute(){     return Result.create(doCreateDescriptor(kind),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);   } } ,false)
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null,null)
DumbService.getInstance(getProject()).smartInvokeLater(() -> actionManager.tryToExecute(mainMenuAction,fakeMainMenuMouseEvent,null,ActionPlaces.MAIN_MENU,true))
Exception e
RandomStringUtils.randomAlphanumeric(255)
i=10000
TAP_TIMEOUT=300
Thread.sleep(2000)
HDR_TYPE_DATA=0x01
getSupportFragmentManager()
position.offset(mLeft,mTop)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
new IllegalStateException("Property existence constraints can only be used on Neo4j enterprise")
Integer.parseInt(stackIdStr)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
container.getVersion().getId()
meta.getColumnLabel(i)
Assert.assertEquals(interop.getDoubleField(),copy.getDoubleField(),0.001)
private void feedOtherPlayers(final Server server,final CommandSender sender,final String name) throws PlayerNotFoundException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     try {       feedPlayer(sender,matchPlayer);     }  catch (    QuietAbortException e) {     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
TOUCHEVENT_POOL.recyclePoolItem(this)
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,false,1)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
10 * 1024 * 1024
Object[]
suppressLeadingZeroElements == false
selenium.click("//li[4]/span/a/span")
stat.st_size.longValue()
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
out.writeVInt(data[0])
selenium.isElementPresent("link=Control Panel")
isDelegateLastClassLoaderName(classloaderName)
dynamicType.getLoaded().getDeclaredConstructor()
(ElasticSearchException)actual
syncDLFileVersionDiffPersistence.fetchByF_S_D(fileEntryId,sourceFileVersionId,destinationFileVersionId)
newArr[0]
myStartY=startY
new RuntimeException("Error loading DataSet at path " + path + " - DataSet may be corrupt or invalid."+ " Spark DataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
mThemeStore.getWpComThemeByThemeId(themeId)
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
displayContent.getDockedStackVisibleForUserLocked()
arr.size(oi) != 1 && !isVector(arr.shape())
ctx.getApplicationContext()
-26
@Self Statement currentStatement
Boolean.parseBoolean(getOptional("kylin.query.enable-dynamic-column","false"))
loaded.getLoaded().getDeclaredConstructor()
m.getTablePerHierarchy()
!isDistinct(child)
wf.setVersion(2)
WaitUtils.waitForPageToLoad()
log.debug(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
new IllegalArgumentException("cannot set max pool size to a value less than the current max value(=" + i + ")")
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
!rootRescanned
lookup="java:/TransactionManager"
new Backgrounding(true)
myPopup.closeOk(null)
hasErrors.get() || delegates.size() > 1
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)
!traceOn
strings.length >= 5
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
product.getName()
latch.startLatch.await(400,TimeUnit.MILLISECONDS)
blog.getLocalTableBlogId()
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class,true)
Math.min(desired,heightSize)
assertTrue(model.getUniqueItems())
KotlinToJVMBytecodeCompiler.INSTANCE.analyzeAndGenerate(environment)
a.getDimension(attr,0)
bitArray.skipBits(8)
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)
new RuntimeException("Error when launching multilang subprocess",e)
public T withCancellationToken(CancellationToken cancellationToken){   operationParamsBuilder.setCancellationToken(Preconditions.checkNotNull(cancellationToken));   return getThis(); } 
ensureExpectedToken(XContentParser.Token.VALUE_NUMBER,parser.nextToken(),parser::getTokenLocation)
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_highlight_bg))
projectMeasures.get(1L)
mPowerManager.isInteractive()
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED)
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateMessageParam",m.getName(),m.getClass().getName()))
XmppStringUtils.parseBareJid(from)
createRecord(value,now,expiryTime)
(prop.getModifiers() & ACC_FINAL) == 0
Exception e
conversation.getContactJid().split("/",2)
i <= maxIndex - match.length()
fileIds == null || fileIds.isEmpty()
performDexOpt(packageName,instructionSet,false)
getBoldStatus(elements[1])
method.getName().equals(writeMethodToUse.getName()) && !method.equals(writeMethodToUse) && !method.isBridge()&& method.getParameterTypes().length == writeMethodToUse.getParameterTypes().length
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()&& (node.getGenericsTypes() == null || node.getGenericsTypes().length == 0)&& lType.isUsingGenerics()
returnValue
sendCommand(CLIENT,Keyword.LIST.raw)
log.warn(sm.getString("contextConfig.role.runas",runAs))
cache.invoke(entry.getKey(),this,entry.getValue())
is(5)
mValues[8]
sortedRanges.size()
Slog.i(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
stmt.execute(sqlQuery)
getServiceForUserLocked(userId)
lastTime >= 0 && nowELAPSED < minTime
AttributeCache.instance().get(packageName,realTheme,styleable.Window,userId)
parsedResult.getType()
configureSwipeToRefresh(view)
node == null || v == node.view
!mIsOnInnerCircle && hour != 0
_typeSettingsProperties.toString()
pubKeyStore == null
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
log.info("Hooking new default : onOperatorError")
Object data
boundary.endsWith("\"")
getConnectTimeout()
new EditText(getDialogContext(true),attrs)
assertCompletionVariants(myProjectPom,"jar","pom","war","ejb","ejb-client","ear","bundle","maven-plugin")
partialUri.toLowerCase()
h / 2
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
serviceDataUuid == null || mServiceData == null
remaining == 0
420L * FileUtils.ONE_MB
new AsyncTask<Object,Object,Long>(){   @Override protected Long doInBackground(  Object... objects){     return DatabaseHelper.getInstance(context).getHostCount(rule.info.applicationInfo.uid,false);   }   @Override protected void onPostExecute(  Long hosts){     rule.hosts=hosts;     notifyDataSetChanged();   } } .execute()
Objects.equals(that.value,this.value) && that.timestamp.isEqual(timestamp) && that.windows.size() == windows.size()
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges),0)
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate","TABLE_SCHEMA=hive_test.default; TABLE_NAME=partition_pruning_test")
BackupManagerServiceInterface svc=mService; 
checkCall(receiver)
VOLUME_CHUNK_SHIFT=20
Cell cell
populateUi()
ByteBuf line=buffer(64); 
beanDefinition.isAbstract() || beanDefinition.isLazyInit()
mCursor.close()
displayList != null && displayList.isValid()
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getTimeZoneId(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
power >= POWER_REQ
type.equalsIgnoreCase("integer") || type.equalsIgnoreCase("int")
getOriginalAmount().subtract(remainingAmount)
context.var("double",2)
args[0].trim().length() < 2
getWebElement(locator)
logger.warn("{}",builder.toString())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).bold("#")
image.pixelWidth != pixelWidth
service.getKioskList().getAvailableKiosks()
AdviceWithTasks.afterByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
USE_DISPLAY_LIST_PROPERTIES=false
setValue(key,PSS_USS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
flyway.info().all()[3]
System.currentTimeMillis()
file.length() > Integer.MAX_VALUE
mScreenBright=true
COOKIE_SYNC_MANAGER=true
selenium.isElementPresent("link=Control Panel")
private T myCurrentTree; 
Long.class
mGnssCallback != null
blog.getLocalTableBlogId()
Response.ok(null,MediaType.TEXT_PLAIN)
element instanceof PsiField || element instanceof PsiTypeParameter
DESCRIPTION_PATTERN.matcher(output)
responseClass == Void.class || responseClass == Void.TYPE
witnessCapsule.createReadableString()
player.playSound(location,soundArg,(float)minimumVolume,(float)pitch)
TimeUnit.MILLISECONDS.toMillis(1000)
UpgradeStepRegistrator.class
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)
rowKeyColumnIO.writeColumnWithoutDictionary(buffer,0,length,recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
next.handle(request).then(responseProcessor)
existingFile.refresh(true,toWatchRecursively)
new GLBufferPool(true)
type == TRIANGLE || type == TRIANGLES
getNotificationInterface().getInterruptionFilterFromListener(mWrapper)
new IndexWriter(dir,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
{abiOverride}
args.getLong(KEY_GID,-1)
stack.get(stack.size() - 3).longValueSafe()
moduleRegistry.getModule("gradle-test-kit").getImplementationClasspath()
mRedrawClip.isEmpty() || view.getParent() == null
assertEquals("b=" + button.getWidth() + ", f1="+ field1.getWidth()+ ", f2="+ field2.getWidth(),130,panel.getPreferredSize().width)
lock.isHeldByCurrentThread()
new FormAttachment(wExcludeWildcardField,margin)
" firstActiveTime=" + firstActiveTime
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
host.getHost()
logger.trace("Trying to map {} to {}",t,path)
PsiElement resolved=cref.resolve(); 
type.getDeclaredConstructor()
mValue == null || offset > mValue.length
LOG.warn("The given state from the response: " + billToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
INDEX_VERSION=17
VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)
location.getAccuracy() > precision
(lo + hi) >>> 1
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
Integer.parseInt(stackIdStr)
destCharset=StandardCharsets.UTF_8
new BuildRuleParams(params.getBuildTarget(),() -> ImmutableSortedSet.<BuildRule>naturalOrder().addAll(swiftCompileRules).addAll(implicitSwiftCompileRules).addAll(cxxDeps.getDeps(ruleFinder)).addAll(preprocessor.getDeps(ruleFinder)).build())
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,null,false,false)
connectionManager.write(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
settingOptional.get().getGroup()
myNameField.getFocusableComponent()
new Paint()
new MBeansObjectNameQueryFilter(jmxConnection)
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
LOG.debug(e)
project.getPluginArtifactRepositories()
assertEquals(8,executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
centralDirOffset > eocdOffset
group.isStagingGroup() || group.isStagedRemotely()
TextUtils.isEmpty(recipientIds[i]) || recipientIds[i].equals("-1")
loaded.getLoaded().getDeclaredConstructor()
mock.expectedMinimumMessageCount(1)
loaded.getLoaded().getDeclaredConstructor()
Boolean.parseBoolean(attrValue)
selenium.isElementPresent("link=Control Panel")
Integer.parseInt(tupleValue)
attributesBuilder.put(toPresentationForm(node),attributes)
Collection<Object>
new Paint()
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
is(false)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
compensationRange.contains(compensation)
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
randomFrom("allocate","forcemerge","delete","shrink")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new Rect(left,top,right,bottom)
typeSettingsProperties.toString()
INITIAL_LAUNCH_IDLE_TIMEOUT=60000
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
prefs.getInt(ACRA.PREF_LAST_VERSION_NR,0)
mShowcaseRect.left == cx - dw / 2 && mShowcaseRect.top == cy - dh / 2
Aria.download(this).getTaskList()
TypeEvalContext.slow()
LOGGER.info("Invoking authentication post processor [{}]",p)
resource.toURI()
getFastAdapter().notifyAdapterItemChanged(position)
!Objects.isNull(value)
file.getAbsolutePath()
topFriendsGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
old + 21
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
new LocationVariableResolver(_mockResourceManager,_mockSettingsLocatorHelper)
this.myHashMap.containsValue(o)
bar.expectedMinimumMessageCount(2)
mPlayer.getCurrentPosition() * 1000L
@Override public Variable emitAddress(StackSlotValue address){   Variable result=newVariable(LIRKind.value(target().wordKind));   append(new StackLoadAddressOp(result,address));   return result; } 
ignitionEventHandler != null
registrar.checkExisting(added)
c.close()
mContainerView.getHeight()
si.id == id && si.taskRemoved == taskRemoved
Color.fromRGB(0xF0F0F0)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
activeFrom.getTime()
new EntitlementUserApiException(ErrorCode.ENT_INVALID_REQUESTED_DATE,now.toString(),requestedDate.toString())
second.get(j)
isHoverable() || isHovered()
!calledSetTotal
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().toEpochMilli()
verify(mWifiService).stopLocalOnlyHotspot()
mVerticalScrollBarMode == SCROLLBAR_ALWAYSOFF && (mActualScale - mMinZoomScale <= MINIMUM_SCALE_INCREMENT)
BigInteger.valueOf(10)
log.debug(throwable,"Query %s failed",queryId)
getConfiguration(config)
AtmosphereRequest request
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
binary.getDisplayName()
context.getMainLooper()
selenium.isElementPresent("link=Control Panel")
FileEntry.class
_buildTemplateWithGradle("portlet","portlet-dependency-management","--dependency-management-enabled")
BackgroundTask.wrap(() -> renderPage(initialPage))
new InternalTestCluster(randomLong(),2,2,cluster2Name,cluster2SettingsSource,0,false,CHILD_JVM_ID,SECOND_CLUSTER_NODE_PREFIX)
new IllegalStateException(e)
rangedRegion.getUniqueId()
((SuperColumn)c).cloneMe()
regUser * trusteeWeightValue * trusteeFactorValue* trusteeFactorValue
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).collect(Collectors.toList())
executeRunnableDismissingKeyguard(runnable,null,false,false)
getMapNearCacheManager(nearCacheMember)
battery.addPower(Math.min(power,battery.getCapacity() - battery.getStored()),false)
updatePaints(g.getColor(),routePoints,g.isShowCurrentTrack(),settings,tileBox)
selenium.isElementPresent("link=Control Panel")
new IndexWriter(rd,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
{4,7,5,11,6,5,7,5,11,11}
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,false,"isAppInactive",null)
this.remainingHighlightTicks
collection.add(300000000l)
getDatabaseCatalog() != null && getDatabaseCatalog().length() > 0
frame.delete()
UseItemCaptureMessage.newBuilder().setEncounterId(this.getEncounterId()).setSpawnPointId(this.getSpawnPointId())
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
scheduleRemoveStartingWindowLocked(wtoken)
new Object[lines.size()][28]
ModalityState.defaultModalityState()
decode(getCanonicalText())
realm.checkIfValid()
mAms.mWaitForNetworkTimeoutMs=2000
timeLeft <= 0
Thread.sleep(2000)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
insertItemStacked(inventory,remainder,false)
logger.info("Plugin class " + pluginClass)
@UriParam(label="producer",defaultValue="true")
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
rendererAttr != null
i=1
mActiveStreamType == -1 || streamType != mActiveStreamType
link.bone.getWorldBindRotation()
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true,false)
c == Byte.class || c == Byte.TYPE
JSONUtilities.safePut(options,"guessCellValueTypes",false)
socket.setSoTimeout(1000)
queuedChunk.provider.originalLoadChunk(queuedChunk.x,queuedChunk.z)
selenium.isElementPresent("link=Control Panel")
DEBUG=false
IoUtils.safeClose(connection,delegate)
loaded.getLoaded().getDeclaredConstructor()
it.setJavadocComment("Super extra cool this annotation!!!")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
status().isSeeOther()
message.getMessage().getExpiresInSeconds() * 1000L
selenium.isElementPresent("link=Control Panel")
TypeResolver.resolve(channelTypeUID,locale)
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
Arrays.hashCode(mData)
Integer.parseInt(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
menuGroup.add(new CommitUsingExecutorAction(executor))
nextTokenIs(b,IDENTIFIER)
LOGGER.error("Unsupported {} : {} for serviceId : {}",OAuthConstants.REDIRECT_URI,redirectUri,serviceId)
buddyIter.next().getValue()
public String getFileId(){   return fileId; } 
selenium.isElementPresent("link=Control Panel")
IndexReader.open(userindex)
startHours == 20
mService.mLockTaskController.checkLockedTask(tr)
Integer.parseInt(time.split(":")[0])
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
info.getGroupIdLevel1(mContext.getOpPackageName())
new LayerView(this,0x0f0000ff)
temporaryFolder.newFolder()
e2.getPointerCount()
sep < 0 || sep > j
1L << 36
user.getUserId()
timeout=20000
Integer.parseInt(stackIdStr)
server.getClass()
!mNavigationBarView.isQuickScrubEnabled()
columnController.createColumns(false)
log.error("Filtering key {} due to exception",k,e)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(17)
rendererAttr != null
new LFWDataFetcher(imageWidth,imageHeight)
new UnsupportedOperationException(getClass().getName())
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.")
generateFluentSetters()
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
new int[681]
MAX_DIMEN_FOR_ROUNDING=1920
randomIntBetween(1,2000)
log.warn("Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].",currValidWorkers,maxWorkerCount)
e.toString()
logger.warn("{}",general)
(child.mViewFlags & VISIBILITY_MASK) == VISIBLE
response == null
checkBoxView.setButtonDrawable(R.drawable.btn_check)
LOG.debug("Ganglia server component is not live")
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
CanaryLog.d("%s",leakInfo)
dyn.put("delays",JSONObject.NULL)
Native.getLibraryOptions(classes[i])
Throwable e
mUiHandler.removeCallbacks(pae)
UnsupportedOperationException ex
List<UsageInfo>
mapper.setAttributePrefix("ROLE_")
source.getAddress()
address.getHostAddress()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
selenium.isElementPresent("link=Control Panel")
s != null && Boolean.parseBoolean(s)
current >= 0
new IndexWriter(ramDir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
path.getName()
new IndexWriter(indexStore,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
row("p_comment",null,7.0,0.0,null,null,null)
Type.getObjectType(stubInternalName)
WPWebViewActivity.openURL(context,url)
new CacheWriterException("Failed to remove object: " + key,e)
sampleFactory.getDeclaredConstructor()
(bytes[bytes.length - 1] & outputValueMask) == STATUS_SWITCHING_OFF
Message message
mObsoleteAgents.valueAt(i)
_log.warn(ioe,ioe)
loaded.getLoaded().getDeclaredConstructor()
{abiOverride}
selenium.isElementPresent("link=Control Panel")
!mNetworkAvailable
!cookieValue.isNull()
file == null || !file.isValid()
assertEquals(12,events.size())
logger.warn("Field sorting failed, couldn't find table spec: " + model.getSimpleName())
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
public static DurationArray durationArray(DurationValue[] values){   return new DurationArray(values); } 
PendingIntent.getActivity(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
selenium.click("//li[4]/span/a/span")
formatTimeMs(scanWifiLockOnTime / 1000)
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",true))
DataStreamSink<OUT>
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
maxWidth <= 0
thenStore.storeChanged || elseStore.storeChanged
@JsonProperty("id") Long id
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
loaded.getLoaded().getDeclaredConstructor()
Trade item=provider.read(); 
sY != 0
enumDeclaration.getChildNodes().get(3)
subscriptionSender.setContextAttribute("[$CONTENT_URL$]",contentURL,false)
this.clss=listener
result == null || result.size() == 0
userRecord != null && userRecord.mClientRecords != null
dy == 0
@Nullable
new HashMap(61)
iteration=1
elements != null && elements.length > 0
body.isEmpty()
getLogger().debug("\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() + "' was invalid or not found on any repositories.\n"+ "\tThis may not be supported by future versions of Maven and should be corrected as soon as possible.\n"+ "\tError given: "+ e.getMessage()+ "\n")
String name
equalTo(0)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
ddmStructureLocalService.deleteStructure(ddmStructure.getStructureId())
myCell.getSourceAsString()
!_lifecycle.equals(PortletRequest.RESOURCE_PHASE)
processInstance.getProcessDefinitionId()
ClassLoader.class.getDeclaredMethod("findLibrary",new Class[]{String.class})
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
shell.setSize(740,678)
mService.setAppPolicy(UID_A,POLICY_NONE)
level >= 95
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
mEnginesHelper.isEngineEnabled(mRequestedEngine)
CANCEL_TIMEOUT_LIMIT=3000
writeBufferBlocking(false)
SSTableMetadata.createCollector(cfs.getComparator())
blog.getLocalTableBlogId()
Java6Assertions.assertThat(mountedSubComponents).containsExactly(subComponents)
UIUtils.setBackground(mSliderLayout,mSliderBackgroundDrawableRes)
selenium.isElementPresent("link=Control Panel")
getNextClusterSlaveID()
selenium.isElementPresent("link=Control Panel")
mAuthStatusText=statusText
Log_OC.e(TAG,"Trying to send a NULL OCFile")
mService.disconnect()
entry.notification.cloneLight()
loaded.getLoaded().getDeclaredConstructor()
in.readData()
factory.terminateAll()
SOURCE_PATH.deref()
IllegalArgumentException.class
Throwable e
selenium.isElementPresent("link=Control Panel")
Long.parseLong(value)
websocketComponent.setMaxThreads(20)
final WhiteListTrie foundWhitelist=(WhiteListTrie)trie.findNode(FocusString.create("def")); 
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
coverageDataManager.addCoverageSuite(myConfiguration.getName(),new DefaultCoverageFileProvider(coverageFileName),myConfiguration.getPatterns(),lastCoverageTime,myConfiguration.getSuiteToMergeWith(),myConfiguration.getCoverageRunner(),myConfiguration.isTrackPerTestCoverage() && !myConfiguration.isSampling(),!myConfiguration.isSampling())
assertEquals(10,view.getEnqueueCount())
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
laf.getClassName()
myProject != null && myFileType != null
graph.getEdgesAndMetaEdges()
hashingOutputStream.write('\n')
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
new RunResult<T>(this)
view.setTextColor(0xffffffff)
Map.class
new LanczosState(L,overshoot,DistributedLanczosSolver.getInitialVector(L))
ActivityRecord r=(ActivityRecord)it.next(); 
position - 1 >= 0
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(256)
myParameterNameField.getFocusableComponent()
AtmosphereResponse.newInstance()
endsWith("/home/source")
R
String p; 
generateFluentSetters()
position.set(0,0,mRight - mLeft,mBottom - mTop)
services == null || services.size() == 0
Object value=nsDictionary.get(convertKey(key)); 
mRedrawClip.isEmpty() || view.getParent() == null
TcpDiscoveryNode node=rmtNodes.get(nodeId); 
javaVersion < 8
jsonObject.optLong(KEY_DATE_ADDED,0)
loader.start()
(short)6
assertEquals(CodecFactory.fromString(codec).toString(),serdeC.getCodec().toString())
new Paint(Paint.ANTI_ALIAS_FLAG)
NotebookSocket conn
C extends Capability
columnDefinition.getContentValuesStatement(isModelContainerAdapter)
wordDetector.getCursorOffset()
mWindow == null || !mWindow.getSharedElementsUseOverlay()
d.getURIPath()
id=19910
logger.fine("Normalizing")
refreshRotationLockTile()
type.getName()
/**   * Logs <code>load()</code>, <code>store()</code> and <code>close()</code> methods and exceptions.  */ public class LoggingBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private static final Logger LOGGER=LoggerFactory.getLogger(LoggingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   public LoggingBuildCacheServiceDecorator(  RoleAwareBuildCacheService delegate){     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     try {       LOGGER.debug("Loading entry {} from {} build cache",key,getRole());       return super.load(key,reader);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not load entry {} from {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     try {       LOGGER.debug("Storing entry {} in {} build cache",key,getRole());       super.store(key,writer);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not store entry {} in {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void close() throws IOException {     LOGGER.debug("Closing {} build cache",getRole());     super.close();   } } 
ExamplesUtils.classLoader().getResource(HIBERNATE_CFG)
um.isUserUnlocked(user)
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
icer_cc.toClass(Weaver.class.getClassLoader())
viewerPanel.setRedraw(true)
new GroupTest(false)
fileSystem.renameFile(outputFile,archivedOutputFile(1))
ticket.notifyAll()
Long.toString(contentLength)
selenium.isElementPresent("link=Control Panel")
isInputViewShown()
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
openSparkInterpreter(true)
SYNC_OK=0
matchAxisFilter != 0 || wrapAxisFilter != 0
isAllowed()
host1.getSocketAddress()
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
TelephonyManager.getDefault().getCurrentPhoneType()
Class<N>
new Paint(Paint.ANTI_ALIAS_FLAG)
parentGroupId <= 0
props.getBoolean("enable.quota.limiting",true)
logger.debug("cs-change-async-action-callback. current-step:" + currentStep.getKey())
5 * 60 * 1000
myNameSuggestionsField.getFocusableComponent()
assertThat(test.scan(Scannable.Attr.LARGE_BUFFERED)).isNull()
realm.checkIfValid()
cn == null || cn.length() == 0
StubTree fileStub=derefStub(); 
@InSequence(6)
selenium.isElementPresent("link=Control Panel")
e.getPresentation().setEnabledAndVisible(enabled(project,log,details))
DISPLAY_TASKS_PORTRAIT=7
KeyValue<String,Integer>
newPacked[j]
log.debug("Null primary key column for '" + object.getName() + "'")
packageNames != null && packageNames.length == 1
selenium.isElementPresent("link=Control Panel")
HashMap<RealmObject,RealmObject>
/**   * Current size of all enqueued blocks in bytes.   */ private final LongAdder8 curSize=new LongAdder8(); 
Thread.sleep(200)
Object... args
getChunk(adjPos)
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
headers.getCommand()
JDBCUtils.safeGetLong(dbResult,"id")
isEmpty(s)
mPointRealContainerLl.getChildAt(i).setSelected(i == newCurrentPoint)
asyncResult.cause()
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
is(2)
TAuthor_ID()
!dataChanged || isDirectChildHeaderOrFooter(focusedChild) || focusedChild.hasTransientState()|| mAdapterHasStableIds
!mScreenOnEarly
System.nanoTime()
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
executionStats.getStartedSplits()
Boolean.parseBoolean(attrValue)
parser.nextText()
useedStorageSize - originStorageUsage
selenium.isElementPresent("link=Control Panel")
LOG.warn(ex,"Distributed build step failed.")
getStickyFooterPosition(identifier)
isSelected(node)
entry.notification.cloneLight()
TelephonyManager.getDefault().getCurrentPhoneType()
tryRIforRelationshipsPart(m)
assertEquals(1840,res.getWeight(1,2),5)
synchronized (mAuthorities) {   writeStatusLocked(); } 
reg != null && reg.useEnglishNames() != osmandSettings.USE_ENGLISH_NAMES.get()
selenium.isElementPresent("link=Control Panel")
activeFrom.getTime()
RT.count(s)
type.getDeclaredConstructor()
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
w.mHasSurface && !w.mAppFreezing && w.mLayoutSeq == mLayoutSeq
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
new WrappedEpoxyModelClickListener(this,listener)
attributeValue.endsWith(type)
Throwable e
public class PushOrPullPreventingBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private static final Logger LOGGER=LoggerFactory.getLogger(PushOrPullPreventingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final boolean pushDisabled;   private final boolean pullDisabled;   public PushOrPullPreventingBuildCacheServiceDecorator(  boolean pushDisabled,  boolean pullDisabled,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.pushDisabled=pushDisabled;     this.pullDisabled=pullDisabled;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (pullDisabled) {       LOGGER.debug("Not loading entry {} because pulling from {} build cache is disabled for the build",key,getRole());       return false;     }     return super.load(key,reader);   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (pushDisabled) {       LOGGER.debug("Not storing entry {} because pushing to {} build cache is disabled for the build",key,getRole());     }  else {       super.store(key,writer);     }   } } 
(QMMetaEvent)items[i].getData()
rhs.getScore()
"unable to parse " + optionStr
file.getAbsolutePath()
variableType.matches(allowedClassName)
CategoryTranslationImpl.class
new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "+ "Remove the extension or add a type parameter to it.")
(byte)0xe2
new PrestoException(HIVE_FILESYSTEM_ERROR,"Failed to list directory: " + path,e)
TimeUnit.SECONDS.toMillis(timeoutSeconds)
new LeftTuple(new DefaultFactHandle(2,"cheese"),null)
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED && mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
maxSize < (used / total)
Assert.fail("createDirectory was expected to fail with FileAlreadyExistsException")
printType(out,type)
returnTypeCache == null || !(returnTypeCache instanceof ResolvedJavaType)
final SimulatedDpad mSimulatedDpad; 
factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)
new FileOutputStream(tempFile)
" firstActiveTime=" + firstActiveTime
disable2ForUser(what,token,pkg,mCurrentUserId)
Foundation.log("[debug] " + tag + ": "+ message)
volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.getMountUserId() == userId
drivers.keySet()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
this.ctx.getActivity()
blockRoot.getToken() == null || blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
LookupElementBuilder.create(expr,referencedName)
BackupManagerServiceInterface svc=mService; 
new Long(0)
new LightweightThread(null,null,new SuspendableRunnable(){   @Override public void run() throws SuspendExecution {     dut.myMethod();   } } )
Long.parseLong(attrValue)
type.getDeclaredConstructor()
rs.isLast()
type == null
sourceSet.getRuntimeOnlyConfigurationName()
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDh,unrotDw)
config.getMaxEntriesLocalHeap()
session.sessions().createUserSession(adminRealm,admin,"admin",null,"form",false,null,null)
UserHandle.myUserId()
file.getAbsolutePath()
selenium.isElementPresent("link=Control Panel")
assertEquals(1,helper.getRelationshipIndexes().length)
LambdaArgExtKt.foo("",10,new Function1<Integer,Unit>(){   public Unit invoke(  Integer n){     System.out.println(n);   } } )
Assert.assertEquals(6033003930L,trace.getReceipt().getEnergyFee())
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly),curlyLevel())
selenium.isElementPresent("link=Control Panel")
someConfiguredTargetEvaluated || anyConfiguredTargetDeleted || !dirtiedConfiguredTargetKeys.isEmpty()|| !largestTopLevelKeySetCheckedForConflicts.containsAll(newKeys)|| !skyframeActionExecutor.badActions().isEmpty()
return true; 
uri.getRawPath()
config.enabled() && config.showInfobox() && counter != null
computator.getContentRectMinusAllMargins()
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
getServiceForUserLocked(userId)
isNavBarVirtKey && !down && !canceled
context.getOpPackageName()
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
DirectoryReader reader=IndexReader.open(dir); 
callback.onPulseFinished()
buf.putLong(utf.length)
lp.width != panelWidth || lp.gravity != panelGravity
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
selenium.isElementPresent("link=Control Panel")
focusedTopActivity != null && focusedTopActivity.getStack().getStackId() != PINNED_STACK_ID
fileName.startsWith("/") || fileName.matches("^[A-z]:\\\\\\S+$")
requestRender()
assertPlanEquals(expectedPlan,actualPlan)
classResolver.resolveMandatoryClass(type)
new int[433194]
SimpleHandler.getInstance().postDelayed(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } )
@Override
new ObjectMapper().readerFor(Map.class)
canvas.clipPath(mRenderPath)
m.getCurrentWaitingJobs()
DEBUG=false
engine.execute(query).dumpToString()
(Long)src
DEBUG=false
Keyspace table=Keyspace.open(tableName); 
new Argument().setIndex(1)
setValue(object,value.intValue())
next.handle(request).then(responseProcessor)
searchFacet != null && searchFacet.getFacetFieldType() != null
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
PermissionUtils.areLocationPermissionsGranted(this)
getHomeButton()
filePath == null || context == null
FastMath.min(origin,num.doubleValue())
new AndroidFiles(this.getService().getAssets(),this.getService().getFilesDir().getAbsolutePath())
parser.getBoolean(KEY_ADJUST_BRIGHTNESS_DISABLED,true)
new JBSplitter("antConfigurations.splitter",0.3f)
any(Object.class)
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
messenger.signUpObsolete(name,null,false)
!verbDoesMatchPersonAndNumber(tokens[posEr - 1],tokens[posEr + plus1],"3","SIN") && !nextButOneIsModal(tokens,posEr) && !"äußerst".equals(finiteVerb.getToken())&& !"regen".equals(finiteVerb.getToken())
viewable=true
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineUninterceptedOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
-2
termSourceField=p.get("termSourceField")
interpreterSetting.getGroup()
mMccStr == null
super.initialize()
new SourceMapParseException("Unexpected number of values for entry:" + entryValues)
metrics.entrySet().stream().filter(e -> e.getKey().startsWith("DIRECTORY")).count() > 20
getBeanClass(factoryClassName).getDeclaredMethods()
AUTOCLOSE_NEVER=2
leading
interceptor.doIntercept(invocation)
UserHandle.myUserId()
checkManageOrCreateUsersPermission("setupRestrictedProfile")
new int[1]
new Paint()
Iterables.find(reportReader.readComponentMeasures(component.getRef()),new Predicate<BatchReport.Measure>(){   @Override public boolean apply(  @Nonnull BatchReport.Measure input){     return input.getMetricKey().equals(metric.getKey());   } } ,null)
Math.min(filterExplanations.get(i).getValue(),factor)
getString(R.string.known_issue_wrong_base_directory,appInfo.deviceProtectedDataDir)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
new CacheConfiguration(CACHE2_NAME)
fileChooser.setCurrentDirectory(defaultSelection)
longSize >= 960
ks.newKieClasspathContainer()
callback.onPulseFinished()
j < arguments.length
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withUser)
@Nested private final DefaultTestReports reports; 
actionWithAccount=account
ShutdownOperations.addOperation(new Runnable(){   public void run(){     clear();   } } ,true)
setEnabledFunctions(mDefaultFunctions,true)
headers.getCommand()
2.0f * zFar * zNear* rangeReciprocal
localRemoveList.clear()
event.getRawY()
false && timezoneFlags == TZ_FLAG_INCLUDE_DST_IN_TZ
{NOTIFY_INIT,NOTIFY_CONNECT,NOTIFY_ABANDON,SLOW_QUERY_NOTIFICATION,FAILED_QUERY_NOTIFICATION,SUSPECT_ABANDONED_NOTIFICATION,POOL_EMPTY,SUSPECT_RETURNED_NOTIFICATION}
displayContent.getDockedStackVisibleForUserLocked()
getExecutionException()
verifyResourcedModel(role,verifiableResourcedModel.getModelName(),verifiableResourcedModel.getTableName(),verifiableResourcedModel.getPrimaryKeyColumnName())
mUiHandler.postDelayed(pae,timeout)
is(false)
assertComputationDurationAround(350_000L)
value[clu][col] / mults[col]
loadingFinished || loader.isLoading()
deadline < now && deadline != 0
traceElements.size()
requestRender()
item != null && !item.isDisposed()
selenium.isElementPresent("link=Control Panel")
store.setConfigFile(usersFile)
loaded.getLoaded().getDeclaredConstructor()
ImmutableList.of(base)
!success
DUMP_TIMEOUT_MS=100000
TokenSet.create(INTEGER_LITERAL,LONG_LITERAL,FLOAT_LITERAL,CHARACTER_LITERAL,STRING_LITERAL,RAW_STRING_LITERAL,NAMESPACE_KEYWORD,AS_KEYWORD,TYPE_KEYWORD,CLASS_KEYWORD,THIS_KEYWORD,VAL_KEYWORD,VAR_KEYWORD,FUN_KEYWORD,EXTENSION_KEYWORD,FOR_KEYWORD,NULL_KEYWORD,TYPEOF_KEYWORD,NEW_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,IS_KEYWORD,THROW_KEYWORD,RETURN_KEYWORD,BREAK_KEYWORD,CONTINUE_KEYWORD,OBJECT_KEYWORD,IF_KEYWORD,TRY_KEYWORD,ELSE_KEYWORD,WHILE_KEYWORD,DO_KEYWORD,MATCH_KEYWORD,RBRACKET,RBRACE,RPAR,PLUSPLUS,MINUSMINUS,MUL,PLUS,MINUS,EXCL,DIV,PERC,LTEQ,EQEQEQ,ARROW,DOUBLE_ARROW,EXCLEQEQEQ,EQEQ,EXCLEQ,ANDAND,OROR,SAFE_ACCESS,ELVIS,QUEST,SEMICOLON,RANGE,EQ,MULTEQ,DIVEQ,PERCEQ,PLUSEQ,MINUSEQ,NOT_IN,NOT_IS,HASH,COLON)
new Paint()
Blocks.dirt.getUnlocalizedName()
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
candidate.getArgumentMapping()
selenium.isElementPresent("link=Control Panel")
new OneRun(43.733802,7.413433,43.739662,7.424355,2227,105)
LOGGER.warn("Could not perform drage and drop",nfe)
UpgradeStepRegistrator.class
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED)
addView(root,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
childLeftTuple.reAddLeft()
getEffectiveHstsEnforced()
Arrays.asList(new Dependency("org.grails","grails-docs",grailsVersion,true))
selenium.isElementPresent("link=Control Panel")
requestData.setInitialText("")
focused == null || focused == root
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
parent.child(i)
lock.isHeldByCurrentThread()
LOG.error("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
Schedulers.newThread()
Sets.newLinkedHashSet()
greaterThanOrEqualTo(0L)
ONE_MINUS_DST_ALPHA(7)
Log.error("Error creating vCard for username: " + username,e)
secondsElapsedRemaining > 0 && !this.mFinished
case USER_ID_CONFIRMED: 
System.nanoTime()
urlConnection.getContentLengthLong()
uri.toString()
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
mDataAuthorities == null || data == null
mRefreshView.getTop() <= 0
AudioFormat.isEncodingLinearFrames(mAudioFormat)
String.format("Could not convert URL %s to URI",resourceUrl)
assertFalse(mDisabled.hasFocus())
TreeMap<String,String>
langTool.check(paraText,true,JLanguageTool.ParagraphHandling.ONLYPARA)
module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0
xml.append(' ').append(ADAPTIVE_SIMULCAST_ATTR_NAME)
JOINER.join("java_binary(","    name = '%s',","    srcs = glob([ 'com/example/generated/*.java' ]),","    main_class = 'com.example.generated.Main',","%s",")","")
myVcsManager.hasExplicitMapping(validParent)
this(type,1); 
InvokerHelper.getMetaClass(obj.getClass()) == mc || !(mc instanceof ExpandoMetaClass)
!mQuietEnable
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod("doWork")
refreshTitle()
innerClass.addConstructor(ACC_PUBLIC,new Parameter[0],null,null)
response.getStatus() < 400 && !(t instanceof IOException)
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))
asList(DERBY,CUBRID,FIREBIRD,ORACLE,SQLSERVER,SQLITE)
private final ICompactionScanner scanner; 
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
tracesDir.mkdirs()
Log_OC.e(TAG,"Unexpected intent " + intent.toString())
origin >= other
d.getMinimumHeight()
"Requeuing shutdown because rootScanned: " + rootRescanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
portalBatchBuildData.getWorkspaceDir()
ev.getAction() == MotionEvent.ACTION_DOWN && getLayoutManager() != null
s5dir + ".dir"
Collection.class
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
@Override public Variable emitBitScanForward(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   append(new AMD64BitManipulationOp(BSF,result,asAllocatable(value)));   return result; } 
formatTimeMs(fullWifiLockOnTime / 1000)
assertThat(project.getMeasureIntValue("directories")).isEqualTo(2)
value instanceof Integer || value instanceof Boolean
Messages.getString(key,param1,param2,param3,param4,param5,param6)
Preconditions.checkArgument(root.isAbsolute(),"Expected absolute path. Got <%s>.",root)
Integer.parseInt(taskIdStr)
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
pattern.toString()
disable2ForUser(what,token,pkg,mCurrentUserId)
Log_OC.d(TAG,"onSaveInstanceState()")
selenium.isElementPresent("link=Control Panel")
checkCall(receiver)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
cs[0].set(r,_createFrame.real_range * rng.nextDouble())
cursor > consumer.get()
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
DEBUG_DRAG=false
/**   * Get a copy of geometry object. Geometry object is mutable. The returned object is therefore copied before returning.  * @return a copy of the geometry object  */ public Geometry getGeometry(){   if (geometry == null) {     try {       geometry=JTSUtils.ewkb2geometry(bytes,getDimensionSystem());     }  catch (    RuntimeException ex) {       throw DbException.convert(ex);     }   }   return ((Geometry)geometry).copy(); } 
JsonUtf8Writer.string(buffer,strings[i])
Boolean.parseBoolean(getDefaultStr(key))
selenium.isElementPresent("link=Control Panel")
logger.warn("Could not commit session",t1)
isInputViewShown()
assertEquals(Optional.of("abc"),result)
balloon.getShadowBorderSize()
getAction().toString()
synchronized (mAuthorities) {   writeStatusLocked(); } 
weekRange.add(Calendar.DATE,6)
new LFWLoader(imgDim,imageTransform,normalizeValue,useSubset).getRecordReader(batchSize,numExamples,imgDim,numLabels,labelGenerator,train,splitTrainTest,rng)
mNetworkInfo != null && networkInfo != null && mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
getTupledSet()
callback.onPulseFinished()
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
minZ != 0f || maxZ != 0f
StringBuilder buffer=new StringBuilder(); 
logger.debug("license [{}] - valid",license.uid())
selenium.isElementPresent("link=Control Panel")
mCallback.onInputUpdated(inputId)
buffer.getUint8()
c == Double.class || c == Double.TYPE
returnPoshiElement.createReadableBlock(readableBlock)
String message
parameter.getName()
localMessage == null || localMessage.isSet(Flag.DELETED)
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection,0)
Strings.dup('C',300)
callExpression != null && callExpression.resolveCalleeFunction(PyResolveContext.defaultContext()) != null
Preconditions.checkState(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
entry.getName().startsWith(path)
resultTabs.getItemCount() - 3
additionalProperties.put(DATE_FORMAT,defaultDateFormat)
grid(0).cache(null)
IllegalArgumentException.class
ColorProperties.getColor("tabTitleHighlight")
curComp.equals(service)
samlServletDeployment(SalesPostAutodetectServlet.DEPLOYMENT_NAME,"sales-post-autodetect/WEB-INF/web.xml",SendUsernameServlet.class)
_fragmentCollectionLocalService.deleteFragmentCollection(fragmentCollectionId)
StringBuilder buffer=null; 
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
bitstampAuthenticated.getBitcoinCashDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
CacheProjection<K,V>
private JsStatement mapExpressionStatement(Node node) throws JsParserException {   JsExpression expr=mapExpression(node.getFirstChild());   return expr.makeStmt(); } 
paused.set(true)
item == null || item.getStatus() < 2
columns.size() == 1 && expression.getType().getValueType() != Value.ROW
offset(200.0)
!ufsDeleter.delete(alluxioUriToDel,delInode)
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","three")
-1L
LUMBRIDGE_HOME_TELEPORT=4
private final BuildMode buildMode; 
code.startLine("/* JADX WARNING: ").addMultiLine(warn.getWarn())
active=false
-121
new AlertDialog.Builder(this)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
mService.mDisplayContents.valueAt(i)
color.toLowerCase(Locale.ROOT)
builder.createStructureViewModel(editor)
attributes.getAllFlags()
lexerEngine.equalAny(Symbol.LT_GT,Symbol.BANG_EQ,Symbol.BANG_GT,Symbol.BANG_LT,DefaultKeyword.LIKE)
isSupportsAlterColumnType()
klass.getDeclaredFieldsUnchecked(false,declaredFields)
compareStepMeta != null
scopeOwner != null && scopeOwner == PsiTreeUtil.getParentOfType(target,ScopeOwner.class)
is(true)
mPanProfile.isProfileReady()
private View mAlarmStatusCollapsed; 
sendSigKill(myProcessUid)
assertThat(list.params()).hasSize(11)
checkCall(receiver)
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureHeight,this.mTextureWidth,this.mScale,this.mRotated)
sbn.getPostTime()
session.saveWithoutFlush(model)
file(path).isFile()
Exception e
user == null || "false".equalsIgnoreCase(property.getProperty("zeppelin.jdbc.auth.kerberos.proxy.enable"))
mAttributes.getAllFlags()
type.mediaType()
qp.isExclusiveMinimum()
Context.newBuilder("java").option("java.AllowClassLoading","true")
isAutomaticallyAdded()
logger.warn("Channel error",cause)
conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY)
meta.isUsingSecureAuthentication()
mFlexItemInEdit.setAlignSelf(AlignSelf.AUTO)
LOGGER.lifecycle(msg.apply())
scale(im,w,h)
USE_MACOSX_CALAYERS=true
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
TYPE_ATSC_M_H=0x00030300
getPolicy().getMaxBinaryMessageSize()
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
List<SampleItem>
Thread.sleep(105)
@NonNull BluetoothDevice bluetoothDevice
appendOrderByComparator(sb,"CalendarResource.",orderByComparator,true)
IllegalArgumentException.class
mHwSession.isConfigFlagSet(flag,(int result,boolean value) -> {   halResult.value=result;   flagState.value=value; } )
new PerfBenchmarkDriver(perfBenchmarkDriverConf,_tempDir,_loadMode,_segmentFormatVersion,false)
superClass == Object.class || superClass == null
StringUtils.isEmpty(finalFormKey)
Exception e
Path conf=nodeEnvironment.configFile(); 
CompletableFuture<Void>
bookmarksFolderFinder.countF_E_ByG_F(groupId,folderId,queryDefinition)
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_IE_DRIVER_EXECUTABLE
pFromY - pToY
uri == null || "thing".equals(uri.getScheme()) == false
topLevelBuildData.getWorkspaceDir()
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
interceptors.addLast(newAInterceptor(a))
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
new QueuedThreadPool(4)
url.startsWith("http://") || url.startsWith("https://") || url.startsWith("file://")
mSelectResponse != null && mSelectResponse.length > 0
32 - (digits - length)
String message
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
new FileNotFoundException(getURL() == null ? "null" : getURL().toString())
pubSubDomain=false
Mapper.class
get(0,0,0,0,225,0,0.4f)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
disable2ForUser(what,token,pkg,mCurrentUserId)
auxString2.lastIndexOf(",")
UpgradeStepRegistrator.class
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
sentencePartToEndOfError.length() - lastLineBreakPosInError
assertEquals(CodecFactory.xzCodec(i).toString(),serdeC.getCodec().toString())
LOG.info(e)
element instanceof ZLTextWord || element instanceof ZLTextFixedHSpaceElement
LOGGER.isDebugEnabled()
inOrder.verify(mockAwareService).subscribe(any(),eq(clientId),eq(subscribeConfig),any())
tw.close()
selenium.isElementPresent("link=Control Panel")
public static final BatooTemplates DEFAULT=new BatooTemplates(); 
newName.equalsIgnoreCase(file.getName()) || !delegate.exists(file)
LOG.debug("Terminating gRPC server")
status.isDir()
new AnnotationTransactionAttributeSource(false)
textChangeObservable.debounce(400,TimeUnit.MILLISECONDS)
dirs[i].isDirectory() || dirs[i].getName().startsWith(".")
!ZipSecurity.isValidZipEntryName(clsName)
mUiHandler.postDelayed(pae,timeout)
/**   * called by handle  */ public static String coerceToString(Object o){   return o.toString(); } 
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
Assert.assertTrue(permissionChecker.isOmniadmin())
BeanPropertiesUtil.getObjectSilent(model,_keyProperty)
mAttributes.getAllFlags()
if (mAllowUndeclaredRTE) {   processImport(aAST); } 
indexOutURI.toString()
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
ApplicationManager.getApplication().getMessageBus().connect(ExternalSystemShortcutsManager.this).subscribe(KeymapManagerListener.TOPIC,this)
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
i < 5000
new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId),e)
logger.fine(sb.toString())
ATLAS_MAP_ENTRY_FIELD_COUNT=3
V
public T setColorOutput(boolean colorOutput){   operationParamsBuilder.setColorOutput(colorOutput);   return getThis(); } 
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)
new CommandLineException("ModelNode request is incomplete",e)
pathParts[0] != null && pathParts[0].length() > 1
LOG.warn("Failed to get files from " + baseDirectory.getAbsolutePath())
AppLog.e(T.NOTIFS,"GCM Error: " + errorId)
jobExecutionContextClass.getMethod("setResult",Object.class)
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
ParamUtil.getLong(actionRequest,"privateLayoutSetPrototypeId")
new SettingsValidators.InclusiveIntegerRangeValidator(0,100)
Arg args
value.toLowerCase().startsWith(constraintLowerCase)
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
sendMessageAtFrontOfQueue(CMD_STOP_AP)
fragmentCollectionPersistence.countByGroupId(groupId)
ImmutableList<SourceFile>
logger.fine("attaching ack callback to event")
graph.getNewNodes(expectedMark)
ps.saveRelationship(rel)
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
new L2Vertex(null,"",-1,1e-8)
MAX_LOW_POWER_STATS_SIZE=2048
WordPress.getCurrentBlog().getLocalTableBlogId()
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
promises.add(promise)
userInfo == null || !userInfo.canHaveProfile()
synchronized (mService) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
SCHEDULED_EXECUTOR_POOL_SIZE=8
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle || DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.db2
config(" ",1)
Exception e
log.warn("Error connecting to node {}",node,e)
new FileHyperlinkRawData("C:/Users/User/AppData/Roaming/npm/node_modules/karma-commonjs/client/commonjs_bridge.js",20,-1,3,s.length())
mExpandedDialog != null && mExpandedParams != null
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxQueueLength,priority,conf,server)
void headersEnd(int streamId) throws ConnectionException ; 
"Received communication message while stopping (will ignore) [nodeId=" + nodeId + ", msg="+ msg+ ']'
generateFluentSetters()
connection.getFields(transMeta.environmentSubstitute(wBaseDN.getText()))
UriBuilder.fromResource(StreamAlertResource.class).build(streamid)
new StackManager(new File(stacksCycle1),null,osFamily,false,metaInfoDao,actionMetadata,stackDao)
clipItem.coerceToText(mContext)
List<String>
!showNotifications.isNull()
Thread.sleep(3000)
eventDispatcher.loadCanceled(loadable.dataSpec,loadable.type,elapsedRealtimeMs,loadDurationMs,loadable.bytesLoaded())
context.getLong("hdfs.callTimeout",30000L)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).switchIfEmpty(EMPTY_FORM_DATA)
lastPos < mTargetPos
" firstActiveTime=" + firstActiveTime
return true; 
log.severe("Error executing SQL " + statement,e)
artifact.getExecPath()
mDataAuthorities == null || data == null
evaluate("pkg = package_name()").moduleLookup("pkg")
RESOURCES_UNAVAILABLE_OR_UNSPECIFIED=47
mScreenBrightnessDarkConfig > screenBrightnessSettingMinimum
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
new AffineTransform(mTextScaleX,mTextSkewX,0,1,0,0)
annotation.value()
mSettingsButton != null && !mHasSettingsPanel
encoder.writeNullableString(event.getMessage())
state != SocketState.CLOSED
Field field
position <= firstPos
PlatformDependent.getByte(array,index)
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
Throwable e
LinkageError e
String.join("\n","pending changes to 'foo/bar/baz.xml'","pending changes to 'spam/ham/eggs.c'","")
features.isKeyOrdered=true
mState != STATE_INITIALIZED
Platform.isAIX()
action == MouseEvent.RELEASE
selenium.isElementPresent("link=Control Panel")
details.setProperty(fileName,Long.toString(timestamp))
loaded.getLoaded().getDeclaredConstructor()
driverFile.getFile()
getValueController().updateValue(editedValue,true)
_typeSettingsProperties.toSortedString()
Set<SkyKey>
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER || mBrowserType == MediaBrowserType.SITE_ICON_PICKER
new IndexWriter(indexStoreA,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
gen.addLoadImmediate(Register.R0,123456789)
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize()
getPlayerPosition().y
getService().animateCollapseNotifications()
multipleTopologyChangeWorker(TOP_CHANGE_THREAD_CNT)
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
getMeasuredWidth()
mWindowManager.removeViewImmediate(mContainer)
skipDoc != 0 && skipDoc >= doc
log.error(e1.getMessage(),e1)
new ExecutorCompletionService<ProjectSegment>(executor)
temporaryFolder.newFolder()
assertPlanEquals(expectedPlan,actualPlan)
Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)
new CountryListLoadTask(null,null,mListener)
5L * 60 * 1000
await().atMost(20,TimeUnit.SECONDS)
searcher.get().getRawReader()
trade.getPrice()
log.debug("Unrecognized Oracle client version at " + oraHome)
sentBytesCnt.longValue()
targetEditor.getScrollingModel()
Matrix.setIdentityM(outTemp,0)
assertNotNull(store.getId())
ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
queryIds.remove(deadQuery)
types.get(i)
maxAlongDimension.isVector()
Reflection.methodHandle(bigArrayField.getType(),"sizeOf")
registrar.checkExisting(added)
ElementsParser.isAlphaNumeric(ch2)
closeCode <= 1001
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
jarResourcesElementDesc.getStoreFactory()
currentDateTime.plusSeconds(this.skewAllowance)
!withChildren || domElement == null
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
addInfo("URL [" + url + "] is not of type file")
XmppStringUtils.parseBareJid(address)
JOrphanUtils.valueOf(getBoolean(value))
context.getAssets().addAssetPathAsSharedLibrary(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
assetDisplayPageEntry.getLayoutPageTemplateEntryId()
a.getBoolean(R.styleable.View_fadeScrollbars,true)
targetClassLoader == null || targetClassLoader.getClass().getName().equals("jdk.internal.loader.ClassLoaders$PlatformClassLoader")
selenium.isElementPresent("link=Control Panel")
e.toString()
message.getMessage().getExpiresInSeconds() * 1000L
Extensions.getExtensions(MODULE_CONFIGURABLES,myModule)
plugin.isEnabled()
Character.isUnicodeIdentifierPart(ch) || ch == '{' || ch == '<' || ch == '['
8 + 8
mGnssCallback != null
endsWith("/home/source")
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
-11f
GL.glDeleteTextures(n,textures,Memory.getPosition(textures))
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
UpdateValueAndNotifyManager()
LOGGER.error("Code expired : {}",code)
mccMncs != null
getPath(renderRequest,renderResponse)
route.toString()
mBiometricUnlock.stop()
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
treePrev.getTextLength() == 0 && !treePrev.getElementType().isLeftBound()
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver,UserHandle.USER_ALL)
d.setAutoMirrored(false)
Throwable e
IllegalStateException e
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
assertEquals(50,cursorList.cacheSize())
shortSizeDp >= 600
mNwService.getInterfaceConfig(mTetherInterfaceName)
Log_OC.e(TAG,"Incorrect action sent " + intent.getAction())
LocalFileSystem.getInstance().findFileByIoFile(parentIoFile)
setValue(object,value.intValue())
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
this.evaluator.prepareRightObject(handle)
r - scrollX
Throwable ignored
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
assertThat(context.getExtensions()).hasSize(47)
from >= to
mGnssCallback != null
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,19,getLayoutLog())
InputHelper.capitalizeFirstLetter(brand)
display.equals(taskRect) || taskRect.isEmpty()
c.getName().equals(ECLIPSE_PARSER_CLASS_NAME) || c.getName().equals(ECLIPSE_CUD_CLASS_NAME)
assembledServletDefinitions.put(servletName,entry.getValue())
idleConnectionTimeout + nettyResponseFuture.getLastTouch()
public static BuildConfigSpec addBuildConfigSpectiStrategy(BuildConfigSpecBuilder builder,String image){   return builder.withNewStrategy().withType("STI").withNewStiStrategy().withImage(image).endStiStrategy().endStrategy().build(); } 
assertFalse(bulkResponse.buildFailureMessage(),bulkResponse.hasFailures())
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
mBiometricUnlock.stop()
selenium.isElementPresent("link=Control Panel")
firstPos > mTargetPos
animateHeaderDelayed()
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,false,userId)
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()),e)
rightTuple.setStagePrevious(last)
logger.info(e)
System.currentTimeMillis()
DEFAULT_HEAP_LIMIT_CAP=700
machine.getConfig().getLimits().getRam() * 1024L * 1024L
recipe.hasKey("energy",3)
amount.scale()
createArtifactSpec("b","1.0-SNAPSHOT")
queryIds.remove(deadQuery)
WordPress.getCurrentBlog().getLocalTableBlogId()
statesByName.put(counterName,state)
timeout=25000
assertEquals(13,definitions.size())
new BuilderRemoteViews(mBuilder.mContext.getApplicationInfo(),R.layout.notification_material_media_action)
gen.generateParser(false)
settings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
mAccessibilityController.isAccessibilityEnabled()
setProgressInternal((int)progress,true,false)
payload.intPayload[1]
count=1
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
userModel != null
app.getSQLiteAPI().getOrCreateDatabase(DB_NAME,false)
Thread.sleep(1000)
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } )
UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)
(BrokerService)context.getBean(name)
nextArg()
setExpectedMessageCount(expected)
" firstActiveTime=" + firstActiveTime
e.getCacheMisses()
_log.warn(ioe,ioe)
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).verifyComplete()
type.getDeclaredConstructor()
{4,5,5,11,6,5,7,7,11,11}
incomingMessage.getMessagePayloadByte(1)
mListener.getConnectionId() != -1 && request.mConnectionID != null
customization.getStructureAnchor()
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK && data != null
private final StringBuilder tmpSb=new StringBuilder(); 
Boolean.parseBoolean(getOptional("kylin.htrace.trace-every-query","false"))
private ClassLoader getSystemFilteringClassLoader(DefaultClassLoaderFactory defaultClassLoaderFactory,boolean java9compatible){   FilteringClassLoader.Spec filterSpec=new FilteringClassLoader.Spec();   if (java9compatible) {     filterSpec.allowPackage("com.sun.tools");   }   return defaultClassLoaderFactory.createFilteringClassLoader(getSystemClassLoader(),filterSpec); } 
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
JavaSourceGroovyPackagesSecuritySuite.suite()
scheme.equals("tel") || scheme.equals("sip")
mBindingServices.isEmpty()
canPerformRequestOverConnection(mParentAccessibilityViewId)
timer.isActive() || (!timer.isActive() && timer.getState() == TimerState.ACTIVE)
size * 1.8f
account.getId()
cs[i].atd(row)
!isVideoScalingModeSupported(mode)
InitialFact.class
!consumer.verifySignatureWith(jws)
suppressTrailingZeroElements == false
mWidth - mMinWidth
saveCredentialsInSmartLock()
writeOwners.size()
AnnotatedElementUtils.findAnnotationAttributes(method,annotationType)
sshClient.connect(sshHost,sshPortNum)
config.isList("socialspy-commands")
onDetachedFromWindows()
SessionErrors.add(actionRequest,e.getClass().getName(),e)
found.size() >= 1
ti >= 0
handleDnsConfigurationChange(usedNetworkType)
item.isFile()
secConn != null && secConn.size() > 0
a.getDimension(attr,0)
t.getDeclaredConstructors()
new IndexWriter(directory,autoCommit,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")
tileElement.getChildByName("properties")
mValues[8]
new int[97]
LOG.warn("Could not parse syslog message. Not further handling.",e)
getService().hasClipboardText()
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
w.mAttachedHidden || !w.isReadyForDisplay() || !w.isDrawnLw()
replayEnd=ISODateTimeFormat.dateTimeParser().parseDateTime(replayTimeIso)
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
-1
usingDrawingCache
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
result.getState() == Promise.State.PENDING
dest.writeInt(mSubId)
ddmStructureLocalService.fetchStructure(groupId,ddmStructureKey)
getPreferences().put(key,value)
drawPath(g)
new AMQPProducer(metricRegistry,configuration,serverStatus)
new ReformatCodeProcessor(context.getProject(),context.getFile(),xmlTag.getTextRange(),false)
tree == null || tree instanceof PrimitiveTypeTree
return endOffset; 
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
super.externalNodeSettings(nodeOrdinal)
i < 10
tag_values.getId("web03")
!taskOutput.getState().isDone()
holder == null || holder.provider == null
loaded.getLoaded().getDeclaredConstructor()
VoiceInteractionManagerServiceStub.this
PVP_BOUNTY_HUNTER_INFO(WidgetID.PVP_GROUP_ID,WidgetID.Pvp.BOUNTY_HUNTER_INFO)
buildJSLoaderModulesServlet(Collections.<String,Object>singletonMap("applyVersioning",Boolean.TRUE))
flexItem.getMarginRight()
uri != null
owner == null || owner.getName().equals(PostgreConstants.PUBLIC_SCHEMA_NAME) || owner.getName().equals(PostgreConstants.CATALOG_SCHEMA_NAME)
mUserManager.getUsers(true)
new Paint(Paint.ANTI_ALIAS_FLAG)
aClass.isInterface() || aClass.isAnnotationType() || aClass.isEnum()
endpoint.getCurrentThreadsBusy() >= limit
new EclipseSettingsWriter(getLog()).write(projectBaseDir,outputDir,project)
new ByteBuddy().subclass(Baz.class).method(named("foo")).intercept(MethodDelegation.to(new Qux())).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
fulfillmentGroupItemWrapper.wrapSummary(fgi,request)
anyLong()
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
StepVerifier.create(Mono.just(0).then(Mono.just(1)).then(Mono.just(2))).expectNext(2).verifyComplete()
longSize >= 960
Exception e
mPowerManager.isInteractive()
showBadnessTrace("It was not meant to be","A serious problem happened during startup. Please report:\n" + "http://github.com/processing/processing/issues/new",t,true)
new IncorrectOperationException(getClass().getName())
this.ctx.getActivity()
ArrayList<ActiveMQDestination>
s.onComplete()
progress == 100 && task.getTimerStart() != null
UrlUtils.isStartPageUrl(currentTab.getUrl())
context.formatNewLine()
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,TRUE)
storedOverlayInfos.valueAt(i)
mapper.getFactory()
mPlayer.getCurrentPosition() * 1000L
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]),null)
new RuntimeException()
HDR_TYPE_NAK=0x02
Messages.getString("Spoon.Dialog.SaveChangedFile.Message",makeGraphTabName(transMeta))
new LayerView(this,0x0f00ff00)
new IndexWriter(dir,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
runGradle(0,"error","clean","flywayMigrate")
mContext.sendStickyBroadcastAsUser(intent,UserHandle.ALL)
Map<K,V>
intervalFraction * (nextValue - prevValue)
ExoPlayerFactory.newSimpleInstance(host,trackSelector,new DefaultLoadControl(),drmSessionManager,false,0)
fixes != null && fixes.length > 0
assertEquals(1000,timeout)
mSupportsBearing ? 1 : 0
Boolean.parseBoolean(this.getOptional("kylin.query.security.table-acl-enabled","true"))
logger.debug("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
currentUser.loggedInUser()
log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
mediaChunks.get(1).getFirstSampleIndex() <= sampleQueue.getReadIndex()
center.getZ()
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
iterations == 0
/**   * The tested prototype instance  */ private final P testedPrototype; 
PersistentTask<P>
selenium.isElementPresent("link=Control Panel")
parentGroupId <= 0
executeRunnableDismissingKeyguard(runnable,null,false,false)
Manager.this.readyState == ReadyState.OPEN || Manager.this.readyState == ReadyState.OPENING
Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
runUTRunner(testDir.getPath(),testFile.getPath(),"true")
ZonePlannerMapDataServer.instance.getChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
c.close()
file.flushAndForce()
new DefaultConfiguration(new DataSourceConnectionProvider(datasource),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
tracesDir.mkdirs()
etp.setSummary(s)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
si.targetPermissionUid >= 0 && si.intent != null
request.getServletPath()
dy == 0
m != null && m.size() > 0
getPreferenceStore()
new CamelNodeState(endpoint.getSingletonId())
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
KeyV1[]
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU,false)
Response.ok(null,MediaType.TEXT_PLAIN)
getLogger().debug("Scanning for extensions: " + mavenProject)
layout.setReleaseLabel(label)
c == null || !c.moveToFirst()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
mConnectionById.containsKey(callId)
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),invoiceConfig,internalCallContext)
logger.trace("Received MyQ  JSON: {}",dataString)
instructionForm.getfulfillmentGroupId()
session.prepare(sql,true,true)
new SslConnection(bufferPool,getExecutor(),endPoint,engine,true,true)
from >= to
sanitaryName.equalsIgnoreCase(c.getPrettyName())
log.error("PID contains identifier with no assigning authority")
actionBuilder.setStderr(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
new PackageConfig("")
appearance.getFloat(attr,0)
instructions.setPeoplePropertyToValue("enabled_new_editor",false)
getKeyFromGrant(grantAlias)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Slog.d(TAG,"Unable to bind ActivityRecognitionProxy.")
log.info("Error registering servlet with jmx " + this,ex)
@NonNull
i < MAX_AUDIO_PORTS
StreamUtil.copy(inputStream,out,chunk)
getRight() - getPaddingRight()
new MaxCandidatesCondition(5)
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase,false)
cnt=0
final ActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
DiagnosticType.error("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
getAttributes(link,SystemInfo.areSymLinksSupported)
new DefaultAsyncHttpClient(config)
pw.print(ps.getInstantApp(user.id))
baseLanguage == StdLanguages.HTML || baseLanguage == StdLanguages.XHTML
Thread.sleep(1000)
ArraySet<UidRange>
args.toArray()
f.isHidden()
p3.isTerminated() == false || p3.getResult() == null
private final BeginNode node; 
!isDirectPickup(block,blockDamageModifierComponent) || !inventoryManager.giveItem(event.getInstigator(),item)
!isSeekable() || position < firstFramePosition
SystemProperties.getInt("ro.cdma.timetoradiorestart",60000)
scheduleRemoveStartingWindowLocked(wtoken)
useExpires.setSelected(true)
this.restTemplate.postForEntity(webhookUrl,message,Void.class)
Integer.parseInt(stackIdStr)
moduleBuilder.addSourceRoot(SOURCE_DIR)
mHeader.callOnClick()
counter > max
targetType.getDeclaredConstructor()
isDeprecated(constructor) || isInject(constructor)
loaded.getLoaded().getDeclaredConstructor()
inMessage.getExchange().getOutMessage()
selenium.isElementPresent("link=Control Panel")
JavaSmartCompletionContributor.processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){   public void consume(  final PsiType type){     addExpectedType(result,type,identifierCopy);   } } ,result.getPrefixMatcher())
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
new Paint()
DLFileEntryTypeFinderUtil.filterCountByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
random()
c.getLiquid() != null && c.getLiquid().amount != 0
type.getDeclaredConstructor()
input.isSpecifyingFormat()
mAuthorities.valueAt(i)
realm.checkIfValid()
meta.getCompareStepName()
MAX_IMAGE_DIMEN=1024
Class.forName(line,true,null)
TRANSPARENCY
obj.getRequiredTokens()
List<Long>
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
httpResponseCode != 204
resource == null || resource.length() == 0
properties.containsKey(STRING_RECENT_SEARCHES)
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
for (Object eachToSelect : elements) {   if (!currentElements.contains(eachToSelect)) {     runSelection=true;     break;   } } 
type == null || type == Object.class
stringToSearch != null && stringToSearch.length() > 0
loaded.getLoaded().getDeclaredConstructor()
anchorView.getApplicationWindowToken()
ts.getJobId() == jobId
parcelableClass.dotclass()
host.getSocketAddress()
sm.getString("introspection.classLoadFailed",className)
expiresOn.getTime()
adminClient.describeConsumerGroup(APP_ID + testNo,0)
client.replicationControllers()
mTfs.delete(mTfs.open(new TachyonURI(dirPath)),true)
i >= 0
s2.isUnsubscribed()
map.keySet()
selenium.isElementPresent("link=Control Panel")
startBounds.height()
DiagnosticGroups.registerGroup("functionParams",FunctionTypeBuilder.INEXISTENT_PARAM,FunctionTypeBuilder.OPTIONAL_ARG_AT_END)
new IOException("should execute connector.connect() first")
verifyPosition(decoder,text("359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"))
Simple.forClass(Tuple.class)
dest.writeInt(mSubId)
mAccountHeader != null && mAccountHeader.getAccountHeaderBuilder().mProfileImagesVisible
DEBUG=false
parsedResult.getType()
blockRoot.getToken() == null || blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
IccUtils.cdmaBcdByteToInt((byte)0x8c)
capOpSet != null && contact != null
viewerPanel.setRedraw(true)
new Vector3f().interpolateLocal(point1,point2,0.5f)
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
errorMessage.contains(" is deprecated")
ds.getFeatures()
"streams:" + streamId
log.debug("BouncyCastle not registered, using the default JCE provider")
JBUI.Borders.empty(6,0)
FileSystemUtils.exists(path)
assertEquals(1,beanInfo.getOperations().length)
Log.w(mTag,"Adjusting remote volume without a controller!")
decoder.readInbound()
@Override public void setting(int identifier,long value) throws ConnectionException {   remoteSettings.set(identifier,value); } 
newBase.hasNoEntries()
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
selenium.isElementPresent("link=Control Panel")
telephony.isOffhook(getOpPackageName())
fragmentEntryPersistence.findByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
reducerCount=1
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,startNode,relDirection,relTypes)
mToolbar.setTitle(mToolbarTitle)
curArticle.getId()
onDetachedFromWindow()
Watcher<DeploymentConfig>
mListener.getConnectionId() != -1 && request.mConnectionID != null
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=1
message.getType() == Message.TYPE_FILE || message.getType() == Message.TYPE_IMAGE
XMLInputFactory::newInstance
null == reference
isInitialized() && lastFilterIndex == -1
realm.getColumnIndices()
LOG.warn("Can not get java doc HTML text from autocomplete context menu in editor")
UserHandle.myUserId()
e.toString()
LOGGER.lifecycle(msg.apply())
status < 0
clusterGlobalLock.writeLock()
mock.expectedMinimumMessageCount(1)
appInfo.metaData.get(key)
Math.min(1 << (pulseCount - 1),64)
wagonManager.getArtifact(artifact,repo,null,true)
serviceDataUuid == null || mServiceData == null
parent.resolveFile(iconfile)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
mConnector.execute("volume","format",vol.id,"auto")
type.getDeclaredConstructor()
Throwable t
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
mMccStr == null
Assert.assertEquals(120L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
mImm.hideStatusIconInternal(mToken)
CacheDataRow row=dataTree.findOne(new SearchRow(key)); 
!mLatestResult.isSslRecoverableException()
public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
UpgradeStepRegistrator.class
MIN_PORT_DEFAULT_VALUE=50000
new Paint(Paint.ANTI_ALIAS_FLAG)
!mbMessage.isDiscussion()
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
typeArg instanceof PsiWildcardType && !((PsiWildcardType)typeArg).isBounded() || typeArg != null && TypeConversionUtil.erasure(typeArg).equalsToText(CommonClassNames.JAVA_LANG_OBJECT)
new PluginInfo("_plugin","_plugin_desc","_plugin_version",Version.CURRENT,"1.8","_plugin_class",Collections.emptyList(),false,false)
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
Long.parseLong(dateStr)
Environment.getOemDirectory()
/**   */ public class S3SnapshotRestoreOverHttpsTest extends AbstractS3SnapshotRestoreTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","https");     return settings.build();   } } 
TypeEvalContext.slow()
type == null || !MediaFile.isVideoFileType(type.fileType)
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
uri.getScheme() == null || !uri.getScheme().equals(scheme)
this.getDefaultReadOnly()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
attributes.getAllFlags()
StatBuckets.prettyUptimeStr(secs)
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
public void set(int parameterId,long value) throws ConnectionException {   if (log.isDebugEnabled()) {     log.debug(sm.getString("connectionSettings.debug",Integer.toString(parameterId),Long.toString(value)));   } switch (parameterId) { case 1:     setHeaderTableSize(value);   break; case 2: setEnablePush(value); break; case 3: setMaxConcurrentStreams(value); break; case 4: setInitialWindowSize(value); break; case 5: setMaxFrameSize(value); break; case 6: setMaxHeaderListSize(value); break; default : log.warn(sm.getString("connectionSettings.unknown",Integer.toString(parameterId),Long.toString(value))); } } 
getSelectedTextColor(ctx)
settings.readLPw(null,0,false)
keyCnt=500
keymapManager == null || actionId == null
assertSizeEventually(COUNT,map,180)
uid >= 0
stack.get(stack.size() - 3).longValueSafe()
StringBuilder txt=new StringBuilder(); 
RecipeRegistryProxy.addRecipe(ItemStackUtils.clone(LINGERING_POTION_POISON_LONG,3),ItemStackUtils.clone(SPLASH_POTION_POISON_LONG,3),REAGENT_DRAGONS_BREATH)
getTestName(false)
Details_DialogLayout.findViewById(R.id.ll_location)
ent.getValue().longValue()
BuildCraftCore.DEVELOPER_MODE
panel.attachTo(viewPort,overlayView,guiViewPort)
indexNameExpressionResolver().concreteIndexNames(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
stmt.execute(sqlCommand)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
calendar.getTimeZone().getRawOffset()
assertLeftRightCategory(5,category1c)
uri.getRawSchemeSpecificPart()
new FallbackPathSettings(_settings,_fallbackPaths)
Class data
selenium.isElementPresent("link=Control Panel")
buffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY)
input.getExecPath()
giveFieldBinding(ss)
logger.trace("Requsting URL {}",url)
lock.isHeldByCurrentThread()
TelephonyManager.getDefault().getCurrentPhoneType()
getTelecomService().getVoiceMailNumber(accountHandle)
mAuthorities.valueAt(i)
builder.humanReadableField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
mChildrenExpanded ? mDividerHeight : mChildPadding
selenium.isElementPresent("link=Control Panel")
publishedEndpointUrl != null && wsdlLocation != null
scores.getAlgorithm()
t instanceof EntityExistsException || t instanceof ConstraintViolationException
new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()))
InetAddress.getByName("localhost")
nextMedia.localFileAvailable()
GL20.glUniformMatrix3fv(location,transpose,value)
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
waitForClose(5000)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,loadedMethodType))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
loaded.getLoaded().getDeclaredConstructor()
columnTypes[column] == INT || columnTypes[column] == CATEGORICAL
DataFormat.PAYLOAD == message.get(DataFormat.class) && params[0] instanceof CxfPayload
StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))
striped.get(key).writeLock()
DBFactoryUtil.setDB(getDBType(),null)
annotationHelper.printAnnotationError(element,"%s annotated element should have an empty constructor")
Preferences.clear(ActFmPreferenceService.PREF_USER_ID)
StringBuilder result=new StringBuilder(); 
selenium.isElementPresent("link=Control Panel")
LocalizedTextUtil.clearDefaultResourceBundles()
new TextPaint()
assertThat(measures.get("files")).isEqualTo(3)
!allowTrailingSlash && value.endsWith("/") && value.length() > 1
analysisResult.getPackageRoots()
Thread.sleep(1000)
View frame
mProviderRequest.reportLocation && !mDisableGps && isEnabled()
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
findAvailablePort(2000,10000)
_parms._intercept
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
binary.getDisplayName()
selectedPageLabel_.removeClassName("selected")
animation == mHeaderInAnimation
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
Arrays.equals(delta,pending.delta)
context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)
new ServerPartition(partitionKey,rowType,0.0)
assertEvaluate(buildFile).moduleLookup("txts")
Trans != NO_TRANSPOSE
ScanResult.is5GHz(frequency)
selenium.isElementPresent("link=Control Panel")
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
latch2.countDown()
StateManagementUtils.createClearForkedExecutionMojoBinding()
edge.getDownNode()
mUiHandler.removeCallbacks(pae)
info.getOldName()
return maxActiveSessions; 
TelephonyManager.getDefault().getCurrentPhoneType()
shouldPause.or(this::shouldPauseOnTargetNodeJobsCounter)
type.getDeclaredConstructor()
analysis.getTypeWithCoercions(windowFunction)
new Window(window,windowSize,begin,end)
si.intent == null && N > 1
MeasureSpec.makeMeasureSpec(myHeight,MeasureSpec.EXACTLY)
new NativeAllocationRegistry(Bitmap.class.getClassLoader(),nativeGetNativeFinalizer(),nativeSize)
mpi > -135 || !leftSide
buf.halfOpenElement("conference")
maxDistance=200
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
LOG.debug("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
messenger.sendCodeObsolete(res)
makeName(verb,parentName,dimensionPrefix,binaryType,target)
mListener.getConnectionId() != -1 && request.mConnectionID != null
ShortBuffer target
context.getRuntime().getNil()
typeSettingsProperties.toString()
viewable=false
assertThat(System.currentTimeMillis() - start).isGreaterThan(1900)
logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt)
"Got ACTION_DEVICE_CHANGED from unexpected device: " + device
arrayContaining("foofoobar","foofoo","foofoo-closed")
!eventsDone.remove(event)
new StringBuilder(256)
n.getNodeData().y()
validParts >= graphs.size()
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
hgraph.getTotalOutDegree(n)
recommendArrayListByUser.size() > 1
result > CodeStyleSettings.MAX_RIGHT_MARGIN || block == null
ConstantNode.forLong(load.displacement(),graph)
System.arraycopy(startPoints,0,points[0],0,pointsNumber)
getTestName(true)
tw.close()
BackupManagerServiceInterface svc=mService; 
Color.fromRGB(0xB3312C)
assertEquals(14,md.references().size())
GridGgfsTestUtils.jsonToMap(restCfg)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0,0)
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
LOG.error(exception,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
pyClass.getClassName()
MapActivity.getMapActions()
mView.postOnAnimation(mAnimationStarter)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
FRAME_STATS_COUNT=16
new int[297]
buffer.getUint8()
mPolicy != null && wasPowered
mWm.addAppToken(0,null,0,0,0,false,false,0)
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true,false)
checkNotNullOrEmpty(resource,"Resource should not be null")
cnt=1
new Paint()
new AlertDialog(P.mContext,0,false)
loaded.getLoaded().getDeclaredConstructor()
getSelectedTextColor(ctx)
any()
responseHeaderRegex == null || responseHeaderRegex.length() == 0
public static IdeaTitledBorder createTitledBorderBoldWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),0,1,new Insets(5,0,10,0)); } 
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
promise.trySuccess()
setZrtpEncryptionOnDescription(mediaType,description,null)
XMLRPCClient.parseXMLRPCResponse(is,null)
assertEquals(2.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
selenium.isElementPresent("link=Control Panel")
@Override public Variable emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new SPARCArrayEqualsOp(this,kind,result,load(array1),load(array2),asAllocatable(length)));   return result; } 
Long.parseLong(value)
public static DateTimeArray dateTimeArray(ZonedDateTime[] values){   return new DateTimeArray(values); } 
DiagnosticFactory0.create(ERROR)
Assert.assertEquals(transitions.size(),4)
e.toString()
static public final PowOut fastSlow=pow2Out; 
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
XContentType.fromMediaTypeOrFormat(values[0])
canvas.clipRect(0,0,width,tabHeight)
err == 0
FileUtil.findFirstThatExist(home + "/build.txt",home + "/Resources/build.txt",home + "/community/build.txt",home + "/ultimate/community/build.txt")
fill || textureImage != null
LanguageLevel.forElement(element).isAtLeast(LanguageLevel.PYTHON27)
new JAXWSHttpSpiTransportFactory(context)
selenium.isElementPresent("link=Control Panel")
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
PsiTypesUtil.isDenotableType(psiType,lambdaExpression)
Exception ex
innerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
generateFluentSetters()
SVID_SHIFT_WIDTH=8
curComp.equals(service)
Maps.newLinkedHashMap()
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
!swapEnabled
StorageService.instance.initClient(0)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
tracesDir.mkdirs()
CommonProblemDescriptor descriptor
List<Fragment>
StudyUtils.getPatternFile(project,taskFile,oldName)
XmppStringUtils.parseBareJid(userJID)
IndexReader.open(userindex)
assertEquals(4,atl.size())
assertEquals(Locale.GERMANY,format1.getLocale())
origin.realComponent().doubleValue() > other
System.getProperty("line.separator")
reviewer.putExtra("deckFilename",mDeckFilename)
Assert.assertNotNull(s)
132 + (USE_OLD_HISTORY ? 1000 : 0)
!match && compareRecover
_freemarkerEngineConfiguration.resourceModificationCheck()
entry.getValue().getManagementInterfaceMicroVersion()
Integer.parseInt(_ANALYTICS_GATEWAY_PORT)
CORRELATION=5
ProjectCodeStyleSettingsManager manager
mWm.addAppToken(0,null,0,0,0,false,false,0)
interval <= 0
sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
NettyConnectionsPool.class
new Paint()
log.isDebugEnabled()
createDouble(buffer.length(),init)
LOGGER.error("Wrong client secret for service {}",service)
previousAttribute.compareToIgnoreCase(attribute)
getObjectMapper().readerFor(clazz)
new CompoundShelfFileProcessor(streamProviders,configPath)
libraryAchievement=new Achievement("achievement.blueprintLibrary","blueprintLibraryAchievement",15,2,BuildCraftBuilders.libraryBlock,builderAchievement).registerStat()
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE
uri == null || "thing".equals(uri.getScheme()) == false
queryProcessor.curJobRunning.get() <= 0
i=0
plan != null && plan.getVolumeSetPlans().size() > 0
Parser.htmlParser()
Mockito.verify(mRMClient).stop()
containerLats.length - 1
loaded.getLoaded().getDeclaredConstructor()
CacheManagerCheck.class
FileTemplateManager.getInstance(dir.getProject())
policy_init == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
info.getSubscriberIdForSubscriber(subId,mContext.getOpPackageName())
gs._mb.makeModelMetrics(GLRMModel.this,orig)
getters.length > 0
task.stack != null && tr.stack != null && task.stack != tr.stack
type.getDeclaredConstructor()
stateChangedLatch.await(3,TimeUnit.SECONDS)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
m.executeAsync()
!mKey.equals(other.mKey)
responseBodyRegex == null || responseBodyRegex.length() == 0
Object listener
System.nanoTime()
maxRows >= 0
loaded.getLoaded().getDeclaredConstructor()
(previousLine.endsWith(" =") || previousLine.endsWith(" ->")) && line.endsWith(StringPool.OPEN_PARENTHESIS) && !line.matches(".* [<=>]+ .*")
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
remaining == 0
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureWidth,this.mTextureHeight,this.mScale,this.mRotated)
ENABLE_AGGREGATED_IN_MEMORY_STATS=false
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.563
previousDataInputs != null
telephony.isRadioOn(getOpPackageName())
tok[3]
new StringBuilder(729)
start != stop && wordStart == index
KafkaEightFirehoseFactory.class
if (DEBUG_DEVICES) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
Duration.between(created,Instant.now()).toMillis() / 1000
sizeNeeded > items.length
CollectionUtils.filter(filteredUpSales,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((UpSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
id=10995
assertEquals(128,blockHashesMessage.getBlockHashes().size())
return false; 
nextArg()
redisson.<Long>getBucket("executed2")
new PatreonRealm("1")
app.isDispatchThread() || app.isHeadlessEnvironment()
MAX_ITEMS=100
mService.enableNetwork(netId,attemptConnect,mContext.getOpPackageName())
isChecked
e2.nextElement()
Integer.parseInt(displayIdStr)
StringBuilder sb=new StringBuilder("["); 
messages.size()
list.get(3).dist=2276
addDaysAndCheckForCompletion(4,NextEvent.PAYMENT_ERROR)
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
new Paint()
ctx.getApplicationContext()
UserHandle.myUserId()
CodeSigning.hasValidSignature(context.getProcessExecutor(),binaryOutputPath)
mFrameTransformation.printShortString(pw)
event.getRawX()
t3.getSort()
blockManager.processReport(registration,reports[r].getStorage(),storageContainerList,context)
AppLog.e(T.NOTIFS,"GCM Error: " + errorId)
type.toLowerCase(ENGLISH)
assertThat(metrics).hasSize(151)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB
rootMBMessage.getMessageId()
Key<Long>
@NotNull DfaMemoryState createClosureState(); 
ViewCompat.getScaleY(itemView)
JMeterUtils.getPropDefault(ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_PREFIX + ReportGeneratorConfiguration.KEY_DELIMITER + "statistic_window",20000)
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
!hasPermission(permission)
note2.getId()
filename.endsWith(ext)
DECK_VERSION=65
modelNode.toString()
this.setTouchAreaBindingOnActionDownEnabled(true)
!pageInfo.isELIgnored() && !pageInfo.isDeferredSyntaxAllowedAsLiteral() && reader.matches("#{")
isFetchSyncActive=false
platformVersion < M
mBottomRightStrip=mContext.getResources().getDrawable(resId)
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
Nd4j.rand(200,200,min,max,Nd4j.getRandom())
LOG.warn("Cannot resolve the host name for " + regionAddress + " because of "+ e)
tableLayoutHandle.getPartitions().isPresent()
super.getCollectionSizeEqualsProvider(path)
allowCredentials=true
"Unknown id: " + id
"Unknown or Unsupported Option '" + key + "'"
attribute.equals("\\Spam") || attribute.equals("\\Junk")
Integer.parseInt(stackIdStr)
logger.warn("Configuration for influxdb not yet loaded or broken.")
mService.subscribe(mContext.getOpPackageName(),clientId,subscribeConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,false,callback,clientId))
Slog.d(TAG,"Unable to bind ActivityRecognitionProxy.")
compileDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
cctx.mvccEnabled() || !readThrough || skipVals|| (key != null && !cctx.affinity().backupsByKey(key,topVer).contains(cctx.localNode()))
new BindException(newConcept,"concept")
subProperties.putIfAbsent(subName,value)
GL11.glGetTexParameterfv(target,pname,params)
finishAndRemoveTask()
mRingingCallState == other.mRingingCallState
this.setTouchAreaBindingOnActionDownEnabled(true)
ArraysUtil.join(nodes1,nodes2)
hasNonClassAnnotations()
4 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=40
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
klass.getDeclaredFieldsUnchecked(false,declaredFields)
new StatisticsUnit(unitNumber)
JspUtil.makeJavaIdentifier(varName)
mock.message(0).arrives().between(6,9)
case 8: 
printType(out,type)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
vespaPortBase + 90
user.getActualCompanyId()
graphVersion.incNodeAndEdgeVersion()
mLabelView != null && mLabelView.getLayoutParams() != null
mMediaRouter.addCallback(MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY,mMediaRouterCallback,MediaRouter.CALLBACK_FLAG_PASSIVE_DISCOVERY)
Long.parseLong(attrValue)
m.size()
oldConfig.densityDpi != newConfig.densityDpi || oldConfig.getLayoutDirection() != newConfig.getLayoutDirection()
getConnectTimeout()
BUTTON_QUIESCENT_ALPHA=0.70f
new SoftReference(result,queue)
out.dialect.supportsWindowFunctions() || !RexOver.containsOver(project.getProjects(),null)
bindService(serviceIntent,conn,BIND_AUTO_CREATE | BIND_NOT_FOREGROUND)
executor.scheduleAtFixedRate(this,period,period,unit)
StringBuilder result=new StringBuilder(); 
UpgradeStepRegistrator.class
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.title"))
Boolean.parseBoolean(attrValue)
mMccStr == null
src.remaining()
new CsvFilter(lines)
RT.count(s)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new CompositeException(t,e)
ASHMEM_SIZE=296
new SubjectSearchEmitterFragment()
searchExtensionManager.getProxy()
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
JavaSourceGroovyPackagesNonSecuritySuite.suite()
selenium.isElementPresent("link=Control Panel")
Thread.sleep(1000)
getProperties().requestCacheEnabled()
Integer.parseInt(attrValue)
callTimeoutMs=10000
lp.resolveLayoutDirection(layoutDirection)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
updateSubtreeNow(parentNode)
ticket.notifyAll()
exchange.getProtocol().equalToString("https")
contentType.getCharset()
gzipHandler.addIncludedMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
Foundation.log("[error] " + tag + ": "+ message)
Throwable e
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
prefs.getBoolean(AUTO_START,false)
Objects.equals(mServiceDataUuid,other.mServiceDataUuid)
userInfo == null || !userInfo.canHaveProfile()
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
side.getCapitalized()
mCurrentVrCompositorService == null
!addressStreet2Present
myLeftIndex == 0
mAppToken.isVisible()
assertNotSame("Cannot find text '" + element + "' in file "+ path,-1,index)
commandExecutor.writeAsync(getName(),RedisCommands.DEL_OBJECTS,getName(),getTimeoutSetName(),getIdleSetName())
ClassFileVersion.forThisVm()
data + end
specBuilder.setDigests(KeyProperties.DIGEST_NONE)
field.tokenStream(docMapper.mappers().indexAnalyzer())
public Builder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
BackupManagerServiceInterface svc=mService; 
getDeltaRequest().execute(this,((ClusterManager)getManager()).isNotifyListenersOnReplication())
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()&& item.isVisible()
addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR)
mAppToken.isVisible()
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
new ScoreIterationListener(100)
loaded.getDeclaredConstructor()
ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
log.error("Error while closing command context",exception)
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
data == null || data.trim().isEmpty()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dtrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Optional.fromNullable(resourceManagementScheduler)
loaded.getLoaded().getDeclaredConstructor()
logger.fine(String.format("will wait %dms before reconnect attempt",delay))
new RuntimeException("TEST")
activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient) != null && activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient).length > _taskInfo._params.maxActivePredictors
attachment.getDataUri() == null || attachment.getSize() == 0
conn.getResponseCode() == 302 || conn.getResponseCode() == 301
colors.getThemeAttributeId(i,0)
loaded.getLoaded().getDeclaredConstructor()
DEBUG_DRAG=false
List<Number>
LOGGER.trace(e.getMessage(),e)
mUiHandler.removeCallbacks(pae)
VectorizationContext.isStringFamily(outputType) || outputType.equalsIgnoreCase("binary")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers2.kt")
POLL_PERIOD=1000L
!mScreenOnEarly
WordPress.getCurrentBlog().getLocalTableBlogId()
server.getClass()
selenium.isElementPresent("link=Control Panel")
canvasAWT != null || canvasNEWT != null
bareNumber.length()
bucket.isExists()
valueFormatter != null && !(valueFormatter instanceof ValueFormatter.Raw)
StringUtil.compareVersionNumbers(OS_VERSION,version)
!sourceEdgeTextData.getText().isEmpty()
exp instanceof ConnectTransportException || exp.getCause() instanceof ConnectTransportException
randomInt(Integer.MAX_VALUE)
LOG.error("Should have transformed " + managedClassName + " but didn't")
typeSettingsProperties.toSortedString()
isEmptyOrSpaces(s)
url.addEncodedArgument(selectName,value)
setDeploymentServerId(contextValue)
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
synchronized (mAuthorities) {   writeStatusLocked(); } 
XMLInputFactory.newInstance()
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
clearIndex()
JNIExceptionHandlerReturnNullHandle.class
mMetaDb.isOpen()
newDecl.isNovel()
Lists.newArrayList('*','[',']','(',')',',')
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
new UserDao(system2)
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
new IntRangeValidator(1,true)
(CancelReason.EXPIRED.equals(reason) || CancelReason.RENEWAL_FAILED.equals(reason)) && upnpService != null
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
selenium.isElementPresent("link=Control Panel")
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw_)
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
websocketComponent.setMaxThreads(20)
new ByteSizeValue(20,ByteSizeUnit.MB)
path.lastIndexOf(Constants.JAR_EXT)
mGnssCallback != null
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).switchIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
assertQ("test date statistics values",req,"//long[@name='count'][.='2']","//long[@name='missing'][.='1']","//date[@name='min'][.='1970-01-02T10:17:36Z']","//date[@name='max'][.='1970-01-12T10:20:54Z']")
req.startAsync(req,res)
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,false)
getSelectedTextColor(ctx)
Log_OC.e(TAG,"Server check tried with OperationService unbound!")
appearance.getFloat(attr,0)
!version.equals(VERSION_1_4)
name == null || name.isEmpty()
!it.next().hasFinished()
status.getCode().getNumber()
block.getZ() + 1
@Deprecated protected static <T extends Contract>T deploy(Class<T> type,Web3j web3j,TransactionManager transactionManager,BigInteger gasPrice,BigInteger gasLimit,String binary,String encodedConstructor,BigInteger value) throws RuntimeException, TransactionException {   return deploy(type,web3j,transactionManager,new StaticGasProvider(gasPrice,gasLimit),binary,encodedConstructor,value); } 
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
Thread.sleep(1000)
RowKey.prefixKeyWithSalt(key)
focusable.isAccessibilityFocusable()
loaded.getLoaded().getDeclaredConstructor()
logger.fine("Remove try/catch/finally")
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).descriptionAndTooltip(message)
Log_OC.e(TAG,"Trying to share a NULL OCFile")
callback.onUploadFailure(0,0)
imageViewShadow.setBackgroundResource(R.drawable.shadow)
minElevation=99999
DirectoryReader reader=IndexReader.open(dir); 
(status & 0x00040000) != 0
sceneCam.getLeft(vars.vect6)
ServerUtilities.unregister(this,FirebaseInstanceId.getInstance().getToken())
typeSettingsProperties.toSortedString()
responseModels.entrySet()
editText.setTextKeepState(task.getValue(property))
referenceStep.isPartitioned()
assertParses("scan class path",CommandLineOptions::isScanClasspath,"--scan-class-path")
selectionChildIndices[j] == i || (selectionChildIndices[j] == C.INDEX_UNSET && streamChildIndices[j] == i)
EndpointReferenceUtils.getAddress(cref)
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.BLOCK,NextEvent.INVOICE)
pathParameterMap != null
textView.getBottom()
i.getTouchIconUrl() == null
assertTrue(message.getPayload() instanceof Collection<?>)
ObjectHelper.isNotEmpty(configuration.getClusterService())
field.getTypeDesc()
node.getBeginLine()
mQueryTextView.length()
mIsAnimating.get() && mTargetZoomLevel.get() >= maxZoomLevel
public static BuildConfigSpec addBuildParameterOutput(BuildConfigSpecBuilder builder,String imageTag){   return builder.withNewOutput().withTag(imageTag).endOutput().build(); } 
new int[127]
XMLInputFactory.newInstance()
new PushInfo(pushHeaders,false)
(ChameleonElement)current
type.getDeclaredConstructor()
toEventData(key)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,FOLDER_NAVIGATION)
socialActivitySetFinder.countByRelationType(userId,type)
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper,false)
message.getDownloadable().getStatus() != Downloadable.STATUS_DELETED
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_SECOND),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),AccountType.Normal,300_000_000L)
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
mValues[8]
new SslContextBuilder(true)
ReplacementsImpl.class.getDeclaredMethod("makeGraph",rjm,rjm,SnippetInliningPolicy.class,boolean.class)
POSITIVE_Y(2)
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null)
factory.getDestination(getEndpointInfo("sna","foo2","https://localhost:9003"),bus)
@Test public void testSimplePutTake() throws OutOfCapacityException {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   assertEquals(groupFactory.numCalls.get(),2);   SchedulerQueryContext r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupTwo); } 
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
inUtc || allDay
mapper.getFactory()
holder.createWarningAnnotation(element,composeTooltipString(descriptor,deprecated))
myIsNotNull || myNotNullParams.size() > 0
placeInfo == null && acceptPlaceFromFocus
Assert.assertEquals(120L,assetCapsuleNew.getNetUsage())
GetterUtil.getDouble(request.getParameter(param),locale)
ResolvedJavaType accessingClass
zoom2d=2000
planDetailJson.getProduct()
!allowPrivate.isNull()
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message),null)
raw.getOutParameters()
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
type.getDeclaredConstructor()
mAppToken.isVisible()
revWalk.close()
getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent,userId)
logger.debug("Favorite '{}' not found",favorite)
origin <= other
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
endFunction("write_column_statistics: ",ret != false,null)
new String(responseData,Charset.defaultCharset())
AppLog.d(T.EDITOR,message)
factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,4)
new ArgumentsPanel(true,JMeterUtils.getResString("backend_listener_paramtable"))
singleType != null && resolvedType.isAssignableFrom(singleType)
typeSettingsProperties.toString()
existing.getScriptParameters()
NetworkParameters.oldTestNet()
doTestWithRuntime()
new FsInfo(0,null,pathInfo)
Collection<DeclarationDescriptor>
new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)
container.getNeighborTile(from) instanceof IRedstoneEngine
mValues[8]
ktBFile.getName()
GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))
IllegalStateException.class
mDisplayContent.mDividerControllerLocked.getWidth()
ChangesUtil.getAfterPath(change)
writeRepeatedFixed64Impl(id,val)
origin > other
NetworkParameters.oldTestNet()
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Long3 v
BED(355)
testerAnnotation.annotationType()
jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(jndiName)
wErrorTab.setControl(wErrorSComp)
types.get(i)
util.getDataTestDirOnTestFS(table)
System.currentTimeMillis() - (sessionInactiveInterval + 60) * 1000
drawable.getIntrinsicHeight()
boundary != null && boundary.getCenterPoint() != null
matcher.isMatching(firstCandidate.right.attributes,secondCandidate.right.attributes) || matcher.isMatching(secondCandidate.right.attributes,firstCandidate.right.attributes)
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
info != null
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisible)
resultEndpoint.setMinimumResultWaitTime(900)
put.getWriteToWAL()
OCCLUSION_INTENS=0.05f
times + BASE_FILE_NUMBER
BasicDataSourceFactory.createDataSource(p)
context.getTypeInfo(output)
file.isFile()
XContentType.fromMediaTypeOrFormat(template.substring(2,endOfContentName))
null == Configuration.getResource(dataSourceName)
Slog.e(TAG,"Unknown restriction: " + restriction)
Simple.forClass(SkylarkDict.class)
Thread.sleep(1000)
grammar.getTokenDisplayNames()
appearance.getFloat(attr,0)
new IndexWriter(indexStore,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
stack == null || stack.mStackId != DOCKED_STACK_ID
TagsAssetLocalServiceUtil.updateAsset(userId,article.getGroupId(),className,article.getResourcePrimKey(),categoriesEntries,tagsEntries,true,null,null,null,null,ContentTypes.TEXT_HTML,article.getTitle(),null,null,null,0,0,null,false)
synchronized (mBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } 
appearance.getFloat(attr,0)
(char)0
JDBCUtils.safeGetStringTrimmed(resultSet,"ROLENAME")
mDataAuthorities == null || data == null
ParseUtils.parseS300THHumidity(S300TH_DATA_1)
getIntent().getStringExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
writer.writeStartDocument(encoding,"1.0")
BrowseCap.isCocoaDesktop()
pathEditor.reset(sdk != null ? sdkModificator : null)
-4
new CrypticClue("Search the crates in the Barbarian Village helmet shop.",CRATES_11600,new WorldPoint(3073,3430,0),"Peska's Helmet Shop in Barbarian Village.")
mMccStr == null
body.addAfter(target,afterAnchor)
new Ticker.Builder().currencyPair(pair).bid(kcTick.getBuy())
controller != null && controller.getState() != ServiceController.State.UP
document.addText(name,valueString)
previousSelection - 1
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisible)
mMatchMode=matchMode
editor.waitCursorPosition(23,6)
graphModel.getDirectedGraphVisible()
64 * 4
Map<String,Object>
addProperty(secondNode,"band","The Clash")
new ParentObserver(synchronizedObserver)
Thread.sleep(1000)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
onFailed(x)
height > 0
isDoubleCategory(typeRe)
mMat[5]
BackupManagerServiceInterface svc=mService; 
cause.getMessage().contains("Different HTTP Scheme or Host Redirect detected on")
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
DLFileEntryTypeFinderUtil.filterCountByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},StringPool.BLANK,true)
assertEquals(4,cms.getMaxThreadCount())
dest.writeInt(mSubId)
Thread.sleep(10)
1000.0 * FILE_BYTES
return worldVertices; 
mParent == null
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
SampleObservables.numberStrings()
S
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
private final String version; 
mouseEvent.getModifiersEx()
groupMetaCache.get(key)
new ArrayList<>(mapMarkers)
targetDatabase.setObjectQuotingStrategy(originalStrategy)
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(2L)).subscriberContext(withAdmin)
new AnAction(){   @Override public void actionPerformed(  AnActionEvent e){     if (myResultsPreviewTable != null && myContent.getSelectedIndex() == RESULTS_PREVIEW_TAB_INDEX) {       navigateToSelectedUsage(myResultsPreviewTable);     }   } } .registerCustomShortcutSet(CommonShortcuts.getEditSource(),comboBox,myDisposable)
mDisplay.getRealMetrics(mDisplayMetrics)
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
context.start()
rightExpression == null || rightExpression instanceof PyBinaryExpression || node.getLeftExpression() instanceof PyBinaryExpression
ThreadLocal<HttpServletResponse>
ignite.log().warning("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
new LocatedBlock(b,locations,null,null,startOffset,isCorrupt,cachedLocations)
Thread.sleep(1000)
/**   * {@inheritDoc}  */ @Override public IntegerProperty clone(){   IntegerProperty prop=(IntegerProperty)super.clone();   prop.value=value;   return prop; } 
Bukkit.getOperators()
_log.warn(ioe,ioe)
doInvoke(args.first(),args.rest())
mReactInstanceManager.onResume(this,this)
new ConnectionException(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR)
retryPolicy.onReadTimeout(rcl,rte.blockFor,rte.received,rte.dataPresent,queryRetries)
Long.parseLong(val)
src.getParent()
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
learnRate * 0.5f
Collection<GridDrStateTransferDescriptor>
((MapActivity)getActivity()).getMyApplication().getIconsCache().getIcon(R.drawable.ic_action_search_dark,true)
addTest(13,13,180.0f)
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
public static LocalDateTimeArray localDateTimeArray(LocalDateTime[] values){   return new LocalDateTimeArray(values); } 
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)),Substitution.of("%workspace_name%",ruleContext.getWorkspaceName()))
paramNames != null && paramNames[i] != null
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN,new UserHandle(mUserHandle))
rv.length >= 4
entry.getCiteKeyOptional()
from >= to
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN,true)
gradHidden[nodeIndex]
selenium.isElementPresent("link=Control Panel")
!compactionStarted.getAndSet(true)
ch.pipeline().addLast(handlers)
registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false,runtimeOnlyFlags)
selenium.isElementPresent("link=Control Panel")
TypeEvalContext.slow()
setImageDrawable(icon,false)
Map<String,AstyanaxKeyColumnValueStore>
ImportEventsAction.class
selenium.isElementPresent("link=Control Panel")
Long.parseLong(nfcid2,16)
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),true,true,createdBy,reason,comment)
result.getSuccess()
Byte.parseByte(value.toString())
assertFalse(predicate.apply(pickleEvent))
sashSize.y > 0 && foldersSize.y > sashSize.y / 2
BackupManagerServiceInterface svc=mService; 
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
LOG.info("Failed to read expected SASL data transfer protection " + "handshake from client at " + peer.getRemoteAddressString() + ". Perhaps the client is running an older version of Hadoop "+ "which does not support SASL data transfer protection",imne)
Pattern.compile(keys[i],Pattern.CASE_INSENSITIVE)
selenium.isElementPresent("link=Control Panel")
new Environment(settings.build())
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
word=END_WORD
rhs.getScore()
type == null || type == Object.class
new ModelNode().set(240000L)
FileTemplateManager.getInstance()
DeprecationLogger.nagUserWith("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
COLORDRAWABLE_DIMENSION=2
mCaCerts != null && mCaCerts.length > 0
range.to <= getFirstLirInstructionId(block)
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
MavenPublishAction deployTask=createDeployTask(publication.getPomFile(),mavenRepositoryLocator,artifactRepository); 
!shouldSkipByFamilyName(familyName)
m.isReadBackupData()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent) || mRunning2dInVr != running2dInVr
((PsiManagerImpl)manager).getFileManager().findViewProvider(file)
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message),null)
rootsIndex.findAllParentDescriptors(file,myContext)
dockedBounds.top - dockDividerWidth
context.formatNewLine()
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0 && type == ActionMode.TYPE_PRIMARY
maxSize(new Fixed(width),new Fixed(height))
atLeast(10)
getList() != null && getList().getComments().size() > 0
mockResultSet.getLong(1)
serversByLoad.firstKey()
InvokerHelper.setProperty(target,"layout",answer)
type.getDeclaredConstructor()
Integer.parseInt(rightStr)
id=43
private String selectePathTemp; 
StateManagementUtils.createClearForkedExecutionMojoBinding()
Integer.parseInt(rightStr)
paramAttribute.split("\\.")
public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOuterTypeNumber.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"1:1: " + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
resources.getDimensionPixelSize(R.dimen.close_handle_height)
getInputs().files(new Callable<FileCollection>(){   public FileCollection call() throws Exception {     IvyPublicationInternal publicationInternal=getPublicationInternal();     return publicationInternal == null ? null : publicationInternal.getPublishableFiles();   } } )
endpoint.expectedMinimumMessageCount(1)
mAppOpsManager.noteOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
host1.getSocketAddress()
Boolean.parseBoolean(getOptional("kylin.query.enable-dict-enumerator","false"))
new J7StatsListener(ss,1)
type.getDeclaredConstructor()
historicState(item,timestamp,serviceName)
UnifiedDiffWriter.write(myProject,patches,writer,"\n",patchTransitExtensions)
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
@NotNull final SimpleMatch match
selenium.isElementPresent("link=Control Panel")
case UNKNOWN: 
findDelegateForNewObject(name)
args[1]
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
lp.resolveLayoutDirection(layoutDirection)
mUserManagerHelper.getAllUsers()
originalDocBase.toLowerCase(Locale.ENGLISH)
public <A>SubType innerJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).innerJoin((Expr<?>)entity);   return self; } 
greaterThanOrEqualTo(0L)
PrintAttributes.enforceValidDuplexMode(currentMode)
request.setHeader(h.getKey(),h.getValue())
document != null && document.getRootTag() != null
now >= deadline
getPlayer(server,args,0,true,false)
partitionContainer.getExistingRecordStore(name)
response.get(ROLLED_BACK)
executableType.getType().getPrimitiveType()
clusterService().localNode().getName()
typeName.equals(java.util.Collection.class.getName()) || typeName.equals(java.util.Set.class.getName()) || typeName.equals(java.util.SortedSet.class.getName())
Float.parseFloat(strings[i])
CellNames.simpleDense(SuperColumns.scName(name))
logger.debug("Cannot handle stop command ({})",e.getMessage())
LOG.error("Cannot get the live nodes: {}",e.getMessage())
list.append(pi)
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMillis(request.getStartTime())
popupWindow.setContentWidth(menuWidth)
@Nullable
Thread.sleep(1000)
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
given().content(bytes).when().put("/file")
MeasureSpec.makeMeasureSpec(myHeight,MeasureSpec.EXACTLY)
"Surface(native-token=" + mSurfaceControl + ")"
createRenderScript(true)
@Override public T dependsOn(Map<String,?> attributes,Module module){   backingModule.dependsOn(attributes,module);   return t(); } 
PApplet.splitTokens(transform)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)
Throwable failure=lastException; 
loadAnimator(fragment,transition,false,transitionStyle)
allSortedModules.stream()
buttonOrder.setPrefSize(300,30)
scrollWebElementIntoView(webElement)
MessagingService.instance().addCallback(handler,message,destination,message.getTimeout(),handler.consistencyLevel)
getLogger().debug("Row {} not found in {}, transferring to not found",new Object[]{rowId,tableName})
url == null
i == j && i > 1
user.getActualCompanyId()
selenium.isElementPresent("link=Control Panel")
selenium.isElementPresent("link=Control Panel")
new StepMeta(fromstepid,fromstepname,(StepMetaInterface)tii)
VERSION=42
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadFile.Null"))
immediate=true
selenium.isElementPresent("link=Control Panel")
metadata.getFaceRectangles()
matcher.group(13)
log.error("PID contains identifier with no assigning authority")
appInfo.uid == XRestriction.cUidAndroid ? expert : true
COUNT_DATABASE.put(key,newVal)
buildJSLoaderModulesServlet(Collections.<String,Object>singletonMap("applyVersioning",Boolean.TRUE))
b.setMessage(getString(R.string.local_osm_changes_upload_all_confirm),1)
resolveMethodByThrowable(exception)
selenium.isElementPresent("link=Control Panel")
TopLevelBuildData topLevelBuildData=getBuildData(); 
Thread.sleep(1000)
eventJournalConfig.getCacheName()
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=2
pkgs.get(j)
selenium.isElementPresent("link=Control Panel")
KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME)
new ResultSetIterator(conn,rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
dynamicState.changingBlobs.isEmpty()
Message.throwInternalError(storage.getDiskFile() + " != " + file)
log.warn("Error connecting to node {}",node,e)
System.out.println()
getStepIOMeta().getInfoStreams()
getAsText(get(instant),locale)
new PrintStream(bos,false,"UTF-8")
GlobalSearchScope.allScope(getProject())
selenium.isElementPresent("link=Control Panel")
toEventData(key)
ruleContext.throwWithRuleError("Xcode version must be specified to use an Apple CROSSTOOL")
KeycloakHttpServerAuthenticationMechanism.class
LOG.info(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
hasRows(oldTableName)
checkCall(receiver)
callback.onPulseFinished()
!aClass.isInterface() || aClass.isAnnotationType()
fireDataChanged()
engine.execute(query).dumpToString()
service.asBinder().pingBinder()
return true; 
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
mUiHandler.removeCallbacks(pae)
typTypeStr != null && !typTypeStr.isEmpty()
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",BASE_CLASS_ERROR)
mPowerManager.isInteractive()
page.getLogicalSizeInBytes()
expression.length() - 1
!enable
t=b.getBroadcasterConfig().applyFilters(r,t)
new SystemVibrator(context)
uuid.getMostSignificantBits() & 0xFFFFFFFF00000000L
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
xml.halfOpenElement(IQ.QUERY_ELEMENT)
cache1.getAndRemove(1)
telephony.getLteOnCdmaModeForSubscriber(subId,getOpPackageName())
selenium.isElementPresent("link=Control Panel")
buf.readRetainedSlice(length)
trimmedLine.contains(delimiter)
viewable=false
new PropertyDescriptor.Builder().name("Receive Message Wait Time").description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.").expressionLanguageSupported(false).required(true)
TelephonyManager.getDefault().getCurrentPhoneType()
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
loaded.getLoaded().getDeclaredConstructor()
val == null || val.length() == 0
DirectoryReader r=IndexReader.open(dir); 
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
Iterable<T>
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0
generateFluentSetters()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
retriever.getFrameAtTime(-1)
logger.trace("Invalid Account Credentials")
VERSION=9
onDetachedFromWindow()
maxZoom=24
client.filter(basicAuthentication("rob","rob")).get().uri("/").exchange().expectStatus().isOk().expectHeader().valueMatches(HttpHeaders.CACHE_CONTROL,".+").expectBody(String.class)
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
2 * 24 * 3600* 1000l
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Integer.toHexString(realQuality)
if (VDBG) {   Log.d(LOG_TAG,"hasBgCall: " + hasBgCall + "sameChannel:"+ sameChannel); } 
new BooleanPreference("auto_zoom_map",false,false)
element != null
ConcurrentHashMap<String,Counter>
!match && compareRecover
memoryMap.getInt("mappedWithJournal",-1)
!getLocationEnabled()
mAppName.getVisibility() != GONE && appWidth > mHeaderMinWidth
in.readStringFixed(8)
String viewIdResName
RECORD_LENGTH=0
Localization.lang("Open SPIRES entry")
DEBUG_OBB=false
_connector.getResponse("GET /foo?status=206 HTTP/1.0\n\n")
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
T[]
1 / 5f
row == null && !stopped.get()
SSLParametersImpl.getDefaultX509TrustManager()
qp.isUniqueItems()
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
cfstore.markCurrentSSTablesReferenced()
ctx.nextInboundMessageBuffer()
super.resolveLayoutDirection(layoutDirection)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
GlobalSearchScope.allScope(getProject())
log.logError(BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
settings.setTextSize(WebSettings.TextSize.SMALLER)
Double.toHexString(d)
case ABORT_BUILD: 
serviceName == null || seenServiceNames.contains(serviceName)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod.run();   } } 
Integer.parseInt(sid[0],16)
isDoubleCategory(typeRe)
Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
privateJDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
SuperColumns.endOf(del.predicate.getSlice_range().finish)
buf.discardReadBytes()
StartupManager.getInstance(module.getProject()).runWhenProjectIsInitialized(new DumbAwareRunnable(){   public void run(){     ApplicationManager.getApplication().runWriteAction(new Runnable(){       public void run(){         onModuleInitialized(module);       }     } );   } } )
new ProgressDialog(getActivity(),R.style.ProgressDialogTheme)
counter > max
((Composite)item.getControl()).layout(false)
b.getTypeByte()
tr("Error while setting serial port parameters: {0} {1} {2} {3}")
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
error == null && dataFilter != null
(child.mViewFlags & VISIBILITY_MASK) == VISIBLE
result.getReceipt().getEnergyUsageTotal()
uri.toString().equals(future.getURI().toString())
tfs.getFile(fileId)
node == null || v == node.view
engine.execute(query).dumpToString()
maxSize < (used / total)
transportRoutingHelper.getStartLocation()
new ArgumentsPanel(true,JMeterUtils.getResString("paramtable"))
parsedResult.getType()
CacheData<RealmObject>
viewPort.setClearFlags(true,true,true)
attribute.getDefinition().getMarshaller()
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.comment_pending_bg_selector))
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).doAfterTerminate(() -> isFormSubmitting.onNext(false))
getTelecomService().silenceRinger(mContext.getOpPackageName())
pOtherShape instanceof Line
paramTypeClassNode.getMethod("validate",new Parameter[0])
String.format("%s:%s:%s:%s",getModuleGroup(),getModuleName(),getModuleVersion(),configuration)
StringBuilder buffer=new StringBuilder("{ "); 
new NodeStats(discoveryNode,0L,null,null,null,null,null,null,null,null,null,null,null,null,null)
private ExceptionHandler exceptionHandler; 
printf(") at %p (",exceptionPc.rawValue())
field.tokenStream(docMapper.mappers().indexAnalyzer())
options.get(option).perform()
builder.humanReadableField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
defaultFloat=0f
initialCapacity > 1 << 30
SocketUtils.findAvailableTcpPort(41000)
setDeletionSystemEventClassNames(DDMStructure.class.getName(),DDMTemplate.class.getName(),JournalArticle.class.getName(),JournalFeed.class.getName(),JournalFolder.class.getName())
/**   * {@link Builder#postfixWith(Tree,String)}   */ public static SuggestedFix postfixWith(Tree node,String postfix){   return builder().postfixWith(node,postfix).build(); } 
forward.close(true)
getService().animateCollapseNotifications()
time != -1 && Math.abs(mLastModified * 1000 - time) >= 86400000
meterRegistry.summaryBuilder(METRIC_NAME_USAGE).tags(METRIC_CATEGORY,poolName)
configurations.maybeCreate(Dependency.ARCHIVES_CONFIGURATION)
localImageSize == null
battery.addPower(Math.min(target,battery.getCapacity() - battery.getStored()),false)
Throwable e
position.offset(mLeft,mTop)
publicType.getSimpleName()
imageView.setImageDrawable(drawable)
lan
Long.parseLong(job.findExtraInfoBackward(BatchConstants.LOOKUP_EXT_SNAPSHOT_SRC_RECORD_CNT_PFX + tableName,"-1"))
Log_OC.e(TAG,"onAccountChanged was called with NULL account associated!")
startingWindow != null && ttoken.startingView != null
new InMemorySessionManager("",1,true)
pe instanceof DuplicateLockException
selection != null && selection != ""
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
e.getMessage()
LOGGER.debug("no property for " + type + ", "+ format)
mService.stopLocalOnlyHotspot(mContext.getOpPackageName())
mFacetCategoryMap.get(category)
Boolean.parseBoolean(attrValue)
stack.peek()
m.getName().startsWith("test") && Modifier.isPublic(m.getModifiers()) && m.getParameterCount() == 0
channel.writeAndFlush(res)
CythonLanguageDialect._isDisabledFor(node) || MakoLanguage._isDisabledFor(node)
create.isInternal()
lockForRescale()
new DatagramDnsQuery(null,addr,1)
isAbstract()
packet.getTo().split("/",2)
lock.isHeldByCurrentThread()
selenium.isElementPresent("link=Control Panel")
Log_OC.d(TAG,"Initializing Fragments in onAccountChanged..")
mAuthorities.valueAt(i)
content().duplicate()
super.createNew(item)
aliases.get(a)
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Long.parseLong(value)
registerUsageCallback(networkType,subscriberId,thresholdBytes,callback,null)
filterParameterName.lastIndexOf('.')
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
display.getRealMetrics(dm)
log.err("Could not annotate via server! Trying to annotate locally...",t)
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
tag.getName()
response.get(ROLLED_BACK)
Order result=order; 
openSparkInterpreter(true)
(Number)array[this.index]
ARCHIVE
type.getDeclaredConstructor()
mMccStr == null
c <= 'Z'
Thread.sleep(1000)
listener.iterationDone(mln,iterationCount,epochCount)
bufferedBytes < maxBufferedBytes
cursorMove=0
Math.floor(internalPower[in] / totalPowerContained * totalPowerConsumed)
mAudioSink.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
((ExecutorService)executor).isTerminated()
directoryDelegate.renameRepositoryDirectory(dir.getObjectId(),dir,dir.getName())
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
StringBuilder msg=new StringBuilder(methodName); 
logger.info("No column family to repair for keyspace " + tableName)
incomingMessage.getMessagePayloadByte(1)
Name.identifier(name)
parentClass.getClassName()
row + 2
InsertReturningStep<R>
engine.execute(cypher).dumpToString()
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
executing != null && (executing.getFlags() & JobInfo.FLAG_WILL_BE_FOREGROUND) == 0
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
Exception ignored
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(streamid,id)
jobExecutionContextClass.getMethod("setResult",Object.class)
getVal(path,true)
res + _bias
this(false,5,5,5,10); 
log.err("Could not annotate via server! Trying to annotate locally...",t)
Element.F64_2(mRS)
FileUtils.deleteQuietly(store.directory())
settings.readLPw(null,0,false)
log.info("Reset to factory defaults : onErrorDropped")
checkManageOrCreateUsersPermission("query user")
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
mAttributes.getAllFlags()
ImmutableSortedSet.of("br","li","dt","dd","hr","img","p","td","tr","th")
width <= 0
new IllegalStateException(sm.getString("coyoteResponse.resetBuffer.ise"))
BackupManagerServiceInterface svc=mService; 
1
typeSettingsProperties.toSortedString()
validate()
pyClass.findClassAttribute(PyNames.DUNDER_METACLASS,false)
elementClass != null && Modifier.isPublic(elementClass.getModifiers())
token.equals("!") && !prevToken.equals("?") && !prevToken.equals("\u00a0")&& !prevToken.equals("\u202f")
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
type.getDeclaredConstructor()
in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamAccount()
i=1
!price.getAmount().equals(BigDecimal.ZERO)
toBeRemovedKeys.removeAll(keysToDelete)
sampleFactory.getDeclaredConstructor()
mSearchInput.setFocusableInTouchMode(focusable)
private BigDecimal location; 
selenium.isElementPresent("link=Control Panel")
new IllegalStateException("Advertising can't be both connectable and anonymous")
ErrorPageFilter.class
Log_OC.e(TAG,"Server check tried with OperationService unbound!")
(NestedForm)actionForm
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
args.length == 0 || (args.length == 1 && args[0].equals("-a"))
DiagnosticFactory1<JetFunction,DeclarationDescriptor>
filterParameterName.lastIndexOf('.')
world.add("capsule",5f,3f,5f)
verify(mWifiService).stopLocalOnlyHotspot()
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
new AudioMediaDeviceSession(this,oldSession)
selenium.isElementPresent("link=Control Panel")
dest.writeInt(txPower)
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
new ValueComparator(sortOrderAscending,type)
_keep_cross_validation_models=true
gen.addLoadImmediate(Register.R0,123456789)
webView.evaluateJavaScript(injectJavaScript,null)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
exchange.getPartitioningScheme().isReplicateNullsAndAny()
new URLClassLoader(new URL[]{myStdlib},AllModules.class.getClassLoader())
metaData.getData(SaveActions.META_KEY) != null
loaded.getLoaded().getDeclaredConstructor()
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
BuildRule buildRule
stat.st_mtim.tv_nsec.longValue()
vals.length < _sparseLen
dynamicType.getLoaded().getDeclaredConstructor()
NestedSetBuilder.linkOrder()
hongbaoContent == null || "查看红包".equals(hongbaoContent)
sentence.substring(9,24)
lastPos < mTargetPos
assertEquals(0,calendar.get(Calendar.MONTH))
getNonCacheableSingleModelLoader()
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
dynamicType.getLoaded().getDeclaredConstructor()
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
portlet.getRootPortletId()
getPath("checks/javadoc/Input_03.java")
cs.newDrawable()
logger.info("Illegal argument in chart: {}",e)
id=10869
states.length >= 14
new RuntimeException("to length:" + to.length + " from length:"+ from.length)
service.getDomain().id()
executeMethodAndConvertExceptions(httpPost)
new IndexShardRoutingTable.Builder(new ShardId(indexName,0))
typeSettingsProperties.toSortedString()
mMccStr == null
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
lock.isHeldByCurrentThread()
attributes.getFloat(R.styleable.ArcProgress_arc_angle,default_arc_angle)
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
selenium.isElementPresent("link=Control Panel")
OnOffType.class
UIUtil.createImage(myComponent,size.width,size.height,BufferedImage.TYPE_INT_RGB)
mp.getResolvedValue()
subCursor.getString(COLUMN_VALUE)
latbottom <= o.getLocation().getLatitude()
ArrayUtil.contains(functionName,PyNames.AITER,PyNames.ANEXT,PyNames.AENTER,PyNames.AEXIT,PyNames.CALL)
prop.getParamValue()
data.split("\\s*,\\s*",-1)
LOGGER.warn("Could not perform drage and drop",ioex)
variableIdentifier instanceof PsiIdentifier
localLOGV || true
mMccStr == null
statistics.addRemoveTimeNanos(System.nanoTime() - start)
file == null || !file.isValid()
typeSettingsProperties.toSortedString()
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,19,getLayoutLog())
logger.debug(e.getMessage(),e)
colors.getThemeAttributeId(i,0)
mQsDensityContainer.getLayoutParams()
mNwService.getInterfaceConfig(mTetherInterfaceName)
mService.queryDisplayStatus(getCallbackWrapper(callback))
mLocalDirtyRect.set(0,0,width,height)
StepVerifier.create(source.flux().bufferWhen(open,o -> close)).then(() -> {   source.assertSubscribers();   open.assertSubscribers();   close.assertSubscribers();   open.next(1); } ).then(() -> {   open.assertSubscribers();   close.assertSubscribers();   source.complete(); } ).expectNextMatches(List::isEmpty).verifyComplete()
pos == -1 || pos >= end
DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
tl.set(paint,mText,start,end,dir,directions,hasTabs,tabStops)
findCodecForFormat(true,format)
builder.put(columnHandle,0.0)
StringTools.isEmpty(str)
type.getDeclaredConstructor()
LOGGER.warn("Could not execute cut",ex)
-1
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
new ShardStats(shardRouting,new ShardPath(false,shardPath,shardPath,new ShardId(index,0)),shardCommonStats,null,null)
!this.bukkitName.isEmpty()
DeprecationLogger.nagUserWith("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
initialCapacity > 1 << 30
new RuntimeException(e.toString())
StringBuilder buffer=new StringBuilder(sericeCounterName.toString()); 
Object useGrouping=properties.get(NumberFormatSample.PROP_USE_GROUPING); 
firstPostObject.optJSONObject("discussion")
klass.getDeclaredFieldsUnchecked(false,declaredFields)
Simple.forClass(Boolean.class)
Sets.difference(queryIdsSnapshot,liveQueries)
indexY <= pointsIndex
6 * width * height
compressed.limit()
new OptiqSemanticException("Invalid Column Reference: " + grpbyExpr.dump())
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to timestamp with time zone: " + value.toStringUtf8(),e)
desc.getName()
done || body == null
new IllegalArgumentException("Property 'targetCacheManager' is required")
app.getSettings().AVOID_MOTORWAY.getModeValue(params.mode)
GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)
getAsShortText(get(instant),locale)
myNameDefiners == null
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
s.elapsed(TimeUnit.NANOSECONDS)
lastRequestTime + publicKeyCacheTtl > currentTime && kid != null
new VariableInformation(1,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
isShortcutProxyActivity(stubIntent)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),false)
return 4; 
webRequest.getServletContext()
MavenProjectsManager.getInstance(myProject).doInitComponent(false)
endPos < bufEnd
id.provider != null && id.provider.info != null
message.getMessage().getExpiresInSeconds() * 1000L
mWM.removeViewImmediate(mView)
selenium.isElementPresent("link=Control Panel")
generateRandomStringArray(20,20,false,false)
manager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,alarmTime,pi)
getLastChildElement(tabBar)
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("ADH-DES-CBC3-SHA",KeyExchange.EDH,Authentication.aNULL,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA")
!mGsmPhone.mSST.isConcurrentVoiceAndData()
DBG=true
m.size()
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
mValues[8]
countNewlines(headerFragment) + 1
CollectionUtils.filter(filteredCrossSales,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((CrossSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
parser.nextText()
new Alarm(Alarm.ThreadToUse.SWING_THREAD,this)
"adjustedPath=" + adjustedPath
ZKMetadataProvider.getOfflineTableConfig(propertyStore,tableName)
jailName == null || config.getProperty(jailName.toLowerCase()) == null
InsertReturningStep<R>
expiresPctx.evaluateActionQueue(workingMemory)
mBluetoothHeadset.connectAudio()
mStackScroller.getChildAtRawPosition(x,y)
KeyManagerFactory.getDefaultAlgorithm()
keyPattern.getDefaultValue() == null || keyPattern.getDefaultValue().isEmpty()
BUTTON_QUIESCENT_ALPHA=0.70f
Thread.sleep(5000)
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
execute("refresh table t4")
Throwable e
overrideAllAssetTagNames != null
StringBuilder ret
Exception e
mService.setAppPolicy(UID_A,POLICY_NONE)
uncompressedProto.length < 2560000
get(context,R.string.pref_navigation,false)
POSITIVE_X(0)
notificationManager.notifyAsUser(NOTIFICATION_ID,id,notification,UserHandle.ALL)
sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache,scenes)
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
new RuntimeException("Error loading DataSet at path " + path + " - DataSet may be corrupt or invalid."+ " Spark DataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
logger.warn("{}",builder.toString())
String fullfillmentMethod
mBluetoothLock.readLock().unlock()
_log.error(pe,pe)
dist >= maxDist
new ConcurrentHashMap<String,JsonDeserializer<Object>>(16,0.75f,2)
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
synchronized (mService) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
ImmutableSet.Builder<ImplementationMethodDescriptor>
logger.fine(name)
selenium.isElementPresent("link=Control Panel")
addContactButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
applicationContext.close()
log.error("Problem in JSR223 script ",e)
!mIsOnInnerCircle && hour != 0
type.getDeclaredConstructor()
responseFilters != null
sizeChanged || creating || !mRtHandlingPositionUpdates
pm.performDexOpt(pkg,null,true)
mFinishing && mSupportHardware && mHwCenterX != null
Intent.ACTION_SEND.equals(action) || Intent.ACTION_SENDTO.equals(action) || "android.intent.action.SEND_MULTIPLE".equals(action)
highlighter.getTargetArea() != HighlighterTargetArea.LINES_IN_RANGE || myDocument.getLineNumber(highlighter.getEndOffset()) < myDocument.getLineCount() - 1
out.writeLong(duration)
mWindowManager.getDefaultDisplay().getRealMetrics(metrics)
selenium.isElementPresent("link=Control Panel")
ObjectUtils.chooseNotNull(lookAndFeelInfo,findLaf(lookAndFeelInfo.getClassName()))
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
i <= size
@Override public String call() throws Exception {   if (distribution.getBaseName() == null || distribution.getBaseName().equals("")) {     throw new GradleException("Distribution baseName must not be null or empty! Check your configuration of the distribution plugin.");   }   return distribution.getBaseName(); } 
new ArrayList<>(0)
isDirectory()
id=16
isReplicateRequest()
mCurrentPage == newPageIndex
type.getDeclaredConstructor()
openSession.closeAndClearTokenInformation()
XmppStringUtils.parseBareJid(key)
left < chartCalculator.mContentRect.left
testClass.getMethod(SUITE_METHODNAME)
countDownLatch.await()
List<UsageInfo>
!showNotifications.isNull()
display.getRealMetrics(dm)
logger.warn("Table spec retrieval failed, couldn't read file: " + sourceFile)
new Paint()
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true,true)
attrib.isNormal()
Localization.menuTitle("View")
mService.getWifiServiceMessenger()
page.getLogicalSizeInBytes()
assertClusterSizeEventually(2,data2,data3)
firstPos > mTargetPos
clientState.getRawKeyspace()
-26
zoom < 17
setDiskPersistent(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
getIntProperty("tachyon.master.web.threads",9)
StatsLog.write(StatsLog.ANR_OCCURRED,app.uid,app.processName,activity == null ? "unknown" : activity.shortComponentName,annotation,(app.info != null) ? (app.info.isInstantApp() ? StatsLog.ANROCCURRED__IS_INSTANT_APP__TRUE : StatsLog.ANROCCURRED__IS_INSTANT_APP__FALSE) : StatsLog.ANROCCURRED__IS_INSTANT_APP__UNAVAILABLE,app != null ? (app.isInterestingToUserLocked() ? StatsLog.ANROCCURRED__FOREGROUND_STATE__FOREGROUND : StatsLog.ANROCCURRED__FOREGROUND_STATE__BACKGROUND) : StatsLog.ANROCCURRED__FOREGROUND_STATE__UNKNOWN)
text.contentEquals(((TextButton)button).getText())
Preconditions.checkState(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
ImmutableSortedMap<Integer,Integer>
setServiceForegroundInnerLocked(r,id,notification,0)
startActivity(mAdapter.intentForPosition(0))
LibraryTableEditor.editLibraryTable(getProjectLibrariesProvider(),myProject)
schemeSpecificParts != null && data != null
native_get_videoeditor_export_level(vidCodec)
checkCall(receiver)
Slog.d(TAG,"FLP HAL not supported")
measureRun(0,0,offset,mLen,false,fmi)
new IllegalStateException("Advertising can't be both connectable and scannable")
mService.mLockTaskController.checkLockedTask(tr)
cc.getLazy()
logger.debug("Cannot update channel for group member ({})",e.getMessage())
selenium.isElementPresent("link=Control Panel")
new IndexWriter(dir,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Throwable exception
mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))
RetryHandlingBlockMasterClient.class
Log.i(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
startingPosition >= limit
/**   * {@link Builder#swap(Tree,Tree)}   */ public static SuggestedFix swap(Tree node1,Tree node2){   return builder().swap(node1,node2).build(); } 
collectJSVariables(clazz,candidates,false,false,true,true,true)
hostsInPool.incrementAndGet()
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
Integer.parseInt(attrValue)
@Test
Slog.w(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
MessageExtractor.getTextFromPart(part)
state.value == rotationLocked && state.contentDescription != null
disable2ForUser(what,token,pkg,mCurrentUserId)
Numeric.toHexStringWithPrefixSafe(filterId)
StorageUtils.getCacheDirectory(context)
Integer.parseInt(optionsHelper.getOptionValue(OPTION_PERIOD))
collectionRecords != null && !collectionRecords.isEmpty()
endExpression != null
String.format(Locale.ROOT,"%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",nf(counter),updateCounter,nf(sortedNodes.getSize()),nf(nodeContractor.getAddedShortcutsCount()),nf(nodeContractor.getDijkstraCount()),getTimesAsString(),(long)meanDegree,nodeContractor.getPrepareAlgoMemoryUsage(),Helper.getMemInfo())
doTest("class UserProfile:\n" + "    pass\n" + "\n"+ "#noinspection PyUnusedLocal\n"+ "def foo(sender):\n"+ "    pass","Py:CLASS_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK","Py:DEDENT","Py:LINE_BREAK","Py:END_OF_LINE_COMMENT","Py:LINE_BREAK","Py:DEF_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:LPAR","Py:IDENTIFIER","Py:RPAR","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK")
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
myCustomRootProvider == null
new IndexWriter(dir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
executor.execute(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
DeprecationLogger.nagUserWith("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
selenium.isElementPresent("link=Control Panel")
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile,false)
HttpParameter.CACHE_ID.getParameterFrom(req) == null || HttpParameter.PART.getParameterFrom(req) == null
convert(BigInteger.class,value,defaultValue)
this.decoder.decode(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; 
mValues[8]
new FileDumper(output.toAbsolutePath().toString(),true,e1.getClassType(),summaryDumper,collectingDumper.getTypeUsageInformation(),options,illegalIdentifierDump)
!mRenderNode.isPivotExplicitlySet()
mViewModel.onNewsCardShown(item,getCurrentTag())
in.getDepth() >= outerDepth
!ON_TOP
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
getBatchId()
1
runAndVerifyStatusSorted("! root" + File.separator + "target"+ File.separator+ "source","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s1.txt","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s2.txt")
checkManageOrCreateUsersPermission("getting profiles related to user " + userId)
i=1
ServletUtil.prepareParameters(p,true,false,false)
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
file.getName()
new EnterSelectionDialog(shell,files,Messages.getString("XMLInputDialog.FilesReadSelection.DialogTitle"),Messages.getString("XMLInputDialog.FilesReadSelection.DialogMessage"))
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).write()
firstSlash <= 0
mGoogleApiConnectionTask.trySetException(new ConnectException(result.toString()))
Boolean.parseBoolean(attrValue)
mySide2.select(titles)
Minecraft.getMinecraft().gameSettings.fancyGraphics && tome != null
new StackManager(stackRoot,commonServices,osFamily,false,metaInfoDao,actionMetadata,stackDao)
new Random()
mValue == null || offset > mValue.length
nextRow > lastRow
origin >= other
initialCapacity > 1 << 30
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
appWindowToken == null || !appWindowToken.isVisible()
logger.fine(String.format("will wait %dms before reconnect attempt",delay))
typeConverter.convertTo(XMLStreamReader.class,exchange,stream)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
IOUtils.toString(stencilsetStream,"utf-8")
con.commit(false)
env != null && env.getAdminContext() != null
public class BackupManagerService implements BackupManagerServiceInterface {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
logger.warn("failed engine [{}]",failure,reason)
queryMixin.rightJoin(target,alias)
Double.valueOf(data[metadata.indexOf(name)])
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar","java.time.LocalDateTime")
args.putInt(ProgressScene.KEY_PAGE,result2.page)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
e1 == null || e2 == null || Math.abs(e1.getY() - e2.getY()) > SWIPE_MAX_OFF_PATH
Slog.d(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
from > to
speed < 5
/**   * @author yole  */ public class CoverageProjectViewClassNodeDecorator extends AbstractCoverageProjectViewNodeDecorator {   public CoverageProjectViewClassNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager dataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=dataManager.getCurrentSuitesBundle();     final Project project=element.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     if (element instanceof PsiClass) {       final String qName=((PsiClass)element).getQualifiedName();       if (qName != null) {         appendCoverageInfo(cellRenderer,javaCovAnnotator.getClassCoverageInformationString(qName,dataManager));       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager coverageDataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=coverageDataManager.getCurrentSuitesBundle();     final Project project=node.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }  else     if (value instanceof PackageElement) {       PackageElement packageElement=(PackageElement)value;       final String coverageString=javaCovAnnotator.getPackageCoverageInformationString(packageElement.getPackage(),packageElement.getModule(),coverageDataManager);       data.setLocationString(coverageString);     }     if (element instanceof PsiClass) {       final GlobalSearchScope searchScope=currentSuite.getSearchScope(project);       final VirtualFile vFile=PsiUtilCore.getVirtualFile(element);       if (vFile != null && searchScope.contains(vFile)) {         final String qName=((PsiClass)element).getQualifiedName();         if (qName != null) {           data.setLocationString(javaCovAnnotator.getClassCoverageInformationString(qName,coverageDataManager));         }       }     }   }   @Nullable private static JavaCoverageAnnotator getCovAnnotator(  final CoverageSuitesBundle currentSuite,  Project project){     if (currentSuite != null) {       final CoverageAnnotator coverageAnnotator=currentSuite.getAnnotator(project);       if (coverageAnnotator instanceof JavaCoverageAnnotator) {         return (JavaCoverageAnnotator)coverageAnnotator;       }     }     return null;   } } 
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
Utils.isZkAuthenticationConfiguredTopology(topoConf)
mAttributes.getAllFlags()
action != KeyEvent.ACTION_UP
new File(PortletPropsValues.WURFL_DATABASE_PATCHES,fileName)
private Throwable exception; 
type.getDeclaredConstructor()
new File(themeDirStr)
reply.setError(PacketError.Condition.not_authorized)
GuiUtils.invokeLaterIfNeeded(() -> new VcsPushDialog(myProject,preselectedRepositories,GitBranchUtil.getCurrentRepository(myProject)).show(),modality,myProject.getDisposed())
type == Sensor.TYPE_TEMPERATURE || type == Sensor.TYPE_AMBIENT_TEMPERATURE
new IllegalStateException("Advertising can't be both connectable and scannable")
isAllowed()
dockedBounds.left - dockDividerWidth
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
ControllerStatusReportingTask.class.getDeclaredField(fieldName)
StringBuilder buf=new StringBuilder(); 
SPACE_BEFORE_COLON_IN_FOREACH=true
"com.google.android.gms".equals(mPackageName) || "com.google.android.syncadapters.contacts".equals(mPackageName)
sqlRouteResult.getSqlParsedResult().getType()
deltao.mmul(Nd4j.diag(wOO))
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
Key.class.getName()
mock.message(0).body(String.class)
/**   * 秋季（第三季度）   */ AUTUMN(3)
MBeanInfoAssembler.class
article.put(Article.ARTICLE_SYNC_TO_CLIENT,true)
intention.processIntention(element,myFixture.getProject(),myFixture.getEditor())
a.getDimension(attr,0)
ColorProperties.getColor("inactiveTextColor")
ts.getJobId() == jobId
Class<N>
value + MINIMUM_BACKLIGHT
FilenameUtils.getFullPathNoEndSeparator(destination)
configuration.getMemoryMode() == CacheMemoryMode.OFFHEAP_TIERED && configuration.getQueryEntities().size() > 2
mWM.removeViewImmediate(mView)
MAX_TOOLTIP_SHOWN_COUNT=2
StringBuilder sb=new StringBuilder(); 
packageNames != null && packageNames.length == 1
TYPE_20(ACCURATE,CONTROLLED,null,DEFENSIVE)
!mStatus.showStatusLines() || (mCharging == null && mNextAlarm == null)
((Context)entry.value).destroySubcontext(name.getSuffix(1))
generateRandomStringArray(20,10,false,false)
mAppToken.isVisible()
new ServerSparseIntRow(rowId,startCol,endCol,0)
mPowerManager.isInteractive()
setting.detach(this)
typeSettingsProperties.toSortedString()
selenium.isElementPresent("link=Control Panel")
someBatchInterval * 5
method.getDeclaringClass().isAssignableFrom(XAConnection.class)
((BCECPrivateKey)privKey).getD()
bitoff + nbits <= 32
fireTypingNotificationsEvent(sourceContact,evtCode)
csFoldingEnabled.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
mapper.getTypeFactory().constructType(Statistics.class)
builder.bold("#")
Assert.assertEquals(1L,args.getAllowCreationOfContracts())
assertEquals(5,ti.nrOfInvocations)
new IllegalStateException("Result is already complete: succeeded")
dynamicType.getDeclaredConstructor()
method.invoke(CachedMessageProducer.this,args)
PyQualifiedName.fromDottedString(name)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
processResult.getStderr()
m.mul(beta1)
Preconditions.checkNotNull(blockWorker,"blockWorker")
myRestrictRange.contains(info)
fieldNameMaps.containsKey(parentThing)
selenium.isElementPresent("link=Control Panel")
new FairAffinityFunction(false,512)
parsedResult.getType()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,10)
valueMono.switchIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
asList(CUBRID,DERBY,FIREBIRD,MYSQL,ORACLE,SQLITE,SQLSERVER,SYBASE)
TelephonyManager.getDefault().getCurrentPhoneType()
Exception e
mockResultSet.getLong(1)
(CachedConstructor)chooseMethod("<init>",constructors,arguments,true)
assertDurationAround(startedAtDate - firstLogDate,38_000)
VDBG=false
LOG.info("Heart rate: " + heartRate)
KotlinFacetSettingsProvider.Companion.getInstance(module.getProject()).getInitializedSettings(module)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
new Invoke(bci,opcode,kind,new Value[argumentCount],target,returnType,into)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
retriever.getFrameAtTime(-1)
state == BluetoothA2dp.STATE_PLAYING
ev.mDataSamples.length >= ND
status().isSeeOther()
sourceSet.getOutput()
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
Sets.<Long>newHashSet()
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf","isMemberOf")
realIndex < columns.size() && columns.get(realIndex).getColumn() != null
layoutRevision.getIconImageId()
addInactiveSubscription(key,info,sub)
executeMethodAndConvertExceptions(httpPatch)
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
order=10
Math.max(tmp.getMaximumFractionDigits(),10)
@Nullable
LookupElementFactory.getInstance().createLookupElement(referencedName)
sleepAtLeastMillis(1000)
MainApp.getAccountType(mContext)
content.getOutputStream(append)
b0.divide(b1,MathContext.DECIMAL64)
getPreferenceStore()
getOrCreateContainer().forceUnlock(dataKey)
AnnotatedElementUtils.findAnnotationAttributes(controllerType,annotType)
sUseRenderThread=false
newNode.makeNonIndexableRecursive()
