HttpAuthenticationFactory.class
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=2
if (VDBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
disableBluetoothContactSharing
sublistsIndices.keySet().parallelStream()
myNameField.getComponent()
scheduleRemoveStartingWindow(wtoken)
var.isClosureSharedVariable()
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
!comboBox.isPopupVisible()
type.getConstructor()
logger.debug("myq ReturnCode: {}",returnCode)
new Paint(Paint.ANTI_ALIAS_FLAG)
Item.itemsList[item.itemID].func_82790_a(item,0)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
Map<String,String>
nextPos != mBoundPos
result != null
request.getContentLength()
ColorResources.getColor("selectionForeground")
IOConverter.toString(out)
boxedConstant.getKind()
String.class
mEntries[which]
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,16,17,18,19,20)
ignoreUnknown=false
checkPojoMetaClass()
childLeftTuple.reAddLeft()
connection.local().createStream(toStreamId(i))
t + 5000
valueOfDateTimeOriginal != null
props.getProperty(ASSERTION_RESULTS_FAILURE_MESSAGE_PROP,FALSE)
AssetBrowserWebUpgrade.class
wlZipFilename.setText(dir)
c == Double.class
resources.getDimension(R.dimen.close_handle_height)
new Cell(type.makeCellName(values[i]))
type.getConstructor()
role instanceof UIRepositoryRole
new AssetKey(text)
targetPoint.y + shift
processURL(message,depth,baseURL,url)
detector != null
new JarFile(mArchiveSourcePath)
mContext.startActivity(intent)
LOG.error("It is not possible to parse file " + fileLocation,e)
Integer.toString(bitstampOrder.getId())
Integer.valueOf(taskIdStr)
shell.setSize(653,678)
Long.valueOf(name)
!mWindow.getSharedElementsUseOverlay()
telephony.isIdle()
e.getCommandResult().getErrorMessage().equals("ns not found")
slashCount == 1
Integer.valueOf(param.getValue())
flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter,ex)))
ViolationTrackingBlocksRecognizer rec
!userInfo.canHaveProfile()
JournalStructureLocalServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
Math.min(leftLen,rightLen)
getTestVector().getNumNondefaultElements()
ensureInChild(parent,FooImpl.class,FooBar.class,Foo.class)
--remainingReleaseCount == 0
new RoutingControlAction(this,newPath,false,callback)
LocalVideo localVideo=(LocalVideo)contentContainer.getContent(); 
outLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
receiver.getOuterClass()
_jsonWebServiceServiceAction.getJSON(null,null,mockHttpServletRequest,mockHttpServletResponse)
inUtc
exportReturnCodes(exporter)
convert31XToMeters(yB,yA)
JDBCUtils.safeGetString(dbResult,"id")
mService.setUidPolicy(UID_A,POLICY_NONE)
LOG.debug(e)
GlobalSearchScope.projectScope(getProject())
format != null
configurationManager.addConfigurationProvider(c)
mask.isColumnVector()
ConcurrentHashMap<VoiceMessageListener,Void>
"Searching class for device type " + deviceAddress
t != null
new RemoteUserInfo(mCurConnection.pkg,mCurConnection.pid,mCurConnection.uid)
id=19908
source.toString()
toArrayHelper(array,1)
new LruCache<>(15)
return false; 
profileCluster.clear()
mDeviceOwner != null
providers.size() >= 0
localBinder.getServiceInstance().clearCache()
schemeSpecificParts != null
expectedGas=438
public static final JPQLTemplates DEFAULT=new DataNucleusTemplates(); 
_mockSettingsFactory.getServerSettings("com.liferay.portal")
SceneOutputValueReadingJob.class
timeout < 0
checkPojoMetaClass()
mWorkerId + BASE_FILE_NUMBER
new IllegalArgumentException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
visitNode(node,context)
from > to
/**   * Return the native Typeface object associated with this PFont (if any).  */ public Typeface getNative(){   if (subsetting) {     return null;   }   return typeface; } 
Math.min(leftLen,rightLen)
accountInfo.getDate()
ModuleGrouperKt.isQualifiedModuleNamesEnabled()
return self; 
WordPress.getCurrentBlog().getRemoteBlogId()
-33.865233402568428
listAdapter.notifyDataSetInvalidated()
selenium.isVisible("link=Control Panel")
iterations=10
/**   * User: anna Date: 1/10/13  */ public class JavaFXDefaultTagInspectionTest extends AbstractJavaFXQuickFixTestCase {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxDefaultTagInspection());   }   public void testChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testEmptyChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testStylesheets() throws Exception {     checkQuickFixNotAvailable("stylesheets");   }   @Override protected String getHint(  String tagName){     return "Unwrap '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/defaultTag/";   } } 
found=true
/**   * clockwise   */ CW(1)
user.getCompanyId()
logger.info("license [{}] - grace",license.uid())
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
internalExecutor.submit(command)
MTU_LENGTH_DEFAULT=1280
portletDataContext.getExportDataElement(entityStagedModel)
accountHandle.getComponentName().toString()
components.symbolUsageValidator.validateCall(setter,trace,reportOn)
StringBuffer detailBuffer=new StringBuffer(); 
oldConfig.densityDpi != newConfig.densityDpi
getStep(stepId)
getNameWithoutPackage().equals(type)
totalNbSuggestions > MAX_NUMBER_SUGGESTIONS
LOG.debug(e)
Integer maxFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
super.cancel()
setSelectedCell(panel)
pkgs.get(i)
conversation.getContactJid().split("/")
mPowerManager.isScreenOn()
new IOException("UnknownHostException exception: " + e.getMessage())
Size.kilobytes(32)
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
scheduleRemoveStartingWindow(wtoken)
String id=reader.getAttributeValue(null,"id"); 
dockedBounds.right + adjustment
rw.release()
return consistency; 
name.equals(node.getText())
selenium.isVisible("link=Control Panel")
tableHasData(newTableName)
reader.nextInt()
binding.getKey().getTypeLiteral().getType()
1 / 100
selenium.isVisible("link=Control Panel")
assertEquals(31,count)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
BonusPackHelper.requestStringFromUrl(mUserAgent)
number == null
Base64.getMimeEncoder()
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
MethodHandles.insertArguments(ci.handle,ci.handle.type().parameterCount() - 2,true,false)
minHandlingTime == 0 | minHandlingTime > handlingTime
LOGD=true
new BeanDefinitionStoreException(bd.getResourceDescription(),curName,ex.getMessage())
Optional.of(Duration.seconds(1))
Thread.sleep(3000)
a.getDimensionPixelOffset(attr,0)
Long.valueOf(name)
getTestName(true)
mNavigationBarView.inScreenPinning()
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle
new StringPreference("map_overlay",null,true)
IllegalArgumentException.class
tokens.toString()
checkPojoMetaClass()
logger.info("license [{}] - expired",license.uid())
query.length()
settings.readLPw(null)
new InMemoryMessageRespository()
issueUpdater.setSeverity((DefaultIssue)context.issue(),severity(properties),context.issueChangeContext())
public TokenStream create(Reader input){   return new WhitespaceTokenizer(input); } 
y
l.equals("</pre>")
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
type != null && interpolationInterval > 0
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
definition.getPortTypes()
selenium.isVisible("link=Control Panel")
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     if (myRunContext != null) {       runnable.run();       return;     }     final boolean needsRestart=isIdleQueueEmpty();     myIdleRequests.add(runnable);     if (isFocusTransferReady()) {       flushIdleRequests();     }  else {       if (needsRestart) {         restartIdleAlarm();       }     }   } } )
this.route(request).otherwiseIfEmpty(Mono.defer(() -> other.route(request)))
(short)0755
Long.valueOf(subSecs)
new Duration(10,TimeUnit.SECONDS)
executionManager.findChildExecutionsByParentExecutionId(processInstanceId)
o instanceof Xid
mSyncStatus.get(i)
createFromResourceStream(res,value,is,srcName)
p._eta != 0
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(false)
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
new ResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
(ChatRoomMessageDeliveredEvent)obj
_folder != null
return mChangingDisappearingDuration; 
Assert.notNull(jarScanner,"Patterns must not be null")
SLIDING_TIMEOUT=20L
LOGGER.lifecycle(msg.apply())
checkPojoMetaClass()
((Scorecard)serializable).isUseReasonCodes()
new IllegalArgumentException("Remote url " + url + " is invalid. ")
findClass
new MockQueryExecution(1)
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final DefaultHttpClient getClient(){   return getClient(connectionTimeout); } 
mLockMode == InodeTree.LockMode.READ
assertFalse(metaInject.init(spyMeta,data))
b == null
ConfigPropertyVetoExceoption ex
Long.valueOf(val)
selenium.isVisible("link=Control Panel")
TEST_UTIL.getHBaseAdmin()
!(value.getParent() instanceof XmlAttribute)
new LinkedList<>()
mMenu.getVisibleItems()
artifact.replace("(?<!solr-)analysis-","analyzers-")
dynamicType.getConstructor()
cacheTimeout=3600000l
public String getWidth(){   return width; } 
return false; 
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
gi.getVertexNames()
inUtc
FitNesseUtil.makeTestContext(null)
user.isOwner()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
SecondActivity.class
Thread.sleep(5000)
deletionRetentionStrategy == null
assertArrayEquals(arr1,table.getBinaryByteArray(0,0))
text.length() == 0
volume.getType() == VolumeInfo.TYPE_PUBLIC
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples)
ipnbFilePanel.getSelectedCell()
Integer.valueOf(stackIdStr)
new ChooseCallAccountPopupMenu(tree,providers)
application.getApplicationContext()
ColorResources.getColor("primaryControlDarkShadow")
server_.copyFile(selectedFiles.get(0),targetFile,false,new VoidServerRequestCallback(progress){   @Override protected void onSuccess(){     view_.selectNone();   } } )
myRole2 == ChildRole.LOOP_BODY
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
config.getInt("history.size",0)
getMyApplication().getFavorites().getVisibleFavouritePoints()
parent.getChildAdapterPosition(v)
Type.getType(classNode.name)
new CallbackStub()
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
Throwable e
mAuthorities.get(i)
new Paint(Paint.ANTI_ALIAS_FLAG)
tl.set(mPaint,mText,start,end,dir,directions,hasTabs,tabStops)
filter.selectSubTypesToAccept(poiCategory,null)
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
GroupServiceUtil.addGroup(name,description,type,StringPool.BLANK,true,true,serviceContext)
_socialActivityInterpreterClasses.isEmpty()
awsClient.deleteLaunchConfiguration(resource.getId())
assertEquals(redVocab.getIndex(),0)
result.entrySet()
public QueryRunner printPlan(){   printPlan=true;   return this; } 
Long.valueOf(value)
mBluetoothHeadset.stopScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
Build.VERSION.SDK_INT > Build.VERSION_CODES.O
telephony.getDataNetworkTypeForSubscriber(subId)
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
r.curApp != null
return matchedUris; 
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes())
settings.ROUTER_SERVICE.get()
diffs.isEmpty()
pointcut.getMethodMatcher().matches(null,null)
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
temporaryFolder.getRoot()
Thread.sleep(5000)
setBackgroundDrawable(null)
dlFileVersion.getVersion().equals(DLFileEntryConstants.VERSION_DEFAULT)
native_get_videoeditor_export_profile(vidCodec)
i < position
requestOptionMethod.toString()
jedis.sadd(getSetKey(task),request.getUrl()) > 0
notify()
assertThat(t).isNotEqualTo(e)
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
15 * 60 * 1000
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
selenium.isVisible("link=Control Panel")
mAuthorities.get(i)
JvmDeclarationOriginKt.OtherOrigin(myClass)
mHorizontals == null
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).otherwise(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
uncollectedPointCreater.createUnCollectedPoint(timestamp)
logger.trace("Receive queue TAKE: Length={}",recvQueue.size())
MAX_TOOLTIP_WIDTH=300
IOException e
isReserved(c)
TelephonyManager.getDefault().getPhoneType()
new JettySolrRunner(solrHomeDirectory.getAbsolutePath(),"/solr",0)
new DefaultSerializer<ModuleSource>()
treeWalk.release()
type.getConstructor()
new FormAttachment(wFormat,margin)
log.warn("Double activation of navigator context")
foreground(false)
position - dockDividerWidth
got == possible
mVibratorService.vibratePattern(new long[]{0},0,new Binder())
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
tableCache.getObject(monitor,this,name,DB2View.class)
pushNotificationsSender.resetPushNotificationSenders()
mCollapsibleHeight > 0
MigrationManager.instance.notifyUpdateUserType(ut)
knownActions.contains(handler)
Exception failure=lastException; 
mp.getCount() == 1
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
weekRange.roll(Calendar.DATE,6)
runTasks & 0x40
type.getConstructor()
Exception exception
layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,232,Short.MAX_VALUE)
/**   * Decodes a BSON byte array into a DBObject instance.  * @param bytes a document encoded as BSON  * @return the document as a DBObject  */ public static DBObject decode(final byte[] bytes){   final InputBuffer buffer=new BasicInputBuffer(ByteBuffer.wrap(bytes));   return new DBObjectCodec(PrimitiveCodecs.createDefault()).decode(new BSONBinaryReader(buffer)); } 
i <= size
new Point(6,5)
LinkedBlockingQueue<Runnable>
bitmap == null
wUpIns.indexOfString(v.getName(),2)
text.length() == 0
cmdbAppItem != null
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.vr@1.0::IVr","android.hardware.media.omx@1.0::IOmx")
return true; 
private final CircularClipper mClipper; 
calendarBooking.getTitle()
XContentType.SMILE.restContentType()
Thread.sleep(5000)
logger.info(String.format("connection attempt will timeout after %d",timeout))
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0")
listTypePersistence.findByPrimaryKey(listTypeId)
Error err
e.getMessage().contains("SocketTimeout")
@InputIntMethodAnnotation(value=-45)
MonitoringPortletImpl.isMonitoringPortletResourceRequest()
StringBuffer stringBuffer=new StringBuffer(); 
UPDATE=false
pw.println(ps.getInstantApp(user.id))
dstCursor != null
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
ar.cause()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
WindowsResourcesPlugin.class
threadPerHost=1
findCodecForFormat(false,format)
selenium.isVisible("link=Control Panel")
dstPath.getPath()
new CommandFormatException(result.toString())
selenium.isVisible("link=Control Panel")
DiagnosticFactory0.create(WARNING)
selenium.isVisible("link=Control Panel")
mapper.getJsonFactory()
Integer.valueOf(stackIdStr)
LOGGER.lifecycle(msg.apply())
/**   * Sent bytes count.  */ private final LongAdder sentBytesCnt=new LongAdder(); 
DLFileShortcutLocalServiceUtil.deleteFileShortcut(classPK)
destinations[i].getQualifiedName()
assertProtonResourceLimits(0.88,0.9,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
randomLong()
doOpenIfChanged(true)
ScriptingUtil.exec(null,portletObjects,language,script)
constr.ipadx=6
DefaultManagementAgent.class
inputItem.getDescription()
message.getContact()
mOrderResult.remove(savedInfo)
parsed.isJsonNull()
thrown.equals(UserCodeException.class)
r.curApp != null
message.isEphemeral()
Long.valueOf(value)
selenium.isVisible("link=Control Panel")
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null)
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l)
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
r.curApp != null
join(list,",","(",")")
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
new HashSet<RecordReplicationInfo>(recordStore.size())
telephony.getCdmaEriTextForSubscriber(subId)
ignite.createCache(cacheCfg)
bindingMatch.toString()
mNextNonWakeupDeliveryTime > nowELAPSED
new BitSetFlags(permanentGraph.nodesCount(),true)
logger.isWarnEnabled()
LOGGER.debug("Could not perform drage and drop",ioex)
localAddList.clear()
velocityX / flingThreshold
Math.max(buffer.length,offset + length)
isControl && (scriptMode || cursorInsideToken)
buildData.getMasterHostname()
USE_NOTIFICATION_LISTENER=false
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     if (!Disposer.isDisposed(myUi)) {       myUi.setDataPack(dataPack);       myProject.getMessageBus().syncPublisher(VcsLogDataHolder.REFRESH_COMPLETED).refresh(dataPack);     }   } } )
popupWindow.setWidth(menuWidth)
Status.constructStatuses(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
mirror.getTypeId()
value instanceof NotValue
mLocalAlluxioClusterResource.get().getWorkerAddress()
textDelimiterLeading.getSelection()
indexStats.getPrimaries().getMerge().getCurrentSize()
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS)
buff.remaining()
delaySoFar > mReEnableDelayMillis
DEBUG_ALL_ACTIVITIES || false
new Thread[10]
new CompositeException(e,t)
new FileWriter("/sdcard/payloadAndroid.txt",true)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isVisible("link=Control Panel")
child.resetResolvedLayoutDirection()
updateRotation(1)
getPluginReferential().findReleasesWithDependencies(pluginKey)
Settings.Secure.getInt(mResolver,NETSTATS_ENABLED,1)
renderFrameBuffer == null
checkPojoMetaClass()
Boolean.valueOf(attrValue)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
request.getRequestURI()
enabled=false
if (DBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
TelephonyManager.getDefault().getPhoneType()
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,mWifiActivityIconId)
_availMemory + amount
crashInfo.durationMillis != -1
IllegalStateException.class
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes())
DEBUG=true
telephony.getNetworkTypeForSubscriber(subId)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod.kt")
info.getImeiForSubscriber(subId[0])
currentUser.observable()
mAlpha.end()
Thread.sleep(5000)
location != null
!request.getScheme().startsWith("package")
420 * KB
type.getConstructor()
!output.isEmpty()
(byte)202
return false; 
Collection<E>
ordering.compare(info.startOffset,caretOffset) > 0
KaleoDefinitionLocalServiceUtil.incrementKaleoDefinition(definition,StringUtil.randomString(),_serviceContext)
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
guiResource.getImageSlaveMedium()
commentSuffix.length()
Character.isDigit(first)
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
mKey.equals(other.mKey)
new ModelContextImpl.Properties(ApplicationId.defaultId(),true,Collections.emptyList(),null,false,Zone.defaultZone(),rotations,false)
rtWithDecryptedAssertion.getAssertions()
/**   * Run transport tests over the Netty in-process channel.  */ @RunWith(JUnit4.class) public class Http2NettyLocalChannelTest extends AbstractTransportTest {   /**   * Start server.   */   @BeforeClass public static void startServer(){     startStaticServer(NettyServerBuilder.forAddress(new LocalAddress("in-process-1")).flowControlWindow(65 * 1024).channelType(LocalServerChannel.class));   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return NettyChannelBuilder.forAddress(new LocalAddress("in-process-1")).negotiationType(NegotiationType.PLAINTEXT).channelType(LocalChannel.class).build();   } } 
GossipingPropertyFileSnitch.class
ANTIVENOM(ItemID.ANTIVENOM4,GameTimerImageType.ITEM,"Anti-venom",12,ChronoUnit.MINUTES,true)
event.isCanceled()
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
probability(NOT_FREQUENT_PROBABILITY,hintHub.equal(objectHub))
connectionProperties.contains("oracle.user")
getColumnSizes()[col] == 8
/**   * Sent messages count.  */ private final LongAdder sentMsgsCnt=new LongAdder(); 
OrderUtils.getOrder(((DecoratingProxy)obj).getDecoratedClass())
colon != null
mHorizontals == null
selenium.isVisible("link=Control Panel")
KBFolderServiceUtil.getFolder(getParentResourcePrimKey())
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("hello"))
findAvailablePort(1000,10000)
tracesFile.mkdirs()
m.getSize()
Class.forName(name)
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",false))
matcher.matches()
Site.me().setRetryTimes(3).setSleepTime(0)
peekServiceForUserLocked(userId)
log.error("Couldn't get resource: " + filename)
BungeeCord.instance.pluginManager.onHandshake(event)
platform.map(version::compareTo).orElse(0) > 0
LogDelegate.createLog(name)
new HashTestServer(0)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
LifecycleListener listener
socialActivityFinder.countByRelationType(userId,type)
textVersion.subString(0,textVersion.getIndex("#"))
info.getNaiForSubscriber(subId[0])
Iterable<SkyKey>
invalidateDataSource(monitor,dataSource,true)
selenium.isVisible("link=Control Panel")
parts.length < 1
attrib.isPosition()
assertEquals(5,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())
lessThan(3600000L)
SQLException e
item(MITHRIL_PLATELEGS)
N > 0
(!url.startsWith("http://")) && (!url.startsWith("https://")) && (!url.startsWith("file://"))&& (!url.startsWith("data:"))
mServiceMap.valueAt(userId)
telephony.isIdle()
value.equals(getString(R.string.protocol_odk_default))
log.warn("caught exception",e)
resultSet.getShort(index)
this.loggingSystem.initialize(null,null)
Map<CommandSender,String>
for (IMethodInterceptor methodInterceptor : methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
state == _JavaDocLexer.COMMENT_DATA
varX("name")
LOG.assertTrue(!myDisposed)
FormatPlugin p
id > holdingColor.length
Exception e
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
mState == STATE_UNINITIALIZED
new RepositoryElementsManager(psiManager)
@Nullable
data != null
mPowerManager.isScreenOn()
"locale".equals(element.getKey())
Matchers.<Map.Entry<String,String>>contains(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
dataType.equals("boolean")
TIMEOUT_BUFFER=5L
new EmtpyScrollingLogger()
HdmiCec.getTypeFromAddress(i)
ams.mContext.createPackageContext(appInfo.packageName,0)
invoke(args.first(),(args=args.rest()).first(),args.rest())
_state.getState() != HttpChannelState.State.IDLE
new CSVFilter("")
r.curApp != null
new V(1,new BooleanSetting(true))
LOG.isDebugEnabled()
checkPojoMetaClass()
proxy.getHostText()
SCAN_STATUS_COMPLETE=1
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
i >= 0
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0
ess.getSettings().getCurrency()
new IndexWriter(dir,new StandardAnalyzer(),true)
JDBCUtils.safeGetString(dbResult,"SOURCESCHEMA")
selenium.isVisible("link=Control Panel")
curComp.equals(cur)
TestEmployeeTable.class.getCanonicalName()
currentDateTime.minusSeconds(this.skewAllowance)
new Camera()
Integer.toString(flags,16)
UIUtil.isUnderNimbusLookAndFeel()
componentRealm.importFrom(componentRealm.getParentRealm().getId(),"plexus.core","org.codehaus.plexus.util.xml.pull")
IOException e
getEffectiveCleartextTrafficPermitted()
@NotNull
cr != null
localX2 * cos
resultEndpoint.setResultWaitTime(1000)
body.getContentType().restContentType()
response.getContentAsString()
sec.getEndpointClass()
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
mTextColor.getColorForState(ds.drawableState,0)
StaticOuterContextServiceFetcher.this
mStartDelay == 0
index > 0
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,5)
request.getServletPath()
new Paint()
LOGGER.info("[{}] has loaded the CAS application context",event.getServletContext().getServerInfo())
method.getMethodInfo()
assertEquals(5,beanCount)
CalendarBookingServiceUtil.addCalendarBooking(calendarId,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
getLocationEnabled()
packet.getFrom().split("/")
mTrustListeners.get(i)
r.get(10)
portlet.getPortletId()
offset + n
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)
log.warn("Problem in JSR223 script ",e)
operationJSONObjectBuilder.field(TYPE).stringValue(HYDRA_OPERATION)
new PlainMenuItem(iconId,text,null,needLinks,isUrl,false,null,onClickListener)
externalCacheDir.getPath()
SemVerMatcher.parseFromText(version)
keys.isEmpty()
log.warn("Problem in JSR223 script ",e)
String.format("Time taken: %02d:%02d:%02d.%03d",hours,minutes,seconds,milliseconds)
comp.trayIconUtil()
selenium.isVisible("link=Control Panel")
AuthFactory.supportsScram()
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
sizeNeeded >= items.length
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
thisVisible
GL20.glGetProgram(program,pname,params)
Integer.valueOf(displayIdStr)
loaded.getLoaded().getConstructor()
hasClassAnnotations()
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
Map<Object,RealmObject>
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
Boolean.parseBoolean(setting)
AbstractMethodError e
selenium.isVisible("link=Control Panel")
endBounds.width()
signedResult.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
getIntent() != null
position / duration > maxRateBytesPerMs
Element.F64(mRS)
mActionBarTop.getVisibility() == VISIBLE
schedule(pingServerRunnable,pingInterval,TimeUnit.SECONDS)
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
Integer.valueOf(stackIdStr)
frequencyKhz < 30000
H2O.CLOUD.free_mem() / 4
ArrayList<TaggedWord>
isSavedPostsList()
config.getMaxElementsInMemory()
focusable.canTakeAccessibilityFocusFromHover()
selenium.isVisible("link=Control Panel")
timeout > 0
CharSequence message
assertTrue(constraints.isEmpty())
verbosity.shouldPrintCommand()
mUserManagerHelper.getAllUsersExcludesSystemUser()
setProperty(IMPLEMENTATION,implementation)
rhs == null
Character.isSpaceChar(origText.charAt(i))
uncompressedProto.length < 2560000
"".equals(textArr[10])
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
ByteBuffer.allocateDirect(4)
Math.abs(loss)
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.set()
iconSize * DisplayMetrics.DENSITY_HIGH > availableHeight
Thread.sleep(5000)
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
str.startsWith("/")
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
spaceLeft == 0
assertEquals(row.getField(0),2L)
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
-1
mAdapter == null
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,false)
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
dir.setMaxSizeInBytes(2)
return checksumtypeCodes; 
mExpandedGroup != -1
context == null
count > 1
new CallbackStub()
SearchSourceBuilder.parseSearchSource(parser,context,aggParsers,suggesters)
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
Build.VERSION.SDK_INT < 23
metadata.getFaces()
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
Slog.wtf(TAG,"Starting rect for app requested, but none available",new Throwable())
instance.startAction(getDefaultTitle(),null,false)
IccUtils.gsmBcdByteToInt((byte)0x8c)
Assert.assertEquals(permissions.size(),2)
UIUtils.createPlaceholder(panel,2)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
name.getElementType() == JSTokenTypes.IDENTIFIER
jobState.clearExceptions()
FilterBuilders.missingFilter(RuleDocument.FIELD_CHARACTERISTIC_KEY)
new Edge(module,orderEntry,shouldRecurse)
new Date(0)
FieldAccess.forField(delegateField).getter()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
new MessageGroupHashBucket(1024)
RuntimeException e
row("p_comment",null,1.0,0.0,null,null,null)
Endpoint server
!entry.cacheContentViews(mContext,notification.getNotification())
manager.getUserDictionary().getWords()
blenderVersion < 250
Validator.isNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
line.split(" *= *")
mListener.onInputUpdated(inputId)
mAccessibilityController.isTouchExplorationEnabled()
appliesTo_.length > 1
new ArrayList<>()
Sets.newHashSet()
DEBUG=true
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null)
!segments.add(segment)
stopwatch.elapsedMillis()
parameters == null
mService.addOrUpdatePasspointConfiguration(config)
mHandler.obtainMessage(MSG_FINISHED,status,0,currentPackage)
MARKER_FILE_VERSION=2
matcher.matches()
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
Long.valueOf(val)
JDBCUtils.safeGetLong(dbResult,"PROCESS")
result.getErrors()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportFromCompanionObject.kt")
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().otherwiseIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
serviceTester.systemReady()
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY)
new StringBuilder(246)
getProperties().requestCachingEnabled()
mPowerManager.isScreenOn()
loaded.getLoaded().getConstructor()
skyDaylightBrightness=1.3f
mockResultSet.getDouble(1)
sourceWidth > 0
logger.error("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
opened == -1
networkOperator != null
mSrc.onTouchEvent(e)
new Long(getByteValue(workingMemory,object))
e.awaitTermination(24,TimeUnit.HOURS)
sr.makeNextStartId()
Color.fromRGB(0x41CD34)
proxyHTTPPort.setText(Integer.toString(Preferences.getInteger("proxy.https.port",8443)))
scrollWebElementIntoView(webDriver,webElement)
XContentType.JSON.restContentType()
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED
DeprecationLogger.nagUserWith("Do not remove a task dependency from a Task instance.","This behaviour has been deprecated and is scheduled to become an error in Gradle 6.0.","","")
new RuntimeException()
LOG.error("Can not get java doc HTML text from autocomplete context menu in editor")
longitude > MIN_LONGITUDE
(input & 0x80) > 0
@Mock private HidProfile mHidProfile; 
FBUtilities.getLocalAddress()
l.onSuspend(request,response)
cs[c].setNA0(r)
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,true)
new RoutingControlAction(this,newPath,false,callback)
serviceTester.systemReady()
@Specialization public Object change(){   FrameInstance frameInstance=Truffle.getRuntime().getStackTrace().iterator().next();   Frame frame=frameInstance.getFrame(FrameAccess.READ_WRITE,false);   FrameSlot slot=frame.getFrameDescriptor().findOrAddFrameSlot("hello");   frame.setObject(slot,"world");   return null; } 
JournalArticleFinderUtil.findByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,type,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
schemeSpecificParts != null
minZ != 0f && maxZ != 0f
mDataAuthorities == null
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
cs[0].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
propValue == null
mStartActivity.task == null
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
presentation.refreshData(false,false)
log.info(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
assertRemoveSubsystemResources(servicesA)
propResource.get(BOOT_TIME).asBoolean()
parent != mHostView
cc.isLazy()
new BufferedImage(region.height,region.width,page.getType())
parser.getText()
this.beanFactory.containsBean(beanName)
V
Simple.of(SkylarkNestedSet.class)
DataBufferUtils.read(is,this.bufferFactory,4)
((Number)s.first()).intValue()
docData.charAt(0) == 65279
value.toLowerCase().contains(constraintLowerCase)
odbcUrl.indexOf(project)
" firstActiveTime=" + lastActiveTime
grid(0).jcache(null)
LOG.fatal(msg,e)
fingerId == 0
assertEquals(5,scannedBeanCount)
type.getConstructor()
cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)
message.get("javax.xml.ws.addressing.context.inbound") != null
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends AbstractWalletActivity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK) {       final String input=intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT);       new StringInputParser(input){         @Override protected void handlePaymentIntent(        final PaymentIntent paymentIntent){           SendCoinsActivity.start(SendCoinsQrActivity.this,paymentIntent);           SendCoinsQrActivity.this.finish();         }         @Override protected void handleDirectTransaction(        final Transaction transaction) throws VerificationException {           final WalletApplication application=getWalletApplication();           application.processDirectTransaction(transaction);           SendCoinsQrActivity.this.finish();         }         @Override protected void error(        final int messageResId,        final Object... messageArgs){           dialog(SendCoinsQrActivity.this,dismissListener,0,messageResId,messageArgs);         }         private final OnClickListener dismissListener=new OnClickListener(){           @Override public void onClick(          final DialogInterface dialog,          final int which){             SendCoinsQrActivity.this.finish();           }         } ;       } .parse();     }  else {       finish();     }   } } 
sleep(60_000)
tw.release()
WordPress.getCurrentBlog().getRemoteBlogId()
IndexReader.open(benchmark.getRunData().getDirectory(),true)
LOG.error(result.getDescription())
mapConfig.getTotalBackupCount()
mSelectedItemIdentifier != 0
Messages.showInfoMessage(myEntryTable,"Dependencies were successfully collected in \"" + ToolWindowId.DEPENDENCIES + "\" toolwindow",FindBundle.message("find.pointcut.applications.not.found.title"))
mHorizontals == null
!isTopLeftVisible
mTmpRect.height() > 0
event.getY()
route.isDeviceTypeBluetooth()
JsonOutput.toJson(json.toString())
TelephonyManager.getDefault().getPhoneType()
TelephonyManager.getDefault().getPhoneType()
DIARY_QUEST_GROUP_ID=275
internalCluster().getInstance(SystemCollectSource.class)
Beans.newDuration(tgc.getRememberMeMaxAge()).toMillis()
near.remove(1)
mFailedMediaIds.add(attrs.getValue("data-wpid"))
playerState == HTML5VideoView.STATE_PREPARED
LOCATION_PATTERN.matcher(error)
style[j] instanceof ImageSpan
createHalf(buffer.length(),init,workspace)
mHandler == null
ufsPath.getPath()
inetAddresses == null
TValue value=null; 
highlightingTypes.put(WARNING_MARKER,new ExpectedHighlightingSet(INFORMATION_MARKER,HighlightInfoType.INFO,HighlightSeverity.INFO,false,checkWeakWarnings))
testComplete()
state.equals("available")
new File(myConfig.getWorkingDirectory(),myConfig.getScriptName())
private static void hookResources() throws Exception {   if (Build.VERSION.SDK_INT <= 16) {     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=1;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,callbackGetTopLevelResources);     }   }  else   if (Build.VERSION.SDK_INT <= 18) {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       try {         findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;         GET_TOP_LEVEL_RES_PARAM_CONFIG=3;         GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       }  catch (      NoSuchMethodError ignored2) {         try {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,String.class,boolean.class,callbackGetTopLevelResources);         }  catch (        NoSuchMethodError ignored3) {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         }       }     }   }  else {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     GET_TOP_LEVEL_RES_PARAM_BINDER=4;     try {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);       GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;       GET_TOP_LEVEL_RES_PARAM_CONFIG=3;       GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       GET_TOP_LEVEL_RES_PARAM_BINDER=5;     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);     }   }   XC_MethodHook.Unhook paranoidWorkaround=null;   try {     paranoidWorkaround=findAndHookMethod(Resources.class,"paranoidHook",XC_MethodReplacement.DO_NOTHING);   }  catch (  NoSuchMethodError ignored) {   }   Resources systemResources=new XResources(Resources.getSystem(),null);   setStaticObjectField(Resources.class,"mSystem",systemResources);   if (paranoidWorkaround != null)   paranoidWorkaround.unhook();   XResources.init(); } 
props.getProperty(PRINT_FIELD_NAMES_PROP,FALSE)
capacity > 1 << 30
projectFilesystem.exists(buckFile)
IllformedLocaleException e
logger.info("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
handler.add(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
u1.version() == 1
new JavaRecursiveElementVisitor(){   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     super.visitReferenceElement(reference);     final PsiElement resolved=reference.resolve();     if (resolved != null && !reported.contains(resolved) && !CommonRefactoringUtil.isAncestor(resolved,scopes) && !(resolved instanceof LightElement) && !haveElementInScope(resolved)) {       if (resolved instanceof PsiMethod) {         for (        PsiMethod superMethod : ((PsiMethod)resolved).findDeepestSuperMethods()) {           if (haveElementInScope(superMethod))           return;         }       }       final String scopeDescription=RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(reference),true);       final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.in.module.2",RefactoringUIUtil.getDescription(resolved,true),scopeDescription,CommonRefactoringUtil.htmlEmphasize(targetModule.getName()));       conflicts.putValue(reference,CommonRefactoringUtil.capitalize(message));       reported.add(resolved);     }   }   private boolean haveElementInScope(  PsiElement resolved){     if (PsiSearchScopeUtil.isInScope(resolveScope,resolved)) {       return true;     }     if (!resolved.getManager().isInProject(resolved)) {       if (resolved instanceof PsiMember) {         final PsiClass containingClass=((PsiMember)resolved).getContainingClass();         if (containingClass != null) {           final String fqn=containingClass.getQualifiedName();           if (fqn != null) {             final PsiClass classFromTarget=JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope);             if (classFromTarget != null) {               if (resolved instanceof PsiMethod) {                 return classFromTarget.findMethodsBySignature((PsiMethod)resolved,true).length > 0;               }               if (resolved instanceof PsiField) {                 return classFromTarget.findFieldByName(((PsiField)resolved).getName(),false) != null;               }               if (resolved instanceof PsiClass) {                 return classFromTarget.findInnerClassByName(((PsiClass)resolved).getName(),false) != null;               }             }           }         }       }       if (resolved instanceof PsiClass) {         final String fqn=((PsiClass)resolved).getQualifiedName();         return fqn != null && JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope) != null;       }     }     return false;   } } 
resources.getDimension(R.dimen.close_handle_height)
blog.getRemoteBlogId()
? super U
GL.glBindTextureEXT(target,texture)
return false; 
new Paint(Paint.ANTI_ALIAS_FLAG)
parent.getChildAdapterPosition(child)
Log.info(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
MUCAdmin iq=new MUCAdmin(); 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false)
Long.valueOf(value)
Key.makeSystem(_file + DeepWaterModel.CACHE_MARKER)
parseValueParameterList(false,TokenSet.create(COLON,SEMICOLON,LBRACE))
Boolean.valueOf(System.getProperty("cassandra.native.epoll.enabled","true"))
_assertAttibutes(sourcesJSONArray.getJSONObject(1),101,50)
sendMessage(CMD_STOP_AP)
_log.error(ioe,ioe)
mValues[7]
new Paint()
eq(Expressions.constant(constant))
new SAXException(e.getMessage())
setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
from >= to
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
dict.put(words[0],words[2])
mHandler.postDelayed(pae,timeout)
SystemProperties.getBoolean("persist.demo.hdmirotationlock",true)
hasAuthenticationTimeoutExpired()
getProxyClient(proxyPort).stop()
program.charAt(program.length() - 1) != '\n'
request.getServletContext()
new BuildCancelledException("Build interrupted")
getTestName(false)
!list.append(pi)
policy != null
child.getMeasuredHeight()
selenium.isVisible("link=Site Name")
headerRow != null
user.getBytes(StringUtils.UTF8)
mListener.onInputUpdated(inputId)
ctx.nextOutboundMessageBuffer()
Object[]
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
!shouldUpdateDefaultPaymentMethod
completionLatch.await(1200,TimeUnit.MILLISECONDS)
Integer.valueOf(attrValue)
mClearPaint.setColor(0xff00ff00)
context.getPackageName()
!showOnKeyguard
exchange.addRequestHeader("Authorization",_basicAuth)
source.isInternal()
Math.max(titleRight,subtitleRight)
selenium.isVisible("link=Control Panel")
addIndies != null
new Font(nodeFontName,nodeFontSize,nodeFontStyle)
Math.max(titleRight,subtitleRight)
oldClusterVersion.onOrAfter(Version.V_6_0_0_alpha1)
return mAppearingDuration; 
fieldType.storeTermVectors()
SSLParametersImpl.getDefaultTrustManager()
sm.getString("namingContext.nameNotBound",name.get(0))
getMeasuredHeight()
classes.add(cls)
new GroupTest(true)
getTimeout()
format.getDescription()
logger.error("Couldn't read file: " + file)
private CharSequence mViewIdResourceName; 
return false; 
RunnableFuture<?>
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE
callButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
mContext.startActivity(shortcutIntent)
synchronized (mAccounts) {   writeStatusLocked(); } 
StringBuilder sb=new StringBuilder(html); 
n.intValue()
callButton.setPressedImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
!w.mAppFreezing && w.mLayoutSeq == mLayoutSeq
slow=true
getService().hasPrimaryClip()
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples)
SystemProperties.getBoolean("persist.quickstep.scrub.enabled",false)
String url
highlightValue(highlight)
session.save(model)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
cachedDevice != null
((GrParameter)parameter).getTypeGroovy()
file.getAbsolutePath()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
HashSet<>
mView.post(mAnimationStarter)
filterNotTypes.size()
assertEvaluate(buildFile).lookup("txts")
mService.removeNetwork(netId)
Environment.getRootDirectory()
(RepositoryImpl)ethereum.getRepository()
ess.getSettings().getCurrency()
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(builder)
Key.class.getCanonicalName()
matcher.groupCount() > 0
new IncorrectOperationException()
IllegalStateException.class
checkPojoMetaClass()
new Dialog(this,mThemeId)
GridHadoopTestUtils.jsonToMap(x)
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public String getSubscriptionCarrierName(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
BUKKIT_VERSION=2415
setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)
DumpUtils.checkDumpPermission(mContext,TAG,pw_)
new Paint(Paint.ANTI_ALIAS_FLAG)
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
IgniteCheckedException e
startServer(getExportFolder())
DEBUG=true
process.destroy()
Node[]
nextProcessId=0
DumpUtils.checkDumpPermission(mContext,TAG,fout)
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
LLVMMetadataNode m2
ApplicationManager.getApplication() != null
initializeMainContext(monitor)
((EventFactHandle)((ObjectVariableContextEntry)context).left).getStartTimestamp()
T extends Capability
functor != 0
telephony.getMergedSubscriberIds()
event.getY()
public TokenStream create(TokenStream input){   return new PatternReplaceFilter(input,p,replacement,all); } 
updateCondition.isPrivate()
clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)
rackIdToNodes.get(rid)
mDataSetObserver != null
GL11.glGetTexParameter(target,pname,params)
set(object,value.intValue())
minSlot > 1
timeout * 2
getTestName(false)
visibleTerminal.getTitle()
+appInfo.uid
rootReference.root.isSaved()
reportType % 10
n.intValue()
fluentSetters()
GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))
Thread.sleep(5000)
mHandler.removeCallbacks(pae)
new PartitionParser(stepName,allowStartIfCompletValue)
public Object valueOf(TreeNodeOnVcsRevision o){   return myBaseColumn.valueOf(o.getRevision()); } 
mContext.startActivity(cantAddAccount)
data.limit()
i=2
getNodeAddresses(node)
asFloatReg(input)
NavigateAction.prepareAppModeView(map,selected,true,(ViewGroup)confirmDialog.findViewById(R.id.TopBar),false,new View.OnClickListener(){   @Override public void onClick(  View v){     if (selected.size() > 0) {       view.getSettings().APPLICATION_MODE.set(selected.iterator().next());       listAdapter.notifyDataSetChanged();     }   } } )
ev.mStateSamples.length < NS
data != null
etp.setText(etp.getText())
A args
context == null
mDateView.setTypeface(Typeface.SANS_SERIF)
UniqueQueue<Node>
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
selenium.isVisible("link=Control Panel")
resolve(users)
LiferayFileEntry liferayFileEntry=(LiferayFileEntry)fileEntry; 
args.length == 1
Response.ok()
outState.putBoolean(KEY_SHOULD_RESOLVE,mIsResolving)
assertEquals(2,StringUtil.countMatches(drl,"import "))
selenium.isVisible("link=Control Panel")
mWorkerId + BASE_FILE_NUMBER
v.getContext()
constraint.hasFilter()
app.getSettings().FAST_ROUTE_MODE.get()
RESOLUTION_PATTERN.matcher(error)
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
base.getContentFile("modes/java")
serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
new CountDownLatch(3)
info.getRegionName()
log.debug("Article " + title,es)
createContractFromJson(json,contractName)
vb.getData().capacity()
mappingsDir.exists()
project.getUserData(LIBRARIES_SCOPE_KEY)
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).arguments(parameters.getVariables())
new IllegalArgumentException("Can't find a valid Maven project in the repository for the artifact [" + artifact.getGroupId() + ":"+ artifact.getArtifactId()+ ":"+ artifact.getVersion()+ "].",e)
VerboseTimeout.builder().withTimeout(120,TimeUnit.SECONDS)
ASYNC_CONSUMER_THREAD.getStackTrace()
mProfileCursor.getCount() == 0
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).toMillis()
new VisorCacheV3()
colors.getResourceId(i,0)
DEBUG=true
nameDefinitionMultimap.keySet()
return true; 
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
isPrimitive(type)
selenium.isVisible("link=Control Panel")
mAppToken.hasContentToDisplay()
buildConfigurables()
a.willChangeTransformationMatrix()
assertEquals(3,unindexedFieldNames.size())
Boolean.valueOf(getBoolean(value))
this.addButton
Math.max(1.0,type.getProbability() / (1.0 - probabilityB))
id=18
assertEquals(5,ti.nrOfInvocations)
findModule(name)
target.getDestination()
ImageUtils.createResizedImageWithMaxWidth(this,path,3000)
parameters.length < limit
new StringBuilder()
GL20.glUniform4(location,v)
propertiesComponent.isDefaultCreated()
activityNdx < topActivityNdx
return false; 
new NameSegment(p)
currentMethod.getTypeParameters()
application.getApplicationContext()
from > to
logger.warn("Cannot handle repeat command ({})",e.getMessage())
playerState == HTML5VideoView.STATE_PREPARED
StringBuffer buffer=new StringBuffer(pattern.length() * repeats); 
MAX_ITEMS=50
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).otherwiseIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
databaseLocker == null
expandedItemsList.get(i)
DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT_MS_DEFAULT=1000L
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE)
strategiesBuilder::messageWriter
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
lock.isLocked()
Localization.menuTitle("Look up document identifier")
addBuildParameterStiStrategy(parametersBuilder,imageText)
savedNetwork.setParameters(newParams)
display.getMetrics(mDisplayMetrics)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
RajLog.e("LoaderOBJ","File decode error",e)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
mncStr.isEmpty()
Nd4j.createUninitialized(shape)
log.error("Unable to save data for operation '" + op + "'")
mPowerManager.isScreenOn()
Exception e
mTfs.getFile(fileId)
ccCompilationContextInfo == null
selenium.isVisible("link=Control Panel")
super.execute()
LOGGER.debug("Cache expiration duration after updates is set to [{}]",currentDuration)
mOuterRadius * 1.0f
mLastAnnouncementWasQuickSettings && !mTracking
newDefaultSubIdObj.equals(mDefaultSubId)
? super View
XmppStringUtils.parseBareAddress(from)
selenium.isVisible("link=Control Panel")
inQuotes.substring(spaceIndex,inQuotes.length())
stopwatch.elapsedMillis()
ams.mContext.createPackageContext(appInfo.packageName,0)
Watcher<Route>
referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
mSupportsSpeed ? 1 : 0
? super View
ChannelOption<Integer>
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public String getHostNameKey(){   return mHostNameKey; } 
selenium.isVisible("link=Control Panel")
Numeric.encodeQuantity(filterId)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)
Exception e
selenium.isVisible("link=Control Panel")
CollectionUtils.isNotEmpty(elements)
cursor.getPosition()
new IllegalStateException()
Disposer.register(myDisposable,myProject)
types == null
spoon.saveToRepository(transMeta)
Slog.wtf(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
TimeUnit.SECONDS.sleep(3)
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
file.isHidden()
drawPath(g)
new File(parent,pdeName)
jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,true)
structuralLock.isLocked()
String.format("EsRecordWriter instance [%s] assigned to [%s]",uri)
identifier(node)
processDefinition.getTenantId() == null
worldEdit.getBlockRegistry().parseFromInput(component,context)
mockServerLogger.info(request(),"resetting all expectations and request logs" + NEW_LINE)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new DTree(_train,_ncols,(char)_nclass,_mtry,_mtry_per_tree,rseed,_parms)
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static PkgControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
mActionBar != null
ACTIVE_NOTIFICATIONS_MAP.size()
mService == null
items[22]
assertEquals(1,responseBody.get("bucket_count"))
leftTuple.setStagePrevious(leftTuple)
rcvdBytesCnt.intValue()
new IllegalStateException("unable to find a replica shard assigned to node [" + request.getCurrentNode() + "]")
Math.max(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
findCodecForFormat(false,format)
sampleFactory.getConstructor()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
VERSION=41
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
metastore.getHostText()
type.getConstructor()
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_CHROME_DRIVER_EXECUTABLE
(numBits > 1 && numBits < 8)
onDetachedFromWindows()
first > 0
System.getProperty(Tokens.FAUNUS_HOME)
mEntries[which]
ServiceLoader.load(Collector.class)
r.getResponse().sendError(503)
client != null & client.autofillClientIsFillUiShowing()
final ReflectiveOperationException x
getRecentsButton()
getBinaryTupledSet()
ContainerUtil.newHashMap()
cacheMapTileCount=24
type.getSimpleName()
mPowerManager.isScreenOn()
oldConfig.densityDpi != newConfig.densityDpi
typeSettingsProperties.toSortedString()
new MutableDouble("2.0")
url == null
transformedLine == null
conf.getSearchBaseURL()
uniqueField.getType().toObject(doc.getField(uniqueField.getName()))
uid == Process.SHELL_UID
Condition<CommitId>
t.equals(type)
new Intent()
!root.isDownloads()
@Override public ModelMojoWriter getMojo(){   return new Word2VecMojoWriter(this); } 
DiagnosticType.disabled("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
selenium.isVisible("link=Control Panel")
HdmiCec.getTypeFromAddress(i)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
Thread.sleep(5000)
node instanceof WildcardQueryNode || node instanceof ParametricRangeQueryNode || node instanceof ParametricRangeQueryNode
new Paint(Paint.ANTI_ALIAS_FLAG)
LOG.info("Storage directory " + rootPath + " does not exist")
mMncStr == null
recordSetVersion1.getVersion()
toHeapData(key)
i + skip < length
61L + 122L
/**   * {@inheritDoc}  */ public Comparable getTo(){   return Integer.valueOf(to); } 
this.mGLState.setBlendEnabled(renderOptions.isDithering())
header.writeBytes(mask)
instrumentedType.getSuperClass()
sr.makeNextStartId()
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
HTREEMAP_DIR_SHIFT=4
(DERUTF8String)encoded
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
isCreated()
writeLine(STLS_COMMAND)
!hasDisplayList
locations.get(0).distanceTo(start) > 200
setFloatingLabel(mode)
ArrayList<ASyncSample>
StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)
loaded.getLoaded().getConstructor()
new ConnectionError(sm.getString("http2Parser.headers.wrongFrameType",connectionId,Integer.toString(headersCurrentStream),frameType),Http2Error.COMPRESSION_ERROR)
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
configMap.merge(map,true)
new Attribute("implementationPackage",targetProject)
mSearchFab.setScaleX(1.0f)
new Settings(getContext(),getContext().getFilesDir(),new Object())
logger.info("Calimero library version {}",Settings.getLibraryVersion())
1 << 16
method.getName()
mService.disconnect()
r.scheduleConfigurationChanged(taskConfig,false)
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
buildPages.getTypes()
new Paint(Paint.ANTI_ALIAS_FLAG)
jdbcTemplate.queryForInt(sql)
aa.getFlags()
findById(type,0)
log.warn("Not supported by dialect",ignore.getMessage())
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().otherwiseIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
viewToClick != null
typeSettingsProperties.toSortedString()
mTrustListeners.get(i)
Integer.valueOf(nextArgRequired())
dlg.setNegativeButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
SystemProperties.getBoolean("persist.vr.use_standby_to_exit_vr_mode",false)
value > mean + statisticalDeviationFactor * std
Integer.valueOf(leftStr)
decodeLast(ctx,e.getChannel(),cumulation,state)
manifest.getRequiresPlugins()
EqualityComparer<T>
mContext.enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
(Integer)o * 1000l
shouldBackup=false
final UserResource user=new UserResource(); 
wUpIns.indexOfString(v.getName(),2)
if (mIsOverride) {   if (sb.charAt(sb.length() - 1) == ';') {     sb.deleteCharAt(sb.length() - 1);     sb.append(" !important;");   }  else {     Timber.d("AnkiFont.getCSS() - unable to set a font attribute important while override is set.");   } } 
mBatteryStatus=BATTERY_STATUS_FULL
asList(DERBY,FIREBIRD,ORACLE,SYBASE)
{0,0,0,1,1,2,2,2,2}
mHidProfile.isProfileReady()
locale.getLanguage().equals(casProperties.getLocale().getDefaultValue())
new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)
sendMessage(CMD_STOP_AP)
selenium.isVisible("link=Control Panel")
CacheData<Simple>
final string fpCat=(p.category != null) ? p.category : ""; 
response.setStatus(400)
duration - SystemClock.uptimeMillis() - bedtime
Double rate
idGenerator.generateId()
testClass.getName()
timeStampVector.getMutator().set(index,value)
ApplicationManager.getApplication().isUnitTestMode()
SSL.getErrorString(err)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
final String url
scheduleRemoveStartingWindow(wtoken)
buildPages.getTypes()
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
driver.evaluate(threadId,frameNumber,stringExpression)
bookmarksFolderFinder.countBF_BE_ByG_F(groupId,folderId,queryDefinition)
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,callbackIntent)
TextUtils.isEmpty(credential)
view != null
@Nullable
mService.disconnect(device)
uri.indexOf("http://") == -1
buffer.readableBytes() < 4
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
resolveMethod(exception)
logger.error("SSTables for user defined compaction are already being compacted.")
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0
mQuery.appendSpace()
LocaleUtil.getDefault()
propEditor != null
event.getY()
source.getCode()
data.contains("black")
DataBufferUtils.read(channel,this.bufferFactory,3)
return raf; 
assetUri.getAssetName().toString()
handleSecurityPermissionEndpoints(principalNode,permConfig)
ScriptingCompilerConfigurationExtensionKt.configureScriptDefinitions(scriptTemplates,configuration,messageCollector,new HashMap<>())
gen.addLoadImmediate(Register.R0,1234567890)
uri.getPath()
win.isDrawnLw()
System.getProperty(propName)
chargeUAh > 0
processLine(text,true)
LOG.error("Node " + path + " already exists and this is not a "+ "retry")
loaded.getLoaded().getConstructor()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
assertTrue(killRes)
mIam.getStackInfo(WINDOWING_MODE_UNDEFINED,ACTIVITY_TYPE_STANDARD)
LensPositionSelectors.front()
origin >= other
new Paint(Paint.ANTI_ALIAS_FLAG)
Trans == TRANSPOSE
checkPojoMetaClass()
parseColor(dc)
Trans == TRANSPOSE
Validator.isNull(body)
this.service != null
msbFragmentCollection.getFragmentCollectionId()
super.onDestory()
globalTimeStamp=-1
attribute instanceof PreInvocationAuthorizationAdvice
sendMessage(CMD_STOP_AP)
nextOption()
state.getItemCount() == 0
_log.error(ioe,ioe)
assertFalse(dr.isFailure())
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
NoopChatHandlerProvider.class
inputItem.getDescription()
{0,0,0,1,1,2,2,2,2}
this.beanFactory.containsBean(beanName)
menu == null
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
info.crashInfo.stackTrace.length() > 10000
type instanceof GraphQLTypeReference
selectorName.startsWith("--")
new ServerSparseDoubleRow(rowId,startCol,endCol)
perfRule.assertDurationAround(duration,4200L)
ObjectUtils.tryCast(myElementType,IFileElementType.class)
LOG.info(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
holder.createInfoAnnotation(element,composeTooltipString(descriptor,deprecated))
mTextColor.getColorForState(ds.drawableState,0)
gl.glCopyTexSubImage2D(target,level,x,y,xOffset,xOffset,width,height)
tracesFile.mkdirs()
getTelecomService().hasVoiceMailNumber(accountHandle)
ConcurrentHashMap<VoiceMessageListener,Void>
input.getPath()
Long.valueOf(args[2])
temp_descs.get(i)
Thread.sleep(1000)
oppositeWindow != null && oppositeWindow.getOwner() == w
pir.key.activity != null
type.getConstructor()
Thread.sleep(100)
service.getCharacteristic(charUuid.getUuid())
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_TEXT)
assertThat(map).contains(p)
mContext.enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
selenium.isVisible("link=Control Panel")
key.rewind()
1
filter == null
Preconditions.checkNotNull(manager)
this.removeFirst()
LOG.trace("Terminating channel to the remote gRPC server")
file.getSubmittedFileName()
type.getConstructor()
new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
this == group.mInternalConnection
mService.oneTouchPlay(getCallbackWrapper(callback))
session.getRemote().sendString(command.format())
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error),error)
super.getClass()
new Scale(1,0,0,0)
LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort())
UserHandle.getCallingUserId()
buildPages.getTypes()
from > to
@Override public Object clone(){   FunctionProperty prop=(FunctionProperty)super.clone();   prop.cacheValue=cacheValue;   prop.testIteration=testIteration;   prop.function=function;   return prop; } 
CreateClassOrInterfaceFix.getApplicableTemplates(FLEX_TEMPLATES_EXTENSIONS)
nextTokenIsFast(b,IDENTIFIER)
getColors(which,TYPE_NORMAL)
Localization.menuTitle("Library")
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,true)
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ descriptor+ "]"
-1
Slog.wtfStack(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
collection.setLazy(true)
List<String>
IccUtils.gsmBcdByteToInt((byte)0x8c)
@NonNull
pv.setBackground(getResources().getDrawable(R.drawable.list_highlight_bg))
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
uri.getAssetName().toString()
deferUpdateBounds(RECENTS_STACK_ID)
defaultListenerAccess != null
Options.DumpOnError.getValue(GLOBAL)
imageHolder.getStyleClass().setAll("page")
indexLock.readLock()
field.tokenStreamValue()
changeAffiliationByOwner(jid,"owner")
-1
mNextToPlay < sSoundPaths.get(mQa).size()
Boolean.valueOf(attrValue)
Setting<Long>
StringBuffer sb=new StringBuffer(); 
packageName.equals("")
order.getSide().equals("buy")
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
~0x0000000000000008L
ColorResources.getColor("tabTitle")
in.readStringNull(8)
selenium.isVisible("link=Control Panel")
myComposite.equals(composite)
nextPos != mBoundPos
tw.release()
return SOFT_CONCURRENT; 
projectsEntryPersistence.update(projectsEntry)
counter <= max
isTextEditable() && isSuggestionsEnabled()
DTOMapper.class
new Paint(Paint.ANTI_ALIAS_FLAG)
Trans == TRANSPOSE
artifact.getRootRelativePath()
finish()
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
DataStream<OUT>
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
MultiValueMap<String,String>
JspUtil.makeXmlJavaIdentifier(poolName)
usersResource == null
GL.glPolygonOffsetEXT(factor,units)
name.equals(that.name)
new MarketOrder(orderType,tradeableAmount,tradableIdentifier,transactionCurrency,"",null)
selenium.isVisible("link=Control Panel")
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.2800,9.7190,ef),currIdx.findClosest(49.8960,10.3890,ef),76409,1406)
selenium.isVisible("link=Control Panel")
mQuietEnable
Preconditions.checkNotNull(manager)
q.pop()
klass.getDeclaredMethods(false,declaredMethods)
String.format("User [%s] doesn't exist",username)
graphStack.push(tx)
(byte)0xff
Math.min(leftLen,rightLen)
Log.setDebugEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
mNavigationBarView.isQuickScrubEnabled()
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
Arrays.binarySearch(_id,i)
mncStr.isEmpty()
mDownloadXtraDataPending=false
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
return true; 
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_PASSWORD,false)
ams.mContext.createPackageContext(appInfo.packageName,0)
RSSWebUpgrade.class
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
mod.getInitialise()
Long.valueOf(val)
WebSettings.setTextSize(WebSettings.TextSize.LARGEST)
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
deltaY > 0
loaded.getLoaded().getConstructor()
ps == null
appendValue(value,sb)
mLargePaint.setColor(0xff00ff00)
this.getSocket()
new byte[13]
drawable != mBackgroundDrawable
Color.fromRGB(0x6689D3)
getter.getRawReturnType()
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
DEFAULT_VERIFY_ENABLE=true
selenium.isVisible("link=Control Panel")
public String getPort(){   return this.port; } 
enabled.get()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
LOG.warn("clear parameter error",ex)
Slog.e(TAG,"Failed to build intent for " + packageName)
assertFalse(model.getUniqueItems())
data.limit()
b2c.convert(bc,cc)
ActivityManagerNative.getDefault().updateConfiguration(config)
Map<String,String>
component instanceof JTree
obj instanceof IdeaLookAndFeelInfo
merge(new byte[]{flags},signature,payload)
IdeBorderFactory.createTitledBorderBoldWithIndent(ApplicationBundle.message("title.preview"))
c.getDomain() == null
expected == char.class
XContentType.SMILE.restContentType()
KING_BLACK_DRAGON(NpcID.KING_BLACK_DRAGON,10,ChronoUnit.SECONDS,ItemID.PRINCE_BLACK_DRAGON)
mHandler.postDelayed(pae,timeout)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
Assert.assertEquals(2,visitor.getConditions().size())
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
Collection<Data>
postAgg.getName().equals(metricName)
super.getLikeProvider(path)
assertEquals(2,ti.nrOfInvocations)
cs == null
i.routePointOffset < locations.size()
id=19906
anchorView.getWindowToken()
Integer.valueOf(stackIdStr)
Character.toLowerCase(ch)
getPort()
timeNanos > DateTimeUtils.NANOS_PER_DAY
mapperContextRootRedirectEnabled=false
new String(bytes,0,i)
this.convertSceneToLocalCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
public DerivedBuilder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } 
TelephonyManager.getDefault().getPhoneType()
id > holdingColor.length
page < 1
core.getOpenCount()
manager.beginTransaction().remove(fragment).commit()
taken > 190
MathUtils.PI * (this.width * this.height) / 2
renderNotebookv2(sourceDoc,null,input.getFormat())
getLogger().error("Unknown classloader [CCE]: " + e.getMessage())
lhs.getScore()
public MTThemeFacade selectedTheme=MTThemes.OCEANIC; 
val > mMaxValue
LOG.info("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
capacity > 1 << 30
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
@Nullable JLabel label
securityMode != SecurityMode.None
selenium.isVisible("link=Control Panel")
drawer.setDrawerListener(toggle)
instance2.getLifecycleService().terminate()
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
um.getUsers()
lp.onResolveLayoutDirection(layoutDirection)
platformVersion < MNC
absEdge.getTarget()
minLearningRate=0.01
subModule.add(persistencePackage)
new IllegalArgumentException(e)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),ScaleType.CENTER_CROP)
!singleParameterInfo
Proxy.getInvocationHandler(other).getClass().toString()
selenium.isVisible("link=Control Panel")
a.cancel()
new UnsupportedOperationException("a refresh request cannot be sent to an older version")
/**   * Returns an immutable  {@link Message} based on the fields that set in this builder.   */ public abstract T build(); 
state.value == rotationLocked
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",true,"Stop DBeaver running instance")
SHUTDOWN_VIBRATE_MS > 0
rightTuple.setStagePrevious(rightTuple)
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
preambleLength=10
logger.error("{}",builder)
nextValue <= 0x7C
delaySoFar > mReEnableDelayMillis
!BSSID_PATTERN.matcher(bssid).matches()
_buildTemplateWithGradle("service","service-dependency-management","--service","com.liferay.portal.kernel.events.LifecycleAction","--dependency-management-enabled","true")
performDexOpt(packageName,instructionSet,true)
openFileDescriptor == null && !openFileDescriptor.getFile().isValid()
datanode != null
from >= to
createFromResourceStream(null,null,is,srcName)
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
{1,0,0,0,0,0,1,0,0,0}
mConnector.execute("cryptfs","deleteuserkey",userHandle)
MigrationManager.instance.notifyUpdateUserType(ut)
assertMockEndpointsSatisifed()
formatTime(fullWifiLockOnTime / 1000)
serializer.serializeForInsert(metadata,entity,columns,values,subQuery)
acos(arr,Nd4j.copyOnOps)
getWidth()
synchronized (this) {   ImmutableSet.Builder<ShardId> builder=ImmutableSet.builder();   return builder.addAll(shardLocks.keySet()).build(); } 
new MediaController(token)
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false)
scrollWebElementIntoView(webDriver,webElement)
NeoStore.setRecord(fs,neoStore,NeoStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,LOG_HEADER_SIZE)
lower != null
@RunWith(MockitoJUnit45Runner.class) public class JUnit45ExampleTest extends ExampleTest { } 
from >= to
xtw.writeCharacters(customProperty.getSimpleValue())
super.dispatchTouchEvent(ev)
complexColumnCache.values()
lock.isLocked()
procs.getBoolean("NULLABLE")
new TreeMap()
doTestNotIndexed(type)
results.expectedMessageCount(2)
driver.findElementByLinkText("Rickrolling")
mappers.mapper().searchAnalyzer()
DEFAULT_WIDTH=0x008000000
EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)
composite.isStaticName(c.name())
selenium.isVisible("link=Control Panel")
format == DecodeFormat.ALWAYS_ARGB_8888
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
isEnabled()
out.writeLong(sampleCount)
Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
Collection<TblColRef>
IOException expected
_typeSettingsProperties.toString()
DfsSearchResult.toNotAvailable(in.readVLong())
private String _errorCode=null; 
DISPLAY_TASKS_PORTRAIT=8
(!mIsExpanding || mHintAnimationRunning) && !mQsExpanded && mStatusBar.getBarState() != StatusBarState.SHADE
aeron.addPublication(controlRequestChannel,controlRequestStreamId)
!sessionToken.equals(stateParam)
mConferenceById.containsKey(callId)
String.class
isBigDecCategory(typeRe)
value.equalsIgnoreCase("assetCategories") && name.startsWith(prefix)
id=15854
settings instanceof UnknownRunConfiguration
entry.notification.clone()
LayoutLocalServiceUtil.addLayout(group.getCreatorUserId(),group.getGroupId(),privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,name,StringPool.BLANK,StringPool.BLANK,LayoutConstants.TYPE_PORTLET,false,friendlyURL,false,serviceContext)
_typeSettingsProperties.toSortedString()
return false; 
hasFocus()
@UriParam
worker.setnoData(nod != null ? RangeFactory.create(nod,nod) : null)
_connector.getResponses("XXXXXXXXXXXX\n\n")
!isTooLarge(vFile,contentText.length()) && getInputFilter(requestedIndexId).acceptInput(vFile)
new CountDownLatch(3)
i < depth[depthIndex]
canPerformRequestOverConnection(mAccessibilityViewId)
user.getWorld().getTime()
ix >= ixz
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
Assert.assertNull(request.getContentType())
ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
DLFileShortcutLocalServiceUtil.fetchDLFileShortcut(primaryKey)
locationRequest.setInterval(fastestUpdateInterval)
mBottomLeftStrip=drawable
config.getClass().toString()
telephony.getNetworkTypeForSubscriber(subId)
sourceScope.getLibrariesScope()
displayContent.getDockedStackLocked()
JobQueueUtils.getExecutableQueueName(jobClientNodeGroup)
editedGroup.getClass() == KeywordGroup.class
DBUtils.getDefaultContext(object,true)
new LayerView(this,0xff0000ff)
product.encodePrettily()
endElement == null
tm.getProgress()
Long.valueOf(args[2])
change.isIsReplaced()
Exception e
getWidgetSettings()
dist == 0
cv.visitVarInsn(ALOAD,resultIdx)
set(object,value.intValue())
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
loaded.getLoaded().getConstructor()
Measures.RR(results,test)
assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(12,containsApplicationLog)
mNavigationBarView.getPaddingStart()
v.toNumericVec()
selenium.isVisible("link=Control Panel")
new Scanner(f)
getWrapper(leftRedirect)
converterRegistry.addConverter(Enum.class,String.class,new EnumToStringConverter((ConversionService)converterRegistry))
@Override public final DivideBy and(String sql){   return and(condition(sql)); } 
pixel >> 8
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
ViolationTrackingBlocksRecognizer rec
none()
dw != mBackgroundHeight
obj.getJSONArray("types")
newWidth + BORDER_THICKNESS
private void showMatch(final Server server,final CommandSender sender,final String match) throws NotEnoughArgumentsException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(match);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     showExp(sender,player);   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
stopped.get()
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Thread.sleep(5000)
order.getSide().equals("buy")
allDeleted
e.getMessage()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
mCanSeekForward=mCanSeekForward=true
fileInfo.getPath()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
d < 0.02f
this.thrown.equals(IllegalStateException.class)
assertEquals(expectedPlan,actualPlan)
payload.put(0,getClientVersion())
(target.getModifiers() & Modifier.STATIC) != 0
src[srcIdx]
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new WorldPoint(2975,3809,0)
FLIGHT(0f,4f,true,false,false,3f,true)
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package has a different signature: " + pkgName)
configuration.getSupertypeSerializer()
primaryIndexes.size() > indexes.size()
row.size() == 0
logger.info("reconnect attempt error")
/**   * @return a String for the summary of the preference.  */ public String getSummary(){   return null; } 
lock.lock()
OptionalIdentifiedType<RoutesDefinition>
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(0)
Simple.of(MutableList.class)
m.getClass()
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
new QueryException("Error in building dependency graph")
type == OrderRootType.CLASSES
RestartStrategies.fixedDelayRestart(3,0)
getListView().getFirstVisiblePosition() > 0
mMountTable.resolve(getPath(dir)).getPath()
tracesFile.mkdirs()
genericTypes.length * 2 + 2
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
e.getMessage()
limitOrder.getType() == OrderType.BID
DEFAULT_DATA_SIZE_PER_COLUMN=10
mMncStr == null
entityMetadata.getIdProperty()
mAuthorities.get(i)
child.resetResolvedLayoutDirection()
context.castMode(NEVER).formatSeparator().keyword("limit").sql(' ').visit(offsetOrZero).sql(", ").visit(numberOfRows)
status().isMovedTemporarily()
paramType.getName()
telephony.isOffhook()
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.5)
GL.glDrawArraysEXT(mode,first,count)
Exception e
assertEquals(expectedPlan,actualPlan)
Exception e
isReserved(c)
defaultInt=UNSET
width < 0
protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask,File inputFile,Task compileTask,final Task generateTask){   Project project=buildWSDLTask.getProject();   String taskName=GradleUtil.getTaskName(buildWSDLTask.getName(),inputFile);   Jar jar=GradleUtil.addTask(project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (buildWSDLTask.isIncludeSource()) {     jar.into("OSGI-OPT/src",new Closure<Void>(project){       @SuppressWarnings("unused") public void doCall(      CopySpec copySpec){         copySpec.from(generateTask.getOutputs());       }     } );   }   jar.setDestinationDir(buildWSDLTask.getDestinationDir());   String wsdlName=FileUtil.stripExtension(inputFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
rootView == null
mTextColor.getColorForState(ds.drawableState,0)
instruction.getOffset()
tests.add(clazz.getGenericsTypes()[0].getType())
sourceIterator.numExamples()
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
Executors.newFixedThreadPool(12)
BlockingManager.getInstance().getBlockedContacts(account)
VtexApis.REPLIES_URL + id
selenium.isVisible("link=Control Panel")
log.error("Query failed to parse : '{}'",executionInput.getQuery())
serializer.serializeForInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).expectComplete()
new IgniteCheckedException("Failed to perform cache operation (cache topology is not valid): " + U.maskName(cacheCtx.name()))
connector.execute(context)
selenium.isVisible("link=Control Panel")
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
winAnimator.mSurfaceController == null
LOG.error(e)
Character.isJavaIdentifierPart(c)
clist.clearDisplayNameUserDefined(metaContact)
noteAcquireWifiLock(wifiLock)
new Paint()
ISOChronology.getInstance()
FBUtilities.getLocalAddress()
selenium.isVisible("link=Control Panel")
mAttachInfo == null
endpoints.addAll(entry.getValue())
y / vz
idGenerator.generateId()
this.conf.addResource(coreSiteXMLInputStream)
new Paint(Paint.ANTI_ALIAS_FLAG)
@Bean @Primary Repository repository(){   return new RepositoryImpl(systemProperties(),keyValueDataSource(),keyValueDataSource(),this); } 
myNameField.getComponent()
mMncStr == null
reverseSpeedEncoder.getBits()
FunctionTypesKt.isExactExtensionFunctionType(upperBoundType)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_velocityEngine,_templateContextHelper)
messageId.getDataLocator()
mMessageList.getId()
Lists.newLinkedList()
context.getString(R.string.notification_new_messages_title,newMessages,accountDescr)
!chunk.isOpCode() && chunk.data.length >= MINIMUM_BLOOM_DATA_LENGTH
mod.getInitialise()
logger.info("mmap address is: " + Pointer.nativeValue(addr))
components.isInstalled(service,"CLIENT")
setFloatingLabel(mode)
new HashCollisionNode(edit,count,hash,array)
(BeanDefinitionRegistry)context
info.getDeviceIdForPhone(slotId)
(SubscribeForm)form
dest.writeLong(mTxPower)
appView.backHistory()
new String(_byteStore.get(dictId))
node.getLifecycleService().terminate()
manifest.getRequiresPlugins()
mDataAuthorities == null
Base.getTargetBoard()
selenium.isVisible("link=Control Panel")
/**   * Ignore binary payloads by default  */ boolean logMultiplart() default true; 
disjPred.isAlwaysFalse()
ThreadFactoryBuilder.create().withNamePrefix(THREAD_NAME)
getString(R.string.agps_data_last_downloaded,"null","null")
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).contextStart(withUser)
selenium.isVisible("link=Control Panel")
mConnector.execute("resolver","clearifaceforuidrange",uid_start,uid_end)
channel.getRTPPort()
myRole2 == ChildRole.LOOP_BODY
getViewAtRelativeIndex(0)
syncOperation.delay == 0
sendObjectInfoResult.getCompressedSize()
@Overide
Validator.isNotNull(PropsValues.MOBILE_DEVICE_TYPE)
String.format(formatStrWithHash,container.getContainerID(),openStatus,data.getDBPath(),data.getContainerPath(),"",datanodeDetails.getHostName(),datanodeDetails.getHostName())
LOG.error("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
@Autowired RoutingService routingService; 
props.get(PropsKeys.TRANSACTIONAL_CACHE_NAMES)
id=15853
requestHeader.mConnectionID != null
sendMessage(CMD_STOP_AP)
requestFilters != null
loaded.getLoaded().getConstructor()
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949)
JCublasBackend.class
new Rect(left,top,bottom,right)
service.getDomain().getName()
selenium.isVisible("link=Control Panel")
getDelegate().getSupportedCipherSuites()
rows.get(lastIndex).key.key.equals(finishKey)
CacheData<Booleans>
return self; 
loadObj(file,false)
NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false)
PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME,"DEFAULT",sql,results,columnMetas,sqlException)
@Overide
caller.isOwner()
Log.warn("Caught exception: " + error.toString())
U.warn(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
log.logDetailed(toString(),"File [" + realFilename + "] doesn't exist!")
sentence.length() <= 25
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
name.length() - 2
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
MESSAGES.failToReplicateAttribute()
getPlayerPosition().z
presentation.refreshData(false,false)
startGrids(NODES_CNT)
object2StaticBuffer(value)
-1089652346
dialect.supportsQuotedMixedCase()
Double.valueOf(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
entry.getKey()
(Long)version
author.getLastFirst(false)
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_folder_name"))
mDisplayContent.getSplitScreenPrimaryStack()
super.dispatchTouchEvent(ev)
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
(flags & FLAG_VIEW_ENTERED) != 0
GroupServiceUtil.addGroup(GroupConstants.DEFAULT_PARENT_GROUP_ID,name,description,type,StringPool.BLANK,true,true,serviceContext)
new TextField<String>(textFieldId)
keyboardFocusManager.removePropertyChangeListener(focusListener)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
intent.setData(uri)
((VarcharType)type).getLength()
selenium.isVisible("link=Control Panel")
Exception e
assertEquals(55,StringUtil.countMatches(drl,"rule \""))
final StringBuffer buf=new StringBuffer(); 
mockBigtableSource.getRange()
selenium.isVisible("link=Control Panel")
mSyncStatus.get(i)
_connector.getResponses("GET /foo?data=102400 HTTP/1.0\n\n")
getZoomLevel()
ReflectiveOperationException e
LocalFileSystem.getInstance().findFileByPath(filePath)
processEmbed(curi,codebase,context)
accountsList.get(i)
message.getPresence().toString()
string.toUpperCase()
_log.error(ioe,ioe)
DefaultCacheKeysFactory.getEntityId(cacheKey)
writeString(writer,String.valueOf(reader.getShort()),fieldName)
compound.getCompoundTag("tile_pos")
public DerivedBuilder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
selenium.isVisible("link=Control Panel")
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
FieldsWriter<V,?>
loaded.getLoaded().getConstructor()
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause pauseState(){   return pause; } 
mQsContainer.getX()
view.getZoom()
checkPojoMetaClass()
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,20000))
!(jdk.getSdkType() instanceof IdeaJdk)
returnCursor != null
@Nullable private final Params params; 
return size; 
dateFormatter.format(value)
StatBuckets.prettyUptime(secs)
tw.release()
onDetachedFromWindows()
heightMode != MeasureSpec.EXACTLY
sendMessage(CMD_STOP_AP)
new InputStreamBody(content.getStream(),content.getName())
LOG.error("Process %s exited with error code %d",buckPyProcess,exitCode)
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
readLock.unlock()
spellParser.isFinished()
LOGGER.debug("Could not execute exportToClipboard",ex)
Log.info("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
sections.remove(section)
connectionConfirmed()
new Dimension(500,350)
columnSums.mean(1)
m.getSize()
i <= 'Z'
options.getPreserveOrder()
IOException ex
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,new FileEncryptionInfo(suite,version,new byte[suite.getAlgorithmBlockSize()],new byte[suite.getAlgorithmBlockSize()],"fakeKey","fakeVersion"),(byte)0)
this.convertSceneToLocalCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
new StandardProvenanceEventRecord.Builder().setEventType(ProvenanceEventType.REPLAY).addChildUuid(newFlowFileUUID).addParentUuid(parentUUID).setFlowFileUUID(parentUUID).setAttributes(Collections.<String,String>emptyMap(),flowFileRecord.getAttributes()).setCurrentContentClaim(event.getContentClaimSection(),event.getContentClaimContainer(),event.getContentClaimIdentifier(),event.getContentClaimOffset(),event.getFileSize())
mHotspotBounds.set(left,top,bottom,right)
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)
Exception e
equalTo(2)
mPowerManager.isScreenOn()
parts.length < 1
TelephonyManager.getDefault().getPhoneType()
node1.checkTreeEqualsSilent(node1)
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
writeRepeatedBool(id,val)
equalTo("cookieManagerShared")
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
length % dictionarySize
new TreeItem(stepsItem,SWT.NONE)
assertEquals(4,loader.getPlugins().size())
rs.last()
!mHost.onShouldSaveFragmentState(f)
surfaceHolder.setFixedSize(320,240)
LOGGER.debug("Could not execute sendAsEmail",ex)
mWM.isKeyguardSecure()
statement.execute(sql,Statement.RETURN_GENERATED_KEYS)
notify()
dstCursor != null
String transformationResult=JsonPath.read(source,JSonPathExpression); 
searcher.get().getIndexReader()
Error err
playerList.remove(groupValue)
m.getClass()
new BalloonImpl(new JLabel("FUCK"),Color.black,MessageType.ERROR.getPopupBackground(),true,true,true,true,true,0,true,null,false,500,5,0,0,false,"This is the title",new Insets(2,2,2,2),true,false,Layer.normal)
-1
LOGGER.info("Application registered itself as {}",response.getBody())
dlFileShortcutLocalService.deleteDLFileShortcut(fileShortcutId)
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
d.setHotspot(x,y)
request.getContentLength()
fraction * (nextValue - prevValue)
new IntPreference("map_transparency",255,true)
Bytes.toString(qualifierName)
e.getMessage()
dockedBounds.right + adjustment
popupWindow.setWidth(menuWidth)
mButton != null
TYPE_ATSC_M_H=0x00030200
PlatformUtils.isIntelliJ()
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
waitForDecommission(CCMBridge.IP_PREFIX + '5',c.cluster)
addr.intValue()
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
inner.innerSetException((Throwable)result)
mNwService.getInterfaceConfig(mInterfaceName)
mCollapsibleHeight > 0
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
new AccountCapsule(toAddress,null,AccountType.Normal)
peekServiceForUserLocked(userId)
temp.reAddRight()
log.warn("Problem in JSR223 script ",e)
mActiveStreamType == -1
IS_USED_QUALIFIED_OUTSIDE_PACKAGE_MASK=0x400
Long.valueOf(value)
List<MavenRemoteRepository>
greaterThan(0L)
platform != null
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
Object edge
logger.error("{} invalid: {}",getEntityClass().getSimpleName(),msg)
new HashMap()
user.getSystemId() == null
stack.peekFirst()
ContainerUtil.newHashSet(actions)
getPlayerPosition().z
new Dialog(this,mThemeId)
ddmStructureService.deleteStructure(ddmStructure.getStructureId())
SERIAL_VERSION_UID=500L
beanFactory.getBeanNamesForType(IntegrationMBeanExporter.class)
Bytes.toBytesBinary(tableNameOrRegionName)
terminal.receivedInput(event.getInputText())
note.isLocked()
Map<String,String>
(mPrivateFlags & IS_ROOT_NAMESPACE) != 0
(PropertyName)this
Thread.sleep(5000)
type == null
Looper.getMainLooper()
tupleInfo.getMessageId() != null
UnsupportedOperationException e
outLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
collection(StreamImpl.class).update(match,modify)
application.getApplicationContext()
calendar.set(Calendar.DAY_OF_WEEK,3)
equalTo(6)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
CodeStyle.getSettings(project)
this.uncollectedPointCreater
new RuntimeException("Unable to find className and commandName in classCommandName: " + classCommandName)
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
selenium.isVisible("link=Control Panel")
output.flush()
indexLock.readLock()
node.actor.getY() <= high
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
mMenu.getVisibleItems()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
entity.saveComponent(delayedComponent)
computeHorizontalScrollRange()
startupManager.registerPostStartupActivity(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
report(n,MISPLACED_ANNOTATION)
ruleGroup.getGroupId()
Exception e
VERSION=5
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Cool this annotation!")
telephony.getLteOnCdmaModeForSubscriber(subId)
Integer.valueOf(taskIdStr)
resolver.start()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
out.writeLong(sampleCount)
Float.valueOf(value.toString())
new StackState(1f,0)
value.iterator().hasNext()
field.getType()
mCameraUser.submitRequest(request,true)
SwingUtilities.getWindowAncestor(actualTarget) == null
changes.serializeToJSON()
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
mPrivateInput == null
volume.getMtpReserveSpace() * 1024 * 1024
insertByIndex(root,severityGroupNode)
readThrough
new TwoDimTable("Confusion Matrix (Act/Pred)",rowHeader,colHeader,colType,colFormat,new String[rowHeader.length][],new double[rowHeader.length][])
mQsContainer.getLayoutParams()
type.getConstructor()
Long.valueOf(args[2])
Integer.toString(flags,16)
Formatter.getInstance().createContinuationIndent()
Params params
selenium.isVisible("link=Control Panel")
SettingsUtils.hasJobTransportPoolingKey(settings)
streamTokenizer.ttype == StreamTokenizer.TT_WORD
new ForAdvice.ForMethodEnter(instrumentedMethod,adviceMethod,enterType)
(PrivateData)privateDataProviders.get(key)
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize()
verifyNothing(decoder,binary("02080000251848470afa010262daa690013aa4046da83745f8812560df010001126a"))
AppLog.e(T.EDITOR,message)
tracesFile.mkdirs()
ENABLE_LAUNCH_DESK_DOCK_APP=false
this.optimizedDispatch
bulkInsertableMap.get(persistentObjectClass)
ANXV2.getWalletHistory(ANXExchange.getExchangeSpecification().getApiKey(),signatureCreator,new CurrentTimeNonceFactory(),"BTC",null)
selenium.isVisible("link=Control Panel")
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace,true)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
contentWritten > 0
Boolean.valueOf(BytesUtil.readUTFString(buffer))
new Volume.MemoryVol(false,0)
concatRef.isEightBits=false
Log.e(TAG,status)
oldStatus == status
getProblems(domElement)
node1.checkTreeTypeAwareEqualsSilent(node2)
map != null
REQUREPASS
caches.values()
assertThat(xml).isEqualTo(expectedContent)
runtime().config.useCompressedKlassPointers
mAttributes.getFlags()
del("*:*")
mAms.mWaitForNetworkTimeoutMs=100
"true".equalsIgnoreCase(value)
buf.writeShort(1)
NFIUnsatisfiedLinkError ex
fileName.endsWith("Test.java") || fileName.endsWith("UpgradeTableListener.java") || content.contains("Callable<Void>")
previousPhase != null
Long.valueOf(deadline)
fluentSetters()
identifier(node)
classMapper.lookupType(reader.getNodeName())
result.getWarnings()
Math.max(desiredTileWidth,desiredTileHeight)
return true; 
testClass.getName()
log.warn("Double activation of SQL context")
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
LinkedHashMap<String,Object>
/**   * @author Vitaliy.Bibaev  */ public interface ProducerStreamCall extends StreamCall, TypeAfterAwareCall { } 
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.BUILDING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNodes)
ft.commit()
mConferenceById.containsKey(callId)
public Integer getMeasureId(){   return measureId; } 
/**   * Needed for statistics.   */ private final LongAdder canceledJobsCnt=new LongAdder(); 
endpoint.getCurrentThreadsBusy() > limit
new RoutingControlAction(this,newPath,false,callback)
new EnterSelectionDialog(shell,props,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
Slog.wtf(TAG,message,th)
fragmentEntryPersistence.filterCountByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
Math.max(titleRight,subtitleRight)
result.expectedMessageCount(3)
isNavBarVirtKey && !down
mFlexItem.setAlignSelf(AlignItems.STRETCH)
new NullPointerException("the text is null")
c == Short.class
prefsWriter.commit()
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
mService.reconnect(mContext.getOpPackageName())
sharedElements.remove(localName)
field.getClass()
devicesById.remove(cachedGroupId)
featureType.getName()
/**   * Hook some methods which we want to create an easier interface for developers.  */ private static void initXbridgeZygote() throws Exception {   final HashSet<String> loadedPackagesInProcess=new HashSet<String>(1);   findAndHookMethod(ActivityThread.class,"handleBindApplication","android.app.ActivityThread.AppBindData",new XC_MethodHook(){     protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ActivityThread activityThread=(ActivityThread)param.thisObject;       ApplicationInfo appInfo=(ApplicationInfo)getObjectField(param.args[0],"appInfo");       ComponentName instrumentationName=(ComponentName)getObjectField(param.args[0],"instrumentationName");       if (instrumentationName != null) {         XposedBridge.log("Instrumentation detected, disabling framework for " + appInfo.packageName);         disableHooks=true;         return;       }       CompatibilityInfo compatInfo=(CompatibilityInfo)getObjectField(param.args[0],"compatInfo");       if (appInfo.sourceDir == null)       return;       setObjectField(activityThread,"mBoundApplication",param.args[0]);       loadedPackagesInProcess.add(appInfo.packageName);       LoadedApk loadedApk=activityThread.getPackageInfoNoCheck(appInfo,compatInfo);       XResources.setPackageNameForResDir(appInfo.packageName,loadedApk.getResDir());       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=appInfo.packageName;       lpparam.processName=(String)getObjectField(param.args[0],"processName");       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=appInfo;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);       if (appInfo.packageName.equals(INSTALLER_PACKAGE_NAME))       hookXposedInstaller(lpparam.classLoader);     }   } );   findAndHookMethod("com.android.server.ServerThread",null,Build.VERSION.SDK_INT < 19 ? "run" : "initAndLoop",new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       loadedPackagesInProcess.add("android");       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName="android";       lpparam.processName="android";       lpparam.classLoader=BOOTCLASSLOADER;       lpparam.appInfo=null;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);     }   } );   hookAllConstructors(LoadedApk.class,new XC_MethodHook(){     @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {       LoadedApk loadedApk=(LoadedApk)param.thisObject;       String packageName=loadedApk.getPackageName();       XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());       if (packageName.equals("android") || !loadedPackagesInProcess.add(packageName))       return;       if ((Boolean)getBooleanField(loadedApk,"mIncludeCode") == false)       return;       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=packageName;       lpparam.processName=AndroidAppHelper.currentProcessName();       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=loadedApk.getApplicationInfo();       lpparam.isFirstApplication=false;       XC_LoadPackage.callAll(lpparam);     }   } );   findAndHookMethod("android.app.ApplicationPackageManager",null,"getResourcesForApplication",ApplicationInfo.class,new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ApplicationInfo app=(ApplicationInfo)param.args[0];       XResources.setPackageNameForResDir(app.packageName,app.uid == Process.myUid() ? app.sourceDir : app.publicSourceDir);     }   } );   if (!new File(BASE_DIR + "conf/disable_resources").exists()) {     try {       hookResources();     }  catch (    Exception e) {       log("Errors during resources initialization");       logResourcesDebugInfo();       throw e;     }   }  else {     disableResources=true;   } } 
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
configurations.create(Dependency.DEFAULT_CONFIGURATION)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
dest.writeLong(mSubId)
jobState.clearExceptions()
value.toLowerCase().contains(constraintLowerCase)
kylinConfig.setProperty(COPROCESSOR_LOCAL_JAR,path)
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
pathWrapper.setPoints(points)
referenceDatabase.setObjectQuotingStrategy(originalStrategy)
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask)
ams.mContext.createPackageContext(appInfo.packageName,0)
loaded.getConstructor()
comparator.compare(value,answer) > 0
USE_DISPLAY_LIST_PROPERTIES=true
ctx.write("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
mCurrentReactContext.runOnNativeModulesQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
mock.expectedMessageCount(2)
new TextField<String>(BrokerConfiguration.BROKER_URL_KEY)
mGpsListener != null
isPathClassLoaderName(classloaderName)
fLines.add(st.nextToken())
JsonProcessingException ex
type.getModifiers()
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",true,false,false)
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
Log.w(TAG,"Session failed to close due to remote exception",e)
StepVerifier.create(Flux.just(1).then()).expectComplete()
state == STATE_IDLE
buildData.getMasterHostname()
childLeftTuple.reAddRight()
ufsPath.getPath()
DEBUG=true
selenium.isVisible("link=Control Panel")
DumpUtils.checkDumpPermission(mContext,TAG,pw_)
new SpinnerWidget(RuntimeEnvironment.application,formEntryPrompt)
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,false); 
mEnterTransformation.printShortString(pw)
Strings.toString(this)
e.printStackTrace()
origin.realComponent().doubleValue() <= other
numIndexDims == 1
logger.error("Couldn't write to file: " + filename)
new IndexWriter(dir,new WhitespaceAnalyzer())
/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; 
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
chatButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
new IndexWriter(dir,new WhitespaceAnalyzer())
reply.getJMSMessageID()
level.toUpperCase()
Math.min(o.outWidth / targetWidth,o.outHeight / targetHeight)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
webRequest.getNativeRequest(HttpServletResponse.class)
logger.error("InterruptedException during playing a notification sound")
a.getFloat(attr,0)
mHandler.postDelayed(pae,timeout)
Thread.sleep(100)
slow=true
Matchers.<Map.Entry<String,String>>contains(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
mMenuView.setBackgroundDrawable(null)
Exception e
String.class
public Object getManagedObject(){   return jobMeta; } 
mService.setUidPolicy(UID_A,POLICY_NONE)
(trimmedLine.length() + previousLineLength) < getMaxLineLength()
mKey.equals(other.mKey)
ModalityState.current()
CryptoUtils.loadCertificate(is,new char[]{'p','a','s','s','w','o','r','d'},"morpit")
RedisRunner.startDefaultRedisServerInstance()
targetConfig.useDynamicConfigurations()
return raf; 
stmt.executeQuery(sqlQuery)
testError("class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }",GOOG_BASE_CLASS_ERROR)
add(feedbackPanel)
file.getLocalFile()
args != null & args.length > 0
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
ll.reverseRecursive1(head)
mHomeStackResizable && adjustedForIme
iconsCache.getThemedIcon(R.drawable.ic_action_keyboard)
MapActivity.getMapViewTrackingUtilities()
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.service",upgradeProcesses,1,0,false)
comparator.compare(value,answer) > 0
ocvmat.convertTo(cvmat,CV_8UC(3))
sm.getString("standardSession.setAttribute.ise")
TextUtils.isEmpty(text)
file.getAbsoluteFile()
Assert.assertEquals(dlFileVersions.toString(),3,dlFileVersions.size())
targetJar.exists()
synchronized (classCache) {   classCache.clear(); } 
mService.mDisplayContents.get(i)
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
mHomeStack == null
Config.empty()
ThrowableFunction<T,V>
min.getX() < box.max.getX()
dstPath.getPath()
originStorageUsage - originStorageUsage
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
new ContinueProcessOperation(this,execution,true)
new MockNode(nodeSettings,true,Version.CURRENT,Arrays.asList(ShieldPlugin.class,licensePluginClass()))
mappers.mapper().searchAnalyzer()
verify(instrumentation,times(2)).isRetransformClassesSupported()
new FileSystemWebDabServer(cryptoFileSystem())
values.equals(values[i])
connection.setFollowRedirects(httpRequest.getFollowRedirects())
args[0].trim().length() < 3
CharSequence message
RequestConfig.custom().setConnectionRequestTimeout(httpClientConfig.getConnTimeout())
Exception ex
Watcher<Route>
ONE_MINUTE=180000
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
BATCH_SIZE=500
SingleResult<Tuple>
mapping.set(groupCount + indicatorCount + newAggCallList.size(),j)
startElement != endElement
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } ,0,inputRects.size)
@Test public void testTakeWithLimits() throws OutOfCapacityError, BrokenBarrierException, InterruptedException {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(ResourceManager.QUERY_WORKER_CONFIG_KEY,40);   conf.setProperty(ResourceManager.QUERY_RUNNER_CONFIG_KEY,10);   conf.setProperty(ResourceLimitPolicy.TABLE_THREADS_SOFT_LIMIT,20);   conf.setProperty(ResourceLimitPolicy.TABLE_THREADS_HARD_LIMIT,80);   PolicyBasedResourceManager rm=new PolicyBasedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   TestSchedulerGroup testGroupOne=groupFactory.groupMap.get(groupOne);   TestSchedulerGroup testGroupTwo=groupFactory.groupMap.get(groupTwo);   testGroupOne.addReservedThreads(rm.getTableThreadsSoftLimit() + 1);   QueueReader reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   testGroupTwo.addReservedThreads(testGroupOne.totalReservedThreads() + 1);   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupOne);   testGroupOne.addReservedThreads(rm.getTableThreadsHardLimit());   reader=new QueueReader(queue);   reader.startAndWaitForRead();   assertEquals(reader.readQueries.size(),1);   assertEquals(reader.readQueries.poll().getSchedulerGroup().name(),groupTwo);   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   testGroupTwo.addReservedThreads(rm.getTableThreadsHardLimit());   reader=new QueueReader(queue);   reader.startAndWaitForQueueWakeup();   assertEquals(reader.readQueries.size(),0);   sleepForQueueWakeup(queue);   assertEquals(reader.readQueries.size(),0);   testGroupTwo.releasedReservedThreads(testGroupTwo.totalReservedThreads());   sleepForQueueWakeup(queue);   assertEquals(reader.readQueries.size(),1); } 
javaBeanSerializer.getFieldValues(json)
candidate.getSelected().getId()
IllegalArgumentException e
sendMessage(CMD_STOP_AP)
LOG.error("Could not load JDK7 class with a JDK7+ JVM, falling back to no-op implementation.",e)
new BindFBO(SCENE_OPAQUE_FBO,frameBuffersManager)
CompilerDirectives.inCompiledCode()
new Fragment(id,"iconFragment",NewLayerPage.this)
Long.valueOf(value)
loaded.getLoaded().getConstructor()
messenger.requestSms(res)
holder.setVisible(loadEndViewId,visible)
matcher.end()
new FavoriteImageDrawable(a,color)
queue.poll(2,TimeUnit.SECONDS)
name=Resources.REQUEST_QUEUE
mState.mPivotYRel == relative
new IllegalArgumentException()
LOG.debug("Consumer subtask {} is trying to discover new partitions ...")
TestResource.class
getI18NString(key,locale)
Slog.wtfStack(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
getNetworkPolicies()
@Override public ZuulMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
new IOException("data still remaining in inflater",e)
caller.isOwner()
EqualityComparer<T>
model.getModelName()
days(30)
si.id == id
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
isNavBarVirtKey && !down
(SupportingToken)suppTokens
lhs.getScore()
size > 0
logger.info(String.format("destroying socket (%s)",this.nsp))
list.iterator()
onRotationLockChanged()
super.dispatchTouchEvent(ev)
this.tvShows.addAll(tvShows)
V_5_0_0_ID=5000052
mView.post(mAnimationStarter)
mConferenceById.containsKey(callId)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
this(false,16,arrayType); 
Long value=iterator.next(); 
data != null
context().getSettingsModule().isNotificationsEnabled()
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout)
internedAnnotationSetRefItems.put(annotationSetRefKey,0)
p.contains("gt06.timezone")
tableHasColumn("KBArticle","kbTemplateId")
matcher.group(11)
from >= to
"DROP INDEX " + PATTERN_ITEM_INDEX_SHORT
ExternalSystemModulePropertyManager.getInstance(module).seExternalModuleType(GradleConstants.GRADLE_SOURCE_SET_MODULE_TYPE_KEY)
getGlobalOptions().setAutoscrollToSource(enabled)
connectionProperties.contains("oracle.password")
i > speedBumpIndex
body.addBefore(target,afterAnchor)
PsiModifierListOwner element
getBlueprintStatus()
fraction * (nextValue - prevValue)
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractACLCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
(flags & FLAG_VIEW_ENTERED) != 0
selector.select(500)
mVertical ? "true" : "false"
lineCount == 4
selenium.isVisible("link=Control Panel")
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
lock.lock()
fraction * (nextValue - prevValue)
childrenExpanded ? mDividerHeight : mChildPadding
deployments.get(uniqueName)
proxyRequest.getEnvironment()
Thread.sleep(1500)
executableTypes.size() == 1
ep.getClass()
schemeSpecificParts != null
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title")
externalCacheDir.getPath()
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
Slog.e(TAG,"Failed to build intent for " + packageName)
resources.getDimension(R.dimen.close_handle_height)
mData != data
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
loaded.getLoaded().getConstructor()
verifyNull(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
TelephonyManager.getDefault().getPhoneType()
lp.onResolveLayoutDirection(layoutDirection)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
assertEquals(8,definitions.size() - hostAlertCount)
log.debug(exception.getMessage())
(javaClass.getAccessFlags() & org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) > 0
mGpsListener != null
tableHasData(oldTableName)
DATABASE_TYPE_MYSQL.equals(databaseType)
this(texName,true); 
Math.min(1000L,connectionTimeout)
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
pRegexMatch != null
mSrc.onTouchEvent(e)
conf.getSearchBaseURL()
c.setLong("hbase.hregion.memstore.flush.size",100000)
onRotationLockChanged()
fingerId == 0
xam.getStudentNumber()
service.getFullName()
LeveledCompactionStrategy.class
AttributeUtils.getDefault().getMin(column,valuesArray)
mLargePaint.setColor(0xff00ff00)
Ints.min(completedSplits.get(),splits)
-1
!task.isFreeformTask()
TopAndRecentlyPlayedTracksLoader.getRecentlyPlayedTracks(getApplicationContext())
totalNbSuggestions > MAX_NUMBER_SUGGESTIONS
getDelegate().getSupportedCipherSuites()
mGpsListener != null
schemeSpecificParts != null
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new PackageConfig()
verify(mWifiService).stopLocalOnlyHotspot()
rowSelected < table.getRowCount() - 1
Thread.sleep(5000)
bundle.containsKey("ongoing")
config.enterpriseConfig != null
hour != 0
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate")
logger.error(e)
mFinishing && mSupportHardware
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
XMLHandler.getTagValue(jobnode,"info","shared_objects_file")
ps.setLong(1,structureId)
StringEscapeUtils.escapeXml(atts.getValue(i))
XmppStringUtils.parseBareAddress(user)
ImmutableList.of(listeners)
(uptime - days) * 60
@Override public Object getAsset(){   return null; } 
UnsafeUtils.set4(_mem,8,bias)
selenium.isVisible("link=Control Panel")
IOException ex
resources == null
myBuilder.enableEols()
ATLAS_MAP_ENTRY_FIELD_COUNT=4
addError(msg,e)
GitBranch.list(myProject,myDir,true,true,branches)
downloaderProvider.downloadPart(fileUrl,fileOffset,blockSize,new FileDownloadCallback(){   @Override public void onDownloaded(  final byte[] data){     self().send(new Runnable(){       @Override public void run(){         downloaded++;         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " completed");         }         if (!outputFile.write(fileOffset,data,0,data.length)) {           reportError();           return;         }         currentDownloads--;         reportProgress(downloaded / (float)blocksCount);         checkQueue();       }     } );   }   @Override public void onDownloadFailure(){     self().send(new Runnable(){       @Override public void run(){         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " failure");         }         reportError();       }     } );   } } )
tx == null
mDelegate.getView(position,wv.mItem,wv)
new Color(mParams.getCustomBackgroundColor())
mHidProfile.isProfileReady()
StringUtil.join(modules,new Function<Module,String>(){   @Override public String fun(  Module module){     return module.getName();   } } ,", ")
3
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
parsedResult.getSqlType()
DumpUtils.checkDumpPermission(mContext,TAG,pw)
xAmount > 0
superClass == Object.class
/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static PkgControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException("syntax error in url " + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to find " + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } 
Thread.sleep(5000)
new Button("cancel",new StringResourceModel("cancel",(Component)null,null)){   public void onSubmit(){     doReturn();   } } 
pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)
connector.accept(new ConnectEventAction(action),false)
createFromResourceStream(res,value,is,srcName)
headerName.startsWith("proxy") || headerName.equals("keep-alive")
"Center loss is " + intraClassLoss
new AngularUiRouterEdge(node,templateNode)
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true)
@Converter
i.getIntExtra(Constants.INTENT_KEY,0)
i <= MAX_AUDIO_PORTS
norms=false
new Semaphore(1)
tests.add(objectExpressionType.getGenericsTypes()[0].getType())
hasCollapsibleActionView()
getJSDocTypeWithBraces(operation)
material.getMaxDurability() < 0
table.getParameters()
LOGGER.debug("Could not find DropTargetDropEvent class",e)
requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
ATLAS_MAP_ENTRY_FIELD_COUNT=4
List<DBCException>
logger.error("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
type.getConstructor()
assertRuntimeProductionSearchScope("m1",getProjectPath() + "/m1/src/main/java")
delegate.open(filename,idType,highId,maxId)
SamplingProfiler.newThreadGroupTheadSet(group)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false)
mPositionAnimator.isRunning()
from > to
new TextPaint(Paint.ANTI_ALIAS_FLAG)
3
FORMAT_FIELD.getPreferredName()
getLogger().info("Checking " + model.getId() + " for extensions.")
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning()
Exception e
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
DEBUG=true
line.startsWith("fatal") || line.startsWith("error: ")
getService().hasPrimaryClip()
SLOPE_PROXIMITY=150
UISettings.getInstance().getShowToolWindowsNumbers()
KtPsiUtil.getEnclosingElementForLocalDeclaration(this,false)
frequencyKhz < 30000
selenium.isVisible("link=Control Panel")
mNotificationsUtilsWrapper.mapJsonToFormattablbeContent(bodyArray.getJSONObject(i + 1))
logger.error("Plugin class " + pluginClass)
FileUtils.setPermissions(file.getBaseFile().getPath(),0660,SYSTEM_UID,PACKAGE_INFO_GID)
collector.getRangeCountersToBeDisplayed(range)
LinkedHashMap<String,Object>
builder.getNotification()
pdlMarker.rollbackTo()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
public static XQueryBuilder xquery(File file,String characterSet) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
mode != null
result.getSqlType()
e.isShiftPressed()
note == null
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL
countNewlines(headerFragment + lhsFragment + thenFragment) + 2
String.class
new DoubleValue(Float.parseFloat(text))
return true; 
myNameField.getComponent()
propertyValue.getName().replace(prefix + PREFIX_SEPERATOR,"")
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
Integer.parseInt(value)
appearance.getFont(attr)
messenger.signUp(name,null,false)
yz*=ly
services.size() == 0
Log.wtf(TAG,"This will become an error",ex)
glyph.setSizeRatio(sizeSlider.getValue())
apex.installPackage(mResolvedBaseFile.toString())
new ObjectMapper().reader(IspResponse.class)
getParameterValues(request,param)
Object node
sendResourcesChangedBroadcast(true,false,pkgList,uidArray,null)
SCHEMA(35,true)
LocalBroadcastManager.getInstance(getContext()).sendBroadcast(intent)
proxyHTTPPort.setText("")
DEBUG=true
request.getManager().loadAsset(text)
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ T parseLiteral(Object input); 
log.info(message)
row.setBackground(getResources().getDrawable(R.drawable.list_bg_selector))
VERSION=26
Short value
FitNesseSuite.initContext(new File(ContextConfigurator.DEFAULT_CONFIG_FILE),fitNesseRootPath,ContextConfigurator.DEFAULT_ROOT,port)
result.getExitCode() != 0
value.length() > MAX_LENGTH
/**   * Implements all the default JDBC operations that are used by the JDBCPersistenceAdapter. <p/> Subclassing is encouraged to override the default implementation of methods to account for differences in JDBC Driver implementations. <p/> The JDBCAdapter inserts and extracts BLOB data using the getBytes()/setBytes() operations. <p/> The databases/JDBC drivers that use this adapter are: <ul> <li></li> </ul>  * @org.apache.xbean.XBean element="oracleJDBCAdapter"  * @version $Revision: 1.2 $  */ public class OracleJDBCAdapter extends DefaultJDBCAdapter {   public void setStatements(  Statements statements){     statements.setLongDataType("NUMBER");     super.setStatements(statements);   }   protected byte[] getBinaryData(  ResultSet rs,  int index) throws SQLException {     Blob aBlob=rs.getBlob(index);     if (aBlob == null) {       return null;     }     return aBlob.getBytes(1,(int)aBlob.length());   } } 
new AssetUri(uri)
log.debug("Filtering key {} due to exception",k,e)
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
builder.setView(setupView()).setMessage(R.string.title_sync)
resources.getDimension(R.dimen.close_handle_height)
Float.valueOf(strings[i])
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
folder.getModel()
managedType.getConcreteClass()
HashMap<String,String>
new GHRequest(start,end).setVehicle(algoVehicle.toString()).setType(vehicleStr)
tracesFile.mkdirs()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Environment.getRootDirectory()
relevant && canSetPlaceholder()
composite.isStaticName(c.name())
!mPhones.contains(phone)
regUser * userWeight * trusteeFactorValue* trusteeFactorValue
task.cancel()
SHORT_CF_NAMES_DEFAULT=true
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,true))
sa.getBoolean(com.android.internal.R.styleable.AndroidManifestApplication_testOnly,true)
DEBUG=true
/**   * Returns the next pseudorandom  {@link ArrayValue} of duration elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of duration elements.  */ public ArrayValue nextDurationArray(){   return Values.durationArray(nextDurationArrayRaw(minArray(),maxArray())); } 
connections[i].getRequestId() == request.getRequestId()
XmppStringUtils.parseBareAddress(user)
recipientIds[i].equals("-1")
new Max()
PApplet.radians(angle)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
telephony.getCdmaEriIconIndexForSubscriber(subId)
Assume.assumeTrue(JavaDetector.isJDK7())
public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
reportError(context,"encoding %s as an ARRAY was unexpected")
value.isNull()
DefaultGroovyMethods.getRootLoader(Environment.class.getClassLoader()) == null
Internal.prefixKeyWithSalt(key)
accountHandle.getComponentName().toString()
new AlertDialog.Builder(this,mThemeId)
setNumber(String.valueOf(integerPart))
input.doubleValue() == value.doubleValue()
new InputStreamReader(in)
new InitialThreadLocal<Boolean>(PortletPreferencesThreadLocal.class + "._strict",true)
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
resources[i].getFilename().endsWith(groovyFile)
Character.isLetterOrDigit(buffer.charAt(i))
start >= length
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
Log.w(TAG,"Session failed to close due to remote exception",e)
dest.writeLong(mSubId)
EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)
status().isMovedTemporarily()
cell.recon == null
mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable(){   public void run(){     cleanup();   } } ,cleanupPeriod,cleanupPeriod,TimeUnit.MILLISECONDS)
Color.green(color)
getCategoriesAndThreads(category.getGroupId(),category.getCategoryId())
mFirstNotificationMillis=-rateLimitMillis
AvroKey<GenericRecord>
mObsoleteAgents.remove(info)
var.isClosureSharedVariable()
Integer.parseInt(parts[1])
constraints.weightx=0f
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
constr.gridy=1
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
error == null
parser.nextInt()
s.charAt(i) != ' '
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Response.ok()
isRowVector()
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle")
_typeSettingsProperties.toSortedString()
service.getFullName()
EnhancedSwitchMigrationInspection::inspectVariableAssiginigSwitch
loaded.getConstructor()
Internal.prefixKeyWithSalt(key_b)
childLeftTuple.reAddLeft()
platformVersion < MNC
LOGGER.debug("Could not execute cut",ex)
states.length == 3
new java.util.Date()
"Second position set to " + pos1 + "."
new InternalTestCluster("network",randomLong(),createTempDir(),2,2,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX)
Collectors.toSet()
numDataPoints - 1
_freemarkerEngineConfiguration.getResourceModificationCheck()
history2.getWorkflowInstanceId()
focusedTopActivity != null
/**   * Returns an  {@code AfterFirst} {@code Trigger} with the given subtriggers.  */ public static OnceTrigger of(OnceTrigger... triggers){   return new AfterFirst(Arrays.<Trigger>asList(triggers)); } 
TelephonyManager.getDefault().getPhoneType()
Results.ok()
key == null
!cursor.moveToFirst()
(propertySource != this) && propertySource instanceof EnumerablePropertySource
if (isVisible) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
ObjectHeaderImpl.readHeaderBitsFromObjectCarefully(obj)
assertNotNull(message.getPayload() instanceof Collection<?>)
Arrays.asList("test","lukas","sa","root@localhost","postgres","dbo","dba","dba@lukas-hp")
loaded.getLoaded().getConstructor()
dynamicType.getLoaded().getConstructor()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
tracesFile.mkdirs()
copyProfileConfigFiles(file,outFile)
mContext.startActivity(shortcutIntent)
selenium.isVisible("link=Control Panel")
onRotationLockChanged()
type.getConstructor()
new Max()
components.symbolUsageValidator.validateCall(descriptor,trace,expression)
endFunction("get_column_statistics_by_table: ",statsObj != null)
requestTraceFile + ".txt"
RepairSession.class
body.getChildCount() > 0
PsiTreeUtil.getNextSiblingOfType(startTag,XmlTag.class)
TextUtils.isEmpty(credential)
lineArgs[3]
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
weekRange.roll(Calendar.DATE,6)
getProperty(parent + "." + propName)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
!TextSecurePreferences.isWebrtcCallingEnabled(this) || isGroupConversation()
imageView.setBackgroundDrawable(drawable)
type.getConstructor()
IllegalArgumentException e
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()
verify(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
ap.getSsid()
Long.valueOf(val)
UserHandle.getCallingUserId()
assertEquals(7,resultList.size())
mListener.onInputUpdated(inputId)
mHorizontals == null
mTextColor.getColorForState(ds.drawableState,0)
(SubscribeForm)form
selenium.isVisible("link=Control Panel")
structuralLock.isLocked()
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/handlers/basic/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
Foo<Integer>
@Nullable
index.retrieve(between(TransactionIndex.TIMESTAMP,beginInMilliseconds,endInMilliseconds),queryOptions(orderBy(descending(TransactionIndex.TIMESTAMP)),applyThresholds(threshold(INDEX_ORDERING_SELECTIVITY,1.0))))
myIgnoreInstanceRefsInClosure=true
host.getAddress()
intersection.size()
keyspace()
deltaY < 0
getJSDocTypeWithBraces(cp)
10 + (int)(10000 * new Random().nextDouble())
!cursor.moveToFirst()
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
getService().hasPrimaryClip()
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
display.getMetrics(mDisplayMetrics)
selenium.isVisible("link=Control Panel")
statistics.addGetTimeNano(System.nanoTime() - start)
this(patchContent,false); 
file.exists()
assertThat(response).isEqualToIgnoringCase("Ok.\n")
Trans == TRANSPOSE
i >= 0
System.currentTimeMillis()
JetReference reference=(JetReference)configureByFile(getTestName(true) + ".kt"); 
className.getClassName()
myFixture.checkResultByFile(baseName + "_after.py")
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),0)
m.getSize()
ACRA.log.e(LOG_TAG,"Could not send crash Toast",e)
tag1.getText()
@Child protected Node repeatingNode; 
telephony.isOffhook()
@Override public DBSObject getParentObject(){   return table; } 
_freemarkerEngineConfiguration.getResourceModificationCheck()
!list.append(pi)
logger.getLogger().warn("Shut down master")
expandableView.getActualHeight()
makeInteractions(test,false,InteractionPair.generatePairwiseInteractionsFromList(interactionIndexes),true,false,false)
e.getMessage()
!isFinishing()
Character.isUpperCase(methodName.charAt(position - 1))
_connector.getResponses("METHOD /foo HTTP/9\n\n")
mSyncStatus.get(i)
WordPress.getCurrentBlog().getRemoteBlogId()
tok.getAttachedReference()
telephony.isIdle()
UnsupportedSchemeException e
new ELResolver[2]
new Paint()
IccUtils.gsmBcdByteToInt((byte)0x8c)
selenium.isVisible("link=Control Panel")
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
E extends Throwable
stateMap.get("CurrentTrackMetaData") != null
now == currentPage
copy.isPrivate()
dbStat.setLong(1,sessionType.getPid())
new TitanException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
_log.error(ioe,ioe)
return false; 
Integer.valueOf(stackIdStr)
mRepeat > 1
el.getProperty(HTTPSampler.METHOD)
start >= str.length()
return 1; 
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
@NotNull
selenium.isVisible("link=Control Panel")
routes.SessionsController.index()
loaded.getLoaded().getConstructor()
mMat[6]
longSize >= 800
services.size() == 0
endpoints.add(entry.getValue())
o1.getPriority()
mBluetoothLock.readLock().lock()
mAlpha.end()
return faceBookProperties; 
new IssueIndexer(esTester.client(),new IssueIteratorFactory(null))
mPlayer.getCurrentPosition() * 1000
IBackupManagerService svc=mService; 
searchHit.getImageUrl()
item.getType() == DownloadActivityType.NORMAL_FILE
m.put(OutputStream.class,os)
size(i) == 1
userRecord.mClientRecords != null
assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(5)
getWidgetSettings()
mUserPaddingEnd >= 0
mRenderNode.isPivotExplicitlySet()
log.warn("Double activation of navigator context")
new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,false)
decoder.readString()
builder.scope("openid","profile","email","address","phone")
diff.remove('-' + item)
iconSize * DisplayMetrics.DENSITY_MEDIUM > availableHeight
new Paint(Paint.ANTI_ALIAS_FLAG)
path == null
fieldValues.isEmpty()
nextNonWakeup != 0
false || DEBUG_WALLPAPER
onDetachedFromWindow()
return false; 
selenium.isVisible("link=Control Panel")
SelectTimeZonePacificStandardTimeTest.class
LOG.error("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
mDrawerLayout.openDrawer(mDrawerGravity)
AbstractMethodError e
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper)
String uri
id < ForgeDirection.values().length
this(parameters,new StringBuilder(),false); 
params.copyWithExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
super.onUpdate(pSecondsElapsed)
taskNames.contains(taskName)
checkPojoMetaClass()
Integer.toHexString(quality)
path.startsWith(FileSystemItem.HOME_PREFIX) || path.startsWith("/")
BundleFactoryOutputRecieverFactory.create(bundleFactory,stage.getComponents(),outputs::add)
jsonObject.get("error").getAsString()
i < maxListFill
Mono.currentContext()
ANIMATE_TRANSITIONS=true
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public Info create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
new RouteCalculationResult(res,null,params,null)
createIntent().setAction(ACTION_FIND_DEVICE).putExtra(EXTRA_APP_UUID,start)
assertEquals(5,ti.nrOfInvocations)
arrayExpression == null
worldVertices.length < localVertices.length
lastPull == node
buf.openElement("url")
formatPoshiXML(content)
node == null
(sbn.getNotification().flags & Notification.FLAG_AUTOGROUP_SUMMARY) != 0
myWidth - myDelegate.getIconHeight()
LOG.error("src link in the context java doc window does not attached")
JournalArticleLocalServiceUtil.updateArticle(userId,groupId,0,journalArticleId,journalArticle.getVersion(),getMap(articleDefaultLocale,title),descriptionMap,content,"general",ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
mHeadsUpNotificationView.clear()
Reflection.methodHandle(type,"sizeOf",null)
ev.mDataSamples.length < ND
@Specialization protected Object fromByte(byte value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
DEFAULT_GROUP_OWNER_INTENT=7
String result=""; 
client.getGameState() != GameState.LOGGED_IN
new NTCredentials(username,auth.getPass(),localHost,domain)
rats.setConfig(editConfig.getText())
mavenBundle("info.cukes","cucumber-jvm-deps","1.0.4-SNAPSHOT")
showSelectionToggleButton.setSelected(false)
Boolean.valueOf(literalOption)
file.toString()
defaultCometSupport(useServlet30Async)
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),11)
UDecoder.URLDecode(candidate)
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ T parseLiteral(Object input); 
FRAME_STATS_COUNT=14
getTestName(false)
new Paint(Paint.ANTI_ALIAS_FLAG)
HistoryRecord r=(HistoryRecord)it.next(); 
Integer.valueOf(nextArgRequired())
MAX_DIMEN_FOR_ROUNDING=1080
Class.forName(SYSTEM_ACTIVITY_MANAGER_LINUX_CLASS)
@Specialization protected Object fromBoolean(boolean value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
final GridKernal grid=(GridKernal)ignite; 
doTestCompletionVariants("av10.xml","fill_parent","match_parent","wrap_content","@android:")
event.getTime() > currentPlayTime
new TaipProtocolDecoder(new TaipProtocol(),false)
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION)
String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n",CATALOG_NAME,TABLE_NAME,"col0","value0","pk1","keyvalue1")
cn.length() == 0
"Failed to generate [" + source + "]"
expect(cluster.getClusterName()).andReturn("cluster").times(2)
args.length >= index
LOGGER.debug("Could not perform drage and drop",nfe)
log.info("In OSGi: using programmatically wired maven parser")
HashMap<>
sleep(150)
Exception e
targetInfo != null
Map<Integer,Object>
mNextWakeFromIdle != null
new ExecutionEnvironment(env.getRunProfile(),env.getProject(),null,null,null,null)
Long dateObject=(Long)firstMessageElement.getAttributes().getAttribute("date"); 
r - scrollY
scheduleRemoveStartingWindow(wtoken)
IllegalStateException.class
getWrappedEngine().release()
latch.countDownFirst()
spendTime < 2005
getter.getRawReturnType()
device == AudioSystem.DEVICE_OUT_HDMI
new ExpandableItem()
@Override public ConfigValue get(int index){   return value.get(index); } 
126 + (USE_OLD_HISTORY ? 1000 : 0)
lib.getName()
new BaseAnalysisActionDialog(dialogTitle,"Analyze scope",myProject,analysisScope,name,true,analysisUIOptions)
@ConditionalOnEnablednHealthIndicator("mongo")
second.get(i)
minSlot > 1
ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
ap.getSsid()
expr.and(right)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"dbinfo",pw)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
-25
internalTransaction.getReceiveAddress()
create.isPrivate()
dist < bestdist
current.compareTo(position) <= 0
NSNumber.numberWithLong(val)
serialVersionUID=1L
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public String loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
input.getParameterField()
resultSet.getShort(index)
/**   * Replace the characters from startPos, inclusive, until endPos, exclusive, with the given string.  * @param startPos The position from which to start replacing, inclusive  * @param endPos The position at which to end replacing, exclusive  * @param replaceWith The string to replace with  */ public static Fix replace(int startPos,int endPos,String replaceWith){   return builder().replace(startPos,endPos,replaceWith).build(); } 
Boolean.getBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
handler.quit()
checkRegister(objectRegisterType,ReferenceCategories)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
tokens.toString()
System.currentTimeMillis() > firstDate
new SQLException("Error downloading gallery image " + imageUri)
sendMessage(CMD_STOP_AP)
Log_OC.e(TAG,"Initializing Fragments in onAccountChanged..")
attributes.getFlags()
mBiometricUnlock.stopAndShowBackup()
letters[0]
res.findViewById(R.id.avatar_bgrnd)
new StrutsSpringObjectFactory("constructor",null,null,msc,null,"true")
new NameAlias(tableNameAlias)
new ConnectionError(sm.getString("frameType.checkStream",this),Http2Error.PROTOCOL_ERROR)
assertArrayEquals(arr1,table.getBinaryByteArray(0,0))
URLUtils.currentUrlStartWith(toString())
mSelectPhotoView.getSelectFiles().size() > 0
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
Exception e
debugProcess.isAttached()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
mCurrIconRow != null & mCurrIconRow.isVisible()
UserHandle.getCallingUserId()
new SpannedString(new CustomSpanned(first),false)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy)
mContext.sendBroadcast(intent)
LOGGER.lifecycle(msg.apply())
DLStoreUtil.deleteDirectory(companyId,REPOSITORY_ID,path)
mappedCatalog != null
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static String get(String self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
new IngestInfo()
position.offset(mLeft,mRight)
timeDifferenceMilliseconds > maxTolerateTimeDifferenceMilliseconds
mSimpleCard.getVisibility() != View.VISIBLE
result.indexOf('}')
DateTimeUtils.createGregorianCalendar()
LOG.warn(e.getMessage())
getTimeout()
channel.write(res)
ev.mDataSamples.length < ND
_typeSettingsProperties.toSortedString()
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_configuration,_templateContextHelper)
Nd4j.create(this.data,this.arrayShape,this.arrayOrdering)
resource.getPath().endsWith("LanguageTool.uno.jar")
super.execute(executor,patchers)
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
tableHasColumn("MicroblogsEntry","creatorClassNameId")
new File(projectDirectory,"pom.xml").exists()
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",true)
selenium.isVisible("link=Control Panel")
appearance.getFont(attr)
checkPojoMetaClass()
ThreadLocal<JMeterContext>
WordPress.getCurrentBlog().getRemoteBlogId()
realm.assertThread()
SVID_SHIFT_WIDTH=7
restRequest.param("metric")
rect == null
request.getContentType().equals("application/x-www-form-urlencoded")
index > 0
masterComponents.length > 0
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
(i - blockStart) > 1
display.getMetrics(dm)
pMotionEvent.getX(1)
Slog.wtfStack(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
ColorResources.getColor("scrollBarDarkShadow")
FilteringClassLoader filteringClassLoader=getSystemFilteringClassLoader(defaultClassLoaderFactory,java9Compatible); 
Messages.getString(key,param1,param2)
JiveGlobals.getPropertyEncryptor().encrypt(propValue)
request.getServletPath()
lastIme == null
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs())
app.getString(in)
FunctionTypesKt.isExactExtensionFunctionType(supertype)
Utils.createInformativeDialog(mContext,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.dialog_import_error))
checkPojoMetaClass()
nodeString()
input.getInfoStepDefinitions()
_getParentUpstreamBranchName()
quality.samplingRate == this.samplingRate & quality.bitRate == this.bitRate
item.setState(new StringType(modeString))
StringBuilder content=new StringBuilder(""); 
id=19910
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
assertEquals(0.21926955145068244,mse,1e-8)
response.set(ROLLED_BACK)
TypeRemapper.createFrom(typeRemapper,additionalTypeMappings)
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,false,false)
event.getTime() > currentPlayTime
type.getConstructor()
InsertFinalStep<R>
typeSettingsProperties.toString()
IBackupManagerService svc=mService; 
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
mTouchMode == TOUCH_INIT_MODE
disableForUser(what,token,pkg,mCurrentUserId)
window != null
getService().hasPrimaryClip()
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
AbstractMethodError e
hr != null
field.getType()
new File(child)
!mProcessesReady
mContext.sendBroadcast(intent)
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
getName()
HIDDEN
PyExpressionStatement newExpression=createExpression(project,name,declaration); 
pathText.getText()
wms.getGeoServer().getSettings()
cache.clear(0)
isReserved(c)
popup.requestFocus()
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=7
millis > 28 * DateUtils.MILLIS_PER_DAY
mock.expectedMessageCount(0)
firstItemVisible && lastItemVisible
Thread.sleep(5000)
logger.info("Creating extern file for exports")
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
LOG.error("did not find superclass names when mapping inheritance....")
mListener.onInputUpdated(inputId)
e.printStackTrace()
tracesFile.mkdirs()
SCAN_STATUS_COMPLETE=1
mService.setUidPolicy(UID_A,POLICY_NONE)
this.url
AbstractConfiguredTarget.class
assertThat(pod).hasId("cheese")
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
mDataNotSet
wifiConfig.isValid()
trade.getPrice()
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data,mock(BindingResult.class))
List<Integer>
MAX_PERCENT_DIFFERENCE=0.1
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
colorModeClass.equals("ScaledSizeMode")
UIUtil.isActionClick(e)
PyQualifiedExpression.class
innerCache.put(reader,value)
selenium.isVisible("link=Control Panel")
activeSyncAccountIds.remove(syncAccount.getSyncAccountId())
new IllegalArgumentException("Advertising can't be both connectable and scannable")
m_data.getFixString((int)m_length)
HashMap<String,String>
from > to
d instanceof WebPageDetail
tag.setLabelPosition("left")
mInfo != null
assertEquals(2,hostAlertCount)
a.getInt(attr,0)
!mConnected
selenium.isVisible("link=Control Panel")
_logger != null
size > Message.MAX_SIZE
new IllegalAccessError("read-only")
routeName + "-" + namespace+ "."+ cheWorkspacesRoutingSuffix
next.stream()
TYPE_ADD_VOTE=10006
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
poList[1]
new SolrException(1,"error parsing event listeners",e,false)
logger.warn("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
logger.debug("defineClass pluginClass:{} cl:{}",className,classLoader)
TreeState.write(cursor,5,7,7,8)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=true
new URLClassLoader(classpath.toArray(new URL[classpath.size()]))
new CountDownLatch(1)
new AssertionError("One thread threw an exception",exception.get())
assertEquals(9,set.size())
compactionStarted.getAndSet(true)
SecurityActions.getModuleClassLoader(JACC_MODULE)
(status & 0x02000000) > 0
assertEquals(failures.size(),1)
CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(getProject()); 
JiveGlobals.getBooleanProperty("stream.management.active",false)
"Surface(native-token=" + mSurface + ")"
context == null
io.getCount(buf) >= idx
logger.error("Starting Jetty Azkaban Executor...")
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-date-time elements.  */ public ArrayValue nextLocalDateTimeArray(){   return Values.localDateTimeArray(nextLocalDateTimeArrayRaw(minArray(),maxArray())); } 
jobIds.isEmpty()
enabled=true
JvmDeclarationOriginKt.OtherOrigin(myClass,valuesFunction)
planDetailJson.getProductName()
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
RecentsVerticalScrollView.super.removeViewInLayout(view)
temporaryFolder.getRoot()
assertEquals(true,StringUtils.isNumeric(""))
lineArgs[1]
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17_1","JDK17_2")
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath",e)
Long.valueOf(nfcid2,16)
tw.release()
LOG.error("Async Kafka commit failed.",cause)
getSrcPath("checks/javadoc/Input_02.java")
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).mapError(this::mapError)
lock.isLocked()
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
err != 0
writeValue(writer,this.map.get(key),actualFactor,indent)
type.equalsIgnoreCase("boolean")
++n > columns.size()
Indexer.addMessage(companyId,groupId,categoryId,threadId,messageId,title,content)
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
DEBUG && okay && mAgent != null
getPageItems(PaginationRequest.of(10,1),_group.getGroupId(),getThemeDisplay(_group,LocaleUtil.getDefault()),new Filter(_filterParser.parse("contains(title,'title')")),Sort.emptySort())
subject.isEmpty()
mMountTable.resolve(getPath(lastInode)).getPath()
out.getVersion().onOrBefore(Version.V_1_4_0)
executorService.isTerminated()
new KettleException("Couldn't find hop '" + from + "' for reading from")
routingTable.getRoute(packet.getFrom()).process(packet)
ModalityKt.isFinal(this)
SamplingProfiler.newThreadGroupTheadSet(group)
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default")
e.getMessage()
mSmallBatteryDevice ? 3 : 30
logger.error(e)
JavaSdkImpl.getMockJdk("java 1.5")
Arrays.asList("dn1","dn2","dn3","dn4","dn5")
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .run()
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     updateAllEditors();   } } )
address.getHostText()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN,UNSET)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new ParameterSpec(valueName,array,nodeData.getTypeSystem().getGenericType(),false,Cardinality.ONE)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
selenium.isVisible("link=Control Panel")
event.getTime() > currentPlayTime
PFLAG3_FITTING_SYSTEM_WINDOWS
Long.valueOf(time)
-1
rangeTable.getRowCountApproximation()
selenium.isVisible("link=Control Panel")
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
targetType instanceof ModuleInducedTargetType
new EclipseWtpmodulesWriter(getLog()).write(outputDir,executedProject,reactorArtifacts,sourceDirs,localRepository)
new TaskRunnerFactory("ActiveMQ Session Task",ThreadPriorities.INBOUND_CLIENT_SESSION,true,1000)
mNextNonWakeupDeliveryTime > nowELAPSED
log.debug("Testing debug(msg,null)",null)
newDefaultSubIdObj.equals(mDefaultSubId)
(String)config.get("location")
selenium.isVisible("link=Control Panel")
notation.<ArtifactFile>flatMap(new Transformer<ArtifactFile,Object>(){   @Override public ArtifactFile transform(  Object value){     ArtifactFile artifactFile;     if (value instanceof FileSystemLocation) {       FileSystemLocation location=(FileSystemLocation)value;       artifactFile=new ArtifactFile(location.getAsFile(),module.getVersion());     }  else     if (value instanceof File) {       artifactFile=new ArtifactFile((File)value,module.getVersion());     }  else {       throw new InvalidUserDataException(String.format("Cannot convert provided value (%s) to a file.",value));     }     return artifactFile;   } } )
Slog.e(TAG,"Invalid wallpaper data")
from("direct:b").delay(3000)
SystemInfo.isFileSystemCaseSensitive
tableHasData(newTableName)
DBG=true
a.getFloat(attr,0)
typeSettingsProperties.toSortedString()
mWM.isKeyguardSecure()
sp.edit().putBoolean(PREF_USER_REFUSED_SIGN_IN,refused).commit()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENT_DETAILS))
Boolean.valueOf(conf.get("mapreduce.job.is-mem-hungry"))
type.getConstructor()
insertBeforeCursor(editor,context)
1 << 2
versionMatch.group(4)
SceneApplication.getApplication().getRenderer().readFrameBuffer(offBuffer,cpuBuf)
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
connectedHeaders.setAcceptVersion("1.2")
DefaultAtmosphereRequest.newInstance()
ssl.has(CommonAttributes.PROTOCOL)
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
ScanResult.is24GHz(frequency)
new HiveTableTypeMapping()
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile)
onDetachedFromWindows()
idleTime=60
@Override public void setting(int identifier,long value) throws ConnectionError {   trace.append("0-Settings-[" + identifier + "]-["+ value+ "]\n");   remoteSettings.set(identifier,value); } 
length % dictionarySize
application.map(version::compareTo).orElse(0) > 0
mNextWakeFromIdle != null
XContentType.YAML.restContentType()
nrRecordsCompare++
typTypeStr != null
adjustedEndTimeUs=startTimeUs
data.remaining()
mFacetCategoryMap.get(packageName)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
assertEquals(10,events.size())
ORIENTATION_SETTLE_TIME_MS=100
telephony.getMergedSubscriberIds()
Iterable<Boolean>
private RunningProcesList mRunningProcessList=new RunningProcesList(); 
interceptor.intercept(invocation)
clazzes_.remove(HIDDEN_OFF)
_excludeDirPathMatchers.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
numPoints / 2
app().repositories()
s3dir + ".dir"
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
mPowerManager.isScreenOn()
getContext().registerReceiver(mReceiver,filter)
XmppStringUtils.parseBareAddress(user)
new KMLNetworkLinkTransformer(wms)
isNodeHealing(node.getNodeId())
Long.valueOf(val)
socket.closeLatch.await(1,TimeUnit.SECONDS)
tag.getObjectId()
connectionProperties.contains("oracle.password")
option.getType()
ProjectInspectionProfileManagerImpl.getInstance(project)
newHttpConnection(this)
assertEquals(5,tool.check("I can give you more a detailed description.").size())
FSA.getInstance(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
mMenu.getVisibleItems()
s.count()
ExecutionParameters oldParameters
selenium.isVisible("link=Control Panel")
new ByteBuddy(ClassFileVersion.JAVA_V8).subclass(Object.class).implement(Class.forName(DEFAULT_METHOD_INTERFACE)).implement(Class.forName(CONFLICTING_DEFAULT_METHOD_INTERFACE)).method(named("foo")).intercept(DefaultMethodCall.prioritize(Class.forName(DEFAULT_METHOD_INTERFACE))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_YES)
securityMode != SecurityMode.None
speed < 80
classPropertyFetcher.getPropertyType(property)
tableHasColumn("MicroblogsEntry","receiverUserId")
assertEquals(tick7,results_overlapped_by.get(0))
(NotificationAction)null
selenium.isVisible("link=Control Panel")
oldVb.getBufferType() == VertexBuffer.Type.Index
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
val=1
entry.notification.clone()
topPanel.addView(mCustomTitleView,lp)
Integer.valueOf(time.split(":")[0])
mLocalDirtyRect.setEmpty()
assertNotNull(message + ": expected should not be null",value)
AbstractMethodError e
list.add(v)
ai.uid <= Process.FIRST_APPLICATION_UID
items.get(index)
e.getMessage()
vb.getData().clear()
id=15850
taskService.createTaskQuery().orderByTaskId()
new PreFlexRWSegmentInfosFormat()
city.getID()
taken > 190
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBefore(new Date())
getSitesCount() == 1
new LinkedHashMap<>()
sstable.markCompacted()
mIconComplete != 0
ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
IllegalStateException ex
depthErrorXYZ("modelY")
reboot(null)
items[20]
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).description(message)
BTraceUtils.setInstrLevel(1)
!cmdKey.equals("-help") && !cmdKey.equals("-failover")
auditStrategy.addEntityAtRevisionRestriction(globalCfg,qb,rootParameters,INDEX_ENTITY_ALIAS + "." + revisionPropertyPath,INDEX_ENTITY_ALIAS + "." + verEntCfg.getRevisionEndFieldName(),false,referencedIdData,revisionPropertyPath,originalIdPropertyName,INDEX_ENTITY_ALIAS,INDEX_ENTITY_ALIAS_DEF_AUD_STR,true)
webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
GrMethod constructor
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
msgType <= values.length
realm.assertThread()
info.crashInfo.stackTrace.length() > 10000
c.networkId == netId
Assert.assertEquals(20,as.getAllGlobalProperties().size())
grantAlias == null
Long.valueOf(args[ai])
setTo(replyTos)
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("DHE-DSS-DES-CBC3-SHA",KeyExchange.EDH,Authentication.DSS,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA")
slot_name_value_pair(context,fchg)
status().isMovedTemporarily()
@NotNull
index > 0
dstCursor != null
case MESSAGES: 
input.getPosition()
new NagiosNscaStub(25667,"secret")
expiresOn.getTime()
logger.info("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
leftExpression.getName()
!exists
moduleRegistry.getModule("gradle-test-kit").getClasspath()
clusterSet.getClusterCount() < initialClusterCount
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
super.onResolveLayoutDirection(layoutDirection)
configuredScriptEngineNames == null
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
assertEquals(ex.getCause().getMessage(),"Unable to read 2 bytes, got 0")
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage",ioe)
a.getFloat(attr,0)
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
getDialect() instanceof PostgreSQLDialect
data.getSenderId() != myUid()
resultTargetUser != null
offset=1
poolTimeoutMillis < 0
new int[8571]
selenium.isVisible("link=Control Panel")
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
getLastNonConfigurationInstance()
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47))
mAttributes.getFlags()
RtlUtils.isLtr(english1)
distanceToView(focused) > 0
put(null,params,responseHandler)
ensureGreen()
poList[1]
Integer.valueOf(stackIdStr)
e.getMessage()
Collection<PostgreTableReal>
new Error("type=" + type)
_connector.getResponses("GET /foo?data=42 HTTP/1.0\n\n")
bytesValue.length < 55
61L + 122L
retriever.captureFrame()
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
entry.get() == null
enclosingHeight - insetBottom
index > 5
dir=2
StringUtils.isNotBlank(value) || WebUtils.isRememberMeAuthenticationEnabled(requestContext)
rawType.getTypeName()
log.info("Performing lookup: %s --> %s",ips,retVal)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
mActiveStreamType == -1
selenium.isVisible("link=Control Panel")
getBinaryTupledSet()
hour != 0
readStayAwakeConditions()
newDefaultSubIdObj.equals(mDefaultSubId)
aeron.addPublication(controlRequestChannel,controlRequestStreamId)
plugin.getPath()
if (DBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
NodeUtil.getFunctionNameNode(enclosingFunction)
getTimeout(ticket)
c * b
Long.valueOf(val)
Map<Object,RealmObject>
target.getContext().isIncluded(nodeName)
clientState.getKeyspace()
U extends Identifier
unsafe.compareAndSetByte(container,booleanOffset,(byte)17,(byte)121)
T
type.getConstructor()
addError(msg,e)
private final DomAnchorImpl myParent; 
Slog.e(TAG,"Invalid wallpaper data")
CodeStyleSettings.class.getDeclaredField(name)
ListDataSink.get(2)
className.indexOf(CONTROLLER_SUFFIX)
postfix.equals("id")
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_YES)
fragmentEntryPersistence.filterFindByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
StepVerifier.create(Flux.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).expectError(IllegalStateException.class)
clock.equals(newClock)
this.args.nodeId()
amount.toFriendlyString()
Integer.valueOf(p.getProperty("numberid.id"))
FunctionTypesKt.isExactFunctionOrExtensionFunctionType(((ClassDescriptor)containingDeclaration).getDefaultType())
parameters != null
sampleOffset * 1000
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
lock.close()
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
localX2 * cos
message.getContact()
StatBuckets.prettyUptime(secs)
type.getConstructor()
settings.isAutoCommitOnCherryPick() == myAutoCommitOnCherryPick.isSelected()
StringUtil.contains(text,endChar,next,startChar)
Slog.wtf(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
mAttachInfo == null
LOG.error("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
Slog.w("Could not read " + path,e)
getPosition(identifier)
List<Integer>
delegate.toJson(new Envelope<>(value))
selenium.isVisible("link=Control Panel")
LOGGER.debug(e.getMessage(),e)
Assert.assertEquals("Wrong messages count: " + messages.size(),messages.size(),1)
DiagnosticType.disabled("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
position == buffer.length
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).otherwiseIfEmpty(createSession(exchange))
sizeNeeded >= items.length
size < maxListFill
MAX_LENGTH=100
String tag
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
new CountDownLatch(3)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY,Collections.emptyList())
processInstance.getId()
ImportClassAndFunFix.createFactory()
shouldAutoCancel(sbn)
new StringBuilder(input.length())
this(parameters,new StringBuilder(),false); 
name.indexOf('.')
connectionProperties.contains("oracle.url")
getCol().getDecks().id(deckName,true)
logger.warn("Operation failed for accountId='{}' accountExternalKey='{}' error='{}'",paymentStateContext.getAccount().getExternalKey(),e.getMessage())
TRIES_TO_DOWNLOAD=20
url.substring(pathStartIndexInUrl,url.length())
LOG.error(e)
producer.requested > 0
mWm.freezeRotation()
lp.onResolveLayoutDirection(layoutDirection)
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
name + ".DEBUG"
type == Sensor.TYPE_AMBIENT_TEMPERATURE
mJobs.get(i)
fb.capacity()
selenium.isVisible("link=Control Panel")
deferredSyntaxAllowedAsLiteralValue=value
randomAlphaOfLengthBetween(1,20)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted,crestricted)
PoolResources.fixed("tcp-client-pool")
Collections.unmodifiableCollection(customNonFilteredExtensions)
saveJSONObject(json,filename)
mBiometricUnlock.stopAndShowBackup()
log.logDetailed(toString(),"File [" + realFilename + "] doesn't exist!")
mWorkerId + BASE_FILE_NUMBER
anchorView.getWindowToken()
/**   * <p>A  {@code TaskOutputs} represents the outputs of a task.</p><p>You can obtain a  {@code TaskOutputs} instance using {@link org.gradle.api.Task#getOutputs()}.</p>  */ @HasInternalProtocol public interface TaskOutputs extends TaskOutputsVersion2 {   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given closure is executed at task execution time. The closure is passed the task as a parameter. If the closure returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateClosure The closure to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Closure upToDateClosure);   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given spec is evaluated at task execution time. If the spec returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateSpec The spec to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Spec<? super Task> upToDateSpec);   /**   * <p>Cache the results of the task only if the given closure returns true.  The closure will be evaluated at task execution time, not during configuration.  The closure will be passed a single parameter, this task. If the closure returns false, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param closure code to execute to determine if the results of the task should be cached.  */   @Incubating void cacheIf(  Closure closure);   /**   * <p>Cache the results of the task only if the given spec is satisfied. The spec will be evaluated at task execution time, not during configuration. If the Spec is not satisfied, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param spec specifies if the results of the task should be cached.  */   @Incubating void cacheIf(  Spec<? super Task> spec);   /**   * Returns true if this task has declared any outputs. Note that a task may be able to produce output files and still have an empty set of output files.  * @return true if this task has declared any outputs, otherwise false.  */   boolean getHasOutput();   /**   * Returns the output files of this task.  * @return The output files. Returns an empty collection if this task has no output files.  */   FileCollection getFiles();   /**   * Registers some output files for this task.  * @param paths The output files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder files(  Object... paths);   /**   * Registers some output file for this task.  * @param path The output file. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder file(  Object path);   /**   * Registers an output directory for this task.  * @param path The output directory. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder dir(  Object path); } 
settings.readLPw(null)
Environment.getRootDirectory()
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this),fcmKey)
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while")
capacity > 1 << 30
selenium.isVisible("link=Control Panel")
notificationManager.cancel(NOTIFICATION_ID,id)
new IllegalArgumentException()
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
new SnippetInstaller(runtime,target,new Assumptions(false))
this.field_92017_k
selenium.isVisible("link=Control Panel")
r != null
retriever.captureFrame()
new FPSAnimator(window,60,true)
ClassLoader.class.getMethod("findLibrary",new Class[]{String.class})
onPackageAppeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
reportExceptions(result,basedir)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
info.crashInfo.stackTrace.length() > 10000
sstable.markCompacted()
timeout > 0
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
new Paint(Paint.ANTI_ALIAS_FLAG)
mListView.getChildAt(index)
162 + (USE_OLD_HISTORY ? 1000 : 0)
returnFalseIfFailed(code,"super." + superMtd,BUF_VAR)
myStorage.isMapped()
mappers.mapper().searchAnalyzer()
_logloss / _count
params.getSimulatePlatformVersion()
getTitle()
mBluetoothService.notifyIncomingA2dpConnection(address,false)
checkPojoMetaClass()
List<Map<String,Object>>
Exception e
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=500
w1.getGradient(i,alpha)
markerYear == currentYear
w1.getGradient(target,label - expTable[(int)((f + MAX_EXP) * (expTable.length / MAX_EXP / 2))])
OutputStreamAppender<?>
am.getClass().getDeclaredField("mContext")
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout)
url.toServiceString()
object=event.getOldObject()
_typeSettingsProperties.toString()
_formatWriteFeatures != 0
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
fragment == null
compensationRange.inRange(compensation)
(aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
input.getParameterField()
new GdxRuntimeException("Failure reading Vorbis.")
commit.getAuthorIdent()
obj instanceof ManagedTestObject
javaVersion < 9
OPEN
eq(0)
NativeDecoder.matches(out,getMatchingOutputFormats(inputFormat))
Integer.valueOf(attrValue)
Representor<T,U>
new SpockTimeoutError(seconds,msg)
VolumeInfo vol
logger.info("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
containerLog.error(sm.getString("dataSourceRealm.getPassword.exception",username))
getTestName(false)
temporaryFolder.getRoot()
selenium.isVisible("link=Control Panel")
mock.expectedMessageCount(3)
endPos < paraEnd
turnImminent=1
InetAddress.getLocalHost()
masm.movl(AMD64.r13,object)
selenium.isVisible("link=Control Panel")
future.channel().write(request)
sendMessage(1000)
return false; 
format != null
IndexReader.open(store,true)
mAttributes.getFlags()
new IndexWriter(dir2,new StandardAnalyzer(),true)
origin.realComponent().doubleValue() < other
adapter.item(R.string.layer_overlay).selected(overlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_up_dark,R.drawable.ic_action_up_light).listen(listener).position(10)
ColorResources.getColor("controlColor")
ldapAuthConfiguration.enabled()
new GridDhtPartitionDemander(cctx,busyLock)
visitedArtifacts.select(Specs.satisfyAll(),transformer.getFromAttributes(),element -> {   return dependencies.contains(element); } ,true)
desiredX >= 0
selenium.isVisible("link=Control Panel")
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
sshd.stop()
terrainQuadGrid.getTerrainQuadAt(location)
position(f2)
case MACOS: 
JPQLQuery<?>
IllegalArgumentException.class
query.contains("about:")
loopButton.isEnabled()
input.slices()
GridComponentType.HADOOP.create(true)
properties.contains(STRING_RECENT_SEARCHES)
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClasses()
mf.getColumnName()
this.identityProvider.getId()
verify(mWifiService,never()).stopLocalOnlyHotspot()
string.length() / maxIdxPerLine + 1
Long.valueOf(attrValue)
setFloatingLabel(mode)
alluxioUri.getPath()
DefaultCacheKeysFactory.getCollectionId(cacheKey)
new Paint(Paint.ANTI_ALIAS_FLAG)
o == BlockingSubscriber.TERMINATED
dynamicType.getLoaded().getConstructor()
InvalidPathException.class
selenium.isVisible("link=Control Panel")
return false; 
selenium.isVisible("link=Control Panel")
new IOException(sm.getString("iib.requestheadertoolarge.error"))
item.isDownloaded()
Observable.fromCallable(() -> sync.update(mangaSync))
(KvCoder)windowedInputCoder
coverageDataManager.addCoverageSuite(config.getGeneratedName() + " Coverage Results",fileProvider,config.getPatterns(),new Date().getTime(),null,config.getCoverageRunner(),config.isTrackPerTestCoverage() && !config.isSampling())
minLearningRate=0.01
converter.compile("/data/MultiSheetDST.xls","Another Sheet","/templates/test_template1.drl",21,2)
this.configuration.getMappedStatement(id)
SCAN_STATUS_PARTIAL=0
loaded.getLoaded().getConstructor()
!baseDir.exists()
ShoppingWebUpgrade.class
super.onDetachedFromWindow()
getDir()
position >= 0
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
getWidth()
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),e)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
ATLAS_MAP_ENTRY_FIELD_COUNT=4
container.lookup(BuildContextManager.ROLE)
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer())
ignoreResourceNotFound=false
ps.setString(i,parameter)
LOGGER.error("Something went wront : {}",errorMessage,element)
dlFileShortcutLocalService.deleteDLFileShortcut(fileShortcutId)
ONE_MINUS_DST_ALPA(7)
mapper.getTypeFactory().uncheckedSimpleType(InspectContainerResponse.class)
!isEnabled()
IServiceManager.getService("manager")
JsonUt8Writer.string(buffer,strings[i])
Thread.sleep(5000)
a.getFloat(attr,0)
Thread.sleep(5000)
req.getContentLength()
RemoteException e
isCancelled()
a.getDimensionPixelOffset(attr,0)
NullPointerException.class
enabled=true
selenium.isVisible("link=Control Panel")
mCurrentVrService == null
Thread.sleep(1000)
telephony.getLteOnCdmaModeForSubscriber(subId)
DataManager.getInstance().getDataContext()
new CrypticClue("Search the upstairs drawers of a house in a village where pirates are known to have a good time.","Pirate",new WorldPoint(2809,3165,1),"The house in the southeast corner of Brimhaven, northeast of Davon's Amulet Store. Kill any Pirate located around Brimhaven to obtain the key.")
tableHasColumn("MicroblogsEntry","creatorClassNameId")
LOG.error("Node " + path + " already exists and this is not a "+ "retry")
previousAnnotation.compareTo(annotation)
!mDownloadXtraDataPending
connection.zrangeByLex(key,max,min)
node1.checkTreeEqualsSilent(node2)
Long.valueOf(attrValue)
HashSet<String>
entry.notification.clone()
names[i]
m.getClass()
formatTime(fullWifiLockOnTime / 1000)
con.commit()
selenium.isVisible("link=Control Panel")
resultEndpoint.assertIsSatisfied(5000)
textureView != null
mPowerManager.wakeUp(SystemClock.uptimeMillis())
r.curApp != null
mQsContainer.getX()
List<InternalTransactionPogo>
Math.min(implicitOffset - 1,0)
this.getDrawnBoundingBoxE6().getLongitudeSpanE6()
selenium.isVisible("link=Control Panel")
new IllegalStateException()
(exception ? throwable instanceof RuntimeException : throwable == null)
level >= 100
DEFAULT_CAPACITY=4000
context.proxyOf(entity,false)
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFSystem,true,false)
theCancelButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"))
Number.class
mStackScroller.getChildAtPosition(x,y)
public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
destination.length + offset
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
ClassFileExtraction.of(Foo.class,Bar.class)
fingerId == 0
private FBTree myCurrentTree; 
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
/**   * Get the <i>i</i>th oldest event currently in the buffer. If <em>i</em> is outside the range 0 to the number of elements currently in the buffer, then <code>null</code> is returned.  */ public Object get(int i){   if (i < 0 || i >= numElems)   return null;   return ea[(first + i) % maxSize]; } 
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
isVideoScalingModeSupported(mode)
Error err
account.getExternalKey()
annotationHelper.printError(element,"%s annotated element should not have a private constructor")
new byte[10]
this.assignmentManager.isRegionInTransition(regionInfo) == null
this.remoteRepositories=remoteRepostories
Long.class
oriMenu.isVisible()
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
new MultiSearchResponse(new MultiSearchResponse.Item[]{new MultiSearchResponse.Item(response,null)})
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
counter >= max
Thread.sleep(5000)
log.error("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
logger.debug("{} {}",errorCode,message)
(color & 0x00FFFFFF) & (alpha << 24)
mHandler.postDelayed(pae,timeout)
selenium.isVisible("link=Control Panel")
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
request.getRequestURI()
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
page.getMembersByIdx(0).shouldBeNamed("admin","Administrator").shouldHaveGroups(1)
logger.error("Error creating pool to " + host,t)
new IllegalStateException()
executeWrappedCommandProtocol(databaseName,getCommand(),createCommandDecoder(),connection,commandTransformer(source))
order.isCurrent()
selenium.isVisible("link=Control Panel")
logger.debug("Trying to map {} to {}",t,path)
mServerFile.getModificationTimestamp() > mLocalFile.getModificationTimestampAtLastSyncForData()
i >= 0
LongStream.range(min,max)
ASHMEM_SIZE=296
lp.onResolveLayoutDirection(layoutDirection)
parameter.getTypeElement()
mState.mPivotXRel == relative
mon.startsWith("okt")
matcher.matches()
pubnub.getConfiguration().getProxyAuthenticator()
logger.warn("Cannot handle shuffle command ({})",e.getMessage())
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
mImm.showStatusIcon(mToken,getPackageName(),iconResId)
seconds * 1000
obj != proxiedObj
PASSWORD_SCRYPT_N=13
LOG.error("Memory Usage for the Broker (" + memLimit / (1024 * 1024) + " mb) is more than the maximum available for the JVM: " + jvmLimit / (1024 * 1024) + " mb - resetting to 70% of maximum available: " + (usage.getMemoryUsage().getLimit() / (1024 * 1024)) + " mb")
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
PrivacyManager.getRestricted(getApplicationContext(),xAppInfo.getUid(),false)
this.indexBlockSize=4096
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
id=11
type.getConstructor()
onDetachedFromWindow()
Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))
textOffset > document.getTextLength()
matrix != null
selenium.isVisible("link=Control Panel")
_dlGroupServiceSettings != null
512 * 104 * 1024
Channel channel
new Paint(Paint.ANTI_ALIAS_FLAG)
LAST_VERSION=553
statistics.addRemoveTimeNano(System.nanoTime() - start)
Module module=new SimpleModule().addAbstractTypeMapping(IContainer.class,MyContainer.class); 
out.writeObject(function)
new GridServicesImpl(ctx,this,subjId)
file.delete()
Thread.sleep(5000)
logger.info("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER
Site.me().setRetryTimes(3).setSleepTime(100)
@UnsupportedAppUsage
Map<String,String>
preciseExchangeAmount - exchangeAmount >= 0.000001f
protected abstract BlockBuilder getBlock(); 
n <= colP.getInt(i)
STATUS_DRAW=0x2
assertEquals(2,result.getAuthorities().size())
context.registerSubsystem(SUBSYSTEM_NAME,1,0)
Thread.sleep(5000)
mDataAuthorities == null
level >= 100
stores.next().getAssertMap()
event.getFile().getLength() < 0
LOG.error("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
printf(") at %p (",exceptionOop.rawValue(),returnAddress.rawValue())
startBounds.width()
AttributeBinding attributeBinding
clipItem.getText()
folder.getGroupId()
shape.getMin().x
schemeSpecificParts != null
new TreePrinter<>(node,layout,stableGen,unstableGen).printTree(cursor,System.out,true)
callerPrincipalCallback == null
Integer.valueOf(matcher.group(1))
tvShowFragment != null
mConnector.execute("volume","format",vol.id)
assertEquals(12,tokens.size())
-120
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,"struct","struct")
config.getBroadcasterFactory().lookup(m.broadcaster(),true)
diff >= 86400
public class CourierNew extends FontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
botToken != null
from >= to
System.currentTimeMillis()
type.getConstructor()
heartBeatTimerTask != null
mDisplay.getMetrics(mDisplayMetrics)
telephony.isIdle()
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
NetworkUtils.isNetworkAvailable(getActivity())
private ErrorWrapperEmbeddedServletContainerFactory filter=new ErrorWrapperEmbeddedServletContainerFactory(); 
this.restTemplate.postForObject(webhookUrl,message,Void.class)
telephony.isIdle()
mGpsListener != null
new ServletHolder(getTransactionCountByBlockNum)
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
qname.startsWith(CommonClassNames.JAVA_LANG_STRING)
@Override public Value emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new AMD64ArrayEqualsOp(this,kind,result,array1,array2,asAllocatable(length)));   return result; } 
i >> 48
TelephonyManager.getDefault().getPhoneType()
reservedWords.contains(codegenProperty.datatypeWithEnum)
testClass.getName()
owner == null
relatedProduct.getProduct()
toolchainBuilder.addCompilerFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
ArrayList<String>
typeSettingsProperties.toSortedString()
this.logger.isWarnEnabled()
Arrays.asList("txt","text","json","xml","atom","rss","png","jpe","jpeg","jpg","gif","wbmp","bmp")
lock.isLocked()
!myIsDisposed && editor.getComponent().isShowing()
a.indexOf(':')
addr.toString()
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "label".equals(key)
return 1; 
assertEquals("Response header " + name,result.getResponse().getHeader(name),value)
project == null
!mDreamsEnabledByDefaultConfig
myFixture.testCompletionVariants("/jsp/actionLink-completionvariants-no-namespace.jsp","/","/actionLink/")
applyCurrentState()
bridgeMethod.getActualModifiers(true)
markEverythingDirty()
config != null || !config.isEmpty()
holder == null
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") IllegalStateException sessionTypeNotSpecified(String bean); 
SecurityUtil.remove(instance)
HeaderBuilder.this
Boolean.valueOf(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
tiled != null
exp instanceof ConnectTransportException
collector.getRangeCountersToBeDisplayed(range)
TelephonyManager.getDefault().getPhoneType()
type.equals("")
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
onDetachedFromWindows()
SKELETONS_VERSION=14
activeEditor.checkModified(false)
comparator.compare(value,answer) < 0
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
MultiFields.getFields(index1)
sep < 0
loaded.getLoaded().getConstructor()
put("1.7",CompilerOptions_VERSION_1_6)
holder == null
return false; 
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
eq(true)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource)
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
movementComponent.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
_("")
realm.assertThread()
timeNanos > DateTimeUtils.NANOS_PER_DAY
mSupportsSpeed ? 1 : 0
enableRefreshTime=false
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(builder)
WebSettings.setTextSize(WebSettings.TextSize.SMALLER)
loadAnimator(fragment,transition,true,transitionStyle)
stream.transportReportStatus(status,false,new Metadata())
mAuthorities.get(i)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
myElementHint != null
assertClusterSize(2,nodes[0])
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValue()
other.getClass().toString()
Thread.sleep(100)
mCurrentVrService == null
responseClass == Void.class
new RepresentorImpl.BuilderImpl<>(typeClass,nameFunction,biConsumer,relatedCollectionSupplier)
newTypeInfo.keySet()
loaded.getLoaded().getConstructor()
impl.getClass().getMethod("join",InetAddress.class)
metadata.getPropertyIterator()
FBUtilities.getBroadcastAddress()
Math.min(desired,height)
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask)
DEBUG=true
ExportImportConfigurationParameterMapFactoryUtil.buildParameterMap()
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
final SimulatedTrackball mSimulatedTrackball; 
Object item
matches.get(0)
pos1.getBlockX()
Math.abs(path.getDistance() - distance) > 5
a.getDimensionPixelOffset(attr,0)
new StoreFile(this.fs,linkFilePath,conf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,null,false)
synchronized (mAccounts) {   writeStatisticsLocked(); } 
AMQ5921Test.class
mRepeat > 1
Long.valueOf(val)
private static DisplayEnvironment env; 
String.class
origin.realComponent().doubleValue() > other
UserHandle.getCallingUserId()
NoClassDefFoundError e
event.getX()
selenium.isVisible("link=Control Panel")
timeout=5000
position < firstPos
Thread.sleep(5000)
new ShowArticleOnTouchListener(title,activity,helpFileName)
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getGroupId(),assetTagName)
contentEncoding != null
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
Calendar.getInstance(JSON.defaultLocale)
(visibility & VISIBILITY_MASK) == VISIBLE
gatt.enableAdverisingSet(this.advertiserId,enable,timeout)
progress < 6000
new TimedTransRunner("test/org/pentaho/di/run/sortedmerge/SortedMergeSimple.ktr",LogWriter.LOG_LEVEL_ERROR,AllRunTests.getOldTargetDatabase(),AllRunTests.getNewTargetDatabase(),1000)
Preconditions.checkNotNull(manager)
lhs == null
selenium.isVisible("link=Control Panel")
loaded.getLoaded().getConstructor()
next_write_buffers.get(0)
i != Integer.MAX_VALUE
selenium.isVisible("link=Control Panel")
Timber.e("Dismiss dialogs")
Exception exception
searchUICore.search(text,new ResultMatcher<SearchResult>(){   SearchResultCollection regionResultCollection=null;   SearchCoreAPI regionResultApi=null;   List<SearchResult> results=new ArrayList<>();   @Override public boolean publish(  SearchResult object){     if (paused || cancelPrev) {       if (results.size() > 0) {         getResultCollection().addSearchResults(results,true,true);       }       return false;     } switch (object.objectType) { case SEARCH_API_FINISHED:       final SearchCoreAPI searchApi=(SearchCoreAPI)object.object;     final List<SearchResult> apiResults;   final SearchPhrase phrase=object.requiredSearchPhrase; final SearchCoreAPI regionApi=regionResultApi; final SearchResultCollection regionCollection=regionResultCollection; final boolean hasRegionCollection=(searchApi == regionApi && regionCollection != null); if (hasRegionCollection) { apiResults=regionCollection.getCurrentSearchResults(); }  else { apiResults=results; } regionResultApi=null; regionResultCollection=null; results=new ArrayList<>(); showApiResults(apiResults,phrase,hasRegionCollection); break; case SEARCH_API_REGION_FINISHED: regionResultApi=(SearchCoreAPI)object.object; final SearchPhrase regionPhrase=object.requiredSearchPhrase; regionResultCollection=new SearchResultCollection(regionPhrase).addSearchResults(results,true,true); showRegionResults(regionResultCollection); break; case PARTIAL_LOCATION: break; default : results.add(object); } return false; } @Override public boolean isCancelled(){ return paused || cancelPrev; } } )
new IntervalData(target,lirGenRes,registerAllocationConfig,trace)
tableHistory.getHistoryIdsExceptOfHistType(Model.getSingleton().getSession().getSessionId(),HistoryReference.TYPE_TEMPORARY)
Measures.RR(results,test)
msg.payload().copy()
center.getY()
get(PLUGIN_BUNDLE_PATH)
users.toArray()
ifcg.addr == null
removeModelSpecificMarkup(base,pattern)
slotId == 0
Rect r=(Rect)o; 
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
fourCC.equalsIgnoreCase("TTML")
getEffectiveCleartextTrafficPermitted()
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
JSONValue.parse(value)
note == null
scope.getLocalVariable(name)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character")
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
side.toString()
Gdx.files.internal(fileName).nameWithoutExtension()
sDefaults.putBoolean(KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL,true)
Slog.wtfStack(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
in.markReaderIndex().readChar()
ResourceFilter.class
new TraceBasedLocalRedeclarationChecker(trace)
line.substring(0,p).trim().toLowerCase()
Error err
!portletDataContext.getBooleanParameter(NAMESPACE,"record-sets")
ON_TOP
new FormAttachment(wReplace,-margin)
Arrays.asList(HTTPConstants.GET,HTTPConstants.HEAD,HTTPConstants.OPTIONS,HTTPConstants.DELETE,HTTPConstants.TRACE)
assertEquals(0,beanInfo.getAttributes().length)
this.data=data
contentType != null
getService().animateCollapse()
"$" + functionName
telephony.isIdle()
parent instanceof AppWidgetHostView
type.getConstructor()
Log_OC.e(TAG,"onSaveInstanceState()")
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
id=40
mWM.removeView(mView)
available > 0
tableHasColumn("Calendar","timeZoneId")
Thread.sleep(100)
_log.error(ioe,ioe)
Helpers.msgShort(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
scrollWebElementIntoView(webDriver,webElement)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(id)
delegates.tabs.findTabMapEntry(transMeta)
CharSequence message
@Override public MutableLongValue reduce(List<MutableLongValue> combinedResultList){   long reducedValue=0;   for (  MutableLongValue value : combinedResultList) {     reducedValue+=value.longValue();   }   return new MutableLongValue(reducedValue); } 
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
availScrollRange == 0
log.error("Expected " + s.getStyleId() + " to have <w:basedOn ??")
mStackScroller.getChildAtPosition(x,y)
Long.valueOf(attrValue)
return false; 
type.endsWith(type)
mSyncStatus.get(i)
Assert.assertEquals(last,next)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
getMyApplication().getSelectedGpxHelper().selectGpxFile(model.getGpx(),false)
mapLayerConfiguration.setOpacity(((float)cachedOverlayTransparency) / 255.0f)
FluentIterable.of(method.getAnnotations())
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
postfix.equals("id")
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
new IllegalArgumentException()
mUserPaddingEnd > 0
type.getConstructor()
getPositionForView(switchView) < getHeaderViewsCount()
OsmandPreference<Boolean>
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
args.length > 1
ap.getSsid()
selenium.isVisible("link=Control Panel")
IllegalArgumentException iae
hasNextChunk()
mRvc != null
analysis.getTypeWithCoercions(aggregate)
displayList != null
config.properties().get(REDIS_SHARED_POOL) == null
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,message)
new Intent()
portletDataContext.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Log.w(TAG,"setSubtitleAnchor in MediaPlayer")
Thread.currentThread().interrupted()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
addr.toString()
vb.getData().capacity()
/**   * @author Sergey.Malenkov  */ public class GradientViewport extends JViewport {   private final Insets myInsets;   private final boolean myAlways;   public GradientViewport(  Component view,  Insets insets,  boolean forScrollBars){     myInsets=new Insets(insets.top,insets.left,insets.bottom,insets.right);     myAlways=forScrollBars;     setView(view);   }   protected Component getHeader(){     return null;   }   @Nullable protected Color getViewColor(){     Component view=getView();     return view == null ? null : view.getBackground();   }   @Override public void paint(  Graphics g){     super.paint(g);     paintGradient(g);   }   protected void paintGradient(  Graphics g){     g=g.create();     try {       Color background=getViewColor();       Component header=getHeader();       if (header != null) {         header.setBounds(0,0,getWidth(),header.getPreferredSize().height);         if (background != null) {           g.setColor(background);           g.fillRect(header.getX(),header.getY(),header.getWidth(),header.getHeight());         }       }       if (g instanceof Graphics2D && background != null && !Registry.is("ui.no.bangs.and.whistles")) {         paintGradient((Graphics2D)g,background,0,header == null ? 0 : header.getHeight());       }       if (header != null) {         header.paint(g);       }     }   finally {       g.dispose();     }   }   private void paintGradient(  Graphics2D g2d,  Color background,  int x1,  int y1){     Component view=getView();     if (background != null && view != null) {       int x2=x1, x3=getWidth() - x2, x4=x3;       int y2=y1, y3=getHeight() - y2, y4=y3;       if (myInsets.left > 0 && view.getX() < 0) {         x2+=myInsets.left;       }       if (myInsets.top > 0 && view.getY() < 0) {         y2+=myInsets.top;       }       if (myInsets.right > 0 && view.getX() > getWidth() - view.getWidth()) {         x3-=myInsets.right;       }       if (myInsets.bottom > 0 && view.getY() > getHeight() - view.getHeight()) {         y3-=myInsets.bottom;       }       Component parent=myAlways ? null : getParent();       if (parent instanceof JScrollPane) {         JScrollPane pane=(JScrollPane)parent;         JScrollBar vBar=pane.getVerticalScrollBar();         if (vBar != null && vBar.isVisible()) {           if (vBar.getX() < getX()) {             x2=x1;           }  else {             x3=x4;           }         }         JScrollBar hBar=pane.getHorizontalScrollBar();         if (hBar != null && hBar.isVisible()) {           if (hBar.getY() < getY()) {             y2=y1;           }  else {             y3=y4;           }         }       }       Color transparent=ColorUtil.toAlpha(background,0);       if (x1 != x2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x2,y1,transparent));         g2d.fillPolygon(new int[]{x1,x2,x2,x1},new int[]{y1,y2,y3,y4},4);       }       if (x3 != x4) {         g2d.setPaint(new GradientPaint(x3,y1,transparent,x4,y1,background));         g2d.fillPolygon(new int[]{x4,x3,x3,x4},new int[]{y1,y2,y3,y4},4);       }       if (y1 != y2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x1,y2,transparent));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y1,y2,y2,y1},4);       }       if (y3 != y4) {         g2d.setPaint(new GradientPaint(x1,y3,transparent,x1,y4,background));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y4,y3,y3,y4},4);       }     }   } } 
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
isLockscreenPublicMode(mCurrentUserId)
Boolean.valueOf(getOptional("kylin.query.disable-cube-noagg-sql","false"))
link.bone.getInitialRot()
level >= 100
loaded.getLoaded().getConstructor()
"Center loss is " + intraClassLoss
param.setResult(new FileNotFoundException("XPrivacy"))
lexerEngine.equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
override.toString()
calendar.set(Calendar.YEAR,2200)
getContext()
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now))
JDBCUtils.safeGetLong(dbResult,"PROCESS")
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
mDataAuthorities == null
OperationSetPersistentPresence persistentPresence=new OperationSetPersistentPresenceGibberishImpl(this); 
StringUtil.toString(extensionArray)
SocialUserStatisticsWebUpgrade.class
servers.isEmpty()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
destination.isTopic()
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
Localization.lang("Push entries to external application (%0)",appName)
r1.getName()
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()
connector.setPort(8080)
ctx.write("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
configuration.dialect()
mTask.icon != null
TelephonyManager.getDefault().getPhoneType()
removeGroupIds.isEmpty()
Integer.toHexString(quality)
DEBUG=true
expandableView.getActualHeight()
params.getSimulatePlatformVersion()
DEFAULT_ALLOW_CALLS=false
mBluetoothGatt.registerScanner(this)
dpToPx(72f)
dkSign.getId()
assetTagLocalService.checkTagsWithProperties(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
event.getX()
DEBUG=true
_validateHasRequiredPropertyElements(element,filePath)
maxConnectionsPerNode <= 0
canWrite(mediaType)
IBackupManagerService svc=mService; 
row("p_comment",null,1.0,0.0,null,null,null)
new RuntimeException()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
field.getRawType()
verify(connection,exception,error)
UserHandle.getCallingUserId()
disableBluetoothContactSharing
urlToLoad.getText().toString().isEmpty()
scores.getAlgorithmName()
packages.size()
SSLParametersImpl.getDefaultTrustManager()
mPerformanceMap.get(userId)
mTfs.ls(Constants.PATH_SEPARATOR,true)
targetClass != null
solve(true)
ev.mStateSamples.length < NS
set(object,value.intValue())
mHomeStack == null
event.getY()
colorModeClass.equals("ProportionalSizeMode")
filename.trim().equals("")
StringBuffer padding=new StringBuffer("\t"); 
resource.getPath()
FastMath.max(origin,num.doubleValue())
new UnsupportedOperationException()
service.asBinder().isBinderAlive()
needRefresh=false
Trans == TRANSPOSE
PermissionCacheUtil.clearResourceBlockCache(companyId,groupId,name)
LOG.debug("Connecting to port {}...")
disableForUser(what,token,pkg,mCurrentUserId)
mapKeys=new RapidsStringsV3(fr.keySet().toArray(new String[]{}))
mEditor.startSelectionActionModeAsync()
servletRequestContext.getServletRequest()
loaded.getLoaded().getConstructor()
config.getMaxRedirects()
{abiList}
30 * 60 * 1000
Proxy.getInvocationHandler(proxy).getClass().toString()
mHandler.postDelayed(pae,timeout)
from > to
channel.isOpen()
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,velocityContext,_velocityEngine,_templateContextHelper)
new CompositeException(e,t)
sr.isForeground
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
allowedIdentifiersCheckDigits[i]
CodeStyleFacade.getInstance(project).isUnsuitableCodestyleConfigurable(configurable)
FILES_BYTES * 1000L
/**   * Helper method, has same effect as <pre>return enhance(cls, interfaces, ih, loader, null);</pre>  * @see #enhance(Class,Class[],MethodInterceptor,ClassLoader,Method,MethodFilter)  */ public static Object enhance(Class cls,Class interfaces[],Callback callback,ClassLoader loader){   return enhanceHelper(cls,interfaces,callback,loader,null); } 
app().repositories()
log.warn("jmeterthread.startearlier=true (see jmeter.properties)")
mQsContainer.getLayoutParams()
contents.getBytes()
readHex(in,28,false)
getNonCompilablePath("InputDefaultConfig.java")
display.getMetrics(dm)
Boolean.getBoolean(viewContext.getProperties().get(PROPERTY_SLIDER_SECURITY_ENABLED))
getBooleanValue(ASYNC_CLIENT + "acceptAnyCertificate",false)
listener.onTestFailed(test)
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
note.getAlarm() != null
mAppToken.hasContentToDisplay()
WordPress.getCurrentBlog().getRemoteBlogId()
startGrids(NODES_CNT)
attributes.getFlags()
lightsOut()
RecentsHorizontalScrollView.super.removeViewInLayout(view)
13 * Bytes.SIZEOF_LONG
mRS.nMeshGetIndices(mID,idxIDs,primitives,vtxCount)
this.httpHandler.handle(request,response).otherwise(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
required=false
assertCorrectionsByOrder(rule,"Rytmus","Remus","Rhythmus")
AnimationAdapter<T>
loaded.getLoaded().getConstructor()
fingerId == 0
new UnderFileStatus("dummy",isDirectory)
ApplicationManager.getApplication().invokeLater(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
timeoutMs >= 0
mRefreshView.getBottom() > mRefreshViewHeight + 20
setResult(RESULT_CANCELED)
proxy.getHostText()
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
id=23
pluginContainer.lookup(ComponentConfigurator.ROLE,pluginRealm)
mResourceData[i] != null
mContext.startActivity(intent)
fraction * (nextValue - prevValue)
Timber.e("Failed to initialize local key store",e)
Thread.sleep(5000)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IOException {   return JSON.writeValueAsString(object); } 
aClass.getInterfaces()
iq.elements()
_buildTemplateWithGradle("war-mvc-portlet","war-mvc-dependency-management","--dependency-management-enabled","true")
req.getRange()
DirectCallTargetNode directCall=(DirectCallTargetNode)invoke.callTarget(); 
zkClient.close()
List<WebPageDetail>
displayList != null
new MavenArtifactSearcher()
XmlErrorMessages.message("cannot.resolve.symbol")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
@Override public DataSource createDataSource(){   return new CacheDataSource(cache,upstreamFactory.createDataSource(),cacheReadDataSourceFactory.createDataSource(),cacheWriteDataSinkFactory.createDataSink(),flags,eventListener); } 
setVerticalAlignment(BOTTOM)
resultTargetUser != null
d1.setRemoveAbandonedTimeout(10)
SCHEMA_VERSION=3
request.getServletPath()
annotationHelper.printError(element,"%s annotated element should not have a private constructor")
@IntMethodAnnotation(42)
clazz == null
m.getClass()
mMncStr == null
i=0
newReader == this.reader
private TextView frame=null; 
Boolean.getBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
MAX=4
mDatabaseHandler == null
mRCStack.remove(rcse)
new AnAction("Top | Bottom"){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=false;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourNotDot : VcsUtil.ourDot);   } } 
blog.getRemoteBlogId()
settingId != null
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
getLocationEnabled()
fraction * (nextValue - prevValue)
new PacketDecoder(jsonSupport,new NamespacesHub(new Configuration()),ackManager)
user.getName()
store.setConfigPath(usersFile)
PULL_TIME=250
winAnimator.mSurfaceController == null
editorFactory.create(getTerminal())
element == null
fields.contains(name)
mPowerManager.isScreenOn()
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
Predicate<String>
toByteBuffer()
position - dockDividerWidth
Debug.w("Texture asset not found, " + pAssetPath,e)
this.func_180475_a(objective,res)
DEBUG_LOG_ENABLED=true
new ObjectMapper().reader(DiskBalancerCluster.class)
ONE_MINUS_DST_ALPA(7)
logger.warn("Line-in of {} is not connected",getUDN())
createHalf(buffer.length(),init,workspace)
Long.valueOf(id)
win.mAppToken != null ? win.mAppToken.mAppStopped : false
DISABLE_TIMEOUT=5000
attributeMap.put(attributeName,value)
TransactionInterceptor.class
Long.valueOf(stats.get("size").toString())
"Camera resolution: " + screenResolution
getLineCount(myDocument1)
String tag
LOGGER.info("Using proxy address [{}]")
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
MAX_LENGTH=100
resource.getPath()
Object o=latest[index]; 
new ThingUID(BINDING_ID,bridgeUID,light.getId())
MIN_NET_ID=10
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
TelephonyManager.getDefault().getPhoneType()
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,LiferayRepositoryDefiner.class,"_portalCapabilityLocator",false)
getClient().prepareSearch(resolveIndexName()).setTypes(IndexAuditTrail.DOC_TYPE).addFields(fieldList())
return 62; 
type.getConstructor()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
isAvailable(status)
annotations.get(node)
System.currentTimeMillis()
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"gfxinfo",pw)
_start > 0
XContentType.YAML.restContentType()
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class)
boolean value() default false; 
TunablyAggresiveChaosMonkey chaos=new TunablyAggresiveChaosMonkey(ctx); 
type.getConstructor()
getKeyDesc(keyRowMeta,keyNrs,two)
state.value == rotationLocked
Vector<String>
stat.st_mode.get()
onSuccess(statusCode,headers,handler)
InputType.recurrent(convNIn)
selenium.isVisible("link=Control Panel")
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
new NullPointerException("Mouse or keyboard cannot be null")
256 * 256 * 12.8f
distanceToView(focused) > 0
CreateGrid(1,1)
methodsToImplement(methods)
mPostKeyguardExitAnimation.hasEnded()
http2.setInitialStreamSendWindow(initialStreamSendWindow)
logger.info("copy {} to {}",srcFile.getAbsolutePath(),destPath)
(Float)array[this.index]
createConfig()
RESULT_TIMEOUT=1500
that.getPath() == null
Preconditions.checkState(state.discoveredInputs != null)
curRowNum >= segmentSize
config.getIdleConnectionTimeoutInMs()
new SimpleDateFormat(format)
this.instanceManager != null
Helpers.exec(j4p,"setProfileFabs(java.lang.String, java.lang.String, java.util.List)",id,strings)
builder.breakToFill(" ")
timeStampVector.getMutator().set(index,value)
new Paint(Paint.ANTI_ALIAS_FLAG)
new PkgControl(pkg,regex)
userPreferences.getBoolean(context.getString(R.string.pref_share_contacts_key),false)
mFixedExecutionService.shutdown()
getDelegate().getSupportedCipherSuites()
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().otherwiseIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
wms.getGeoServer().getSettings()
mGpsListener != null
builder.length() == 0
Value emitBitScanReverse(Value operand); 
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
testRunner.addListener(itl)
k < THREADS
MethodConstant.of(instrumentedMethod.asDefined())
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue)
mComment.getLocalSiteId()
selectedIndicatorHeight != 0
getModel().getRowCount()
!txEnabled()
info.getDeviceIdForPhone(slotId)
SSLHandshakeException.class
!mHasCallback
DEBUG=true
loaded.getLoaded().getConstructor()
mContext.sendBroadcast(intent)
parsedResult.getSqlType()
settings.getDirection()
parts.length > 0
Set<UidRange>
VectorAllocator.getAllocator(vv,50)
BlockMasterClient.class
context == null
SamplingProfiler.newThreadGroupTheadSet(group)
SVID_SHIFT_WIDTH=7
null == mImage
mQSPanel.getHost() != null
!mIsRecentsShown || !mIsPipFocusedInRecent
Build.VERSION.SDK_INT < 11
m.getSize()
@Override @NotNull protected TStatement handlePostfixInsert(@NotNull InsertionContext context,@NotNull PrefixExpressionContext expressionContext){   Project project=expressionContext.expression.getProject();   JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);   PsiElementFactory elementFactory=psiFacade.getElementFactory();   PrefixExpressionContext fixedContext=expressionContext.fixExpression();   PsiStatement targetStatement=fixedContext.getContainingStatement();   assert targetStatement != null;   PsiElement expressionCopy=fixedContext.expression.copy();   TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression);   @SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement);   return replaced; } 
st.setCharacterStream(index,characterStream.asReader(),characterStream.getLength())
fragmentTransaction.replace(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
private MultiplePermissionListenerThreadDecorator listener; 
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
mIconComplete != 0
new int[100]
desktopSharingButton.setRolloverImage(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
selenium.isVisible("link=Control Panel")
grammar.getTokenNames()
invocation.addAttachmentsIfAbsent(context)
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
entity.saveComponent(delayedComponent)
append(new ReturnOp(operand))
assertLength(3,builder.getErrors())
node.getPolicyWeight()
hazelcastFactory.newHazelcastClient()
t instanceof LinkageError
new RelationIndexStatusReport(true,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
String result=""; 
public TokenStream create(TokenStream input){   return new StandardFilter(input); } 
private TextVar wDirectory; 
(mOomMinFreeHigh[5] * 7) / 8
"Invalid modules directory: " + modulesDir
dst.remaining()
"Content-Type".equals(name)
lowJson.getDouble(i)
InputType.convolutional(height,width,channels)
settings.readLPw(null)
new MapProducerCapabilities(false,false,false,true)
distance(bottomLeft,bottomRight)
waitForDown(CCMBridge.IP_PREFIX + '2',c.cluster)
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(10000)
format.getDisplayName()
selenium.isVisible("link=Control Panel")
sTestCaseCounter == 1
RecentsVerticalScrollView.super.removeViewInLayout(view)
simple.getFromSentDate()
verify(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group,e)
tagService.getTagsAsString(task.getId())
61L + 122L
c == interfaceClass
StringBuilder builder
assertEquals(6358481,received.get(0)[1])
new Interval(2,6,5)
mFragments.mCurState < Fragment.CONTENT
info.getLine1NumberForSubscriber(subId)
new RecordReaderDataSetIterator(rr,batchSize,labelIndex,numPossibleLabels,regression)
flags_=0
Math.min(leftLen,rightLen)
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
new InetSocketAddress(configuration.getRestListenUri().getPort())
Assert.assertEquals(1,fastJsonConfig.getFeatures().length)
entry.rxPackets == 0 || entry.txPackets == 0
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX)
NetworkUtils.isNetworkAvailable(getActivity())
logger.trace("Receive queue ADD: Length={}",recvQueue.size())
segments == null
case 15: 
lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
contentHolder.getChildren().add(content)
"DROP INDEX " + PATTERN_ITEM_INDEX_SHORT
!isRunning()
/**   * Retrieves X.  * @return a value  */ public T getX(){   return null; } 
watch.stop()
Assert.assertEquals(122L,ownerCapsuleNew.getFreeNetUsage())
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
DEBUG=true
assertEquals(329,error)
graph.getEdges()
!b.getAtmosphereResources().contains(r)
mPathParameterMap != null
graphics=new QDGraphics(QDConstants.k32BGRAPixelFormat,qdrect)
diskThresholdSettings.getFreeDiskThresholdHigh()
addDaysAndCheckForCompletion(5,NextEvent.PAYMENT_ERROR)
triggerEl.element("simple-trigger-value")
createContractFromJson(json,contractName)
Log.i(TAG,"releaseInfoLock error",e)
logger.info("File descriptor is: " + fd)
convert31XToMeters(yB,yA)
requestHeader.mConnectionID != null
String[]
assertDurationLessThan(stopDate - firstStopLogDate,10000)
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
NamingException e
typeSettingsProperties.toString()
types.get(channel)
(spoon.getRepository() != null) && (spoon.getRepository().getTransformationLock(transMeta.getObjectId()) != null)
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
DEFAULT_LOCK_TIMEOUT=60000
Thread.sleep(500)
new IllegalStateException()
v.getContext()
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
location.getSchemeSpecificPart()
return raf; 
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
mService.factoryReset()
this.exchanges.get(requestId)
mCurrentVrService == null
!token.hasVisible && !mClosingApps.contains(token)
NumberUtils.decodeLowUnsignedNibble(encodedInstruction[5])
activity == null
runningTasks.get(assignedTask)
parameters1.size()
WEB_SYNC_MANAGER=true
mService.factoryReset()
useSmDefault=false
Exception e
mMccMncs != null
selenium.isVisible("link=Control Panel")
Assert.assertEquals(editor.getMarkersQuantity(WARNING_OVERVIEW),13)
selenium.isVisible("link=Control Panel")
type.getConstructor()
id=15848
type.createBlockBuilder(new BlockBuilderStatus(),100)
selenium.isVisible("link=Control Panel")
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
requestFocus()
selenium.isVisible("link=Control Panel")
IllegalArgumentException e
selenium.isVisible("link=Control Panel")
Long.valueOf(delay)
mDisplay.getMetrics(mDisplayMetrics)
out.write(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
Collection<K>
blackHoleGenerator.getConstructor()
mMncStr == null
target.getDestination()
private final CircularClipper mClipper; 
Throwable t2
myComp.getSize()
FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)
value.toString().getBytes()
public TokenStream create(Reader input){   return new KeywordTokenizer(input); } 
assertEquals(2437,res.getTime(0,1) / 1000,30)
SmsHeader.toByteArray(header).length + 1
c.toArray()
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory()
mapper.getJsonFactory()
_rate_decay != 1e-6
GL20.glUniform2(location,v)
mAdapter != null
negative.contains(negative)
mWidth - glowWidth
logger.debug("rapidRefreshFutureEnd stopping")
triggerProto.getAfterEndOfWidow()
cfs.getSSTables().size() > 1
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
version == null
new IndexWriter(indexStore,new SimpleAnalyzer(),true)
private final CircularClipper mClipper; 
stts.readUnsignedIntToInt()
new ReactTextUpdate(getText(),mJsEventCount,false)
t.getMessage()
errVisitor.getJspSourceNode() instanceof Node.Scriptlet
mService.disableNetwork(netId)
task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
!serviceContext.isSignedIn()
drReplicate(drType,null,newVer,topVer)
type.getConstructor()
componentSystems.hasNext()
((Context)entry.value).unbind(name.getSuffix(1))
getSelectedColorRes()
!SwingUtilities.isEventDispatchThread() && !Thread.currentThread().getName().startsWith("ZAP")
new byte[19]
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,158}
minutes >= 2
new AndroidInstrumentationInfoProvider(targetApk,instrumentationApk)
items[21]
resId == R.string.local_index_unselect_gpx_file
hasCapability(GPS_CAPABILITY_MSA)
downloadFragment == null
Messages.getString("BaseStep.SafeMode.Exception.MixingLayout","" + (i + 1),Const.CR,referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
!testBit(access,Opcodes.ACC_PROTECTED)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
this.constraints.updateFromTuple(leftTuple)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
ap.getSsid()
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append("#")
formatTime(fullWifiLockOnTime / 1000)
d.getPage()
exception.toString()
calculateRoute(lastFixedLocation,finalLocation,currentGPXRoute)
json.length() - 2
@Override public ResponseImpl header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
constructor.newInstance(conf,keyPrefix,options,writer,fs)
FileEntry.class
mQuietEnable
mapper.writeValueAsString(segment)
raw.getParameters()
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
Mono.currentContext()
Log.wtf(TAG,"Unable to resolve SystemUI's UID.",e)
uri.getAssetName().toString()
Simple.of(skylarkType)
ONE_MINUS_DST_ALPA(7)
selenium.isVisible("link=Control Panel")
CompletableFuture<Boolean>
@Specialization protected Object fromDouble(double value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
popupWindow.setWidth(menuWidth)
DEBUG=true
ConnectorRecordSetProvider.class
Log.wtf(TAG,"This will become an error",ex)
loaded.getLoaded().getConstructor()
new StyleChart.Builder().width(CHART_WIDTH_PX,LengthUnit.Px).height(CHART_HEIGHT_PX,LengthUnit.Px).margin(LengthUnit.Px,60,60,40,10)
invalidate()
Realm.getColumnIndices()
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end,orderByComparator)
TextUtils.isEmpty(defaultRingtoneName)
IndexReader.open(dir,true)
set(object,value.intValue())
private Artifact getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
UnsupportedOperationException ex
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE,KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
StringBuffer sb=new StringBuffer(); 
newReader == this.reader
methodExists(altName,fieldNode)
DISPLAY_TASKS_PORTRAIT=8
reportWhenNoStatementFollow
buffer.putDouble(bo)
maxSize > (used / 1024 / 1024)
assertEquals(2,configsInJars.size())
status().isPermanentRedirect()
response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty())
complete.expectedBodiesReceived("finish","stop","faulted","except")
@InputIntMethodAnnotation(value=43)
log.info(sm.getString("contextConfig.role.runas",runAs))
hasOnClickListeners()
public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
socketFile.toString().length() >= 108
Boolean.getBoolean(value)
selenium.isVisible("link=Control Panel")
new ToolbarActionBar(actionBar)
Nd4j.createUninitialized(new int[]{1,nParams},'c')
new PyDebugValue(slice,value.getType(),null,value.getValue(),value.isContainer(),value.isErrorOnEval(),parent,value.getFrameAccessor())
matchAxisFilter != 0
mHandler.removeCallbacks(pae)
oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
this == group.mInternalConnection
mMncStr == null
mLastAnnouncementWasQuickSettings && !mTracking
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
prob < phi
VMDebug.attachAgent(library)
checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
i.view_count >= 10000
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
nodeEngine.getService(LockService.SERVICE_NAME)
ACRA.log.e(LOG_TAG,"Error while converting " + key.name() + " to JSON.",e)
new NameAlias(tableNameAlias)
coreThreads.asString()
makeString(list,",","(",")")
buffer.rewind()
mFlexItem.setAlignSelf(AlignItems.FLEX_START)
ParserUtils.eatElement(builder,VARIABLE)
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
a.getFloat(attr,0)
mLteSignalStrength > 63
new GormAwareDataBindindingListener(tmpBindingResult)
Thread.sleep(5000)
!_informAdministrator
Class[]
targetInfo != null
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SUCCESSFUL)
new IllegalStateException()
FRAME_STATS_COUNT=14
private final MediaDriverReceiver receiver; 
longSize >= 800
mAdapter != null
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_configuration,_templateContextHelper)
generateRandomStringArray(2,4,false)
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
log.makeAlert("Failed to remove segment")
-30.0f
this.session.users().getUserByServiceAccountClient(client)
(flags & FLAG_VIEW_ENTERED) != 0
"Stream " + importer
PsiClass sourceClass=PsiTreeUtil.getParentOfType(sourcePsi,PsiClass.class); 
factor > 1.0
info.getDepth()
StringBuffer sb=new StringBuffer(); 
mService.factoryReset()
waitLatch.await(25,TimeUnit.MILLISECONDS)
parameterTokens.add(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
format(conf,false)
!list.append(ai)
Truffle.getRuntime().getCurrentFrame()
internalAddPlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
/**   * Allows subclass to override Conection if required.  */ protected HttpConnection newHttpConnection(EndPoint endpoint){   return new HttpConnection(this,endpoint,getServer()); } 
LensPositionSelectors.lensPosition(LensPosition.FRONT)
ImageUtil.getRealHeight(myImage)
tableHasData(newTableName)
setParams().nx()
Assert.assertEquals(container1,info.getContainerName())
controller.createAction("component").setDescription("Get the pending tasks, in-progress tasks and the last executed task of a given component (usually a project).<br>" + "Requires one of the following permissions:" + "<ul>"+ "<li>'Administer System'</li>"+ "<li>'Administer' rights on the specified component</li>"+ "</ul>"+ "Either '%s' or '%s' must be provided, not both.<br>"+ "Since 6.1, field \"logs\" is deprecated and its value is always false.")
button.getName()
mStartup
HEADER.getBytes()
info.getVoiceMailAlphaTagForSubscriber(subId)
VERSION=41
result.wasNull()
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false)
String classpath=getClasspath().toString(); 
Element.F64(mRS)
resolveTypeParametersForCallableDescriptor(containingDeclaration,writableScope,typeParameters,trace)
internalTransaction.getReceiveAddress()
this.getClass()
poolTimeoutMillis < 0
p.matcher(string)
model.getClass().getName()
@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapBaseTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } 
wtfilter.setWidth(60)
selenium.isVisible("link=Control Panel")
map.substitute(path,SystemInfo.isFileSystemCaseSensitive,null)
SitesDirectoryWebUpgrade.class
CHECKIN_VERSION=28
@Nullable
session.getRemote().sendString(command.format())
@NotNull
((GroovyObject)receiver).getMetaClass() != metaClass
info.crashInfo.stackTrace.length() > 10000
Loader.loadClass(mName)
mPostKeyguardExitAnimation.hasEnded()
stub != null
display.getMetrics(dm)
volatile IndexReader reader; 
"Surface(native-token=" + mSurface + ")"
VERSION=12
getHttpConnectionManager()
telephony.getCdmaEriTextForSubscriber(subId)
selenium.isVisible("link=Control Panel")
new String(bytes)
request.mConnectionID != null
FsDatasetImpl.LOG.info("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
type.getConstructor()
List<Double>
id=41
return mPrefs; 
matchAxisFilter != 0
Slog.wtf(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
TestUtils.randomByte() + 127
/**   * Returns the error code.  * @return The error code.  */ public String getErrorCode(){   return _errorCode; } 
SocialActivityWebUpgrade.class
return false; 
List<Map<String,Object>>
private final BucketResultListener bucketResultListener; 
H2O.waitForCloudSize(x,10000)
capacity > 1 << 30
mOneShot=true
resources.getDimension(R.dimen.close_handle_height)
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null)
Log_OC.e(TAG,"Got to start sync")
RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authn)
mQsContainer.getX()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(17)
principal.getName()
EditorHelper.normalizeOffset(editor,res,false)
messageType.set(message2,"message","Hello World")
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
json.writeStartObject()
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
e instanceof Painting
new MediaController(token)
mMncStr == null
assertEquals(8,set.size())
a.entrySet()
e.getMessage()
super.recylePoolItem(pPoolItem)
properties.contains("flyway.url")
"System property " + LEGACY_SSTABLE_ROOT + " not set"
sess.init()
base - zoom
Collection paramNames
LOG.error("Failed to get next entry from " + jarFileName + ": "+ ioEx)
new OverflowPanelViewHelper(mContext)
ruleGroupInstance.getGroupId()
EJBException nsee
public DerivedBuilder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
parser.parse(GroovyElementTypes.OPEN_BLOCK,builder)
ignite.createNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_TEXT)
revalidate()
mRefreshView.getBottom() > mRefreshViewHeight
value < minimumValue
i < inputStream.getGroupingFields().getKeysCount()
obtainMessage(MSG_TIMEOUT,state)
Object value
assumeFalse("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
dist == 0
formatTime(fullWifiLockOnTime / 1000)
delegatedResourceAccountIndexCapsule.getToAccountsList()
getActivePreferenceStore()
holder == null
connection.zrangeByLex(key,max,min)
obj.getExp()
mStackScroller.getChildAtPosition(x,y)
NOTIFICATION_LED_OFF_TIME=500
nodeManager.getAllNodes()
partitions != null
matcher.matches()
WordPress.getCurrentBlog().getRemoteBlogId()
Math.max(timestamp,dp_to_keep.kv.timestamp())
subscriptionMap.get(sub)
TelephonyManager.getDefault().getPhoneType()
((XmlNSDescriptorImpl)data).getElementDescriptor(localName,namespace)
reader.document(i,visitor)
NestedSetBuilder.stableOrder()
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment)
selenium.isVisible("link=Control Panel")
DiagnosticFactory3.create(ERROR,DECLARATION_SIGNATURE)
disableForUser(what,token,pkg,mCurrentUserId)
Thread.sleep(200)
log.warn("Reset to factory defaults : onErrorDropped")
Long.valueOf(val)
e.getPresentation().setVisible(false)
ProjectViewNode treeNode=(ProjectViewNode)defaultMutableTreeNode.getUserObject(); 
Exception exc
display.getMetrics(dm)
new KeyValuePair(LanguageUtil.get(locale,"no-workflow"),"no-workflow")
versionString(VersionedValue.STATUS_LEFT,Long.toString(expireTime),makeTokenString(tokens))
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mPolicy != null
putProject(null,folder,true,false)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
Assert.assertEquals(masterAddress,new InetSocketAddress("RemoteMaster1",10000))
dynamicType.getLoaded().getConstructor()
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
request.mConnectionID != null
Integer.toBinaryString(gramSize)
currencyPair.counter.getCurrencyCode().toString()
LOG.error("Couldn't run process with PTY",t,logContent)
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
new RuntimeException("Cannot initialize dumper",e)
info.getRegionName()
btceDepth.getAsks()
new byte[9]
cache.context().isStatisticsEnabled()
selenium.isVisible("link=Control Panel")
itemActionLayout >= 0
file.getInputStream()
IccUtils.gsmBcdByteToInt((byte)0x8c)
RulesWidget2.class
mState.mPivotX == pivotX
type.getConstructor()
seg.acquiredPages.remove(pageId,page)
row1 * layerTileHeight
(NotificationAction)null
lp.onResolveLayoutDirection(layoutDirection)
DEBUG=true
DumpUtils.checkDumpPermission(mContext,TAG,pw)
RouteInfo r; 
event.getTime() > currentPlayTime
start >= str.length()
method.getDeclaringClass().equals(XAConnection.class)
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
Messages.showErrorDialog("Error updating package list: " + e.getMessage(),"Reload List of Packages")
Exception e
currentPropertyJoinColumnOverride != null
log.trace("Failed to deploy!!")
ATLAS_MAP_ENTRY_FIELD_COUNT=4
dlFileEntryFinder.findByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
private final String parentKey; 
getAffiliatesByOwner("owner")
Exception exception
new IllegalArgumentException()
WebStorage.getInstance().deleteAllDatabases()
mHorizontals == null
RowSqlType.builder().withIntegerField("f_int").withIntegerField("sub_string")
random().nextInt(999) + 1
_layoutRevisionLocalService.getLayoutRevisions(WorkflowConstants.STATUS_PENDING)
FREQUENT_RESTARTS_THRESHOLD=16
value.length() > MAX_LENGTH
declareMethods(standardClasses,arrayListFQName,"size","add","get","isEmpty","set","remove","addAll","contains","clear")
getRecentsButton()
_log.error(ioe,ioe)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
searcher.get().getIndexReader()
telephony.getNeighboringCellInfo(mContext.getOpPackageName())
rep.getStepAttributeString(id_jobentry,"success_condition")
subjectConfData.getNotOnOrAfter().isAfterNow()
private JTextPane myDetailsPane; 
selenium.isVisible("link=Control Panel")
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
object1.getName(object1)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
e.getMessage()
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
Ordered.HIGHEST_PRECEDENCE + 11
context.init(httpServletRequest,httpServletResponse)
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
ViewPortletSiteMapTest.class
Preconditions.checkNotNull(worker)
ConstantNode.forConstant(Constant.NULL_OBJECT,null,graph())
_nonceQueue.remove()
forward.setContentDescription("Close Button")
type.getModifiers()
args[0].trim().length() < 3
dest.mkdir()
!task.isFreeformTask()
secondCacheCfg.setMemoryPolicyName(POLICY_20MB_EVICTION)
messageBus.replace(createSynchronousDestination(destinationName))
ChronicleEngineEnpoint endpoint=(ChronicleEngineEnpoint)getEndpoint(); 
mValues[7]
new IllegalStateException("Failed to create temp directory")
IOUtils.closeQuitely(is)
b == null
T extends Capability
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
new Rect(left,top,bottom,right)
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPython3Target {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
new ConstantTopologyChangeWorker()
Exception e
timeoutNs * Time.NS_PER_MS
VMRuntime.is64BitAbi(getPreferredInstructionSet())
ap.getSsid()
System.currentTimeMillis() - start + 200
completion.switchOnError(ex -> handler.handle(exchange,ex))
logger.info(String.format("sending ack %s",args))
fullSize + 1
Slog.wtfStack(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
mValues[7]
HttpEntity.class.equals(parameterType)
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
type.getConstructor()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
m.getClass()
expiresOn == null
new CompoundShelfFileProcesor("shelf")
mDataAuthorities == null
IllegalAccessError.class
words.length >= 1
new ToggleAutoTestAction()
notebook.createNote()
token != null
registerForEvent(false,true)
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
RoleLocalServiceUtil.getRole(companyId,name)
DeviceCommunicationService.class
toObject(value)
EntityRegistry.registerEntityID(entityClass,entityName,id)
A args
new IllegalStateException("Could not access Field '" + classField.getName() + "'")
IClientConfigKey<Boolean>
tFAgentStatMappter.map(agentStatBo)
new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs())
!isTopLeftVisible
getSupportFragmentManager()
queryString.getBytes()
startOffset > pages.size()
uri.getQuery()
handleDnsConfigurationChange(networkType)
redefined.getConstructor()
serviceDataUuid == null
Messages.OK == result
holder == null
PrivacyManager.getRestrictions(false)
element instanceof AntProject || element instanceof AntCall
uri.getSchemeSpecificPart()
WebSettings.setTextSize(WebSettings.TextSize.LARGER)
entry.notification.clone()
disableForUser(what,token,pkg,mCurrentUserId)
AppLog.e(T.EDITOR,cm.message() + " -- From line " + cm.lineNumber()+ " of "+ cm.sourceId())
mConferenceById.containsKey(callId)
duration - SystemClock.uptimeMillis() - bedtime
new RemoteUserInfo(mCurConnection.pkg,mCurConnection.pid,mCurConnection.uid)
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
typeSettingsProperties.toSortedString()
StateManagementUtils.createEndForkedExecutionMojoBinding()
viewDefinition.getViewName()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
LOG.warn(ex.getLocalizedMessage(),ex)
status().isPermanentRedirect()
super.getLikeProvider(path)
dest.writeLong(mSubId)
analysis.getTypeWithCoercions(windowFunction)
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mFormEntryModel.getCaptionHierarchy()
lock.isLocked()
recipient.getExpireMessages() * 1000
AndroidExcludedRefs.createAndroidDefaults()
Stream.of(BRIDGE_TYPE,THING_TYPE_PRESENCE_SENSOR,THING_TYPE_DAYLIGHT_SENSOR,THING_TYPE_POWER_SENSOR,THING_TYPE_LIGHT_SENSOR,THING_TYPE_TEMPERATURE_SENSOR)
mActiveAgents.remove(info)
Exception e
getCustomArgumentResolvers()
parts.length < 1
selenium.isVisible("link=Control Panel")
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
request.getInputStream()
_log.error(ioe,ioe)
service.getDomain().getName()
getResultHandler(result).handleResult(exchange,result).otherwise(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
selenium.isVisible("link=Control Panel")
Preconditions.checkNotNull(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
!(orderParams instanceof CancelOrderByIdParams) && !(orderParams instanceof CancelOrderByCurrencyPair)
mAnswer.setBackgroundDrawable(null)
networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
!provider.shouldNotBeCached()
e.getKind().isClass()
config.getClass().toString()
retval=(x == constValue)
DataStream<OUT>
location.getX() < 1625
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
DiagnosticType.error("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
column.getName()
TypeConversionUtil.boxingConversionApplicable(declaredParamType,actualArgType)
CLOSURE_DO_CALL_METHOD.equals(methodName)
GridHadoopTestUtils.jsonToMap(x)
Environment.getRootDirectory()
A args
status().isPermanentRedirect()
indexNameExpressionResolver().concreteIndices(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
type.getConstructor()
incomingDir.exists()
mTxtLog.append(llog)
new Scanner(f)
type.getConstructor()
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
DEBUG=true
analyzedSentence.getTokens()
user.sendMessage(_("inventoryClearedAll"))
DBG=true
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
pir.key.activity != null
mShouldTranslateContents
writer.writeLongArray("arr",arr)
view.setCallback(listener.callback)
TypeMirror fooTypeMirror=types.getDeclaredType(fooElement); 
a.getInt(attr,0)
JSInjectionController.getInjectionText(value)
readySegment.getDateRangeEnd() < segment.getDateRangeStart()
line == document.getLineCount()
duration.getMinutes()
expandableView.getActualHeight()
"Error resetting interface " + mInterfaceName + ", :"+ e
header.getX()
mappers.mapper().searchAnalyzer()
mFacetCategoryMap.get(packageName)
floatVal(doc)
delegate.update(entity)
return true; 
System.currentTimeMillis()
Streams.fileInr(f)
config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString())
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
return false; 
ActivityManagerNative.getDefault().updateConfiguration(config)
mLastAnnouncementWasQuickSettings && !mTracking
LOGGER.debug("Error during file import",e3)
new LFWLoader(imgDim,imageTransform,useSubset)
A args
V
focusedStack.getTaskCount() == 0
setDeploymentStack(contextValue)
DefaultGradleDistributionLocator createGradleDistributionLocator(){   return new DefaultGradleDistributionLocator(); } 
mImm.setInputMethod(mToken,id)
assertEquals(0.3169947529691508,mse,1e-8)
mAttributes.getFlags()
localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
DEFAULT_VERIFY_ENABLE=false
Map<Integer,Object>
mainFile.getRunfilesPathString()
connection.subscribe(jedisPubSub,patterns)
@Nullable
messageParts[3]
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
DataStream<OUT>
memOffsetData.intValue()
indexWriter.expungeDeletes(false)
redeliveryDelay > maximumRedeliveryDelay
Thread.sleep(5000)
entry.getKey()
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
fraction * (nextValue - prevValue)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
input.getDelta()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
item.getName().matches(name)
stack.peekFirst()
getLayoutIndex(upNodeIndex)
Assert.assertEquals(122L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
ProjectBundle.message("project.roots.jdk.banner.text")
new ALPNServerConnectionFactory(h2.getProtocol(),http.getDefaultProtocol())
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize()
status == SocketStatus.OPEN_WRITE
!enteringSplitScreenMode
createHalf(buffer.length(),init,workspace)
Collections.emptyList()
DiagnosticFactory0.create(WARNING)
"com.google.android.gms".equals(mPackageName)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
mapCopy.getName()
beforeMethodInvocation(suspendContext,method,internalEvaluate)
callbacks.onHardwarePostDraw(canvas)
status().isMovedTemporarily()
logger.info("Computing Control Flow Graph")
new SolrException(1,"analyzer without class or tokenizer & filter list")
mGpsListener != null
foundExistingGitUrl=true
IndexReader reader=writer.getReader(); 
PlatformUtils.isIntelliJ()
LOGGER.debug("Could not copy cite key",ex)
lastTerm.toBytesRef()
connections.contains(manager)
Float.class
MathUtils.convertLongToInt(length)
mLteSignalStrength > 63
n.intValue()
loaded.getLoaded().getConstructor()
maxRowsPerFrame=100_000
withoutMvnPrefix.startsWith("http:")
Exception ex
new IllegalArgumentException()
lastTerm.toBytesRef()
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
CONSTELLATION_TYPE_SHIFT_WIDTH=3
grid.context().cache().dynamicDestroyCache(cache.getName(),true,true)
hostsInPool.decrementAndGet()
SystemProperties.getBoolean("debug.choreographer.animdraw",true)
f.getAttrs().getMTime() * 1000
field.getElementType()
obj != null
strand.isAlive()
retry.attemptRetry()
BroadcasterFactory.getDefault().get(mapping)
a.getDimensionPixelOffset(attr,0)
questionMark >= 0
value.isValid()
return true; 
(!client.isFailed()) && (!client.isGone())
return self; 
getMergedOverrideConfiguration()
implement(Foo.class,MethodDelegation.to(Foo.class)).getLoaded().getConstructor()
T value2
id=15807
mAttachInfo == null
getWidth()
schematicEntity.build(localWorld,FakeWorld.BLUEPRINT_OFFSET)
QualifiedNamesUtil.isSubpackageOf(fqn,fqName)
AbstractBottomUpTraversal<TargetNode<?>,Void>
U extends Identifier
route.setDelay(5)
classFile.matcher(file.getName()).find()
retVal.put(entry.getKey(),value)
Collection<Element>
mCard.getVisibility() != View.VISIBLE
_folder != null
Exception e1
assertEquals(expectedPlan,actualPlan)
heightSize == MeasureSpec.UNSPECIFIED
new Paint(Paint.ANTI_ALIAS_FLAG)
HeaderBuilder.this
ConfiguredTargetValue.key(label,defaultTargetConfiguration)
t instanceof VirtualMachineError
GridSslBasicContextFactory.getDisabledTrustManager()
file.getPath()
this(deploymentName,maxSessions,true); 
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
logger.info("Installing Filter {}",servletClassName)
new Paint(Paint.ANTI_ALIAS_FLAG)
logger.info("copy {} to {}",srcFile.getAbsolutePath(),destPath)
LOG.error(e)
Log.wtf(TAG,"This will become an error",ex)
Sets.newHashSet()
recompile(source,name,cls)
public S orderBy(OrderSpecifier<?>... o){   query.orderBy(o);   return self; } 
this.removeFirst()
EntityRegistry.registerEntityID(entityClass,entityName,id)
assertThat(o.takeNext()).isNull()
mDateView.setTypeface(Typeface.SANS_SERIF)
desc.getMessagingVersion()
getConversionByClass(value.getClass())
fb.capacity()
KEEP_ALIVE_LENGTH=6
statusRef == null
idx > biomes.length
cursor.getString(COLUMN_VALUE)
remainderOfKey.indexOf('.') > -1
devicePort.type() == AudioManager.DEVICE_OUT_HDMI
value >= 0
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,false)
myInjectedFile.getFileType()
1
incomingMessage.getMessagePayloadByte(0)
guiResource.getImageBol()
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
new Vector2i(availableHeight,areaHint.x)
isCorrect
audioManager.getRingerMode()
ds.getFeatureMatrix()
callTimeoutMillis=3000
VerifyError e
users.get(i)
methodNode != null
cc.isLazy()
mRedrawClip.isEmpty()
in.readVInt()
inverterRealtimeResponse == null
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
buildeSurrogatePrincipalElectionStrategyr.toString()
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
DirectoryWebUpgrade.class
status().isPermanentRedirect()
version.equals("5") || version.equals("6")
assertEquals(1.3385236740112305,score,1e-4)
partialUri.toString()
JsonObject.createObjectMapper().getJsonFactory()
loaded.getLoaded().getConstructor()
ufsPath.getPath()
targetPrincipal == null
Character.isHighSurrogate(tmpBuffer[len - 1])
accounts.length > 0
fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.INVOICE_ADJUSTMENT)
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
logger.warn("Cannot update the group coordinator ({})",e.getMessage())
proxyFactory.createClass().getConstructor()
1 * ONE_HOUR
new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes)
entry.getKey()
BucketsEntity.class
nextNextInfo.distanceTo < TURN_IN_DISTANCE
qp.getExclusiveMinimum()
JwsSignatureVerifier signer
logger.warn(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
e.getMessage()
ISOChronology.getInstance()
Actor actor
"enable.network.classloader=" + true
CacheService.instance.keyCache.get(key)
error(e,e.getMessage())
new ValidatingDispatcher(threadPool.getThreadContext(),dispatcher)
MAXIMUM_AVAILABLE_FREE_DOWNLOADS=8
content.readable()
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equals(contentType)
XmppStringUtils.parseBareAddress(userJID)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
_siteNavigationMenuPortletInstanceConfiguration.navigationMenuType()
contains="doIntrinsicCachedLLVMTruffleObject"
mMenu.getVisibleItems()
Map<String,String>
hashInd == -1
(CacheEntryEventSerializableFilter)in.readObject()
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
Long.valueOf(value)
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
!ctClass.hasAnnotation(Entity.class)
node.incrementReferenceCount()
DEFAULT_OCTREE_WIDTH=10000
logger.error("Plugin class " + pluginClass)
Network.createServer(5110)
LOG.info("Halting process: ShellBolt died.",exception)
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
? extends T
JSONValue.parse(isr)
hz1.getLifecycleService().terminate()
Thread.sleep(1350)
new Paint(Paint.ANTI_ALIAS_FLAG)
showRecentApps(true)
XContentType.JSON.restContentType()
destroyPools()
m21 * m01
modified=false
cache.put(new Element(key,element),true)
chain.getEarliestKeyCreationTime() >= vKeyRotationTimestamp
telephony.isOffhook()
ensureStableCluster(3)
addToSet(mInvisibleTrackedIds,id)
args.length > 0
mService.stopLocalOnlyHotspot(mContext.getOpPackageName())
onDetachedFromWindows()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET)
cursor.getPosition()
isSavedPostsList()
StringBuffer ret
mHandler.removeCallbacks(pae)
obtainMessage(MSG_TIMEOUT,state)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
supportsNewLinesInSQL()
return repository; 
DEBUG=true
line.contains(StringPool.EQUAL)
new Origin(origin,nativeGetUsageForOrigin(origin),nativeGetQuotaForOrigin(origin))
this.route(request).otherwiseIfEmpty(Mono.defer(() -> other.route(request)))
"Error resetting interface " + mInterfaceName + ", :"+ e
promise.tryFailure(new ClosedChannelException())
mRenderNode.isPivotExplicitlySet()
assertEquals(5,pluginList.size())
log.error("Error invalidating SSH tunnel",e)
new BooleanQuery()
connection.hdel(key)
fullIdeArtifact.getVersion()
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:10500}")
new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(true)
view.getTag()
LOG.isInfoEnabled()
Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor()
handoffExecutor == null
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mMime.toLowerCase().startsWith("video/")
t.add(R.id.frame,new SampleListFragment())
myPalmId=id
StringBuffer buffer=new StringBuffer("["); 
event.getX()
createForeignKeyColumn(qb,attribute,true)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
warn(Log.IGNORED,ignored)
address == null
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
learningRate=0.01
new ObjectMapper().reader(IspResponse.class)
q.setFetchSize(timeoutParam.intValue())
IllegalArgumentException e
callback != null
DEBUG=true
telephony.getNetworkTypeForSubscriber(subId)
outputRowMeta.mergeRowMeta(data.fileRowMeta[i])
userRecord.mClientRecords != null
this.xpath.setText(xpath)
sr.makeNextStartId()
mPulseCallback.onPulseFinished()
processResult.getStdout()
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
args.length >= 1
options.setLanguageIn(LanguageMode.ECMASCRIPT5)
Command command
Executors.newCachedThreadPool()
FastMath.max(origin,num.floatValue())
Pattern.compile("^" + Pattern.quote(file.getAbsolutePath()) + "\\s*:\\s*\\d+\\s*:\\s*(?:warning:\\s*)?(.*)$")
new IllegalArgumentException("Expected a proto but was: " + body.mimeType())
selenium.isVisible("link=Control Panel")
e.getCause() instanceof InstantiationException
c.deactivate()
coreThreads.asString()
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName())
CONNECTION_TIMEOUT_SECONDS=30
PropertyListParser.saveAsASCII(x,outputFile)
x > 11
mGpsListener != null
dataBuilder.addLinesBuilder().setLine(i).setScmRevision("REVISION_" + i).setScmAuthor("a_guy").setSource("this is not java code " + i).setUtLineHits(i).setUtConditions(i + 1).setUtCoveredConditions(i).setItLineHits(i).setItConditions(i + 1).setItCoveredConditions(i).setOverallLineHits(i).setOverallConditions(i + 1).setOverallCoveredConditions(i).setScmDate(150000000L).setHighlighting("2,9,k;9,18,k").addAllDuplications(Arrays.asList(19,33,141))
type.getConstructor()
parent != null
selenium.isVisible("link=Control Panel")
avatar == null
result.confirm()
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false)
info.toString()
mAlpha == 0
StringUtils.isEmpty(obj.getAud())
this.thrown.equals("File must not be null")
TimeBeforeConstraint.class
info.getNaiForSubscriber(subId[0])
javaLibsByFile.containsKey(javaLibrary)
StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName())
@Override protected BlockBuilder getBlock(){   return blockBuilder; } 
getDelegate().getSupportedCipherSuites()
m.getClass()
InsertFinalStep<R>
IBackupManagerService svc=mService; 
_typeSettingsProperties.toString()
Exception e
logger.debug("Queue length is {} - deferring HEAL.")
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
script_params.addParameter(myConfig.getParams())
BeanPropertiesUtil.getString(model,_keyProperty)
new ArrayList<>()
type.getConstructor()
!Boolean.TRUE.equals(getAttribute(CASE_INSENSITIVE))
((ResolvedJavaType)obj).getName()
lastGoodQuery.getQuery()
varX("listener")
mock.expectedBodiesReceived("Hello World")
user.getCompanyId()
!mIsRecentsShown || mIsPipFocusedInRecent
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
targetActor.addCaptureListener(listener)
sender.getHostName()
StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler))
nodeEngine.getService(LockService.SERVICE_NAME)
new MessagingException("Cannot open folder: " + e.getMessage())
taskletElement.getAttribute(ID_ATTR)
traceOn
new int[684]
contact.getName()
mDeviceOwner != null
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,mWifiActivityIconId)
colors.getResourceId(i,0)
position < -1f || position > 1f ? 0 : 1f - (scale - 1f)
List<WebPageDetail>
event.getColumns()
new Packet(ioService.getPortableContext())
WordPress.getCurrentBlog().getRemoteBlogId()
new Paint(Paint.ANTI_ALIAS_FLAG)
VersionedChecksummedBytes mainAddressCopy=(VersionedChecksummedBytes)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
ticks / ticksInGap
dropNonSystemTables()
telephony.getDataNetworkTypeForSubscriber(subId)
this.csrfTokenRepository.generateToken(exchange).flatMap(token -> this.csrfTokenRepository.saveToken(exchange,token))
a.getFloat(attr,0)
currentStatus.remove(info.getWar().getAbsolutePath())
TVisit
context == null
supportSession=true
mContext.startActivity(shortcutIntent)
Log.info(this + " JVM BUG(s) - recreating selector " + _jvmFix1+ " times, cancelled keys "+ _jvmFix0+ " times")
new StringBuilder()
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,false)
Exception e
Float.valueOf(strings[i])
child.getProperties().isNodePartitionedOn(partitioningRequirement)
builder120.build()
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
-1
type.getConstructor()
new UrlClassLoader(urls,null)
app.getSettings().SPEAK_SPEED_CAMERA
assertEquals(14000,peer.getPingTime())
getPath("InputPackageDeclarationDiffDirectory.java")
typeSettingsProperties.toSortedString()
colors.getResourceId(i,0)
dir.exists()
Mockito.verify(spyDriver,Mockito.timeout(1000).times(1))
ZWaveSwithcAllCommandClass.class
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
new Intent(ACTION_FAST_TRACK)
rendererMap.put(info.target,info.renderer)
resolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
new IndexWriter(d,new StandardAnalyzer(),true)
TYPE_ATSC_M_H=0x00030200
new Paint(Paint.ANTI_ALIAS_FLAG)
indexBuf.getData().capacity()
logger.info("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
IntrospectionSupport.setProperty(jpa,"timestamp",msg.getTimestamp())
status.withDescription(msg)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).subscribe()
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())
getTelecomService().silenceRinger()
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).finallyDo(() -> commentIsPosting.onNext(false))
IBackupManagerService svc=mService; 
@Specialization protected Object fromInt(int value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
getTokenNames()
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
planRouteContext.isMarkersListOpened() && hideMarkersListFirst
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractACLCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
RenderingRuleProperty.createInputIntProperty(OBJECT_TYPE)
assertThat(context.getExtensions()).hasSize(41)
mIconAttrId > 0
person.getVoidReason()
referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
STUB_VERSION=48
testStatus.equals("PASSED") || testStatus.equals("SKIPPED")
new IllegalStateException("cannot set max pool size to a value less than the current max value(=" + i + ")")
operation.get(ROLLBACK_ON_RUNTIME_FAILURE)
colors.getResourceId(i,0)
updateCntr0 == null ? 0 : updateCntr
ImmutableList.of(result)
Slog.e(TAG,"FLP HAL not supported")
wrapDetails(sku,quantityAvailable,request)
selenium.isVisible("link=Control Panel")
yvel == 0.f
new WorldPoint(2473,3420,0)
assertFalse(removed)
pendingElements.size() > 0
GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))
stack.get(stack.size() - 4).longValue()
(UnsubscribeForm)form
checkLocationAccess(uid,packageName,allowedResolutionLevel)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
id=15834
Thread.sleep(5000)
other.getClass().toString()
constraints.weightx=1f
objects.length() < slots
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
from > to
log.warn("Cannot fetch column count for cursor : " + e.getMessage())
Box.createHorizontalStrut(conditionLabel.getPreferredSize().width + theCondition.getPreferredSize().width)
isGreaterOrEqual(platformVersion,MNC)
(JobFound)response
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
!ObjectUtils.isEmpty(getLocations()) && !ObjectUtils.isEmpty(getClasses())
!secondaryOk
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
assertEquals(3,builder.getErrors().getErrors().length)
createCustomStudySession(new JSONArray(),new Object[]{sb.toString(),Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},false)
read.location().kind()
ImmutableSet<ImplemetationMethodDescriptor>
metadataDao.saveItem(metadata)
mListener.onInputUpdated(inputId)
mNavigationBarView.getPaddingStart()
Indexer.addMessage(companyId,groupId,categoryId,threadId,messageId,title,content)
((StringLiteral)literal).getSlice()
lineNumber=0
alarm.getTime()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
buildName(rightNode)
odi.release()
Assert.notNull("No cache with name '" + cacheName + "' found.")
@Mock private HidProfile mHidProfile; 
Log.wtf(TAG,e.getMessage(),e)
resourceHandlerChain == null
getMyApplication().getFavorites().getVisibleFavouritePoints()
namespaceDescriptor.getQualifiedName()
timeout < 0
assertTrue(e.getMessage().toLowerCase().indexOf("writer") >= 0)
routes.BufferResource()
return 23; 
LOGGER.debug("Could not copy BibTex key",ex)
anchor.getElementType() == GroovyTokenTypes.mSH_COMMENT
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
logger.info("Creating Object {}",count.getAndIncrement())
code.length() == 0
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
getWrapper(leftRedirect)
value.isNull()
Assert.assertEquals(expected,values)
ThirdEyeUtils.getTimeSpecFromDatasetConfig(datasetConfig)
@GUIMenuSortOrder(4)
new IllegalArgumentException("Tag " + tagName + " not found. ")
errorType == ApiHelper.ErrorType.NO_ERROR
i < 10
_typeSettingsProperties.toSortedString()
selenium.isVisible("link=Control Panel")
Integer.toString(flags,16)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_DISABLED,0,null,true)
mWM.isKeyguardSecure()
datanode != null
selenium.isVisible("link=Control Panel")
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")")
shutdown(app)
ignite.log().error("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
((BCECPrivateKey)privKey).getS()
RedisRunner.startDefaultRedisServerInstance()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
incomingMessage.getMessagePayloadByte(1)
new LinkedHashMap<>()
parameter.toString()
offlineTableConfig == null
new StringBuilder(561)
LOGGER.trace(exception.apply().toString())
renderedObject.getId() % 2 == 0
Assert.assertFalse("reload-required".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))
return true; 
toTypeID != null
MoreCollectors.toImmutableSortedSet()
Environment.getRootDirectory()
blog.getRemoteBlogId()
ObjectConverter.toBoolean(scriptValue)
logger.debug("attempting to login")
new Paint()
StorageService.instance.initClient()
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
(flags & 0x01) > 0
l.getInt() != null
UserHandle.getCallingUserId()
FunctionTypesKt.isFunctionOrExtensionFunctionType(((ClassDescriptor)container).getDefaultType())
Environment.getRootDirectory()
getTimeout()
PApplet.split(transform)
-0f
mLoadingTile == null
"Content-Type".equals(name)
CompletableFuture<Boolean>
final LongAdder cnt=new LongAdder(); 
new ClusterConfiguration("whatever",StringLogger.DEV_NULL,"cluster://1","cluster://2")
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)
connectors.hashCode()
m.isTablePerHierarchy()
annotations.get(node)
TEST_UTIL.getHBaseAdmin()
getTestName(false)
hasPermission(permission)
LOG.warn("Promotion of block " + blockId + " failed.",ioe)
setImageDrawable(icon)
EPS_THRESHOLD=1e-5f
mIsLongClickable=true
type == QUADS
callback != null
mainSourceSet.getClasses()
getSubstring(0,50)
CONTENT_SCOPE_KEY.get(project)
SQLObjectEditor<GenericProcedure,GenericObjectContainer>
UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)
endpoints.add(entry.getValue())
mView.post(mAnimationStarter)
messageRecord.isEndSessin()
new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString())
type.getConstructor()
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("DHE-RSA-DES-CBC3-SHA",KeyExchange.EDH,Authentication.RSA,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA")
Assert.assertNull(ReportUtils.calculateFuel(startPosition,endPosition))
Integer.valueOf(bottomStr)
source.getAddress() == null
buildData.getTopLevelMasterHostname()
String key=(String)next.getKey(); 
ParamUtil.getBoolean(serviceContext,"layoutPrototypeLinkEnabled",false)
dest.writeLong(mSubId)
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
selenium.isVisible("link=Control Panel")
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
this.getClass().getName()
mMessageList.getId()
origin.realComponent().doubleValue() < other
DataStream<OUT>
getNotificationInterface().getHintsFromListener(mWrapper)
routes.SessionsController.index()
sqlRouteResult.getSqlParsedResult().getSqlType()
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
Response.ok()
this.mChildren.remove(pEntityMatcher)
/**   * Create the AnalyzedToken used for whitespace and other non-words. Use <code>null</code> as the POS tag for this token.  */ public Object createNullToken(String token,int startPos); 
Exception e
performDexOpt(packageName,instructionSet,true)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
instructionStart + 3
Watcher<Route>
d.setHotspot(x,y)
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
super.visitLocalVariable(variable)
nativeDraw(canvas,color,extras,true)
Slog.wtf(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
firstExc != null
getLocationEnabled()
assertNotNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
a.length >= count()
endPos < paraEnd
parent.setCoordinateIndex(0)
offset=12
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
selenium.isVisible("link=Control Panel")
arg.indexOf('.') >= 0
163 + (USE_OLD_HISTORY ? 1000 : 0)
reload()
appleConfiguration.getMultiArchPlatform(PlatformType.IOS)
new StatusBarIconView(getContext(),null)
account.getPendingEmailChange()
w <= 0 && h <= 0
msg.hasCacheMetrics()
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)
buildJSLoaderModulesServlet()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
Assert.assertTrue(_clusterInvokeAcceptor.accept(context))
LOG.debug("Received ping --> {}",payload)
wrapper.wrapDetails(attribute,request)
prop.getParamName()
dbManager.getHeadBlockId()
@CheckForNull @Override public Integer getVersion(){   return version; } 
typeSettingsProperties.toSortedString()
diffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT),filePath,revisions[0],revisions[1])
StringBuffer buf=new StringBuffer(); 
SearchFragment.newInstance(s)
public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } 
0.15 / Math.sqrt(N)
mState.action == ACTION_OPEN_TREE
group.shutdownGracefully()
button == MouseEvent.RELEASE
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
_vendorMySQL
XSourcePositionImpl.createOpenFileDescriptor(project,this)
Long.valueOf(value)
new GroovyParser().parse(GroovyElementTypes.EXPRESSION,builder)
loadExternalSettingLinks(preferenceCategory)
myChild2.getElementType() == ElementType.BLOCK_STATEMENT
assertEquals(counter,1)
SocialGroupStatisticsWebUpgrade.class
days(30)
advised.getConstructor()
Boolean.valueOf(getOptional("kylin.htrace.trace-every-query","false"))
applyCurrentState()
outputDir.getCanonicalPath()
merc.getDescription()
AbstractTableWriterModelCell tableCell
logger.info("reading file from {}, repairedAt = {}",session.peer,repairedAt)
new MongoSynchronization(dbHolder,mongo)
DeploymentDescription.getDeployDeploymentOperation(locale)
PrefGetter.getNotificationTaskDuration(this) != -1
context.isPersistentField(f) && getMappedByFromAnnotation(f).equals(persistentField.getName())
onRotationLockChanged()
tag.getObjectId()
"Invalid modules directory: " + modulesDir
Bukkit.getOfflinePlayers()
Localization.lang("Push entries to external application (%0)",appName)
ServiceLoader.load(ConfigurationBuilderFactory.class)
crPluggableScmMaterial.getFilterIgnore()
stack.peekFirst()
Exception exception
DEBUG_CAMERA_LIFT=true
new PacketDecoder(new JacksonJsonSupport(),new NamespacesHub(new Configuration()),ackManager)
settings.readLPw(null)
(breakpoint != null) && (breakpoint.getSuspendPolicy() == SuspendPolicy.ALL)
shortSizeDp > 600
n.getValue().getKey() != null
note.getContent()
_typeSettingsProperties.toString()
node.getTreeParent() != null
fail()
pw.println(ps.getInstantApp(user.id))
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).contains("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
log.warn("Problem in JSR223 script ",e)
i=0
assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(5)
params.copyWithExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
activeSyncAccountIds.remove(syncAccount.getSyncAccountId())
@Autowired HandlingEventRepository handlingEventRepository; 
test("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
logMinimal(message)
currentToken.hasType("operator","comment","numeric","text")
selenium.isVisible("link=Control Panel")
new QuickAdapter(this,0)
second.get(i)
TESTS=39
Assert.assertEquals(last,next)
getMethod(restrictionName,methodName).isDangerous()
context.formatSeparator()
flags.add(CLASSMETHOD)
privObj.getObjectName().equals("masking_test_druid")
Thread.sleep(5000)
new Paint(Paint.ANTI_ALIAS_FLAG)
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase
node.attributes()
is("/home/source")
return 6000; 
ams.mContext.createPackageContext(appInfo.packageName,0)
subModule.add(persistencePackage)
@GUIMenuSortOrder(1)
native_get_videoeditor_export_profile(vidCodec)
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteArray,true,indexSession,indexBoolean)
formatWebXML(fileName,content)
MAX_PORT_DEFAULT_VALUE=6000
currentTx.preConcatenate(matrixTx)
loaded.getLoaded().getConstructor()
new Ardi01ProtocolDecoder(Xrb28Protocol.this)
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this),fcmKey)
forward.setContentDescription("Close Button")
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getGroupId(),assetTagName)
durableSubscriptions.get(key)
moveInputMethodWindowsIfNeededLocked(false)
WAIT_FOR_NETWORK_TIMEOUT_DEFAULT_MS=2000
locPart.state() == MOVING
AvroSource<T>
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
Log.error(e)
new GdxRuntimeException("Error during Vorbis decoding.")
assertEquals(new String(serialized[0],US_ASCII),"test-bin")
selenium.isVisible("link=Control Panel")
dest.writeLong(mTxPower)
RouteInfo r; 
appearance.getPreference(1)
dest.writeParcelableArray(remoteInputs,flags)
new ModelNode().set(60000)
15 * 60 * 1000
createTextAttributesKey("KOTLIN_ANNOTATION",CodeInsightColors.ANNOTATION_NAME_ATTRIBUTES)
WaitUtils.waitForPageToLoad(driver)
win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)
logger.info("Renamed " + instancesRenamed + " instances of "+ propsRenamed+ " properties.")
mWm.addAppToken(0,null,0,0,false,false)
location != null
length > string.length()
++i
TypeParameterDescriptorImpl.createWithDefaultBound(classDescriptor,Collections.<AnnotationDescriptor>emptyList(),true,Variance.OUT_VARIANCE,Name.identifier("T" + (j + 1)),j)
second.get(i)
log.debugf("Duplicate @At mapping ? path=" + path)
Validate.notNull(reg,"Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString())
ObjectHeaderImpl.readHeaderBitsFromObjectCarefully(obj)
namespaceMap.put(typeToRead.getSchemaType().getNamespaceURI(),"ns1")
wifiConfig.isValid()
15 * 60 * 1000
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
new EntryTitleException()
!mAwake
m.getClass()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
actionBuilder.setStdout(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
buff.remaining()
ByteBufferUtil.string(value,value.position(),value.remaining())
Assert.assertEquals(threshErr2,error,1e-15)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
disableBluetoothContactSharing
StringBuffer buffer=new StringBuffer("("); 
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
DiagnosticFactory0<KtTypeParameter>
av != null
DEFAULT_TETHER_OFFLOAD_DISABLED=1
querySkuDetails(ITEM_TYPE_SUBS,inv,moreItemSkus)
collectCount < lim
target.isVector()
slice.getAddress()
LOG.info("Storage directory " + rootPath + " does not exist")
Color.fromRGB(0xD88198)
OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT=100
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
CONSTELLATION_TYPE_SHIFT_WIDTH=3
spec.getClass()
Fields fields
id=15843
jobState.clearExceptions()
mMessageList.getId()
4 * Constants.KB
realm.assertThread()
mService.setUidPolicy(UID_A,POLICY_NONE)
((GroovyObject)receiver).getMetaClass() != metaClass
BUTTON_QUIESCENT_ALPHA=0.6f
LOG.error("Failed to find " + baseDirectory.getAbsolutePath())
applyDefaultViewName(request,mv)
mPwCollection.getGroupedPwPairsSortedByRank()
GlobalContext.getInstance().getAppTheme() == R.style.AppTheme_Four
sTestCaseCounter == 1
this(icon,title,intent,new Bundle(),null,false); 
name.indexOf('+') >= 0
mimeType == null
resTarget.withFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
childSubscription.setSubscription(scheduler.schedule(parentAction,parentAction))
mjCtx.getOldMapJoin() == null
SamplingProfiler.newThreadGroupTheadSet(group)
Thread.sleep(5000)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
JsonSyntaxException jse
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,null,true)
getLocationEnabled()
mFlexItem.setAlignSelf(AlignItems.CENTER)
selenium.isVisible("link=Control Panel")
getActiveFgCall().getPhone().sendDtmf(c)
type.getConstructor()
assertPhoneNumberEqual("123123","0123123",false)
obj.getAcceptableTokens()
private static Object enhanceHelper(Class cls,final Class[] interfaces,final Callbacks callbacks,ClassLoader loader,final CallbackFilter filter){   final Class base=(cls == null) ? Object.class : cls;   Object key=KEY_FACTORY.newInstance(base,interfaces,filter);   return cache.get(loader,key,new FactoryCache.AbstractCallback(){     public BasicCodeGenerator newGenerator(){       return new EnhancerGenerator(base,interfaces,filter,callbacks);     }     public Object newInstance(    Object factory,    boolean isNew){       if (isNew) {         ((Factory)factory).setCallbacks(callbacks);         return factory;       }  else {         return ((Factory)factory).newInstance(callbacks);       }     }   } ); } 
FileTemplateUtil.mergeTemplate(attributes,airDescriptorContentTemplate)
HashMap<Object,AggregationStrategy>
_extensionsMap.put(mimeType,extensions)
Thread.sleep(500)
ColorResources.getColor("controlColor")
lastPos != mBoundPos
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
format != null
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new IndexWriter(dir,true,new WhitespaceAnalyzer(),true)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
statistics.addRemoveTimeNano(System.nanoTime() - start)
logger.info("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
Iterable<ObjectType>
super.execute(executor,patchers)
WeighingService.weigh(WEIGHER_KEY,element,new ProximityLocation(context,contextModule,processingContext))
fluentSetters()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
config.getMaxRedirects()
type.getConstructor()
IBackupManagerService svc=mService; 
sNotificationData.currentMediaItem >= sNotificationData.totalMediaItems
end + emoji.length()
private final TarTaskOutputPacker delegate; 
assertNull("rt",cfg.resultType)
mInjector.getUserManager().removeUser(userId)
public TokenStream create(Reader input){   return new CharStreamAwareCJKTokenizer((CharStream)input); } 
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
new Paint()
lookupService.lookupPrincipalByGroupName(user)
setInputMethodEnabled(info.getId(),true)
PyQualifiedExpression.class
from > to
Long.valueOf(value)
CACHE_MANAGER.addCache(storageCache)
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"),felix())
subsidyDecreaseBlockCount=10000
loadAnimator(fragment,transition,true,transitionStyle)
orgReplica.applyIndexOperationOnReplica(3,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id2",new BytesArray("{}"),XContentType.JSON),u -> { } )
mInner.end()
selenium.isVisible("link=Control Panel")
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
UastUtils.isChildOf(((UBinaryExpression)parent).getRightOperand(),expression,false)
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true)
new URLClassLoader(new URL[]{aDir.toURI().toURL(),bDir.toURI().toURL()})
getKeyDesc(keyRowMeta,keyNrs,one)
return handshakeTimeoutMillis; 
HBaseFsck.class
state.addNullness(true,y)
GenericCommand<Void>
U extends Identifier
resources.getDimension(R.dimen.close_handle_height)
new Long(getByteValue(workingMemory,object))
XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors())
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally
new IllegalStateException("Failed to create temporary folder in " + workingPath)
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
visitNode(node,context)
new HashMap<>(keys.size())
FastMath.max(origin,num.floatValue())
store.setZkSessionTmeout("15s")
inputBind.setDescription(bind.description())
Operators.onRejectedExecution(ree,this,null,null)
UnsafeUtils.set4(_mem,8,bias)
os.unsafeByteArray()
HEADER=234222482
appName != null
context == null
scriptHost.toLowerCase().equals(host.toLowerCase())
log.warn("Can't set auto-commit state: " + e.getMessage())
new Long(post.getId())
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
i=50
Assertions.expectThrows(EmptyStackException.class,() -> stack.peek())
hasCapability(GPS_CAPABILITY_MSA)
iterator.getStart() != offset
new Intent()
telephony.getCdmaEriIconModeForSubscriber(subId)
mHidProfile.isProfileReady()
Thread.sleep(5000)
ApplicationManager.getApplication().invokeLater(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
WebStorage.getInstance().deleteAllDatabases()
cf.getCompressionType() == null
BACKGROUND_DEXOPT_JOB=808
dockedBounds.left - adjustment
getCurrentTab().handleDiscourseCopy()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),blacklistedSubdirectories)
mediaVideoItem.getHeight() * 2
nullabilityOfA.refine(nullabilityOfA)
selenium.isVisible("link=Control Panel")
dest.writeLong(txPower)
imageWidth / targetHeight
Optional<ZkWorker>
/**   * Returns first child <b>element</b> node or <code>null</code> if no element children exist.  */ public Node getFirstChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[0]; } 
Strings.isNullOrBlank(kubernetesName)
selenium.isVisible("link=Control Panel")
token.getLifetime()
packet.setError(PacketError.Condition.not_authorized)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
appName != null
RuntimeException e
FUNCTOR_PROCESS_DELAY=2
file.getAbsoluteFile()
d.setAutoMirrored(true)
Simple.of(MutableList.class)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
loadTaskListContent(true)
values[i] == values
dlFileEntryFinder.countByG_U_F_M(groupId,0,folderIds,mimeTypes,new QueryDefinition(WorkflowConstants.STATUS_ANY))
lightContribution[LIGHT_AMBIENT_R]
config != Config.ARGB_8888
mHorizontals == null
analyzer.analyze(parser.createStatement(sql),true)
item == null
new ArrayList<>()
!compoundResult.isSuccess()
_fileEntryDisplayContextHelper.isCheckedOutByMe()
msgInfoHolder != null
saveActions.equals(new SaveActions(enabled.isSelected(),formatterString))
mMat[6]
URI != null
IBackupManagerService svc=mService; 
anchorView.getWindowToken()
status().isMovedTemporarily()
getPropertyAsString(POLICY)
encoder.writeString(event.getMessage())
ByteBuffer.allocateDirect(DEFAULT_NET_BUFFER_SIZE)
mInTouchMode=false
GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))
config.setFast(true)
keyed=false
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
segmentsEntryRelPersistence.findBySegmentsEntryId(segmentEntryId)
nextRenderId=30
type.getConstructor()
String.format("User [%s] doesn't exist",username)
public class TimesNewRoman extends FontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } 
item.setTailText(notice)
invoice.getCBAAmount()
mHandler.removeCallbacks(pae)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
outputDir.mkdir()
new FileMetadataSnapshot(FileType.RegularFile,bfa.lastModifiedTime().toMillis(),bfa.size())
Lists.newArrayList(DEFAULT_FILE_PARSER)
hideIdColumn == null ? false : hideIdColumn
(T)this
Objects::isNull
FormatUtils.toString(center.getDate(),false)
myIconOpaque=true
SVID_SHIFT_WIDTH=7
DISPLAY_TASKS_PORTRAIT=8
new Paint(Paint.ANTI_ALIAS_FLAG)
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ mCurrentFocus+ "}}"
telephony.getDataNetworkTypeForSubscriber(subId)
30 * 356
assertEquals(3,repos.length)
dumpErrorCountThreshold=3
file == null
mDark && mPulsing ? 0.5f : 1
viewStateIndex|=VIEW_STATE_PRESSED
AllCodehausJavaTestsSuite.suite()
mBackdrop.animate().alpha(0f)
mAuthorities.get(i)
IllegalAccessError.class
ProtobufUtil.createSnapshotDesc(reqSnapshot)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
Predicates.and(Predicates.containsPattern(".*/src/.+\\.py[c]{0,1}$"),Predicates.not(Predicates.containsPattern("third_party/")))
ColorResources.getColor("menuDisabledForeground")
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
b=data[byteOffset]
p.getName().equals(name)
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
MAX_DIMEN_FOR_ROUNDING=1080
iter > 1
isDisposed() || myProject.isDisposed()
Integer.valueOf(row.getValue(partitionCol).toString())
_endp.isOpen() && (more_in_buffer || progress)
selenium.isVisible("link=Control Panel")
count > 1500
mService.addOrUpdatePasspointConfiguration(config)
splits.length < i
SLIDING_TIMEOUT=20L
selenium.isVisible("link=Control Panel")
this.isDefaultAutoCommit()
n.getNodeData().getLabel().toLowerCase().contains(str)
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
oldVersion < 1030002
setColor(color)
Primitive.longObjectMap(32)
testSame("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
SystemClock.nanoTime()
appWindowToken == null
STMT_CACHE_CLEANUP_TIMEOUT * 2
Values.UPGRADE.equalsIgnoreCase(connection)
ImmutableList.<PostAggregator>of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"))
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true)
Bytes.toBytesBinary(tableNameOrRegionName)
visibility != View.VISIBLE
proxyHTTPPort.setText("")
client.checkExists()
logger.error("{}",general)
mockRegionInfo.isMetaRegion()
ChangesUtil.getBeforePath(change)
type.getConstructor()
(device=1 << i) <= AudioSystem.DEVICE_OUT_DEFAULT
dynamicType.getLoaded().getConstructor()
ClassNotFoundException e
createHandlerResult(swivelCredential,this.principalFactory.createPrincipal(uid),null)
mAuthorities.get(i)
mapLayerConfiguration.setOpacity(((float)cachedMapTransparency) / 255.0f)
new RelativeCoordinatesProvider(hRef,vRef,hDelta,vDelta)
sub.emit(dataBuffer)
Long.valueOf(stats.get("size").toString())
Object[]
assertEquals(301,status.getStatusCode())
logicalExpressionStack.get(logicalExpressionStack.size() - 1)
mGpsListener != null
(i & RSV_BITMASK) > 0
mSelectResponse != null & mSelectResponse.length > 0
origin < other
items[27]
LOGGER.debug("Could not execute sendAsEmail",ex)
csUseGlobalSearch=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
Slog.wtf(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
TextSecureCommunicationFactory.createManager(context)
i == -1
scope == null
boardsFile.getAbsolutePath()
new Paint(Paint.ANTI_ALIAS_FLAG)
DEFAULT_EXPIRE_AT=0
removeCallbacks(null)
selenium.isVisible("link=Control Panel")
mProviderRequest.reportLocation && !mDisableGps
TagViewActivity.class
compressedProto.length < 390000
HeaderBuilder.this
metadata.getFaces()
setupFillPaint(paint,opacity)
alertEventHandler != null
nodeString()
selenium.isVisible("link=Control Panel")
Math.min(desired,height)
IndexReader r2=IndexReader.openIfChanged(r); 
new IllegalArgumentException()
copy(c.getDistributionManagement(),t.getDistributionManagement(),isChildMostSpecialized,c.getArtifactId(),p)
newState.score()
new CatchupServer(platformModule.logging.getInternalLogProvider(),platformModule.logging.getUserLogProvider(),localDatabase::storeId,platformModule.dependencies.provideDependency(TransactionIdStore.class),platformModule.dependencies.provideDependency(LogicalTransactionStore.class),localDatabase::dataSource,localDatabase::isAvailable,null,config,platformModule.monitors,new CheckpointerSupplier(platformModule.dependencies),fileSystem)
ref != null
call.getProject()
deopt1.action()
view.getTag()
graphModel.isDirected()
new NullPointerException(checkedValue + " should not be null")
BufferUtil.toDebugString(prefilled)
"Cannot guess file extension for invalid MIME type: '" + name + "'"
new LayerView(this,0xff0000ff)
m.getLineNumber() < 460
currentBlog.getRemoteBlogId()
OpenSparkInterpreter(false)
mLastBatteryLevel != mHealthInfo.batteryLevel
accountInfo.getDate()
new ListenerInfo("https",sslServer.getLocalAddress(),openListener,xnioSsl,channel)
selenium.isVisible("link=Control Panel")
new ConcurrentHashMap<Class<?>,Boolean>(64)
useAutoinc=true
onRotationLockChanged()
w.mBaseLayer <= myLayer
firstSlash == 0
mIconAttrId > 0
loaded.getLoaded().getConstructor()
k < THREADS
i > BY_WOOL_DATA.length
mPackageUsage.write()
selenium.isVisible("link=Control Panel")
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
components.beforeEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
accountCapsule.putFreeAssetNetUsage(tokenID,newFreeAssetNetUsage)
resourceCollector.addIntResourceIfNotPresent(RType.ATTR,attrName)
info == null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
e1.getPointerCount()
parentKey != null
primaries()
MIN_DIMENSION_TO_RECUR - (int)maxY
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
createBeanNameELResolver(false)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).getAndSet(value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()))
user.isOwner()
mActionBarTop.getVisibility() == VISIBLE
HttpStatus.FORBIDDEN.toString()
new ImmutableShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
new TanhDerivative(x,y,z,n)
id=15845
mFormLoaderTask.getStatus()
t instanceof InvalidToken
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
id=7
mDataAuthorities == null
selenium.isVisible("link=Control Panel")
assertEquals(2,TestAdvice.names.size())
assertEquals(12718,(long)stats.getCrawledBytes().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
mMncStr == null
Iterator<Column>
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
generatePomXML(kfs,gav)
future.isCancelled()
removeCallbacks(null)
LocaleUtil.getDefault()
m21 * m01
Messages.showInfoMessage(component,getErrorTextFromException(e),title)
mode != IControllable.Mode.Unknown
IndexReader.open(benchmark.getRunData().getDirectory(),true)
FaultSerialVersionUID faultSerialVersionUID=(FaultSerialVersionUID)penv.get(ToolConstants.CFG_FAULT_SERIAL_VERSION_UID); 
events.add(event)
new IllegalAccessError("read-only")
element.getNodeName()
left == right
plugin != null
DBG_CAMERA_LIFT=true
parameter.toString()
SiteNavigationSiteMapWebUpgrade.class
FastMath.max(origin,num.floatValue())
case GETHOMEDIR: 
fragmentEntryPersistence.filterFindByG_FCI_S(groupId,fragmentCollectionId,status,start,end,orderByComparator)
upd != null
model.startsWith(manufacturer)
selenium.isVisible("link=Control Panel")
(low + high) >> 1
wp.getRunAdvance(mChars,start,contextEnd,contextStart,contextEnd,runIsRtl,end)
new HighlightInfoTypeImpl(HighlightSeverity.INFORMATION,CodeInsightColors.TODO_DEFAULT_ATTRIBUTES,false)
strangeVocab.getWordFrequency()
equalTo(0L)
getEffectiveCleartextTrafficPermitted()
new FileNotFoundException()
Map<Object,RealmObject>
liquibaseDataType.toString()
COOKIE_SYNC_MANAGER=true
preMergedCustomer.isLoggedIn()
assertThat(countWithAllDateFieldsNull).isEqualTo(1)
parent.currentContext()
!mShowsDialog
matrixMode == MODELVIEW
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SUCCESSFUL)
tableCache.getTypedObjects(monitor,this,PostgreTableReal.class)
body.invoke(_super(),onAttachedToWindowMethod)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
mPowerManager.isScreenOn()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
DUMP_TIMEOUT_MS=20000
new LightweightThread(null,this)
NUM_OUTPUT_BUFFERS=16
mInfo != null
dynamicType.getLoaded().getConstructor()
set(object,value.intValue())
defaultMaxRowsInMemory=500000
eipCandidates.iterator()
-1
PathUtils.concatPath(src,child)
new Dimension(600,800)
callTimeoutMs=5000
Validator.isNull(entry.getUrlTitle())
mValues[7]
new LiferayRepository(repositoryId)
e.getMessage()
BufferUtil.zeroBuffer(128)
hz1.getLifecycleService().terminate()
metadata.getFaceRectangles()
GridCacheProjection<UUID,String>
new IndexWriter(index,new WhitespaceAnalyzer(),true)
propValue == null
realm.assertThread()
deltaY > 0
d.addWelcomePages(welcomeFiles)
PRIORITY_MAX=2
mSyncStatus.get(i)
boundingBox.getLatSouthE6() / 186
jdk.getHomeDirectory() == null
contains="doCachedTypeCachedOffset"
NullPointerException.class
-29
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),false)
String.format("Warning:  Could not parse [%s] for roles verification. Please revise and fix it. Nonetheless, the user will still be associated with all specified roles",rolesFile.toAbsolutePath())
mMncStr == null
supportProvider.getPullUpHandler()
incomingMessage.setTransActionCanceled(true)
_writeNestedList(nestedListFieldFunction,list,_jsonObjectBuilder,null)
new GoKeywordCompletionProvider(KEYWORD_PRIORITY,"for","const","var","return","if","switch","go","defer","goto")
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
Table<String,String,byte[]>
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
fraction * (nextValue - prevValue)
mMat[6]
selenium.isVisible("link=Control Panel")
chatCommandManager.registerCommand(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
public static final JPQLTemplates DEFAULT=new OpenJPATemplates(); 
new StatsListener(ss)
ColorResources.getColor("textColor")
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
appearance.getFont(attr)
mRepeat > 1
builder.startArray("upgraded_indices")
this.permanent=false
menu.getMapActivity().getContextMenu().hide(false)
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
32 * 1024 * 1024
THREADS_PER_CLIENT=8
renderUpdate(out,results)
value.toLowerCase().contains(constraintLowerCase)
new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider)
new S3DataSegmentMover(mockS3Client)
assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L,"2011-05-01").setLast(true))).isTrue()
StringBuffer buffer=new StringBuffer(pattern.length() * repeats); 
configureAST(classNode,code)
Assert.assertTrue(_clusterInvokeAcceptor.accept(context))
ZonedDateTime.now()
deferUpdateBounds(RECENTS_STACK_ID)
JNIExceptionHandlerReturnNullWord.class
is(2)
savedInstanceState.getInt(KEY_ACTION,-1)
Validator.isNull(referringPortletResource)
JsonOutput.toJson(json.toString())
HashSet<>
mMat[6]
metadata.getFaceRectangles()
"wrong partition, expected: " + getPartitionId() + " but found:"+ op
table.leftJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
return false; 
getLog()
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).subscribe()
MIN_DIMENSION_TO_RECUR - (int)maxX
channel != null
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).contextStart(withUser)
FluentIterable.of(Default.class.getDeclaredClasses())
mHorizontals == null
KaleoServiceUpgrade.class
currentFuel == null
shuffleWithInexistingUuids(project1.uuid(),project3.uuid())
n.intValue()
showNotifications.isNull()
imageView.setBackgroundDrawable(drawable)
metricName.getName()
assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)
counter >= max
realm.assertThread()
dependentMeasureRef.equalsIgnoreCase(that.getDependentMeasureRef())
selenium.isVisible("link=Control Panel")
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,true,"cancelNotificationWithTag",pkg)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION)
policy != null
method.getReturnType().getSimpleName()
sourceWidth > 0
requestedProvider.get().verify(service)
PRODUCT_FORMATS.size() + 3
selenium.isVisible("link=Control Panel")
MessageNotifier.updateNotification(context,masterSecret,true,reminderCount + 1)
getVFile(name,false)
mCollapsibleHeight > 0
!isPartialUpdate
tabAlias.equals(tableAlias)
dest.writeLong(mSubId)
Integer.valueOf(stackIdStr)
targetType.getConstructor()
tagData.getValue(TagData.NAME).length() == 0
logger.error("Failed to load config file {}, falling back on default config")
type.getConstructor()
logger.debug("Removing: {}",r)
modulePath.split(File.pathSeparator)[1]
out.writeLong(sampleCount)
new Paint()
mPluginsContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
loaded.getLoaded().getConstructor()
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
_notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
mBluetoothLock.readLock().lock()
component.setUnderlined(object.get("obfuscated").getAsBoolean())
i > speedBumpIndex
ApplicationConfiguration.build(ElasticsearchStubConfiguration.class).run("--server.port=" + PORT)
LOG.error(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
telephony.isIdle()
getUserStateLocked(callingUid)
return 1; 
Assert.assertEquals(select.size(),1)
value.length() > MAX_LENGTH
child.mLayerType == LAYER_TYPE_SOFTWARE
assertEquals(strangeVocab.getIndex(),3)
Log.wtf(TAG,e.getMessage(),e)
logger.equals(msg)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
sharedPreferences.getBoolean(key,true)
DEBUG=true
selenium.isVisible("link=Control Panel")
new RuntimeException()
capacity > 1 << 30
LOG.error(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
return true; 
animateType != 3
5 * 60 * 1000L
new StackManager(new File(singleStack.replace(StackManager.PATH_DELIMITER,File.separator)),null,osFamily,true,metaInfoDao,actionMetadata,stackDao)
selenium.isVisible("link=Control Panel")
mObsoleteAgents.remove(info)
new ConcurrentHashMap<String,Boolean>(64)
this.address=address
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
mServiceMap.valueAt(userId)
3 - iteration
new org.deeplearning4j.nn.graph.vertex.impl.NormalizeVertex(graph,name,idx,dimension)
mAuthActivity.unbindService(TokenRefreshServiceConnection.this)
onEvaluateInputViewShown()
mListener.onInputUpdated(inputId)
if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
Application.SDK_INT >= 14
selenium.isVisible("link=Control Panel")
!syncedFolderItem.isEnabled()
eps(otherArr)
TestJsonRequest.doJsonRequest(client,false)
mInner.end()
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package has a different signature: " + pkgName)
LOG.error(e)
realm.assertThread()
storeRepo.getAllLocalStores()
services.size() == 0
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
Files.isReadable(file)
Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl))
new LayerVisitor(this,region,minimumBlockY(region),maximumBlockY(region),ground)
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,null,content,"general",structureId,templateId,StringPool.BLANK,1,1,2008,0,0,0,0,0,0,0,true,0,0,0,0,0,true,true,false,StringPool.BLANK,null,null,StringPool.BLANK,serviceContext)
conf.getFeatureMapSize()
mMatchMode=numOfMatchesPerFilter
tests.add(clazz.getGenericsTypes()[0].getType())
metadata.getFaceRectangles()
type.getConstructor()
telephony.isIdle()
private final StringBuilder buffer=new StringBuilder(512); 
traceInfo.get(key)
annotations.isEmpty()
batch.getSample().getRequiredBatchMemorySize() * 5
keyPressedCount == 0
telephony.getLteOnCdmaModeForSubscriber(subId)
file == null
mBackdrop.animate().alpha(0f)
decoderMatch != null || decoderMatch.hasMatches()
memoryReservation.getAndAdd(bytes)
m22 != 0
colDesc.getType()
client != null & client.autofillClientIsFillUiShowing()
new RuntimeException(e.getMessage())
typeSettingsProperties.toSortedString()
securityMode != SecurityMode.None
selenium.isVisible("link=Control Panel")
3 + uids.length
Context.getEncounterService().createEncounter(encounter)
id=44
PyPackageUtil.hasManagement(packages)
internalPath != null
status != 0
z.next_in[z.next_in_index++] == 0
c == Integer.class
mViewPager.setOffscreenPageLimit(2)
getTtsVoiceUsed()
mBondState.setBondState(address.toUpperCase(),state)
IndexSettingsModule.newIndexSettings(index,Settings.EMPTY,Collections.emptyList())
checkPojoMetaClass()
new GitMaterialConfig(new UrlArgument(git.getUrl()),gitBranch,null,git.isAutoUpdate(),filter,crScmMaterial.getDirectory(),toMaterialName(materialName),git.shallowClone())
AsyncHttpClient.class
mock.expectedBodiesReceived("Hello World 2","Hello World 4")
LOG.error(e)
powerQuery[i] == 0.0d
DISPLAY_TASKS_PORTRAIT + 2
entity.func_70056_a(packet.scaledX,packet.scaledY,packet.scaledZ,packet.scaledYaw,packet.scaledPitch,1)
maxMergeAtOnce != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED)
Log.warn("The given country from the response: " + billToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
mavenRepoLocal == null
verifyNothing(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
UserHandle.getCallingUserId()
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
selenium.isVisible("link=Control Panel")
checkManageUsersPermission("getting profiles related to user " + userId)
SystemTable.getLocalHostId()
suiteClass.getName()
rm.getPrecision(i)
mPowerManager.isScreenOn()
colors.getResourceId(i,0)
setFlag(FLAG_ONLY_ALERT_ONCE,autoCancel)
Thread.sleep(5000)
conf.getInt("mult")
verifyPosition(decoder,text("$PHO0,6091,233606.000,A,0902.9855,N,06944.3654,W,0.0,43.8,141112,,,A/00010,00000/0/224000//"))
mDefaultOverlays.contains(overlayPackage.packageName)
id=15856
code.length > 65536
MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA,THE_LONG,THE_LONG,THE_BOOLEAN)
Integer.parseInt(value)
selenium.isVisible("link=Control Panel")
newName.equals(code[i].getPrettyName())
fragmentCollectionPersistence.filterCountByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
apnContext.getWaitngApns()
NODE_START_CHECK_LIMIT=5
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.MOBILE_DATA_ALWAYS_ON,0)
selenium.isVisible("link=Control Panel")
DLAppLocalServiceUtil.updateFolder(folder.getGroupId(),folder.getFolderId(),folder.getParentFolderId(),"New Name",RandomTestUtil.randomString(),serviceContext)
previousParameterName.compareTo(parameterName)
ReplicationMessage event
change.isIsReplaced()
media.getMediaType() == MediaType.AUDIO
transform(matrix,source,width,height,false,recycle)
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallback(new MetricCB())
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
selenium.isVisible("link=Control Panel")
partProps.size()
+theme
settings.getFilesize(Keys.git.packedGitOpenFiles,cfg.getPackedGitOpenFiles())
mResourceData[i] != null
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
rowLabels.size()
ENTER_DOZE_HIDE_WALLPAPER_DELAY=2000
transfer.getTransactionId()
IndexReader.open(store,true)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy)
maxContentTextLength=15
focusedTopActivity != null
Object result
result.getWarnings()
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),12)
i=1
countNewlines(fragment) + 2
selenium.isVisible("link=Control Panel")
assertFalse(Jodd.isModuleLoaded(PETITE))
HashCode.fromInt(hashCode())
mState.mPivotY == pivotY
updateStreetName(calculateTextState())
height > seaLevel
myDebugger.disconnect()
HttpStatus.SC_OK != statusCode
/**   * Link to wiki, autogenerated using the name identifier.  */ WIKI
this.input.clone()
mode != null
args.length > 1
Matchers.<Map.Entry<String,String>>contains(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
child.getMeasuredHeight()
resources.getDimension(R.dimen.close_handle_height)
BundleFactoryOutputRecieverFactory.create(bundleFactory,stage.getComponents(),outputs::add)
RedissonMultimap.this.size()
String.format("%-15s: %s",username,Arrays.stream(markedRoles).map(s -> s == null ? "-" : s).collect(Collectors.joining(",")))
response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty())
checkNotNull(checker.getAnnotation(BugPattern.class))
bukkit.setNote(we.getNote())
fraction * (nextValue - prevValue)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
editor.apply()
mHandler.postDelayed(pae,timeout)
display.getMetrics(mDisplayMetrics)
selenium.isVisible("link=Control Panel")
@PathParam("interval")
spec.getClass()
javaWriter.emitSingleLineCOmment("foo")
mbMessage.isDiscussion()
mFlexItem.setAlignSelf(AlignItems.FLEX_END)
!mIsRecentsShown || mIsPipFocusedInRecent
Object.class
return false; 
super.onCreate(icicle)
selenium.isVisible("link=Control Panel")
clazz.getSuperclass()
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
actual_train_samples_per_iteration / correction <= 10 * tspiGuess || actual_train_samples_per_iteration / correction >= 0.1 * tspiGuess
LinkedHashMap<String,Object>
15 * 60 * 1000
fluidOil.getBlockID()
ThirdEyeUtils.getTimeSpecFromDatasetConfig(datasetConfig)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
public class BackupManagerService implements IBackupManagerService {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
routes.InputsResource()
mPulseCallback.onPulseFinished()
index > 0
Boolean.valueOf(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).finallyDo(() -> isFormSubmitting.onNext(false))
new IndexWriter(directory,autoCommit,ANALYZER,true)
Integer.valueOf(p.getProperty("numberid.id"))
log.error(sm.getString("hostConfig.deployDescriptor.error",xml))
new TextField<String>(TopicConfiguration.TOPIC_NAME_KEY)
new IntPreference("max_level_download_tile",18)
FilterBuilders.missingFilter(RuleDocument.FIELD_CHARACTERISTIC_KEY)
_log.error(ioe,ioe)
cacheScaled5.setColor(red)
currentCountry.getCountryFullName()
lastModified <= headerValue + 1000
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
matchAxisFilter != 0
selenium.isVisible("link=Control Panel")
hitTest(child,localPoint.x,localPoint.y,viewSelector)
Thread.sleep(5000)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
mAttributes.getFlags()
mAppOpsManager.noteOp(opCode,uid,packageName)
isVisible()
mUserPaddingStart >= 0
mBluetoothHeadset.startScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
Object.class
loaded.getLoaded().getConstructor()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS))
tp.go(fd)
json.writeStartObject()
mHorizontals == null
http2.setInitialStreamSendWindow(initialStreamSendWindow)
client.getGameState() != GameState.LOGGED_IN
messenger.requestSms(res)
new SolrException(1,"error parsing event listevers",e,false)
lastBatchId != null & lastBatchId.equals(msgId)
lambdas.size() >= ordinal
Log.wtf(mTag,"Adjusting remote volume without a controller!")
file == null
onCreateView(mContext,appWidgetId,appWidget)
enSearch.getResultSet()
getInitializer()
assertEquals(3,ti.nrOfInvocations)
longSize >= 800
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
new Pair<>(modelName,expressions().values().iterator().next())
application.map(version::compareTo).orElse(0) < 0
modIcon.getOriginalWidth()
Mutation rm=new Mutation(KEYSPACE1,dk.getKey(),cf); 
callTimeout=1000
longSize >= 530
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
/**   * {@code BuildCacheService} decorator that stages files locally from a remote build cache. This provides a separation betweena build cache problem and a  {@code BuildCacheEntryReader} or {@code BuildCacheEntryWriter} problem.  */ public class StagingBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private final RoleAwareBuildCacheService delegate;   private final boolean stageCacheEntries;   private final TemporaryFileProvider temporaryFileProvider;   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  boolean stageCacheEntries,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.stageCacheEntries=stageCacheEntries;     this.temporaryFileProvider=temporaryFileProvider;   }   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  RoleAwareBuildCacheService delegate){     this(temporaryFileProvider,!(delegate instanceof DirectoryBuildCacheService),delegate);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (stageCacheEntries) {       return super.load(key,new StagingBuildCacheEntryReader(reader,temporaryFileProvider));     }  else {       return super.load(key,reader);     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (stageCacheEntries) {       super.store(key,new StagingBuildCacheEntryWriter(writer,temporaryFileProvider));     }  else {       super.store(key,writer);     }   }   /**   * Reads the cache entry to a local file from the build cache and then reads the cache entry from the local file.  */ private static class StagingBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader reader;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryReader(    BuildCacheEntryReader reader,    TemporaryFileProvider temporaryFileProvider){       this.reader=reader;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void readFrom(    InputStream input) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         stageCacheEntry(input,destination);         readCacheEntry(destination);       }   finally {         destination.delete();       }     }     private void stageCacheEntry(    InputStream input,    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         IOUtils.copyLarge(input,fileOutputStream);       }   finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void readCacheEntry(    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         reader.readFrom(fileInputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileInputStream);       }     }   }   /**   * Writes the new cache entry to a local file and then pushes the local file to the delegate build cache.  */ private static class StagingBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter writer;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryWriter(    BuildCacheEntryWriter writer,    TemporaryFileProvider temporaryFileProvider){       this.writer=writer;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void writeTo(    OutputStream output) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         writeCacheEntry(destination);         unstageCacheEntry(output,destination);       }   finally {         destination.delete();       }     }     private void writeCacheEntry(    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         writer.writeTo(fileOutputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void unstageCacheEntry(    OutputStream output,    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         IOUtils.copyLarge(fileInputStream,output);       }   finally {         IOUtils.closeQuietly(fileInputStream);       }     }   } } 
page=TESTING_AUTHENTICATION_SETUP
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
Math.max(Runtime.getRuntime().availableProcessors() - 1,1)
new DeadCodeEliminationPhase(REQUIRED)
new EditSessionBlockChangeDegate(editSession)
listener.equals(pongMessageHandler)
now > prefs.getLong(Constants.PREF_LAST_UPDATE_CHECK,0) + Constants.UPDATE_MIN_FREQUENCY
mAuthorities.get(i)
checkLocationAccess(uid,packageName,allowedResolutionLevel)
Object value=new MockMVCCModel(_VERSION_1); 
VfsUtilCore.getRelativePath(sourceRoot,mainClassFile,'/')
requestHeaderRegex == null
new ShowHabitMenuBehavior(habitList,habit,taskRunner,screen,system)
status().isPermanentRedirect()
? extends CharStream
mContext.sendBroadcast(intent)
version > 0
localLOGV || false
handshake == 0
mGpsListener != null
tableHasColumn(oldTableName,"commentId")
LOGGER.debug("Could not execute unmarkEntries",ex)
Log_OC.e(TAG,"Got to start sync")
ll.reverseRecursive1(head)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
allowStateLoss
outState.putBoolean(KEY_SHOULD_RESOLVE,mIsResolving)
(ErrorMessage)response
new HandlerThread(THREAD_NAME)
mLteSignalStrength > 63
selenium.isVisible("link=Control Panel")
XContentType.YAML.restContentType()
loaded.getLoaded().getConstructor()
aClass.findClassAttribute(name,false)
(sms.getUserData() == null) && (SmsEnvelope.TELESERVICE_MWI != teleService)
selenium.isVisible("link=Control Panel")
consoles.waitUntilJdtLsStarted()
Bullet.init()
mock.expectedBodiesReceived("c","b","a")
selenium.isVisible("link=Control Panel")
Slog.wtf(TAG,sb.toString())
animation.setDuration(300l)
new MccEntry(204,"nl",2,"Europe/Amsterdam")
e.printStackTrace()
enforceSystemOrSystemUI("grant notification listener access")
RCTCamera.getInstance().setTorchMode(_cameraType,flashMode)
navigationListCodes[index]
!mHost.onShouldSaveFragmentState(f)
Cli.buildCli("presto",Runnable.class)
SQLObjectEditor<GenericProcedure,GenericObjectContainer>
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_MTP)
getDelegate().getSupportedCipherSuites()
TelephonyManager.getDefault().getPhoneType()
selenium.isVisible("link=Control Panel")
dest.writeLong(mSubId)
event.getEntity() instanceof WitherSkull
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
this == group.mInternalConnection
configureMenu(mMenu)
eKernel.length == 2
INVISIBILTY(14,PotionEffectType.INVISIBILITY,1)
{CUSTOM_STUDY_NEW,CUSTOM_STUDY_REV,DECK_OPTIONS,CONTEXT_MENU_STANDARD}
Trans == TRANSPOSE
testClass.getName()
entityManager.flush()
cmisCriterions.size() * 2 - 1
annotationHolder.createErrorAnnotation(expression,"Cannot resolve target pattern")
selenium.isVisible("link=Control Panel")
w.println(padding)
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
Character.isUnicodeIdentifierPart(ch)
RtlUtils.isPunctuations(punctuation1)
mWM.isKeyguardSecure()
SERVICELOG.error("Async error occurred: " + e,e)
enabled=true
DestinationFactoryManager.class
mVectorState == null && mVectorState.mVPathRenderer == null
PsiLiteralUtil.parseFloat(text)
LOG_KEY_EVENTS=true
mStackScroller.getChildAtPosition(x,y)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
SelectTimeZonePacificStandardTimeTest.class
ACRA.log.e(LOG_TAG,"Unknown json subtree type, see issue #186")
new ConcurrentHashMap<String,InjectionMetadata>(64)
packet.getFrom().split("/")
currentlyProcessing.addCallback(callback)
loaded.getLoaded().getConstructor()
StringBuffer buffer=new StringBuffer(); 
context == null
new IncorrectOperationException()
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()
display.getMetrics(dm)
primaryServer.getClass()
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),t)
getEffectiveCleartextTrafficPermitted()
super(project,false); 
myProjectView.isSortByType(myPaneId)
sUseRenderThread=true
assertEquals("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>foo</groupId>\r\n"+ "    <artifactId>bar</artifactId>\r\n"+ "    <version>baz</version>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
eventFunc.equals("conf_api_sub_transfer")
myNameField.getComponent()
Integer.toHexString(quality)
listener_OnClickListener == null
Slog.e(TAG,"Unable to bind FusedProxy.")
new ConcurrentMapCache()
findAnnotationAttributes(element,annotationType,true,true,true,true,false,false)
CompilerDirectives.inInterpreter()
container.getNeighborTile(from) instanceof IRedstoneEngineReceiver
logger.error(e.getMessage())
new UnsupportedOperationException("Command not found in bolt message: " + shellMsg)
ArrayList<UsageInfo>
bucket=2
ArrayList<UIDMeta>
builder.getTokenType() == JavaTokenType.LT
!p.isNoSelectedType()
bitstampAuthenticated.getBitcoinDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
rs.getInt(1) > 1
rs.getString(columnIndex)
isSavedPostsList()
outputPath.endsWith(DexStore.JAR.getExtension())
GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",1,SECONDS)
testMaterialize("testCacheSnippet",0.5,1)
new Paint(Paint.ANTI_ALIAS_FLAG)
Map<String,AstyanaxOrderedKeyColumnValueStore>
mContext.startActivity(intent)
selenium.isVisible("link=Control Panel")
matcher.matches()
mHandler.removeCallbacks(pae)
@NotNull CommitId getCommit(); 
new Group(provider.getGroupName(),provider.getIcon(),provider.getOpenIcon())
cache1.remove(1)
new Schema(3,"de.greenrobot.daoexample")
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
selenium.isVisible("link=Control Panel")
mf.getColumnName()
currentSegmentIndex < fakeData.segments.size()
old + 13
mPathParameterMap != null
new ItemStack(Items.slime_ball,1,2)
@NotNull
Preconditions.checkState(state.discoveredInputs != null)
metaClass.getMetaMethod(name,arguments)
tblObj.getDataLocation()
new ScheduledJob(job,jobName,period)
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState)
mRenderer.getDefaultViewportHeight()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
1 / 100
mMat[9]
new XStream()
sTextLayoutBuilder.textDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
MAX_LOW_POWER_STATS_SIZE=512
input.getSourceFileNameFieldName()
Matchers.equalTo(1)
isEnabled()
targetBoard == null
ContentType.create(request.getContentType())
length <= Bytes.SIZEOF_LONG
!mIsSummaryWithChildren || !mChildrenExpanded
parts.length < 1
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
selenium.isVisible("link=Control Panel")
new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown"))
mHorizontals == null
writer.write(line)
scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
TestPipelineOptions.class
cc.isLazy()
set(object,value.intValue())
len % (1024 * 1024) / 10
ActivityManagerNative.getDefault().updateConfiguration(config)
cfg.setBindIp(identity)
assertThat(request.getBody().readUtf8()).isEqualTo("<my-object><message>hello world</message><count>10</count></my-object>")
mService.mDisplayContents.get(displayNdx)
@NotNull
mActiveAgents.valueAt(i)
dest.writeLong(mSubId)
updateBreakRequestBtn()
@NotNull
selectorSlider.getCanvas()
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
selenium.isVisible("link=Control Panel")
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
Conv2DConfig.builder().kh(kernel[0])
Values.WEBSOCKET.equalsIgnoreCase(upgrade)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new TaskStatusUpdateEvent(counters,progress,stats)
c.write("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
@NonNull String uri
assertRestrictBackgroundOff()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
proc != null
/**   * Integration tests for GRPC over HTTP2 using the Netty framework.  */ @RunWith(JUnit4.class) public class Http2NettyTest extends AbstractTransportTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer(){     try {       startStaticServer(NettyServerBuilder.forPort(serverPort).flowControlWindow(65 * 1024).sslContext(GrpcSslContexts.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     try {       return NettyChannelBuilder.forAddress(TestUtils.testServerAddress(serverPort)).sslContext(GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()).build();     }  catch (    Exception ex) {       throw new RuntimeException(ex);     }   } } 
exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
Math.max(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
new HashCollisionNode(edit,count,hash,array)
Preconditions.checkNotNull(options)
fraction * (nextValue - prevValue)
LOG.error(e)
memberRequestPersistence.update(memberRequest)
myRole1 == ChildRole.LOOP_BODY
res.startsWith("android") || res.startsWith("Vtok")
!match && compareCompat
realm.assertThread()
ensureStableCluster(2,nodes.get(1))
Thread.sleep(5000)
julLogger.info("Hello world")
return self; 
options.setTaskOverlay(true,false)
Foundation.NSLog("[info] " + tag + ": "+ message)
statistics.addPutTimeNano(System.nanoTime() - start)
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
lib.returnStringVarArgs("","Test")
conversation.getContactJid().split("/")
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFUser,false,false)
getDefaultLayout(groupId,privateLayout)
Integer.valueOf(displayIdStr)
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
nodeConfig.setExecutors(Collections.singletonMap("test",1))
Thread.sleep(10000)
telephony.getDataNetworkTypeForSubscriber(subId)
wordDetector.getEndOffset()
phones.isValid()
findCodecForFormat(false,format)
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
new TextPaint(Paint.ANTI_ALIAS_FLAG)
MacFactory.class
countNewlines(fragment) + 1
Double.valueOf(m.group(2))
Log.wtf(TAG,e.getMessage(),e)
c < values.length()
getFluid().getFluid().getLocalizedName()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
AssetTagsAdminWebUpgrade.class
getProject()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
MonitoringPortletImpl.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
node.getNodeName()
out.print(indent + "public void setup() {")
floatBuffer.clear()
response.getStatus().getCode() / 200
loaded.getLoaded().getConstructor()
mHandler.postDelayed(pae,timeout)
type.equals(number.getClass())
mResourceData[i] != null
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
matchAxisFilter != 0
_assertAttibutes(sourcesJSONArray.getJSONObject(1),98,50)
"Unknown or Unsupported Option '" + value + "'"
page.getLocaleCode()
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(24)
path.findChild(className.replace('.','/') + ".class")
context.createContext(createdBy,reason,comment,request)
Timber.v(e,"Temporary failure - retrying with new token",e)
triggerManager.getRules(CHANGE,item,newState,oldState)
ExpectedTypesProvider.getInstance(project).getExpectedTypes((PsiExpression)element.getParent(),false)
testData.numExamples()
Exception e
new GenerationException(e)
asyncWriteFuture.cancel(true)
getLog().info("Module name is " + moduleName)
i < myParametersNotNull.length
setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
strings.length == 5
AnalyticsDataFactory.getAnalyticsData()
!(result.get(0) instanceof Separator)
TreeMap<Menu.Item,ZLApplication.Menubar.PlainItem>
Assert.notNull("No cache with name '" + cacheName + "' found.")
data != null
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
super.visitDomElement(element)
Long.valueOf(args[ai])
tree != null
StringUtil.last(oldDefaultList.getName(),30,true)
event.isResuming()
BitmapUtils.isVideo(mFile)
Integer.valueOf(attrValue)
mHorizontals == null
sm.getString("http." + statusCode,message)
analysis.getType(aggregate)
getPreviousWindowIndex()
payload.writeBytesLenenc((byte[])each)
gauge == null
new DeleteResponse(shardId,delete.type(),delete.id(),randomIntBetween(0,Integer.MAX_VALUE),true)
SYNC_OK=0x0
AndroidInstrumentationInfoProvider instrumentationProvider=instrumentation.get(AndroidInstrumentationInfoProvider.ANDROID_INSTRUMENTATION_INFO); 
anyInt()
2 << 27
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
commitIfNecessary(session,message)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
group.isCommunity()
mAms.mWaitForNetworkTimeoutMs=100
new VectorDrawableAnimatorRT(this)
myContents.isEmpty()
new Paint()
getMeasuredHeight()
!from.getItem().shouldCauseReequipAnimation(from,to,changed)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
((MasterSlaveDataSource)dataSource).getAllDataSources()
selenium.isVisible("link=Control Panel")
info == null
childLeftTuple.reAddRight()
conferenceState.appendChild(users)
mimeType == null
responseString(p)
String.class
public static ArrayValue durationArray(TemporalAmount[] values){   DurationValue[] durations=new DurationValue[values.length];   for (int i=0; i < values.length; i++) {     durations[i]=durationValue(values[i]);   }   return new DurationArray(durations); } 
host1.getAddress()
field.getType().getName()
logger.infof("OAuth clients imported: " + clients)
InputProcessor[]
new RanChangeSet("classpath:/db/file.log","1","author",null,null,null,null,null,null,null,null)
product.fetch("skuMedia",JoinType.LEFT)
meta.getEncoding()
JBUI.Borders.emptyBottom(EMPTY_BORDER_THICKNESS)
fileSystem.move(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
getContext()
mApplicationObject == null
error.expectedMessageCount(1)
channel.writeHeaders()
Headers.FORWARDED.toString()
!cursor.moveToFirst()
JavaAssistUtils.getParameterType(parameterTypes)
logger.error("InterruptedException during playing a notification sound")
ImageUtil.getRealHeight(myImage)
telephony.getNeighboringCellInfo(mContext.getOpPackageName())
selenium.isVisible("link=Control Panel")
id=15860
extraSpace + 4
parts.length < 1
return context; 
mListener.onInputUpdated(inputId)
telephony.getNetworkTypeForSubscriber(subId)
Measures.RR(results,test)
stmt.executeQuery(sql)
factCount=50000
1000 * 1
controller.system().equals(SystemName.cd) && deploymentId.zoneId().region().value().equals("aws-us-east-1a")
showRecentApps(true)
mSyncStatus.get(i)
pageBucketReceiver.setBucket(bucketIdx,bucket,true,bucketResultListener)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,true)
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,connectionTracker,transactionSPI)
HdmiCec.getTypeFromAddress(i)
JettyWebSocketClient.WS_URI.getName()
get(entry.getKey())
mActiveAgents.remove(info)
Exception e
Resources.getResource(STARTER)
createConnector()
caretColumn > value.getIndent()
clusterGlobalLock.readLock()
maxActiveSessions == null
SemVerMatcher.parseFromText(text)
isStarted()
fm.beginTransaction().hide(samples)
buffer.rewind()
DecodeException e
LocalFileSystem.getInstance().findFileByPath(libPath)
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,false,count)
logger.error("Couldn't write to file: " + filename)
final View view
session.getStreamID() != null
!root.isDownloads()
PlatformTestCase.initPlatformLangPrefix()
builder.getErrors().getErrors()[2]
nativeLibraryDir.getParent()
sm.getString("namingContext.nameNotBound",name.get(0))
basicGraph.getShortestPath(root,t,true)
typeSettingsProperties.toSortedString()
public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
selenium.isVisible("link=Control Panel")
tm != null
IgniteCheckedException e
return false; 
entry.notification.clone()
testComplete()
FileMetadataSnapshot.directory()
klass.getDeclaredMethods(false,declaredMethods)
Math.log(df)
assertEquals(1,files.length)
kbase.newStatefulSession(conf)
new Paint(Paint.ANTI_ALIAS_FLAG)
mColumn + (x - 0.5f) * 4 + 1
new Paint()
new S_Command("00FE30",20.0)
GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)
System.getProperty(value,"")
addView(root,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
dbSqlSessionFactory.getDatabaseCatalog() != null
stepIdleStateLocked("s:shell")
new IllegalStateException("PLAIN supports neither integrity nor privacy")
Collection<String>
telephony.getCdmaEriIconIndexForSubscriber(subId)
oauth20ValidationServiceSelectionStrategy()
new HashMap(request.getParameterMap())
Integer.valueOf(taskIdStr)
sourceScope.getLibrariesScope()
mEditor.startSelectionActionModeAsync()
this.constraints.updateFromFactHandle(handle)
String classpath=getClasspath().toString(); 
host.getAddress()
Assert.assertEquals(118L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
checkNotNull(uri,"URI should not be null")
m[M03]
targets.length == 0
tnCount=100
stack.mStackId != DOCKED_STACK_ID
dests.size() == 1
selenium.isVisible("link=Control Panel")
uri.getPath()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
mapLayerConfiguration.setOpacity(((float)cachedMapTransparency) / 255.0f)
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
resolver.acquireContentProviderClient(uri)
win.isAnimatingLw() && appWindow && showWhenLocked
DEBUG=true
showRecentApps(true)
colors.getResourceId(i,0)
scheduleUpdate(0)
DurationType.getAverageYearMonthType()
new File(Environment.getExternalStorageDirectory(),uri.getPath().replace("camera_photos/",""))
mAppToken.hasContentToDisplay()
ISOChronology.getInstance()
cs[c].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
resolveMethod(exception)
assertEquals(2,resultList.size())
updatePortletPreferences(portletPreferencesRow)
getParents(directory,owner).first(dir -> Comparing.equal(element,dir))
uri.getAssetName().toString()
selenium.isVisible("link=Control Panel")
child.mLayerType == LAYER_TYPE_SOFTWARE
"".equals(format)
mHidProfile.isProfileReady()
LOG.isDebugEnabled()
a.getInt(attr,0)
candidate.getArgumentMaping()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
setSDesEncryptionToDescription(mediaType,description,null)
MavenHelpers.getOrCreateElementBuilder(image,"from")
accessor.value()
tw.release()
m.isTablePerHierarchy()
frustum.update(combined)
flow.getStatus()
assertEquals("Should have exact number of build phases",3,target.getBuildPhases().size())
ConcurrentHashMap<PropertyDescriptor,TypeDescriptor>
for (Object object : list) {   list.add(JSONUtil.wrap(object,ignoreNullValue)); } 
IndexReader reader2=IndexReader.openIfChanged(reader); 
String canonicalPath
getService().animateCollapse()
Localization.menuTitle("Open SPIRES entry")
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
file.getFileName()
ItemStack.func_77970_a(stack,result)
LOGGER.debug(msg.apply())
typeSettingsProperties.toSortedString()
rootDir.file("build.gradle").writelns("apply plugin: 'java'","dependencies { compile gradleApi() }",String.format("jar.destinationDir = file('%s')",FilenameUtils.separatorsToUnix(jarFile.getParent())),String.format("jar.archiveName = '%s'",jarFile.getName()))
keyPattern.getDefaultValue() == null
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
IBackupManagerService svc=mService; 
"Error: Could not get/register id for this client: " + e
ImmutableSet.of("testStringRepresentation")
e.toString()
new CommandFormatException("Failed to execute operation.",e)
PRIORITY_MAX=2
"Error resetting interface " + mInterfaceName + ", :"+ e
nodeId.equals(message.getToNode())
mDeviceProvisionedController.isDeviceProvisioned()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(element)).description(message)
dstCursor != null
data.contains("red")
mSyncStatus.get(i)
halfTextureSize != 0
TypeEvalContext.fast()
_freemarkerEngineConfiguration.getResourceModificationCheck()
new RuntimeException(e)
StringBuffer ret=new StringBuffer(100); 
mWorkerId + BASE_FILE_NUMBER
assertEquals(expectedPlan,actualPlan)
getTimeout()
assertMockEndpointsSatisifed()
System.currentTimeMillis()
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1))
!TextUtils.isEmpty(title)
new IndexWriter(indexStore,new SimpleAnalyzer(),true)
this.thrown.equals(IllegalStateException.class)
paused.get()
SerializableString name
mValues[7]
l.equals("<pre>")
!interactive
e.getMessage().contains("Error decoding XML-RPC response")
return size; 
Boolean.valueOf(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
REMOVALS_UPDATER.compareAndSet(this,nanos,duration)
display.getMetrics(mDisplayMetrics)
@SmallTest
topicRegistrations == null && topicRegistrations.isEmpty()
Tuple2.of(timeoutPattern4,13L)
!recipient.isMmsGroupRecipient()
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
BaseMessages.getString(PKG,"AutoDoc.Exception.UnknownFileTypeValue")
resTable.getAnalysisMode()
set(object,value.intValue())
new Paint(Paint.ANTI_ALIAS_FLAG)
Thread.sleep(200)
new IllegalArgumentException(ERROR_UPDATE_REMOTE_NAME_MISSING)
new EnterSelectionDialog(shell,props,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
!mAwake
@Override public ResponseImpl headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
logger.trace("{} recovery [phase2] to {}: start took [{}]",request.shardId(),request.targetNode(),request.targetNode(),stopWatch.totalTime())
this.targetValidator.validateValue(beanType,propertyName,groups)
expected.size() > actual.size()
"Unknown id: " + mCurMethodId
newDefaultSubIdObj.equals(mDefaultSubId)
telephony.isRadioOn()
GridSystemProperties.getBoolean(GG_UPDATE_NOTIFIER)
readOwners.size()
IndexReader.open(benchmark.getRunData().getDirectory(),true)
(ret == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION)
mHandle == null
this(0,null); 
modelActionsGroup.add(new CommitUsingExecutorAction(executor))
selenium.isVisible("link=Control Panel")
ServiceLoader.load(ConfigurationBuilderFactory.class)
Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,1)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
scheme.equals("tel")
logger.info("Optimized Selector: " + selector.getClass().getName())
name.equals("Devices")
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
localAddress != null
from >= to
checkPojoMetaClass()
apnContext.getWaitngApns()
container.getDataSource()
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
mState != STATE_INITIALIZED
n.intValue()
" firstActiveTime=" + lastActiveTime
timeout=5000
mPostKeyguardExitAnimation.hasEnded()
lnumber < 1
mSelectResponse != null & mSelectResponse.length > 0
equalTo(0L)
scheduleRemoveStartingWindow(wtoken)
getPreferences().setProperty(key,value)
child.getProperties().isNodePartitionedOn(partitioningRequirement)
LOG.error("Could not find default spell checking inspection")
DEBUG=true
clob.getAsciiStream()
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler))
Long.valueOf(attrValue)
getConnection().setFollowRedirects(followRedirects)
Math.abs(mLastModified * 1000 - time) >= 86400000
buffer.toString()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
tree.getVisibleRowCount()
floatBuffer.clear()
encounter.getObsAtTopLevel(false)
theCancelButton.setLabel(BaseMessages.getString(getClass(),"DatabaseExplorer.Button.Ok"))
(line=reader.readLine()) != null
formatter.format(toString(Verbosity.Id))
OutputStreamAppender<?>
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
Thread.sleep(5000)
mRepeat > 1
mAuthorities.get(i)
mAttributes.getFlags()
isArrayClass() && isInterface()
/**   * Gets the value of the miterlimit property.  * @return possible object is {@link BigDecimal }  */ public BigDecimal getMiterlimit(){   return miterlimit; } 
mAppToken.hasContentToDisplay()
FBReader.Instance != null
checkPojoMetaClass()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalArgumentException cannotCloseTransactionContainerEntityManger(); 
selenium.isVisible("link=Control Panel")
newGraph.add(new LocalNode(0,getObject().stamp()))
void setting(int identifier,long value) throws ConnectionError ; 
m.getSize()
isMute
setZrtpEncryptionToDescription(mediaType,description,null)
new EventSelectionModel(list)
rightTuple.setStagePrevious(rightTuple)
/**   * Gets data center replication pause state  {@code null} if replication is not paused.  * @return Data center replication pause state {@code null} if replication is not paused.  */ @Nullable public GridDrPause pauseState(); 
dest.writeLong(txPower)
frame.setLocation(frameLoc.x,20)
mService.disableEphemeralNetwork(SSID)
foreground(false)
new ApiException(ApiException.Type.BAD_FORMAT)
userComponents.valueAt(i)
var.setValue(guessType(value))
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
halfTextureSize != 0
Assert.fail()
ranges == null
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
powerFlowResponse == null
range.getFrom()
buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,Character.class)
logger.error(e)
typeSettingsProperties.toString()
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
NodeTraversal.traverseEs6(compiler,originalRoot,this)
new RStudioThemedFrame(url,true,"allow-same-origin",null,null,false)
ProductWrapper wrapper=(ProductWrapper)context.getBean(ProductSummaryWrapper.class.getName()); 
dynamicType.getConstructor()
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public String loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
new IndexWriter(dir,new WhitespaceAnalyzer())
c == Double.class
LOGGER.debug("Could not open external file",ex)
mPrivateInput == null
clusterListeners.size() == 0
managedType.getConcreteClass()
dest.writeLong(mSubId)
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile)
Foundation.NSLog("[info] " + tag + ": "+ message)
getMockEndpoint("mock:line").expectedMinimumMessageCount(1)
timeMs <= 0
Integer.valueOf(displayIdStr)
RandomDocumentPicks.randomIngestDocument(random())
counter >= max
MonitoringPortletImpl.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
collisionPoints.get(2)
scan.getResults()
file.toURL()
Log_OC.wtf(TAG,"\t file is NULL")
typeSettingsProperties.toString()
new RuntimeException("can't remove from a ReflectionDBObject")
mHorizontals == null
new StringBuilder(561)
selectedPos < lastPos
public Output parseNotation(Object notation){   assert canParse(notation) : "This parser only parses instances of " + typeToken.getName();   return parseType(typeToken.cast(notation)); } 
IgniteCheckedException e
id=15860
frequencyKhz < 30000
prevLen > 0
logger.error("{}",builder.toString())
manager.beginTransaction().remove(fragment).commit()
DBG=false
Integer.valueOf(topStr)
String.format(" Time: %6.2fms",queryTime * 1.e-6 / run)
askForPermissions(new String[]{Manifest.permission.CAMERA},4)
private final StringBuilder buffer=new StringBuilder(512); 
method.getReturnType()
interfaceToImplement.contains(interfaceToImplement)
graph.add(new FloatingReadNode(klassNode,location,null,stamp))
new EntryContentException()
FacetUtilsKt.getOrCreateFacet(getModule(),modelsProvider,false,false)
modelNode.has(LOCAL)
isTestOnBorrow()
discoLatch.await()
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
@NotNull GitBranch source
mHorizontals == null
Iterable<AbstractConfiguredTarget>
ourXWindowIDEA94683FocusBug && isFocused() && !myRequestFocus&& prevOwner != null
useHash=true
dockedBounds.top - adjustment
AtmosphereResponse.create()
new IllegalArgumentException("Invalid reference to commit for merge " + request.getCommit())
new EmptyRepository.MyRepositoryElementsManager(psiManager)
AbstactStoreHandler<DelayedEntry>
ModalityState.defaultModalityState()
NUM_DOCS_PER_TYPE=400
public class HorizontalBarChart extends ColumnChart {   public HorizontalBarChart(  Context context){     super(context);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);   }   @Override protected void init(){     super.init();     setDrawXLabels(false);     setDrawYLabels(true);     mTrans=new ColumnToBarTransformer();     mValuePaint.setTextAlign(Paint.Align.LEFT);   }   /**   * Prepares a bar for drawing on the specified x-index and y-position. Also prepares the shadow-bar if enabled.  * @param x the x-position  * @param y the y-position  * @param barspace the space between bars  */   @Override protected void prepareBar(  float x,  float y,  float barspace){     super.prepareBar(x,y,barspace);     float spaceHalf=barspace / 2f;     float top=x + spaceHalf;     float bottom=x + 1f - spaceHalf;     mBarRect.set(0,top,y,bottom);     mTrans.rectValueToPixel(mBarRect,mPhaseY);     if (mDrawBarShadow) {       mBarShadow.set(mBarRect.left,mOffsetTop,mBarRect.right,getHeight() - mOffsetBottom);     }   }   @Override protected void drawXLabels(  float yPos){     if (!mDrawXLabels)     return;     mXLabelPaint.setTextAlign(Paint.Align.RIGHT);     float[] position=new float[]{0f,0f};     int step=mData.getDataSetCount();     for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {       position[1]=i * step + i * mData.getGroupSpace() + mData.getGroupSpace() / 2f;       if (mXLabels.isCenterXLabelsEnabled())       position[1]+=(step / 2f);       mTrans.pointValuesToPixel(position);       if (position[1] >= mOffsetTop && position[1] <= getHeight() - mOffsetBottom) {         String label=mData.getXVals().get(i);         mDrawCanvas.drawText(label,mOffsetLeft - 10,position[1],mXLabelPaint);       }     }   }   private static String TALL_VALUE="100%";   @Override protected float getPositiveYOffset(  boolean drawAboveValueBar){     Rect bounds=new Rect();     mValuePaint.getTextBounds(TALL_VALUE,0,TALL_VALUE.length(),bounds);     return bounds.height() / 2;   }   @Override protected float getNegativeYOffset(  boolean drawAboveValueBar){     return getPositiveYOffset(drawAboveValueBar);   }   /**   * Sets up the y-axis labels. Computes the desired number of labels between the two given extremes. Unlike the papareXLabels() method, this method needs to be called upon every refresh of the view.  * @return  */   @Override protected void prepareYLabels(){     mYLabels=new XLabelsAsYLabels();   } private class XLabelsAsYLabels extends YLabels {     /**   * Returns the longest formatted label (in terms of characters) the y-labels contain.  * @return  */     @Override public String getLongestLabel(){       String longest="";       for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {         String text=mData.getXVals().get(i);         if (longest.length() < text.length())         longest=text;       }       return longest;     }     /**   * Returns the formatted y-label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).  * @param index  * @return  */     @Override public String getFormattedLabel(    int index){       super.getFormattedLabel(index);       if (index < 0)       return "";       return mData.getXVals().get(index);     }   } } 
e.getKeyChar()
System.currentTimeMillis()
processor.open(w,request)
pm.performDexOpt(pkg,null,false)
allocSize=0
user.getCompanyId()
hz1.getLifecycleService().terminate()
type.getCanonicalText()
selenium.isVisible("link=Control Panel")
framework.getBroadcasterFactory().lookup(a.broadcaster(),true)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
"access-control/default is missing operations: " + accessControl
src.isDirectory()
selenium.isVisible("link=Control Panel")
/**   * The lower value in the range.  * @return the lower value in the range.  */ Comparable getFrom(); 
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
clazz.getClassName()
i == 1
msbFragmentCollection.getFragmentCollectionId()
mBiometricUnlock.stopAndShowBackup()
LOGGER.debug("Could not execute markEntries",ex)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
in.readObject()
p.getDoubleValue()
CharSequence message
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12450,12451.87)
log.error("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(64)
DataStream<OUT>
thread.sleep(10)
channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))
origin <= other
TelephonyManager.getDefault().getPhoneType()
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
final View view
pw.println(ps.getInstantApp(user.id))
dest.writeLong(mSubId)
thingType != null
jitter=0.2
getStubOrPsiParent()
@Override public PostgreTableReal getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
mAnimator.getPhaseY()
parent instanceof PyListLiteralExpression || parent instanceof PyParenthesizedExpression || parent instanceof PySetLiteralExpression|| parent instanceof PyKeyValueExpression
true || mSpew
filePath.toFile()
sizeNeeded >= items.length
appleConfiguration.getMultiArchPlatform(PlatformType.IOS)
Object deserialize(byte[] b); 
this.sessionAuthenticationStrategy
new CircularClipper(mDetail)
checkManageUsersPermission("getting profiles related to user " + userId)
DEBUG
Exception e
logger.info("Session created")
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",new ServiceContext())
intent.resolveTypeIfNeeded(getContentResolver())
enabled=false
mAimsicdService.getCellTracker().updateNeighbouringCells()
mulNegLong(x,y) + mulZeroSubLong(y,x) + mulSubZeroLong(x,y)
selenium.isVisible("link=Control Panel")
mKey.equals(other.mKey)
super.getLikeProvider(path)
newTypeInfo.keySet()
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
Map<K,V>
log.i(LOG_TAG,"ACRA processName='" + processName + "'")
new Paint(Paint.ANTI_ALIAS_FLAG)
r.getRequest()
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
Schema.class
commandLineArguments.isLocal()
SENDER_POSITION_TYPE_ID=4
rep.isAccountManagement()
logger.error("SSTables for user defined compaction are already being compacted.")
_imageStorage.getFileVersionPath(fileVersion,configurationUuid)
this.getClass().getSimpleName()
endpointA.expectedBodiesReceived("A blue car!","A blue car, again!")
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
LOG.warn(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
serialVersionUID=287843616
Integer.parseInt("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
from > to
new SimpleDateFormat("HH:mm MMM d yyyy")
30 * 60 * 1000
selenium.isVisible("link=Control Panel")
resolvedAlias.equals(resolvedName)
statistics.addGetTimeNano(System.nanoTime() - start)
CommonUtils.truncateString(query.getQuery(),1000)
writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
setEnabledFunctions(null,false,false)
InputProcessor[]
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElements),false);   } } )
UsersAdminWebUpgrade.class
JDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
isRowVector()
new Paint(Paint.ANTI_ALIAS_FLAG)
mClocks.elapsedRealtime()
tempPinnedTaskBounds != null
openConnection(true)
createMessage(33,"ABC",3,3,replyChannel,null)
shortNameWithVariant.contains("-") && !shortNameWithVariant.endsWith("-ANY")
testPackage.getFormattedDuration()
e.getMessage()
params.remove(key)
mScrollView.setVisibility(View.VISIBLE)
httpClient.close()
BuildRule rule=createJavaLibraryBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(graphBuilder); 
fMethodDescriptions.put(method,description)
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
new WorldPoint(3238,3166,0)
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,null,false)
super.saveItem(item)
minorVersion=1
Exception e
@ConditionalOnEnablednHealthIndicator("diskspace")
mWM.removeView(mView)
timeDifferenceMilliseconds > maxTolerateTimeDifferenceMilliseconds
table.hasIndex(table.getColumnIndex("columnString"))
LOG.error("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
Config.supportOmemo()
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement())
mDeviceOwner != null
checkPojoMetaClass()
timeoutLatch.await(1200,TimeUnit.MILLISECONDS)
selenium.isVisible("link=Control Panel")
ret.message().get(1)
searchType.convertToIds(defs,myIndex.getByteSeqEum())
id=15832
mIsClickable=true
msg.getType() == Message.Type.error
methodNode != null
tableHasColumn("KBComment","helpful")
JDBCUtils.safeGetString(dbResult,"time")
checkPojoMetaClass()
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
MINOR_ALPHA=.3f
getCubeManager().mergeSegments(cube,newSeg.getDateRangeStart(),newSeg.getDateRangeEnd())
DBG=false
TelephonyManager.getDefault().getPhoneType()
planDetailJson.getPlanName()
customerResourceLocator(url)
Thread.sleep(5000)
nl.size() > minMatch
new Paint(Paint.ANTI_ALIAS_FLAG)
loaded.getLoaded().getConstructor()
SamplingProfiler.newThreadGroupTheadSet(group)
parent instanceof PsiMethodReferenceExpression
new RequestSignUp(modules.getPreferences().getString(KEY_TRANSACTION_HASH),name,sex)
client.query(query)
eKernel.length == 2
System.arraycopy(value,0,value,length,value.length)
new InternetAddress()
child.resetResolvedLayoutDirection()
ColorResources.getColor("desktopBackgroundColor")
docsInSegment.get() >= 10
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
this.messageService.monoPostAuthorizeBeanFindById(1L).contextStart(withUser)
loaded.getLoaded().getConstructor()
public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
response.getContentAsString()
transactionalMap.put(key,value)
System.out.ptintln("--")
resultList.first()
Object requirement
methodsToImplement(methods)
entry.notification.clone()
r != null
new SQLException("Unknown error","00000",-1,null)
mEditText.setText(mValue)
Formatter.getInstance().getNoneIndent()
Exception ex
topCallFrameView.getCallFrame() != topCallFrame
logger.error("Invalid state {}",r)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE
Calendar.getInstance()
option.getType()
Class.forName(metadata.getInheritedFromType()).isAssignableFrom(entity.getClass())
mCol.getDb().getDatabase().setTransactionSuccessful()
msg.what=SHOW_ZOOM_LEVEL_BUTTON_DELAY
logger.debug("Received MyQ  JSON: {}",dataString)
previousPropertyName.compareTo(propertyName)
return false; 
mBackdrop.animate().alpha(0f)
internalViewSchema instanceof ManagedImplStructSchema
hz1.getLifecycleService().terminate()
new ConcurrentHashMap<String,InjectionMetadata>(64)
Long autoCommitInterval
value.setScale(1,RoundingMode.HALF_EVEN).toString()
DefaultCacheKeysFactory.getEntityId(cacheKey)
super.execute()
ids.getIDs().length > 90
builder.or(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
public static String replaceExecuteVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _executeMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _executeMap.containsKey(matcher.group(1))) {     String varValue=getStringFromExecuteMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
new FoldersOnBottomComparator(){   @Override public int doItemCompare(  FileSystemItem arg0,  FileSystemItem arg1){     if (arg0 == parentPath_)     return 1;  else     if (arg1 == parentPath_)     return -1;  else     return arg0.getExtension().compareTo(arg1.getExtension());   } } 
new IOException()
schedulerConfig.equals(BOUNDED_FCFS_ALGORITHM)
super(true); 
acrComparator.compare(prevRow,compactedRow) > 0
IllegalArgumentException e
Top top1=new Top(); 
pd == activePresentationDescriptor
tracesFile.mkdirs()
mService.getProfiles(UserHandle.myUserId(),false)
mf.getColumnName()
initScripts[i]
new IllegalArgumentException(ERROR_ADD_REMOTE_NAME_MISSING)
selenium.isVisible("link=Control Panel")
context.getPackageName()
LOG.isDebugEnabled()
UserHandle.getCallingUserId()
input.get(b,off,len)
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
FastMath.max(origin,num.floatValue())
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
!mPendingFocusChangedEvent
new SqlQuery("salary >= ? and salary <= ?")
Nd4j.create(this.data,this.arrayShape,this.arrayOrdering)
mShouldLogContentAppeared=true
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
meta.getEnclosure()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
new Paint(Paint.ANTI_ALIAS_FLAG)
workCache.get(key)
getPluginReferential().findReleasesWithDependencies(pluginKey)
new MethodHandler(methodKey,groupId,types,start,end)
new AmbariException(error)
item != null
ReflectiveOperationException e
sqlType == Types.NUMERIC
selenium.isVisible("link=Control Panel")
Assertions.expectThrows(EmptyStackException.class,() -> stack.peek())
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commit()
mapper.seAttributePrefix("ROLE_")
"Trying to use view with tag " + tag + " as a parent, but its Manager doesn't extends ViewGroupManager"
new INodeDirectory(dirNode)
typeSettingsProperties.toSortedString()
field.createField(fieldType.indexedToReadable(indexedValue),0.0f)
assertViolations(result,0,0,1)
vals.length != _len
configTimeCacheProviderHolder.remove()
iobj.getType() == null
Exception e
fingerId == 0
e.getMessage().equals("fields stored in the db can't have . in them")
getBackgroundNetworkFetchToEncodedMemorySequence()
activity.findViewById(android.R.id.list)
Assertions.assertNotNull(mModules.get(moduleInterface))
logger.warn("Couldn't get interpreter editor setting")
targetSdkVersion == -1
myVcsConfiguration.CHANGED_ON_SERVER_INTERVAL * 60000
fluidIDs.containsKey(fluid.getName())
Cleaner.create(this,new Closer(mFileDescriptor,mMemoryRegistration))
resolver.acquireContentProviderClient(uri)
getKeyFromGrant(alias)
BackgroundTask.run(() -> renderPage(page))
marketDataService.getBitfinexTrades("btcusd")
!mProcessesReady
mConnector.execute("cryptfs","deleteuserkey",userHandle)
Thread.currentThread().getId()
id=78
sb.getParts().size() == 1
Byte.toUnsignedInt(seed[0])
params.getConsole()
waitForJobExecutorToProcessAllJobs(3000,500)
selenium.isVisible("link=Control Panel")
randomAlphaOfLength(10)
client.checkExists()
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
GlobalSearchScope.projectScope(getProject())
mpline.substring(0,p).trim().toLowerCase()
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
dest.writeLong(mSubId)
Realm.getColumnIndices()
Class<V>
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
peekServiceForUserLocked(userId)
referenceDatabase.getObjectQuotingStrategy()
finish()
new AmbariException("TopologyManager: Unable to retrieve cluster topology for cluster: " + clusterName)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,false)
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=false
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("DH-DSS-DES-CBC3-SHA",KeyExchange.DHd,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA")
(!p.matcher(definedType.getType()).matches()) && (definedType.getLength() == 0 || !p.matcher(definedType.getType() + "(" + definedType.getLength()+ ")").matches()) && (definedType.getScale() != 0 || !p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ","+ definedType.getScale()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ", "+ definedType.getScale()+ ")").matches())
-25
type.getFixedValue()
HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,method.getModifierList()) == null
mDisplayContent.getSplitScreenPrimaryStack()
Exception ignored
@Override public ZuulMessage getDefaultOutput(HttpResponseMessage input){   return input; } 
entityManager.flush()
new ReferenceVariantsHelper(bindingContext,visibilityFilter).getReferenceVariants(callNameExpression,new DescriptorKindFilter(DescriptorKindFilter.FUNCTIONS_MASK | DescriptorKindFilter.CLASSIFIERS_MASK,Collections.<DescriptorKindExclude>emptyList()),nameFilter)
Optional.of(target)
context.getAssets().addAssetPath(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
ServerAdminWebUpgrade.class
mActiveStreamType == -1
listener == null
testClass.getName()
@Override public ResponseImpl schema(Property property){   throw new RuntimeException("Not implemented"); } 
step()
xam.getStudentNumber()
collection.addOnScrollListener(onScrollListener)
new KBArticlePriorityException()
element.getKind() != ElementKind.CONSTRUCTOR
filename.startsWith(ext)
telephony.getCdmaEriTextForSubscriber(subId)
node1.checkTreeTypeAwareEqualsSilent(node2)
CharSequence message
mRCStack.remove(rcse)
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
checkManageUsersPermission("getting profiles related to user " + userId)
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
capacity > 1 << 30
getMockEndpoint("mock:" + i).expectedMessageCount(1000)
appMode.getSmallIconDark()
workingMemory.getObject(handle)
webView.findNext(true)
pendingInactive.retainAll(inactive.values())
selenium.isVisible("link=Control Panel")
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
resourceUrl.getPath()
String url
store.getImage()
behindFraction * mScrimBehindAlphaKeyguard
ds.getFeatureMatrix()
new IllegalArgumentException(JSON_BUILDER + "invalid element on the stack",e)
bundle != null & bundle.containsKey(key)
JoinFunction.class
OAuthConstants.BEARER_TOKEN_TYPE.equals(tokenType)
selenium.isVisible("link=Control Panel")
tupleOrigin != null
a.isFinishing()
index >= widgets.length
dlFileShortcut.getFolderId()
getBlueprintStatus()
ColorResources.getColor("sliderGradientDark")
new GenericStringToObjectConverter()
new RFXComException(e)
headerRow != null
state.getTypeMapper().mapReturnType(type)
mEnterTransformation.printShortString(pw)
commandExecutor.writeAsync(getName(),RedisCommands.GEOADD,getName(),convert(longitude),convert(latitude),member)
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
newGraph.add(new LocalNode(0,getObject().stamp()))
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
c.networkId == netId
ExampleItemWriterTests.class
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
slash < 0
typeSettingsProperties.toSortedString()
LOGGER.debug("Could not open external file",ex)
toRemote != null
DISPLAY_TASKS_PORTRAIT=8
(flags & 0x04) > 0
num.add(j,numbers.get(keys[j]))
TelephonyManager.getDefault().getPhoneType()
Long.valueOf(timeout)
BTraceUtils.setInstrLevel(0)
ContainerUtil.newHashMap()
iconicsDrawable.icon(mPlainIcon)
this.traceHandlers.add(traceHandler)
options.putOpt("updated",true)
Resources.getString("defaultGroupName")
tableHasColumn("MicroblogsEntry","receiverUserId")
um.getUsers()
Utils.readLong(binary,16)
selenium.isVisible("link=Control Panel")
Object node
Thread.sleep(100)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.AVG,0.0,outH,outW,output)
executor.scheduleWithFixedDelay(this,period,period,unit)
alarm.getTime()
writeRepeatedBool(id,val)
NotificationManager.getInstance().onCurrentChatMessageNotification(messageItem)
reads=false
runtime.lookupType(parameters.get(index),(HotSpotResolvedObjectType)accessingClass,true)
value < minimumValue
mService.mAppOps.checkOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
lastModifiedNow < (System.currentTimeMillis() - this.minimumTimeoutForEmptyGroups)
upgradeVersion=36
(line=reader.readLine()) != null
a.length >= count()
@Override public final DivideBy on(String sql,QueryPart... parts){   and(sql,parts);   return this; } 
centerButton(mButtonNeutral)
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
winAnimator.mSurfaceController == null
request.getContentType().equals("application/x-www-form-urlencoded")
firstIdx + 1
callback.onDownloadFailure()
barrier1.await(2,TimeUnit.SECONDS)
59L + 118L
imageView.setBackgroundDrawable(drawable)
group.isUser()
l.onSuspend(request,response)
grammar.getTokenNames()
type.getConstructor()
selenium.isVisible("link=Control Panel")
ConduitInitiatorManager.class
store.forceFlush()
logger.error(e)
assertEquals(15,rows.size())
assertEquals(3,StringUtil.getOccurrenceCount(text,"checkExpressionValueIsNotNull"))
mHorizontals == null
ppcY / 2.54f
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
project.members()
display.getMetrics(dm)
@Override public final StorableField createField(SchemaField field,Object val,float boost){   throw new IllegalStateException("should be calling createFields because isPolyField() is true"); } 
PrintAttributes.enforceValidColorMode(currentMode)
typesToMatch.length != 1
readSync.wait()
@InputIntMethodAnnotation(-44)
selenium.isVisible("link=Control Panel")
new XExpressionImpl(expression.getExpression().trim(),expression.getLanguage(),expression.getCustomInfo())
id=17
SOURCE.deref()
m.getSize()
settings.readLPw(null)
new Paint()
LauncherActivity.isLaunchUri(uri)
saveTask(taskDefinition)
servers.isEmpty()
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
DEFAULT_PORT=8080
elementToHighlight == null
new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)
mMncStr == null
uri == null
AssetVocabularyUtil.findByG_N(groupId,vocabulary.getName())
mAppOpsManager.checkOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
_buildTemplateWithGradle("activator","activator-dependency-management","--dependency-management-enabled","true")
XmlUtils.readIntAttribute(parser,ATTR_SDK_VERSION)
SCAN_STATUS_PARTIAL=0
Exception e
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack)
securityMode != SecurityMode.None
Integer.valueOf(rightStr)
ev.getY() < mQsContainer.getBottom()
disableForUser(what,token,pkg,mCurrentUserId)
Bytes.toBytesBinary(tableNameOrRegionName)
replicaId < nCores
this.context.getLogAggregationStatusForApps().add(report)
!UtilActivator.getSystrayService().checkInitialized()
telephony.getCdmaEriIconIndexForSubscriber(subId)
mSyncStatus.get(i)
ColorResources.getColor("selectionBackground")
statistics.addGetTimeNano(System.nanoTime() - start)
new UnsupportedOperationException()
content.contains(_copyright)
findState != 0
!effects.equals(hEffects.effects)
ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC)
from > to
case EDGE: 
pending.incrementAndGet()
mShowcaseRect.left == cx - dw / 2
Thread.currentThread().getId()
selenium.isVisible("link=Control Panel")
mAppOpsManager.noteOp(opCode,callingUid,opPackageName)
mSyncStatus.get(i)
!src.isEnabled()
mImage.getFrameCount() < 1
ArrayList<EntryListener<?,?>>
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
WindowedValue.valueInEmptyWindows(4,PaneInfo.NO_FIRING)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public CharSequence getViewIdResourceName(){   return mViewIdResourceName; } 
dest.writeParcelableArray(remoteInputs,flags)
new String(jsonExpectation)
suiteClass.getName()
StringUtil.isEmpty(scheme)
input.getDouble(0) < 10.0
mView.post(mAnimationStarter)
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ name+ " />"
req.getRange()
new ShardingConnection(xaDataSourceMap,shardingContext)
SamplingProfiler.newThreadGroupTheadSet(group)
assertNotNull(message.getPayload() instanceof Collection<?>)
new PlaybackServiceStarter(context,media).startWhenPrepared(false)
new IOException(sm.getString("iib.requestheadertoolarge.error"))
result.entrySet()
Log.info("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
form.getMultipartRequestHandler()
m.get(InputStream.class)
selenium.isVisible("link=Control Panel")
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_ACCESS_SETTINGS,false)
XmppStringUtils.parseBareAddress(user)
it.setJavaDocComment("Cool this annotation!")
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisibile)
msbFragmentEntry.getFragmentEntryId()
myCache1.get("myKey1").getValue()
getTestName(false)
dynamicType.getLoaded().getConstructor()
storedOverlayInfos.get(i)
cs.getMetaData()
calendar.roll(Calendar.DATE,-1)
isGreaterOrEqual(platformVersion,MNC)
GL20.glUniform3(location,v)
Encr.decryptPasswordOptionallyEncrypted(r.searchValue("PASSWORD").getString())
JetTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
mBoundServices.isEmpty()
selenium.isVisible("link=Control Panel")
rs.last()
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.CLIENT_ERROR)
!showOnKeyguard
@Overide
ormEntity.isMetadataComplete()
tableHasColumn(tableName,columnName)
in.read(serCondition)
ONE_MINUS_DST_ALPA(7)
myCache1.get("myKey1").getValue()
getLocationEnabled()
TypeEvalContext.fast()
myMavenProjectsManager.doInitComponent(true)
media.getMediaType() == MediaType.AUDIO
SamplingProfiler.newThreadGroupTheadSet(group)
container.getDataSource()
swap instanceof FileSwapSpaceSpiMBean
defaultSchedulers(executor)
signature != null
edge.setType(edgeDefault)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
FORBIDDEN_INDEX_SETTING.contains(name)
targetType.getConstructor()
TextUtils.isEmpty(credential)
selenium.isVisible("link=Control Panel")
List<String>
from >= to
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
lock.isLocked()
View.SYSTEM_UI_TRANSPARENT
Double.compare(c2,c1)
OracleTableForeignKey.class
mActiveStreamType == -1
bindingConfig != null
buffer.getInt8()
public TokenStream create(TokenStream input){   return new StopFilter(input,stopWords,ignoreCase); } 
lastConnectionFailure.getAndSet(null)
log.error("Unknown {} : {}",OAuthConstants.CLIENT_ID,clientId)
PermissionUtils.isLocationPermissionGranted(this)
i=1
tableHasData(oldTableName)
assertEquals(13,beanCount)
split[6].length() > 0
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
result.setDataEncoding(st.getResponseSOAPContext().getContentType())
appName != null
data != null
startNode != null
second.get(i)
action == KeyEvent.ACTION_UP
Exception e
timeout=600000
username.length()
options.getLambdaRole()
companAssetCategory.getCategoryId()
Integer.valueOf(rightStr)
user.getSystemId() == null
returnElement.createReadableBlock(readableBlock)
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
childLeftTuple.reAddRight()
entry.getKey()
new ObjectMapper().reader(Map.class)
mOneShot=true
LOG.error(String.format("%d ms elapsed since build job marked as finished, but still missing finished status from some workers.",elapseMillisSinceFirstFinishedStatus))
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
portlet.getPortletName()
mHandler.removeCallbacks(pae)
WordPress.getCurrentBlog().getRemoteBlogId()
writeStartElement(null,null,localName)
logger.debug("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
_log.error(ioe,ioe)
_cameras.get(cameraType)
RuntimeException ex
this.httpHandler.handle(request,response).otherwise(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new ServletException("non-HTTP request or response")
new BigInteger(buf)
vcs == null
executeConnectAsync=false
dz > 1
doTest(getTestName(false),inspection)
Integer.parseInt(nid[0])
isAvailable(status)
MAP.put(UPPER_BOUND_VIOLATED,"Type argument is not within its bounds: should be subtype of ''{0}''",RENDER_TYPE)
String configHtmlCacheDisabled=configProps.get("disableHtmlCache").toString(); 
DEFAULT_MAX_UNION_SIZE=20
snapshot != null
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
Thread.sleep(5000)
layer.type() == Layer.Type.CONVOLUTIONAL
nodes.hasLabel(barLabel)
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID
timeFieldSpec.getOutgoingTimeColumnName()
orderedGroups.size() < n
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   GridCacheProjectionImpl<K,V> prev=gate.enter(prj);   try {     return delegate.drPauseState();   }   finally {     gate.leave(prev);   } } 
securityMode != SecurityMode.None
adapter == ResultSetViewer.class
ReycleableBufferedInputStream bis=new ReycleableBufferedInputStream(is,tempBytes[0]); 
s.charAt(0) == 'z' | s.charAt(0) == 'Z'
ApplicationManager.getApplication().isUnitTestMode() ? 4 : 2
waitForInterrupt(pin,mode,-1)
target.getDestination()
selectedPageLabel_.removeAttribute("selected")
DEBUG_RC=true
Long.valueOf(val)
ModuleIdentifier.create(moduleName)
Exception e
if (mIsEnabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
mAttachInfo == null
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults)
insertImport(importStatement,element,importElement.getAsName())
mWasActivatedOnDown || !mNeedsDimming
sleepTime=1000
new ShowcaseViewBuilder(activity,showcaseTemplateId)
PhoneNumberUtils.isISODigit(number.charAt(i))
Trans == TRANSPOSE
CheckEmptyScriptTagInspection.class
c.deactivate()
type == SplineType.CatmullRom
spdy || spdyPlain || h2|| h2c
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
child.resetResolvedLayoutDirection()
clone != null
typeArg != null && TypeConversionUtil.erasure(typeArg).equalsToText(CommonClassNames.JAVA_LANG_OBJECT)
temp_descs.get(i)
JavaFile.fromRelativePath(sourceRelativePath,false).getKey()
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon",ioe)
element.getStringValue()
List<Float>
Integer.toString(flags,16)
System.out.println("")
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
view.getClusteredLayerInDegree(absNode)
p1.getStatus()
assertNotSame(copy,result)
mGpsListener != null
logger.error("Error connecting to Plex",e)
checkPojoMetaClass()
Integer.valueOf(attrValue)
cache.flush()
System.nanoTime()
/**   * Titan graph database implementation of the Blueprint's interface. Use  {@link TitanFactory} to open and configure TitanGraph instances.  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  * @see TitanFactory  * @see TitanTransaction  */ @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_INTEGRATE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_PERFORMANCE) @Graph.OptIn("org.janusgraph.blueprints.process.traversal.strategy.TitanStrategySuite") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.structure.VertexPropertyTest$VertexPropertyAddition",method="shouldHandleSetVertexProperties",reason="Titan can only handle SET cardinality for properties when defined in the schema.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldOnlyAllowReadingVertexPropertiesInMapReduce",reason="Titan simply throws the wrong exception -- should not be a ReadOnly transaction exception but a specific one for MapReduce. This is too cumbersome to refactor in Titan.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldProcessResultGraphNewWithPersistVertexProperties",reason="The result graph should return an empty iterator when vertex.edges() or vertex.vertices() is called.") public interface TitanGraph extends TitanGraphTransaction {   /**   * Opens a new thread-independent  {@link TitanTransaction}. <p/> The transaction is open when it is returned but MUST be explicitly closed by calling  {@link org.janusgraph.core.TitanTransaction#commit()}or  {@link org.janusgraph.core.TitanTransaction#rollback()} when it is no longer needed.<p/> Note, that this returns a thread independent transaction object. It is not necessary to call this method to use Blueprint's standard transaction framework which will automatically start a transaction with the first operation on the graph.  * @return Transaction object representing a transactional context.  */   public TitanTransaction newTransaction();   /**   * Returns a  {@link TransactionBuilder} to construct a new thread-independent {@link TitanTransaction}.  * @return a new TransactionBuilder  * @see TransactionBuilder  * @see #newTransaction()  */   public TransactionBuilder buildTransaction();   /**   * Returns the management system for this graph instance. The management system provides functionality to change global configuration options, install indexes and inspect the graph schema. <p /> The management system operates in its own transactional context which must be explicitly closed.  * @return  */   public TitanManagement openManagement();   /**   * Checks whether the graph is open.  * @return true, if the graph is open, else false.  * @see #close()  */   public boolean isOpen();   /**   * Checks whether the graph is closed.  * @return true, if the graph has been closed, else false  */   public boolean isClosed();   /**   * Closes the graph database. <p/> Closing the graph database causes a disconnect and possible closing of the underlying storage backend and a release of all occupied resources by this graph database. Closing a graph database requires that all open thread-independent transactions have been closed - otherwise they will be left abandoned.  * @throws TitanException if closing the graph database caused errors in the storage backend  */   @Override public void close() throws TitanException ;   /**   * The version of this Titan graph database  * @return  */   public static String version(){     return TitanConstants.VERSION;   }   public static void main(  String[] args){     System.out.println("Titan " + Titan.version() + ", Apache TinkerPop "+ Gremlin.version());   } } 
getFailedExecutionException()
assertOpenEventually(latch,3)
Class.forName(className,true,tccl)
new CommandFormatException("The result couldn't be retrieved (perhaps the task was cancelled",e)
post.addParameter(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
optionalClient.orElseGet(null)
e.getMessage()
ColorResources.getColor("buttonGradientLight")
cache.localPeek(key,ONHEAP)
lp.onResolveLayoutDirection(layoutDirection)
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
currencyPair.counter.getCurrencyCode().toString()
DurationType.getMillisType()
mWorkerId + BASE_FILE_NUMBER
mDataAuthorities == null
getLog()
GlobalSearchScope.projectScope(project)
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
Integer maxIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
new AnalyzedToken(word,currTag,lemma)
c == Long.class
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
origin.realComponent().doubleValue() <= other
info.getName()
Validate.notNull(autoScalingGroups)
descriptorDecoder.strippedChannel()
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
serialVersionUID=1506754456
LOG.error("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
mCaCerts != null || mCaCerts.length > 0
System.currentTimeMillis() + 1_100
display.getMetrics(mDisplayMetrics)
LOG.error(e)
dataOffset == data.length
CHECKIN_VERSION=30
new RoutePlannerFrontEnd(false)
loaded.getLoaded().getConstructor()
LOGGER.warn("Groovy script [{}] returned no value for username attribute. Fallback to default [{}]",principal.getId())
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
new GroupTest(false)
title.substring(0,12)
src.copy(src.getConfig(),false)
stagingTypeSettingsProperties.toSortedString()
identifierHelper().toIdentifier(resultSet.getString("TABLE_NAME"))
if (dockOntopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
type.getConstructor()
Thread.sleep(100)
Integer.valueOf(attrValue)
@Nullable
conf.getInt("rabbitmq.port",15672)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
logger.error("Configuration for influxdb not yet loaded or broken.")
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),"val-2")
v.getContext()
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
annotationHelper.printError(element,"%s annotated element should have an empty constructor")
Exception e
mSyncStatus.get(i)
checkArgument(prestoTypeParameters.size() == fieldTypes.size())
Assert.assertEquals(select.size(),1)
Preconditions.checkNotNull(blockIds)
clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)
JSTypeUtils.areTypesCompatible(setterType,type,null)
MessagingService.instance().sendRR(message,target,handler)
textureDataMap.size()
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
InputMethodManager.getInstance(instance)
addViewInLayout(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
set(object,value.intValue())
msbFragmentCollection.getFragmentCollectionId()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(36)
node.attributes()
readySegment.getDateRangeEnd() < segment.getDateRangeStart()
partialUri.toString()
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription())
new Paint()
Class superclass
hStack.getScrollHeight() + vLayout.getScrollHeight() + 30
id=15867
mentionsState()
configuredScriptEngineNames == null
canHaveDisplayList() && canvas.isHardwareAccelerated()
LOG.error(e)
ddmTemplateModel.setCacheable(false)
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
arg.indexOf('.') >= 0
type.getConstructor()
Boolean.valueOf(attrValue)
engine.execute(query).toString()
sendMessage(CMD_STOP_AP)
new NullPointerException()
connectPromise.setFailure(t)
Assert.assertNotNull(semaphore.acquire(3,TimeUnit.SECONDS))
case JOIN: 
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
devicePort.type() == AudioManager.DEVICE_OUT_HDMI
unpaidInvoiceTriggerDate == null
response.getStatusCode()
isBlacklisted(index,nowMs)
element == null
lhs.getScore()
docErrors.get(i)
log.info(message)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
builder.length() == 0
Exception e
holder.setVisible(getLoadingViewId(),visible)
Object userObject
textLanguage.getName()
win.isAnimatingLw() && appWindow && showWhenLocked
sep < 0
new IllegalArgumentException("Remote url " + url + " is invalid. ")
new PageRequest(0,10)
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
maxRows > 0
_excludeDirPathMatchers.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
final LongAdder msgCntr=new LongAdder(); 
tag.getLocalName()
type.getConstructor()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
(InvocationTargetException)wrapped
JBIterable.of(getSelectedValuesList())
is(13)
itemChannelLinkRegistry.getLinks(channelUID).isEmpty()
StringBuffer output=new StringBuffer(); 
dockedBounds.right + adjustment
oldPluginMd.getConfiguration().equals(pluginMd.getConfiguration())
enclosingHeight - insetBottom
put(v)
current > 0
Rect r=(Rect)o; 
mStartDelay == 0
node.order()
SVNURL.parseURIDecoded(myUrl)
AssetTagsCompilerWebUpgrade.class
Preconditions.checkArgument(argv.length == 2)
conceptAnswer.getConcept()
scheduleRemoveStartingWindow(wtoken)
final StringBuffer replacement=new StringBuffer(tag.getText()); 
type.getConstructor()
RequestContext.create()
new Paint()
DatabaseDescriptor.getReadRpcTimeout()
logger.warnf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
dist < bestdist
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
childSubscription.setSubscription(scheduler.schedule(parentAction,parentAction))
telephony.getNetworkTypeForSubscriber(subId)
URI.create(super.getHeader(name)).getPath()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,0,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
setBackgroundDrawable(null)
5 * 1000
input.mark(firstReadBufferSize)
mFrameSlots.remove(slot)
username.length()
ImageUtilities.createBufferedImage(capture.getNextFrame())
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
List<T>
appName != null
vocabularySettingsHelper.getClassTypePKs()
((ViewGroup)viewHolder.view).addView(mView,1)
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=1234567890
t.join(10)
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
assertEquals(0,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
Environment.getRootDirectory()
t.getState() != Thread.State.RUNNABLE
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED
LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)
c.toArray()
new NameAlias(tableNameAlias)
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
getExternalName(annotation.getOwner(),false)
Math.max(titleRight,subtitleRight)
moveInputMethodWindowsIfNeededLocked(false)
JBUI.scale(2)
context.var("long")
private final CircularClipper mClipper; 
level >= 100
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).otherwiseIfEmpty(EMPTY_FORM_DATA)
@Nullable
lock.isLocked()
new GroovyRuntimeException(e)
devicePort.type() == AudioManager.DEVICE_OUT_HDMI
((getAdditionalInformation() != null) && ((database instanceof PostgresDatabase) || (database instanceof OracleDatabase))) || (database instanceof HsqlDatabase)
getRestricted(null,uid,sRestrictionName,null,false,true)
editor == null
n.intValue()
CodeStyleSettings.class.getDeclaredField(value)
mValues[7]
exchange.addRequestHeader("Authorization",_basicAuth)
UnavailableException e
assertEquals(d.getColumnCount(),9)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
assetUri.getAssetName().toString()
AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>
ESTestCase.randomAlphaOfLengthBetween(1,10)
public @JsonProperty("method") BigDecimal method; 
selenium.isVisible("link=Control Panel")
(long)mCachedGroupId[i] << 32l
tableHasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
now > deadline
!file.isInLocalFileSystem()
/**   * The resource.   */ private T mResource; 
new SimpleProxyPool(httpProxyList)
i > 0
opti <= args.length
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
dlg.getListView().addFooterView(footerView)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
mock.expectedMessageCount(2)
ignite.createNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY)
objectFactory.newInstance(DefaultSwiftExecutable.class,name + "Executable",projectLayout,objectFactory,getModule(),true,getSwiftSource(),configurations,getImplementationDependencies())
CANCELED_WAIT_TIMEOUT=2000
new Handler(){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
type.getConstructor()
String... selected
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:10500}")
@NotNull CommitId commitId
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
String[]
inflater.inflate(R.layout.mainfrag,container)
text.substring(idx + 1,text.length())
new FormAttachment(spacer,15)
order.getFilledSize()
taskService.createTaskQuery().orderByTaskId()
selenium.isVisible("link=Control Panel")
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
cs[c].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
!client && !disabled && complianceConfig.logExternalConfig()
log.info("Not in OSGi: using plexus based maven parser")
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId,lastFrameNumber)
len != 4
Map<String,V>
new AssertionError()
LOG.error("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
engine.execute(query).toString()
responseHelper.invokeResponse(callback)
(status & 0x08000000) > 0
BeanUtil.setProperty(target,parameter,value)
assertEquals(12,commits.size())
targetConfig.useDynamicConfigurations()
RandomStringUtils.randomAscii(20)
targetMeta.convertData(sourceMeta,r[rowcolumn])
m[M03]
consumeTokenFast(b,IDENTIFIER)
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
tableHasData(oldTableName)
revWalk.release()
result > TimeUnit.DAYS.toNanos(1)
return 1; 
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
String.format("%.4f",s.getValue())
SVID_SHIFT_WIDTH=7
super.equals(obj)
new ProjectConfigurablesGroup(project)
replyMsg.toString().getContentLength()
fieldAnnotationListField != null
T
attributes.getFlags()
t != null
sStatsd.writeDataToDisk()
source.isNodeChild(target)
type.getConstructor()
updateRulesForGlobalChangeLocked(false)
final WebPageDetail webd=(WebPageDetail)d; 
dropIndex("DROP INDEX " + indexName)
new PebbleMorpheuzSample(recording_base_timestamp + index * 600,userId,deviceId,intensity)
counter >= max
!info.parentPrefab.exists()
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
process.waitFor(2,TimeUnit.MINUTES)
getFailedExecutionException()
declaringClass.getName()
width - 1
createConnector()
onHold | ON_HOLD_LOCALLY
Thread.sleep(400)
uri.getPath()
mMat[9]
Math.max(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
serviceDataUuid == null
selenium.isVisible("link=Control Panel")
getXmppConnection().getAttempt() >= 2
event.getX()
group.getAvatar() != null
Platform.isAix()
threadSafe=false
indexBuf.getData().capacity()
enabled=false
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,true)
data != null
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_folder_name"))
ti.setText(3,jobEntry.wildcard[i])
mBondState.setBondState(address.toUpperCase(),state)
String.valueOf(0.02)
type.getConstructor()
oldConfig.densityDpi != newConfig.densityDpi
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,21,getLayoutLog())
Exception exception
serialVersionUID=823130568
selenium.isVisible("link=Control Panel")
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules())
public Object read() throws Exception {   if (counter < limit) {     counter++;     return new Trade("isin" + counter,counter,new BigDecimal(counter),"customer" + counter);   }   return null; } 
db.createHashMap("cache")
gridDim > 512
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
Criterion.and(TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.in(tagUuids))
implemetationMethodDescriptors.build()
LOG.error("Registered pre-upgrade check {}",upgradeCheck.getClass())
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
currLine > mPrevLine
content().copy()
rows.length != 0
1000 * 5
getPort()
final LongAdder cntr=new LongAdder(); 
assertEquals(11,beanCount)
logger.warn(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
testClass.getName()
request.mConnectionID != null
a == null
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
securityMode != SecurityMode.None
WordPress.getCurrentBlog().getRemoteBlogId()
mHandler.removeCallbacks(pae)
_connector.getResponses("GET /foo HTTP/1.1\n\n")
mappers.mapper().searchAnalyzer()
value.toLowerCase().contains(constraintLowerCase)
new DateTime(Long.parseLong(firstTimestamp) * 1000)
Thread.sleep(5000)
setVisibility(INVISIBLE)
logger.info("Intercepted " + method.getFullMethodName())
host.setHeaderView(this)
Allocation.createFromBitmap(mRS,b,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
user.getTimeZone().getOffset()
id=15800
SecurityUtils.isSecurityEnabled(configuration)
data == null
assertEquals(expectedPlan,actualPlan)
idx[j] >= 0
Long.valueOf(deadline)
TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MULT)
ACRA.log.e(LOG_TAG,"ACRA is disabled for " + context.getPackageName() + " - forwarding uncaught Exception on to default ExceptionHandler")
internalCluster().getInstance(ClusterService.class)
keyCode == KeyEvent.KEYCODE_BACK
st.setObject(index,javaTypeDescriptor.unwrap(value,UUID.class,options))
selenium.isVisible("link=Control Panel")
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
messageReference.equals(account.getUuid(),folder,uid)
selenium.isVisible("link=Control Panel")
username.length()
Assert.assertEquals(msg,"Unexpected token type: methodStub")
LOG.error(e)
drawable.getMinimumHeight()
graphModel.getUndirectedGraph()
mMncStr == null
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
handleJAXBException(e,true)
mService.disableNetwork(netId)
buildData.getBuildURL()
view.showScrollbar()
log.error("Query failed to parse : '{}'",executionInput.getQuery())
3 + maskLength
mMenuView.setBackgroundDrawable(null)
Internal.prefixKeyWithSalt(key)
table.getFields()
@NotNull CommitId getId(); 
sanitizedName(name)
System.identityHashCode(this)
new RuntimeException(e)
mBackdrop.animate().alpha(0f)
Boolean.valueOf(resizeableStr)
version.getUpdate().getAsInt() >= 92
clusterService.getIndexerFailures(0,0)
region == null
DiagnosticFactory0.create(WARNING)
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).otherwiseIfEmpty(createSession(exchange))
cursor != null
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.set()
isRotationEnabled
0.5f
mContext.sendBroadcast(intent)
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
lastClient.toString()
delta + contextEnd
curComp.equals(cur)
vis.fontAction(eastAsia)
FIXED_VIEWPORT=20
Response.ok()
new HashSet<Class<?>>()
new NameValuePair[5]
lineCount == 4
assertEquals(12,beanCount)
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
new AssertionError("unexpeced missing SHA-1 digest",ex)
new JSoupExtractor()
writer.write(line)
delayer != null
mSpinner != null
ensureExpectedToken(parser.currentToken(),XContentParser.Token.FIELD_NAME,parser::getTokenLocation)
boardPort.getPrefs().get("iserial")
selenium.isVisible("link=Control Panel")
file.getLocalFile()
dataSourceContainer.getDriver().getName()
query.field("relyOnPrevCycle").equal(true)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}")
getOrCreateContainer().unlock(dataKey,caller,threadId)
mContext.startActivity(intent)
parsedResult.getSqlType()
value.toLowerCase().contains(constraintLowerCase)
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport()
platformVersion < MNC
mDrawBitmap == null
result.getSqlType()
viewStateIndex|=VIEW_STATE_PRESSED
expected == long.class
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
Assert.assertEquals(40,classes.size())
assertEquals("We have all the items via GameData",391,Item.REGISTRY.getKeys().size())
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID
material.getMaterialDef().getName().contains("Lighting") || mesh.getFloatBuffer(Type.Normal) == null
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false)
new DropTableEvent(tbl,deleteData,success,this)
Long.valueOf(attrValue)
EhcacheCacheListenerAdapter<Serializable,Serializable>
store.delete(message.getHeaders().getId())
usersStats.getMin()
mCanSeekForward=mCanSeekForward=true
tester.nodeRepository().getNodes(Node.State.ready)
matchAxisFilter != 0
ALIGN_GROUP_FIELD_DECLARATIONS=true
layoutAlgorithm.getStackTransform(task,stackScroll,mTmpTransform,null)
CollectionItemInfo.obtain(0,1,position,1,isHeading,isSelected)
GridFailFastSelfTest.class
LOG.info("received message " + (TopologyMaster.PublishMetrics)message)
Preconditions.checkNotNull(hostname)
context.containsMetaEmbeddable(fqcn)
final ScheduledJobIdentifier jobRuntimeInformation=(ScheduledJobIdentifier)jobIdentifier; 
mAppToken.hasContentToDisplay()
assertFalse(user.isGeoEnabled())
Looper.getMainLooper()
service.asBinder().isBinderAlive()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
mAppliedTemporaryAutoBrightnessAdjustment=true
"set responseContext to be" + responseContext
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
((GroovyObject)receiver).getMetaClass() != metaClass
stepIdleStateLocked("s:shell")
HashSet<Long>
format.width * format.height > MediaCodecUtil.maxH264DecodableFrameSize()
new String(text.getBytes())
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
mMime.toLowerCase().startsWith("video/")
random.nextInt(64)
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
new LinkedHashSet<>()
Hooks.resetOnEachOperator()
new CircularClipper(mDetail)
StateManagementUtils.createClearForkedExecutionMojoBinding()
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
type.getConstructor()
logger.error("Channel error",cause)
mPrivateInput == null
SamplingProfiler.newThreadGroupTheadSet(group)
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
attributes.getFlags()
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
dw != mBackgroundHeight
getTree().getVisibleRowCount()
tests.add(objectExpressionType.getGenericsTypes()[0].getType())
new LayerView(this,0xff0000ff)
super.getView(position,contextualUndoView.getContentView(),parent)
GUIManager.class
NullPointerException.class
@Override public Object getMethod(){   return method; } 
__("(")
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)
logger.warn("Cannot play track ({})",e.getMessage())
accountHandle.getComponentName().toString()
type=200
lock.unlock()
new StepPluginMeta(AbortMeta.class,"Abort",Messages.getString("BaseStep.TypeLongDesc.Abort"),Messages.getString("BaseStep.TypeTooltipDesc.Abort"),"ABR.png",CATEGORY_EXPERIMENTAL)
manager.beginTransaction().remove(fragment).commit()
TestSuiteEnvironment.getServerAddress()
return r; 
Log.wtf(TAG,e.getMessage(),e)
log.info(sm.getString("contextConfig.role.auth",roles[j]))
mLocalWorkerAddress.getRpcPort()
getAsText(fieldValue)
args.length > 1
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
mService.mAppTransition.isReady()
dest.writeParcelableArray(remoteInputs,flags)
log.error("Error parsing command line: " + e.getMessage())
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx)
new IntRangeValidator(1,true)
a.getTypeByte()
USE_DISPLAY_LIST_PROPERTIES=true
win.isDrawnLw()
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
mData != data
handshakeFuture != null
FlushModeType.COMMIT.equals(session.getFlushMode())
ImmutableSet.of("testStringRepresentation")
tableHasColumn("Calendar","timeZoneId")
appBundle.exists() == false
createFromResourceStream(res,value,is,srcName)
isSupportsAlterColumnName()
Throwable t
killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,createdBy,reason,comment)
bean.getCollectionCount()
flexItem.getMarginEnd()
blockChainSummary.size() == 1
@SystemApi
series.Index.toString()
ServiceManager.addService(Context.INPUT_SERVICE,inputManager)
fdoProvider.getFdoMode() != FdoMode.OFF
(visibility & VISIBILITY_MASK) == VISIBLE
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
FileUtil.loadFile(new File(name + ".txt"))
mGpsListener != null
LOG.info("Found operation: " + ori.getMethod().getName())
_typeSettingsProperties.toString()
CommitId
connection.getServiceName()
Mono.currentContext()
out.writeInt(mProgress)
delaySoFar > mReEnableDelayMillis
file.getPath()
MultiValueMap<String,String>
showRecentApps(true)
stateMap.get("EnqueuedTransportURIMetaData") != null
GL20.glUniform1(location,toIntBuffer(v,offset,count))
DEFAULT_DB_CACHE_COUNT=100
loaded.getLoaded().getConstructor()
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
knownHandlers.contains(handler)
offset > leftParen.getTextRange().getEndOffset()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new AnnotationHolderImpl(new AnnotationSession(file))
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
return 400; 
value + value + MINIMUM_BACKLIGHT
parameter.toString()
ATLAS_MAP_ENTRY_FIELD_COUNT=4
fingerId == 0
(Node)container
max() < 32
getDelegate().handle(exchange).otherwise(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
old + 8
mVibratorService.vibrate(2000,new Binder())
clob.getAsciiStream()
className.indexOf("org.openmrs.")
TelephonyManager.getDefault().getPhoneType()
isStringFieldType(value,adminPresentation)
channel.getRTPPort()
quality.samplingRate == this.samplingRate & quality.bitRate == this.bitRate
mBackdrop.animate().alpha(0f)
logger.info("reconnect success")
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
executionStats.getSplits()
(RuleBaseEventListener)this
assertProtonResourceLimits(0.88,0.9,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
peers.stop()
FileTemplateManager.getDefaultInstance()
kernelHeight >= (inHeight + 2 * padHeight)
subtypeProps.isEmpty()
header.getX()
selenium.isVisible("link=Control Panel")
mFacetCategoryMap.get(packageName)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
amenity.getId() % 2 == 1
dest.writeLong(mSubId)
winAnimator.mSurfaceController == null
targetSdkVersion == -1
public TokenStream create(TokenStream input){   return new PorterStemFilter(input); } 
settings.readLPw(null)
readOwners.size()
Log.setDebugEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
hash == this.lastDeviceListNotificationHash
klass.getDeclaredFields(false,declaredFields)
pathURL.toURI().getPath()
DateUtils.getStartOfToday()
return true; 
mObsoleteAgents.remove(info)
"years".equalsIgnoreCase(currentToken)
getTestName(false)
groupIndex.size()
type.getConstructor()
getUserStateLocked(callingUid)
~PUBLIC_STATUS_BAR_VISIBILITY_MASK
lastMaxBytes[0]=jvmCurrentBytes
exitCode != 0
new IndexWriter(dir,new StandardAnalyzer(),true)
new HTreeMap<K,Object>(engine,true,defaultSerializer,serializer,null)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
temp_descs.get(i)
e.getMessage()
logger.error("InfluxDB is not yet connected")
stream.close()
ignite.cache(CACHE_NAME)
mListener.onInputUpdated(inputId)
FileUtils.write(fileWithBom,"\uFEFF")
pointF.y=0.9f
new UnsupportedOperationException("ExifInterface does not support saving attributes for the current input.")
Long.valueOf(attrValue)
readLock.unlock()
TestSuiteEnvironment.getServerAddress()
LensPositionSelectors.front()
a.getBoolean(R.styleable.View_fadeScrollbars,false)
loaded.getLoaded().getConstructor()
GlobFileFilter globFileFilter; 
((VarcharType)type).getLength()
canPTR
assertEquals(2,results.size())
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
StorageService.instance.initClient()
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
newNode.getNodeId()
result.expectedMessageCount(3)
filterNotTypes.size()
Assert.assertNull(ex.getCause())
c.setDisplayName(nickName)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
startingWindow != null
specWidthMode == MeasureSpec.EXACTLY
SHUTDOWN_VIBRATE_MS > 0
Preconditions.checkNotNull(mBlockIdsOnTiers)
WSSec.getInboundWSSec(secProps)
telephony.isRadioOn()
min.x < max.x
energyProcessor.calculateGlobalEnergyLimit(totalBalanceForEnergyFreeze)
lhs.getScore()
mHandler.removeCallbacks(pae)
candidatePriority > highestPriority
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
hStack.getScrollHeight() + vLayout.getScrollHeight() + 30
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
replacements.add(replacement)
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
DEBUG_WINDOW_STATE=true
Namespace.CURRENT.toString()
playerData.getCurrenciesList()
commands_.vcsRevertFiles()
fileCollectionSnapshotter.registerSerializers(serializerRegistry)
assertEquals("throughput",88.275334,model.getThroughput(),0.00000001)
mListener.onInputUpdated(inputId)
(byte)0xdf
c != 0
logger.info("Optimized Selector: " + selector.getClass().getName())
ack.getLastMessageId().getDataLocator()
LOG.info("Client: segment " + segments[j] + " at "+ addr)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY,Collections.EMPTY_LIST)
methodAnnotationListField != null
CodeInsightUtilBase.preparePsiElementForWrite(problem_elt)
this.messageService.fluxPostAuthorizeFindById(1L).contextStart(withUser)
mMccMncs != null
primaryKey == null && primaryKey.cardinality() == 0
capacity > 1 << 30
SkylarkDict<String,Object>
IndexReader.open(benchmark.getRunData().getDirectory(),true)
selenium.isVisible("link=Control Panel")
Character.isLetterOrDigit(buffer.charAt(i))
new Max()
clientConfig.getRegistryFetchIntervalSeconds() * 2
dest.writeLong(mSubId)
new IndexWriter(directory,analyzer,true)
LOG.info("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
selenium.isVisible("link=Control Panel")
mNextNonWakeupDeliveryTime > nowELAPSED
schemeSpecificParts != null
IOException e
is(1)
ConstantNode.forInt(load.displacement(),graph)
Utils.createInformativeDialog(mContext,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
actionHandler.execute(editor,DataManager.getInstance().getDataContext())
text.split("\\n")
AbstractBottomUpTraversal<T,Object>
Assert.assertEquals(1,hits.getLength())
StringBuffer buffer=new StringBuffer(); 
hStack.getScrollWidth() + 30
pw.println(ps.getInstantApp(user.id))
i < 10
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
scanner.acceptResult(fqn)
getLlvmParamTypes()
super.onDestory()
contains="doDirect"
exec("p4","-d",workingDir,"sync","@" + parseLong(revision))
hz1.getLifecycleService().terminate()
return true; 
VERSION_INT=1000010
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logger.error("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
GuiPackage.getInstance().updateCurrentNode()
name == null
RuntimeVersion.isAtLeast12()
sm.getString("serverContainer.duplicatePaths",path)
fullname.contains(".")
getI18NString(key,locale)
mHandler.removeCallbacks(pae)
JwsSignatureValidator validator
selenium.isVisible("link=Control Panel")
log.error(throwable,"Query %s failed",queryId)
displayList != null
ImmutableSet.of(new AnagramClue("This anagram reveals who to speak to next: A BAKER","Baraek",new WorldPoint(3217,3434,0),"Varrock square","5"),new AnagramClue("This anagram reveals who to speak to next: A BASIC ANTI POT","Captain Tobias",new WorldPoint(3026,3216,0),"Port Sarim","7"),new AnagramClue("This anagram reveals who to speak to next: A HEART","Aretha",new WorldPoint(1814,3851,0),"Soul altar","2"),new AnagramClue("This anagram reveals who to speak to next: A ZEN SHE","Zenesha",new WorldPoint(2652,3295,0),"Platebody Southern Ardougne centre square"),new AnagramClue("This anagram reveals who to speak to next: ACE MATCH ELM","Cam The Camel",new WorldPoint(3300,3231,0),"North of the glider in Al Kharid"),new AnagramClue("This anagram reveals who to speak to next: AHA JAR","Jaraah",new WorldPoint(3359,3276,0),"Duel Arena hosptial"),new AnagramClue("This anagram reveals who to speak to next: AN PAINT TONIC","Captain Ninto",new WorldPoint(2865,9877,0),"Bar under White Wolf Mountain"),new AnagramClue("This anagram reveals who to speak to next: ARC O LINE","Caroline",new WorldPoint(2715,3302,0),"North Witchaven next to the row boat","11"),new AnagramClue("This anagram reveals who to speak to next: ARE COL","Oracle",new WorldPoint(3013,3501,0),"Ice Mountain West of Edgeville","48"),new AnagramClue("This anagram reveals who to speak to next: ARMCHAIR THE PELT","Charlie the Tramp",new WorldPoint(3209,3392,0),"South entrance of Varrock","0"),new AnagramClue("This anagram reveals who to speak to next: ARR! SO I AM A CRUST, AND?","Ramara du Croissant",new WorldPoint(2339,3677,0),"Piscatoris Fishing Colony"),new AnagramClue("This anagram reveals who to speak to next: AT HERG","Regath",new WorldPoint(1719,3723,0),"General Store, Arceuus, Zeah","25"),new AnagramClue("This anagram reveals who to speak to next: A BAS","Saba",new WorldPoint(2858,3577,0),"Death Plateau"),new AnagramClue("This anagram reveals who to speak to next: AREA CHEF TREK","Father Aereck",new WorldPoint(3243,3208,0),"Lumbridge Church","19 or 20"),new AnagramClue("This anagram reveals who to speak to next: BAIL TRIMS","Brimstail",new WorldPoint(2402,3419,0),"West of Stronghold Slayer Cave"),new AnagramClue("This anagram reveals who to speak to next: BAKER CLIMB","Brambickle",new WorldPoint(2783,3861,0),"Trollweiss mountain"),new AnagramClue("This anagram reveals who to speak to next: BLUE GRIM GUIDED","Lumbridge Guide",new WorldPoint(3232,3232,0),"Lumbridge"),new AnagramClue("This anagram reveals who to speak to next: BY LOOK","Bolkoy",new WorldPoint(2529,3162,0),"Tree Gnome Village general store","13"),new AnagramClue("This anagram reveals who to speak to next: CAR IF ICES","Sacrifice",new WorldPoint(2209,3056,0),"Zul-Andra"),new AnagramClue("This anagram reveals who to speak to next: CAREER IN MOON","Oneiromancer",new WorldPoint(2150,3866,0),"Astral altar","25"),new AnagramClue("This anagram reveals who to speak to next: C ON GAME HOC","Gnome Coach",new WorldPoint(2395,3486,0),"Gnome Ball course","6"),new AnagramClue("This anagram reveals who to speak to next: COOL NERD","Old Crone",new WorldPoint(3462,3557,0),"East of the Slayer Tower","619"),new AnagramClue("This anagram reveals who to speak to next: COPPER ORE CRYPTS","Prospector Percy",new WorldPoint(3061,3377,0),"Motherlode Mine","12"),new AnagramClue("This anagram reveals who to speak to next: DED WAR","Edward",new WorldPoint(3284,3943,0),"Inside Rogue's Castle"),new AnagramClue("This anagram reveals who to speak to next: DEKAGRAM","Dark Mage",new WorldPoint(3039,4835,0),"Centre of the Abyss","13"),new AnagramClue("This anagram reveals who to speak to next: DO SAY MORE","Doomsayer",new WorldPoint(3230,3230,0),"East of Lumbridge Castle","95"),new AnagramClue("This anagram reveals who to speak to next: DIM THARN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28 or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR HITMAN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28, Light box or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR WARDEN FUNK","Drunken Dwarf",new WorldPoint(2913,10221,0),"East Side of Keldagrim"),new AnagramClue("This anagram reveals who to speak to next: DRAGONS LAMENT","Strange old Man",new WorldPoint(3564,3288,0),"Barrows","40"),new AnagramClue("This anagram reveals who to speak to next: DT RUN B","Brundt the Chieftain",new WorldPoint(2658,3670,0),"Rellekka, main hall","4"),new AnagramClue("This anagram reveals who to speak to next: DUO PLUG","Dugopul",new WorldPoint(2803,2744,0),"Graveyard on Ape Atoll"),new AnagramClue("This anagram reveals who to speak to next: EEK ZERO OP","Zoo keeper",new WorldPoint(2613,3269,0),"Ardougne Zoo","40"),new AnagramClue("This anagram reveals who to speak to next: EL OW","Lowe",new WorldPoint(3233,3423,0),"Varrock archery store"),new AnagramClue("This anagram reveals who to speak to next: ERR CURE IT","Recruiter",new WorldPoint(2541,3305,0),"West Ardougne centre square","20"),new AnagramClue("This anagram reveals who to speak to next: FORLUN","Runolf",new WorldPoint(2512,10256,0),"Miscellania & Etceteria Dungeon"),new AnagramClue("This anagram reveals who to speak to next: GOBLIN KERN","King Bolren",new WorldPoint(2541,3170,0),"Tree Gnome Village"),new AnagramClue("This anagram reveals who to speak to next: GOT A BOY","Gabooty",new WorldPoint(2790,3066,0),"Centre of Tai Bwo Wannai","11"),new AnagramClue("This anagram reveals who to speak to next: GULAG RUN","Uglug Nar",new WorldPoint(2442,3051,0),"West of Jiggig"),new AnagramClue("This anagram reveals who to speak to next: GOBLETS ODD TOES","Otto Godblessed",new WorldPoint(2501,3487,0),"Otto's Grotto","2"),new AnagramClue("This anagram reveals who to speak to next: HALT US","Luthas",new WorldPoint(2938,3152,0),"Banana plantation, Karamja","33 (or none)"),new AnagramClue("This anagram reveals who to speak to next: HE DO POSE. IT IS CULTRRL, MK?","Riki the sculptor's model",new WorldPoint(2904,10206,0),"East Keldagrim, south of kebab seller."),new AnagramClue("This anagram reveals who to speak to next: HEORIC","Eohric",new WorldPoint(2900,3565,0),"Top floor of Burthorpe Castle","36"),new AnagramClue("This anagram reveals who to speak to next: HIS PHOR","Horphis",new WorldPoint(1639,3812,0),"Arceuus Library, Zeah","1"),new AnagramClue("This anagram reveals who to speak to next: I AM SIR","Marisi",new WorldPoint(1813,3488,0),"Allotment patch, South coast Zeah","5"),new AnagramClue("This anagram reveals who to speak to next: ICY FE","Fycie",new WorldPoint(2630,2997,0),"East Feldip Hills"),new AnagramClue("This anagram reveals who to speak to next: I DOOM ICON INN","Dominic Onion",new WorldPoint(2609,3116,0),"Nightmare Zone","9,500"),new AnagramClue("This anagram reveals who to speak to next: I EAT ITS CHART HINTS DO U","Shiratti the Custodian",new WorldPoint(3427,2927,0),"North of fountain, Nardah"),new AnagramClue("This anagram reveals who to speak to next: I EVEN","Nieve",new WorldPoint(2432,3422,0),"The slayer master in Gnome Stronghold","2"),new AnagramClue("This anagram reveals who to speak to next: I FAFFY RUN","Fairy Nuff",new WorldPoint(3201,3169,0),"North of the bank in Zanaris"),new AnagramClue("This anagram reveals who to speak to next: IM N ZEZIM","Immenizz",new WorldPoint(2592,4324,0),"The Imp inside Puro-Puro"),new AnagramClue("This anagram reveals who to speak to next: KAY SIR","Sir Kay",new WorldPoint(2760,3496,0),"The courtyard in Camelot Castle","6"),new AnagramClue("This anagram reveals who to speak to next: LEAKEY","Kaylee",new WorldPoint(2957,3370,0),"Rising Sun Inn in Falador","18"),new AnagramClue("This anagram reveals who to speak to next: LAND DOOMD","Odd Old Man",new WorldPoint(3359,3506,0),"Limestone mine northeast of Varrock"),new AnagramClue("This anagram reveals who to speak to next: LARK IN DOG","King Roald",new WorldPoint(3220,3476,0),"Ground floor of Varrock castle","24"),new AnagramClue("This anagram reveals who to speak to next: LOW LAG","Gallow",new WorldPoint(1805,3566,0),"Vinery in the Great Kourend","12"),new AnagramClue("This anagram reveals who to speak to next: LADDER MEMO GUV","Guard Vemmeldo",new WorldPoint(2447,3418,0),"Gnome Stronghold Bank","3"),new AnagramClue("This anagram reveals who to speak to next: MAL IN TAU","Luminata",new WorldPoint(3508,3237,0),"Near Burgh de Rott entrance"),new AnagramClue("This anagram reveals who to speak to next: ME AM THE CALC","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: MACHETE CLAM","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena","6"),new AnagramClue("This anagram reveals who to speak to next: ME IF","Femi",new WorldPoint(2461,3382,0),"Gates of Tree Gnome Stronghold"),new AnagramClue("This anagram reveals who to speak to next: MOLD LA RAN","Old Man Ral",new WorldPoint(3602,3209,0),"Meiyerditch"),new AnagramClue("This anagram reveals who to speak to next: MOTHERBOARD","Brother Omad",new WorldPoint(2606,3211,0),"Monastery south of Ardougne","129"),new AnagramClue("This anagram reveals who to speak to next: MUS KIL READER","Radimus Erkle",new WorldPoint(2726,3368,0),"Legends' Guild"),new AnagramClue("This anagram reveals who to speak to next: MY MANGLE LAL","Lammy Langle",new WorldPoint(1688,3540,0),"Hosidius House spirit tree patch"),new AnagramClue("This anagram reveals who to speak to next: NO OWNER","Oronwen",new WorldPoint(1162,3178,0),"Lletya Seamstress shop in Lletya","20"),new AnagramClue("This anagram reveals who to speak to next: NOD MED","Edmond",new WorldPoint(2566,3332,0),"Behind the most NW house in East Ardougne","3"),new AnagramClue("This anagram reveals who to speak to next: O BIRDZ A ZANY EN PC","Cap'n Izzy no Beard",new WorldPoint(2807,3191,0),"Brimhaven Agility Arena","33"),new AnagramClue("This anagram reveals who to speak to next: OK CO","Cook",new WorldPoint(3207,3214,0),"Ground floor of Lumbridge Castle","9"),new AnagramClue("This anagram reveals who to speak to next: OR ZINC FUMES WARD","Wizard Frumscone",new WorldPoint(2594,3086,0),"Downstairs in the Wizards' Guild"),new AnagramClue("This anagram reveals who to speak to next: OUR OWN NEEDS","Nurse Wooned",new WorldPoint(1575,3590,0),"Shayzien House Infirmary","19"),new AnagramClue("This anagram reveals who to speak to next: PACINNG A TAIE","Captain Ginea",new WorldPoint(1561,3602,0),"Building east of Shayzien combat ring","113"),new AnagramClue("This anagram reveals who to speak to next: PEAK REFLEX","Flax keeper",new WorldPoint(2744,3444,0),"Flax field south of Seers Village","676"),new AnagramClue("This anagram reveals who to speak to next: PEATY PERT","Party Pete",new WorldPoint(3047,3376,0),"Falador Party Room"),new AnagramClue("This anagram reveals who to speak to next: PROFS LOSE WRONG PIE","Professor Onglewip",new WorldPoint(3113,3162,0),"Ground floor of Wizards Tower"),new AnagramClue("This anagram reveals who to speak to next: QUIT HORRIBLE TYRANT","Brother Tranquility",new WorldPoint(3681,2963,0),"Mos Le'Harmless or Harmony Island","7"),new AnagramClue("This anagram reveals who to speak to next: QUE SIR","Squire",new WorldPoint(2975,3343,0),"Falador Castle Courtyard","654"),new AnagramClue("This anagram reveals who to speak to next: R AK MI","Karim",new WorldPoint(3273,3181,0),"Al Kharid Kebab shop","5"),new AnagramClue("This anagram reveals who to speak to next: RAT MAT WITHIN","Martin Thwait",new WorldPoint(2906,3537,0),"Rogues' Den","2"),new AnagramClue("This anagram reveals who to speak to next: RED ART TANS","Trader Stan",new WorldPoint(3041,3193,0),"Port Sarim Charter ship"),new AnagramClue("This anagram reveals who to speak to next: RATAI","Taria",new WorldPoint(2940,3223,0),"Rimmington bush patch","7"),new AnagramClue("This anagram reveals who to speak to next: R SLICER","Clerris",new WorldPoint(1761,3850,0),"Arceuus mine, Zeah","738"),new AnagramClue("This anagram reveals who to speak to next: SAND NUT","Dunstan",new WorldPoint(2919,3574,0),"Anvil in north east Burthorpe","8"),new AnagramClue("This anagram reveals who to speak to next: SEQUIN DIRGE","Queen Sigrid",new WorldPoint(2612,3867,0),"Throne room of Etceteria Castle."),new AnagramClue("This anagram reveals who to speak to next: SLAM DUSTER GRAIL","Guildmaster Lars",new WorldPoint(1649,3498,0),"Woodcutting guild, Zeah"),new AnagramClue("This anagram reveals who to speak to next: SLIDE WOMAN","Wise Old Man",new WorldPoint(3088,3253,0),"Draynor Village","28"),new AnagramClue("This anagram reveals who to speak to next: SNAH","Hans",new WorldPoint(3218,3219,0),"Lumbridge Castle courtyard"),new AnagramClue("This anagram reveals who to speak to next: SNAKES SO I SAIL","Lisse Isaakson",new WorldPoint(2351,3801,0),"Neitiznot","2"),new AnagramClue("This anagram reveals who to speak to next: TAMED ROCKS","Dockmaster",new WorldPoint(1822,3739,0),"Piscarilius House, NE of General store","5"),new AnagramClue("This anagram reveals who to speak to next: TEN WIGS ON","Wingstone",new WorldPoint(3389,2877,0),"Between Nardah & Agility Pyramid"),new AnagramClue("This anagram reveals who to speak to next: THEM CAL CAME","Cam the Camel",new WorldPoint(3300,3231,0),"Just outside of the Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: THICKNO","Hickton",new WorldPoint(2822,3442,0),"Catherby fletching shop","2"),new AnagramClue("This anagram reveals who to speak to next: TWENTY CURE IRON","New recruit Tony",new WorldPoint(1498,3544,0),"Shayzien House's Graveyard"),new AnagramClue("This anagram reveals who to speak to next: UNLEASH NIGHT MIST","Sigli the Huntsman",new WorldPoint(2660,3654,0),"Rellekka","302"),new AnagramClue("This anagram reveals who to speak to next: VESTE","Steve",new WorldPoint(2432,3423,0),"Upstairs Wyvern Area or Stronghold Slayer Cave","2"),new AnagramClue("This anagram reveals who to speak to next: VEIL VEDA","Evil Dave",new WorldPoint(3079,9892,0),"Doris' basement, Edgeville","666"),new AnagramClue("This anagram reveals who to speak to next: WOO AN EGG KIWI","Awowogei",new WorldPoint(2802,2764,0),"Ape Atoll","24"),new AnagramClue("This anagram reveals who to speak to next: YAWNS GY","Ysgawyn",new WorldPoint(2340,3167,0),"Lletya"))
executeRunnableDismissingKeyguard(runnable,null,false,true)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
UserHandle.getCallingUserId()
msg.getHistoryRef().getHistoryId()
Map<Method,List<String>>
t.run()
new DatagramDnsQuery(addr,null,1)
Constants.TEST ? 3000000 : 10000000
Generics.newHashMap()
"".equals(callBeep.canPlayType("audio/ogg;"))
((SQLDataSource)dataSource).getSQLDialect().storesQuotedCase()
WordPress.wpDB.getAccounts()
nextTokenIsFast(b,IDENTIFIER)
this.messageService.fluxPostAuthorizeBeanFindById(1L).contextStart(withUser)
Preconditions.checkArgument(!(msDir == null && s3Dir == null))
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
createdBy.equals("parquet-mr")
UNSIGNED_BYTE_MAX_VALUE=256
LOGGER.debug("Could not execute copy",ex)
poolTimeoutMillis < 0
ThreadLocal<Map<String,CacheEntry>>
mSyncStatus.get(i)
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
endPos < paraEnd
holder.textView.setBackground(null)
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
days >= 2
!list.append(pi)
fileName.substring(lastDotIndex + 1,fileName.length())
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
log.error(throwable,"Query %s failed",queryId)
mf.getColumnName()
assertFalse(runtimeOptions.isMonochrome())
PROTOCOL_VERSION=1
new IndexWriter(dir,analyzer,true)
initializeMainContext(monitor)
mService.mDisplayContents.get(displayNdx)
getLocationEnabled()
one.setCoordinateIndex(LEAF)
eq(ethernetIface)
gatt.periodicAdvertisingEnable(this.advertiserId,enable)
level < 0
!cursor.moveToFirst()
from > to
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,false)
IllegalArgumentException e
stack.peekFirst()
!BACKUP_ENABLED
rs.last()
m.getSize()
mEntries[which]
prep.setBinaryStream(2,new ByteArrayInputStream(buff))
mLocalWorkerAddress.getRpcPort()
DLServiceUtil.addFile(companyId,portletId,article.getGroupId(),repositoryId,dirName + "/" + fileName,StringPool.BLANK,new String[0],bytes)
dialog.hide()
WikiPageLocalServiceUtil.movePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
ORIENTATION_SETTLE_TIME_MS=100
s.charAt(1)
Validator.isNull(_uploadMessage)
!isPartialUpdate
Object key
RedisOperationsSessionRepository.class
archiverManager.getUnArchiver(src)
mTestStream.getBytesFlushed()
getList().getSize() == 0
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
origin < other
return false; 
format("max-age=%s",18_000)
Integer.valueOf(topStr)
!getViewRootImpl().isInLayout()
speed < 50
_connector.getResponses("METHOD /foo HTTP/9\n\n")
EmptyResponse.class
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
Thread.sleep(5000)
LocalInspectionToolWrapper wrapper=new LocalInspectionToolWrapper((LocalInspectionTool)tool); 
request.getServletPath()
handleDnsConfigurationChange(networkType)
result.addEnchantments(getEnchantments())
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
mMime.toLowerCase().startsWith("video/")
Slog.e(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.",ioe)
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false)
MIN_CONNECTIVITY_COUNT=2
RelativePoint.getSouthEastOf(link)
new NullSafeComparator<>(comparator,false)
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
((10 - isOnline) - (10 - targetIsOnline)) * 1000000
new int[25]
platformVersion < MNC
Response.ok()
@ConditionalOnEnablednHealthIndicator("mail")
assertEquals(11,definitions.size())
targetActor.addListener(listener)
when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(3)
(mOomMinFreeHigh[5] * 7) / 8
exitCode != 0
orderedSet((int)i & mask,item)
readIntPref(FONTSIZE_KEY,mFontSize,20)
searchDisplay.initEmpty()
!list.append(pi)
telephony.isOffhook()
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
LOGGER.debug("Could not find DropTargetDropEvent class",e)
SHOW_ON_APP_LAUNCH=3
mHeader.performClick()
settings.username != null
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
new DatePickerDialog(getActivity(),getConstructorListener(),y,m,d)
Slog.wtfStack(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
option == JOptionPane.CANCEL_OPTION
child.reset()
mFs.mkdirs(new Path(path),null)
TextUtils.isEmpty(addresses)
"A task is in the ABORTED state but stage is " + stageState
sliceInput.length()
updateRulesForGlobalChangeLocked(false)
OverridingMethodsSearch.search(method,method.getUseScope(),true)
mContext.startActivity(intent)
Object edge
mContext.sendStickyBroadcast(mStorageFullIntent)
splashImageView != null
doTest()
result.getErrors()
/**   * {@inheritDoc}  */ public Object get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
ShutdownOperations.addOperation(new Runnable(){   public void run(){     wrappedResponseHolder.remove();   } } )
selenium.isVisible("link=Control Panel")
_maxTransactionActive=0
mObsoleteAgents.remove(info)
new Paint(Paint.ANTI_ALIAS_FLAG)
new OsmBugsLocalUtil(activity)
userState.mIsAccessibilityEnabled
mAuthorities.get(i)
namespaceMap.put(typeToRead.getSchemaType().getNamespaceURI(),"ns1")
from >= to
result.ocFile.getMimetype()
MAKIBESF68(50)
ran.nextInt(500)
flagsFromClass=SwingConstants.class
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
TextUtils.isEmpty(addresses)
klass.getDeclaredFields(false,declaredFields)
toSetIn.length() < 1
@NonNull
this.thrown.equals("File must exist")
scheduleRemoveStartingWindow(wtoken)
!properties.exists(MainVcsLogUiProperties.BEK_SORT_TYPE)
mTitleTextView != null
MyModel rawModel=makeModel(); 
ByteBuffer.allocateDirect(DEFAULT_NET_BUFFER_SIZE)
LOG.error("OpenTracing: Failed to capture tracing data",t)
telephony.isIdle()
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
Collections.addAll(lastFilterPoiAdditionalsCategories,parser.getAttributeValue("","poi_additional_category").split(","))
new MatParamTexture(VarType.Texture2D,paramName,texture,0,null)
resources.getDimension(R.dimen.close_handle_height)
type.getConstructor()
ByteBuffer.allocateDirect(mPreviewWidth * mPreviewHeight * 4)
@Specialization protected Object escapingString(String escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return escapingValue; } 
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map")
new IndexAnalyzers(indexSettings,namedAnalyzer,namedAnalyzer,namedAnalyzer,Collections.emptyMap())
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
this.thrown.equals("File must not be null")
t.run()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION)
constructor.getTypeParameters()
new ClientAdminThread(null,null,sendBuffer)
Assert.assertEquals(416,statusCode)
assertCorrection(rule,"Eisnbahn","Einbahn","Eisbahn","Eisenbahn")
onDetachedFromWindows()
switch (receiveState) { case Connected:   setState(receiveState.onDispatchEndOfStream(),State.Stopped); break; default : throw new IllegalStateException(String.format("Connection is in unexpected dispatch state %s.",dispatchState)); } 
monochrome=true
@IntMethodAnnotation(value=43)
mRenderNode.isPivotExplicitlySet()
IdentityHashMap<JsName,JsFunction>
application.getApplicationContext()
httpResponseCode == 204
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],user,new BindException(user,"user"))
new Dimension(700,400)
request.addHeader(h.getKey(),h.getValue())
mLayoutParams.width >= 0
new EntryEvent(packet.getName(),(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
dataTypeDefinition.replaceFirst("\\s*\\{.*","")
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
new InternetExplorerWebDriverImpl(projectDir,portalURL)
c.getLiquid().amount != 0
disableForUser(what,token,pkg,mCurrentUserId)
getMyApplication().getFavorites().getVisibleFavouritePoints()
StringBuilder sb=new StringBuilder("Connection "); 
mEditSessionTime.setText(String.valueOf(repLimit))
DEFAULT_ADDRESS_BBOX_RADIUS * 10
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
id=10
RESULT_TIMEOUT=1500
distanceToView(focused) > 0
isEmptyOrSpaces(s)
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).beforeValidityChanged(arr)
mActiveStreamType == -1
mapper.seAttributePrefix("ROLE_")
ctClass.toClass()
iceBox.isSelected()
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
IndexReader reader=IndexReader.open(directory); 
BeanPropertiesUtil.getString(model,_keyProperty)
LOG.warn("touchbar-server isn't running, skip nst loading")
AUTH_TYPE_DIGEST.equals(this.authType)
showRecentApps(true)
it.hasNext()
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.","Ursache waren die hohe Arbeitslosigkeit und die Wohnungsnot.","Ursache waren unter anderem die hohe Arbeitslosigkeit und die Wohnungsnot.","Er ahnt nicht, dass sie und sein Sohn ein Paar sind.","Die Ursachen der vorliegenden Durchblutungsstörung sind noch unbekannt.","Der See und das Marschland sind ein Naturschutzgebiet","Details, Dialoge, wie auch die Typologie der Charaktere sind frei erfunden.")
populateTrendingUi()
FieldsWriter<V,?>
child.jni_YGNodeSetOwner(child.mNativePointer,0)
minY + minY
packet.getAttribute("from").split("/")
newDescriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
mWasActivatedOnDown || !mNeedsDimming
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
context == null
windowToken != null
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
layoutFriendlyURLLocalService.addLayoutFriendlyURLs(user.getCompanyId(),groupId,plid,privateLayout,friendlyURLMap,serviceContext)
dlFileShortcut.getFolderId()
Nd4j.createUninitialized(shape)
PortletURLFactoryUtil.create(request,PortletKeys.EXPORT_IMPORT,PortletRequest.RENDER_PHASE)
int retries() default 0; 
new Paint(Paint.ANTI_ALIAS_FLAG)
getEmptyCell()
1000 / hardness
".".equals(relativePath)
Exception e
GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)
protected XmlBlock createSimpleChild(final ASTNode child,final Indent indent,final Wrap wrap,final Alignment alignment){   return new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent,null,isPreserveSpace()); } 
Trans == TRANSPOSE
calendar.getTimeZone().getDSTSavings()
categoryTypes.size() > 3
type.getConstructor()
param.setResult(xparam.getThrowable())
Arrays.asList("net.bull")
AbstractCompanySettingsVerifyProcess.class
Constructor constructor=(Constructor)chooseMethod("<init>",constructors,arguments,false); 
SQLException e
mOrderResult.remove(savedInfo)
((Player)target).isOnline()
new StructureViewModelBase(myPsiFile,new YAMLStructureViewElement(myPsiFile)).withSorters(Sorter.ALPHA_SORTER).withSuitableClasses(YAMLDocument.class,YAMLKeyValue.class)
logger.error("Problem while CH preparation " + name)
Arrays.fill(this.state,0,state.length - 1,FREE)
i >= 0
titleLabel.getPrefWidth()
parent.getOverriddenJoinColumn(propertyName)
refresh()
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
config.trustStoreLocation != null
writeString(writer,reader.getDate().toDateStr(),fieldName)
HighlightInfo.newHighlightInfo(type).range(refElement).description(message)
eq(Expressions.constant(constant))
new PagesListSetNextRecord(cacheId,pageId,nextId)
itemTop > headerBottom
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
mWidth=200
buf.openElement("conference")
listTypePersistence.findByPrimaryKey(listTypeId)
StringBuffer sb=new StringBuffer(); 
100
canvas.saveLayer(mRect.left - rad,mRect.top - rad,mRect.right + rad,mRect.bottom + rad,mLayerPaint,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG)
mDisplay.getMetrics(mDisplayMetrics)
attribute.getDefinition().getAttributeMarshaller()
!entry.cacheContentViews(mContext,notification.getNotification())
RequestConfig.custom().setConnectionRequestTimeout(httpClientConfig.getConnTimeout())
element != null || concurrentSet.containsKey(element)
Integer.valueOf(taskIdStr)
id=15861
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
volume.getMtpReserveSpace() * 1024 * 1024
!isUnique
binding.getKey().getTypeLiteral().getType()
mcGroup.getGroupName()
previousException.compareTo(currentException)
minValue >= low
new CountDownLatch(3)
file == null
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
mMatchMode=numOfMatchesPerFilter
LOG.error("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
makeMessage(pathname)
new FreeMarkerTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_configuration,_templateContextHelper)
mRedrawClip.isEmpty()
selenium.isVisible("link=Control Panel")
new SimpleDateFormat(format)
TestPropsValues.getUserId()
native_get_videoeditor_export_profile(vidCodec)
mainSourceSet.getClasses()
javaVersion < 9
mRemote.transact(GRANT_URI_PERMISSION_TRANSACTION,data,reply,0)
assertStatus(a,f,false)
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
Context.getEncounterService().createEncounter(encounter)
event.getY()
fT.add(R.id.feeditemlistFragment,filf)
mContext.startActivity(intent)
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
selenium.isVisible("link=Control Panel")
Key.class.getCanonicalName()
maxPageSize + 2
" firstActiveTime=" + lastActiveTime
worldsPath.resolve(getChunkFilename(chunkPos))
new StrictModeViolationDialog(mContext,ActivityManagerService.this,res,proc)
selenium.waitForElementPresent("//iframe[contains(@title,'Rich Text Editor')]")
TimeUnit.SECONDS.toMillis(4)
showRecentApps(true)
killBillClient.updateSubscriptionBCD(updatedSubscription,DEFAULT_WAIT_COMPLETION_TIMEOUT_SEC,createdBy,reason,comment)
table != null
Exception e
preparedStatement.setCharacterStream(paramIndex,tmpReader)
old + 8
freezeThisOneIfNeeded != null
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
apnContext.getWaitngApns()
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,false); 
metadata.getFaces()
Looper.prepare()
i < arguments.length
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
revWalk.release()
assertPhoneNumberEqual("123123","0123123",false)
rootDir.mkdirs()
loaded.getLoaded().getConstructor()
@Override public DBSObject getParentObject(){   return table; } 
type.getConstructor()
i < maxListFill
properties.contains("flyway.url")
lock.isLocked()
PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,expression)
nextInfo.directionInfo == null
selenium.isVisible("link=Control Panel")
0 != mNetworkCapabilities
selenium.isVisible("link=Control Panel")
req.getSession().getMaxInactiveInterval() * 1000
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket")
for (MediaType mediaType : compatibleMediaTypes) {   if (mediaType.isConcrete()) {     return mediaType;   }  else   if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {     return MediaType.APPLICATION_OCTET_STREAM;   } } 
checkEmpty(className,EMPTY_STRING_MSG)
Exception e
Log.w(TAG,"Session failed to close due to remote exception",e)
DateTimeParseException e
String pipelineName="upstream"; 
env.lookup(PARSE_CONTEXT)
logger.info("reading file from {}, repairedAt = {}",session.peer,repairedAt)
Foundation.NSLog("[debug] " + tag + ": "+ message)
Status.constructStatuses(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
new RoutingControlAction(this,newPath,false,callback)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
Rule.getRules(false,ActivityForwarding.this)
expanded.toString().replace("\\$\\$","\\$")
Object bindingTarget
metadata.getFaceRectangles()
public TokenStream create(TokenStream input){   return new ISOLatin1AccentFilter(input); } 
GridCacheEntry<UUID,String>
config.setProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
ddmStructureService.fetchStructure(dlFileEntryType.getGroupId(),"auto_" + fileEntryTypeId)
intent.setData(uri)
!WordPress.hasValidWPComCredentials(getActivity().getApplicationContext())
return 10000; 
Preconditions.checkNotNull(mBlockIdsOnTiers)
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logPageUrl != null || logPageUrl.length() > 0
useCustomAapt=false
timeSinceFirst < DateUtilities.ONE_DAY * 3
Internal.prefixKeyWithSalt(key)
mWorkerId + BASE_FILE_NUMBER
localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
get(key).equals(that.get(key))
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
PyQualifiedExpression.class
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
@NotNull
ByteArrayEntity entity=new ByteArrayEntity(new Gson().toJson(object).getBytes()); 
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN,UNSET)
log.warn("Hooking new default : onNextDropped")
mDataAuthorities == null
from > to
name.equals(blacklistName)
mRecyclerView.scrollBy(hScroll,vScroll)
new StringBundler(7)
mccStr.isEmpty()
String model
Thread.sleep(5000)
EntityRegistry.registerEntityID(entityClass,entityName,id)
new CrypticClue("This crate holds a better reward than a broken arrow.",new WorldPoint(2671,3437,0),"Inside the Ranging Guild. Search the crate behind the northern most building.")
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
LOGD=true
MBWebUpgrade.class
wCompression.getSelection()
!physicalFile.exists()
mContext.sendBroadcast(intent)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
poi_tag != null
JMeterUtils.getPropDefault("backend_graphite.send_interval",5)
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
_connector.getResponses("GET /foo?status=206 HTTP/1.0\n\n")
info.crashInfo.stackTrace.length() > 10000
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
analysis.getType(windowFunction)
"Virtual file is null for " + file
assertEquals(2350,res.getTime(1,2) / 1000,50)
((Activity)getContext()).onBackPressed()
Map<Long,HostedConnection>
LOAD_FACTOR=1000
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
copy1DRangeFrom(0,mType.getCount(),i)
asIntReg(result)
public Object getManagedObject(){   return transMeta; } 
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
metadata.getFaces()
ParamUtil.getString(portletRequest,DISCOUNT_TYPE)
Cat.w(e)
mService.mAppOps.startOpNoThrow(mAppOp,uid,packageName)
mPositionScroller.startWithOffset(position,offset,offset)
Looper.getMainLooper()
this.thrown.equals("File must exist")
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
type.getConstructor()
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,NO_TYPES,Arrays.asList(expected),map(),NO_EXTEND_DECLARATIONs)
setIcon(ic)
new HgMaterialConfig(new HgUrlArgument(hg.getUrl()),hg.isAutoUpdate(),toFilter(crScmMaterial),hg.getDirectory(),toMaterialName(materialName))
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null)
t.equals(type)
pyClass.getClassName()
final FileBasedWikiPage parent
id=19
cppFile.writeString(buffer.toString(),false)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
mono.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
CharSequence message
Thread.sleep(500)
new Paint(Paint.ANTI_ALIAS_FLAG)
selenium.isVisible("link=Control Panel")
ColorRGBA.White.mult(0.8f)
constraintSystem.getTypeVariables()
LOGGER.debug("Error during file import",e3)
handshake == 0
findAndRemove(query,null,collectionName)
LOG.error("Found spell checking wrapper is not local " + spellCheckingWrapper)
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,outputFieldTypes[i].getDisplayName(),setOperationName,descFieldType.getDisplayName())
renderManager.render(tpf,false)
assertEquals("One propagated header is expected.",5,headers.toArray().length)
orgReplica.applyIndexOperationOnReplica(0,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id",new BytesArray("{}"),XContentType.JSON),u -> { } )
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
endTime - EVENT_TIME_TOLERANCE
connectPromise.setFailure(t)
_logger.get().log(Level.WARNING,"Server seen down: " + _addr)
new int[143]
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),name)
verify(workspaceFilesCleaner)
platformVersion < MNC
((DartUriElement)parentParent).getUriStringAndItsRange().second.getEndOffset()
configureReadBufferForRead()
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
Integer.valueOf(bottomStr)
"content".equals(scheme)
Realm.getColumnIndices()
/**   * An attachment provider that locates the attach API directly from the system class loader.  */ enum ForJigsawVm implements AttachmentProvider {/**   * The singleton instance.  */ INSTANCE; /**   * {@inheritDoc}  */ public Accessor attempt(){   return Accessor.Simple.of(ClassLoader.getSystemClassLoader()); } } 
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getLibrariesScope()
connection.getRequestId() == lastRequestID + 1
Messages.getString("Spoon.ExportResourceZipFileExists.Message")
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
exc.getXMPPError().getCode() == 409
attachmentsDir.getCanonicalPath()
serviceDataUuid == null
MAX_BATCH_SIZE=1000
requestHeader.mConnectionID != null
IBackupManagerService svc=mService; 
Class.forName(name)
id.errorIfMissing()
arg2.charAt(arg2.length() - 1) == quotedChar
Integer.valueOf(v)
realPointerIndex > AndroidInput.NUM_TOUCHES
webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class,params)
specHeightMode == MeasureSpec.EXACTLY
patientState.getState().getId()
LOG.error(e)
new InterpreterExpectations("",true)
logger.debug("{} {}",errorCode,message)
LOG.error("OpenTracing: Failed to capture tracing data",t)
Long.valueOf(timeString)
name == null
mLayout.getPaint().getTextWidths(mText,offsetStart,offsetEnd,widths)
mMncStr == null
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
Slog.w("Could not read " + path,e)
LOG.warn("Transport ({}) failed {} attempting to automatically reconnect: {}",connectedTransport,(reconnectOk ? "," : ", not"),e)
SmartEnterProcessors.INSTANCE.forKey(fixture.getFile().getLanguage())
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
mAdapter == null
getEffectiveCleartextTrafficPermitted()
addFileType("WEBP",FILE_TYPE_WBMP,"image/webp")
JsAstUtils.fqnWithoutSideEffects(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
info.getVoiceMailNumberForSubscriber(subId)
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } )
_connector.getResponses("XXXXXXXXXXXX\n\n")
subModule.add(persistencePackage)
asList(DERBY,FIREBIRD,ORACLE)
RESULT_TIMEOUT=1500
Internal.prefixKeyWithSalt(key_a)
conf.getInt(THRIFT_FRAMED_TRANSPORT_SIZE_IN_MB,16)
LAST_VERSION=361
level=(String)level
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
targetPositionUs > mediaPlaylist.getEndTimeUs()
lastCompletedOffset != lastCompletedOffset
mDuration >= 0
new StringBuilder()
softmax.get(point(i),point(box),all(),point(x),point(y))
getCallerAddress()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
new RuntimeException(e)
selenium.isVisible("link=Control Panel")
info.getGroupIdLevel1ForSubscriber(subId)
indexBuf.getData().capacity()
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,true)
lab.equals("N2")
status().isMovedTemporarily()
sourceFile.length() > 10 * 1024 * 1024
someBatchInterval * 3
Native.open(embedded.getAbsolutePath())
new InstrumentationSpec(FileTypeSet.of(JavaSemantics.JAVA_SOURCE)).withSourceAttributes("srcs").withDependencyAttributes("deps","data","exports","runtime_deps")
removeQueueTask(this.message.getMessageId())
_hasGuestViewPermission(layout)
defaultListenerAccess != null
buf.writableBytes()
selenium.isVisible("link=Control Panel")
assertEquals(9776l,(long)sourceStats.get("novel"))
JMeterUtils.getPropDefault("proxy.pause",1000)
(V)unsafe.getObjectVolatile(owner,offset)
singleModelJSONObjectBuilder.field(OPERATION)
((IWorkbenchPropertyPage)prefPage).setElement(dataSource)
feature.getName()
((GrReferenceList)e).getReferenceElements()
aProject.getTasks().all(captureReportingTasks)
onEvaluateInputViewShown()
ImmutableList.of(new Identifier("a"))
LOG.isDebugEnabled()
c.getName()
Pair.of(pair.getLeft(),pair.getRight())
setNetworkTimeout(connection,networkTimeout)
Object strongReference
new SgdUpdater()
error("Unable to connect due to unrecognised server certificate")
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title2,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,serviceContext)
mImm.showStatusIcon(mToken,getPackageName(),iconResId)
WordPress.getCurrentBlog().getRemoteBlogId()
_layoutsElement != null
View.SYSTEM_UI_TRANSPARENT
public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); 
player.teleport(playerLocation)
LOG.error("register druid-driver mbean error",ex)
mValues[7]
randomIntBetween(0,10)
log.debug("Error while closing command context",exception)
Thread.sleep(5000)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   return cache.drPauseState(); } 
logger.warn("Cannot remove group member ({})",e.getMessage())
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
addon.markDirty()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Build.VERSION.SDK_INT > Build.VERSION_CODES.M
new IndexWriter(dir,new StandardAnalyzer(),true)
@NotNull
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
Trans == TRANSPOSE
LOG.info("Halting process: ShellBolt died.",exception)
unbox(inWatchlist,movie.watched)
Math.min(o.outWidth / targetWidth,o.outHeight / targetHeight)
Calendar.getInstance(JSON.defaultLocale)
removedGenerator.isAssignableFrom(next.getClass())
new Random(System.nanoTime())
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
new ForgeCommand(evt.getServer())
FBUtilities.getBroadcastAddress()
VertexProgram.createVertexProgram(ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
(diff == 2) && (previousLineLeadingTabCount > 0) && line.endsWith(StringPool.SEMICOLON)
Integer.valueOf(taskIdStr)
id=15
new SynthesizedAnnotationInvocationHandler(annotatedElement,annotation,getAttributeAliasMap(annotationType))
vpms.add(vpm)
accountCapsule.putLatestAssetOperationTimeMap(tokenID,latestAssetOperationTime)
LinkedList<>
BuildParametersBuilder parametersBuilder=new BuildParametersBuilder(); 
Integer.valueOf(p.getProperty("numberid.id"))
mContext.startActivity(intent)
this.doInitrospect(extendedInterfaces,matchedInterfaces)
parser.getName().equals("body") || parser.getDepth() <= depth
parameters == null
new UnsupportedOperationException()
ThriftValidation.validateColumnFamily(keyspace,cfname,true)
mVideoCallListener=null
mRepeat > 1
si.targetPermissionUid >= 0
filter.setRadius(mAngle)
ActivityManagerNative.getDefault().updateConfiguration(config)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
new IllegalStateException()
configuration.numEvents*=1000
mPulseCallback.onPulseFinished()
adapter.unregisterDataSetObserver(mObserver)
scores.getAlgorithmName()
lhs.getScore()
_bc.proxPen(_beta)
result.getContentType().equalsIgnoreCase(PresContentClient.CONTENT_TYPE)
metric instanceof MetricsRate || metric instanceof MetricsString
telephony.isOffhook()
tableHasColumn(tableName,columnName)
mAdapter == null
mAppToken.hasContentToDisplay()
mouse().alt().clickAt(1,1)
!cursor.checkAndClearBoundsFlag()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
response.getStatusCode()
type.getConstructor()
dockedBounds.right + adjustment
logger.error("Error connecting to Plex",e)
LOG.warn(ex.getLocalizedMessage(),ex)
new RunnableAdapter<T>(task,result)
uid
assertEquals(2,StringUtil.countMatches(drl,"import "))
tablelist == null
imageView.setBackgroundDrawable(drawable)
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
profilesXml.exists()
channel.getIdWithoutGroup()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
selenium.isVisible("link=Control Panel")
mView.post(mAnimationStarter)
userInfo.getWebpage()
role.equals(NULL_ROLE)
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
new RelationshipLinkbackStage(topic,config,neoStore.getRelationshipStore(),nodeRelationshipCache,nextRelationshipId,true)
syncOperation.delay == 0
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
getPreferences().getBoolean("allow_message_correction",true)
mGesturesPopup != null
getHeight()
Locale.getDefault().toString()
Looper.getMainLooper()
users.get(i)
id=16
mWidth - edgeWidth
catalog.getStyleByName(info.getName())
ServerError._getCode(res)
app.configuration().getString("timezone")
statistics.addPutTimeNano(System.nanoTime() - start)
delegate.getChild(element)
lhs.getScore()
longSize >= 800
mAuthorities.get(i)
dateFormatter.format(value)
level >= 100
image.pixelWidth != width
Assert.assertTrue("Some completion variants are missed " + missedVariants,false)
analysis.getType(aggregate)
new ASMClassLoader()
FilteringClassLoader loggingClassLoader=classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(),loggingSpec); 
packet.getAttribute("from").split("/")
Slog.wtf(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
SingleResult<Tuple>
getGravity(gravity)
element.getNodeName()
loader.loadClass(name)
Boolean.valueOf(attrValue)
mAppOpsManager.noteOp(opCode,callingUid,opPackageName)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccesssor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
uri.append(ENTITY_AMPERSAND)
LOG.error("OpenTracing: Failed to capture tracing data",t)
name == null
VideoContent.createRemotePhoto(fileReference,baseVideoContent.getW(),baseVideoContent.getH(),baseVideoContent.getDuration(),baseVideoContent.getFastThumb())
selenium.isVisible("link=Control Panel")
HashMap<String,FilterBuilder>
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
timeMs <= 0
ISOChronology.getInstance()
assertEquals(avDegree,1.0)
@Override public ConfigValue get(Object key){   if (key instanceof String)   return peek((String)key);  else   return null; } 
PApplet.radians(angle)
JAXRSUtils.getStructuredParams(theQuery,"&",false,false).getFirst(CALLBACK_KEY)
new AlertDialog.Builder(app)
WebSocketEventListener.class.cast(l).onMessage(event)
unhintedMessage.getMessageId()
AWAKE_INTERVAL_DEFAULT_MS=5000
serviceInfo.getRequiredServices() == null
hashList.get(0)
dynamicType.getConstructor()
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
one.setCoordinateIndex(3)
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
DomainSocket.validateSocketPathSecurity0("/foo",0)
map.substitute(path,SystemInfo.isFileSystemCaseSensitive,null)
@SuppressWarnings("unused") public Schema fetch(int version,JobsV3 s){   Key key=s.job_id.key();   Value val=DKV.get(key);   if (null == val)   throw new IllegalArgumentException("Job is missing");   Iced ice=val.get();   if (!(ice instanceof Job))   throw new IllegalArgumentException("Must be a Job not a " + ice.getClass());   Job j=(Job)ice;   Jobs jobs=new Jobs();   jobs._jobs=new Job[1];   jobs._jobs[0]=(Job)ice;   s.jobs=new JobV3[1];   if (j instanceof ModelBuilder) {     s.jobs[0]=new ModelBuilderJobV3().fillFromImpl(j);   }  else {     try {       s.jobs[0]=(JobV3)Schema.schema(version,j).fillFromImpl(j);     }  catch (    H2ONotFoundArgumentException e) {       s.jobs[0]=new JobV3().fillFromImpl(j);     }   }   return s; } 
activeFrom.getTime()
Float value=iterator.next(); 
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP)
return true; 
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
suppression.equalsIgnoreCase(SuppressionUtil.ALL)
Response.ok()
MAX_MODULES=57
string.getName()
telephony.getDataNetworkTypeForSubscriber(subId)
name == null
OptionBuilder.create(CMD_PORT)
isPrivateMessagingContact
jscx.initStandardObjects(null)
commander.downContentPic(imageView,accountList.get(i).getAvatar_url(),i,listView)
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),12,FontStyle.Plain,true)
lhs.getScore()
ssl.has(CommonAttributes.CA_CERTIFICATE_FILE)
Integer.valueOf(time.split(":")[1])
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)
super.onDetachedFromWindowInternal()
out.writeLong(sampleCount)
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key,pnoSettings)
schemeSpecificParts != null
JsonProcessingException ex
count > 0
IgniteFuture<Object>
is(true)
entry.notification.clone()
private final URL url; 
Integer.valueOf(quantifier)
new IllegalArgumentException("Missing required attribute: " + attributeName)
FileDownloadUtils.formatString("range[%d-)",startOffset)
root.toURL()
JSError.make(REPORT_PATH_IO_ERROR,reportPath)
assertEquals(4,verifier.getErrors().size())
Log.w(TAG,"Session failed to close due to remote exception",e)
isOffhook
Func1<Exception,Observable<R>>
{4,5,5,11,6,5,7,5,11,11}
mService.removeNetwork(netId)
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
mainFile.getRunfilesPathString()
last > first
selenium.isVisible("link=Control Panel")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
row.slider.setProgress(newProgress)
region == null
BigDecimal value
toolchainType != null
viewToClick != null
performDexOpt(packageName,instructionSet,true)
getWidth()
mOpenTags.peekFirst()
"thing".equals(uri.getScheme()) == false
mConferenceById.containsKey(callId)
-1
new BadRequestException(null,errors)
o.getAmount()
artifact.getName().getExtension()
c == Character.class
hasFocus() && showClearButton && !TextUtils.isEmpty(getText())
selenium.isVisible("link=Control Panel")
Optional.of(BuckAddDependencyIntention.create(referenceElement,psiClass))
writer.getSourceFile(1)
@Mock private HidProfile mHidProfile; 
ContainerUtil.list("origin/remote_branch")
blog.getRemoteBlogId()
return 10_000; 
info.getLine1AlphaTagForSubscriber(subId)
mAppOpsManager.noteOp(opCode,callingUid,opPackageName)
new ConnectionError(sm.getString("http2Parser.headers.wrongStream",connectionId,Integer.toString(headersCurrentStream),Integer.toString(streamId)),Http2Error.COMPRESSION_ERROR)
return true; 
HdmiCec.getTypeFromAddress(i)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
mBackgroundBitmap == null
selection != ""
tagService.rename(tag,text)
myUi._select(newSelection,new Runnable(){   public void run(){     final Set<Object> hangByParent=new HashSet<Object>();     processUnsuccessfulSelections(newSelection,new Function<Object,Object>(){       public Object fun(      final Object o){         if (myUi.isInStructure(o) && !adjusted.get(o).value(o)) {           hangByParent.add(o);         }  else {           addAdjustedSelection(o,adjusted.get(o),null);         }         return null;       }     } ,originallySelected);     processHangByParent(hangByParent).notify(result);   } } ,true,true,true)
logger.error("{}",general)
_connector.getResponses("GET /foo?data=42 HTTP/1.0\n\n")
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logger.warning("Unable to load image using TGA loader!")
DelimitedRecordHiveMapper.class
ctx.getSettings().AUDIO_STREAM_GUIDANCE.get() == 0
new MediaController(token)
LineMarkerSettings.getSettings().isEnabled(new ColorLineMarkerProvider())
bg treeGen=new gy(); 
DumpUtils.checkDumpPermission(mContext,TAG,pw)
DataStream<OUT>
copy.replace("@" + maybeUserName,"")
endPosition.set(Position.KEY_ODOMETER,50001)
formatInfo.getFormat() >= 7
_typeSettingsProperties.toSortedString()
detectionHandler.isErrorDetected()
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615c00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
bm.copy(bm.getConfig(),true)
invalidate()
JournalFolder.class
val > 0
realm.assertThread()
getLocalizationXmlFromPreferences(preferences,portletRequest,parameter,defaultValue,null)
selenium.isVisible("link=Control Panel")
pgl.loadVertexShader(fragURL)
HazelcastInstanceFactory.terminateAll()
i == 0 && (post.blog.isFullSizeImage() == false && !post.blog.isScaledImage())
log.errorf("started ResourceAdapterService %s",context.getController().getName())
new NullPointerException("the annotation is null")
new MediaController(token)
message.getEncryption() == Message.ENCRYPTION_OTR
this.sizeY=sizeX
public Object getBean() throws Exception {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,cPreviewSteps,executedSteps.size(),true,null,props)
onDetachedFromWindow()
assertThat(getField(graphite,"port")).isEqualTo(8080)
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
i=0
selenium.isVisible("link=Control Panel")
columnNames.size() + 1
!mIsRecentsShown || !mIsPipFocusedInRecent
item(ADAMANT_2H_SWORD)
!namespaces.isDefined()
enabled=false
input != null
attribute.getMetaAttribute().isReadOnly()
types.contains(metadata.getInheritedFromType())
customer.getUuidId()
log.error("Code expired : {}",code)
makeMessage(pathname)
Exception e
selenium.isVisible("link=Control Panel")
a.entrySet()
isVideoScalingModeSupported(mode)
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
actualHeight > reqWidth
fields.get("last_seen")
new FlywayException("Unable to instantiate class: " + className)
callerApp == null
StringBuilder sb=new StringBuilder(); 
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.MAX,0.0,outH,outW,output)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Site Name")
historicState(item,timestamp)
THashMap<String,StandardFileType>
_buildTemplateWithGradle("war-hook","war-hook-dependency-management","--dependency-management-enabled","true")
nameDefinitionMultimap.keys()
FluxPeekHelper<T>
Action<JarBinarySpec>
getAttributes(link)
factory.getProxy()
Exception e
DIODE(100)
spawnSettings.contains(id)
getCallerAddress()
Response.ok()
basicInvocation.potentialResponse == null
logger.equals(msg)
ai.uid <= Process.FIRST_APPLICATION_UID
result.getReceipt().getEnergyTotal()
checkManageUsersPermission("getting profiles related to user " + userId)
HIVE_TABLE_OFFLINE(2,EXTERNAL)
tableInfo.getType()
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
objects == null
hasPermission(permission)
isRemoteRegionRequested
TEMPLATE_TYPE_FIELD.getPreferredName()
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
filteredPods.isEmpty()
new Tag(text,line)
v.isUnknownType()
mHandler.postDelayed(pae,timeout)
((aLatitudeE6 < this.mLatNorthE6) && (aLatitudeE6 > this.mLatSouthE6)) || ((aLongitudeE6 < this.mLonEastE6) && (aLongitudeE6 > this.mLonWestE6))
WindowedValue.valueInEmptyWindows(4,PaneInfo.NO_FIRING)
selenium.isVisible("link=Control Panel")
Environment.getRootDirectory()
pToX - pToY
Proxy.getInvocationHandler(proxy).getClass().toString()
expandableView.getActualHeight()
entry.type != DownloadActivityType.SRTM_FILE
graphVersion.incNodeVersion()
ref.virtualMachine().canGetInstanceInfo()
mAttachInfo == null
stream.close()
endTrack("main")
services=8
mWidth - glowWidth
1
CAMERASERVER_UID=1046
e.getMessage()
FormatPlugin[]
Integer.valueOf(attrValue)
scanner.acceptResult(fqn)
myDisposed
fragmentCollectionPersistence.filterFindByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
query.getSliceEnd()
mDateView.setTypeface(Typeface.SANS_SERIF)
topActivity != null
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
new DeleteByQueryWrapper(in,schema)
colIndex < columnTypes.length
dbStat.setLong(1,sessionType.getPid())
r - scrollY
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
TokenSet.create(IpnbPyTokenTypes.IPNB_REFERENCE)
liferayFileEntry.isInTrash()
table != null
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
Exception e
nodeEngine.getService(LockService.SERVICE_NAME)
Collection self
Arrays.deepHashCode(valSrcQueries)
mState.isAlive()
DiagnosticFactory0.create(WARNING)
hasAuthenticationTimeoutExpired()
argumentsLength == 1
loaded.getLoaded().getConstructor()
U.resolveWorkDirectory("marshaller",false)
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null)
ApiConsumerHelper.findMethod(endpoint,this,log)
new ResolveTakenPictureAsyncTask(data,promise,options,cacheDirectory)
sentences.get(0).entityMentions() != null
selenium.isVisible("link=Control Panel")
TAuthor_LAST_NAME()
mView.post(mAnimationStarter)
audioManager.getRingerMode()
driver.findElementByLinkText("Rickrolling")
FieldsWriter<V,?>
parentTag == null
PhoneNumberUtils.isISODigit(number.charAt(i))
ArrayList<PsiElement>
e.update(2L,recid,Serializer.LONG)
deleteCondition.isPrivate()
is(5)
return uniqueRevision; 
private Actor actor; 
updatePanel()
value > 1800
smppClient.reconnect()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
new Node.JspAttribute(tai,qName,uri,localName,value,false,el,dynamic)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY)
startExpression != null
yamlFactory.createJsonParser(input)
request.getContentLength()
assertTrue(exitStatuses.contains(status.getExitStatus()))
manager.beginTransaction().remove(fragment).commit()
scheduler.scheduleWithFixedDelay(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
"Error resetting interface " + mInterfaceName + ", :"+ e
Math.min(1,amount)
mWorkerId + BASE_FILE_NUMBER
if (isVisible) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
myModule.getProject()
isSimple=true
selenium.isVisible("link=Control Panel")
new NullPointerException("the ast is null")
ContainerUtil.newHashSet(EDITOR_TOOLBAR,PROJECT_VIEW_TOOLBAR,TESTTREE_VIEW_TOOLBAR,MAIN_TOOLBAR,TOOLBAR,RUNNER_TOOLBAR,ANT_EXPLORER_TOOLBAR,ANT_MESSAGES_TOOLBAR,COMPILER_MESSAGES_TOOLBAR,TODO_VIEW_TOOLBAR,STRUCTURE_VIEW_TOOLBAR,USAGE_VIEW_TOOLBAR,DEBUGGER_TOOLBAR,CALL_HIERARCHY_VIEW_TOOLBAR,METHOD_HIERARCHY_VIEW_TOOLBAR,TYPE_HIERARCHY_VIEW_TOOLBAR,JAVADOC_TOOLBAR,FILE_HISTORY_TOOLBAR,FILEHISTORY_VIEW_TOOLBAR,LVCS_DIRECTORY_HISTORY_TOOLBAR,CHANGES_VIEW_TOOLBAR,PHING_EXPLORER_TOOLBAR,PHING_MESSAGES_TOOLBAR,ANALYZE_STACKTRACE_PANEL_TOOLBAR)
mActivities.remove(r)
mVibratorService.vibratePattern(new long[]{0},0,new Binder())
Type.LONG_TYPE.equals(typeInStack)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
mResourceData[i] != null
rect == null
status.getCode().ordinal()
new Requirement(Skill.SLAYER,61)
oldConfig.densityDpi != newConfig.densityDpi
targetInfo != null
LifecycleListener listener
/**   * Abstract persistence provider that provides a method to actually handle formatting moneys.  * @author Andre Azzolini (apazzolini)  */ public abstract class AbstractMoneyFieldPersistenceProvider extends PersistenceProviderAdapter {   public String getFormattedDisplayValue(  BigDecimal value,  Locale locale,  Currency currency){     NumberFormat format=NumberFormat.getCurrencyInstance(locale);     format.setCurrency(currency);     return format.format(value);   }   public String getFormattedValue(  BigDecimal value){     NumberFormat format=NumberFormat.getInstance();     format.setMaximumFractionDigits(2);     format.setMinimumFractionDigits(2);     return format.format(value);   } } 
mWorkerId + BASE_FILE_NUMBER
@NotNull Object value
layout == null
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
FastMath.max(origin,num.floatValue())
origin.realComponent().doubleValue() < other
return false; 
loaded.getLoaded().getConstructor()
logger.error("Error connecting to Plex",e)
logger.info("Recording function information")
(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout
USE_DISPLAY_LIST_PROPERTIES=true
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
System.currentTimeMillis()
myCardModel.getAnswerAlign()
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
ctx.grid().forCache(name())
Map<Integer,Object>
ArrayList<Class<?>>
window != null
tagName.equals(TAG_FORWARDING_INTENT_FILTERS)
mTileState
props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,3)
win.isDrawnLw()
status.getCreationTimeMs()
CompilerDirectives.inCompiledCode()
mono.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
mChildren.get(i).render(camera,projMatrix,vMatrix,mMMatrix,pickerInfo)
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
ignoreUnknown=false
nativeSetFlags(mNativeObject,sc.mNativeObject,0,OPAQUE)
Long.valueOf(value)
Thread.sleep(500)
new StepMeta(log,stepID,stepName,tii)
Log.info(this + " Busy selector - injecting delay " + _paused+ " times")
Ref.create()
fluentSetters()
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
goalStartXp <= 0
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(64)
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory()
finish()
pluginManifest.setRequiresPlugins(metadata.getRequiredPlugins().toArray(new String[]{}))
bounds.getEndOffset() < textRange.getStartOffset()
failed(x)
s.contains(a.getName())
new MissingPropertyException(name,Binding.class)
LOGGER.warn("onStartCommand({}) called while currentCommandExecution = {}",execution,currentCommandExecution)
clock.equals(newClock)
ParamUtil.getString(req,Constants.CMD)
new ArrayList<FileInputSplit>(numSubtasks)
mService.disableNetwork(netId,mContext.getOpPackageName())
config.getBroadcasterFactory().lookup(a.broadcaster(),true)
display.getMetrics(dm)
type.getConstructor()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Log_OC.e(TAG,"onPause() start")
selenium.isVisible("link=Control Panel")
statistics.addPutTimeNano(System.nanoTime() - start)
JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)
completion.otherwise(ex -> handler.handle(exchange,ex))
CommitId
allocator.getFlowController().prepareAction(input,weights,weightGradView,biasGradView,delta,epsNext)
8 * 1024
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper)
metadata.getFaces()
ormEntity.isMetadataComplete()
delayMs < 0
getWidth()
ArrayList<PdfComment>
cls.getAccessFlags().isSynthetic() && cls.getFields().isEmpty() && cls.getMethods().isEmpty()
mapExprStmt(node)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"meminfo",pw)
synchronized (runningTasks) {   runningZKTasks.remove(id); } 
Thread.sleep(5000)
((t - 1) * t * t) / 2f
DefaultJarFile.class
new ArrayList<Object>()
EMERGENCY_ASSISTANCE_ENABLED=false
type.getConstructor()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
props.remove(PoolingConnectionProvider.POOLING_PROVIDER)
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),createCommandDecoder(),connection,transformer(source))
Error.class
marketDataService.getBittrexTrades(pairString,100)
each.getCanonicalPath()
bos.toString()
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)
new StringBuilder()
LOG.error("Temporary Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the temporary data directory: " + tmpDirPath + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space - resetting to maximum available " + dirFreeSpace / (1024 * 1024) + " mb.")
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
selenium.isVisible("link=Control Panel")
GenericAttributeValue<String>
finish()
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
pmmlScorecard.isUseReasonCodes()
new Paint()
mPlayer.getCurrentPosition() * 1000
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false)
node == null
UIUtils.createPlaceholder(panel,2)
action == KeyEvent.ACTION_UP
i < 5
routerChain.notifyFullInvokers(groupInvokers,getUrl())
mCameraUser.submitRequest(request,false)
StringBuffer buffer=new StringBuffer("SynchronizedAttributeAccessor: ["); 
entry.getKey().startsWith("sun.")
GL20.glGetShader(shader,pname,params)
a.getFloat(attr,0)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0
type.getConstructor()
mGesturesPopup != null
LOG.info("Looking for service: " + service + ". Current token is "+ token)
!file.getMimetype().equals("DIR")
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
FunctionTypesKt.isFunctionOrExtensionFunctionType(((ClassDescriptor)container).getDefaultType())
ab.get1()
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
200 * 1024L * 1024L
oldConfig.densityDpi != newConfig.densityDpi
new InetSocketAddress(configuration.getRestListenUri().getPort())
(BeanDefinitionRegistry)context
USE_DISPLAY_LIST_PROPERTIES=true
csUseGlobalSearch=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
readStayAwakeConditions()
loaded.getLoaded().getConstructor()
instance.managementService.unregister()
grpCtx.config().getRebalanceDelay() != -1
/**   * {@link Builder#replace(Tree,String)}   */ public static Fix replace(Tree tree,String replaceWith){   return builder().replace(tree,replaceWith).build(); } 
DEBUG=true
log.error("Error extracting parameters meta data",e)
WEB_SYNC_MANAGER=true
filterTypes.size()
Matchers.anyInt()
telephony.isOffhook()
exifThumbWidth >= fullThumbWidth
LOGGER.info("Cached resource {} is up-to-date (lastModified: {}).",cached.getExternalLastModified(),location)
new Paint(Paint.ANTI_ALIAS_FLAG)
new UnsupportedOperationException("Storing a directory is not yet supported.")
Boolean.valueOf(resizeableStr)
List<MavenRemoteRepository>
TEST=false
DAY_POSITION_IN_LONG=10000
token.equals(":") && !prevToken.equals("\u00a0")
telephony.getDataNetworkTypeForSubscriber(subId)
LongStream.range(min,max)
@Override public final Object createNullToken(final String token,final int startPos){   return new AnalyzedGermanTokenReadings(new AnalyzedGermanToken(token,null,startPos)); } 
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
-1
new InfoData(awayMsg,null,MY_CAPS,null)
mKey.equals(other.mKey)
i.getTouchIconUrl() != null
/**   * Constrains search results to only match those which also match a provided query.  Results are cached, so that searches after the first on the same index using this filter are much faster.  * @version $Id$  * @deprecated use a CachingWrapperFilter with QueryWrapperFilter  */ public class QueryFilter extends QueryWrapperFilter {   /**   * Constructs a filter which only matches documents matching <code>query</code>.  */   public QueryFilter(  Query query){     super(query);   }   public boolean equals(  Object o){     return super.equals((QueryFilter)o);   }   public int hashCode(){     return super.hashCode() ^ 0x923F64B9;   } } 
new ClusterStateUpdateResponse(true)
await().atMost(1,TimeUnit.SECONDS)
mGpsListener != null
builder.timeValueField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
selenium.isVisible("link=Control Panel")
getStub()
openSession.close()
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,false,false,factory)
data.getBytes()
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
new StreamError(sm.getString("http2Parser.processFrame.unexpectedType",expected,frameType),Http2Error.PROTOCOL_ERROR,streamId)
partialUri.toString()
ItemAdapter<ExpandableItem>
Simple.of(Tuple.class)
matcher.matches()
"cache." + name + ".size"
out.write(this.connectionAddress.getPort())
pv.setBackground(getResources().getDrawable(R.drawable.list_bg_selector))
myChild2.getElementType() == ElementType.BLOCK_STATEMENT
new IllegalStateException(ex)
ticks / ticksInGap
dfa == null
resources.size() <= maxSuspendResource.get()
mContext.checkCallingOrSelfPermission(PERMISSION)
getProperties().requestCachingEnabled()
Thread.sleep(5000)
ITERATIONS=100
isAssignableFrom(supertypeName,iface,cl)
mReadOwners != null
JsonNode::isLong
@SuppressWarnings("MethodDoesntCallSuperMethod") @Override public Text clone(){   CDATA text=new CDATA();   text.value=value;   return text; } 
LOG.info("Cannot get the live nodes: {}",e.getMessage())
remainingAmount != null
DEFAULT_VERIFY_ENABLE=true
mNetd.setDnsServersForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
ruleContext.ruleError("Xcode version must be specified to use an Apple CROSSTOOL")
createMessageConsumer(session,destinationName,messageSelector,false,null,true)
logger.error("An exception occurred while formatting a date",e)
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
XMLInputFactory.newFactory()
addProperty(prop,false)
Response.ok()
listener.wait()
test("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
selenium.isVisible("link=Control Panel")
new StrictModeViolationDialog(mContext,ActivityManagerService.this,res,proc)
maxLevel < levelFloor
final LongAdder execCnt=new LongAdder(); 
@NotNull T owner
resolver.stop()
IllegalAccessError.class
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
mGpsListener != null
rt == Boolean.TYPE
statusBar.layout()
peekServiceForUserLocked(userId)
classFilter.contains(classID)
method.invoke(node,null)
public Integer getId(){   return id; } 
FileDataStorageManager.triggerMediaScan(file.getStoragePath())
editorFactory.create(getTerminal())
fraction * (nextValue - prevValue)
comp.requestFocus()
DBUtils.removeDownloadLabel(info.galleryBase.gid)
this == group.mInternalConnection
selenium.isVisible("link=Control Panel")
TelephonyManager.getDefault().getPhoneType()
this.recyclerView.setNestedScrollingEnabled(true)
fLines.add(st.nextToken())
RouteInfo r; 
ExceptionUtils.handleThrowable(t)
element == null
SingleMapBlockWriter.class
Utils.writeFile(outputDirectory,getFileName(cls),xsb.toXML())
mBarChart.addTiming(section,4,parseResult.runDuration / 1000f)
assertFalse(Modifier.isFinal(modifiers))
position - dockDividerWidth
HashMap<CommandSender,String>
new LinkedFileViewModel(linkedFile,entry,databaseContext,taskExecutor,dialogService)
message.containsKey(Message.REQUESTOR_ROLE)
mode != null
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
Ddeml.INSTANCE.DdeUnaccessData(hData)
IOException e
getService().hasPrimaryClip()
performDexOpt(pkg.packageName,null,false,causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT,false)
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).otherwiseIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
nodes.hasLabel(barLabel)
selenium.isVisible("link=Control Panel")
EntityMapper.class
myDetailsPane.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
mContext.sendBroadcast(intent)
checkPojoMetaClass()
query.getSliceEnd()
id=15847
new ProgressDialog(this)
Collection<GridDrStateTransfer>
focusable.canTakeAccessibilityFocusFromHover()
cluster.shutdown()
target.getUri()
packageMatch[0]
this.mChildScene == null && !this.mChildSceneModalUpdate
iq.elements()
parsedResult.getSqlType()
ref_val.startsWith("HTTP error 403")
testCase.mVariationSelectors.contains(vs)
CharSequence message
selenium.isVisible("link=Control Panel")
mSelectResponse != null & mSelectResponse.length > 0
i < 100
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
r.getRequest()
LensPositionSelectors.external()
/**   * Returns a duplicate of this resource record.  */ @Override public ByteBufHolder duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } 
cached.get(columnNames)
selenium.isVisible("link=Control Panel")
name == null
mContext.sendStickyBroadcast(mStorageFullIntent)
frame.addWindowFocusListener(myIdeFrameFocusListener)
!isClosureRBrace(element)
selenium.isVisible("link=Control Panel")
super.onResolveLayoutDirection(layoutDirection)
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
mSyncStatus.get(i)
logger.warn("Cannot play URI ({})",e.getMessage())
sub.emit(dataBuffer)
connection.setFollowRedirects(httpRequest.getFollowRedirects())
Slog.e(TAG,"Unable to bind ActivityRecognitionProxy.")
value.isEmpty()
typeSettingsProperties.toString()
mResourceData[i] != null
end == 0
layout.setVisibility(View.VISIBLE)
state.getTypes().isCastable(argType,jUnit4ClassRunnerType)
(int)timeoutMs * 1000
nodes.setInt(edgePointer + E_ADDITIONAL,value)
logger.info("license [{}] - valid",license.uid())
WordPress.getCurrentBlog().getRemoteBlogId()
pathParts[1] != null
result.getReceipt().getEnergyTotal()
selenium.isVisible("link=Control Panel")
context.formatSeparator()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
new IllegalStateException()
provider.findValueSerializer(delegateType)
display.equals(taskRect)
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
materialScrollBar.setIndicator(new CustomIndicator(this),true)
ColorResources.getColor("controlDarkShadow")
accountPermissionUpdateContract.getPermissionsCount() == 2
ethFilter.getError()
ConfigPropertyVetoExceoption ex
baseCodeAddress != 0
DefaultFileSystemMaster.class
jobsLogs.jobsLogGetter()
new LinkedHashMap<>()
mapCopy.getAbsolutePath()
Log.wtf(TAG,"Found activity " + r + " in proc activity list using "+ r.app+ " instead of expected "+ app)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
PetiteReference[]
XmppStringUtils.parseBareAddress(key)
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
recipient.getName()
displayList != null
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class)
INSTANCE.rand(shape)
StaticOuterContextServiceFetcher.this
_log.error(sb.toString())
getJSDocTypeWithBraces(cm,var)
mSharedElementNames.size()
this.getDependencies()
allOf(withId(R.id.fab_expand_menu_button),withParent(withId(R.id.fab)),isDisplayed())
outLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
Assert.assertEquals(3,results.size())
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).mapError(this::mapError)
JiveGlobals.getPropertyEncryptor().encrypt(propValue)
createFromResourceStream(res,value,is,srcName)
format.getId()
public void runMayThrow() throws IOException {   if (Schema.instance.getKSMetaData(mutation.getKeyspaceName()) == null)   return;   if (clr.pointInTimeExceeded(mutation))   return;   final Keyspace keyspace=Keyspace.open(mutation.getKeyspaceName());   Mutation newMutation=null;   for (  PartitionUpdate update : clr.replayFilter.filter(mutation)) {     if (Schema.instance.getCF(update.metadata().cfId) == null)     continue;     ReplayPosition rp=clr.cfPositions.get(update.metadata().cfId);     if (segmentId > rp.segment || (segmentId == rp.segment && entryLocation > rp.position)) {       if (newMutation == null)       newMutation=new Mutation(mutation.getKeyspaceName(),mutation.key());       newMutation.add(update);       clr.replayedCount.incrementAndGet();     }   }   if (newMutation != null) {     assert !newMutation.isEmpty();     Uninterruptibles.getUninterruptibly(Keyspace.open(newMutation.getKeyspaceName()).applyFromCommitLog(newMutation));     clr.keyspacesRecovered.add(keyspace);   } } 
mHandler.postDelayed(pae,timeout)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
((RecursiveTreeObject<?>)parent.getValue()).getGroupedColumn() != null
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
this.targetValidator.validateValue(beanType,propertyName,groups)
db.createHashMap("cache")
paintInnerCircle.setColor(0xddFFFFFF)
command.getId()
X_MIN_VELOCITY
dist > maxDist
final String subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo).toString(); 
expected=536871104
diskThresholdSettings.getFreeDiskThresholdHigh()
GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))
fb.capacity()
Integer.valueOf(stackIdStr)
serialNumber.equals(null)
a.getInteger(R.styleable.MaterialCalendarView_mcv_selectionMode,SELECTION_MODE_NONE)
resultEndpoint.expectedBodiesReceived("one","two","three")
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
LOG.isTraceEnabled()
"User with email address " + emailAddress + " does not exist for company "+ company
case 12: 
operation.get(ROLLBACK_ON_RUNTIME_FAILURE)
file.toString()
entry.notification.clone()
new Paint(Paint.ANTI_ALIAS_FLAG)
mediaVideoItem.getHeight() * 2
mWidth - glowWidth
new RagManager(tm)
new ConnectionError(sm.getString("http2Parser.processFrameContinuation.notExpected",connectionId,Integer.toString(streamId)),Http2Error.PROTOCOL_ERROR)
conf.getInt("fuzz")
Integer.valueOf(rightStr)
filePath == null
_freemarkerEngineConfiguration.getResourceModificationCheck()
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
SVID_SHIFT_WIDTH=7
mGpsListener != null
(NoteDrawerTagAdapterViewHolder)convertView.getTag()
this.getCallerAddress()
return this; 
msg.getText()
bs.max() < 32
dot != -1
mNwService.getInterfaceConfig(mInterfaceName)
mService.saveConfiguration()
this.httpHeaderNames.put(KEYCLOAK_SUBJECT,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
selenium.isVisible("link=Control Panel")
endpoint.keepAliveTimeoutSeconds()
new Error("expected ], got " + currentToken + " syntax:"+ syntax)
isMarked(node)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
new IllegalStateException()
sortedModules.stream()
forceRegister=false
return true; 
graph.add(new OSRLocalNode(i,proxy.stamp().unrestricted()))
U.resolveWorkDirectory("marshaller",false)
59L + 118L
list.isEmpty()
new AlertDialog.Builder(getActivity())
Thread.sleep(1000)
shuffleWithInexistingUuids(project2.uuid(),project1.uuid())
project.getSourceDirs()
new Thread(_segmentNameStr)
destinationName == null
Assert.state(!initialized)
hasProperty("key3").withValue(5678)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
util.getDataTestDir(table)
touchEventPool.free(touchEvents)
settings.readLPw(null)
currentScreen == SCREEN_WINDOW_FULLSCREEN
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
dao.merge((WidgetLayoutEntity)anyObject())
DefaultAsyncHttpClientConfig.class
settings.readLPw(null)
bloomHighPassThreshold=0.75f
clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
!result.asked && usage && PrivacyManager.isApplication(restriction.uid)
methodExists(methodName,fieldNode)
iter.next().getDoubleValue() > 0.0
mContext.startActivity(cantAddAccount)
nativeSetFlags(mNativeObject,sc.mNativeObject,0,OPAQUE)
selenium.isVisible("link=Control Panel")
HashMap<String,HashMap<String,ASTNode>>
upd != null
return mChangingDisappearingDuration; 
mDataSetObserver != null
c < '9'
stagingTypeSettingsProperties.toString()
queryDBObjects(ObjectType.SCALAR_FUNCTION,ObjectType.CLR_SCALAR_FUNCTION,ObjectType.CLR_TABLE_VALUED_FUNCTION,ObjectType.TABLE_VALUED_FUNCTION,ObjectType.STORED_PROCEDURE,ObjectType.CLR_STORED_PROCEDURE,ObjectType.USER_TABLE,ObjectType.SYNONYM,ObjectType.SEQUENCE_OBJECT,ObjectType.FOREIGN_KEY,ObjectType.VIEW)
c == wordDelimiter[0]
dynamicType.getConstructor()
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
instance.criterion.sql.replaceAll("?",instance.criterion.entryValues[instance.selectedIndex])
query.assignees().toArray(new String[0])
heightSize == MeasureSpec.UNSPECIFIED
StringUtils.isBlank(service.getId())
addViewInLayout(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
@Nullable @Override public Object getCurrentScheme(){   return null; } 
return topicName; 
sqlRouteResult.getSqlParsedResult().getSqlType()
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
mPulseCallback.onPulseFinished()
DEBUG_FOCUS=true
modelName + "." + signatureEntry.getKey()
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase
LibraryTableEditor.editLibraryTable(getGlobalLibrariesProvider())
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0
headers.size() == 1
mHorizontals == null
Value emitAddress(StackSlotValue slot); 
@Nullable final Exception lastException
!isUDTF && child.getChildCount() > 2
Log_OC.wtf(TAG,"Server check tried with OperationService unbound!")
StringBuffer buffer=new StringBuffer(); 
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,numSubtasks,subtaskIndex)
data != null
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
scan.getResults()
new MediaController(token)
/**   * Replace a tree node with a string, but adjust the start and end positions as well. For example, if the tree node begins at index 10 and ends at index 30, this call will replace the characters at index 15 through 25 with "replacement": <pre> {@code fix.replace(node, "replacement", 5, -5)}</pre>  * @param node The tree node to replace  * @param replaceWith The string to replace with  * @param startPosAdjustment The adjustment to add to the start position (negative is OK)  * @param endPosAdjustment The adjustment to add to the end position (negative is OK)  */ public static Fix replace(Tree node,String replaceWith,int startPosAdjustment,int endPosAdjustment){   return builder().replace(node,replaceWith,startPosAdjustment,endPosAdjustment).build(); } 
nextRequest(request,future)
1 << 20
mockResultSet.getDouble(1)
layoutSetPersistence.update(publicLayoutSet,false)
mListener.onInputUpdated(inputId)
Exception e
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
target.getDestination()
accountHandle.getComponentName().toString()
ScanResult.is24GHz(frequency)
mBackdrop.animate().alpha(0f)
id=4
new String[nrKeys2]
selenium.isVisible("link=Control Panel")
jmsTemplate.setPubSubDomain(false)
this.klass.isPrimitive()
headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(),entry.getValue(),camelExchange)
Map<String,RPromise<? extends RRemoteServiceResponse>>
manager != null
is(2)
StringUtils.isNotBlank(cert)
FastMath.max(origin,num.doubleValue())
if (dockOntopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
runOTIafterNTI=false
debugRunner.createCommandLinePatchers(state,configuration,PORT)
mGpsListener != null
Locale.getDefault().toString()
selenium.isVisible("link=Control Panel")
scrollWebElementIntoView(webDriver,webElement)
node == null
tag.getObjectId()
smppClient.reconnect()
XmppStringUtils.parseBareAddress(connection.getUser())
UserException.resourceError().message("Unable to acquire queue resources for query within timeout.  Timeout for %s queue was set at %d seconds.",queueTimeout / 1000,queueName)
30 * 60 * 1000
LOG.error(e)
case CHILD: 
mService.mDisplayContents.get(displayNdx)
user.getDisplayName()
TestUtil.nextInt(random(),0,3)
UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()
targetActor.addListener(listener)
WordPress.getCurrentBlog().getRemoteBlogId()
mActivity.getFragmentManager()
Thread.sleep(100)
_log.error(ioe,ioe)
is(400)
client.getGameState() != GameState.LOGGED_IN
realm.assertThread()
@Override public Content detach(){   throw ImmutableElement.immutableError(this); } 
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",true))
tabAlias.equals(tableAlias)
sendMessage(CMD_STOP_AP)
@Internal
appName != null
id=15840
List<String>
new ObjectMapper().reader(DiskBalancerCluster.class)
ourSupportDifferentFileTypes=false
CxfEndpointBean.class
values[i] == values
AbstractMethodError e
ImmutableList.of(modules)
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
column.createColumnObserver()
return 7; 
mMat[9]
upd != null
JBUI.insetsLeft(4)
getDelegate().getSupportedCipherSuites()
buffer == null
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
meta.getDynamicSearchFieldName()
enabled.getProtocols()
node_type == MatchNode.MATCHNODE_STATEMENT
values.putNull(Document.COLUMN_ICON)
mBoundServices.isEmpty()
JBUI.Borders.empty(10,10,0,10)
analysis.getType(aggregate)
network.successors(producedNode)
new PropertyDescriptor.Builder().name("Return Type").description("Indicates the desired return type of the JSON Path expressions.  Selecting 'auto-detect' will set the return type to 'json' for a Destination of 'flowfile-content', and 'string' for a Destination of 'flowfile-attribute'.").required(true).allowableValues(RETURN_TYPE_AUTO,RETURN_TYPE_AUTO,RETURN_TYPE_STRING)
setStacked(true,true)
hotRestartState != null
log.isWarnEnabled()
ENABLE_SQLITE_LOG=true
t.run()
ltype == Analyzer.self.builtins.BaseStr || rtype == Analyzer.self.builtins.BaseStr
Object executable
removedTerrains.remove(tq)
stall_till_cloudsize(1)
primaryGroupHasEventMessageTrackFlags[i]
getTelecomService().silenceRinger()
packaging.equals("jar")
current > 0
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,6)
PsiTreeUtil.isAncestor(elsePart,e,true)
(CheckBoxPreference)mPrefInstantUpload
ACTIVE_NOTIFICATIONS_MAP.values()
VERBOSE=true
fraction * (nextValue - prevValue)
final SimulatedTrackball mSimulatedTrackball; 
rowKeyColumnIO.writeColumnWith(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
this.errorLogger.error(message)
IBackupManagerService svc=mService; 
RevisionVersion=2
ViolationTrackingBlocksRecognizer rec=new ViolationTrackingBlocksRecognizer(hashedReference,hashedSource,hashedComparator); 
col2d.addiRowVector(epsilon1d)
context.getSystemService(Context.WINDOW_SERVICE)
resolver.acquireContentProviderClient(uri)
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
value.equals("strict")
focusedTopActivity != null
this.nameDefinitionMultimap.remove(name,node)
nextInt(random,0x80,0x800)
mGsmPhone.mSST.isConcurrentVoiceAndData()
connection().createPacketCollectorAndSend(ping).nextResultOrThrow()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0
PropertiesComponent.getInstance().getBoolean(getAutoUpdateEnabledProperty())
getLogger().info("Checking " + model.getId() + " for extensions.")
activeFrom.getTime()
assertEquals(1,triggers.size())
realPointerIndex > AndroidInput.NUM_TOUCHES
ConfigPropertyVetoExceoption ex
previousDataInputs == null
DefaultCacheKeysFactory.getNaturalIdValues(cacheKey)
row - 0.25f
this == group.mInternalConnection
logger.warn("Radio station '{}' not found",station)
SystemClock.nanoTime()
Localization.lang("Edit")
options.addOption("i",IGNORE_NODES_OPTION,"don't stream to this (comma separated) list of nodes")
loaded.getLoaded().getConstructor()
sTestCaseCounter == 1
LOG.debug("EOL(end-of-line) defined for the CSV: {}",crlf)
callbackList.getRegisteredCallbackCookie(i)
line.contains(StringPool.EQUAL)
estimatedLength < 8
Log_OC.e(TAG,"onPause() start")
!url.startsWith("file") && !JCUtils.isWifiConnected(getContext()) && !WIFI_TIP_DIALOG_SHOWED
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
assertMockEndpointsSatisifed()
dir.exists()
Log.d(TAG,"We have a callback to send this result to")
new Paint()
new Handler(){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
account.getExternalKey()
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
BeanPropertiesUtil.getObject(model,_keyProperty)
22 * ClassSize.REFERENCE
PRAYER_ENHANCE("prayerenhance","Prayer enhance",290,ChronoUnit.SECONDS)
dateOfBirth == null
Integer.class
IndexReader reader=IndexReader.open(dir); 
m.getClass()
CythonLanguageDialect._isDisabledFor(node)
new IllegalArgumentException("Tag " + tagName + " not found. ")
fileChooser.setSelectedFile(defaultSelection)
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
mFocusStack.remove(fse)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new Paint(Paint.ANTI_ALIAS_FLAG)
module != null
ObjectAnimator.ofFloat(target,ALPHA,VISIBLE)
conferenceState.appendChild(users)
mService.disableEphemeralNetwork(SSID)
getValue(activity.getExtraData(),"title",kbArticle.getTitle())
onDetachedFromWindow()
tableHasColumn("Calendar","timeZoneId")
GL20.glGetUniform(program,location,params)
Long.valueOf(value)
selenium.isVisible("link=Control Panel")
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
child.resetResolvedLayoutDirection()
mScanHelper.getCycledScanner() == null
selenium.isVisible("link=Control Panel")
standalone
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
new IndexWriter(indexDir,analyzer,create)
i=1
left + height
host.getHostText()
Integer requestRequiredAcks
imeWin.getDisplayFrameLw()
ifcg.addr == null
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDw,unrotDh)
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
invalidate()
EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT)
handleException(exception)
mSharedElementNames.size()
SCAN_STATUS_PARTIAL=0
bindingConfig != null
event.getTimestamp() - lastPauseTimeStamp > 0
logger.debug("Requsting URL {}",url)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
!page.isApproved() && !page.isDraft() && !page.isPending()&& !page.isInTrash()&& (page.getVersion() != WikiPageConstants.VERSION_DEFAULT)
mAttributes.getFlags()
version.toString()
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP)
logger.warn(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
DataStream<OUT>
mSupportsSpeed ? 1 : 0
id=16
new StreamWriterExecOutputHandle(outputStream)
LOG.error("Couldn't delete {} - does not exist",f)
currentTx.preConcatenate(matrixTx)
mMncStr == null
stringEntry.getKey()
future.get(200,TimeUnit.MILLISECONDS)
assertEquals(expectedPlan,actualPlan)
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"))
hz1.getLifecycleService().terminate()
case 3: 
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
mActiveAgents.remove(info)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Throwable e
mVectorState == null && mVectorState.mVPathRenderer == null
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
UserHandle.getCallingUserId()
ModuleReflectionUtils::isCheckstyleCheck
checkManageUsersPermission("getting profiles related to user " + userId)
Long.valueOf(args[2])
MaterialListPreference p=((MaterialListPreference)ui.findPreference(UserPreferences.PREF_MEDIA_PLAYER)); 
model.getVisibleColumn(cell.col)
VDBG=true
new RedissonSession(id)
(exception ? throwable instanceof RuntimeException : throwable == null)
wifiConfig.isValid()
(File)sendApiMethod(sendLocation)
ColorResources.getColor("controlShadow")
new ObjectMapper().reader(defaultInstance().constructCollectionType(List.class,DiskBalancerWorkEntry.class))
Thread.sleep(5000)
mappers.mapper().searchAnalyzer()
mHandler.postDelayed(pae,timeout)
memoryOnly
selectedPageLabel_.setAttribute("selected","selected")
modObjectTable == null
notifyItemRemoved(flatPosition)
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
spanEvent.getNextSpanId() == -1
applicationStatistics.incrUpdateUserTimes()
Arrays.asList(manageSelectors,mergeDatabaseAction,newSubDatabaseAction,close,save,saveAs,saveSelectedAs,undo,redo,cut,delete,copy,paste,mark,unmark,unmarkAll,editEntry,selectAll,copyKey,copyCiteKey,copyKeyAndTitle,editPreamble,editStrings,toggleGroups,toggleSearch,makeKeyAction,normalSearch,incrementalSearch,replaceAll,importMenu,exportMenu,openPdf,openUrl,openFolder,openFile,openSpires,togglePreview,dupliCheck,highlightAll,highlightAny,newEntryAction,plainTextImport,massSetField,manageKeywords,closeDatabaseAction,switchPreview,integrityCheckAction,autoSetPdf,autoSetPs,toggleHighlightAny,toggleHighlightAll,databaseProperties,abbreviateIso,abbreviateMedline,unabbreviate,exportAll,exportSelected,importCurrent,saveAll,dbConnect,dbExport,focusTable)
/**   * The package controller for the current file. Used for performance optimisation.  */ private PkgControl currentLeaf; 
props.contains("log.adapter")
onBackPressed()
mSrc.getParent()
@Override public DBSObjectContainer getContainer(){   return container; } 
put.writeToWAL()
selenium.isVisible("link=Control Panel")
constants.size() != 0
selenium.isVisible("link=Control Panel")
UserHandle.getCallingUserId()
ref.getAssociatedEntity()
consumer.endpoint.isAutoAck()
ModelVersion.create(3,0,0)
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0l
region == null
note == null
event.isHidden()
logger.warn("condition not met, returning existing state")
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
editor.offsetToVisualPosition(mySelectionStarts[i])
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
sslConfig.getBoolean(CONFIG_OF_ENABLE_SERVER_VERIFICATION)
mHotspotBounds.set(left,top,bottom,right)
selenium.isVisible("link=Control Panel")
Metric<Long>
getDelegate().getSupportedCipherSuites()
mSharedElementNames.size()
createRandomPk()
" firstActiveTime=" + lastActiveTime
onCreateView(mContext,appWidgetId,appWidget)
mInner.end()
selenium.isVisible("link=Control Panel")
message.isIssueAsynchronousCallbacks()
Calendar.getInstance(TimeZone.getTimeZone("UTC"))
getLogger().info("Building MavenProject instance: " + mavenProject)
audio_st.metadata() != null
REQUIRED_FREE_SPACE=10_0000_0000L
Optional.of(privateKeyFile)
order=2
type.getConstructor()
mMat[9]
mono.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
new Random(System.currentTimeMillis())
size < MAX_SEQ_LENGTH
InputProcessor[]
@NonNull
AbstractMethodError e
fileFactory.createFileFromText(HTMLLanguage.INSTANCE,xmlFile.getText())
MessageNotifier.updateNotification(context,null)
tracesFile.mkdirs()
mncStr.isEmpty()
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
osmandSettings.setUsingMapVectorData(true)
JBUI.Borders.empty()
AppLog.e(T.EDITOR,cm.message() + " -- From line " + cm.lineNumber()+ " of "+ cm.sourceId())
outLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
fetchSize > 0
t.getValue()
Double rate
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
serverService.getIncomingInterceptors()
bucketerContext.update(context.timestamp(),currentProcessingTime,context.currentWatermark())
WeDeployDataPlugin.class
AndroidInstrumentationInfoProvider instrumentationProvider=instrumentation.get(AndroidInstrumentationInfoProvider.ANDROID_INSTRUMENTATION_INFO); 
schemeSpecificParts != null
currencyPair.counter.getCurrencyCode().toString()
indexSettings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
Internal.getSaltBytes(salt_bucket)
new RuntimeException("commandName invalid for classCommandName: " + classCommandName)
index < 0 && index >= size
mSyncStatus.get(i)
activityType == ACTIVITY_TYPE_HOME
new File(value).getPath()
info.isConnected() == true
suiteXmlBuilder.getMetaClass().invokeMissingMethod(suiteXmlBuilder,name,null)
_buildTemplateWithGradle("api","api-dependency-management","--dependency-management-enabled","true")
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
lp.onResolveLayoutDirection(layoutDirection)
responseString(p)
incomingMessage.getMessagePayloadByte(0)
logger.trace("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
mDisplay.getMetrics(mDisplayMetrics)
revalidate()
factory.getEmbdeddedServletContainer()
new MockProjectEx()
selenium.isVisible("link=Control Panel")
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
LOG.warn("clear parameter error",ex)
!mIsRecentsShown || !mIsPipFocusedInRecent
measureRun(0,0,target,mLen,true,fmi)
name.length() > 0
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
FluentIterable.of(method.getAnnotations())
getPlayerPosition().z
origin.realComponent().doubleValue() >= other
selenium.isVisible("link=Control Panel")
DEBUG=true
telephony.getCdmaEriIconModeForSubscriber(subId)
_connector.getResponses("GET /foo?data=102400 HTTP/1.0\n\n")
sExecutorService.shutdown()
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
handler.waitFor()
loaded.getLoaded().getConstructor()
exported
" firstActiveTime=" + lastActiveTime
backgroundOut.getDouble(i)
thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_THING_TYPE)
selenium.isVisible("link=Control Panel")
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ)
CodeStyleManager.getInstance(myProject).reformatTextWithContext(file,ranges)
ONE_MINUS_DST_ALPA(7)
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
telephony.getCdmaEriIconModeForSubscriber(subId)
selenium.isVisible("link=Control Panel")
testNonexistentJarReferences(_netBeansJars,_NETBEANS_XML_FILE_NAME)
new UnsupportedOperationException()
message.getCounterpart().split("/")
varX("listener")
tryUsingRI(m)
selenium.isVisible("link=Control Panel")
ESLoggerFactory.getLogger(component,entry.getValue())
checkPojoMetaClass()
InputType.recurrent(convNIn)
CacheData<Simple>
filesToDownload.size() < 1
MAX_ITEMS=50
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
!calculatePositionAndValue(x,y)
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which))
myJdkChooser.updateList(selectedJdk,null)
isFinishing()
log.warn("Testing warn(msg,null)",null)
canTakeAccessibilityFocusFromHover()
mucUser.getInvite() != null
formatTime(scanWifiLockOnTime / 1000)
bounds.width()
1 << 6
200 * 1000
newScan.verifyColumns()
"xml".equals(prefix)
statusBar.layout()
close.assertSubscribers()
authHeaders.size() != 1
intent.setData(uri)
cursor.getCount() == 0
frag.element("status")
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
selenium.isVisible("link=Control Panel")
loaded.getLoaded().getConstructor()
parser.parse(GroovyElementTypes.GROOVY_FILE,builder)
LOG.warn("{} {}",_request.getRequestURI(),failure)
smsHeader.portAddrs != null
FUNCTION4=13
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING)
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ Cell deepClone(); 
packFileName.substring(packFileName.length() - settings.atlasExtension.length())
UNSIGNED_BYTE_MAX_VALUE=256
i.getIntExtra(Constants.INTENT_KEY,0)
Math.sin(Math.PI / 8)
assertEvaluate(buildFile).lookup("txts")
logger.debug("Invalid Account Credentials")
authenticator.executeCommandAndAuthenticateIfNecessary(myProject,myRepo,myDestination,"push",arguments)
node1.checkTreeTypeAwareEqualsSilent(node2)
!QueryUtils.isEnabled(ctx.config()) && !(qry instanceof ScanQuery) && !(qry instanceof ContinuousQuery)&& !(qry instanceof SpiQuery)
SHUTDOWN_VIBRATE_MS > 0
end == 0
len != 4
Futures.transformAsync(attemptTwoLevelStore(info,output),input -> {   if (input) {     return Futures.immediateFuture(null);   }   return delegate.store(info,output); } )
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new PruneUnreferencedOutputs())
isDevBuild()
LOGGER.debug("Error during file import",e3)
super.getLikeProvider(path)
new Paint(Paint.ANTI_ALIAS_FLAG)
mPowerManager.isScreenOn()
Event.PREFIX_TEMP + n
temporaryFolder.getRoot()
loaded.getLoaded().getConstructor()
mImm.getInputMethodList()
StringBuffer argBuf
typeLength == 0
mDataSetObserver != null
states.length == 3
AbstractMethodError e
notebook.createNote()
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
Locale.getDefault().toString()
new ZLNetworkRequest(url){   @Override public void handleStream(  InputStream inputStream,  int length) throws IOException, ZLNetworkException {     new OpenSearchXMLReader(getURL(),descriptions).read(inputStream);   } } 
mService.setUidPolicy(UID_A,POLICY_NONE)
parser.getBoolean(KEY_SEND_TRON_LOG,true)
!thingGroupItem.getLabel().equals(label)
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
probeParentLoaderLast=true
query.getSliceEnd()
ddmStructureLocalService.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
tmpHopp.getGraph()
from >= to
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
mHandler == null
metadata.getColumnName(columnNumber)
Thread.sleep(1000)
selenium.isVisible("link=Control Panel")
procs.getBoolean("NULLABLE")
isPlaybackActive(false)
popupWindow.setWidth(menuWidth)
getNonCompilablePath("InputGenericWhitespaceEndsTheLine.java")
return false; 
terms.facetFilter(standardFilters(range,filter))
selenium.isVisible("link=Control Panel")
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
myConfiguration.copy()
PositiveIntegerValidator.class
mConnector.execute("volume","format",vol.id)
new IllegalStateException()
annotations == null
dest.writeParcelableArray(remoteInputs,flags)
myNameField.getComponent()
!list.append(ai)
!sameActivity
new DroolsParserException(e.getCause())
mask.isColumnVector()
popup.requestFocus()
jscx.initStandardObjects(null)
telephony.getCdmaEriIconIndexForSubscriber(subId)
rsMaxRows > 0
measureRun(0,0,target,mLen,true,fmi)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
Error err
arg1 > arg1
assertEquals(write.getCodec().toString(),CodecFactory.deflateCodec(6).toString())
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
psiPackage.getDirectories()
Thread.sleep(5000)
dynamicType.getConstructor()
Character.toLowerCase(ch)
mContext.getString(R.string.branded_monitoring_description_app_personal)
assertEquals(6,beanCount)
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
_closed=false
viewOutlineAlpha=0f
new AgentTemplate(parent,true)
SystemClock.nanoTime()
new FeatureItem(R.drawable.whats_new_device_credentials,R.string.whats_new_device_credentials_title,R.string.whats_new_device_credentials_content,VERSION_3_2_0,BETA_VERSION_0,SHOW_ON_UPGRADE,false,false)
GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)
ClassNotFoundException e
bicycleNotDefinedValues.put("bridleway",5d)
nodeInfo.getPlugins().getInfos()
public static TitledBorder createTitledBorderBoldWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),18,1,new Insets(5,0,10,0)); } 
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
getNewValue()
MongoConnection.getInstance().connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false")
info == null
fields != null
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
stagingTypeSettingsProperties.toString()
new NameAlias(tableNameAlias)
Trans == TRANSPOSE
comparator.compare(value,answer) > 0
from >= to
(1.0f - rawLightValueSun) * 16.0f
mContext.sendBroadcast(intent)
pathname.getAbsolutePath()
selenium.isVisible("link=Control Panel")
mContext.sendStickyBroadcast(mStorageLowIntent)
buildData.getUserContentRelativePath()
(aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
destination.length + offset
@Override public void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityError {   Preconditions.checkNotNull(query);   queueLock.lock();   String groupName=groupSelector.getSchedulerGroupName(query);   try {     SchedulerGroup groupContext=getOrCreateGroupContext(groupName);     checkGroupHasCapacity(groupContext);     query.setSchedulerGroupContext(groupContext);     groupContext.addLast(query);     queryReaderCondition.signal();   }   finally {     queueLock.unlock();   } } 
600 * 1000
T msgObj=messageClass.newInstance(); 
r != null
topNProjector.doFinish()
Debug.log(msg,args)
new RuntimeException("Could not create keystore: " + e.getMessage(),e)
shadowSize == 0
mEditor.startSelectionActionModeAsync()
TArrays()
getBinaryTupledSet()
canvas.clipPath(mRenderPath,Region.Op.REPLACE)
Mutation rm=new Mutation(KEYSPACE1,dk.getKey(),cf); 
performDexOpt(packageName,instructionSet,true)
applicationContext.destroy()
selenium.isVisible("link=Control Panel")
Locale.getDefault().toString()
transform.getValue().getScaleX() != 0f
resolver.acquireContentProviderClient(uri)
oconf.getJSONObject("lapse").getInt("mult")
data.length < columnCount
isStringFieldType(value,adminPresentation)
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,401)
i < size
PhoneNumberUtils.isISODigit(number.charAt(i))
handshake.getProcolVersion()
DLFolderLocalServiceUtil.deleteFolder(parentFolder.getFolderId())
Long.valueOf(args[2])
binary.size()
DBCException e
mMncStr == null
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallback(new MetricCB())
javamelodyVersion.compareTo(Parameters.JAVAMELODY_VERSION) < 0
abstract protected T createDeployTask(File pomFile,LocalMavenRepositoryLocator mavenRepositoryLocator,MavenArtifactRepository artifactRepository); 
Files.delete(file.toPath())
row("p_comment",null,1.0,0.0,null,null,null)
new ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)
isVideoScalingModeSupported(mode)
previousPhase != null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
(arg & (EventDistributor.DOWNLOAD_QUEUED)) != 0
Ports.Binding("0.0.0.0",11023)
mValues[7]
Long.valueOf(timeString)
selectedPos < lastPos
ItemDumper dumper=new ItemDumper(cache,out,java); 
"Flow " + flowName + " cannot be found in project "+ project
Long.valueOf(attrValue)
selenium.isVisible("link=Control Panel")
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
2 << 16
8 * Constants.MB
ps == null
Assert.assertEquals(2,results.size())
spellParser.isFinished()
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMilis(request.getStartTime())
mAuthorities.get(i)
selenium.isVisible("link=Control Panel")
getActiveFgCall().getPhone().sendDtmf(c)
searchHit.getImageUrl()
mPlayer.getCurrentPosition() * 1000
delegate.getBooleanValue("java","skip_checking_missing_deps",false)
treeView.group(deptColumn,ageColumn)
mergeConfigs(res,s -> ConfigFactory.parseFile(new File(s)))
SystemProperties.getInstance().getJavaIoTmpDir()
modulePath.split(File.pathSeparator)[1]
jp.getFloatValue()
executeMethodAndCovertExceptions(httpPost)
!shouldCreateOut()
!wasRead
SCAN_STATUS_COMPLETE=1
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
height - 48
assertEquals(10,stages.size())
maxEntityId > maxSequenceId
selenium.isVisible("link=Control Panel")
response.header("location")
/**   * Pull transitive native deps in as fully linked standalone shared libraries.  This is typically the fastest build-time link strategy, as it requires no top-level context and therefore can shared build artifacts with all other binaries using this strategy.  */ SPEARATE
mEditor.startSelectionActionModeAsync()
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
laneOptions[j].equals("slight_left")
player.isAuthorized("essentials.world." + user.getWorld().getName())
file == null
!commandSent.get() && useKeepAlive
si.targetPermissionUid >= 0
clazz.getConstructor(Long.TYPE,Long.TYPE,String.class,String.class,String.class)
field.getType().getName()
deadline < now
checksum ? COMPRESS_FLAG_MASK : 0
tokens.toString()
buffer.writeBytes(content)
IColumn c
builder.setView(setupView()).setMessage(R.string.title_sync)
assertEquals(10,definitions.size())
packet.getFrom().split("/")
globalSecurityDomain != null
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isVisible("link=Control Panel")
Long.valueOf(attrValue)
lan
mForgotPatternButton.getVisibility() == View.VISIBLE
capacity > 1 << 30
new DefaultPropertyNamePatternsMatcher(delimeters,"aaa","bbbb","ccccc")
mBackdrop.animate().alpha(0f)
List<File>
PoolResources.fixed("tcp-client-pool")
lock.close()
relations.replace(oldName,newTable) != null
new RuntimeException(e)
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
logger.debug("myq ReturnCode: {}",returnCode)
name="java:jboss/datasources/ExampleDS"
@Autowired HandlingEventRepository handlingEventRepository; 
private static Object enhanceHelper(Class cls,Class[] interfaces,final Callback callback,ClassLoader loader,CallbackFilter filter){   Callbacks callbacks=new Callbacks(){     public Callback get(    int type){       return callback;     }   } ;   if (filter == null) {     filter=new SimpleFilter(CallbackUtils.determineType(callback));   }   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
mResourceData[i] != null
isVideoScalingModeSupported(mode)
featureNum=1230
LOGGER.debug("{} - Reset ({}) on connection {}",resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
_constructor.newInstance(tempFileEntry.getFileEntryId(),tempFileEntry.getFileEntryId() + 1,_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
XContentType.fromRestContentType(values[0])
new LeftTuple(f1)
CacheFactory.setMaxSizeProperty(getName(),maxLifetime)
logger.error("Timeout occured when executing commandLine '" + commandLine + "'",e)
mImm.showStatusIcon(mToken,getPackageName(),iconResId)
audioSink.toString()
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
klass.getDeclaredMethods(false,declaredMethods)
deserialze(parser,type,fieldName,null,0,null)
tl.set(mPaint,mText,start,end,dir,directions,hasTabs,tabStops)
fullCalleeURI + ": jingle supported "
_serviceMonitorAdvice.isActive()
id=15836
new GermanWordSplitter()
!async
Object edge
Foundation.NSLog("[info] " + tag + ": "+ message)
selenium.isVisible("link=Control Panel")
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
Math.max(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
player.isAuthorized("essentials.world." + user.getWorld().getName())
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR,VARCHAR.getTypeSignature().toString(),VARCHAR)
new Alarm()
tiHops.setText(STRING_CLUSTERS)
combineHostPort=false
_buildTemplateWithGradle("portlet-toolbar-contributor","contributor-dependency-management","--dependency-management-enabled","true")
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
public static final JPQLTemplates DEFAULT=new EclipseLinkTemplates(); 
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)
new ObjectMapper().reader(List.class)
_typeSettingsProperties.toString()
c.getSimpleName()
assertEquals(failures.size(),1)
getSongProgressMillis() > 2000
new IndexWriter(dir,new StandardAnalyzer(),true)
keyCode == KeyEvent.VK_ALT
coreThreads.asString()
inputRowMeta != null
tableHasColumn("KBTemplate","engineType")
DiagnosticType.error("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
new ThreadPool()
new HashMap<>(queryMemoryReservations)
message.append(getDialogMessage())
value == null
newArrayList(10)
mValues[7]
ctx != null
obj.getAcceptableTokens()
transform(matrix,source,width,height,false,recycle)
new UnlockHandler(this)
selenium.isVisible("link=Control Panel")
LOG.error("Value selected for the metric should be a number: " + context)
(EditText)findViewById(R.id.hostUrlInput)
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static JWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
CameraAccessException e
preferences.getString("cityAdminLevel","8")
XMLInputFactory::newFactory
addTexture(diffuse,"NormalMap",keyName)
clickListener_OnClickListener == null
selenium.isVisible("link=Control Panel")
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
runnable.getResult() != null
List<SourceFile>
type.getConstructor()
new Whitelist().addTags("a","b","blockquote","br","caption","cite","code","col","colgroup","dd","div","dl","dt","em","h1","h2","h3","h4","h5","h6","i","img","li","ol","p","pre","q","small","strike","strong","sub","sup","table","tbody","td","tfoot","th","thead","tr","u","ul")
getEffectiveCleartextTrafficPermitted()
RandomStringUtils.random(20)
return mDisappearingDuration; 
defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
TimeZone.getDefault().getOffset(actualTime.getTime())
defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
ServiceLoader.load(DockerCmdExecFactory.class,classPath)
new Paint(Paint.ANTI_ALIAS_FLAG)
new JCheckBox()
depthErrorXYZ("modelX")
kryo.readObjectOrNull(input,JobID.class)
MAX_PERCENT_DIFFERENCE=0.1
fingerId == 0
StaticInterceptor.class
new BlockFamilyRegistryImpl(rootContext)
Thread.sleep(200)
executeDraw()
PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,false)
id=15863
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity")
!MediaFile.isAudioFileType(fileType) && !MediaFile.isVideoFileType(fileType) && !MediaFile.isImageFileType(fileType)&& !MediaFile.isPlayListFileType(fileType)
Set<UidRange>
measureRun(0,0,target,mLen,false,fmi)
+distFromStart
BuildRule mavenCoord=new JavaLibraryBuilder(BuildTargetFactory.newInstance("//has:output"),filesystem,HashCode.fromString("aaaa")).setMavenCoords("com.example:buck:1.0").addDep(z.getBuildTarget()).build(graphBuilder); 
IllegalStateException.class
BackgroundTask.run(() -> renderPage(initialPage))
Results.ok()
srcDir != sourceRoot
referencedDomainClass.getName()
log.error(error,cause)
nextPos != mBoundPos
metadata.addWhere((Predicate)null)
MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || (name != null && name.startsWith(AopConfigration.IOCNAME))|| AopConfigration.class.isAssignableFrom(type)
newSelection >= 0
120 * 1000L
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0
portlet.getPortletId()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
XmppStringUtils.parseBareAddress(key)
Modifier.isPrivate(fn.getModifiers())
selenium.isVisible("link=Control Panel")
new AddSubscriptionCmd(destination,channelIds)
_configurationPair.getKey()
destination.delete()
mAdapter != null
from("seda:a").delayer(500)
Integer.valueOf(attrValue)
Number.class
result.getReceipt().getEnergyTotal()
display.getMetrics(dm)
telephony.getNeighboringCellInfo(mContext.getOpPackageName(),mContext.getApplicationInfo().targetSdkVersion)
realm.assertThread()
mService.saveConfiguration(mContext.getOpPackageName())
drawable != mBackgroundDrawable
new TextPaint(Paint.ANTI_ALIAS_FLAG)
kbArticle.setPriority(priority)
Double rate
case 3: 
VerboseTimeout.builder().withTimeout(120,TimeUnit.SECONDS)
ActorSDK.sharedActor().style.getTextPrimaryColor()
GL20.glGetShader(shader,pname,params)
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,port)
assertEquals(1,preIndex.get())
isNavBarVirtKey && !down
realm.assertThread()
HashMapDBSimple<byte[]>
mGesturesPopup != null
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
onDetachedFromWindow()
p + "." + M_ITERATOR
Arrays.asList(new HashSet(),new LinkedHashSet(),new TreeSet())
e.getMessage()
IOConverter.toString(out)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
maximumGridSize=768
Arrays.asList(Errors.UNKNOWN_TOPIC_OR_PARTITION,Errors.TOPIC_AUTHORIZATION_FAILED)
mDetector.onTouchEvent(ev)
WebSettings.setTextSize(WebSettings.TextSize.SMALLEST)
new IllegalStateException()
drawable != mBackgroundDrawable
totalTime / curTime == curOps
_jsonWebServiceServiceAction.getJSON(null,null,mockHttpServletRequest,mockHttpServletResponse)
detailNode != null
final HColumnDescriptor hcd=htd.getFamily(familyName); 
ArrayList<Library>
new Paint(Paint.ANTI_ALIAS_FLAG)
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.50f)
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
new ArrayList<>()
location.getWorld()
tile.getUrn().getResourceName()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
order.isCurrent()
win.isDrawnLw()
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.CLAIMED,"AAAAA","BALO",cargo.isMisdirected())
context.getCompileScope()
value > 0
Byte.valueOf(param.getValue())
clazz.isAssignableFrom(value.getClass())
enabled=false
Thread.sleep(5000)
parser.getBoolean(KEY_ANIMATION_DISABLED,true)
FLAG_USE_MAGNIFIER=false
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
selenium.isVisible("link=Control Panel")
Log_OC.e(TAG,"Got to start sync")
cls.getMethods()
TimeUnit.SECONDS.toMillis(3)
String tempClusterPathString=tempPath.toAbsolutePath().toString(); 
createArtifact("a","1.0")
selenium.isVisible("link=Control Panel")
mHorizontals == null
JsonProcessingExceptionMapper.class
PetiteReference[]
frequencyKhz < 30000
public TokenStream create(TokenStream input){   return new EnglishPorterFilter(input,protectedWords); } 
Arrays.asList("4.0","3.8.2","3.8.1")
mPowerManager.isScreenOn()
type.getConstructor()
type.getConstructor()
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
caller.isOwner()
mService.removePasspointConfiguration(fqdn)
assertOpenEventually(latch,3)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
a.getInt(attr,0)
InputMethodManager.getInstance(mTargetActivity)
e != null
dataTypeDefinition.replaceFirst("\\s*\\{.*","")
pk.getColumnName()
CharSequence message
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
realm.assertThread()
3
classFile.matcher(file.getName()).find()
TestSuiteEnvironment.getServerAddress()
pod.setId(expectedId)
timeoutMs < 500
e.getMessage()
QueryBuilder.quote(autoIncrementDefinition.columnName)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
paramValue.isEmpty()
getPositionForView(switchView) < getHeaderViewsCount()
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),false)
times(2)
new Setting<>("repositories.s3.access_key",CLOUD_S3.KEY_SETTING,Function.identity(),Property.NodeScope)
WordPress.getCurrentBlog().getRemoteBlogId()
type.getSimpleName()
toolchainType != null
Math.abs(loss)
node.getOtherNode()
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
conceptAnswer.getConcept()
@UriPath
file != null
new IncrementalIndexSegment(rtIndex)
parameter.getType()
LOG.error(msg)
private TextVar wDirectory; 
Double.parseDouble(value)
(pluginId == item.pluginId) && uri.equalsIgnoreCase(item.uri) && param.equalsIgnoreCase(item.param)&& otherInfo.equalsIgnoreCase(item.otherInfo)
Long.valueOf(subSecs)
origin.realComponent().doubleValue() >= other
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
Iterator<Long>
IBackupManagerService svc=mService; 
securityMode != SecurityMode.None
selenium.isVisible("link=Control Panel")
mDisplay.getMetrics(mDisplayMetrics)
constraintSystem.hasOnlyExpectedTypeMismatch()
state.value == rotationLocked
public static LayoutFriendlyURLComposite getLayoutFriendlyURLSeparatorComposite(long groupId,boolean privateLayout,String friendlyURL,Map<String,String[]> params,Map<String,Object> requestContext) throws PortalException {   return getPortal().getLayoutFriendlyURLSeparatorComposite(groupId,privateLayout,friendlyURL,params,requestContext); } 
setupStrokePaint(paint,opacity)
loaded.getLoaded().getConstructor()
(dispatcherMapping & ERROR) > 0
(filterMap.getDispatcherMapping() & FilterMap.ASYNC) > 0
number.intValue()
Integer.valueOf(tokens[3])
sr.makeNextStartId()
args.size() > error.first
getWebElement(webDriver,locator,timeout)
new AlertDialog.Builder(getActivity())
LOG.error("Unable to parse HTTP response content",e)
OnSubscribeGroupBy<K,T>
new ObjectMapper().reader(DiskBalancerCluster.class)
mActiveAgents.valueAt(i)
loaded.getLoaded().getConstructor()
conf.getFeatureMapSize()
keyCode == KeyEvent.KEYCODE_BACK
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
getDelegate().getSupportedCipherSuites()
LOGGER.warn("Warning: could not get " + idForErrorMessage + " translation for \""+ key+ "\" for locale "+ Locale.getDefault(),ex)
element.getNodeName()
externalChargeItem.getPlanName()
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategy()
Long.valueOf(val)
e.getPresentation().setEnabled(enabled(project,log,details))
Element.F64(mRS)
final XmlElementDescriptorImpl xmlElementDescriptor=createElementDescriptor(tag); 
name.length() > 2
InputMethodManager.getInstance(instance)
Observable.fromCallable(() -> sync.update(mangaSync))
mSyncStatus.get(i)
ParamUtil.getString(actionRequest,"publish")
mCollapsibleHeight > 0
mPowerManager.isScreenOn()
transform(matrix,source,width,height,false,recycle)
AndroidResourceUtil.findResourceFieldsForValueResource((XmlTag)element,false)
callbackList.getRegisteredCallbackCookie(i)
ON_TOP
transform(matrix,source,width,height,false,recycle)
solo.clickOnMenuItem(solo.getString(R.string.settings_label))
WebSettings.setTextSize(WebSettings.TextSize.LARGER)
c == '\\'
message.getContact()
a.getInt(R.styleable.BootstrapButton_android_layout_width,0)
target.addTask(task)
(Long)_aggregationResultList.get(i)
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,false,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
Integer chatId
Trans == TRANSPOSE
isReturnGeneratedKeys() && generatedKey.isPresent()
data != null
selenium.isVisible("link=Control Panel")
JenkinsResultsParserUtil.combine("Unable to rebase ",targetBranch.getName()," to ",sourceBranch.getName())
possibleCenters.remove(i)
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound()
xml.attribute("name",name)
private final CompoundShelfFileProcesor myFileProcessor; 
createHalf(buffer.length(),init)
commentsListView.smoothScrollToPosition(0)
GridSslBasicContextFactory.getDisabledTrustManager()
position.setEmpty()
encoded & 0xFFFF_FFFFl
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFile()
LOG.error("Temporary Store limit is " + storeLimit / (1024 * 1024) + " mb, whilst the temporary data directory: " + tmpDirPath + " only has " + dirFreeSpace / (1024 * 1024) + " mb of usable space - resetting to maximum available " + dirFreeSpace / (1024 * 1024) + " mb.")
config.getBroadcasterFactory().lookup(m.broadcaster(),true)
statistics.addPutTimeNano(System.nanoTime() - start)
/**   * Run the stemmer against all strings in voc.txt The output should be the same as the string in output.txt  */ public void testPorterStemFilter() throws IOException {   Tokenizer tokenizer=new KeywordTokenizer(new StringReader(""));   TokenStream filter=new PorterStemFilter(tokenizer);   ZipFile zipFile=new ZipFile(new File(getClass().getResource("porterTestData.zip").getFile()));   InputStream voc=zipFile.getInputStream(zipFile.getEntry("voc.txt"));   InputStream out=zipFile.getInputStream(zipFile.getEntry("output.txt"));   BufferedReader vocReader=new BufferedReader(new InputStreamReader(voc,"UTF-8"));   BufferedReader outputReader=new BufferedReader(new InputStreamReader(out,"UTF-8"));   String inputWord=null;   while ((inputWord=vocReader.readLine()) != null) {     String expectedWord=outputReader.readLine();     assertNotNull(expectedWord);     tokenizer.reset(new StringReader(inputWord));     filter.reset();     assertTokenStreamContents(filter,new String[]{expectedWord});   }   vocReader.close();   outputReader.close();   zipFile.close(); } 
klass.getDeclaredFields(false,declaredFields)
loaded.getLoaded().getConstructor()
compressed.capacity()
Slog.e(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
CharSequence message
this.cusolverDnSsyevd.invoke(solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
ImmutableList.of(modules)
lower != null
(T)this
mNextToPlay < sSoundPaths.get(mQa).size()
initializationData != null
mDisplay.getMetrics(mDisplayMetrics)
databaseFile.getPath()
LocalFileSystem.getInstance().findFileByIoFile(hardLinkFile)
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
count=1000
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_configuration,_templateContextHelper)
engine.getHeat()
newExecutionInput().requestString(parameters.getQuery())
fileSpecs.size() >= 0
randomInt(VALID_CHARS.length)
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",true,"Stop DBeaver running instance")
Integer.min(m,s.size())
GenericAttributeValue<String>
context.reloadRequired()
mAuthorities.get(i)
viewGroup == null
quantaRemaining > quantaPerBlock
setUnknownLabels(binarized,mainLabel)
mask.size()
returnTypeCache == null
transactionalMap.put(key,value)
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingString",value))
DescriptorRenderer.TEXT.renderType(getActualParameterType(descriptor))
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
pkgs.get(i)
primaryIndexes.size() > indexes.size()
jid.split("/")
this.recipients.getPrimaryRecipient().getName() != null
Exception ex
ActorSDK.sharedActor().style.getTextPrimaryColor()
mRecyclerView.scrollBy(hScroll,vScroll)
useQuartz=true
mQSPanel.getHost() != null
Assert.assertEquals("Unexpected number of Unusable hosts found count.",3,rule.clientMetrics.getFoundUnusableHosts().count())
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
Response.ok()
logger.info("reconnect success")
logger.error("Starting Jetty Azkaban Executor...")
isGreaterOrEqual(platformVersion,MNC)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
mf.verifyMessages(2,false)
GL20.glGetUniform(program,location,params)
Object[]
telephony.isRinging()
String text
TEST_DATA_SIZE=516
new ThreadPoolExecutor(1,Integer.MAX_VALUE,10,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new ThreadFactory(){   public Thread newThread(  Runnable runnable){     Thread thread=new Thread(runnable,name);     thread.setDaemon(daemon);     thread.setPriority(priority);     return thread;   } } )
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
-1
RemoteException e
IllegalArgumentException.class
out.writeLong(length())
PointLookupOptimizer.class
!showOnKeyguard
order=4
swapFile.delete()
TEST_UTIL.getHBaseAdmin()
dest.writeLong(mSubId)
this.doInitrospect(interfaces,matchedInterfaces)
logger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new Rect(left,top,bottom,right)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
graphModel.isDirected()
mHidProfile.isProfileReady()
entry.getKey()
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(false)
selenium.isVisible("link=Control Panel")
(a & 0xe0) == 0xb0
gradleProject.getIdentifier()
jobsLogs.jobsLogGetter()
motherTongue.getName()
logger.info(String.format("sending ack %s",args))
GL11.glTexParameter(target,pname,params)
certificate(certURL,password,certType,port)
Assert.assertEquals("Message key '" + retrievedMessage + "' is not valid",retrievedMessage,"unable.open.cause")
mClipboard.getText().length() != 0
pMotionEvent.getX(1)
telephony.getCdmaEriIconModeForSubscriber(subId)
Exception e
columnsCount > limit
BitmapUploadActivity.class
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
host.setHeaderView(this)
window.show(null)
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
width / images.size()
6 * Bytes.SIZEOF_LONG
new RuntimeException("Unable to load lock file")
"Error resetting interface " + mInterfaceName + ", :"+ e
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setTitle(POINT_ADD_GPX_WAYPOINT)
KaleoDefinitionLocalServiceUtil.incrementKaleoDefinition(definition,StringUtil.randomString(),_serviceContext)
Exception e
shadowSize == 0
amenity.getName(lang)
Integer.valueOf(topStr)
frameHandler.getClass() == FrameAggregator.class
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
tableHasData("SyncDLObject")
mWindowManager.getDefaultDisplay().getMetrics(metrics)
emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
path.toString()
file.getCanonicalPath()
super.close()
this(name,type,length,null,false); 
checkPojoMetaClass()
StringBuffer sb=new StringBuffer(); 
new String(payload)
AlluxioWorker.class
Class.forName(className)
s.length() == 0
checkManageUsersPermission("getting profiles related to user " + userId)
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
TextUtils.isEmpty(credential)
deprecated.getActiveRules()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
new LeftTuple(new DefaultFactHandle(1,"cheese"))
manager.beginTransaction().remove(fragment).commit()
binding.getKey().getTypeLiteral().getType()
zip(srcPath,zipPath,true)
/**   * counter-clockwise   */ CCW(2)
Thread.sleep(100)
imageView.setBackgroundDrawable(drawable)
String.format(" [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
parameterType.getSort()
GenericsUtil.eliminateWildcards(psiType)
HighlightInfo.newHighlightInfo(type).range(refElement).description(message)
Double rate
groupMetaCache.get(userName)
mappers.mapper().searchAnalyzer()
mHandler.postDelayed(pae,timeout)
allGroupingColumns.isEmpty()
tableHasColumn("KBArticle","kbTemplateId")
KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(type)
return last_user; 
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws Exception {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
mView.post(mAnimationStarter)
pos < 0
new WxMpMassMessageGsonAdapter()
Exception ex
audioSink.toString()
logger.error("Error while matching regex [" + matcher.toLowerCase() + "] for string ["+ matched.toLowerCase()+ "] "+ pse.getMessage())
(ExpiringCell)this
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
proxyServer != null
onServerStopped()
value == null
selenium.isVisible("link=Control Panel")
4 * data.length
latch.await(5,TimeUnit.SECONDS)
assertEquals(10,carEncoder.getSpeed(iter.getFlags()))
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
!isTopLeftVisible
logger.error("connectionClosedOnError " + exception.getLocalizedMessage())
TestDummy t
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",STRING)
getExitCode() != 0
this.decoder.decode(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
searcher.get().getIndexReader()
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
new AndFilter(fromRoomFilter,MessageWithSubjectFilter.INSTANCE)
new SafeTextModel(Mode.none)
new Paint(Paint.ANTI_ALIAS_FLAG)
new RuntimeException("Could not lookup jndi name: " + namespaceStrippedJndiName + " in context: "+ jndiContext,ne)
selenium.isVisible("link=Control Panel")
token.substring(0,p).trim().toLowerCase()
new Location(importStack.peek().getResource())
ret=true
id.provider.info != null
BIG_ENOUGH_INT + 0.5
this.keycloakSession.users().getUserByServiceAccountClient(clientSession.getClient())
position - dockDividerWidth
body.invoke(_super(),onAttachedToWindowMethod)
allowPrivate.isNull()
mSyncStatus.get(i)
data != null
Integer.valueOf(value)
GL11.glGetTexParameter(target,pname,params)
possibleCenters.remove(i)
value.iterator().hasNext()
sTestCaseCounter == 1
getValue(activity.getExtraData(),"title",kbTemplate.getTitle())
LOG.info("Staging files complete: {} files cached, {} files newly uploaded",numUploaded.get(),numCached.get())
mAppToken.hasContentToDisplay()
HazelcastInstanceFactory.terminateAll()
log.warn("Reset to factory defaults : onNextDropped")
mRemote.transact(START_ACTIVITY_TRANSACTION,data,reply,0)
(prop.getModifiers() & ACC_FINAL) != 0
setIcon(ic)
poList[1]
city.getID()
List<ExpandableItem>
/**   * Create reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonClient createReactive(){   Config config=new Config();   config.useSingleServer().setAddress("127.0.0.1:6379");   return create(config); } 
mSyncStatus.get(i)
supplement(this,aggregate)
selenium.isVisible("link=Control Panel")
mDataSetObserver != null
Looper.getMainLooper()
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).count(wrapper)
@Nullable JLabel label
privObj.getObjectName().equals("masking_test")
assertViolations(result,2,0)
createFile("Test.java","class Test extends Type<A, B, C, D> {\n}")
Map<String,String>
((WithNode)node).getContext()
type.getConstructor()
selenium.isVisible("link=Control Panel")
new IndexWriter(directory,new SimpleAnalyzer(),true)
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
SYNC_OK=0x0
r.getRequest(false)
id=15865
!usingDrawingCache
index > capacity()
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,true)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
c.deactivate()
mViewModel.getNewsItem()
mBiometricUnlock.stopAndShowBackup()
c.content().readBytes(CONTENT_LENGTH)
assertEquals(258L,response.rowCount())
expiresOn.getTime()
text.length() - 2
drawable != mBackgroundDrawable
System.nanoTime()
Optional<CacheReadEntry>
Arrays.asList("dn1","dn2","dn3","dn4","dn5","dn6")
PathUtils.getTestDir(getClass()).getAbsolutePath()
MakeGLMModelHandler.HoTDAAWWG(fr,interactions,useAll,standardize,false,skipMissing)
restRequestData.params.getPostBodyOrNull()
SERVICELOG.error("Async error occurred: " + e,e)
logger.error("NODE {}: DeleteReturnRoute command failed.")
getter.getRawReturnType()
new PkgControl(stack.peek(),name,regex)
private final DomAnchorImpl myParent; 
resultsE.appendChild(reportE)
Thread.sleep(50)
str.chomp_bang19(context)
return false; 
sto * 1000
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
TelephonyManager.getDefault().getPhoneType()
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
@NotNull T value
selenium.isVisible("link=Control Panel")
value.startsWith("npm WARN ")
mWindowManager.getDefaultDisplay().getMetrics(metrics)
IllegalArgumentException e
CharSequence message
LOGGER.debug("Cache expiration duration after updates is set to [{}]",currentDuration)
dragNode.isNodeChild(target)
mActiveAgents.valueAt(i)
new IndexWriter(dir2,new StandardAnalyzer(),true)
@NotNull @Override public abstract ClassifierDescriptor getDeclarationDescriptor(); 
new DeadCodeEliminationPhase(OPTIONAL)
Preconditions.checkNotNull(path)
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
textProto.charAt(0) == UTF8_BOM_CODE
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data,mock(BindingResult.class))
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
selenium.isVisible("link=Control Panel")
TopNCondition.isTopNHostCondition(metricNames,hostnames) || TopNCondition.isTopNMetricCondition(metricNames,hostnames)
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
apacheHttpClient.sendRequest(httpRequest)
TAP_TIMEOUT=200
Class.forName("java.lang.invoke.CallSite")
new RuntimeException("failure")
buffer.buffer()
@Override public Text setText(String str){   throw ImmutableElement.immutableError(this); } 
analysis.getTypeWithCoercions(windowFunction)
type.getConstructor()
closeDeclarationWithCommentBinders(getterOrSetter,PROPERTY_ACCESSOR,false)
tableCache.getObject(monitor,this,childName,PostgreTableReal.class)
baseAt(i).getFile().getPath()
GuardingNode guard
"could not execute request: " + response
126 + (USE_OLD_HISTORY ? 1000 : 0)
Character.isJavaIdentifierPart(c)
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
isPost(request)
myStates.containsKey(project)
number.length()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
data.limit()
System.err.printf("\"%s\" #%d%n",thread.getName(),thread.getId(),thread.getId())
Thread.sleep(50)
dynamicClassType.getConstructor()
manager.enable(keyId)
index <= mInUseLocks.length()
setImageDrawable(icon)
new SimpleType(subclass,_bindings,_superClass,_superInterfaces,_valueHandler,_typeHandler,_asStatic)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/classObjectMethod.kt")
ConfigurableServiceResource.class
Object item
i > BY_DYE_DATA.length
Float.valueOf(strings[i])
addRegionStateToPut(putA,RegionState.State.CLOSED)
Maps.newHashMap(valueArguments)
data != null
trimmedLine.endsWith(delimiter)
metadata.getKey()
scorecard.isUseReasonCodes()
options.getLambdaRole()
mSettings.writeRuntimePermissionsForUserLPr(userId,true)
1024 * 20
a.getInteger(attr,DEFAULT_MIN_WIDTH)
selenium.isVisible("link=Control Panel")
layoutTypePortlet.getPortlets()
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,true,"getAppStandbyBucket",null)
i <= 'Z'
ColorResources.getColor("splitPaneDeviderFocused")
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
HashBiMap.create(6)
mService.saveConfiguration()
mJobs.get(i)
comment.lastIndexOf(')')
new OnDemandJobScheduler()
assertEquals(5,response.getHits().size())
Math.max(titleRight,subtitleRight)
ContactModel::getSmsSn
memoryReservation.getAndAdd(bytes)
stmt.executeQuery(sqlCommand)
isExpired(timestamp)
return false; 
chars == null
y == 0
selenium.isVisible("link=Control Panel")
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
left.getFieldName().equals(right.getFieldName())
componentTree == null
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name,map.size())
request.getUserPrincipal()
GL20.glUniform1(location,v)
intellijProject == null
IndexReader r2=IndexReader.openIfChanged(r); 
components.contains(sketchbookMenu)
onDetachedFromWindows()
super.performAccessibilityAction(action,arguments)
stripFilter.skipWhiteSpace(charBuffer,stringWriter)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
/**   * {@inheritDoc}  */ public Object get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
tableHasColumn(oldTableName,"description")
Log.w(TAG,"Session failed to close due to remote exception",e)
loaded.getLoaded().getConstructor()
logger.error("{}",general)
msbuild.exists()
selenium.isVisible("link=Control Panel")
getInstantiator().newInstance(DefaultDistribution.class,fileResolver)
mPostKeyguardExitAnimation.hasEnded()
new DefaultSensorContext(mock(InputModule.class),settings.asConfig(),settings,fs,activeRules,analysisMode,sensorStorage,runtime,branchConfig)
assertThat(captor.getValue()).containsOnly("joe@mydomain.eu")
(switchValues & SW_CAMERA_LENS_COVER_BIT) == 0
ModalityState.current()
any()
USE_DISPLAY_LIST_PROPERTIES=true
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).contextStart(withUser)
item instanceof FastAdapter
i >= MAX_ATTEMPTS
TelephonyManager.getDefault().getPhoneType()
peekServiceForUserLocked(userId)
localNodeData.dcLocalAddress.toString()
PropertiesComponent.getInstance(project).getBoolean(UPDATE_STATE_ENABLED,true)
retriever.captureFrame()
Log_OC.e(TAG,"onCreateView")
!getDatabaseTypeEnvironment().isEnabled() && !isExecuted()
routerChain.notifyFullInvokers(groupInvokers,getUrl())
END + " End Message Interceptor"
dest.writeLong(mSubId)
? extends TypeDefinition
new FtrlDelta(false,alpha)
type.restContentType()
sr.isForeground
IllegalStateException e
isEmpty(s)
process.getInputStream()
this.encoding == null
FileMetadataSnapshot.directory()
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
logger.info("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
checkPojoMetaClass()
bitmapPoolScreens >= 0
mBiometricUnlock.stopAndShowBackup()
set(object,value.intValue())
mWindowManager.getDefaultDisplay().getMetrics(metrics)
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public boolean onContextMenuClick(  ArrayAdapter<?> adapter,  int itemId,  int pos,  boolean isChecked){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }     return true;   } } ).position(7)
Optional.of(BuckAddDependencyIntention.create(referenceElement,psiClass))
!message.isDiscussion()
!cached && node.isFiltered()
e.getMessage()
int retries() default 0; 
IDAUTHORITY_RETRY_COUNT_DEFAULT=3
localBroker.request(sub.getLocalInfo())
viewable=false
selenium.isVisible("link=Control Panel")
removeFlagFromCache(account,ids,flag)
assertThat(context).getBeans(HandlerMapping.class).hasSize(7)
countNewlines(headerFragment + lhsFragment + thenFragment) + 2
typeAddrPair.getTypeReferenceField().toString()
methodNode != null
LOGGER.warn("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
mTrustListeners.get(i)
Slog.wtf(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
Exception e
DatabaseDescriptor.getReadRpcTimeout()
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,63)
Preconditions.checkNotNull(object)
GridHadoopTestUtils.jsonToMap(primaryIpcEndpointConfiguration(gridName))
Helpers.exec(j4p,"setProfileBundles(java.lang.String, java.lang.String, java.util.List)",id,strings)
imageResOnFail != 0
Exporter::getDisplayName
myIpythonInputPromptCount=0
mock.expectedMessageCount(10)
log.info("Performing lookup: %s --> %s",nodeIds,retVal)
GridCacheDataStructuresImpl.class
presence.getTo()
PRESSED_STATE_DURATION=125
this.settings.analyzeWildcard(DEFAULT_ANALYZE_WILDCARD)
(line=reader.readLine()) != null
selenium.isVisible("link=Control Panel")
myConfiguration.copy()
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING)
case version: 
mWM.removeView(mView)
dest.writeLong(mSubId)
StringBuffer sb=new StringBuffer(); 
database instanceof DB2Database
status().isPermanentRedirect()
LOG.error(e)
spellParser.isFinished()
fr.isExists()
GraalInternalError.unimplemented()
dest.writeParcelableArray(remoteInputs,flags)
Assert.assertEquals(1,mergedDDMFormFieldValues.size())
binaryResultsDirectory.getAsFile().get()
type == TYPE_PUBLIC
a.getFloat(attr,0)
logger.warn(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
NUM_TOUCHES=40
Long.valueOf(subSecs)
Integer.valueOf(taskIdStr)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1)
Exception e
dir.listFiles(globFileFilter)
currentDetails.getStorage().get(expectedKeys)
mQuietEnable
new Dimension(500,200)
type.equals("")
initializationData != null
IndexReader.open(dir,true)
return availableAudioEncodings; 
ArrayInjector.class
new BasicDBObject("version",1)
new AnnotationTransactionAttributeSource()
mAttributes.getFlags()
response.getBytes()
log.debug(e1.getMessage(),e1)
CHECKIN_VERSION=29
poolTimeoutMillis < 0
a.getTypeByte()
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new AuthenticationException("Error validating LDAP user")
Collections.singletonList(EMPTY_PATH_SEGMENT)
method.getName()
/**   * Reason of replication pause.   */ private volatile GridDrPause pause; 
size * 1.75f
cs[0].set0(r,(int)(rng.nextDouble() * _createFrame.response_factors))
setEternal(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
WordPress.getCurrentBlog().getRemoteBlogId()
underlying.next()
delaySoFar > mReEnableDelayMillis
Thread.sleep(5000)
EvaluationResult<ActionLookupValue>
Prefs.getBoolean(mContext,Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN,false)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new TransactionBroadcast(peerGroup,tx)
id=51
GrTypeDefinition clazz=(GrTypeDefinition)context.getScope(); 
modules.size()
new ReflectionsException("could not create class object from file " + file.getRelativePath())
new Paint(Paint.ANTI_ALIAS_FLAG)
lhs == null
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
hasDefaultConstructor(superClass)
new StringBuilder(254)
(1.0f - rawLightValueSun) * 16.0f
JavaFile.fromRelativePath(sourceRelativePath,false).getKey()
verify(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
mAccessibilityController.isTouchExplorationEnabled()
assertQEx("unknown sort field",req("id_i:1000; abcde12345 asc"),1)
configureReadBufferForRead()
this.constraints.updateFromFactHandle(handle)
!list.append(ai)
120 * 1000L
metadata.getFaces()
SAMPLE_RATE_HZ_MAX=48000
resolver.start()
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
TelephonyManager.getDefault().getPhoneType()
getStubOrPsiChild(PyElementTypes.TARGET_EXPRESSION)
context.getContextPath()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
index > 0
final View view
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
LOG.warn("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
final Error e
executor.submit(new EmailTask(messages))
name.substring(i + 1,name.length())
i * randomIntBetween(2,10)
layerInput.slices()
realm.assertThread()
port >= 65535
/**   * {@inheritDoc}   */ @Override public Object clone(){   try {     AbstractProperty prop=(AbstractProperty)super.clone();     prop.name=name;     prop.runningVersion=runningVersion;     return prop;   }  catch (  CloneNotSupportedException e) {     throw new AssertionError(e);   } } 
enabled.set(false)
new DefaultPropertyNamePatternsMatcher(delimeters,"aaa","bbbb","ccccc")
FSImageFormatProtobuf.class
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive())
col2d.addiRowVector(epsilon1d)
lastFailureException instanceof ConnectException
10 * 60 * 1000L
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L)
myFixture.getAvailableIntentions("struts-action-method.xml")
cursor.getString(COLUMN_NAME)
ImmutableSet.of("~key","~value","~id","~nid","~label","~adjacent","~timestamp","~ttl","~visibility","key","vertex","edge","element","property","~T$VertexExists","~T$SchemaName","~T$SchemaDefinitionProperty","~T$SchemaCategory","~T$SchemaDefinitionDescription","~T$SchemaUpdateTimestamp","~T$SchemaRelated","~T$VertexLabel")
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX)
epi.initialise(ei,boi,engine,true,true)
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
clickListener_OnClickListener == null
selenium.isVisible("link=Control Panel")
SDK_INT >= JELLY_BEAN || SDK_INT <= LOLLIPOP_MR1
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
path.endsWith(".js")
mMncStr == null
retries=2
new File(myConfig.getWorkingDirectory(),myConfig.getScriptName())
new UnsupportedOperationException()
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)
new SpannedString(first,false)
checkManageUsersPermission("getting profiles related to user " + userId)
buildName(rightNode)
plugin.getPath()
new JSyntaxTextArea(15,50)
copticDate.monthOfYear()
g.cachesx(null)
ExceptionInInitializerError|Exception
batteryVp >= low
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
mHandle == null
classNode.getName()
continueBox.setSelected(true)
r1.getName()
new GridException("Failed to deserialize task attributes [taskName=" + req.getTaskName() + ", taskClsName="+ req.getTaskClassName()+ ", codeVer="+ req.getUserVersion()+ ", taskClsLdr="+ dep.classLoader()+ ']')
DEBUG=true
authentication.hasDefined(USERS)
logger.info("Adding PropertySource: " + source + " in group: "+ basename)
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER
mValues[7]
i < 3
builder.or(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
nonPersistent.addMessageLast(node)
getTelecomService().silenceRinger()
a.getFloat(attr,0)
mResourceData[i] != null
totalHits.relation != TotalHits.Relation.EQUAL_TO
origin.realComponent().doubleValue() >= other
stream.<NettyClientStream>data()
m.getClass()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
owner != null
onRotationLockChanged()
ChannelBuffers.dynamicBuffer()
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
robotstxtServer.allows(webURL)
Pair<Class,Accessor>
END + " End Message Interceptor"
data != null
Bytes.toBytesBinary(tableOrRegionName)
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
id=24
buffer.putLong(nextMarker + 4,0)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
random.nextInt(gap)
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingString",value))
!file.isValid()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).contextStart(withUser)
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).toMillis()
op == ASSIGN
new RMNodeImpl(nodeId,rmContext,null,0,0,null,null,null)
SamplingProfiler.newThreadGroupTheadSet(group)
addStringValuesProperty("struts.objectFactory.spring.autoWire","name","type","auto","constructor")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
method.getName()
selenium.isVisible("link=Control Panel")
FileChannel.open(indexFile.toPath(),CREATE,READ,WRITE,DSYNC)
v.getContext().startActivity(intent)
identifier(node)
flipX=1
object instanceof RegexCompiler
BlogsWebUpgrade.class
needRefresh=false
new IndexWriter(dir,new WhitespaceAnalyzer())
isReturnGeneratedKeys() && generatedKey.isPresent()
Internal.prefixKeyWithSalt(key)
serversByLoad.lastKey()
DEBUG=true
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,true)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
mPulseCallback.onPulseFinished()
new ElasticsearchException("failed to walk tree",e)
Theme.fromJSON(object)
privObj.getObjectName().equals("masking_test_subq")
mInterpolator == null
mode == MODE_PULL_DOWN_TO_REFRESH
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
mHandler.postDelayed(pae,timeout)
logger_.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
"set responseContext to be" + responseContext
LAST_VERSION=940
getCutoffText(LAST_PLAYED_CUTOFF,context)
Integer.valueOf(tupleValue)
Assert.assertEquals(101220L,ret.getFee())
new RuntimeException()
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
ultimateRecyclerView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
accountHandle.getComponentName().toString()
new PaymentApiException(ErrorCode.PAYMENT_GET_PAYMENT_METHODS,paymentMethodModelDao.getAccountId(),paymentMethodModelDao.getId())
concatRef.isEightBits=false
mMipmap=false
STATE_OPENED_WITH_KEYS=3
Preconditions.checkNotNull(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
currLine > mPrevLine
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId,lastFrameNumber)
return mRxTimeMillis; 
tok[2]
i > 1
SAMPLE_RATE_3D_VERT=16
createFromResourceStream(null,null,is,srcName)
String url
Object fullfillmentMethod
arg1 > arg1
Vector<MediaDescription>
LOG.info(" job " + job.getName() + " completed ")
info.crashInfo.stackTrace.length() > 10000
origin <= other
mMncStr == null
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
Map<String,ResolvedType>
FastMath.max(origin,num.floatValue())
DEBUG=true
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
catalog.entries()
((Cell)atom).localCopy(cfs,HeapAllocator.instance)
lhs.getScore()
!window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
obtainMessage(MSG_TIMEOUT,state)
logger.info(String.format("destroying socket (%s)",this.nsp))
selenium.isVisible("link=Control Panel")
depthErrorXYZ("modelX")
TelephonyManager.getDefault().getPhoneType()
ViewCompat.getScaleX(itemView)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION)
tracesFile.mkdirs()
userStreamListener.onStatus(new StatusJSONImpl(json))
unpaidInvoiceTriggerDate == null
logger.info("Failed to register block {} - no id",block,block.getId())
StringBuffer buf=new StringBuffer(); 
GridCacheAdapter<K,V>
left.getQualifierLength()
BigInteger.valueOf(55)
Ordered.LOWEST_PRECEDENCE - 20
mColumn + (x - 0.5f) * 4 + 1
mContext.startActivity(cantAddAccount)
"System property " + LEGACY_SSTABLE_ROOT + " not set"
clearFromMember.start()
Long.valueOf(timeout)
mAppToken.hasContentToDisplay()
new IllegalStateException()
redirectUri == null
three.setCoordinateIndex(LEAF)
activity == null
mSyncStatus.get(i)
assertEquals(55,StringUtil.countMatches(drl,"rule \""))
GROUP_IDLE_TIME_S=5
resource.removeExtractor(input.getId(),extractorId)
timeNanos > DateTimeUtils.NANOS_PER_DAY
specification == null
JSInheritanceUtil.iterateMethodsDown((JSFunction)element,new Processor<JSFunction>(){   @Override public synchronized boolean process(  final JSFunction jsFunction){     allRenames.put(jsFunction,newName);     return true;   } } )
ftm.registerFileType(StdFileTypes.XML,RNG_EXT)
profilesXml.exists()
telephony.getLteOnCdmaModeForSubscriber(subId)
type.toUpperCase(ENGLISH)
adapter != null
populateWatchlistUi()
getTimeout()
toArrayHelper(array,1)
notify()
solrDocument1.getFieldNames()
mHorizontals == null
mService.setWifiApConfiguration(wifiConfig)
new LwjglPreferences(name)
collection.addOnScrollListener(onScrollListener)
TokenSet.create(PyTokenTypes.OR_KEYWORD,PyTokenTypes.AND_KEYWORD,PyTokenTypes.LT,PyTokenTypes.GT,PyTokenTypes.OR,PyTokenTypes.XOR,PyTokenTypes.AND,PyTokenTypes.LTLT,PyTokenTypes.GTGT,PyTokenTypes.EQEQ,PyTokenTypes.GE,PyTokenTypes.LE,PyTokenTypes.NE,PyTokenTypes.NE_OLD,PyTokenTypes.IN_KEYWORD,PyTokenTypes.IS_KEYWORD,PyTokenTypes.NOT_KEYWORD,PyTokenTypes.PLUS,PyTokenTypes.MINUS,PyTokenTypes.MULT,PyTokenTypes.FLOORDIV,PyTokenTypes.DIV,PyTokenTypes.PERC)
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
!_javaSource && (_lineTabLevel == 1)
tableHasColumn("KBTemplate","cacheable")
state.value == rotationLocked
Integer.valueOf(attrValue)
/**   */ class SctpClientPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
i < 100
selenium.isVisible("link=Control Panel")
Mutation rm=new Mutation(KEYSPACE1,dk.getKey(),cf); 
a.getDimensionPixelOffset(attr,0)
context.getProject().isDisposed()
between != null
mNextWakeFromIdle != null
type.getConstructor()
assertEquals(3,builder.getErrors().getErrors().length)
log.debug(sm.getString("aprListener.sslInit"))
MessagingService.instance().sendRR(message,destination,responseHandler)
ShirtPocket.this.startDrag(clip,thumb,false)
selenium.isVisible("link=Control Panel")
DbConnectionManager.close(pstmt,con)
Slog.wtf(TAG,sb.toString())
mPowerManager.isScreenOn()
ConfigurableFactory.Companion.getInstance().getTodoConfigurable()
checkpointPath.getPath()
Collection<Fragment>
System.currentTimeMillis()
getDegreesFromXY(x,y)
PsiTreeUtil.getParentOfType(anchor,PyParameter.class)
Log.wtf(TAG,"This will become an error",ex)
zoneId.equals("+00:00") | zoneId.equals("-00:00")
mContext.startActivity(intent)
return 1; 
new BigInteger(Hex.decode("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))
mQsContainer.getX()
text.charAt(current) == '\n'
stripFilter.skipWhiteSpace(charBuffer,stringWriter)
peekServiceForUserLocked(userId)
proxy.getHostText()
checkPojoMetaClass()
mHandler.removeCallbacks(pae)
mAppOpsManager.noteOp(opCode,uid,packageName)
createExpandMacroMap(moduleSettings).substitute(path,true,null)
KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(type)
config.getMaxElementsInMemory()
klass.getDeclaredFields(false,declaredFields)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),99,50)
ldapContexts.put(getThreadName(),dirContext)
selenium.isVisible("link=Control Panel")
ThreadPoolIntentService.makeIntent(getContext(),mHandler,Options.TEST_URI)
userGroupMember.getMemberId()
memOffsetData.intValue()
rep.saveStepAttribute(id_job,getID(),"success_condition",getSuccessConditionCode(successCondition))
typeName.contains("CHAR")
rxJavaAvailble
StatList.getCraftStats(itemstack.getItem())
synchronized (mAccounts) {   writeStatisticsLocked(); } 
EMERGENCY_ASSISTANCE_ENABLED=false
selenium.isVisible("link=Control Panel")
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "goog.require('a.b');\ngoog.require('a.c');\n\n")
regUser * userWeight * trusteeFactorValue* trusteeFactorValue
new ProtoFile("exotic.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
throwable.getCause()
fragmentEntryPersistence.filterCountByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
thread.isParamsChanged()
return mEnabled; 
IllegalArgumentException.class
c == Character.class
BucketsEntity.class
new FileNotFoundException()
Integer.valueOf(attrValue)
i--
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
engine.execute(query).toString()
Long.valueOf(deadline)
info.getName()
Gdx.input.getX()
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
InsertFinalStep<R>
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
lastToken.contentType == contentType
mService.removePasspointConfiguration(fqdn)
tests.add(clazz.getGenericsTypes()[0].getType())
new AssertionError()
new Paint()
simpleQueryString("spaghetti").field("body",10.0f)
DDMWebUpgrade.class
Slog.e(TAG,"Unable to bind FLP Geofence proxy.")
id=9
metaData.getColumnName(1)
mMat[6]
param.slices()
/**   * {@link Builder#delete(Tree)}   */ public static Fix delete(Tree node){   return builder().delete(node).build(); } 
source.isNodeChild(target)
new ArrayList<>()
ColorRGBA.White.mult(0.3f)
selenium.isVisible("link=Control Panel")
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
war.startsWith("file:")
MAX_PERCENT_DIFFERENCE=0.1
primaryServer.getClass()
mDefaultOverlays.contains(overlayPackage.packageName)
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
fraction * (nextValue - prevValue)
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
IllegalStateException.class
StorageService.class
expect(cluster.getClusterName()).andReturn("cluster").times(2)
status != BackupConstants.TRANSPORT_OK
CompletableFuture<Boolean>
target.getDestination()
type.equalsIgnoreCase("text/css") == true
Response.ok(Status.OK)
memoryCachePercent / 100
mFrustum.update(mCombinedMatrix)
parser.getText()
(visibility & VISIBILITY_MASK) == VISIBLE
logger.error(evt.getReason())
max_ordinal=79
getTestName(false)
selenium.isVisible("link=Control Panel")
-1
getLayoutRec(getFixedPosition(data),position,length,getFixedFitLength(data))
setX((mWidth > 0) ? (mPosition * mWidth) : 0)
logger.error("{}",builder)
id=17
labelCursor != null
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
payload.writeBytesLenenc((byte[])each)
serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable()
jsonObject.get(ERROR_KEY).getAsString()
LOG.error("Registered pre-upgrade check {}",upgradeCheck.getClass())
LOG.isDebugEnabled()
numAttributes != expectedItemCount
casProperties.getMonitor().getEndpoints().getSingleSignOnReport()
className.getValue()
v2.isSupportedBy(v1)
AndroidAssetsInfoApi.class
listener.iterationDone(cg,iterationCount)
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
logger.info("Optimized Selector: " + selector.getClass().getName())
Long.parseLong(value)
test("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)
mSize != -1
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,true,userId)
LOGGER.warn("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
PATH_ITERATIONS * 50
getConfiguration()
selenium.isVisible("link=Control Panel")
mBluetoothLock.readLock().lock()
DBException e
Math.min(leftLen,rightLen)
@Nullable
id=46
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
o.toString().getBytes()
fileEntry == null
stts.readUnsignedIntToInt()
scheduler.getTriggerState(trigger.getName(),trigger.getGroup()) != Trigger.STATE_PAUSED
mBitmapState.mBitmap.hasAlpha()
buffersReadyFlyweight.bufferLength(index,termLength)
provideArguments(',',"foo","bar","").count()
copy1DRangeFrom(0,mType.getCount(),i)
width - originY
position > 0
clist.clearDisplayNameUserDefined(metaContact)
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final DefaultHttpClient getClient(){   return getClient(connectionTimeout); } 
MethodHandles.dropArguments(cacheLookup,0,type.parameterList().subList(1,type.parameterCount()))
NB_CACHED_PARAMS=20
onDetachedFromWindows()
isFinishing()
MUCActivator.getAlertUIService().showAlertDialog(resources.getI18NString("service.gui.ERROR"),errorMessage)
config.swapBones()
!mapReader.getRegionNames().isEmpty()
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
new IllegalArgumentException("Remote " + remoteName + " not found. ")
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,0,mUserId)
getTestName(false)
new Fetcher(conf).fetch(segment,threads)
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
new JobMeta((space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,null)
Log.wtf(TAG,"This will become an error",ex)
Utils.intNow()
Exception e
buckdEnabled
ArrayList<TaggedWord>
r.getEffectiveKey()
@Override public final DivideBy orNot(Condition c){   return or(c.not()); } 
getService().animateCollapse()
result.length() > 15
selenium.isVisible("link=Control Panel")
originalLanguage != null
canPerformRequestOverConnection(mAccessibilityViewId)
new WrappedEpoxyModelClickListener(this,clickListener_OnClickListener)
InputType.recurrent(convNIn)
mDisplayContent.getSplitScreenPrimaryStack()
@Override public Object create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
grid(i).events().localListen(new IgnitePredicate<Event>(){   @Override public boolean apply(  Event evt){     if (nodeId.equals(((DiscoveryEvent)evt).eventNode().id()))     latch.countDown();     return true;   } } ,EVT_NODE_LEFT)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,0)
instanceOfA.profile().getNullSeen() != TriState.FALSE
Nd4j.createUninitialized(shape)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
OAuthConstants.HAWK_TOKEN_TYPE.equals(tokenType)
@Test public void testPutOutOfCapacity() throws OutOfCapacityError {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(MultiLevelPriorityQueue.MAX_PENDING_PER_GROUP_KEY,2);   ResourceManager rm=new UnboundedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   groupFactory.groupMap.get(groupOne).addReservedThreads(rm.getTableThreadsHardLimit());   queue.put(createQueryRequest(groupOne,metrics));   assertTrue(true);   try {     queue.put(createQueryRequest(groupOne,metrics));   }  catch (  OutOfCapacityError e) {     assertTrue(true);     return;   }   assertTrue(false); } 
_typeSettingsProperties.toString()
Slog.wtfStack(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
onDetachedFromWindow()
new InternalTestCluster(randomLong(),1,1,tribeClusterName,tribeSettingsSource,0,false,false,CHILD_JVM_ID,TRIBE_CLUSTER_NODE_PREFIX)
viewHolder.getItemViewType() == TYPE_EDIT
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").filterSize(5,1,2,2).nIn(4).nOut(3).batchSize(batchSize).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(2).backward(true).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(new int[]{9}).override(new ClassifierOverride(1))
range.getFrom()
state == AsyncState.STARTING
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
new V(1,new BooleanSetting(true))
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
a instanceof OutputFileObject && b instanceof OutputFileObject
VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)
context.getSourcePathResolver().getRelativePath(resDir)
a.willChangeTransformationMatrix()
service.asBinder().isBinderAlive()
width - originY
Response.ok()
from > to
callElement.toString()
message.length <= MAC_LENGTH
!(jdk.getSdkType() instanceof IdeaJdk)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,methodHandleLoaded))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
Looper.getMainLooper()
mentionsListView.smoothScrollToPosition(0)
Map<String,String>
Thread.sleep(5000)
context.currentProcessingTime()
ImmutableMap.of(columnFamily,mutations)
assertFalse(dr.isFailure())
mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
mRCStack.remove(rcse)
powerQuery[i] == 0.0d
ph.setTimeStamps()
List<InternalTransactionPogo>
Long.valueOf(attrValue)
Slog.wtf(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
currentMedia.getLocalPostId() == 0
Integer.valueOf(displayIdStr)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
Error err
line.startsWith(StringPool.TAB + "private class ") || line.startsWith(StringPool.TAB + "private enum ")
platformVersion < MNC
new EmoteClue("Cheer in the Shadow dungeon. Equip a rune crossbow, climbing boots and any mitre.",ENTRANCE_OF_THE_CAVE_OF_DAMIS,new WorldPoint(2629,5071,0),CHEER,any("Any mitre",item(GUTHIX_MITRE),item(SARADOMIN_MITRE),item(ZAMORAK_MITRE),item(ANCIENT_MITRE),item(BANDOS_MITRE),item(ARMADYL_MITRE)),item(RUNE_CROSSBOW),item(CLIMBING_BOOTS))
status.isDirectory()
i >= 0
view.getContext().getPackageName()
getLogger().error("Unknown classloader [CCE]: " + e.getMessage())
new byte[16]
helper(ans,comb,k,i + 1,n - i)
killBillClient.createExternalCharges(externalCharges,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
request.masterNodeTimeout()
new ThingUID(WEMO_INSIGHT_TYPE_UID,device.getDetails().getSerialNumber())
fdm.getCachedDocument(file) == null
insertOrder("ds1")
assertEquals(expectedPlan,actualPlan)
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
selenium.isVisible("link=Control Panel")
winAnimator.mSurfaceController == null
msbFragmentEntry.getFragmentEntryId()
mDisplayContent.getSplitScreenPrimaryStack()
getSegments().length - 2
thisJob._state == JobState.CANCELLED
tfoi.setSpecifyFormat(wSpecifyFormat.getSelection())
fileLock != null
member.getType(beanDesc.bindingsForBeanType())
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
loaded.getLoaded().getConstructor()
shell.run(script.toString(),source,EMPTY_ARGS)
viewable=false
ContainerUtil.getLastItem(expressions)
new RaftMessages.HeartbeatResponse(state.myself(),RaftMessages.Type.HEARTBEAT_RESPONSE)
getStageWithServerAction(1,977,payload,"test",300)
updateRotation(1)
LOGGER.warning(e.toString())
!window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new Semaphore(1)
nameOfClass.equals("com.android.internal.policy.impl.PhoneWindow$DecorView") || nameOfClass.equals("com.android.internal.policy.impl.MultiPhoneWindow$MultiPhoneDecorView")
loaded.getLoaded().getConstructor()
getTestName(true)
public TokenStream create(Reader input){   return new StandardTokenizer(input); } 
from >= to
endOfArguments()
mContext.checkCallingOrSelfPermission(PERMISSION)
this.keycloakSession.users().getUserByServiceAccountClient(clientModel)
Integer.valueOf(options.getMaxKeys())
out.writeDouble((Float)obj)
compressed.capacity()
isBetween(11000,12000,alt.getDistance())
equalTo(20)
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
-1
info.getGroupIdLevel1ForSubscriber(subId)
websocketComponent.setMaxThreads(11)
enums.maxId()
simple.getFromSentDate()
mHandler.postDelayed(pae,timeout)
GroovyExpectedTypesProvider.getDefaultExpectedTypes(expression)
verify(client).bufferAtomicIncrement((AtomicIncrementRequest)any())
Double.valueOf(parser.group(index++)) / 60
_freemarkerEngineConfiguration.getResourceModificationCheck()
urlStr.startsWith("file:") || urlStr.startsWith("jndi:")
selenium.isVisible("link=Control Panel")
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
info.getType() & 0x7
selenium.isVisible("link=Control Panel")
new CacheConfiguration<>()
userId != UserHandle.USER_ALL
log.error("Error extracting parameters meta data",e)
IOException e
versionNum < maxRevision
conversation.getContactJid().split("/")
selenium.isVisible("link=Control Panel")
JZVideoPlayer.onScrollReleaseAllVideos(view,firstVisibleItem,visibleItemCount,totalItemCount)
GlobalContextKey.create("_java_compiler_usage_stats_")
pane.setMinimumSize(new Dimension(300,80))
mMenu.getVisibleItems()
this.parseAsArray(instanceUrl,"events")
mStartActivity.task == null
tokens.next().expect(Token.IDENTIFIER,'{')
offsetRepository != null
toIntervalStartEpochMs(epochMs) + NEXT_TASK_DELAY_MS
mValues[7]
HashMap<String,Presence>
end > range.getStartOffset()
cv.visitInsn(DUP)
Set<UidRange>
LOG.isInfoEnabled()
model.getVisibleColumn(cell.col)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
Boolean.valueOf(getOptional("kylin.query.convert-create-table-to-with","false"))
a.getNodeName()
mContext.startActivity(intent)
dist < bestdist
wifiConfig.isValid()
engine.refresh("test",true)
weekRange.roll(Calendar.DATE,6)
mNextWakeFromIdle != null
i <= 0
TypeConversionUtil.areTypesConvertible(targetType,actualType)
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null)
new Location(importStack.peek().getResource())
type.getConstructor()
new LinkedHashSet<>()
consumeTokenFast(b,IDENTIFIER)
LocalFileSystem.getInstance().findFileByPath(libPath)
new ObjectMapper().reader(Map.class)
line.split(" *= *")
assertEquals(expectedPlan,actualPlan)
new IllegalArgumentException(JSON_BUILDER + "invalid element",e)
mEntries[which]
mView.post(mAnimationStarter)
partialUri.toString()
Simple.of(String.class)
p.contains("gt06.timezone")
julLogger.info("Hello world")
assertEquals(2,resultList.size())
selenium.isVisible("link=Control Panel")
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
AbstractMethodError e
LOGGER.warn("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
settings.readLPw(null)
mEnterTransformation.printShortString(pw)
"Error resetting interface " + mInterfaceName + ", :"+ e
MessagingService.instance().sendOneWay(message,target)
new VariableExpression(apiInstanceProperty)
enabled.set(false)
uploadRequest.getFileAsStream(fieldName,true)
wsdlLocation.length() > 0
String url
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
((ContainerLifeCycle)contextHandler).addBean(clientContainer)
volume.getMtpReserveSpace() * 1024 * 1024
new IndexWriter(d,new StandardAnalyzer(),true)
ev.mDataSamples.length < ND
StringBuffer sb=new StringBuffer(); 
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
var(b) > 1e-14
ChronicleEngineEnpoint endpoint
!_calledSetTotal
child.getMeasuredHeight()
this.deliveryDelay > 0
Value delta
new ProcessRuntimeImpl(repositoryService,processDefinitionConverter,runtimeService,securityPoliciesManager,processInstanceConverter,variableInstanceConverter,configuration,eventPublisher,null)
mNotificationManager.cancel(SystemMessage.NOTE_TV_PIP)
new File(jmDir,"bin" + File.separator + "log4j.conf")
mResourceData[i] != null
isShortcutProxyActivity(targetIntent)
Thread.sleep(5000)
LOG.info("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
ScanResult.is24GHz(frequency)
LOGGER.lifecycle(exception.apply().toString())
new EditSessionBlockChangeDegate(editSession)
applyCurrentState()
toRemote != null
cache5.setColor(red)
mUserPaddingStart > 0
origin <= other
callVideoButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
tableHasData(newTableName)
assertThat(o.takeNext()).isNull()
new SdkListCellRenderer("<Project Default>")
mValues[7]
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
m.getPredsSize()
(float)getMax() / 5
log.warn("Hooking new default : onOperator")
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
wrapper != null
!TextUtils.isEmpty(realPath)
near.remove(1)
driverPropertySource.getProperties()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,policy)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
JmsQueueSendReceiveWithMessageExpiration.class
TVisit
IDAUTHORITY_RETRY_COUNT_DEFAULT=3
new UnsupportedOperationException()
framework.getBroadcasterFactory().lookup(m.broadcaster(),true)
return mChangingAppearingDuration; 
(lo + hi) >> 1
mContext.sendStickyBroadcast(mStorageFullIntent)
visitNode(node,context)
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
sublistsIndices.keySet().parallelStream()
storeProperty(propertyNode,pexp,objectExpressionType,visitor,receiver.getData())
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.MOBILE_DATA_ALWAYS_ON,0)
fdoProvider.getFdoMode() != FdoMode.OFF
pGLState.resetModelViewGLMatrixStack()
deadline < now
mail.getClass().getName()
selenium.isVisible("link=Control Panel")
Assert.fail()
configList.size() == 0
getFirstByType(type,withProxy)
Number.class
specHeightMode == MeasureSpec.EXACTLY
mService.factoryReset(mContext.getOpPackageName())
config.getMaxRedirects()
zipInspector.assertFileExists("assets/secondary-program-dex-jars/metadata.txt")
new GroupTest(false)
printTypeWithoutBounds(out,type)
mHandler.removeCallbacks(pae)
log.error("Wrong client secret for service {}",service)
scale(1f)
logger.error(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
Integer.valueOf(taskIdStr)
module == null
dynamicType.getLoaded().getConstructor()
lock.unlock()
stall_till_cloudsize(5)
return _EMPTY_CONFIGURATION; 
origin.realComponent().doubleValue() <= other
entry.getField(BibEntry.KEY_FIELD)
exifThumbWidth >= fullThumbWidth
commandContext.isDirty()
LOG.error("I/O error when running rpc",e)
FlinkKafkaProducerBase.class
labels.slices()
writer.close()
return true; 
DefaultClassDirectoryBinarySpec.class
new ServerSparseIntRow(rowId,startCol,endCol)
Task jarTask=addTaskBuildWSDLJar(buildWSDLTask,inputFile,compileTask,generateTask); 
final Command cmd
Numeric.encodeQuantity(filterId)
TestShardRouting.newShardRouting(index,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
GitBranch currentBranch=repository.getCurrentBranch(); 
Log.wtf(TAG,"This will become an error",ex)
AWAKE_INTERVAL_DEFAULT_MS=5000
/**   * {@inheritDoc}  */ public Comparable getTo(){   return Integer.valueOf(to); } 
new IocException("_mirror_factory_init","Mirror Factory init fail",e)
sep < 0
public Integer getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
"select actionId from ResourceAction where name = '" + oldName + "'"
public Object mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Player player=new Player();   player.setID(fs.readString("ID"));   player.setLastName(fs.readString("lastName"));   player.setFirstName(fs.readString("firstName"));   player.setPosition(fs.readString("position"));   player.setDebutYear(fs.readInt("debutYear"));   player.setBirthYear(fs.readInt("birthYear"));   return player; } 
public Object mapLine(FieldSet fieldSet,int lineNum){   Order order=new Order();   order.setOrderId(fieldSet.readLong(ORDER_ID_COLUMN));   order.setOrderDate(fieldSet.readDate(ORDER_DATE_COLUMN));   return order; } 
rc.zoom == tileBox.getZoom()
FBUtilities.getLocalAddress()
order.getInstructions()
500 * 1000000L
service.getAdnUriForPhoneAccount(accountHandle)
selenium.isVisible("link=Control Panel")
new Paint(Paint.ANTI_ALIAS_FLAG)
status != BackupConstants.TRANSPORT_OK
cls != null
primitiveType != GL10.GL_POINTS
set(object,value.intValue())
(exception ? throwable instanceof RuntimeException : throwable == null)
menu.isSelected()
super.writeState(element)
Integer.valueOf(this.getOptional("kylin.restclient.connection.default-max-per-route","20"))
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
activeEditor.checkModified(false)
hostName != null
readPermission.intern()
mPulseCallback.onPulseFinished()
selenium.isVisible("link=Control Panel")
configList.size() == 0
strongClassCache.put(beanClass,results)
Integer.toString(flags,16)
final LongAdder cnt=new LongAdder(); 
assertLength(3,builder.getErrors())
return false; 
new RedisTimeoutException()
new ColorUIResource(0xC3E88D)
length % dictionarySize
JDBCUtils.safeGetString(dbResult,"time")
new OutputStreamWriter(clientStream)
value.isNull()
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
_typeSettingsProperties.toString()
tableHasColumn("CalendarBooking","vEventUid")
Assert.fail("Known issue https://github.com/eclipse/che/issues/8031")
mouse().clickAt(0,0)
!((OfflineProblemDescriptorNode)node).isQuickFixAppliedFromView()
2 << 8
container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
new Volume.MemoryVol(false,0)
checkManageUsersPermission("getting profiles related to user " + userId)
assertEquals("Size of " + r,0,r.size())
sampler.getFileField()
dbSqlSessionFactory.getDatabaseSchema() != null
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
GithubNotifications.showErrorDialog(myPane,"Can't login: " + GithubUtil.getErrorTextFromException(ex),"Login Failure")
jid.getContent().split("/")
options.removeUnusedVars
DataStream<OUT>
TypeResolver.resolve(channelTypeUID)
ticker.interrupted()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new IndexWriter(dir,anlzr,false)
mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL
FastMath.max(origin,num.doubleValue())
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
Double value=iterator.next(); 
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
lock.isLocked()
onRotationLockChanged()
@Use({REG,ILLEGAL})
setX((mWidth > 0) ? (mPosition * mWidth) : 0)
enSearch.getResultSet()
wrapper.shutdownNow()
mAuthorities.get(i)
mPositionAnimator.isRunning()
log.warn("Unrecognized Oracle client version at " + oraHome)
type.getConstructor()
newDefaultSubIdObj.equals(mDefaultSubId)
-1205803626
synchronized (conn) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
"Using bind address: " + publicAddress
lock.isLocked()
loaded.getLoaded().getConstructor()
theClass.getConstructor(new Class[0])
case 11: 
selenium.isVisible("link=Control Panel")
mKey.equals(other.mKey)
entry.notification.clone()
insertedElement instanceof PsiPlainText
IllegalAccessError.class
subjectAlternativeNameDomains != null
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
mAuthorities.get(i)
Math.min(maxSize,layoutParams.height)
BUKKIT_VERSION=2317
FORCE_LOGGING=true
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
reason != null
createFromResourceStream(res,value,is,srcName)
/**   * {@inheritDoc}  */ @Override public Object clone(){   LongProperty prop=(LongProperty)super.clone();   prop.value=value;   return prop; } 
sourceWidth > 0
Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
ScanResult.is24GHz(frequency)
nioGroup.shutdownGracefully()
((ExecutorService)executor).isShutdown()
items[25]
goHome()
markerArray.get(1)
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Throwable e
-806120450
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
new ToolWindow.Border(true,false,false,false)
new FormAttachment(100,15)
telephony.getCdmaEriIconIndexForSubscriber(subId)
Thread.sleep(5000)
Long.valueOf(args[2])
return true; 
!match && compareCompat
testReliable=true
type == VolumeInfo.TYPE_PUBLIC
Float.valueOf(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
log.info("munlocking " + file + " with length "+ length)
this.cli.jar("secure.groovy")
context.var("double")
hasOnClickListeners()
i < 10
mFirebaseRemoteConfig.fetch(cacheExpiration).addOnCompleteListener(new OnCompleteListener<Void>(){   @Override public void onComplete(  @NonNull Task<Void> task){     if (task.isSuccessful()) {       Toast.makeText(MainActivity.this,"Fetch Succeeded",Toast.LENGTH_SHORT).show();       mFirebaseRemoteConfig.activateFetched();     }  else {       Toast.makeText(MainActivity.this,"Fetch Failed",Toast.LENGTH_SHORT).show();     }     displayPrice();   } } )
c.conflictExists()
ViewBuilderTask.class
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
bundlesMap.get(module)
mContext.startActivity(intent)
localScale.addLocal(scale)
typeSerializer.getClass()
LOG.warn(title + "; " + message)
Exception e
new RuntimeException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
value={StringFilterAggregator.class}
id=24
new StringBuilder(639)
forced == null && con.getListener().isForceDefault()
imeWin.getDisplayFrameLw()
retry.attemptRetry()
atLeast(1)
context.getPackageManager().queryIntentActivities(intent,0)
LOG.error("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
RemoteOperation synchFolderOp=new SyncFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
state.value == rotationLocked
new AudioBuffer(audioData,bufferIndex,presentationTimeUs)
dest.getBearing() + destGf.getDeclination()
typeSettingsProperties.toString()
CharSequence message
isAllowedBySettingsLocked(p.getName(),UserHandle.getUid(mCurrentUserId,0))
FastMath.max(origin,num.floatValue())
selenium.isVisible("link=Control Panel")
log.error("Both session() and unauthenticated() are set for this request, this is a bug, using session id.")
mHorizontals == null
jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY)
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
GoExecutor.in(module).withParameters(task.getCommand())
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_label_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR))
textPromise.getState() != Promise.State.PENDING
visibleTerminal.getTitle()
LOGGER.lifecycle(exception.apply().toString())
ProjectBundle.message("module.cannot.load.error",e.getMessage())
mPackageUsage.write()
!registrarTransport.equals(ListeningPoint.UDP) || !registrarTransport.equals(ListeningPoint.TCP) || !registrarTransport.equals(ListeningPoint.TLS)
UserNotificationEventLocalServiceUtil.getDeliveredUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
request.getIncludeMessage()
new PreDecorationFilter(routeLocator(),this.server.getServletPrefix(),new ZuulProperties())
t.getValue()
mContext.sendStickyBroadcast(mStorageLowIntent)
child.jni_YGNodeSetOwner(child.mNativePointer,0)
this.spiceServiceListenerSet.add(spiceServiceServiceListener)
targetInfo != null
new DatagramDnsQuery(addr,null,1)
numSegments - 1
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"")
_ddmStructure.getDescription()
ConfigureUtil.configure(closure,this)
jmsManager.destroyQueue(queueName)
titleLabel.getPrefWidth()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
threadContext.isRestartNextLoop()
newHashSet()
date.getTime()
LOGGER.debug(message,e)
mHandler.postDelayed(pae,timeout)
e.getMessage()
!myLastSuspendContext.equals(getSuspendContext())
Log.wtf(TAG,"This will become an error",ex)
LOGD=true
instance.managementService.unregister()
new ExtendedThrowableProxyConverter()
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new PseudoDescription().load()
assertPhoneNumberEqual("123123","0123123",false)
next_write_buffers.get(0)
JMeterUtils.getPropDefault("httpsampler.max_redirects",5)
callVideoButton.setPressedImage(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_PRESSED))
mock(Grouped.class)
assertEquals(v1,v2)
context == null
LLVMMetadataNode m2
buf.clear()
m.getClass()
adapter.unregisterDataSetObserver(mObserver)
mHandler.removeCallbacks(pae)
ViewRecordTest.class
mService.disconnect()
javadocMethod != null
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)
new OverflowPanelViewHelper(mContext)
diff >= 86400
new AssertionError()
mService.factoryReset(mContext.getOpPackageName())
myIncludeTestSource=false
services=8
3
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
synchronized (this) {   mScreenOnTime=readScreenOnTimeLocked(); } 
poList[1]
System.getProperty(KYLIN_HOME)
mock.expectedMessageCount(1)
disableForUser(what,token,pkg,mCurrentUserId)
mActivity.get() != null
new IllegalArgumentException("pos must be >= -1")
paramNames != null
ExampleRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
Maps.newHashMap(valueArguments)
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
Set<UidRange>
getTypeName(method.getReturnType())
mf.getColumnName()
JDBCUtils.safeGetLong(dbResult,"pid")
stateChangedLatch.await(1,TimeUnit.SECONDS)
msgLog.info(msg,true)
new ReadonlyMapELResolver(beans)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
status == PlayerStatus.INITIALIZED
mDisplayContent.getSplitScreenPrimaryStack()
Files.delete(dir.toPath())
oldClusterVersion.onOrAfter(Version.V_6_0_0_alpha1)
classFilter.getAcceptedIDs()
GL20.glUniformMatrix2(location,transpose,value)
tempPinnedTaskBounds != null
rs.getString(columnName)
setInitView()
mAuthorities.get(i)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),completedTasks,false,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
activity == null
pos1.getBlockX()
getAsShortText(fieldValue)
appendValue(collection,sb)
MAX_PRETTY_PRINTED_PROPERTIES=4
cifar.test()
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
a.getFloat(attr,0)
registered.add(objectName)
getString(R.string.osmo_tracker_id_share,ci.trackerId)
Thread.sleep(5000)
DateUtilities.ONE_MINUTE * 20
LogManager.getContext()
LOGGER.lifecycle(msg.apply())
selenium.isVisible("link=Control Panel")
_validatePropertyElement(propertyElement,filePath)
_parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
String.class
new Paint(Paint.ANTI_ALIAS_FLAG)
return 10; 
initializationData != null
control.getRowHeight(rowToEdit)
new GeoPoint(bottom,posRight)
Double.valueOf(value.toString())
rowKeyColumnIO.writeColumnWith(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
payloadErrorFatal
temp_descs.get(i)
assertPhoneNumberEqual("123123","0123123",false)
UriBuilder.fromResource(StreamAlertConditionResource.class).path("{conditionId}").build(alertCondition.getId())
new Backgrounding()
new Paint(Paint.ANTI_ALIAS_FLAG)
loaded.getLoaded().getConstructor()
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
(exception ? throwable instanceof RuntimeException : throwable == null)
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
userQueryService.getUserNames(markdownText)
parent.getChildAdapterPosition(child)
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
Validate.notNull(reg,"Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString())
matrix.apply(transform)
if (ignoreAirBlocks) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } 
minor < 5
themeDisplay.getUserId()
selenium.isVisible("link=Control Panel")
MonitoringPortletImpl.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
ois.close()
assertEquals(result,Optional.of("abc"))
return r; 
(short)0755
mCaCerts != null || mCaCerts.length > 0
oldVb.getBufferType() == VertexBuffer.Type.Index
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
lp.onResolveLayoutDirection(layoutDirection)
"none".equals(max_items)
Exception e
this.getClass().getSimpleName()
counter >= max
offset > mValue.length
Validator.isNull(indexType)
protocolProvider.getAccountID().getAccountAddress()
jsonFile.getParentFile()
item.exists()
type.getConstructor()
mDataAuthorities == null
/**   * Gets the key of service port.  * @return key of service port  */ public String getPortKey(){   return mPortKey; } 
ContainerUtil.newHashSet(EDITOR_POPUP,EDITOR_TAB_POPUP,COMMANDER_POPUP,PROJECT_VIEW_POPUP,FAVORITES_VIEW_POPUP,SCOPE_VIEW_POPUP,TESTTREE_VIEW_POPUP,TESTSTATISTICS_VIEW_POPUP,TYPE_HIERARCHY_VIEW_POPUP,METHOD_HIERARCHY_VIEW_POPUP,CALL_HIERARCHY_VIEW_POPUP,J2EE_ATTRIBUTES_VIEW_POPUP,J2EE_VIEW_POPUP,USAGE_VIEW_POPUP,STRUCTURE_VIEW_POPUP,TODO_VIEW_POPUP,COMPILER_MESSAGES_POPUP,ANT_MESSAGES_POPUP,ANT_EXPLORER_POPUP,UPDATE_POPUP,FILEVIEW_POPUP,CHECKOUT_POPUP,LVCS_DIRECTORY_HISTORY_POPUP,GUI_DESIGNER_EDITOR_POPUP,GUI_DESIGNER_COMPONENT_TREE_POPUP,GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP,CREATE_EJB_POPUP,CHANGES_VIEW_POPUP,REMOTE_HOST_VIEW_POPUP,REMOTE_HOST_DIALOG_POPUP,TFS_TREE_POPUP,ACTION_PLACE_VCS_QUICK_LIST_POPUP_ACTION,PHING_EXPLORER_POPUP,NAVIGATION_BAR_POPUP,JS_BUILD_TOOL_POPUP,DIFF_TOOLBAR,V8_CPU_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
dockedBounds.top - adjustment
info != null
public TokenStream create(TokenStream input){   return new LowerCaseFilter(input); } 
TypeElement formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER); 
anchorView.getWindowToken()
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProessor(new ButtonItemProcessor(this))
element == null
Object value
input.slices()
WordPress.getCurrentBlog().getRemoteBlogId()
getReadTimeout(requestConfig,attemptNum)
chain.resolveUrlPath(resourceUrlPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
allowPrivate.isNull()
debugRootView.addView(button,debugRootView.getChildCount() - 1)
proxy.attemptErrorResponse(controlSessionId,GENERIC,correlationId,errorMessage,controlPublication)
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
dynamicType.getConstructor()
users.get(i)
settings.readLPw(null)
(short)4
columnTypes[column] == INT
id=31
new Paint(Paint.ANTI_ALIAS_FLAG)
new Attribute(rawAttributeName,name,value,false)
temporaryFolder.getRoot()
config.highlightOwnName()
j++
max_ordinal=79
child.resetResolvedLayoutDirection()
ConnectorSplitManager.class
String text=status.getMessage(); 
vel < mFlingGestureMinDistPx
public Object mapLine(FieldSet fieldSet,int lineNum){   Address address=new Address();   address.setAddressee(fieldSet.readString(ADDRESSEE_COLUMN));   address.setAddrLine1(fieldSet.readString(ADDRESS_LINE1_COLUMN));   address.setAddrLine2(fieldSet.readString(ADDRESS_LINE2_COLUMN));   address.setCity(fieldSet.readString(CITY_COLUMN));   address.setZipCode(fieldSet.readString(ZIP_CODE_COLUMN));   address.setState(fieldSet.readString(STATE_COLUMN));   address.setCountry(fieldSet.readString(COUNTRY_COLUMN));   return address; } 
case e: 
table.averageDouble(columnIndex)
public TvShowFragment getListener(){   return listener; } 
Thread.sleep(2000)
return false; 
Intent.ACTION_LOCALE_CHANGED.equals(action)
DBG=false
e.getMessage()
@ConditionalOnEnablednHealthIndicator("rabbit")
return true; 
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
Assert.assertThat(expected,Matchers.equalTo(candidate))
field.getRawType()
mRemote.transact(START_ACTIVITY_TRANSACTION,data,reply,0)
!(o instanceof BooleanClause)
result.getReceipt().getEnergyTotal()
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
!eachWnd.isAvailable()
update(bytes)
(visibility & VISIBILITY_MASK) == VISIBLE
classDirectoryName.contains("bin") || classDirectoryName.contains("classes")
message.append(getDialogMessage())
log.warn("Can't check auto-commit state",e)
controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
mAvailableSessionKeys == null
"Trying to use view with tag " + tag + " as a parent, but its Manager doesn't extends ViewGroupManager"
grammar.getTokenNames()
selenium.isVisible("link=Control Panel")
d.setAutoMirrored(true)
PyStatement callExpression=elementGenerator.createFromText(LanguageLevel.forElement(dictExpression),PyStatement.class,stringBuilder.toString()); 
clazz.getClassName()
!isPassword
getLog().error("register druid-driver mbean error",ex)
type.getConstructor()
DefaultCacheKeysFactory.getEntityId(cacheKey)
loaded.getLoaded().getConstructor()
DurationType.getMillisType()
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
new SpannedString(first,false)
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,500,0)
getMyApplication().getSettings().isLastKnownMapLocation()
height / 2
createHalf(buffer.length(),init)
prefsWriter.commit()
dynamicType.getConstructor()
request.getServletPath()
clientCodeChallenge == null
LOG.info("Finding components in url: {}",url)
count=1000
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
msg.setJMSExpiration(asInt(priority))
Class.forName(ORIGIN_EXECUTABLE).getConstructor()
Set<Key<?>>
application.getApplicationContext()
Builder<T,B>
Key.create("_prefer_target_jdk_javac_")
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
selenium.isVisible("link=Control Panel")
CollectionUtils.isEmpty(blocks)
return hasValueProxies; 
new Entry(p.hash,p.key,p.value,head,queue)
topologyConfigs(topologyJarFile,topologyDefnFile,topology)
mHiddenForOtherReasons=false
entryString.substring(i + 1)
LOGGER.debug("Could not perform drage and drop",ioex)
clockSource.elapsedMillis(startTime,now)
IOException ex
type == null
Simple.of(value.getClass())
DEBUG=true
params.length >= 9
is(400)
assertEquals(0,result.x)
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
result.size() == 7
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU)
project.isDisposed()
_buildDataJSONFile.getParent()
SAMPLE_ERROR_MILLIS=30
mNavigationBarView.getPaddingStart()
i.getTouchIconUrl() != null
sourceWidth > 0
TimeValue.timeValueMillis(delay)
duration - SystemClock.uptimeMillis() - bedtime
m.getSize()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
contact.GetWorldManifold()
assertEquals(12,definitions.size())
PApplet.radians(angle)
DLFileEntryMetadataLocalServiceUtil.getFileEntryMetadataByFileVersionId(dlFileVersion.getFileVersionId())
SearchSourceBuilder.parseSearchSource(parser,context,aggParsers,suggesters)
checkPojoMetaClass()
mulNegInt(x,y) + mulZeroSubInt(y,x) + mulSubZeroInt(x,y)
Preconditions.checkNotNull(mBlockIdsOnTiers)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
suiteMethod.invoke(null,(Object[])new Class[0])
/**   * {@inheritDoc}  */ @Override public Object clone(){   TestElementProperty prop=(TestElementProperty)super.clone();   prop.value=(TestElement)value.clone();   return prop; } 
System.currentTimeMillis()
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,outputFieldTypes[i].getDisplayName(),setOperationName,descFieldType.getDisplayName())
primitiveToWrappers.put(wrapperType,primitiveType)
loaded.getLoaded().getConstructor()
stack.isVisible() && (imeOnBottom || isDockedOnBottom)
from("direct:a").delay(3000)
createFromResourceStream(res,value,is,srcName)
mAvailableSessionKeys == null
ActivityManagerNative.getDefault().updateConfiguration(config)
syncOperation.delay == 0
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
type.getConstructor()
@Mock private HidProfile mHidProfile; 
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
assertEquals(17,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
LOGD=true
new RowIcon(2)
RuntimeVersion.isAtLeast12()
new ArrayList<>()
worldsData.containsKey(worldName.toLowerCase()) || mirrorsGroup.containsKey(worldName.toLowerCase())
ap.getSsid()
r != null
type == QUADS
0.499f * mainUnitInMeters
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
StreamEx.of(1,2,3,4)
mSyncStatus.get(i)
DLAppServiceUtil.updateFolder(folder.getFolderId(),folder.getParentFolderId(),album.getTitle(),album.getDescription(),serviceContext)
classMapper.lookupType(classAttribute)
fieldInfos.size() == 7
grantResults[0] == PackageManager.PERMISSION_GRANTED
myConfigFiles.collectValues()
@Priority(5)
NB_CACHED_PARAMS=20
host.setHeaderView(this)
THashSet<RangeHighlighter>
getTimeout()
ConcurrentLinkedQueue<long[]>
ftest.numRows() < validation_rows
region.getRegionWidth()
"Using bind address: " + publicAddress
CLEAN_DELAY=500
StagingServiceHttp.prepareStagingRequest(httpPrincipal,remoteGroupId,checksum)
UserHandle.getCallingUserId()
fullName.length() > selectedFullName.length()
level <= RF_STATUS_LOW_SIGNAL
JSONValue.parse(value)
map.set(keyValue.getKeyData(),value,0,TimeUnit.SECONDS)
TelephonyManager.getDefault().getPhoneType()
new TrustException("ENCRYPTED_KEY_ERROR",LOG,e)
CollectionItemInfo.obtain(0,1,position,1,isHeading,isSelected)
getters.length >= 0
new EnterSelectionDialog(shell,props,files,Messages.getString("XMLOutputDialog.OutputFiles.DialogTitle"),Messages.getString("XMLOutputDialog.OutputFiles.DialogMessage"))
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
mLayout.getPaint().getTextWidths(mText,offsetStart,offsetEnd,widths)
type == TokenTypes.CLASS_DEF
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),true,event.mediaModelList,event.successMessage)
assertEquals(1695,res.getWeight(1,2),10)
selectorSlider.getCanvas()
context.declareFields()
loaded.getLoaded().getConstructor()
assertEquals(2,tool.check("Een test test, die een fout moet geven.").size())
mock.expectedFileExists("target/failed/error/bye.txt","Kabom")
origin < other
fluidIDs.containsKey(fluid.getName())
consumerPort=8830
logger.warn("Cannot handle repeat command ({})",e.getMessage())
mDrawable.getIntrinsicHeight()
FBUtilities.getLocalAddress()
StringUtil.trimEnd(sdkHomePath,GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH)
near.remove(key)
LOG.isDebugEnabled()
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
connectionProperties.contains("oracle.user")
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
logger.info(String.format("calling ack %s with %s",packet.id,packet.data))
new SpannedString(new CustomSpanned(first),false)
renameContactPanel.getName()
IndexReader.openIfChanged(reader)
U.warn(log,"Failed to apply updates for session (maximum number of retries exceeded) [sesId=" + sesId + ", retries="+ retries+ ']')
c.getName()
realm.assertThread()
assertFalse(dr.isFailure())
final ContiguousIntervalUsageInArrear intervalCapacityInArrear=createContiguousIntervalCapacityInArrear(usage,ImmutableList.<RawUsage>of(),targetDate,false,createMockBillingEvent(targetDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList())); 
_log.error(ioe,ioe)
power > POWER_REQ
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
Log.warn("Caught exception: " + error.toString())
BUTTON_QUIESCENT_ALPHA=0.6f
IllegalArgumentException e
identity.getId()
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
Long.valueOf(value)
lastPos != mBoundPos
mRedrawClip.isEmpty()
slop.getValue()
new Insets(6,0,0,6)
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",true,false,false)
Assert.assertFalse(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
attribute.getFieldName()
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=4
N > 0
public static BuildParameters addBuildParameterCustomStrategy(BuildParametersBuilder builder,String image,List<EnvVar> envVars){   return builder.withNewStrategy().withType("Custom").withNewCustomStrategy().withImage(image).withEnv(envVars).endCustomStrategy().endStrategy().build(); } 
case 4: 
item == null
fragmentManager.beginTransaction().add(containerId,tabsFragment)
sampleQueues[i]
Response.ok()
node.getPolicyWeight()
Slog.wtfStack(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
converter.convertTo(leftValue.getClass(),rightValue)
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
dpToPx(4f)
handler instanceof ChannelInboundHandler
si.intent == null
promises.addFirst(promise)
LOG.error(msg,this)
assertEquals(prop.getValues().size(),2)
new IndexWriter(dir1,new StandardAnalyzer())
Simple.of(SkylarkNestedSet.class)
_jsonWebServiceServiceAction.getJSON(null,null,mockHttpServletRequest,mockHttpServletResponse)
assertRuntimeProductionSearchScope("m2",getProjectPath() + "/m2/src/main/java")
String.class
file instanceof PsiJavaFile
getPlayerPosition().z
testClass.getName()
new Paint(Paint.ANTI_ALIAS_FLAG)
CLIENT_SNAPSHOT=0x05
unittests("tests_pydevd_python/test_debugger.py",null)
ScanResult.is24GHz(frequency)
DEBUG=false
ScanResult.is24GHz(frequency)
Thread.sleep(5000)
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e)
DBG=false
nextOffsetStart > rangeToRemove.getEndOffset()
text.getBoundingBox().width()
getCategoryMethodGetter(sender,getterName,false)
new SkeletonControl(model,meshes,animData.skeleton)
classFile.matcher(file.getName()).find()
newDirectory()
this.getClass()
Exception e
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)
iteration == 0
pending_native(fd)
node1.checkTreeTypeAwareEqualsSilent(node2)
explicit && !finished
enabled.set(true)
callerApp == null
rs.getString(1)
backLayer.getLayoutDirection()
fragmentCollectionPersistence.filterCountByGroupId(groupId)
dest.writeLong(mSubId)
editor != null
Parser.xmlParser()
!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
cursor.getString(COLUMN_VALUE)
client.pods()
!e.getKey().startsWith("org.apache.ignite.") && System.getProperty(e.getKey()) == null
MAX_PER_SIZE=5
DeprecationLogger.nagUser("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
fragment.getView() == null
getMeasuredHeight()
mBluetoothLock.readLock().lock()
new IgniteCheckedException("Failed to send message to node (has node left grid?): " + nodeId)
@Test public void ioExceptionWhenReaderThrowsIt() throws IOException {   final IOException ioEx=new IOException();   Reader reader=new Reader(){     @Override public int read(    char[] cbuf,    int off,    int len) throws IOException {       throw ioEx;     }     @Override public void close() throws IOException {     }   } ;   Source.Builder<IOException,RuntimeException,RuntimeException> builder=Source.newBuilder(reader).name("unloadable.txt").mimeType("text/plain");   Source s1=null;   try {     s1=builder.build();   }  catch (  IOException e) {     Assert.assertSame(ioEx,e);     return;   }   fail("No source should be created: " + s1); } 
portletAddDefaultResourceCheckWhiteList.contains(portletId)
_discussionComment.isInTrash()
/**   * Integration tests for GRPC over Http2 using the OkHttp framework.  */ @RunWith(JUnit4.class) public class Http2OkHttpTest extends AbstractTransportTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer() throws Exception {     try {       SslProvider sslProvider=SslContext.defaultServerProvider();       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {         sslProvider=SslProvider.JDK;       }       SslContextBuilder contextBuilder=SslContextBuilder.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key"));       GrpcSslContexts.configure(contextBuilder,sslProvider);       contextBuilder.ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE);       startStaticServer(NettyServerBuilder.forPort(serverPort).sslContext(contextBuilder.build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer() throws Exception {     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort(TestUtils.TEST_SERVER_HOST,serverPort));     try {       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")));     }  catch (    Exception e) {       throw new RuntimeException(e);     }     return builder.build();   }   @Test(timeout=10000) public void receivedDataForFinishedStream() throws Exception {     Messages.ResponseParameters.Builder responseParameters=Messages.ResponseParameters.newBuilder().setSize(1);     Messages.StreamingOutputCallRequest.Builder requestBuilder=Messages.StreamingOutputCallRequest.newBuilder().setResponseType(Messages.PayloadType.COMPRESSABLE);     for (int i=0; i < 1000; i++) {       requestBuilder.addResponseParameters(responseParameters);     }     StreamRecorder<Messages.StreamingOutputCallResponse> recorder=StreamRecorder.create();     StreamObserver<Messages.StreamingOutputCallRequest> requestStream=asyncStub.fullDuplexCall(recorder);     requestStream.onNext(requestBuilder.build());     recorder.firstValue().get();     requestStream.onError(new Exception("failed"));     recorder.awaitCompletion();     emptyUnary();   }   @Test(timeout=10000) public void wrongHostNameFailHostnameVerification() throws Exception {     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort("I.am.a.bad.hostname",serverPort));     ManagedChannel channel=builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem"))).build();     TestServiceGrpc.TestServiceBlockingStub blockingStub=TestServiceGrpc.newBlockingStub(channel);     try {       blockingStub.emptyCall(Empty.getDefaultInstance());       fail("The rpc should have been failed due to hostname verification");     }  catch (    Throwable t) {       Throwable cause=Throwables.getRootCause(t);       assertTrue("Failed by unexpected exception: " + cause,cause instanceof SSLPeerUnverifiedException);     }     channel.shutdown();   } } 
new LocalizationEntity(_packagePath,_apiPackagePath,_portletName,_portletShortName,_name.concat("Localization"),_humanName.concat(" localization"),_table.concat("Localization"),_alias.concat("Localization"),persistenceClass,_dataSource,_sessionFactory,_txManager,_cacheEnabled,_dynamicUpdateEnabled,_mvccEnabled,_deprecated,Collections.singletonList(entityLocalizationIDColumn),regularColList,Collections.<EntityColumn>emptyList(),Collections.<EntityColumn>emptyList(),columnList,finderList,Collections.singletonList(this),_txRequiredList)
DataType.list(datatype)
CellUtil.estimatedHeapSizeOf(c)
new WorldPoint(2712,3689,0)
nextTokenIsFast(b,IDENTIFIER)
pw.println(ps.getInstantApp(user.id))
stamp.isExactType()
_buildTemplateWithGradle("npm-portlet","npm-portlet-dependency-management","--dependency-management-enabled","true")
mock.expectedBodiesReceived("Hello World 3")
guiResource.getImageSlaveMedium()
Object node
final ImageView buttonFavorite=(ImageView)view.findViewById(R.id.context_menu_fav_button); 
payload.writeBytesLenenc((byte[])each)
msg.obj == mSmHandlerObj
nodeVersion.after(Version.V_5_3_0_UNRELEASED)
GL20.glGetActiveUniform(program,index,256,typeTmp)
focusedTopActivity != null
COOKIE_SYNC_MANAGER=false
checkManageUsersPermission("getting profiles related to user " + userId)
telephony.getCdmaEriTextForSubscriber(subId)
super.getSecurityEngine(false)
new ArrayList<>()
assertEquals(0,counter.get())
toBeRemovedKeys.clear()
PsiTreeUtil.getParentOfType(uexpr,ScopeOwner.class)
comparison=superHashCode
!uploadResult.isCancelled() && !ResultCode.LOCAL_FILE_NOT_FOUND.equals(uploadResult.getCode()) && !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_WIFI)&& !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_CHARGING)
InspectionsConfigTreeTable.getAdditionalShiftIfMac()
connector.execute(context)
element != null
fontBuffer.capacity() > 0
primitiveType != GL10.GL_POINTS
generatorConfig.getDaoPackage()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",sourceFileObject.toString(),e.getMessage()),e)
mWidth - edgeWidth
!mIsRecentsShown || mIsPipFocusedInRecent
stack.peekFirst()
_hint != null
RingBuffer.newWriteQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
Thread.sleep(500)
letterSet.size()
intent.resolveTypeIfNeeded(getContentResolver())
component.setUnderlined(object.get("strikethrough").getAsBoolean())
filePath == null
new IndexWriter(directory,autoCommit,ANALYZER,true)
heightMode != MeasureSpec.EXACTLY
WordPress.getCurrentBlog().getRemoteBlogId()
setEnabledFunctions(mDefaultFunctions,false)
getService().animateCollapse()
GridCacheAdapter<K,V>
m.getSize()
getUserStateLocked(callingUid)
mHorizontals == null
(FontMetrics)c.newInstance()
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(13)
manager.age(Locale.ENGLISH,130000)
actionCache.remove(key)
fill
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)
/**   * This is  {@link CasWebflowServerSessionContextConfigurationTests}.  * @author Misagh Moayyed  * @since 5.0.0  */ @TestPropertySource(properties="cas.webflow.session.storage=true") public class CasWebflowServerSessionContextConfigurationTests extends BaseCasWebflowSessionContextConfigurationTests {   @Autowired @Qualifier("loginFlowExecutor") private FlowExecutor flowExecutorViaServerSessionBindingExecution;   @Override public FlowExecutor getFlowExecutor(){     return this.flowExecutorViaServerSessionBindingExecution;   } } 
HashMap<String,ArrayList<String>>
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
errorMsgJson.put("ERROR",errorMsgJson)
setZrtpEncryptionToDescription(mediaType,description,null)
makeString(actual,",","(",")")
mService.setUidPolicy(UID_A,POLICY_NONE)
(Boolean)p.getConfig().get("enabled")
type.equalsIgnoreCase("text/css") == true
TextUtils.isEmpty(credential)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
builder.scope("openid","profile","email","address","phone")
new BinaryWebSocketFrame(payload)
selenium.isVisible("link=Control Panel")
expandableView.getActualHeight()
externalChargeItem.getPlanName()
typeLength == 0
boxedConstant.getKind()
{16,inputShape[0],inputShape[1],inputShape[2]}
countCQL3Rows()
nameResolver.generatedTypeNameOf(referenceElement).get()
new FtrlDelta(true,alpha)
DirectCallTargetNode directCall=(DirectCallTargetNode)invoke.callTarget(); 
((OverriderUsageInfo)usage).getElement()
indexNameExpressionResolver().concreteIndices(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName())
applicationContext != null
Thread.currentThread().getId()
new Paint()
testSame("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
id=15849
Arrays.<Processor>asList(new BuildProcessor(new ArrayList<Processor>()),new ModuleProcessor(),new PropertiesProcessor(),new ParentProcessor(),new OrganizationProcessor(),new MailingListProcessor(),new IssueManagementProcessor(),new CiManagementProcessor(),new ReportingProcessor(),new RepositoriesProcessor(),new DistributionManagementProcessor(),new LicensesProcessor(),new ScmProcessor())
verify(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
RedissonSetCache.class
tableHasColumn("Akismet_AkismetData","mbMessageId")
event.getX()
fMethodDescriptions.put(method,description)
return true; 
clear(request,plid)
threadHandler.get().post(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
ChannelBuffers.copiedBuffer(bytes,0,length)
realm.assertThread()
mPulseCallback.onPulseFinished()
selenium.isVisible("link=Control Panel")
getSettings().SHOW_IMAGES
return true; 
b.get()
mBluetoothLock.readLock().lock()
si.intent == null
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mWorkSource,mResultStorages,ActivityThread.currentOpPackageName())
new LeftTuple(f1)
a.willChangeTransformationMatrix()
docBase.toLowerCase(Locale.ENGLISH)
topCallFrameView.getCallFrame() != topCallFrame
log.warn("Problem in JSR223 script ",e)
order=1
SelectTimeZonePacificStandardTimeTest.class
componentTree == null
(DeltaManager)manager
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0)
address.getHostText()
traceTag != 0
getActiveFgCall().getPhone().sendDtmf(c)
calendar.roll(Calendar.DATE,-1)
Loader.loadClass(mName)
ds.getFeatureMatrix()
batteryService.isBatteryLow()
is(2)
VersionNumber.parse(playVersion).getMinor()
new SliceReadCommand(table,key,columnFamily,start,count)
new int[101]
mSyncStatus.get(i)
mdcPropertyMap != null
new ShardPath(false,path,path,null,shardId)
token.trim().isEmpty()
DEBUG_GESTURES=true
protected Object waitForOutbound(InboundMessageQueuer ch) throws InterruptedException {   return ch.nextMessageBlocking(); } 
from.getItem().shouldCauseReequipAnimation(from,to,changed)
onRotationLockChanged()
new WorldPoint(1653,3577,0)
getMeasuredHeight()
MAX_PERCENT_DIFFERENCE=0.1
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).otherwiseIfEmpty(EMPTY_FORM_DATA)
addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
result.wasNull()
type.getPresentableText()
onDetachedFromWindow()
new FtrlDelta(true,alpha)
dkSign.getId()
Integer.parseInt(sid[0])
sep < 0
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!")
metaContact.getDefaultContact()
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
AttributeUtils.getDefault().getMin(column,valuesArray)
columnSums.mean(1)
Mockito.verify(mFileSystemMasterClient).rename(src,dst)
statistics.addGetTimeNano(System.nanoTime() - start)
mPostKeyguardExitAnimation.hasEnded()
logger.info("copy {} to {}",srcFile.getAbsolutePath(),destPath)
mListener.onInputUpdated(inputId)
mapper.setSqlSession(sqlSessionTemplate)
clusterService != null
new ConcurrentHashMap<String,BeanDefinition>(64)
new ShardingConnection(xaDataSourceMap,shardingContext)
stepIdleStateLocked("s:shell")
dlg.setNegativeButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
!isEnabled()
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
mState.action == ACTION_OPEN_TREE
synchronized (this) {   updateDisplayLocked(); } 
fileIds == null
NetworkParameters.testNet()
getClientConfig().getAddressList()
originalLayout.getIconImageId()
THUMBNAIL_APP_TRANSITION_DURATION=300
Validator.isNull(location)
mHotspotBounds.set(left,top,bottom,right)
zkDb.snapLog.getDataDir()
m.getSize()
node.getLifecycleService().terminate()
listeners.preExecute(context)
fraction * (nextValue - prevValue)
mBluetoothGatt.registerScanner(this)
loaded.getLoaded().getConstructor()
MAGIC_GEN_NUMBER=0xD0_46_B4_E4_0C_7D_07_CFl
type.getName()
um.getUsers()
child.getMeasuredHeight()
mRecyclerView.scrollBy(hScroll,vScroll)
Integer.valueOf(attrValue)
str.length() == 0
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
Throwable t
new StackState(1f,0)
data != null
serializer.serializeForInsert(metadata,entity,columns,values,subQuery)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
inOrder.verify(mockAwareService).subscribe(eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
ConfigurationFromContext.COMPARATOR.compare(producer,first) >= 0
s.setMaxVersions()
typeSettingsProperties.toSortedString()
imeWin.getDisplayFrameLw()
Integer.valueOf(attrValue)
LOG.error(e)
MAX_DIMEN_FOR_ROUNDING=1080
selenium.isVisible("link=Control Panel")
HttpTransport.class
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
len != 2
Integer.valueOf(2)
mPowerManager.isScreenOn()
it.remove()
!mDreamsEnabledByDefaultConfig
isFormat(format,F60)
runUTRunner(PathManager.getHomePath())
parent.getParentFile()
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
sendMail(getFromAddress(),addressList,getSuccessSubject(),"URL Restarted: " + sample.getSampleLabel(),getSmtpHost())
qux.getConstructor()
telephony.getLteOnCdmaModeForSubscriber(subId)
edge.setType(EdgeDirection.DIRECTED)
TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression); 
computator.getContentRectMinusAxesMargins()
Assert.assertEquals(account.getBillCycleDayLocal().intValue(),31)
mph >= 10
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()))
setBackgroundDrawable(null)
DEBUG_ALL || false
uri.getPath()
info.getOldIndex() < 0
ON_TOP
odi.release()
AbstractMethodError e
result.setEnabled(false)
policyFlags & SCAN_NEW_INSTALL
DEBUG=true
volume.getMtpReserveSpace() * 1024 * 1024
NotifyUtil.show("Error",formatter.format(record),MessageType.ERROR,listener,10000)
Lists.newArrayListWithExpectedSize(resultMessages.size())
!root.isDownloads()
hasCdmaDataConnectionChanged
Thread.sleep(5000)
responseString(p)
Log.wtf(TAG,"Found activity " + r + " in proc activity list using "+ r.app+ " instead of expected "+ app)
updateViewsVisibility(mIconifiedByDefault)
random.propertyValue()
IBackupManagerService svc=mService; 
logger.warn("Cannot handle control command ({})",e.getMessage())
Runtime.getRuntime().totalMemory()
element.getNodeName()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
Arrays.asList("SuppressWithNearbyCommentFilter.fileContents","SuppressionCommentFilter.fileContents","MethodNameCheck.applyToPackage","MethodNameCheck.applyToPrivate","MethodNameCheck.applyToProtected","MethodNameCheck.applyToPublic")
MAX_DEFAULT_FRACTIONS_DIGITS=4
mConferenceById.containsKey(callId)
s.trim().endsWith("#")
Assert.assertEquals(5,users.size())
del("*:*")
Collection<Data>
IndexReader.open(dir,true)
!WatchlistConfig.getInstance().isConfigSecure()
new DebugMediaCodecVideoRenderer(context,MediaCodecSelector.DEFAULT,allowedVideoJoiningTimeMs,mainHandler,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY)
this.cusolverDnSsyevd.invoke(solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
Response.ok()
selenium.isVisible("link=Control Panel")
buffer.append(KEY_NODE_ID + "=").append(id)
!canChangeRole
writeString(writer,reader.getTime().toTimeStr(),fieldName)
ResponseEntity<Void>
upgradeDDLRecordSetClassName(classNameDependencies)
setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
gradleProject.getIdentifier()
builder.timeValueField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
next == null
getKeyFromGrant(alias)
spec.getClass()
selenium.isVisible("link=Control Panel")
wCompression.getSelection()
role.getChatUser().getAddress().toBareJID()
position.setLongitude(buf.readShort())
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
id=15841
logger.warn("{} {}",errorCode,message)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
checkPojoMetaClass()
public void setInitialWindowSize(long initialWindowSize) throws ConnectionError {   if (initialWindowSize > MAX_WINDOW_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.initialWindowSize=(int)initialWindowSize; } 
new Paint(Paint.ANTI_ALIAS_FLAG)
classNode.hasMethod(methodName,parameterTypes)
MessageNotifier.updateNotification(context,null)
type.getConstructor()
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
Constant.messages.getString("start.gui.cmdline.session.does.not.exist")
mLocalAlluxioClusterResource.get().getWorkerAddress()
new SemanticException(TYPE_MISMATCH,node,e.getMessage())
Calendar.getInstance(JSON.defaultLocale)
receiverUserId != mCurrentUserId
params.getSimulatePlatformVersion()
artifact.getRootRelativePath()
Sets.newHashSet()
activityType == ACTIVITY_TYPE_HOME
SecureRandom.getInstanceStrong()
DBG_CAMERA_LIFT=true
warningBytes > limitBytes
"Scheduling method " + method.getName() + " on "+ target+ " to be run every "+ delay+ " "+ timeUnit+ " after "+ delay+ " "+ timeUnit
SyncToAsyncChannel.class
c.deactivate()
!mDreamsEnabledByDefaultConfig
HttpStatus.SC_OK != statusCode
Assert.assertEquals(stringNumber,0)
faultSerialVersionUID.equals(FaultSerialVersionUID.FQCN)
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").append("#")
mForgotPatternButton.getVisibility() == View.VISIBLE
0 - originY
err.jspError(start,"jsp.error.attribute.unterminated",watch)
p != null
p > 0
super.onResolveLayoutDirection(layoutDirection)
terminal.receivedInput(postCreateText)
IndexReader.openIfChanged(oldReader,writer.w,true)
applicationListeners.httpSessionAttributeReplaced(this,name,value)
new JBList()
_buildTemplateWithGradle("rest","rest-dependency-management","--dependency-management-enabled","true")
value.readSignedInteger(offset,size)
ByteBuffer.allocateDirect(16)
SelectTimeZonePacificStandardTimeTest.class
getInInterceptors()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
FileUtil.compactPath(path)
comparator.compare(value,answer) < 0
new ExternalPaymentProviderPlugin(clock)
chars == null
new MediaBrowser.MediaItem(MediaBrowser.MediaItem.FLAG_BROWSABLE,bob.build())
Map self
Simple.of(type)
stack.stackSize > 0
new ObjectMapper().reader(DiskBalancerVolume.class)
logger.info("Strip code")
errorPos + 20
app.getSettings().SHOW_IMAGES
IllegalStateException e
httpServletRequest.getParameterValues(name)
times(2)
fieldType.storeTermVectorOffsets()
statistics.addPutTimeNano(System.nanoTime() - start)
args[4]
component.setMaxThreads(11)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
getCustomArgumentResolvers()
selenium.isVisible("link=Control Panel")
nri.mUid != callingUid
getActiveFgCall().getPhone().sendDtmf(c)
Messages.MESSAGES.pathParameterNotProvided(param)
_typeSettingsProperties.toString()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
original.getId() + 1
new CompositeException(innerError,t)
getEffectiveCleartextTrafficPermitted()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
chargeUAh > 0
assertEquals(0.7222222222222222,mm.auc_obj()._auc,1e-8)
projectFilesystem.exists(buckFile)
"content".equals(scheme)
MAX_PERCENT_DIFFERENCE=0.1
syncContext.setPreferences(getPortletPreferencesMap())
Integer.valueOf(stackIdStr)
selenium.isVisible("link=Control Panel")
mWidth - edgeWidth
(float)getMax() / 5
i.getTouchIconUrl() != null
triggerProto.getAfterEndOfWidow()
mBackdrop.animate().alpha(0f)
30 * 60 * 1000
order=3
http2Stream.inboundFlow()
logger.debug("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
functionFactory.exp(iX)
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid())
mValues[7]
minBukkitBuildVersion=612
NotifyUtil.show("Info",formatter.formatMessage(record),MessageType.INFO,listener,3000)
primitiveToWrappers.put(wrapperType,primitiveType)
a.getFloat(attr,0)
args.length > 3
mp.getValue()
msg.getType() == Message.Type.error
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(1L)).contextStart(withUser)
pw.println(ps.getInstantApp(user.id))
name.equals("getNetworkOperator")
"Unsupported filesystem scheme found in the backup target url. Error Message: " + newMsg
renderRequest.getAttribute(WebKeys.SOFTWARE_CATALOG_PRODUCT_ENTRY)
hour != 0
minutes >= 2
lp.height != defaultHeight
questions.size()
ShirtPocket.this.startDrag(clip,thumb,false)
new SvnRollbackProvider(selectedRevisions,mySvnVcs,containsExcluded)
ProtobufUtil.createSnapshotDesc(reqSnapshot)
NONCONFORMING_LR_RULE(165,"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle",ErrorSeverity.ERROR)
logger.error("Not a directory: " + dir.getAbsolutePath())
dlFileEntryFinder.findByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
Assert.assertEquals(326,md.getMetrics().size())
modificationDateField != null
scheduler != null
!mIsAttached
count <= 0
region == null
CACHE_LAYOUT_VERSION=9
{types}
page < 1
Timber.e("Dismiss dialogs")
Measures.RR(results,test)
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(new ClassifierOverride(1))
selenium.isVisible("link=Control Panel")
a.getFloat(attr,0)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"dbinfo",pw)
Thread.sleep(5000)
myDiffContentFactory.create(content)
WebUtils.isForward(request)
System.currentTimeMillis()
meta.getEncoding()
assertEquals(revisions.size(),myRevisions.size())
MAX_DIMEN_FOR_ROUNDING=1080
mock.setMinimumResultWaitTime(1900)
info.getType() & 0x7
contains="cached"
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
assertEquals(1,dataCountsDoc.get("bucket_count"))
DBCException e
selenium.isVisible("link=Control Panel")
gl2.glGetShaderiv(program,GL2ES2.GL_INFO_LOG_LENGTH,val,0)
LogFactory.getLogger().info("Could not find table or view " + tableName + " for column "+ columnName)
field.getRawType()
attributes.getFlags()
map.get(beanName).getClass()
SystemClock.nanoTime()
assertEquals(fc,fc2)
checkArgument(!"/".equals(resourcePath),"%s is the classpath root")
getActionBar()
JSONUtilities.safePut(options,"guessCellValueTypes",true)
name.equals(SETUP_METHOD_NAME) || name.equals(GET_ROOT_COMPONENT_METHOD_NAME)
myFindModel.isReplaceState()
sizeNeeded >= items.length
getVersion()
LOG.warn("Gradle execution error",e)
jaxbbean.addConstructorArg(paramsbean.getBeanDefinition())
actionButton.setRolloverImage(new ImageIcon(ca.getRolloverIcon()).getImage())
trade.getPrice()
part != null
mService.setUidPolicy(UID_A,POLICY_NONE)
getJndiString(JNDI_JMX_USER)
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
dimensionsSpec.getDimensions()
Integer.valueOf(leftStr)
mAttributes.getFlags()
actionId.equals(ActionKeys.IMPERSONATE) && PortalUtil.isOmniadmin(userId)
new CrypticClue("A great view - watch the rapidly drying hides get splashed. Check the box you are sitting on.",NULL_1838,new WorldPoint(2523,3493,1),"Almera's House north of Baxtorian Falls, search boxes on the 2nd floor.")
value.isNull()
assertEquals(4,dict.getSize())
IOException e
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
IccUtils.gsmBcdByteToInt((byte)0x8c)
ValueNode anchor
IBackupManagerService svc=mService; 
TextUtils.isEmpty(credential)
potentialResponse == null
Throwable t
s > 0
args.length != 1
assertLeftRightCategory(4,category1b)
type.getConstructor()
new NativeAllocationRegistry(nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
"Second position set to " + pos1 + " ("+ region.getArea()+ ")."
new byte[17]
3
result.signum() <= 0
callbacks.onHardwarePostDraw(canvas)
mService.mDisplayContents.get(i)
n == stringLength
mAppToken.hasContentToDisplay()
tableHasColumn("MicroblogsEntry","creatorClassNameId")
SCAN_STATUS_COMPLETE=1
public TokenStream create(TokenStream input){   return new KeepWordFilter(input,words,ignoreCase); } 
tplSnd.getParent().getChildren()[1]
enabled=true
containsInAnyOrder("VARIABLE=success","PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin")
objFactory.buildBean(name,null,false)
LibraryTask libraryTask
ACRA.log.w(LOG_TAG,context.getPackageName() + " reports will be sent by Http.")
Map.Entry<Integer,Object>
fluid != null
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
status != BackupConstants.TRANSPORT_OK
mJobs.get(i)
final ImageView buttonMore=(ImageView)view.findViewById(R.id.context_menu_more_button); 
resourceInfo.getResourceClass()
FluentIterable.of(method.getAnnotations())
data.length()
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
this.thrown.equals(IllegalStateException.class)
listAdapter.changeCursor(cursor)
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.")
Thread.sleep(5000)
SyncAccountService.addSyncAccount(filePathName,10,"test@liferay.com","test","http://localhost:8080/api/jsonws",false)
metadata.getFaces()
LOGGER.warning(e.toString())
origin.realComponent().doubleValue() > other
logger.error("{}",builder.toString())
buf.readableBytes()
cs == null
selenium.isVisible("link=Control Panel")
mPowerRequest.policy == DisplayPowerRequest.POLICY_DIM
!Algorithms.isEmpty(address) && !address.equals(title)
drawerLayout.closeDrawer(fragmentContainerView)
bucket.exists()
return false; 
expected == long.class
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
new CvsOperationExecutor(project)
AssetTagsNavigationWebUpgrade.class
name="java:comp/ds"
mContext.sendBroadcast(intent)
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor1")
location.asConstant().isNull()
assertEquals(17,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
GradleTaskDisplayNameMixIn.class
recipient.getExpireMessages() * 1000
dockedBounds.bottom + adjustment
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
serviceTester.systemReady()
loaded.getLoaded().getConstructor()
!mDreamsEnabledByDefaultConfig
!mService.mLockTaskController.checkLockedTask(tr)
ctx.getOuterContext()
mpi > -135
h - x
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
dataSource.setInitExceptionThrow(true)
"Python packaging tools and " + warningList
logger.error("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
return importsDestFile; 
new StringBuilder()
assertEquals("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>foo</groupId>\r\n"+ "    <artifactId>bar</artifactId>\r\n"+ "    <version>baz</version>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
selenium.isVisible("link=Control Panel")
PrintAttributes.enforceValidColorMode(currentMode)
mExpandedDialog != null
enabled=true
_connector.getResponses("METHOD /f\00o HTTP/1.0\n\n")
Lists.newLinkedList()
((GroovyObject)receiver).getMetaClass() != metaClass
arrayContaining("bar","foofoobar","foofoo")
data != null
recordSetVersion2.getVersion()
layout.setRefreshingLabel(label)
info.getVoiceMailNumberForSubscriber(subId)
e.getMessage()
new AsyncTask<Void,Void,Void>(){   @Override protected Void doInBackground(  Void... voids){     RecipientDatabase db=DatabaseFactory.getRecipientDatabase(getContext());     db.setMessageRingtone(recipient,NotificationChannels.getMessageRingtone(context,recipient));     db.setMessageVibrate(recipient,NotificationChannels.getMessageVibrate(context,recipient) ? VibrateState.ENABLED : VibrateState.DISABLED);     return null;   } } .execute()
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
ci.getConduit(info)
failure != null
new ObjectToMapTransformer()
Long.valueOf(timeString)
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,53.98)
return mRxTimeMillis; 
Short value
obj.getAcceptableTokens()
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
value != null
treeStyles.styles()
LOGGER.debug("Register profile {}",qualityProfile.getQProfileName())
Validator.isNull(className) && Validator.isNull(classPK)
Log.info("Disable autoInstallOSGiBundles as the contexts folder '" + scandir.getAbsolutePath() + " does not exist.")
private static class GetValueFromMapChecker extends PsiRecursiveElementVisitor {   private final PsiVariable key;   private final PsiVariable map;   private boolean getValueFromMap=false;   private boolean assigned=false;   GetValueFromMapChecker(  @NotNull PsiVariable map,  @NotNull PsiVariable key){     this.map=map;     this.key=key;   }   public void visitReferenceExpression(  PsiReferenceExpression expression){     if (assigned) {       return;     }     super.visitReferenceExpression(expression);     final PsiElement parent=expression.getParent();     if (parent instanceof PsiAssignmentExpression) {       final PsiElement target=expression.resolve();       if (key.equals(target)) {         assigned=true;       }  else       if (map.equals(target)) {         assigned=true;       }     }  else     if (!(parent instanceof PsiReferenceExpression)) {       return;     }     final PsiElement grandParent=parent.getParent();     if (!(grandParent instanceof PsiMethodCallExpression)) {       return;     }     final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;     final PsiReferenceExpression methodExpression=(PsiReferenceExpression)parent;     final PsiElement target=expression.resolve();     if (!map.equals(target)) {       return;     }     final String methodName=methodExpression.getReferenceName();     if (!"get".equals(methodName)) {       return;     }     final PsiExpressionList argumentList=methodCallExpression.getArgumentList();     final PsiExpression[] arguments=argumentList.getExpressions();     if (arguments.length != 1) {       return;     }     final PsiExpression argument=arguments[0];     if (!(argument instanceof PsiReferenceExpression)) {       return;     }     final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;     final PsiElement argumentTarget=referenceExpression.resolve();     if (!key.equals(argumentTarget)) {       return;     }     getValueFromMap=true;   }   public boolean isGetValueFromMap(){     return getValueFromMap && !assigned;   } } 
@SuppressWarnings("unused") public Schema files(int version,TypeaheadV3 t){   ArrayList<String> matches=H2O.getPM().calcTypeaheadMatches(t.src,t.limit);   t.matches=matches.toArray(new String[matches.size()]);   return t; } 
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
ONE_MINUS_DST_ALPA(7)
expect(cluster.getClusterName()).andReturn("cluster").times(2)
redefined.getConstructor()
requestedProvider.get().verify(service)
json.getTextValue().getBytes()
selenium.isVisible("link=Control Panel")
serviceFacade.updateProcessGroupContents(rev,groupId,versionControlInfoDto,flowSnapshot,getIdGenerationSeed().orElse(null),false,true,entity.getUpdateDescendantVersionedFlows())
getTablename().getBytes()
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
return false; 
drawable != null
selenium.isVisible("link=Control Panel")
"Unknown id: " + mCurMethodId
new Duration(10,TimeUnit.SECONDS)
assertFalse(bulkResponse.hasFailures())
mPerformanceMap.get(userId)
enu.hasMoreElements()
"Excluding secondary region " + regionToFlush + " - trying to find a different region to refresh files."
recyclerView.indexOfChild(view)
_typeSettingsProperties.toString()
DynamicCounter.increment(filterName,"success",filter.filterType())
mView.setTransitionVisibility(mFinalVisibility)
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,true)
type.getConstructor()
parsedResult.getSqlType()
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
this.params.getBlock()
@Mock private HidProfile mHidProfile; 
client.filter(basicAuthentication("test","this")).get().uri("/").exchange().expectStatus().isOk().expectBody()
(Double)array[this.index]
Color.fromRGB(0xDECF2A)
Response.ok()
log.error("Error while closing command context",exception)
i < 1000000000
TelephonyManager.getDefault().getPhoneType()
assertModel(MODEL).query("select state, city from zips where state = 'CA'").limit(2)
new DSXOrder(pair,type,new BigDecimal("0.01"),new BigDecimal("900"),new Date().getTime(),0,DSXOrder.OrderType.limit)
SOCKET_TIMEOUT=30000
value.toLowerCase().contains(constraintLowerCase)
new Message(MSG_TXT)
mSmallBatteryDevice ? 3 : 30
!file.isHidden() && file.getPath().endsWith(".swf")
mock.expectedBodiesReceived("B+END","A+END")
/**   * {@inheritDoc}  */ @Override public Object clone(){   StringProperty prop=(StringProperty)super.clone();   prop.value=value;   return prop; } 
mHandler.removeCallbacks(pae)
getCurrCapacity()
mccStr.isEmpty()
newCount < reservoirSize
assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)
@Override protected AbstractBlockWrapper getPreviousBlock(){   if (myChildren == null || myChildren.isEmpty()) {     return null;   }   return myChildren.get(0).getPreviousBlock(); } 
new AssertionError("Could not find sliceShift")
Thread.sleep(50)
scanner.acceptResult(fqn)
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new AlertDialog.Builder(getActivity())
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
type == null && !type.getOpenWithApplication().isPresent()
log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()))
Number.class
type == VertexDataType.VertexBufferObject
clientBuilder.readTimeout(timeout,TimeUnit.MILLISECONDS)
_log.error(ioe,ioe)
!mPhones.contains(phone)
width / images.size()
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
Duration.millis(320)
printServices.size() >= 2
public void testJobQueues() throws IOException {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo="Maximum Tasks Per Job :: 10";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals("default",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName("test-job-queue-info-test");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } 
String pipelineName
selenium.isVisible("link=Control Panel")
Assert.assertEquals(0,key)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
mContext.startActivity(intent)
vector.iterator()
TelephonyManager.getDefault().getPhoneType()
TelephonyManager.getDefault().getPhoneType()
containsBox.setSelected(true)
nextRenderId=30
is(expectedSql)
id=15852
child.jni_YGNodeSetOwner(child.mNativePointer,0)
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
!isDefault() && !ApplicationManager.getApplication().isUnitTestMode()
mAutoScroller.autoScroll(-mFooterOffset,mSwipingToRefreshToDefaultScrollingDuration)
bibentries.size() == 0
logger.debug("attempting to login")
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
VectorAllocator.getAllocator(vv,50)
LOGGER.info("Application {} refreshed",newApp)
app.getSettings().AVOID_TOLL_ROADS.get()
ContactModel::getSmsSn
checkNotNull(jsonText,"Json should not be null")
public ExecutionParameters transform(Consumer<Builder> builderConsumer){   Builder builder=newParameters(this);   builderConsumer.accept(builder);   return builder.build(); } 
filename.endsWith(".jpg")
return 60_000; 
StringBuilder builder=new StringBuilder(); 
value.toLowerCase().contains(constraintLowerCase)
public Trigger withLateFirings(OnceTrigger lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
from >= to
CharSequence textToUse; 
content.matches(expected)
numKeys > 1
list.elements()
PortalUtil.getSiteDefaultLocale(groupId)
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.getDefaultInstance())
MonitoringPortletImpl.isMonitoringPortletActionRequest()
clocks.uptime+=1111
tempBlock.getCommitPath()
Thread.sleep(5000)
hook.startPlay(program)
ordinals.size()
delegate.update(entity)
i < pmd.getParameterCount()
getContext()
telephony.getDataNetworkTypeForSubscriber(subId)
nextInfo.directionInfo == null
verifyNull(decoder,text("(865733028143493,00I76,00,000,,,,,A,133755,210617,10.57354,077.24912,SW,000,00598,00000,K,0017368,1,12.7,,,0.000,,,0,0,0,0,1,1,0,,)074"))
block.postdominator=block
new TransientPropertyValueException("object references an unsaved transient instance - save the transient instance before flushing",childEntityName,parentEntiytName,propertyName)
suiteMethod.invoke(null,(Object[])new Class[0])
mGpsListener != null
publisher.publishWanReplicationUpdate(name,view)
realm.assertThread()
mHotspotBounds.set(left,top,bottom,right)
type.getConstructor()
optional=1
"Camera resolution: " + screenResolution
i < 3
DEFAULT_ADDRESS_BBOX_RADIUS * 10
i <= 0
t.equals(type)
r.toRuleString(true)
removeGroupIds.isEmpty()
new ListWidget(RuntimeEnvironment.application,formEntryPrompt,false)
put.writeToWAL()
new Counter(mOnBatteryTimeBase)
askForPermissions(new String[]{Manifest.permission.CAMERA},4)
@InputIntMethodAnnotation(42)
commentSuffix.length()
protocolProvider.getProtocolName()
case 6: 
log.info("munlocking " + file + " with length "+ length)
keyword.equals(CONF_NUM)
new SparkRuntimeContext(p)
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.INFORMATIONAL)
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),internalCallContext,invoiceConfig)
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
blockUri.getIdentifier().toString()
isTestOnBorrow()
LogFactory.getLogger().info("Could not find table or view " + tempTable.getName() + " for column "+ column.getName())
controller.getMedia() != null
response.header("location")
flexItem.getMarginStart()
type.getKeyName()
mBluetoothHeadset.startScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
myCardModel.getAnswerAlign()
sm.getString("standardRoot.startInvalidMain")
fieldType.equals(SupportedFieldType.DECIMAL.toString())
selenium.isVisible("link=Control Panel")
Integer.valueOf(3)
new HashSet<>()
"$" + functionName
expect(cluster.getClusterName()).andReturn("cluster").times(2)
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
logger.info("reading file from {}, repairedAt = {}",session.peer,repairedAt)
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
instance.startAction(getDefaultTitle(),null,false)
colorModeClass.equals("ScaledSizeMode")
GroovyJavaNonSecurityTestsSuite.suite()
XmppStringUtils.parseBareAddress(user)
guiResource.getImageBol()
GenericIntegrationTest.class
Exception e
selenium.isVisible("link=Control Panel")
new GeneratorException("Error writing " + file.getAbsolutePath())
mActionBar != null
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
uiSettings.setShowToolWindowsNumbers(myShowCodeLensInEditorCheckBox.isSelected())
assertPhoneNumberEqual("123123","0123123",false)
selenium.isVisible("link=Control Panel")
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
Reflection.methodHandle(type,"sizeOf",null)
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.short-title"),portletModel.getPortletId())
mContext.startActivity(intent)
attemptedPushes % 1000
FluentIterable.of(method.getAnnotations())
new StatsLogEventWrapper(tagId,6)
DEBUG=true
new IndexWriter(ramDir,analyzer,true)
new Paint(Paint.ANTI_ALIAS_FLAG)
new ByteArrayResource(groovyPages.get(location).getBytes("UTF-8"))
Integer.valueOf(stackIdStr)
LOGGER.debug("Error during file import",e3)
a.getFloat(attr,0)
TelephonyManager.getDefault().getPhoneType()
Integer.valueOf(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
JettySolrRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders).jetty; 
pkgs.get(i)
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
utf.length + 10
targetMeta.convertData(sourceMeta,r[rowcolumn])
Thread.sleep(5000)
upgradeVersion=36
Context.getAdministrationService().saveGlobalProperty(coreProp)
sTestCaseCounter == 1
eventType != XmlPullParser.START_TAG
new CuratorEventImpl(client,CuratorEventType.CHILDREN,rc,path,null,o,stat,null,strings,null,null)
new Location(resource)
DEFAULT_MAX_DHCP_RETRIES=2
logger.info("AUTHENTICATE")
new Message(MSG_TXT,false)
TypeConversionUtil.isAssignable(myS,myT)
new ObjectMapper().reader(HashMap.class)
mm.tryLock(key,4,TimeUnit.SECONDS)
!thisMatched && !elem.isInflected() && elem.getPOStag() == null
lookup.getProcessorByType(requestReportingTask.getType())
concatRef.isEightBits=false
new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())
isSavedPostsList()
new CompositeException(e,t)
readStayAwakeConditions()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
EmitterProcessor.create(1)
new Neo4jGraph(database.graph)
gatecoinOrder.getType()
t.getCause()
application.getApplicationContext()
m.muli(beta1)
position - dockDividerWidth
statusBar.setRedraw(false)
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new EnterSelectionDialog(shell,spoon.props,err_lines,Messages.getString("SpoonLog.Dialog.ErrorLines.Title"),Messages.getString("SpoonLog.Dialog.ErrorLines.Message"))
(j == -1) || (text.charAt(i + offset) == pattern.charAt(j))
XmppStringUtils.parseBareAddress(user)
doTestDefaultParser(true)
new TaskInstanceExtensionImpl(companyId,groupId,userId,assignees,workflowContextJSON,taskInstance)
channelBundles.contains(channelBundles)
length-- > 0
startGrids(NODES_CNT)
errorCheckInterval=1100
INITIAL_LAUNCH_IDLE_TIMEOUT=7500
Exception e
container.getVersion().toString()
hasFlag(FLAG_UP)
/**   * Defines the target visibility of properties in the target entity. Note this is not applicable to abstract or immutable classes.  * @return the visibility level of properties in the target entity  */ PropertyVisibility propertVisibility() default PropertyVisibility.PRIVATE; 
mMncStr == null
dir.mkdir()
order.getFilledSize()
writeRepeatedSFixed64(id,val)
Exception e
logger.info("Normalizing")
@NotNull
getViewAtRelativeIndex(0)
userGroupMember.getMemberId()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
permissions=4
player.sendMessage(new TextComponentString("Invalid schematic: " + e.getMessage()))
encodeMapKey(value)
revision.isEmpty()
url.toServiceString()
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
getService().hasPrimaryClip()
loaded.getLoaded().getConstructor()
myErrors.put(xmlName,customTagName)
List<CommitId>
/**   * Expose target document ID as this value's wrapped value. Primarily implemented to allow for transparent interoperability when used in concrete document types.  * @return reference DocumentId, or null if none has been set  */ @Override public Object getWrappedValue(){   return documentId.orElse(null); } 
new GroupDialog(frame,panel,null)
parent.getSubmittedCount() < (parent.getPoolSize())
lhs.getScore()
JDBCUtils.safeGetString(dbResult,"SOURCESCHEMA")
db.assertColumnDefinition(TABLE,"b_qualifier",Types.VARCHAR,3,true)
value == null
elementAt.isValid()
VcsException e
59L + 118L
ChronicleEngineEnpoint.class
parcel.readCharSequence()
new RuntimeException("Missing type parameter.")
SolidityType.Bytes32Type.decodeBytes32(topicBytes)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
mAccessibilityController.isTouchExplorationEnabled()
return true; 
Arrays.asList(ProjectUri.PluginRepositories.PluginRepository.xUri,ProjectUri.Repositories.Repository.xUri,ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri,ProjectUri.Profiles.Profile.xUri,ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri)
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss()
mActiveAgents.valueAt(i)
new Paint(Paint.ANTI_ALIAS_FLAG)
convert31XToMeters(xB,xA)
new SnippetInstaller(runtime,runtime.getGraalRuntime().getTarget(),HotSpotGraalRuntime.wordStamp(),assumptions)
checkPojoMetaClass()
T
win.mRemoved || !win.mHasSurface
mQsContainer.getLayoutParams()
Integer.valueOf(param.getValue())
fragmentManager.beginTransaction().add(rxPermissionsFragment,TAG).commit()
args[5]
DEBUG=true
2 * memsize.value() * 1024* 1024
mDark == dark
VIBRATE_LENGTH_MS=5
canHaveDisplayList() && canvas.isHardwareAccelerated()
doCast(returnType)
selenium.isVisible("link=Control Panel")
new KBArticleContentException()
bucket.exists()
graphModel.getUndirectedGraph()
Character.isJavaIdentifierPart(c)
child.getMeasuredHeight()
IgniteCheckedException e
realm.createObject(AllTypes.class)
RtlUtils.isLtr(english1)
sendMessage(CMD_STOP_AP)
SPEC_REGEN_TICKS=51
MAX_CACHED_HBASE_INSTANCES=31
builder.run()
onRotationLockChanged()
StringBuffer ret=new StringBuffer(100); 
triggerProto.getAfterEndOfWidow()
ActivityManagerNative.getDefault().updateConfiguration(config)
/**   * Reads.   */ private final LongAdder reads=new LongAdder(); 
DEBUG=true
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
shuffleWithInexistingUuids(project1.uuid(),project3.uuid())
getTelecomService().hasVoiceMailNumber(accountHandle)
Assert.assertEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
DEFAULT_WIDTH=0x008000000
file.getLocalFile()
LOG.info(exc)
colors.getResourceId(i,0)
verifyGetCommandNameCalled(3)
mSyncStatus.get(i)
boardPort.getPrefs().get("iserial")
two.setCoordinateIndex(1)
api == null
selenium.isVisible("link=Control Panel")
jobFinishHandler.onComplete(results)
selenium.isVisible("link=Control Panel")
Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
buildLocalCalleeContext(methodDescriptor,ectx)
PortalUtil.getClassNameId(className)
assertEquals("Incorrect number of fields",4,f.length)
ActivityManagerNative.getDefault().updateConfiguration(config)
!(result.get(0) instanceof Separator)
selenium.isVisible("link=Control Panel")
mVectorState == null && mVectorState.mVPathRenderer == null
Exception e
ran.nextInt(500)
mQsContainer.getX()
mVibratorService.vibratePattern(new long[]{0},0,new Binder())
Position.PREFIX_IN + 5
List<Class<? extends ITestNGListener>>
alterStatement.getUpdateColumns().put(newName,oldDefinition)
public TokenStream create(TokenStream input){   return new NGramTokenFilter(input,minGramSize,maxGramSize); } 
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
mInterpolator == null
expect(cluster.getClusterName()).andReturn("clusterOld").times(2)
Validate.notEmpty("Cookie name must not be empty")
dpToPx(4f)
saveCrendentialsInSmartLock()
FileUtil.toFile(searchPath)
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
localFileSystem.findFileByIoFile(vimKeyMapFile)
one.setCoordinateIndex(LEAF)
mLatestResult.isSslRecoverableException()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
GitAPIException lastException=null; 
PortletFileRepositoryUtil.getPortletRepository(groupId,PortletKeys.DOCUMENT_LIBRARY,serviceContext)
new UpdateNotifierTimerTask(this,verChecker)
logger.error("couldn't execute commandLine '" + commandLine + "'",e)
fraction * (nextValue - prevValue)
intent.resolveTypeIfNeeded(getContentResolver())
childLeftTuple.reAddLeft()
ClassUtil.verifyMustOverride(BeanSerializerFactory.class,config,"withConfig")
contract.getNewContrect()
analysis.getType(expression)
logger.warn("Did not recognise element named {}",localName)
minBukkitBuildVersion=697
context.var("long")
mTableInfo.getTableName()
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,notification.toString())
new Paint()
type.getConstructor()
type.getConstructor()
for (String s : blocks) {   if (ver.length() > 0) {     ver.append(',');   }   ver.append(s); } 
assertEquals("throughput",47.9126598178,model.getThroughput(),0.000000001)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
Thread.sleep(5000)
StringBuffer numberedSrcTextBuffer=new StringBuffer(); 
input.get(b,off,len)
fieldType.equals(SupportedFieldType.DECIMAL.toString())
config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString())
engine.refresh("test",true)
current == null
getCurrentRequestId()
PortletPreferencesFactoryUtil.fromXML(0,ownerId,ownerType,preferences)
getFloatValue(key,0.0F)
StringUtils.isEmpty(initExpr) ? 0 : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
doTest(true)
planRouteContext.getSnappedMode().getSmallIconDark()
Integer.valueOf(stackIdStr)
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
nodeInfo.getPlugins().getInfos()
factory.getConstructor()
get() != null
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
type.getConstructor()
CollectionItemInfo.obtain(column,1,row,1,isHeading,isSelected)
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod1.run();   } } 
new Paint()
(QMMObject)items[i].getData()
getPointer().getInt(0)
assertLeftRightCategory(2,category1a)
mTargetSdk >= O
selenium.isVisible("link=Control Panel")
counter <= max
FastMath.max(origin,num.doubleValue())
zController.sendData(doRequestStop())
assertEquals(2,schema.getUDTs().size())
store.invalidate()
RecentsHorizontalScrollView.super.removeViewInLayout(view)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
eventFunc.equals("conference_del_member")
max.getBlockY()
requestReceived.await()
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
mAttributes.getFlags()
IgniteException expected
return mChangingAppearingDuration; 
Exception e
!mPhones.contains(phone)
super.create(theClass,registry)
handler.quit()
lock.isLocked()
reader.release()
index > 0
mSharedElementNames.size()
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
mWasActivatedOnDown || !mNeedsDimming
dynamicType.getLoaded().getConstructor()
run()
Slog.wtf(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
nodeInfo.getPlugins().getInfos()
ufsPath.getPath()
lineArgs[1]
_log.warn("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
enabledDisabled(useStatistics)
result.ocFile.getMimetype()
GrailsDataBinder.createBinder(map,instance.getClass().getName(),request)
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
out.write(CONSTANT_VALUE_ARRAY_TAG)
event.getElement()
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
url.addArgument(selectName,value)
lastUid >= 0
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),put,true)
set(object,value.intValue())
DISMISS_MIN_DRAG_WIDTH_RATIO=.4f
currencyPair.counter.getCurrencyCode().toString()
StringBuffer answer=new StringBuffer(); 
cause.getMessage().startsWith("Relative Redirect detected on")
LOGGER.warn(msg.apply())
Throwable t
stmt.newBoundStatement()
onDetachedFromWindows()
CharSequence message
ATLAS_MAP_ENTRY_FIELD_COUNT=4
Utils.createInformativeDialog(mContext,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
new LayerVisitor(editSession,asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
Log_OC.wtf(TAG,"Unexpected intent " + intent.toString())
mVibratorService.vibrate(2000,new Binder())
selenium.isVisible("link=Control Panel")
from.getCanonicalPath()
(int)value < 0
return property; 
doTest()
telephony.getCdmaEriIconIndexForSubscriber(subId)
retransformsClasses=true
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,fromX,y,0)
Object... pathParams
this.beanFactory.containsBean(beanName)
IDLE_TIMEOUT_MS=120000
canWrite(mediaType)
this.spiceServiceListenerSet.add(spiceServiceServiceListener)
color.toLowerCase()
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
GridCacheEntry<UUID,String>
FileTemplateManager.getInstance()
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
statistics.addGetTimeNano(System.nanoTime() - start)
mNwService.getInterfaceConfig(mInterfaceName)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
new Paint(Paint.ANTI_ALIAS_FLAG)
u.equals(user)
DefaultAtmosphereRequest request
logger.debug("Mapped {} to {}",t,e.getValue())
pyClass.getQualifiedName()
keyspace()
ir.mHandler != null
matcher.matches()
FileUtil.loadFile(txtFile)
newState.score()
tracesFile.mkdirs()
logger.error("failed to create index [{}]",indexMetaData.index(),t)
_buildTemplateWithGradle("content-targeting-rule","rule-dependency-management","--dependency-management-enabled","true")
Arrays.asList("bash","-c",command)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.vr@1.0::IVr","android.hardware.media.omx@1.0::IOmx")
ParseException e
type.getConstructor()
AlluxioWorkerService.class
"Error resetting interface " + mInterfaceName + ", :"+ e
(float)getMax() / 5
j > size
result != START_SUCCESS
return 0; 
warn(Log.IGNORED,ignored)
closeDeclarationWithCommentBinders(getterOrSetter,PROPERTY_ACCESSOR,false)
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
commit()
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
new LFWDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,nChannels},outputNum,useSubset,new Random(seed))
mMenu.getVisibleItems()
writeSource.setReadCount()
mService.oneTouchPlay(getCallbackWrapper(callback))
logger.info("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
child.resetResolvedLayoutDirection()
mapper.getTypeFactory().uncheckedSimpleType(UpdateContainerCmdImpl.class)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
mSyncStatus.get(i)
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
/**   * Get DR pause state.  * @return DR pause state.  */ @Nullable public GridDrPause drPauseState(); 
client.getLocalPlayer() != null
getEffectiveCleartextTrafficPermitted()
Iterable<Boolean>
show.isPrivate()
vb.getData().clear()
0 != mNetworkCapabilities
supressTrailingZeroElements == false
return false; 
new Paint(Paint.ANTI_ALIAS_FLAG)
websocketComponent.setMaxThreads(11)
getTemplates(companyId,new long[]{groupId},resourceClassNameId,0,resourceClassNameId,null,null,status)
ImmutableList<HostAddress>
query.length()
data.length()
policy_empty == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
GridCacheEntry<UUID,String>
notifyManager()
mView.post(mAnimationStarter)
native_get_videoeditor_export_profile(vidCodec)
mCollapsibleHeight > 0
CANCEL_TIMEOUT_LIMIT=3000
mWindowManager.removeView(mPopupView)
/**   * Returns a trigger which never fires. Output will be produced from the using  {@link GroupByKey}when the  {@link BoundedWindow} closes.  */ public static OnceTrigger ever(){   return new NeverTrigger(); } 
popup.requestFocus()
MAX_PERCENT_DIFFERENCE=0.1
mHandler.postDelayed(pae,timeout)
filesQueue.get(0)
ret.size()
preloadQueue.size == 0
e.getMessage()
new PacketDecoder(support,new NamespacesHub(new Configuration()),null)
StringUtils.isEmpty(value) ? true : Boolean.parseBoolean(value)
mf.filter(popup.getMenu())
checkArgument(prestoTypeParameters.size() == fieldTypes.size())
pmmlScorecard.isUseReasonCodes()
onRotationLockChanged()
(TitanGraphTransaction)result.graph()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
mData.hashCode()
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING)
selenium.isVisible("link=Control Panel")
Node[]
modified || f.updateField()
vp.getCamera().resize(width,height,true)
mDownloadXtraDataPending=true
new RuntimeException()
new LeftTuple(f0)
new NullPointerException("the name is null")
complexColumnCache.values()
mQsContainer.getLayoutParams()
selenium.isVisible("link=Control Panel")
libraryDescriptionDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
item.setState(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
assertTrue(constraints.isEmpty())
UastUtils.isChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
resources.getResource(path)
assertEquals(tick7,results_overlapped_by.get(0))
IllegalArgumentException e
fraction * (nextValue - prevValue)
ctx.sendDownstream(e)
new StreamingModeExecutionState(NameContextsForTests.nameContextForTest(),"testState",null,NoopProfileScope.NOOP)
Beans.newDuration(jpaProperties.getPool().getMaxWait()).toMillis()
TelephonyManager.getDefault().getPhoneType()
part.getDataLocation()
WEB_SYNC_MANAGER=true
LOGGER.info("[{}] has loaded the CAS application context",event.getServletContext().getServerInfo())
mHorizontals == null
Integer.valueOf(taskIdStr)
mHotspotBounds.set(left,top,bottom,right)
join(actual,",","(",")")
Futures.transform(inputsUploadedFuture,ignored -> {   uploadingInputsScope.close();   return actionInfo.withRequiredData(ImmutableMap.of()); } )
lineageInfo.getParents()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
log.trace("Failed to deploy!!")
requestURI.length() - 5
USE_DISPLAY_LIST_PROPERTIES=true
ThirdEyeUtils.getTimeSpecFromDatasetConfig(datasetConfig)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
assertFalse(qr.hasFullRank())
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
stat.st_size.get()
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
cache.setRecord(key,record)
String.format("Timeout waiting to lock %s. It is currently in use by another Gradle instance.%nOwner PID: %s%nOur PID: %s%nOwner Operation: %s%nOur operation: %s%nLock file: %s",displayName,metaDataProvider.getProcessIdentifier(),ownerPid,ownerOperation,operationDisplayName,lockFile)
cache1.remove(1)
Throwable e
ImmutableSet.of("key","vertex","edge","element","property")
retriever.captureFrame()
currentMethod.getTypeParameters()
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
new QuickAdapter(HeaderAndFooterUseActivity.this,PAGE_SIZE)
myCache1.get("myKey1").getValue()
getDelegate().getSupportedCipherSuites()
(xmin > x && xmin < x + width) || (xmax > x && xmax < x + width)
invoice.getCBAAmount()
configServerSpec.size() > 1
timer.scheduleAtFixedRate(timerTask,period,period)
assertEquals(2,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
result.setWriteIfCompleted(true)
size=500
MavenLog.LOG.warn(e)
logger.debug("Invalid Atmosphere Version {}",javascriptVersion)
index > 0
CommonUtils.randomString(random.nextInt(10))
MultiValueMap<String,String>
response.getStatusCode()
httpResponseCode == 204
gatt.enableAdverisingSet(this.advertiserId,enable,timeout)
item.getName().matches(name)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionTanh.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,43.45703932447497,DeepLearningParameters.Activation.Tanh)
case 11: 
me.showWebPage(errorUrl,true,true,null)
mAuthorities.get(i)
data.remaining()
status().isMovedTemporarily()
!mAwake
Long.valueOf(delay)
mRouter.selectRoute(mRouteTypes,route)
protocol.read(inputStream)
apnContext.getWaitngApns()
root.getSourceSection() != null
typeConverter.convertTo(XMLStreamReader.class,createNonXmlFilterReader(exchange,stream))
result.expectedMessageCount(2)
Log_OC.wtf(TAG,"\t account is NULL")
1 < user.getListedCount()
Arrays.asList("http://schemas.xmlsoap.org/soap/","http://schemas.xmlsoap.org/wsdl/soap/","http://schemas.xmlsoap.org/wsdl/soap12/","http://schemas.xmlsoap.org/wsdl/soap/http","http://www.w3.org/2003/05/soap/bindings/HTTP/")
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
fragmentCollectionPersistence.filterFindByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,true,DEFAULT_CONFIG_IGNORE_LIST)
acos(arr,Nd4j.copyOnOps)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY)
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable)
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,unassignedInfo,true)
getEndPoint().fillInterested(_blockingReadCallback)
assertEquals("Response header " + name,result.getResponse().getHeader(name),value)
fileIds == null
payload.get(MEETING_ID)
ImmutableList.of(new Identifier("a"))
range.getFrom()
showMessage(context.getString(R.string.osmand_routing_experimental))
mService.setUidPolicy(UID_A,POLICY_NONE)
Mono<V>
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
Environment.getRootDirectory()
par == null
display.getMetrics(dm)
mSyncStatus.get(i)
assertInCompletionList("app.<caret>name",false,"status_bar_style=","codesign_certificate")
m.getClass()
CharSequence message
scorecard.isUseReasonCodes()
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Math.max(1.0,type.getProbability() / (1.0 - probabilityB))
Assert.assertSame(_ehcachePortalCache.ehcache,ehcache2)
Arrays.asList(0L,1L,2L)
endLine - startLine > 0
Exception e
processor.open(w,request)
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING)
logger.info("Expanding Jquery Aliases")
getEnvironment().updateClasspath(Collections.singletonList(testDir))
mCurrIconRow != null & mCurrIconRow.isVisible()
15 * 60 * 1000
verificationResult.getCount() <= 1
selectedFileTemp != null
ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
assertThat(o.takeNext()).isNull()
return false; 
Exception e
responsibleId=metadata.getValue(ProducteevTask.CREATOR_ID)
engine.execute(query).toString()
TextAttributesKey.createTextAttributesKey("DEFAULT_PARAMETER",IDENTIFIER)
editable=true
res >= mLen
event.isResuming()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
sm.getString("introspection.classLoadFailed")
FolderList.actionHandleAccount(this,accounts[0],accounts[0].getAutoExpandFolderName(),true)
createHalf(buffer.length(),init,workspace)
this.mGLState.setBlendEnabled(renderOptions.isDithering())
this.capNBT != null
AcquireJobsRunnable.class
Trans == TRANSPOSE
StartupManager.getInstance(myProject).registerStartupActivity(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
!cursor.moveToFirst()
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
selenium.isVisible("link=Control Panel")
result.getReceipt().getEnergyUsageTotal()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION)
totalHistogram.getValueAtPercentile(90)
Settings.Secure.getInt(context.getContentResolver(),Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK,1)
-1
Injection.provideDesignerNewsCommentsRepository()
(IntFloatVector)row
GL.glDrawArraysEXT(mode,first,count)
EnterpriseMapPublisherCreateCodec.decodeResponse(response).list
selenium.isVisible("link=Control Panel")
cache.setRecord(key,record)
s.count()
onDetachedFromWindows()
_response.reset()
Exception e
mg.maxGap(input)
obtainMessage(MSG_TIMEOUT,state)
mHorizontals == null
Thread.sleep(100)
controllerErrors != null
!mWindow.getSharedElementsUseOverlay()
this.constraints.updateFromFactHandle(handle)
this.registrations.values().stream().filter(registration -> registration.getClientAlias().equals(clientAlias)).findFirst().orElseGet(null)
LOG.info("Removed connection {} for {} - open: {}",connection,this,open)
mWm.freezeRotation()
doesAddToastWindowRequireToken(attrs.packageName,callingUid,attachedWindow)
requestContext.getUri().getPath()
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope,Property.Filtered)
note2.id()
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
loaded.getLoaded().getConstructor()
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
inOrder.verify(mockAwareService).subscribe(eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
telephony.getDataNetworkTypeForSubscriber(subId)
mode != null
Integer.valueOf(taskIdStr)
_log.error(ioe,ioe)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
intent.resolveTypeIfNeeded(getContentResolver())
@ManyToOne(optional=false) private Middle middle; 
extractor.setScopeAll()
59L + 118L
sweepAngleOuter % 360f <= Utils.FLOAT_EPSILON
getTimeout()
DfsSearchResult.plusOne(stats.totalTermFreq())
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
subscriber.tryEmit(String.valueOf(i))
sourceIterator.numExamples()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commit()
logger.warning(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=false
service.handlePinMmi(dialString)
j / 2 + from
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
-4
cmdEntry.getKey().equals("-help") || cmdEntry.getKey().equals("-failover")
return availableVideoEncodings; 
kbase.newStatefulSession(conf)
Trans == TRANSPOSE
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
new Paint(Paint.ANTI_ALIAS_FLAG)
source=this
n.extras.getString(Notification.EXTRA_TITLE)
args.length == 3
loaded.getLoaded().getConstructor()
four.setCoordinateIndex(LEAF)
new SimpleDateFormat(DATE_TIME_FORMAT)
getMyApplication().getFavorites().getVisibleFavouritePoints()
Integer.valueOf(rightStr)
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
call.getProject()
mHandler.postDelayed(pae,timeout)
assertTrue(prj.nodes().contains(grid(4).localNode()))
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,401)
mPowerManager.isScreenOn()
vb.getData().capacity()
include.hashCode()
packet.getFrom().split("/")
mAuthorities.get(i)
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED)
public TokenStream create(TokenStream input){   return new EdgeNGramTokenFilter(input,side,minGramSize,maxGramSize); } 
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString(),any(Exception.class))
logName()
defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
new FileInputStream(props)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
super.remove(input)
type.getConstructor()
log.warn("Problem in JSR223 script " + e,e)
outActivity.length > 0
name.length() > 0
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
computator.getContentRectMinusAxesMargins()
(imgRef != null) && (imgRef.charAt(0) == '#')
!jackson2Present
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
ShirtPocket.this.startDrag(clip,thumb,false)
_validation_metrics.auc().maxF1()
Name.guess(name)
peekNode()
zkDb.snapLog.getSnapDir()
ASSET_TYPE buildAsset(AssetUri uri,DATA_TYPE data); 
view.flatMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
name != null
ServerUtilities.unregister(this,FirebaseInstanceId.getInstance().getToken(),accountId)
position.getFixTime()
!hasRows(targetConnection,tableName)
selenium.isVisible("link=Control Panel")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
!isEnabled()
new IOException(e.getLocalizedMessage())
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=4
mQsContainer.getX()
selenium.isVisible("link=Control Panel")
fRestriction && ondemand
body.getData()
assertEquals(1,persons.size())
-935352307
redefined.getConstructor()
localLOGV || true
_count != 0
um.getUsers()
TypeUtils.getKoltinConstructor(constructors)
type.getConstructor()
secretQuestionPanel.getSecret()
i < 100000000
DEBUG=true
commState.putBoolean(syncCommit)
type.getConstructor()
UnderFileSystem.get(tmpFolder)
Tokens.isIgnoredWhitespace(t) || isUnquotedWhitespace(t)
e.getMessage()
ScriptingUtils.getMatcherForInlineGroovyScript(mappedAttributeName)
person.getVoidReason()
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFolder.Label",realTargetdirectory))
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getKeyName()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
maxSize(new Fixed(width))
apnContext.getWaitngApns()
@NotNull
mpi < 135
Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor()
bottomIndex > topIndex
client.get(path)
System.currentTimeMillis()
part.getEndLine()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
new IndexWriter(directory,ANALYZER,true)
enabled=false
dest.writeLong(mSubId)
super.dispatchTouchEvent(ev)
new Paint(Paint.ANTI_ALIAS_FLAG)
portlet.getPortletId()
Flux.from(inputStream).flatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
LOG.info("received message " + (TopologyMaster.PublishMetrics)message)
mDataAuthorities == null
id=15849
WikiTestUtil.addPage(TestPropsValues.getUserId(),node.getNodeId(),ServiceTestUtil.randomString(),ServiceTestUtil.randomString(),true,serviceContext)
alpha=1
HornetQAutoConfiguration.class
TunablyAggresiveChaosMonkey chaos=new TunablyAggresiveChaosMonkey(ctx); 
inputMaskArray != null
reader.release()
UADExporter.exportApplicationDataInBackground(applicaitonName,selUserId,themeDisplay.getScopeGroupId())
selenium.isVisible("link=Control Panel")
addIndex(indices)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccesssor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
hasTimedOut()
bindingGroup.has(PORT_OFFSET)
AssetTagLocalServiceUtil.checkTagsWithProperties(userId,groupId,queryRule.getValues())
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",1,SECONDS)
DEBUG=true
AtmosphereResponse.create()
this.mModel=mModel
ensureGreen()
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) == null
String.format("%-15s: -",username)
mMncStr == null
suiteClass.getName()
mock.expectedMessageCount(1)
return true; 
Bytes.toBytesBinary(regionname)
classType.getClassName()
addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
DEBUG_ALL_ACTIVITIES || false
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PLAY_FUNCTION)
sDefaults.putBoolean(KEY_PERSIST_LPP_MODE_BOOL,false)
addTest(19,23,180.0f)
new Paint(Paint.ANTI_ALIAS_FLAG)
entry.getKey()
mHandler.removeCallbacks(pae)
lp.onResolveLayoutDirection(layoutDirection)
MUCAdmin iq=new MUCAdmin(); 
new IndexWriter(dir3,anlzr,false)
MapActivity.getMapViewTrackingUtilities()
cache.setRecord(key,record)
!isTopLeftVisible
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
_freemarkerEngineConfiguration.getResourceModificationCheck()
totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()
SettingsBaseActivity.getRoutingStringPropertyName(this,p.getId(),p.getDescription())
metadata.getFaceRectangles()
fromElement.getPropertyType(propertyName,propertyPath)
setImageDrawable(icon)
annotation.names()
!UIUtil.isUnderAquaBasedLookAndFeel() || !UIUtil.isUnderDarcula()
args == null
EqualityComparer<T>
oldValue != null
Arrays.equals(this.element,other.element)
KtPsiUtilKt.getCalleeHighlightingRange(expression)
LocalFileSystem.getInstance().findFileByIoFile(projectFile)
selenium.isVisible("link=Control Panel")
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
ruleContext.ruleError("Xcode version must be specified to use an Apple CROSSTOOL")
dbCollection.save(clusterEvent)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
block.getX() + 1.5
ldapConfig.getAttrCrlBinary()
BASE=9000
setEditorText(expressions.get(myHistoryIndex))
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
new DateTime(getMillis())
new AndroidDownloader().downloadAsString(fileListURL)
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,false)
Results.unauthorized()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(1)
StringBuffer buffer=new StringBuffer(); 
_connector.getResponses("GET /foo?data=1 HTTP/1.0\nhost: host:80\n\n")
showRecentApps(true)
Item headerItem; 
logger.error("Error creating pool to " + host,t)
JvmDeclarationOriginKt.OtherOrigin(myClass,valuesFunction)
REASSIGNMENT_IN_PROGRESS(59,"A partition reassignment is in progress",new ApiExceptionBuilder(){   @Override public ApiException build(  String message){     return new ReassignmentInProgressException(message);   } } )
drawGeometry(g)
sizeNeeded >= items.length
case 13: 
!list.append(pi)
realm.assertThread()
log.error(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
builder.length()
tableHasColumn("MicroblogsEntry","creatorClassNameId")
selenium.isVisible("link=Control Panel")
e.getKey() > 25
restEnableGzip=false
Numeric.encodeQuantity(filterId)
showSelfHostedSignInForm()
getPath("InputPackageDeclarationDiffDirectory.java")
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
showSelectionToggleButton.setSelected(false)
BuildParameters parameters
n.intValue()
layer.setInput(input)
mState != STATE_FINISHED
mPowerManager.isScreenOn()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(36)
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
LOG.error("writeToDisk == true but configFilename == null")
bibentries.size() == 0
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,null))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingUrl",value))
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
"0.0.0.0:" + DEFAULT_NM_LOCALIZER_PORT
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
BooleanUtils.isFalse(p.getMetadata().getExcluded())
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).otherwise(exceptionHandler)
MessagingException me
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn())
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
selenium.isVisible("link=Control Panel")
evaluation.evalTimeSeries(predicted,actual)
JSError.make(AbstractCompiler.READ_ERROR,getName())
ACRA.log.e(LOG_TAG,"Could not send crash Toast",e)
Slog.e(TAG,"FLP HAL not supported")
SemVerMatcher.parseFromText(version)
previewData == null
((Element)iter.next()).getName()
mNetAttributes[type].mLastState == state
@Id @GeneratedValue(strategy=GenerationType.IDENTITY) private String id; 
super(pipeline,null,HEAD_NAME,false,true); 
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
loaded.getLoaded().getConstructor()
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
StringBuffer charNum=new StringBuffer(); 
DevKitBundle.message("inspections.component.not.registered.quickfix.family")
new Paint()
anchorView.getWindowToken()
new WeightedRandomChestContent(item,weight,max,max)
executorService.isShutdown()
WAKEUP_STATS=true
AppLog.v(T.NOTIFS,"GCM Error: " + errorId)
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)
new RedissonSession(id)
sm.getString("namingContext.nameNotBound",name.get(0))
params.getConsole()
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
primitiveToWrappers.put(wrapperType,primitiveType)
1000 * 60 * 3
e != null
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_script_name"))
decoder.strippedChannel()
Log.wtf(TAG,"This will become an error",ex)
!isPartialUpdate
Integer.valueOf(stackIdStr)
new DistributedRowMatrix(outPath,outputTmpPath,numRows,other.numCols())
new V(1,new BooleanSetting(false))
assertFalse(voyageReport.has("onboardCargos"))
securityMode != SecurityMode.None
postfix.startsWith("id")
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
handleExportApplication()
isAvailable(status)
target.getShortName()
waitForOptimization(function,120000)
configureWriteBufferForRead()
new PebbleHealthActivitySample(stepsRecord.timestamp,userId,deviceId,stepsRecord.getRawData(),stepsRecord.intensity,stepsRecord.steps)
super.dispatchTouchEvent(ev)
return false; 
peekServiceForUserLocked(userId)
DateTimeFormat.getFormat("dd/MM/yy HH:mm")
WebSettings.setTextSize(WebSettings.TextSize.NORMAL)
Trans == TRANSPOSE
myTaskManager.suggestBranchName(localTask)
c.getSimpleName()
MAX_EXCEPTION_EDGE_OP_DISTANCE_FROM_END=2
config.getServerNumThreads()
parts.length < 1
new FileHyperlinkRawData("/home/karma-chai-sample/test/test.js",1,-1,3,s.length())
Integer.valueOf(2)
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
Arrays.asList(User.class,Organization.class,Role.class,UserGroup.class,Group.class)
new LinkedList<>()
new HashMap<>(queryMemoryReservations)
length > Integer.MAX_VALUE
ConcurrentHashMap<PropertyDescriptor,TypeDescriptor>
Throwable t
mFacetCategoryMap.get(packageName)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
XmppStringUtils.parseBareAddress(userJID)
MATCH_SYSTEM_ONLY | MATCH_DISABLED_COMPONENTS
log.warn("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
anyOf(containsString("Connection is closed"),containsString("Socket closed during message assembly"))
uuid.replace("-","").substring(0,8)
vCard.getTextTrim()
logger.warn("Cannot update media data for group member ({})",e.getMessage())
qp.getUniqueItems()
Thing.class
selenium.isVisible("link=Control Panel")
revWalk.release()
buffer.toString()
input.isSpecifyFormat()
mRepeat > 1
robotstxtServer.allows(webURL)
col2d.addiRowVector(epsilon1d)
new ModelNode().set(60000)
fingerId == 0
RoleLocalServiceUtil.getRole(companyId,name)
(byte)0xff
getLocationEnabled()
buffer.getInt8()
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).finallyDo(() -> _isFetching.onNext(false))
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
users.get(i)
Integer.valueOf(taskIdStr)
second.get(i)
app.info.targetSdkVersion < targetSdkVersion
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
revisionVersion=5
updateState(CHANNEL_TEMPERATURE,message.convertToState(valueSelector))
!includeSpecifiedOrganization
new IOException()
new ModelMetricsMultinomial.MetricBuilderMultinomial(domain)
"no".equals(chWeightingsStr)
return 1; 
List<Middle>
StringBuffer sb=new StringBuffer(); 
selectBoxList.setScrollingDisabled(false,y)
"/html/portlet/" + jspPath + "/"+ categoryKey+ ".jsp"
(showcaseX != 1000000 && showcaseY != 1000000) || !hasNoTarget
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg)
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,true)
result.wasNull()
verify(connection,exception,error)
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
dist > maxDist
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,false)
getLog().warn(e.getMessage())
fragFilename == null
List<DataSet>
Build.VERSION.SDK_INT > Build.VERSION_CODES.M
logger.debug("rapidRefreshFutureEnd stopping")
!token.hasVisible && !mClosingApps.contains(token)
FISHING_ROD(346,1,64)
aai != null
buf.capacity()
_layout.isTypePanel()
new Paint(Paint.ANTI_ALIAS_FLAG)
edge.setType(edgeDefault)
collectionRecords != null
expected=192
String.format("Cannot add already existing column family \"%s\" to keyspace \"%s\"",ksName,cfName)
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file)); 
checkClosed()
!MessageView.this.mMessage.isSet(Flag.X_DOWNLOADED_PARTIAL)
Integer.parseInt(nid[0])
recycle(true)
public <A>S from(Expr<A> entity,A first,A... rest){   List<A> list=new ArrayList<A>(rest.length + 1);   list.add(first);   list.addAll(Arrays.asList(rest));   return from(entity,list); } 
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
paramEntry.getKey()
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
targetMethod.recordCall(posBefore,target,debugInfo,true)
assetDisplayPageEntry.getLayoutId()
new char[16384]
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
synchronized (this) {   updateDisplayLocked(); } 
this.supervisors
e.awaitTermination(24,TimeUnit.HOURS)
KieSessionModelImpl kSessionModel
hz.getCluster().getLocalMember().isSuperClient()
assertEquals(29,count)
testClass.getName()
GL20.glUniform2(location,v)
!file.isInLocalFileSystem()
PsiTreeUtil.getParentOfType(element,PyClass.class)
tableHasColumn("KBComment","helpful")
name="java:/ConnectionFactory"
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF
transparencies != null
child.resetResolvedLayoutDirection()
testIncludeFilter(query,5,"Filter",34)
variables.get(i)
DynamoDbConfigurationSource.class
markerYear == currentYear
DateTimeFormat.getFormat("dd/MM/yy")
toArrayHelper(1)
new Insets(6,0,0,6)
DEBUG=true
connectionManager.markOwnerAddressAsClosed()
mapCopy.getName()
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
isDevBuild()
m.getClass()
viewToClick != null
features.isKeyOrdered=false
SimpleTextAttributes.merge(SimpleTextAttributes.fromTextAttributes(forcedAttributes),simpleTextAttributes)
platformVersion < MNC
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
isScannerInSameProcess()
SpringApplication.class
mFile.getPath()
waitForMappingUpdateOnAll("dynamic_table","my_object.a")
WEB_SYNC_MANAGER=false
object=event.getOldObject()
mInstalld.snapshotProfile(appId,packageName,codePath)
holder == null
mapper.getJsonFactory()
equalTo(0l)
assertEquals(expectedResponse,orig.getResponse())
clusterSet.getClusterCount() < initialClusterCount
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
computator.getContentRectMinusAxesMargins()
a.getInt(attr,0)
states.length == 3
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ mCurrentFocus+ "}}"
mNextWakeFromIdle != null
@Autowired ApplicationEvents applicationEvents; 
equalTo("Eclipse")
src.copy(src.getConfig(),false)
new EnterStringDialog(shell,Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Title"),Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Default"),Messages.getString("RepositoryExplorerDialog.Directory.Create.AskName.Message"))
query.length()
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,WALL_17050,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPS_29993,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,ROCKY_HANDHOLDS_26400,ROCKY_HANDHOLDS_26401,ROCKY_HANDHOLDS_26402,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,LOOSE_RAILING,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,ORNATE_RAILING,ORNATE_RAILING_17000,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCKS_6673,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,BROKEN_FENCE_2618,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990,TUNNEL_30959,HOLE_30966,OBSTACLE,OBSTACLE_30767,OBSTACLE_30964,OBSTACLE_30962,LOOSE_RAILING_2186,LITTLE_BOULDER,ROCKSLIDE_33184,ROCKSLIDE_33185,NULL_33327,NULL_33328,BROKEN_WALL_33344,BIG_WINDOW,LOW_FENCE,STILE,STEPS)
assertEquals(0.4934239,mm.mse(),1e-4)
nextPos != mBoundPos
!isConsole && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
TelephonyManager.getDefault().getPhoneType()
_siteNavigationMenuPortletInstanceConfiguration.navigationMenuType()
classLoader instanceof GroovyClassLoader
dyn.remove("delays")
conceptAnswer.getConcept()
Log.e("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
return true; 
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)")
Files.newOutputStream(self,CREATE,APPEND)
backgroundTask != null
assertEquals(2,result.getAuthorities().size())
Long.parseLong(jvmName.split("@")[0])
delegate.open(filename,grabSize,idType,highId,maxId)
s == null
_log.error(ioe,ioe)
new Builder().setDuration(3000).setTextColor(android.R.color.holo_green_light)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false)
metadata.getFaceRectangles()
Set<String>
evaluate(123.5,DataTypes.FLOAT)
sb.toString()
added.isEmpty()
stop < start
T
params.getSimulatePlatformVersion()
QuotaCache.this.namespaceQuotaCache.contains(ns)
fileSystem.move(archive,archivedOutputFile(i + 1))
UIUtil.getTreeSelectionBackground()
new NullPointerException()
sep < 0
new VelocityTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_velocityEngine,_templateContextHelper)
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
configureWebDotXmlAtmosphereHandler(sc)
myAutomaticStartLevel.isSelected()
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
event.getY()
serialVersionUID=3256441400072353336L
PersistentTask<Params>
selenium.isVisible("link=Control Panel")
paramName.substring(6)
securityMode != SecurityMode.None
SCAN_STATUS_PARTIAL=0
Boolean.parseBoolean(ldapConfig.get("startEmbeddedLdapServer"))
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
mWorkerId + BASE_FILE_NUMBER
new TestCaseGeneratorImpl(false)
this.chatroom.getIdentifier().equals(chatRoomName)
inputBind.setDescription(bind.description())
typeSettingsProperties.toSortedString()
new ConnectionError(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame)
String.format("Warning: The following roles [%s] are unknown. Make sure to add them to the [%s] file. " + "Nonetheless the user will still be associated with all specified roles",Strings.collectionToCommaDelimitedString(unknownRoles),rolesFile.toAbsolutePath())
mSyncStatus.get(i)
jpegQuality < 1
expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
Log_OC.wtf(TAG,"Trying to send a NULL OCFile")
repository.loadForRequest(urlEh2,null)
!message.containsKey(key)
new DBException(ex,dataSource)
assertTrue(CompressionTest.testCompression("SNAPPY"))
sendMessage(CMD_STOP_AP)
this.conversation.getContactJid().split("/")
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
VDBG=true
toJSON(entry.getValue())
!mTranslucentStatusBar
getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
sourceEdgeTextData.getText().isEmpty()
selenium.isVisible("link=Control Panel")
mNavigationBarView.getPaddingStart()
Log.wtf(TAG,"This will become an error",ex)
loaded.getLoaded().getConstructor()
new IndexWriter(dir,new WhitespaceAnalyzer())
mSeekBar.setProgress(mLastAudibleStreamVolume)
cc.isEnabled()
IntegerMulNode.class
nextPos != mBoundPos
sRecentsBlacklist.contains(t.realActivity.getClassName())
videoInfoPage == null
savedNetwork.setParameters(newParams)
"Use " + ATT_LOGOUT_URL + " or "+ ATT_LOGOUT_HANDLER+ ", but not both"
Collection<LocalInspectionToolWrapper>
event.getX()
DefaultCacheKeysFactory.createNaturalIdKey(naturalIdValues,persister,session)
wlZipFilename.getText()
Internal.prefixKeyWithSalt(key)
cs == null
mapper.getJsonFactory()
applyDefaultViewName(request,mv)
Strings.isNotBlank(javaAgent)
e.getCacheHits()
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)
(visibility & VISIBILITY_MASK) == VISIBLE
realUserTagEventDel.getObjectId()
asParserError(e)
t == null
mHorizontals == null
threadHandler.get().post(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
componentSystems.hasNext()
graphBuilderConfig.eagerResolving()
model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(),HistoryReference.TYPE_SPIDER)
i.hasNext()
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
First=word.substring(0,3)
Response.ok()
checkPojoMetaClass()
surfaceChanged
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,false,false,factory)
ChaosMonkey.class
loaded.getLoaded().getConstructor()
idx + 1
mTfs.setPin(mTfs.open(path),true)
EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING)
Object key=keys.next(); 
VertexAttribute.Color()
serviceTester.systemReady()
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,toNode,direction.reverse())
LOGGER.debug("No file list editor found.")
nextTokenIsFast(b,IDENTIFIER)
log.warn("Unrecognized Oracle client version at " + oraHome)
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,6)
new Descriptor("OSR_migration_end",true,null,void.class,long.class)
w.mAttachedHidden || !w.isReadyForDisplay()
new SqlSession(null,null,null,resolver,null,null,null)
preResourcesElementDesc.getStoreFactory()
request.getLocalAddr()
XMLInputFactory.newFactory()
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
-1083561650
Object edge
Rect r=(Rect)o; 
dlFileEntryService.getFileEntries(groupId,folderId)
TopAndRecentlyPlayedTracksLoader.getRecentlyPlayedTracks(getApplicationContext())
String.format("%.2f",number)
WindowedValue.valueInEmptyWindows(4,PaneInfo.NO_FIRING)
new SampleRoboApplication()
request.getServletPath()
t.isFreeformTask()
POOL_LIMIT=12
selenium.isVisible("link=Control Panel")
part1.equalsIgnoreCase("error")
appMode.getSmallIconDark()
ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_OBJECT,parser::getTokenLocation)
ClassFileVersion.forKnownJavaVersion(enforce.value()).compareTo(supportedVersion) < 0
colors.getResourceId(i,0)
new ArrayList<>()
MAX_PERCENT_DIFFERENCE=0.1
mHandler.removeCallbacks(pae)
Func1<Exception,Observable<R>>
ColorResources.getColor("tabbedPaneBorderHighlight")
IndexReader reader=IndexReader.open(dir); 
getUriBuilderFactory().expand(uriTemplate)
loadMetadataSuceeded=true
MeasureSpec.makeMeasureSpec(maxSize,MeasureSpec.AT_MOST)
service.asBinder().isBinderAlive()
mSearchInput.setFocusable(focusable)
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
assertClusterSize(2,nodes[0])
Trans == TRANSPOSE
mAdapter != null
properties.contains(STRING_RECENT_SEARCHES)
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
getNotificationInterface().getHintsFromListener(mWrapper)
Object edge
getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)
doTestNewInference(BASE_PATH + "/" + getTestName(false)+ ".java",warnings,false)
failure != null
getNotificationInterface().getHintsFromListener(mWrapper)
new ModelNode().set(15000)
tracesFile.mkdirs()
me.getComponent() == myCurrentComponent
new IndexWriter(indexStore,new SimpleAnalyzer(),true)
mListener.onInputUpdated(inputId)
add2(ds[2],yact[0])
clone.setName(getName())
drawPath(g)
new StringBuffer()
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
fraction * (nextValue - prevValue)
blog.getRemoteBlogId()
XContentHelper.toXContent(response,XContentType.JSON)
renderNotebookv2(sourceDoc,input.getFormat())
new RuntimeException("Container " + containerName.asString() + " failed to execute "+ Arrays.toString(args))
assertEquals(2,map.size())
!mDreamsEnabledByDefaultConfig
_log.error(ioe,ioe)
uadDisplay.searchCount(selectedUserId,null,displayTerms.getKeywords(),searchContainer.getOrderByCol(),searchContainer.getOrderByType())
attributes == null
new LinkedFileViewModel(linkedFile,entry,databaseContext,taskExecutor,dialogService)
in.readUTF()
inflater.inflate(R.layout.mainfrag,container)
TimeUtils.nanoTime()
if (showMultiWindowTimeBar) {   Timeline timeline=player.getCurrentTimeline();   int windowCount=timeline.getWindowCount();   long remainingMs=position;   for (int i=0; i < windowCount; i++) {     timeline.getWindow(i,window);     if (!timeline.getPeriod(window.firstPeriodIndex,period).isAd) {       long windowDurationMs=window.getDurationMs();       if (windowDurationMs == C.TIME_UNSET) {         break;       }       if (i == windowCount - 1 && remainingMs >= windowDurationMs) {         seekTo(i,windowDurationMs);         break;       }       if (remainingMs < windowDurationMs) {         seekTo(i,remainingMs);         break;       }       remainingMs-=windowDurationMs;     }   } }  else {   seekTo(position); } 
case 5: 
proc != null
new ConnectorTableLayout(handle)
System.currentTimeMillis()
index < 0 && index >= myArray.size()
System.nanoTime()
BeanUtil.setProperty(target,parameter,value)
file != null
TimeoutUtil.sleep(sleptAlready ? 10 : delay)
_typeSettingsProperties.toString()
Map<String,String>
rollbackCount <= 0
GlobalSearchScope.projectScope(getProject())
-828565021
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
100 * 1024 * 1024
V
type.getConstructor()
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
finalOverlayView.getParent() != null
lowestWeightAndIndex.getKey() < weight
firstPos != mTargetPos
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
uniqueField.getType().toObject(doc.getField(uniqueField.getName()))
DEBUG=true
sr.makeNextStartId()
LauncherActivity.isLaunchUri(uri)
qux.getConstructor()
entry.getKey().subscribeToRootRefreshEvents(entry.getValue(),myLogRefresher)
List<ActivityManager.RecentTaskInfo>
i=0
getClusterMap().put(buildAttributeName(name),value)
GitFileUtils.delete(myProject,root,files,"--ignore-unmatch")
getTaskWriterCount(session) > 1
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
super.onResume()
LOGGER.debug(e.getMessage())
super(0); 
uniqueField.getType().toObject(doc.getField(uniqueField.getName()))
GenericAttributeValue<String>
intent.resolveTypeIfNeeded(getContentResolver())
Integer.valueOf(patchVersionString)
mFragments.mCurState < Fragment.CONTENT
jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY)
data.get(0).toUpperCase()
t=b.getBroadcasterConfig().applyFilters(r,t)
def.needsInput()
tex.getFieldValue("norfac")
TreeClassChooserFactory.getInstance(project).createProjectScopeChooser(title)
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
blog.getRemoteBlogId()
name.length() > 0
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
testConsumerConfig()
selenium.isVisible("link=Control Panel")
setX((mWidth > 0) ? (mPosition * mWidth) : 0)
StringUtil.isEmpty(source)
selenium.isVisible("link=Control Panel")
pluginPanel.init()
singletonComponent == null
super(expression," \t",startTime,zone,0,1); 
longSize >= 530
type.getConstructor()
expandableView.getActualHeight()
cv.visitInsn(DUP)
return true; 
@Override public PostgreTableReal getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
toArrayHelper(array,1)
scanFeatures(getCamelKarafFeatureUrl(),"camel-core","camel-spring","camel-test")
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
mState.isAlive()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
/**   * @author yole  */ public class CoverageProjectViewDirectoryNodeDecorator extends AbstractCoverageProvejctViewNodeDecorator {   public CoverageProjectViewDirectoryNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(element.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     if (element instanceof PsiDirectory) {       final String informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);       if (informationString != null) {         appendCoverageInfo(cellRenderer,informationString);       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(node.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }     String informationString=null;     if (element instanceof PsiDirectory) {       informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);     }  else     if (element instanceof PsiFile) {       informationString=coverageAnnotator.getFileCoverageInformationString((PsiFile)element,currentSuite,manager);     }     if (informationString != null) {       data.setLocationString(informationString);     }   } } 
Double rate
{@link PkgControl}
mappedSuperclass.isMetadataComplete()
clearFromMember.start()
bytes > 8192
mAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"signIn:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign In Failed",Toast.LENGTH_SHORT).show();     }   } } )
log.rollWriter()
errorCount > maxErrors
IOException e
((GroovyObject)receiver).getMetaClass() != metaClass
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",500,"application/json","resources/add_book2json_invalid.txt",null)
Integer.valueOf(stackIdStr)
EventQueue.isDispatchThread()
log.error(sm.getString("webappClassLoader.stackTrace",threadName,getStackTrace(thread)))
public Trigger withEarlyFirings(OnceTrigger earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
mRecyclerView.scrollBy(hScroll,vScroll)
it.remove()
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
parent != null ? parent.startNumber : 0
Thread.sleep(5000)
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")")
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
AbstractMethodError e
fmd.getTargetClass()
uid > 0
Internal.prefixKeyWithSalt(key_a)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Object item
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment)
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
selenium.isVisible("link=Control Panel")
display.getMetrics(mDisplayMetrics)
booleanPreference(preference,value,R.string.p_use_contact_picker,R.string.EPr_use_contact_picker_desc_enabled,R.string.EPr_use_contact_picker_desc_disabled)
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
toArrayHelper(1)
wifiConfig.isValid()
DEFAULT_VERIFY_ENABLE=true
XmlSuite.DEFAULT_PRESERVE_ORDER.equals(m_verbose)
nestedIA.setContext(context)
!subAdded
DEBUG=true
error instanceof RebuildRequestedException
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDw,unrotDh)
mpi < 135
@Override public DBSObjectContainer getContainer(){   return container; } 
normalizedUrl.toLowerCase(Locale.ROOT).startsWith(HTTP_PROTOCOL)
two.setCoordinateIndex(1)
getDelegate().getSupportedCipherSuites()
mySchedulesQueue.setPassThrough(true)
mHorizontals == null
new AssertionError()
appMode.getSmallIconDark()
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
selectorBox.getCanvas()
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).contextStart(withUser)
sep < 0
workCache.get(key)
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
oldestNode == null
Map.class
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName())
ByteUtil.longToBytesNoLeadZeroes(1)
t.sleep(5000)
mHandler.removeCallbacks(pae)
checkpointPath.getPath()
metrics.density * 40
findModuleLibrary(module,provider,url,visited)
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null)
selenium.isVisible("link=Control Panel")
listener.iterationDone(policyNet,policyIterationCount)
event.isCanceled()
source.getAllEditors()
names[2]
Double.class
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)
@ConditionalOnEnablednHealthIndicator("redis")
column > 0L
myTemplatesMap.get(templateUrl)
mGpsListener != null
StringBuffer buffer=new StringBuffer(); 
xAppInfo.getIsSystem()
mMediaMetadataRetriever.captureFrame()
colIndex < columnTypes.length
localTransportStopRoutes.size() > 0
http2.setInitialStreamSendWindow(initialStreamSendWindow)
drawer.setDrawerListener(toggle)
FBUtilities.getBroadcastAddress()
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
hintInfo.hintHitProbability >= hintHitProbabilityThresholdForDeoptimizingSnippet()
ON_TOP
type.getConstructor()
mContext.startActivity(cantAddAccount)
new Duration(2,SECONDS)
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
String.format(" [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
sqlRouteResult.getSqlParsedResult().getSqlType()
List<Map<String,Object>>
Thread.sleep(5000)
SparkDl4jLayerS master=new SparkDl4jLayer(sc,conf); 
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
xmlWriter.writeStartDocument()
!dockOntopOrLeft
i > 1
SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),true)
DefaultCacheKeysFactory.getCollectionId(cacheKey)
mFinishing && mSupportHardware
EqualityComparer<T>
MAX_TOOLTIP_SHOWN_COUNT=3
logger.error("{}",general)
isCreated()
value instanceof Long
Exception e
new IndexWriter(indexStoreB,new StandardAnalyzer(),false)
!userInfo.canHaveProfile()
app.getDaynightHelper().isNightModeForMapControls()
findCodecForFormat(false,format)
new StringBuilder()
new InterpreterContext("","1","","",null,null,null,null)
declaredTypes.remove(innerName)
matcher.replaceFirst(replacement)
mUnreachedBarPaint.setColor(mReachedBarColor)
parent.incrementPrioritizableForTree(amt,oldParent)
viewToModel == null
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
paramEntry.getKey()
origin.realComponent().doubleValue() > other
log.error("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
i < 100
N > 0
imageHeight - kernelHeight + 1
Preconditions.checkNotNull(timer)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS)
styles.styles()
c.set(IDAUTHORITY_WAIT_MS,10)
mCharging ? Tile.STATE_UNAVAILABLE : mPowerSave ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE
ft.commit()
code.startLine("/* JADX WARNING: ").add(warn.getWarn())
!secondaryOk
-11
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,false)
r.getRequest()
lp.onResolveLayoutDirection(layoutDirection)
DEBUG=true
julLogger.info("Hello world")
Exception e
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
StringBuffer answer=new StringBuffer(); 
drawable.getMinimumHeight()
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
DISABLE=true
Boolean.valueOf(attrValue)
world.getBlockMaterial(x,y,z).isLiquid()
new ScriptC_errorCalculator(mRS,resources,R.raw.errorcalculator)
JBScrollPane.findScrollPane(myContent)
params.getConsole()
orig.getGenericsTypes()
processor.open(w,request)
groupLocalService.addGroup(user.getUserId(),null,0,0,name,null,type,null,true,true,null)
Assert.assertFalse(permissionChecker.isOmniadmin())
private AttributeBinding attributeBinding; 
matchAxisFilter != 0
addProperty(prop,true)
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)
_log.error(ioe,ioe)
logger.warn("condition not met, returning existing state")
Sets.newHashSet(declarationCollector.getForwardDeclarations())
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper)
logger.info("munlocking region")
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
mDataSetObserver != null
userImpFactor.add(userFactors.row(userIdx,false))
Exception e
platformVersion < MNC
15 * 60 * 1000L
getTestName(false)
set(object,value.intValue())
SOURCE.deref()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).contextStart(withUser)
loaded.getLoaded().getConstructor()
findPackage(SETUPTOOLS,false)
text.closeElement(BR)
waitFor(list,2,2000)
LocaleUtil.getDefault()
createHalf(buffer.length(),init,workspace)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
active
loaded.getLoaded().getConstructor()
return r; 
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
pm.performDexOpt(pkg,null,false)
testClass.getName()
ai.uid <= Process.FIRST_APPLICATION_UID
WebStorage.getInstance().deleteAllDatabases()
List<Module>
Sets.newHashSet()
LOG.info("Getting asynchronous method stub from channel")
map != null
UserNotificationEventLocalServiceUtil.getDeliveredUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
targetConfig.useDynamicConfigurations()
offset + len < buf.length
getFailedExecutionException()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
curThread instanceof IgniteDiscoveryThread
copy1DRangeFrom(0,mType.getCount(),i)
builder.length() == 0
Math.ceil((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
new Random(System.currentTimeMillis())
out != null
log.error("Error invalidating SSH tunnel",e)
JvmDeclarationOriginKt.OtherOrigin(myClass)
ftrain.numRows() < training_rows
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
SchedulerKey key=new SchedulerKey(Type.ACK_TIMEOUT,client.getSessionId()); 
selenium.isVisible("link=Control Panel")
telephony.getForbiddenPlmns(subId,appType)
level < 0
LOG.info("AFTER decResourceRequest:" + " applicationId=" + " priority=" + priority.getPriority() + " resourceName="+ resourceName+ " numContainers="+ resourceRequestInfo.remoteRequest.getNumContainers()+ " #asks="+ ask.size())
!hasDisplayList
!TextUtils.isEmpty(library.getLibraryWebsite()) && !TextUtils.isEmpty(library.getRepositoryLink())
getAndAppendNextComparator(i,bb,sb)
InventoryMessage getdata=new InventoryMessage(params); 
mNavigationBarView.isQuickScrubEnabled()
Error e1
level == 0
HighlightInfo.newHighlightInfo(type).range(refElement).description(message)
public Integer getIndex(){   return index; } 
path(11)
is(2)
parent.getChildCount() > 0
new byte[9]
selenium.isVisible("link=Control Panel")
apnContext.getWaitngApns()
weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX,1.0f)
new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId))
type.getConstructor()
selenium.isVisible("link=Control Panel")
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
Assert.assertEquals(8L,v2)
tessellator.tessellatePolygon(false,true,true)
FileHash.hash(outputFile,algo).equals(checksum)
jid.getLocal()
new PortletDataContextImpl(layoutSet.getCompanyId(),groupId,parameterMap,new HashSet<String>(),null,zipReader)
mQsContainer.getX()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
lower != null
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
DEBUG
portletDataContext.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Log_OC.e(TAG,"onCreateView")
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElementsToIgnore),false,refreshViews);   } } )
SuperColumns.startOf(del.predicate.getSlice_range().finish)
rs.getString(1)
assertEquals(mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.INSERT)
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1).setLateFirings(subtrigger2))
assertEquals(12,url.getPort())
fileName.startsWith("/")
new Paint(Paint.ANTI_ALIAS_FLAG)
stmt.executeQuery(sqlCommand)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
handleDnsConfigurationChange(networkType)
synchronized (classCache) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
connection.remote().nextStreamId()
artifactResolver.resolve(request)
LOG.error("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
N > 0
DEFAULT_MAX=1024
components.beforeEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
substitutor.substitute(parameter.getType())
mPowerManager.isScreenOn()
settingOptional.get().getName()
Integer.toString(bitstampOrder.getId())
"Executing SQL script from " + script
mBluetoothLock.readLock().lock()
nodeString()
Math.round((double)(powerQuery[out] * totalPowerContained) / totalPowerQuery)
paymentGatewayApi.processNotification("TOTO",PLUGIN_NAME,NULL_PLUGIN_NAMES,NULL_PLUGIN_PROPERTIES,requestOptions)
this.transactionsRepository.removeTransaction(this.xidTransactionID)
return true; 
return true; 
existingContents2.size() == 1
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null),JSONParseSpec.JSON)
IdeaTestUtil.bombExplodes(2006,Calendar.SEPTEMBER,5,15,0,"maxim.mossienko","next token after tag correctly becomes " + "a tag parameter even if located on next line." + "Leading asterisks should not be counted as well.")
Beans.newDuration(casProperties.getAuthn().getOauth().getAccessToken().getMaxTimeToLiveInSeconds()).toMillis()
from > to
ps.createRelationship(rel)
chargeUAh > 0
createMessageConsumer(session,destinationName,messageSelector,true,null,true)
null == user
getNumOfRenewsInLastMin() < numberOfRenewsPerMinThreshold
new Tuple(label,name)
strings.length == 5
assertEquals(expectedPlan,actualPlan)
DLStoreUtil.addFile(kbArticle.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,newDirName + StringPool.SLASH + shortFileName,0,StringPool.BLANK,serviceContext.getModifiedDate(null),serviceContext,bytes)
testClass.getName()
result.toSecondOfDay()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
file.getLocalFile()
new Date(0)
odi.release()
mRvc != null
Preconditions.checkNotNull(firstOperand,"Argument firstOperand can't be null")
LOG.warn(title + "; " + message)
VDBG=true
rc.networkPolicy(NetworkPolicy.NO_CACHE,NetworkPolicy.OFFLINE)
Loggers.get(getClass()).error(format("Pool %s did not terminate",getClass().getSimpleName()))
mShowNewEditor
@Override public final DivideBy and(String sql,QueryPart... parts){   return and(condition(sql,parts)); } 
JiveGlobals.setXMLProperty(ONE_TIME_PROPERTY,"")
requestHeader.mConnectionID != null
eps(otherArr)
selenium.isVisible("link=Control Panel")
e.getMessage()
ignite.events().localQuery(p)
mContext.startActivity(cantAddAccount)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
a.getInt(attr,0)
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
JavaTerm.class
((Scorecard)serializable).isUseReasonCodes()
server0.getStoreRepository().getLocalStore(storeName)
HeaderBuilder.this
timeVector.getMutator().set(index,value)
in.readObject()
DRAGGING_ANIMATION_TIME=1900f
new ServerPing.Players(bungee.getOnlineCount(),listener.getMaxPlayers())
_socialActivityInterpreterClasses.isEmpty()
i < end
Lists.newArrayList("match",ignoreGlob,"wholename")
GL11.glGetTexParameter(target,pname,params)
new RuntimeException(e)
bitmap.getWidth()
ctxLogger.error("Unsupported field type: {} for field: {}",dataType,fieldName)
name.length() > 0
mDeviceOwner.getProfileOwnerName(i)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
host1.getAddress()
IBackupManagerService svc=mService; 
mGesturesPopup != null
TextAttributes.merge(textAttributes,ConsoleHighlighter.OUT.getDefaultAttributes())
removeCallbacks(null)
page.getSizeInBytes()
100 * 1024 * 1024
client.waitForCompletion(1,id,5,TimeUnit.SECONDS)
container.getVersion()
new MccEntry(230,"cz",2,"Europe/Prague")
!states[0].hollow
offset + n
mSyncStatus.get(i)
String retval=""; 
collectDependencies().equals(myInitialDependencies)
referenceDatabase.getObjectQuotingStrategy()
log.info("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
Assert.assertEquals(3,results.size())
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
logger.debug(e.getMessage(),e)
copy1DRangeFrom(0,mType.getCount(),i)
m.getSize()
mEmptyId == 0
assertEquals(replaced,map.substitute(path,true))
position.offset(mLeft,mRight)
AWAKE_INTERVAL_DEFAULT_MS=5000
ATLAS_MAP_ENTRY_FIELD_COUNT=4
Instant.ofEpochSecond(millis)
length % dictionarySize
Integer.valueOf(taskIdStr)
mPrivateInput == null
getTitle()
handleShowingDetail(detail,x,y,true)
Internal.prefixKeyWithSalt(key)
new IncorrectOperationException()
context.getPackageName()
model.getConfig()
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
new NativeCodeGenerator().generate()
LoggerFactory.getLog(MongoQueryCreator.class)
logger.info("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
animator.setMaxFrame(-9000)
assertEquals(12,beanCount)
Integer.valueOf(bottomStr)
Thread.sleep(100L)
elements == null
errorIfMissing=false
portletImporter.validateFile(userId,groupId,plid,portletId,parameterMap,file)
writeFile.sync()
message.getFormattedFields()
mAppliedTemporaryAutoBrightnessAdjustment=true
id=14
compensationRange.inRange(compensation)
FavoritesWs.class
preciseExchangeAmount - exchangeAmount >= 0.000001f
(exception ? throwable instanceof RuntimeException : throwable == null)
"file".equals(url.getProtocol())
getUrl()
mJobs.get(i)
logger.info("--> checking snapshot status again after snapshot is done",blockedNode)
processEmbed(curi,codebase,context)
getSessionTimeout().toMinutes()
VertexAttribute.Color()
parent == null
hasNextChunk()
this.gatewayDelegate.setRequestChannel(replyChannel)
QueryProcessor.processInternal("SELECT * FROM cql_keyspace.table2;")
page.getPageId()
new Location(user.getWorld(),x,y,z)
Maps.newHashMap()
log.debug("'{}' extracting credentials from {} http authenticator",e1,httpAuthenticator.getType())
!exists
f.getFp()
bindingMatch.toString()
ExitCode exitCode=ExitCode.BUILD_ERROR; 
new PacketDecoder(jsonSupport,new NamespacesHub(new Configuration()),ackManager)
downstreamNodes.equals(executionPhase.nodeIds())
@Override public FilteringClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec){   FilteringClassLoader.Spec classLoaderSpec=new FilteringClassLoader.Spec(spec);   if (needJaxpImpl()) {     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,SAXParserFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DocumentBuilderFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DatatypeFactory.class);   }   return new FilteringClassLoader(parent,classLoaderSpec); } 
info.getRegionName()
logger.error("failed to create index [{}]",indexMetaData.index(),t)
null != lvElement(buffer,calcWrappedOffset(index + 1,mask))
y * height
removeFlagFromCache(account,ids,flag)
/**   * @return a String for the summary of the preference.  */ public String getSummary(){   return null; } 
@SuppressWarnings("unused") public Schema list(int version,JobsV3 s){   Job[] jobs=Job.jobs();   s.jobs=new JobV3[jobs.length];   int i=0;   for (  Job j : jobs) {     if (j instanceof ModelBuilder) {       s.jobs[i]=new ModelBuilderJobV3().fillFromImpl((ModelBuilder)j);     }  else {       try {         s.jobs[i]=(JobV3)Schema.schema(version,j).fillFromImpl(j);       }  catch (      H2ONotFoundArgumentException e) {         s.jobs[i]=new JobV3().fillFromImpl(j);       }     }     i++;   }   return s; } 
document.getElementById(CONFERENCE_INFO_ELEMENT_NAME)
qualifier != null
ORIENTATION_SETTLE_TIME_MS=100
createFromResourceStream(null,null,is,srcName)
sendObjectInfoResult.getCompressedSize()
portlet.getPortletName()
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
1 << 19
synchronized (mAccounts) {   writeStatisticsLocked(); } 
ImmutableMap.<String,Boolean>builder().put("C# language server",false).put("Exec",false)
Log_OC.wtf(TAG,"\t account is NULL")
userRecord.mClientRecords != null
java(convention).getClassesDir()
mBatteryStatus=BATTERY_STATUS_FULL
Nd4j.rand(200,200,max,min,Nd4j.getRandom())
onPackageAppeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
Preferences.getBoolean(key,true)
myCache1.get("myKey1").getValue()
!export && !beforeFilename.equals(fname)
expandableView.getActualHeight()
mBitmapState.mBitmap.hasAlpha()
String text
ImmutableList.of("/bin/bash","-c",cmd)
AnnotatedElementUtils.getAnnotationAttributes(type,annotationType)
expectedHigh=27860.0
selenium.isVisible("link=Control Panel")
request.getManager().loadAsset(text)
header.getX()
prefsWriter.commit()
ExoPlayerFactory.newSimpleInstance(renderersFactory,trackSelector)
new IndexWriter(directory,ANALYZER,true)
dynamicType.getConstructor()
hasPermission(permission)
name.equals("getNetworkCountryIso")
realm.assertThread()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name,map.size())
image.getRGB(i,j)
GL20.glGetUniform(program,location,params)
GenerationUtils.compileFilesGetGenerationState(fileAndExhaust.getExhaust(),Collections.singletonList(fileAndExhaust.getJetFile()))
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
override.toString()
loader.isLoading()
application.isWriteAccessAllowed()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION)
promises.addFirst(promise)
state.mTint != null
STATUS_DRAW=0x2
"application/json".equals(contentType)
allCramTags == null
LOG.error("Fetch holidays failed. Aborting.")
formatTime(scanWifiLockOnTime / 1000)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
public Object getAsset(); 
-586705259
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
transportError.withDescription("\n" + headers.toString())
Native.getStringEncoding(classes[i])
nextNonWakeup != 0
scale(1f)
DBFactoryUtil.setDB(DB.TYPE_HYPERSONIC)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
v.getTableId() == LobStorageFrontend.TABLE_RESULT
mConnector.executeForList("volume","list")
searchCompleter.addBibtexEntry(entry)
record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
Double.isNaN(rate)
params[2]
MessageFormat.format(TEMPLATE,metricsUri,pingUri,threadsUri,healthcheckUri)
"//float[@name='score']='" + 0.0f + "'"
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
peekServiceForUserLocked(userId)
Flux.from(this).publish()
volume.getType() == VolumeInfo.TYPE_PUBLIC
assertEquals(records.get(0).getSubject(),expectedSubject)
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n")
DBG=true
Integer typeId=fields != null ? fields.get(fieldName).typeId() : null; 
url.addArgument(getAttributeValue(nodeAtts,"name"),getAttributeValue(nodeAtts,"value"))
Exception exc
assertEquals(814278929,flyway.info().applied()[1].getChecksum().intValue())
OpenSparkInterpreter(false)
new GridCacheQueryReadEvent<>(cctx.localNode(),"Scan query entry read.",EVT_CACHE_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SCAN,cctx.namex(),null,null,qry.scanFilter(),null,null,qry.subjectId(),taskName,key,val,null,null)
new GroovyBugError("The lookup for " + name + " caused a failed compilaton. There should not have been any compilation from this call.")
MavenLog.LOG.warn(e)
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
servers.isEmpty()
current instanceof Invoke
REMOVALS_UPDATER.compareAndSet(this,nanos,duration)
(filterMap.getDispatcherMapping() & FilterMap.INCLUDE) > 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).description(message)
paintBorder.top >= 1
status.getServerName()
Log.wtf(TAG,e.getMessage(),e)
parent.getChild(jarfile)
edge.setType(EdgeDirection.UNDIRECTED)
@Nullable Object value
(totalItemCount - lastVisibleItemPosition) == ITEM_LEFT_TO_LOAD_MORE
contains={"doCachedTypeCachedOffset","doCachedType"}
rcvdBytesCnt.intValue()
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger
settings.readLPw(null)
IllegalAccessError.class
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
tracesFile.mkdirs()
prefs.getBoolean("manage_system",true)
target.toFile().isDirectory()
DumpUtils.checkDumpPermission(mContext,TAG,pw)
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
prj0.putIfAbsent(i,i * i)
StringBuffer buf=new StringBuffer(name.length() + parameters.length * 10); 
assertEquals(8,lm.getFields().size())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION)
outgoingCounter.getAndSet(0) / 1024
30 * 60 * 1000
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,93700,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
data != null
ApplicationManager.getApplication().executeOnPooledThread(new Callable<Void>(){   @Override public Void call() throws Exception {     tester.test(file,xmlFile,originalVFile);     return null;   } } ).get(8,TimeUnit.SECONDS)
realm.assertThread()
IOUtils.closeQuitely(is)
shutdown(app)
(outputFolder + File.separator + apiFolder).replaceAll("/",File.separator)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
MUCActivator.getAlertUIService().showAlertDialog(resources.getI18NString("service.gui.ERROR"),errorMessage)
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitide()
connectedHeaders.setAcceptVersion("1.1")
IndexOutOfBoundsException e
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroups(groups)
buffer.capacity()
mWasActivatedOnDown || !mNeedsDimming
@NonNull
Entity shooter=((Projectile)event.getDamager()).getShooter(); 
new GroovyRuntimeException(e)
parameters == null
sharedElements.remove(localName)
field.getFieldName().equals(s)
clazz.getMethod(methodName,args)
logger.trace("{} is already cancelled",impl.uuid())
Results.ok()
mCurrentVrService == null
Base.copyFile(file,properPdeFile)
loaded.getLoaded().getConstructor()
super(message); 
close.setVisibility(removable ? VISIBLE : GONE)
final JarBinarySpec binary
resultTargetUser != null
shareByLinkAllowEditing.isChecked()
Long.valueOf(row.getValue(partitionCol).toString())
Util.isSmsTopupSupported(activity,link)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
entity.saveComponent(delayedComponent)
SystemClock.nanoTime()
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new MaterialDialog.Builder(this).title(R.string.useGoogleLocationServices).content(R.string.useGoogleLocationServicesPrompt)
-10
convertView == null
casProperties.getMonitor().getEndpoints().getSingleSignOnReport()
url.addArgument(getAttributeValue(nodeAtts,"name"),tempNode.getFirstChild().getNodeValue())
it.getJavaDoc()
!saveState
DATABASE_VERSION=64
assertEquals(17,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
GlobalSearchScope.projectScope(getProject())
jp.getIntValue()
s.charAt(3) == '<'
new IndexWriter(dir,new StandardAnalyzer(),true)
getDelegate().handle(exchange).otherwise(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new Paint(Paint.ANTI_ALIAS_FLAG)
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
rename.isPrivate()
buildName(node)
DAO_RESCUE_BLOCK=1_787_300
context.getFlowScope().put(key,authorizatonUrl)
randomAlphanumeric(255)
getPresenter().getLogin()
ThreadPoolIntentService.makeIntent(getContext(),mHandler,Options.TEST_URI)
LOG.info("Failed to register State Store bean {}",e.getMessage())
checkPojoMetaClass()
t + 5000
element.getText()
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
isAvailable(status)
BufferUtil.zeroBuffer(4)
noParam == null
StringUtils.isNotEmpty(id)
duration - SystemClock.uptimeMillis() - bedtime
AppNewMsgAlarm.startAlarm(getActivity(),true)
childrenExpanded ? mDividerHeight : mChildPadding
assertTrue(Utils.mkList("RUNNING","CREATED").contains(metadata.threadState()))
DEBUG=true
allGroupingColumns.isEmpty()
typeSettingsProperties.toString()
_cacheRegistryItems.put(cacheRegistryItem.getRegistryName(),cacheRegistryItem)
pw.println(ps.getInstantApp(user.id))
StringUtils.subString(url,"weburi-",".json")
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamSpace()
myViewingPanel.requestFocusInWindow()
mAppToken.hasContentToDisplay()
CharSequence message
Throwable t
myChild2.getElementType() == ElementType.BLOCK_STATEMENT
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
modObjectTable == null
"Camera resolution: " + screenResolution
HashMap<String,Operator<? extends Serializable>>
i != Integer.MAX_VALUE
order=2
account.getExternalKey()
args[1]
AbstractMethodError e
poList[1]
new StackManager(new File(upgradeCycle),null,osFamily,true,metaInfoDao,actionMetadata,stackDao)
!window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new DeadCodeEliminationPhase(REQUIRED)
!isDocumentUnsaved(document)
LanguageFolding.INSTANCE.forLanguage(elements[0].getLanguage()) instanceof CompositeFoldingBuilder
rootVDir.refresh(false,false)
tableInfo.getType()
resultTargetUser != null
Integer.valueOf(attrValue)
suppressed.add(t2)
increment != 1
oldConfig.densityDpi != newConfig.densityDpi
psiFile == null
Log_OC.wtf(TAG,"initFragments() called with invalid NULLs!")
manager.beginTransaction().remove(fragment).commit()
enableOptimization.isEnabled()
loaded.getLoaded().getConstructor()
myCache1.getCacheConfiguration().getMaxElementsInMemory()
return false; 
pixmap.drawCircle(x,y,radius,color)
setException(t)
String uri
synchronized (classCache) {   classCache.put(cls.getName(),cls); } 
walk.release()
mapper.writeValueAsString(segment)
request.mConnectionID != null
LOG.error(e,"Parser exited while decoding BSER data")
securityMode != SecurityMode.None
FastMath.max(origin,num.doubleValue())
LOG.warn(title + "; " + message)
new Float(this.value)
withModifiers(SynchronizationState.PLAIN)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
dockedBounds.left - adjustment
this.removeFirst()
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,true,userId)
r != null
finish()
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))).append(targetNodes)
ServiceLoader.load(Collector.class)
ErrnoException e
left + height
providerConfig.setTimeout(1000)
selenium.isVisible("link=Control Panel")
HashMap<String,Integer>
DELETE_OUT=true
new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()).buildServiceRegistry()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
retriever.captureFrame()
new ArrayList<>()
@Overide
mContext.startActivity(intent)
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
row("p_comment",null,1.0,0.0,null,null,null)
SingleMapBlockWriter.class
n.intValue()
LOG.warn("Unable to close socket selector",ex)
dep instanceof CxxPythonExtension
Log.d(TAG,"We have a callback to send this result to")
@SuppressWarnings("unchecked") private S self=(S)this; 
clipItem.getText()
Bullet.init()
mAttributes.getFlags()
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).toMillis()
context.formatSeparator()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
onDetachedFromWindow()
mContainerActivity.getStorageManager() != null
is(400)
mCameraUser.submitRequest(request,false)
expected == short.class
new ConcurrentHashMap<String,Boolean>(64)
testClass.getName()
CamelCloudServiceCallConfiguration.class
date.getTime()
type.getParameterCount() > 0
-region.getRegionHeight()
assertThat(filter.getColumns()).hasSize(6)
Log.wtf(TAG,"This will become an error",ex)
IRON_SWORD(267,1,59)
Arrays.asList(1,2,3,128)
changed
Optional.of(this.servicesManager.findServiceBy(service))
panel.getAuthor()
new MockQueryExecution(1)
Thread.sleep(1000)
lp.onResolveLayoutDirection(layoutDirection)
equal=false
drawer.setDrawerListener(toggle)
waitNoPendingTasksOnAll()
new CountDownLatch(1)
blockUri.getIdentifier().toString()
"Surface(native-token=" + mSurface + ")"
queryMixin.leftJoin(target,alias)
ModalityState.current()
exchange.getPartitioningScheme().isReplicateNulls()
mNextWakeFromIdle != null
getActivePreferenceStore()
g.events().localListen(lsnr,EventType.EVT_NODE_LEFT)
logLine == 0
LookupElementBuilder.create(referencedName)
dateFormatter.format(value)
Metric<Integer>
userActivity(SystemClock.uptimeMillis(),false)
new Paint(Paint.ANTI_ALIAS_FLAG)
executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
String where
hasPermission(permission)
SHOW_DISABLE_FOREGROUND=true
mState == STATE_UNINITIALIZED
scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
methodRedefinitionResolver.resolve(methodDescription)
selConnection > 0
getPreferences().getBoolean(SIGNAL_PREF,true)
expected=536870976
assertBusy(() -> {   GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();   SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);   logger.info("Snapshot status [{}], successfulShards [{}]",snapshotInfo.state(),snapshotInfo.successfulShards());   assertThat(snapshotInfo.state(),equalTo(SnapshotState.SUCCESS));   assertThat(snapshotInfo.successfulShards(),equalTo(shards)); } ,10,TimeUnit.SECONDS)
service.getDomain().getName()
Throwable ignored
/**   * {@inheritDoc}  */ @Override public Object clone(){   CollectionProperty prop=(CollectionProperty)super.clone();   prop.value=cloneCollection();   return prop; } 
duration - SystemClock.uptimeMillis() - bedtime
mInitialMotionX == null
fragment.dismiss()
ExecutionParameters oldParameters
UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {   PsiDocumentManager.getInstance(myFixture.getProject()).commitAllDocuments();   final String intentionName=PyBundle.message("sdk.gen.stubs.for.binary.modules",myUseQuickFixWithThisModuleOnly);   IntentionAction intention=myFixture.findSingleIntention(intentionName);   if (intention instanceof IntentionActionDelegate) {     intention=((IntentionActionDelegate)intention).getDelegate();   }   Assert.assertNotNull("No intention found to generate skeletons!",intention);   Assert.assertThat("Intention should be quick fix to run",intention,Matchers.instanceOf(QuickFixWrapper.class));   final LocalQuickFix quickFix=((QuickFixWrapper)intention).getFix();   Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run",quickFix,Matchers.instanceOf(GenerateBinaryStubsFix.class));   final Task fixTask=((GenerateBinaryStubsFix)quickFix).getFixTask(myFixture.getFile());   fixTask.run(new AbstractProgressIndicatorBase()); } )
sendKeyDown(keycode)
element instanceof FakeDocElement
mNextWakeFromIdle != null
BACKGROUND_DEXOPT_JOB=808
key * randomIntBetween(2,10)
getDataSource()
mNavigationBarView.inScreenPinning()
selenium.isVisible("link=Control Panel")
instructionForm.getId()
value + value + MINIMUM_BACKLIGHT
quoteMatcher.group(0)
addAnnotations(result,externalName,file,fileData)
socket.setSoTimeout(5000)
new KettleException("There was an error during transformation split")
this.setSize(450,300)
dest.writeParcelableArray(remoteInputs,flags)
ams.mContext.createPackageContext(appInfo.packageName,0)
mWindowManager.removeView(mPopupView)
typeSettingsProperties.toString()
LayoutLocalServiceUtil.getLayouts(groupId,false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,0,1)
(Float)array[this.index]
new InputStreamReader(is)
getClass().getResource("porterTestData.zip").getFile()
case 7: 
metadata.getFaces()
curComp.equals(cur)
_log.error(ioe,ioe)
/**   * Indicates that the user's friends are able to see posts made by the application.  */ Friends(NativeProtocol.AUDIENCE_FRIENDS)
setException(t)
itemMatches(itemStack,target,false)
dpToPx(32f)
runAllTasks()
ctx.write("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
ft.commit()
ap.getSsid()
resources.nextElement().getPath()
type.getConstructor()
logger.error("Not a directory: " + dir.getAbsolutePath())
server1.getStoreRepository().getLocalStore(storeName)
new Paint(Paint.ANTI_ALIAS_FLAG)
fieldDeser.getPropertyValue(currentObject)
new IndexWriter(rd2,new SimpleAnalyzer(),true)
getClass().getName()
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName(clusterName)).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
dpToPx(72f)
mHandler.removeCallbacks(pae)
entity.addReference(entity)
b == Bound.END
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static FactoryOperations getNewFactory(SQLDialect dialect){   return getNewFactory(DEFAULT_INSTANCES[dialect.ordinal()]); } 
JournalTemplateLocalServiceUtil.getTemplate(webDavRequest.getGroupId(),journalTypeId,true)
id=19
parseValueParameterList(false,valueArgsRecoverySet)
new ConcurrentHashMap<Class<?>,Constructor<?>[]>(64)
realStartActivityLocked(hr,app,true,true)
contactImpl != null
resources.getDimension(R.dimen.close_handle_height)
new ClsFileImpl((PsiManagerImpl)getManager(),new ClassFileViewProvider(getManager(),virtualFile)){   @NotNull @Override public String getPackageName(){     return classOrObject.getContainingJetFile().getPackageFqName().asString();   }   @NotNull @Override public PsiClassHolderFileStub getStub(){     return getJavaFileStub();   }   @SuppressWarnings("Contract") @Override public boolean processDeclarations(  @NotNull PsiScopeProcessor processor,  @NotNull ResolveState state,  PsiElement lastParent,  @NotNull PsiElement place){     if (!super.processDeclarations(processor,state,lastParent,place))     return false;     String packageName=getPackageName();     if (!packageName.isEmpty())     return true;     PsiPackage aPackage=JavaPsiFacade.getInstance(myManager.getProject()).findPackage(packageName);     if (aPackage != null && !aPackage.processDeclarations(processor,state,null,place))     return false;     return true;   } } 
blockDismiss
t.getCause()
logger.warn("IOException should not have been thrown.",exc)
ack.getLastMessageId().setDataLocator(seq)
Integer.parseInt(nid[0])
NonPersistentSiteTheadLocalCache cache=NonPersistentSiteTheadLocalCache.getSitesCache(); 
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentType(TEXT_EVENT_STREAM)
request.getLocalAddr()
service.getDomain().getName()
serverService.getIncomingInterceptors()
input.getString(action)
sqlRouteResult.getSqlParsedResult().getSqlType()
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
new ConnectionError(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR)
Column::toString
importedClassIndex.isEmpty()
WaitUtils.waitForPageToLoad(driver)
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required")
Slog.wtf(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
EditorFragmentComponent fragmentComponent=EditorFragmentComponent.createEditorFragmentComponent(uEditor,range.getVcsLine1(),range.getVcsLine2(),false,false); 
_typeSettingsProperties.toString()
hasPermission(permission)
getModifiableRootModel()
new BooleanValidator("store.json.extended_types",true)
mMatchMode=numOfMatchesPerFilter
network.successors(producedNode)
Map<String,String>
Log.wtf(mTag,"Adjusting remote volume without a controller!")
new IndexWriter(dir,false,new WhitespaceAnalyzer())
Log.wtf(TAG,"This will become an error",ex)
mkdirs()
getActionBar()
Log_OC.wtf(TAG,"initFragments() called with invalid NULLs!")
ColorResources.getColor("tableGrid")
STATUS_DRAW=0x2
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,1,graphId)
m.getSize()
FBUtilities.getLocalAddress()
new LayerVisitor(this,flatRegion,minimumBlockY(region),maximumBlockY(region),naturalizer)
DEBUG=true
generatorConfig.getModelPackage()
new Color(mParams.getCustomBackgroundColor())
selenium.isVisible("link=Control Panel")
ai.uid <= Process.FIRST_APPLICATION_UID
DEBUG_RC=true
assertEquals(13,beanCount)
assertEquals("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>test</groupId>\r\n"+ "    <artifactId>project</artifactId>\r\n"+ "    <version>1</version>\r\n"+ "    <dependencies>\r\n"+ "        <dependency>\r\n"+ "            <groupId>group</groupId>\r\n"+ "            <artifactId>artifact</artifactId>\r\n"+ "            <version>version</version>\r\n"+ "        </dependency>\r\n"+ "    </dependencies>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
request.setAttribute("liferay-ui:asset-display:assetEntry",_assetEntry)
findAnnotationOnBean(beanName,annotationType) != null
Assert.assertEquals(5,autoPartition.getPartitionNum())
intermediatePoints != null
type.getPresentableText()
ColorResources.getColor("tabTitleHighlight")
serialVersionUID=1492663498
new LogicalPosition(vline,repeatColumn)
new IndexWriter(index,new WhitespaceAnalyzer(),true)
LOG.error(e)
RuntimeException ex
DEBUG=true
endpointId <= result.getInstances()
getName()
editor.selectPrevTab()
duration - SystemClock.uptimeMillis() - bedtime
Maps.newHashMap()
selenium.isVisible("link=Control Panel")
new ForAdvice(adviceMethod,new TypeList.Empty(),entryTypes,TranslationMode.ENTRY)
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
LOG.warn("Promotion of block " + blockId + " failed.",ioe)
fragment.dismiss()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
-1
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
list.add(parameter)
!db.isSyncMode()
LogDelegate.createLog(name)
state.value == rotationLocked
trans.getStepPerformanceSnapShots() != null
isCreated()
PULL_DECAY_TIME=10000
adapter.getArgumentResolvers()
Math.max(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
LOG.error("Ignoring duplicate class " + className)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionMaxout.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,100,32.80397240113137,DeepLearningParameters.Activation.Maxout)
prefs.getBoolean(AUTO_START,false)
@Nullable public Params getParams(){   return params; } 
Build.VERSION.SDK_INT < 23
mContext.sendBroadcast(intent)
fmd.getValueCount() == 0
Box.createHorizontalStrut(conditionLabel.getPreferredSize().width + theCondition.getPreferredSize().width)
Validator.isNull(userUUID)
testClass.getMethod(SUITE_METHODNAME,new Class[0])
is.setAmount(amount)
titleTextField.getText()
type == UNKNOWN_PARAMETER_TYPE
themeDisplay.getUserId()
List<INPUT>
61L + 122L
allocator.getFlowController().prepareAction(x,activations,gamma,beta,mean,var)
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
limit=10000
timeVector.getMutator().set(index,value)
DEBUG_GESTURES=true
HashSet<>
getLogger().info("Scanning for extensions: " + mavenProject)
win.isDrawnLw()
selenium.isVisible("link=Control Panel")
hazelcastFactory.newHazelcastClient()
users.get(i)
mMat[6]
ResourceType
totalBytes()
Log.warn("The given state from the response: " + billToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
path.lastIndexOf("/") == 0
private Stream createRemoteStream(int streamId) throws ConnectionError {   Integer key=Integer.valueOf(streamId);   if (streamId % 2 != 1) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR);   }   if (streamId <= maxRemoteStreamId) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR);   }   Stream result=new Stream(key,this);   streams.put(key,result);   maxRemoteStreamId=streamId;   return result; } 
defaultListenerAccess != null
shardRouting.recoverySource()
new DateMathParser(formatDateTimeFormatter,TimeUnit.MILLISECONDS)
return true; 
IBackupManagerService svc=mService; 
tracesFile.mkdirs()
Assert.packageNotEmpty(bootClass,"your main class is empty of package.")
showRecentApps(true)
mSimpleCard.getVisibility() != View.VISIBLE
_cloneFormat(DATE_FORMAT_ISO8601_Z,formatStr,_timezone,_locale,_lenient)
selenium.isVisible("link=Control Panel")
principalCookieName != null
sb.index() - 2
Error err
mSyncStatus.get(i)
myApplyData == null
temporaryFolder.getRoot()
randomAlphaOfLengthBetween(1,20)
new IllegalArgumentException("Remote push url " + url + " is invalid. ")
m.getClass()
into.get(i)
mValues[7]
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名")
Boolean.valueOf(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
i <= 0
MediaMmsMessageRecord mediaMessage=(MediaMmsMessageRecord)message; 
stack.stackSize > 0
BeanPropertiesUtil.getObject(model,_rowIdProperty)
replayPosition - stopPosition > 0
HEAT_PER_MJ=0.01F
"user_not_found".equals(code)
emptyCheck.log(0,"msgKey",null)
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
tiled != null
evaluator.evalComponentTypeFromArrayExpression(resolveParent,arrayExpression)
doNotUseAnimations ? 0 : Math.max(450,(Math.abs(mStX) + Math.abs(mStY)) / 1200f * MOVE_MOVE_ANIMATION_TIME)
Simple.of(skylarkType)
Integer.valueOf(getOptional("kylin.storage.hbase.small-family-block-size-bytes","65536"))
new DefaultConfiguration(new NoConnectionProvider(),null,null,null,null,null,null,null,null,null,dialect,settings,null)
i.getTouchIconUrl() != null
VersionPrinter.printVersion(Thread.currentThread().getContextClassLoader())
AvailablePortFinder.getNextAvailable()
mEase4.setTextColor(mNextTimeTextRecomColor)
correctedOffset >= 0
case stop: 
new RuntimeException(ex)
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
dateVector.getMutator().set(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
0 != mNetworkCapabilities
Simple.of(Integer.class)
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setTitle(POINT_ADD_GPX_WAYPOINT)
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
private String modSource; 
log.warn("Problem in JSR223 script ",e)
Integer.valueOf(taskIdStr)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
telephony.getCdmaEriIconModeForSubscriber(subId)
public File sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName),"success",String.valueOf(rules.getRuleItems()))
DBG=false
assertThat(getField(graphite,"port")).isEqualTo(8080)
new Paint(Paint.ANTI_ALIAS_FLAG)
i=0
request.mConnectionID != null
"Error resetting interface " + mInterfaceName + ", :"+ e
provider == null
String tag
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).contextStart(withUser)
selenium.isVisible("link=Control Panel")
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_START)
queryType != null
Assert.assertEquals(3,results.size())
onEvaluateInputViewShown()
CharSequence message
dynamicType.getConstructor()
c == Long.class
!showOnKeyguard
Integer.valueOf(attrValue)
child.resetResolvedLayoutDirection()
assertEquals(server.mode(),"stream")
ultimateRecyclerView.enableSwipeRefresh(false)
private final String accountExternalKey; 
newDescriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
paramName.substring(6)
mExpandedChild.getHeight() == mHeadsUpChild.getHeight()
GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))
mAdapter.getItem(i) != null
exception.toString()
run.size() > maxBatchWriteSize
VERSION=1
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
optional.isPresent()
mm.tryLock(key,4,TimeUnit.SECONDS)
Looper.getMainLooper()
RebalanceUtils.getCurrentPartitionMapping(cluster)
from >= to
1 << QUOTIENT_BITS
"$" + functionName
public Number getMedian(){   if (count > 0) {     return values.get((int)(values.size() * .5));   }   return ZERO; } 
colors.getResourceId(i,0)
assertNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
LOGGER.lifecycle(msg.apply())
Timber.w(e,error)
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end,orderByComparator)
bits2[1] == false
telephony.isRinging()
STUB_VERSION=39
HB_TRAIL_31372(5450)
sendMessage(CMD_STOP_AP)
ph_sample[i]
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
type.getConstructor()
Response.ok()
this.getCallerAddress()
SDK_INT >= JELLY_BEAN || SDK_INT <= LOLLIPOP_MR1
showRecentApps(true)
securityMode != SecurityMode.None
first + SEPARATOR.length()
groupsFile.getPath()
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE))
Boolean.valueOf(attrValue)
mProfileCursor.getCount() == 0
selenium.isVisible("link=Control Panel")
bar.setResultWaitTime(3000)
type.getConstructor()
stopwatch.elapsedMillis()
!active
LOG.info("Cannot access storage directory " + rootPath)
filesQueue.get(0)
Integer.valueOf(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
booleanPreference(preference,value,R.string.p_end_at_deadline,R.string.EPr_cal_start_at_due_time,R.string.EPr_cal_end_at_due_time)
ctx.writeAndFlush(msg,promise)
jndiName != null
child.resetResolvedLayoutDirection()
Simple.of(SkylarkList.class)
errorCode != FacebookRequestError.INVALID_ERROR_CODE
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
super(true); 
private String requestCacheKey=UUID.randomUUID().toString(); 
module != null
el.className()
Sets.newLinkedHashSet()
mAuthorities.get(i)
sourceSet.getClasses()
/**   * Saves the size and the location of a specific <tt>Component</tt> through the <tt>ConfigurationService</tt>.  * @param component the <tt>Component</tt> which is to have its size andlocation saved through the <tt>ConfigurationService</tt>  * @throws PropertyVetoException if the <tt>ConfigurationService</tt> doesnot accept the saving because of objections from its <tt>PropertyVetoListener</tt>s.  */ static void saveSizeAndLocation(Component component) throws ConfigPropertyVetoExceoption {   Map<String,Object> props=new HashMap<String,Object>();   String className=component.getClass().getName().replaceAll("\\$","_");   props.put(className + ".width",component.getWidth());   props.put(className + ".height",component.getHeight());   props.put(className + ".x",component.getX());   props.put(className + ".y",component.getY());   UtilActivator.getConfigurationService().setProperties(props); } 
isVisible()
f
10 * Constants.SECOND_MS
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null))
c.getLiquid().amount < c.getCapacity()
getSupportFragmentManager()
30 * 60 * 1000
Boolean.valueOf(attrValue)
two.setCoordinateIndex(0)
AnnotatedElementUtils.getAnnotationAttributes(method,annotType)
sendResourcesChangedBroadcast(true,false,pkgList,uidArray,null)
1
Error err
jp.getIntValue()
case BOLD: 
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
toRemove[0]
String curString=""; 
p.getUnknownSearchWordLength() > 3
Integer.valueOf(p.getProperty(screenName + ".id"))
writer.write(line)
NullPointerException.class
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("DH-RSA-DES-CBC3-SHA",KeyExchange.DHr,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA")
displayList != null
registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false)
new ArrayList<>()
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
endpoint.getCurrentThreadsBusy() > limit
new MergingUpdateQueue("EditorNotifications update merger",100,true,null)
new WorldPoint(3105,3369,2)
mRenderNode.isPivotExplicitlySet()
DEFAULT_MAX_QUERIES=3
WebSockets.sendPingBlocking(applicationData,webSocketChannel)
acceptHeaderValues != null
trade.getTotal()
changeAffiliationByOwner(jids,"admin")
new SimpleTextSegmentInfosFormat()
vertex.vertexID() == newVertex.vertexID()
new QueryException("Error in resolving targets matching %s",pattern)
grantRuntimePermissionsLPw(pkg,permissions,false,permissionGrant.fixed,userId)
@Overide
multipleDescriptors
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
case 9: 
meanCellsPerPartition <= 0
VERSION=41
dockedBounds.bottom + adjustment
mWindowManager.getDefaultDisplay().getMetrics(metrics)
CallParticipantRecord newRec=new CallParticipantRecord(callParticipant.getAddress(),new Date(),null); 
typeSer.writeTypePrefix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
Integer.valueOf(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
user == null
Exception e
mRemote.transact(GRANT_URI_PERMISSION_TRANSACTION,data,reply,0)
checkPojoMetaClass()
staticCall("java.lang.System","exit").parameterCount(0)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false)
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
mView.post(mAnimationStarter)
mRenderer.getDefaultViewportHeight()
JSONValue.parse(value)
structuralLock.isLocked()
userHasMagnificationServicesLocked(userState)
a.getFloat(attr,0)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
inserter.release()
getServerManager().getProperties().contains("meiligao.server")
urlConnection.getContentLength()
"Error resetting interface " + mInterfaceName + ", :"+ e
log.debugf("Getting cached data from region [`%s` (%s)] by key [%s]",getRegion().getName(),key)
Validator.isNull(portletResource)
Thread.sleep(5000)
StringBuilder sb=new StringBuilder("RuleFlowProcessInstance"); 
Thread.sleep(5000)
JSParameterTableModel.createInitializerCellFragment("",createFakeClass())
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",entityID)
equalTo(2.0)
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
log.error("Query failed to validate : '{}'",executionInput.getQuery())
DBG=true
len > 0
saveTask(taskDefinition)
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
(Long)o
state == STATE_IDLE
cs[c].set0(r,(long)((_createFrame.integer_range + 1) * (1 - 2 * rng.nextDouble())))
isReturnGeneratedKeys() && generatedKey.isPresent()
lockForRescale()
resources.getDimension(R.dimen.close_handle_height)
U.warn(log,"Failed to load partition counters.")
centerButton(mButtonNeutral)
LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)
mSyncStatus.get(i)
field.getType()
assertEquals("Size of " + r,0,r.size())
new Random(System.currentTimeMillis())
c == '\\'
new WebdavEntry(resp.getResponses()[i])
port == 443 & "https".equals(scheme)
pm.runMigrationTasks(this,tasks,partitionId,replicaIndex,from)
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistartion(PBHelper.convert(registration))
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
event.getTime() <= currentPlayTime
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
isGreaterOrEqual(platformVersion,MNC)
i.getName().getName()
writeString(writer,String.valueOf(reader.getLong()),fieldName)
Object item
capacity > 1 << 30
entry.rxPackets == 0 || entry.txPackets == 0
Throwable e
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionValues)
String pattern=this.prefix; 
status.isError
dynamicType.getLoaded().getConstructor()
isAssignableFrom(supertypeName,cn.superName,cl)
participantAddresses.get(1)
/**   * called by handle  */ public static Object coerceToString(Object o){   return o.toString(); } 
CharSequence viewIdResName
this.session.users().getUserByServiceAccountClient(client)
accountHandle.getComponentName().toString()
onRotationLockChanged()
setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.6,55.7)
scheme.equals("tel")
getObject()
connectionQueueMap.get(peerStatus)
i < 100
readers[i].delete(n - starts[i])
IndexReader.open(benchmark.getRunData().getDirectory(),true)
toolItem.getControl()
assertEquals(fc,fc2)
serviceDataUuid == null
dateOfBirth == null
layer1.initializer().numParams(c,true)
TestRepositoryUtil.assertEqualCollections(tags,myTags)
getUserStateLocked(callingUid)
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",500,"application/xml","resources/add_book.txt",null)
mIconId >= 0
Log.wtf(TAG,"Unable to resolve SystemUI's UID.",e)
client != null & client.autofillClientIsFillUiShowing()
name.length() > 2
new RandomIndexWriter(random(),dir)
new Vt300ProtocolDecoder(ServerManager.this)
@Specialization protected TruffleObject escapingJavaByteArray(LLVMVirtualAllocationAddress address,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMVirtualAllocationAddressTruffleObject(address.copy()); } 
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(true)
dbCol.findOne()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
near.remove(1)
getPlayerPosition().z
loaded.getLoaded().getConstructor()
c == Character.class
attributes.size() == 1
ZonedDateTime.now(ZoneOffset.UTC).isAfter(expDate)
mFlexItem.setAlignSelf(AlignItems.BASELINE)
mono.otherwise(ex -> Mono.error(getReadError(bodyParameter,ex)))
assertEquals(27,sqlStatements.get(1).getLineNumber())
selenium.isVisible("link=Control Panel")
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
i < 20
configureTemplateDescriptionAndIcon(template,iconUrl)
timeout < 0
selenium.isVisible("link=Control Panel")
ONE_MINUS_DST_ALPA(7)
fireTableDataChanged()
process.getInputStream()
object.getDatabase()
getDefaultLanguage()
map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)
mSharedElementNames.size()
UnsafeUtils.set4(_mem,8,bias)
URI.create(super.getHeader(name)).getPath()
new StringInputRowParser(new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null)),null,null,null)
LOGGER.debug("Could not parse entry",ex)
chain.resolveUrlPath(resourceUrlPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
this.messageService.fluxPostAuthorizeBeanFindById(2L).contextStart(withUser)
logger.info("Creating Object {}",count.getAndIncrement())
executor.submit(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
new IndexShardRoutingTable.Builder(new ShardId(indexName,0),false)
invoke(args)
m.getClass()
gatt.periodicAdvertisingEnable(this.advertiserId,enable)
mFollowersWPCOM != null && mFollowersEmail != null
annotation.authenticationType()
TOUCHEVENT_POOL.recylePoolItem(pTouchEvent)
!mIsInitialized
errorRowMeta.size()
counter >= max
Looper.getMainLooper() != Looper.myLooper()
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
mHandler.removeCallbacks(pae)
System.out.print("JVM options:")
this.getColRef()
String url
Pattern.compile("(<style>.*</style>)|<[^<>]*>")
Object strongReference
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_GIF,showCamera)
previousAnnotation.compareTo(annotation)
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,razberryLimit)
dest.writeLong(mSubId)
/**   * GridGain message.   */ GRIDGAIN
assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
new ContiguousIntervalUsageInArrear(usage,accountId,invoiceId,rawSubscriptionUsage,targetDate,rawUsageStartDate,internalTenantContext,invoiceConfig)
pt.isReference()
assertEquals(expectedPlan,actualPlan)
res.getFilename()
length <= 0
setImageDrawable(icon)
private final static ExecutorService EXECUTOR=new ThreadPoolExecutor(0,5,60,TimeUnit.SECONDS,new ArrayBlockingQueue<Runnable>(5)); 
StatBuckets.prettyUptime(secs)
!mResources.getConfiguration().isScreenRound()
new IndexWriter(dir,analyzer,true)
{(byte)this.getNode().getNodeId(),3,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}
value < minimumValue
MultiValueMap<String,String>
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
archivePath.toString()
"Deleting existing file: " + tempTarget
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""))
FileTemplateUtil.mergeTemplate(attributes,VfsUtil.loadText(file))
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
new ObjectMapper().reader(DiskBalancerWorkStatus.class)
Log_OC.e(TAG,"onPause() start")
logger.info("Mlock successfull")
GridHadoopProcessor hadoop=((GridKernal)grid(0)).context().hadoop(); 
computeSemiJoin(inputStatistics,inputStatistics,x,unknown)
host1.getAddress()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn())
file.toString()
this.constraints.updateFromFactHandle(handle)
new ConnectorTableLayout(handle)
assertNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
CachedValuesManager.getManager(project).getParameterizedCachedValue(psiFile,CACHE_KEY,param -> CachedValueProvider.Result.create(parseConfigInternal(param.getVirtualFile(),param),param),true,psiFile)
Integer.valueOf(stackIdStr)
group == null
mncStr.isEmpty()
updatePortletPreferences(portletPreferencesRow)
timeout=120000
element == null
onJava10()
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
TailArraySchema schema=new TailArraySchema(); 
checkManageUsersPermission("getting profiles related to user " + userId)
CHECK_PKGNAME=false
config.enterpriseConfig != null
PApplet.split(pathDataBuffer,"|" + PConstants.WHITESPACE)
realm.assertThread()
!workspaceName.equals(infoName)
mContext.sendBroadcast(intent)
product.fetch("skuMedia",JoinType.LEFT)
DefaultCacheKeysFactory.getNaturalIdValues(cacheKey)
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equals(type)
configuration.getOutputType()
"GET".equals(httpMethod)
selenium.isVisible("link=Control Panel")
(flags & 0x08) > 0
SimpleLimitExceptionHandler exceptionHandler
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
typeSettingsProperties.toSortedString()
evaluate(123.5,DataTypes.FLOAT)
{false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
matcher.matches()
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90
ItemSkipPolicyItemHandler itemHandler=new ItemSkipPolicyItemHandler(itemReader,itemWriter); 
mQuietEnable
res.getFilename()
name.indexOf('+') >= 0
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
mControllers.get(i)
!mIsRecentsShown || mIsPipFocusedInRecent
mListener.onInputUpdated(inputId)
intent.resolveTypeIfNeeded(getContentResolver())
weekRange.roll(Calendar.DATE,6)
mPowerManager.isScreenOn()
(exception ? throwable instanceof RuntimeException : throwable == null)
event.remove(factory.getName())
debug=false
IndexReader.open(ramDir,true)
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
fragment == null
SCAN_STATUS_COMPLETE=1
state != BluetoothA2dp.STATE_PLAYING
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
defaultListenerAccess != null
LOG.error(e)
Value emitByteSwap(Value operand); 
DEBUG=true
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
DaemonListeners.isUnderIgnoredAction(null)
Object listener
readStayAwakeConditions()
isGreaterOrEqual(platformVersion,MNC)
telephony.getForbiddenPlmns(subId,appType)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
scanAllNodes(stage.getScene().getRoot(),PSEUDO_CLASS_LARGE)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
methodExists("of",typeNode)
root != null
cs.getString(columnIndex)
this.constraints.updateFromTuple(leftTuple)
alertDialogBuilder.setNegativeButton(resources.getString(R.string.title_allow),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=false;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),false);     latch.countDown();   } } )
mApplicationObject == null
cs == null
addWarn(msg,e)
mResourceData[i] != null
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
sendMessage(CMD_STOP_AP)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
row("p_comment",null,1.0,0.0,null,null,null)
ANIMATE_TRANSITIONS=true
mAlpha.end()
params.getPathRelativizer()
assertNull(store.getId())
ScriptingUtil.exec(null,inputObjects,language,script)
mock.expectedMessageCount(2)
event.getTime() > currentPlayTime
dialog.hide()
metadata.getFaceRectangles()
Arrays.asList("public","pairwise")
new UploadRemoteFileOperation(mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict(),timeStamp)
LOG.isDebugEnabled()
DiagnosticFactory2<JetElement,JetElement,DeclarationDescriptor>
out.write(data)
printSelect(unionSelect.right(),sb)
mService.disableNetwork(netId,mContext.getOpPackageName())
referencedDomainClass.getName()
mAttributes.getFlags()
getLargestAlignment(targetDataLayout)
mapper.seAttributePrefix("ROLE_")
ethFilter.getError()
centerButton(mButtonNeutral)
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
timeout < 0
mLastBatteryLevel != mHealthInfo.batteryLevel
final CharSequence message
reset(channel,logTemplate,logBufferLength)
Mono.currentContext()
processResult.getStdout()
handleIncomingUser(Binder.getCallingPid(),callingUid,userId,type == ActivityManager.INTENT_SENDER_BROADCAST,true,"getIntentSender",null)
m.put(OutputStream.class,os)
Math.abs(oldDist - dist) > 30
taken > 190
Mono.currentContext()
button == MouseEvent.RELEASE
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=2
Double rate
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0.1).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new Resource(url,name)
log.warn("Unrecognized Oracle client version at " + oraHome)
JetTypeChecker.INSTANCE.isSubtypeOf(expectedReturnType,returnType)
assertNotUpgraded(client(),null)
mAttributes.getFlags()
promise.setSuccess(null)
truePositives.incrementCount(classLabel,1.0)
mPowerManager.isScreenOn()
callBacks.parallelStream()
counter <= max
StreamingWindowedElement.class
JvmDeclarationOriginKt.OtherOrigin(aClass,descriptor)
mBoundServices.isEmpty()
accountHandle.getComponentName().toString()
response.set(ROLLED_BACK)
this.snappedTopInset()
Assert.assertEquals(3,latch.getCount())
options.getJvmOpts() == null
completeBox.setBackgroundResource(R.drawable.btn_check)
1 << 6
Log.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
@Nullable
getTestGridName(nodeCount() + servers + i)
index.getName()
mDataAuthorities == null
((MainTimeLineActivity)getActivity()).setHomeListView(listView)
mGsmPhone.mSST.isConcurrentVoiceAndData()
mAuthorities.get(i)
selenium.isVisible("link=Control Panel")
Log.wtf(TAG,"This will become an error",ex)
StringBuffer builder
appWidth > mHeaderMinWidth
Integer.valueOf(this.getOptional("kylin.server.auth-user-cache.max-entries","100"))
store.getImage()
!mMediaPlayer.isPlaying()
WEB_SYNC_MANAGER=true
((Scorecard)serializable).isUseReasonCodes()
findCodecForFormat(false,format)
VMRuntime.is64BitAbi(getPreferredInstructionSet())
mPowerManager.isScreenOn()
assertTrue(prj.nodes().contains(grid(4).localNode()))
isResumed()
mSyncStatus.get(i)
new Paint(Paint.ANTI_ALIAS_FLAG)
Settings.Secure.getInt(mContentResolver,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED)
from >= to
factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
new CircularImportProblem(configClass,this.importStack)
mNavigationBarView.isQuickScrubEnabled()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
delta=100
selenium.isVisible("link=Control Panel")
Parser.xmlParser()
Name.guess(name)
dimension.width - (dimension.width == 0 ? 0 : PADDING)
DEBUG=true
selenium.isVisible("link=Control Panel")
klass.getDeclaredMethods(false,declaredMethods)
parsedResult.getSqlType()
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMilis(request.getStartTime())
Nd4j.pullRows(weights,1,indexes)
mReadOwners != null
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
Thread.sleep(100)
mAppToken.hasContentToDisplay()
LOG.info("Client: segment " + segments[j] + " at "+ addr)
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data,mock(BindingResult.class))
outActivity.length > 0
((VarcharType)type).getLength()
mGBDevice.getFirmwareVersion()
LensPositionSelectors.back()
inputItem.getDescription()
fluentSetters()
fingerId == 0
sb.toString()
new Paint(Paint.ANTI_ALIAS_FLAG)
dlg.setPositiveButton(fButtons[0],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,1),callbackId);   } } )
mDataAuthorities == null
column.isMarkedForDelete()
logger.error(String.format("fail to get start offset partitionId: %d, target timestamp: %d",idx,targetTimestamp))
Util.SDK_INT <= 24
Slog.wtf(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
selenium.isVisible("link=Control Panel")
mTags.containsKey(t)
out.writeLong(sampleCount)
VERSION=41
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
mTfs.ls(Constants.PATH_SEPARATOR,true)
initClient=60
e.getMessage()
monitoredRegion.getProximityUuid()
IBackupManagerService svc=mService; 
file.name().contains(".etc1")
Value emitLoad(LIRKind kind,Value address,LIRFrameState state); 
x=1
nodeEngine.getService(LockService.SERVICE_NAME)
view.getZoom()
selenium.isVisible("link=Control Panel")
type.getConstructor()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
expectedCountsForADoc(weights,ind)
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
Control.getSingleton().getExtensionLoader().addonFilesAdded()
props.getProperty(CONNECT_TIME_PROP,FALSE)
topActivity != null
mHandler.postDelayed(pae,timeout)
Slog.wtfStack(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
AudioFormat.isEncodingLinearPcm(mAudioFormat)
mIam.getStackInfo(WINDOWING_MODE_UNDEFINED,ACTIVITY_TYPE_STANDARD)
poList[1]
upToDateRevisionProvider.getLastUpToDateContentFor(virtualFile)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
public TokenStream create(TokenStream input){   return new CapitalizationFilter(input,this); } 
logger.info("--> checking that _current no longer returns the snapshot",blockedNode)
abstract public Output parseType(Input notation); 
new Message(MSG_TXT)
SmsHeader.toByteArray(header).length + 1
dao.meta().isSqlServer() || dao.meta().isHsql()
zoom - Math.floor(zoom) < 0.05f
Exception e
Collections.emptyList()
nodePath != null
CONSTELLATION_TYPE_SHIFT_WIDTH=3
headers.getContentLength() < 0
sb.toString()
new RaftMessages.HeartbeatResponse(myself,RaftMessages.Type.HEARTBEAT_RESPONSE)
id=15855
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
dataType.getTypeName()
mResourceData[i] != null
i > stripeStats.size()
SettingsActivity.class
1 << 16
commander.downContentPic(imageView,accountList.get(i).getAvatar_url(),i,listView)
JMXEnabledThreadPoolExecutor.class
myParameterIndex > value
startExpression != null
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
Slog.wtf(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
comparator.compare(value,answer) < 0
mConferenceById.containsKey(callId)
new Rect(left,top,bottom,right)
assertEquals(redVocab.getIndex(),0)
checkPojoMetaClass()
Integer.class
ArrayList<UsageInfo>
mMenu.getVisibleItems()
level < 96
event.getY()
sortedModules.stream()
dest.writeLong(mSubId)
selenium.isVisible("link=Control Panel")
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFile()
e.getSuppressed()[0]
ExceptionInInitializerError|ClassNotFoundException
state.value == rotationLocked
myEditor.getScrollingModel().getVisibleArea()
Loader.loadClass(mName)
RuleChain.outerRule(timeout)
((StringLiteral)literal).getSlice()
new Console(debugger,true)
DEBUG_WINDOW_STATE=true
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
XmppStringUtils.parseBareAddress(from)
propValue == null
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
action == KeyEvent.ACTION_UP
c == interfaceClass
consoles.waitUntilJdtLsStarted()
0xff << shift
context == null
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD))
foundTargetWs && winAnim.getShown()
new Paint()
ConfigPropertyVetoExceoption e
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
selenium.isVisible("link=Control Panel")
ActivityManager.handleIncomingUser(callingPid,callingUid,userId,true,true,"enqueueNotification",pkg)
state.mBitmap == null
comparePartitionOwnership(false,localMember,partition)
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,false,DEFAULT_CONFIG_IGNORE_LIST)
assertEquals(expectedPlan,actualPlan)
type.getConstructor()
setNumber(String.valueOf(integerPart))
session.initBounds(param)
selenium.isVisible("link=Control Panel")
getSelectedColorRes()
selenium.isVisible("link=Control Panel")
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
Arrays.asList("ls","pwd")
getDegreesFromXY(x,y)
Integer.valueOf(getOptional("kylin.engine.spark.min-partition","1"))
new LeftTuple(new DefaultFactHandle(1,"cheese"))
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,mWifiActivityIconId)
nearCache.put(key,event.getValue())
queryIndex == 0
params.getSimulatePlatformVersion()
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
history2.getWorkflowInstanceId()
method.invoke(target,args)
text.charAt(start - 1)
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
c.deactivate()
RedisOperations<Object,Object>
caches.get(i)
ACRA.log.e(LOG_TAG,"Unknown json subtree type, see issue #186")
selUser.getUserId()
return mChangingDisappearingDuration; 
namesOfResourcesWithInvalidMac.contains(cleartextPath)
referenceDatabase.getObjectQuotingStrategy()
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
getAddedCount()
selenium.isVisible("link=Control Panel")
/**   * Creates a ClassLoader implementation which has, by default, only the classes from the Java API visible, but which can allow access to selected classes from the given parent ClassLoader.  * @param parent the parent ClassLoader  * @param spec the filtering spec for the classloader  * @return The ClassLoader  */ FilteringClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec); 
getLogger().error("Unknown classloader [NSME]: " + e.getMessage())
mService.reassociate()
private Container container; 
String.format("Builder for coercable type %s had 2 setters named %s but they were not Optional " + "and non-Optional. Don't know how to coerce.")
"mobi".equals(file.getExtension())
status <= retry
REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)
new RedissonSession()
fileEntry == null
selenium.isVisible("link=Control Panel")
e.getMessage()
LOG.log(Level.SEVERE,"Inbound policy verification failed: " + ex.getMessage(),e)
adviced.getConstructor()
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
getValueController().updateSelectionValue(editedValue)
timeFieldSpec.getOutgoingTimeColumnName()
IncomingRepairStreamTracker.class
StringBuffer stringBuilder=new StringBuffer(); 
new ClusterTopologyException("Failed to send message because node left grid [nodeId=" + nodeId + ", msg="+ msg+ ']')
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper)
selenium.isVisible("link=Control Panel")
buildLockFactory()
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     if (!myProject.isOpen())     return;     myFrameworkInstanceLibraryManager.updateFrameworkInstanceLibraries();     myAlarm.cancelAllRequests();     myAlarm.addRequest(new Runnable(){       @Override public void run(){         rebuildOSGiIndices();       }     } ,500);   } } )
width / images.size()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
dest.writeLong(mSubId)
Internal.prefixKeyWithSalt(key_b)
functionFactory.exp(iX)
RunnerMediator.injectRunnerCommand(super.postProcessCommandLine(commandLine))
LOG.isDebugEnabled()
args[0]
onDetachedFromWindows()
SubtleUtil.validateNotExist(inFile)
new CharacterDelimiterFrameDecoder('\0')
selenium.isVisible("link=Control Panel")
builder.parseXContent(parser,true)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
selenium.isVisible("link=Control Panel")
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
NumberOfPortsUsedByReadReplica=3
PasswordPoliciesAdminWebUpgrade.class
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
styles.styles()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
i <= 0
Preconditions.checkNotNull(value,"Value argument can not be null")
getLog().info("Kotlin version " + KotlinCompilerVersion.VERSION + " (JRE "+ System.getProperty("java.runtime.version")+ ")")
!event.isError()
Exception e
logger.warnf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
logTable.getDatabaseMeta().getSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
mSharedElementNames.size()
FMLPacket.makePacket(Type.ENTITYSPAWN,er,entity)
CharSequence message
stateHolder.reloadVariables()
margin > visEndLinePosition.column
colors.getResourceId(i,0)
state == AsyncState.STARTING
_freemarkerEngineConfiguration.getResourceModificationCheck()
context.getDialect() == POSTGRES
return false; 
JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
getAffiliatesByOwner("owner")
new UnsupportedOperationException()
this.profiles(System.getProperty(VERSION,DEFAULT_VERSION))
pdlMarker.rollbackTo()
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsExactly("java","pmd")
DEBUG=true
userComponents.valueAt(i)
assertEquals(0.3171486183300009,mse,1e-8)
4 * 12
commState.getBoolean()
synchronized (classCache) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
targetPrincipal == null
getTestName(false)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
context.getPackageName()
FileUtils.cleanDirectory(localRepoDir)
AppPrefs.getImageOptimizeWidth() > 0
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).subscribe()
accountData.setIsMigrated(Objects.firstNonNull(isNotifiedForInvoices,delegate.isNotifiedForInvoices()))
pos < len
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark
Long.valueOf(name)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
resId == R.string.local_index_unselect_gpx_file
resolutionStrategy.resolveGraphToDetermineTaskDependencies()
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
XContentType.JSON.restContentType()
LOG.trace("Failed to delete temp folder",e)
portlet.getPortletName()
List<T>
origin >= other
target == null
newRemoteAddr != null
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)
mAttributes.getFlags()
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
this.heading=0.0
@Override public Object clone(){   BooleanProperty prop=(BooleanProperty)super.clone();   prop.value=value;   return prop; } 
assertEquals(0.3169947529691508,mse,1e-8)
logger.error("InfluxDB is not yet connected")
LOG.debug("Failed to reconfigure vim keymap.\n" + e)
RestartStrategies.fixedDelayRestart(3,0)
caches.get(i)
1
SAMPLE_RATE_HZ_MAX=48000
lock.isLocked()
message.getFormattedFields()
mock.expectedBodiesReceived("Hello World 2","Hello World 4")
cursor.getString(COLUMN_VALUE)
builder.length() == 0
sourceWidth > 0
new String(actual,0,i + 1)
fragUtils.getClass()
!isInsert
taken > 90
_log.error(ioe,ioe)
zoneId.equals("+00:00") | zoneId.equals("-00:00")
new NullPointerException()
access != null
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
SAVE_TRACK_INTERVAL.setModeDefaultValue(ApplicationMode.BICYCLE,7000)
Localization.lang("View")
pathMap.substitute(path,true,null)
resources == null
new ConcurrentHashMap<String,Boolean>(64)
o.getClass()
setSDesEncryptionToDescription(mediaType,description,null)
Mono<Void>
mImageManager.load(postHolder.mImgDiscoverAvatar,GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp,ScaleType.CENTER)
WebSettings.setTextSize(WebSettings.TextSize.LARGER)
get_params()._score_training_samples != ftrain.numRows()
GrClosureSignatureUtil.mapParametersToArguments(signature,callExpression.getNamedArguments(),callExpression.getExpressionArguments(),callExpression.getClosureArguments(),callExpression,true,true)
mConferenceById.containsKey(callId)
Mono.currentContext()
LOGGER.debug("Could not copy cite key",ex)
Key.makeSystem(_file + DeepWaterModel.CACHE_MARKER)
selenium.isVisible("link=Control Panel")
JavaSdkImpl.getMockJdk15("java 1.5")
clazz.getSimpleName()
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out3p)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,false,false)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
i <= MAX_AUDIO_PORTS
Assert.assertEquals(3,visitor.getConditions().size())
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
typeSupported(type)
Boolean.valueOf(attrValue)
menu.getLatLon() != null
mPolicy != null
queryIndex == 0
mService.setUidPolicy(UID_A,POLICY_NONE)
path.substring(1,path.length())
referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
new NoDexException("%s contains no dex file")
Class.forName(this.owner)
mLastAnnouncementWasQuickSettings && !mTracking
synchronized (io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
query.length()
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
Integer.toString(bitstampOrder.getId())
new char[31]
message.getContact()
ArrayList<UsageInfo>
a.getNodeName()
user.getCompanyId()
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,false)
styles_.input()
{8,9}
event.isCanceled()
mNavigationView != null
input.getPath()
mService.reconnect()
manager.beginTransaction().remove(fragment).commit()
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamSpace()
(100 - nodesContractedPercentage) / 100
dyn.remove("delays")
Nd4j.rand(200,200,max,min,Nd4j.getRandom())
observable.timeout(5,SECONDS).toList().toBlockingObservable()
exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
System.currentTimeMillis() + start
FluxPeekHelper<T>
mImm.getInputMethodList()
mRvc == null
flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter,ex)))
request.getClientAttributeNames()
@NotNull GitBranch branch
hasPermission(permission)
Arrays.asList("Die Katze ist schön.","Die eine Katze ist schön.","Eine Katze ist schön.","Beiden Filmen war kein Erfolg beschieden.","In einigen Fällen ist der vermeintliche Beschützer schwach.","Was Wasser für die Fische ist.","In den letzten Jahrzehnten ist die Zusammenarbeit der Astronomie verbessert worden.","Für Oberleitungen bei elektrischen Bahnen ist es dagegen anders.","... deren Thema die Liebe zwischen männlichen Charakteren ist.","Mehr als das in westlichen Produktionen der Fall ist.","Da das ein fast aussichtsloses Unterfangen ist.","Was sehr verbreitet bei der Synthese organischer Verbindungen ist.","In chemischen Komplexverbindungen ist das Kation wichtig.","In chemischen Komplexverbindungen ist das As5+-Kation wichtig.","Die selbstständige Behandlung psychischer Störungen ist jedoch ineffektiv.","Die selbstständige Behandlung eigener psychischer Störungen ist jedoch ineffektiv.","Im Gegensatz zu anderen akademischen Berufen ist es in der Medizin durchaus üblich ...","Im Unterschied zu anderen Branchen ist Ärzten anpreisende Werbung verboten.","Aus den verfügbaren Quellen ist es ersichtlich.","Das Mädchen mit den langen Haaren ist Judy.","Der Durchschnitt offener Mengen ist nicht notwendig offen.","Der Durchschnitt vieler offener Mengen ist nicht notwendig offen.","Der Durchschnitt unendlich vieler offener Mengen ist nicht notwendig offen.","Der Ausgangspunkt für die heute gebräuchlichen Alphabete ist ...","Nach sieben männlichen Amtsvorgängern ist Merkel ...","Für einen japanischen Hamburger ist er günstig.","Derzeitiger Bürgermeister ist seit 2008 der ehemalige Minister Müller.","Derzeitiger Bürgermeister der Stadt ist seit 2008 der ehemalige Minister Müller.","Die Eingabe mehrerer assoziativer Verknüpfungen ist beliebig.","Die inhalative Anwendung anderer Adrenalinpräparate zur Akutbehandlung asthmatischer Beschwerden ist somit außerhalb der arzneimittelrechtlichen Zulassung.","Die Kategorisierung anhand morphologischer Merkmale ist nicht objektivierbar.","Die Kategorisierung mit morphologischen Merkmalen ist nicht objektivierbar.","Ute, deren Hauptproblem ihr Mangel an Problemen ist, geht baden.","Ute, deren Hauptproblem ihr Mangel an realen Problemen ist, geht baden.","In zwei Wochen ist Weihnachten.","In nur zwei Wochen ist Weihnachten.","Mit chemischen Methoden ist es möglich, das zu erreichen.","Für die Stadtteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Für die Stadtteile und selbständigen Ortsteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Die Qualität der Straßen ist unterschiedlich.","In deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","Die Führung des Wortes in Unternehmensnamen ist nur mit Genehmigung zulässig.","Die Führung des Wortes in Unternehmensnamen und Institutionen ist nur mit Genehmigung zulässig.","Die Hintereinanderreihung mehrerer Einheitenvorsatznamen oder Einheitenvorsatzzeichen ist nicht zulässig.","Eines ihrer drei Autos ist blau und die anderen sind weiß.","Eines von ihren drei Autos ist blau und die anderen sind weiß.","Bei fünf Filmen war Robert F. Boyle für das Production Design verantwortlich.","Insbesondere das Wasserstoffatom als das einfachste aller Atome war dabei wichtig.","In den darauf folgenden Wochen war die Partei führungslos","Gegen die wegen ihrer Schönheit bewunderte Phryne ist ein Asebie-Prozess überliefert.","Dieses für Ärzte und Ärztinnen festgestellte Risikoprofil ist berufsunabhängig.","Das ist problematisch, da kDa eine Masseeinheit und keine Gewichtseinheit ist.","Nach sachlichen oder militärischen Kriterien war das nicht nötig.","Die Pyramide des Friedens und der Eintracht ist ein Bauwerk.","Ohne Architektur der Griechen ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur und Kunst der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","In denen jeweils für eine bestimmte Anzahl Elektronen Platz ist.","Mit über 1000 Handschriften ist Aristoteles ein Vielschreiber.","Mit über neun Handschriften ist Aristoteles ein Vielschreiber.","Die Klammerung assoziativer Verknüpfungen ist beliebig.","Die Klammerung mehrerer assoziativer Verknüpfungen ist beliebig.","Einen Sonderfall bildete jedoch Ägypten, dessen neue Hauptstadt Alexandria eine Gründung Alexanders und der Ort seines Grabes war.","Jeder Junge und jedes Mädchen war erfreut.","Jedes Mädchen und jeder Junge war erfreut.","Jede Frau und jeder Junge war erfreut.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und sozialen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und neurowissenschaftlichen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben und Verhalten des Menschen einschließlich der biologischen bzw. sozialen Grundlagen ist die Psychologie interdisziplinär.","Alle vier Jahre ist dem Volksfest das Landwirtschaftliche Hauptfest angeschlossen.","Aller Anfang ist schwer.","Alle Dichtung ist zudem Darstellung von Handlungen.","Allen drei Varianten ist gemeinsam, dass meistens nicht unter bürgerlichem...","Er sagte, dass es neun Uhr war.","Auch den Mädchen war es untersagt, eine Schule zu besuchen.","Das dazugehörende Modell der Zeichen-Wahrscheinlichkeiten ist unter Entropiekodierung beschrieben.","Ein über längere Zeit entladener Akku ist zerstört.","Der Fluss mit seinen Oberläufen Río Paraná und Río Uruguay ist der wichtigste Wasserweg.","In den alten Mythen und Sagen war die Eiche ein heiliger Baum.","In den alten Religionen, Mythen und Sagen war die Eiche ein heiliger Baum.","Zehn Jahre ist es her, seit ich mit achtzehn nach Tokio kam.","Bei den niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Bei den sehr niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Die älteste und bekannteste Maßnahme ist die Einrichtung von Schutzgebieten.","Die größte Dortmunder Grünanlage ist der Friedhof.","Die größte Berliner Grünanlage ist der Friedhof.","Die größte Bielefelder Grünanlage ist der Friedhof.","Die Pariser Linie ist hier mit 2,2558 mm gerechnet.","Die Frankfurter Innenstadt ist 7 km entfernt.","Die Dortmunder Konzernzentrale ist ein markantes Gebäude an der Bundesstraße 1.","Die Düsseldorfer Brückenfamilie war ursprünglich ein Sammelbegriff.","Die Düssel ist ein rund 40 Kilometer langer Fluss.","Die Berliner Mauer war während der Teilung Deutschlands die Grenze.","Für amtliche Dokumente und Formulare ist das anders.","Wie viele Kilometer ist ihre Stadt von unserer entfernt?","Über laufende Sanierungsmaßnahmen ist bislang nichts bekannt.","In den letzten zwei Monate war ich fleißig wie eine Biene.","Durch Einsatz größerer Maschinen und bessere Kapazitätsplanung ist die Zahl der Flüge gestiegen.","Die hohe Zahl dieser relativ kleinen Verwaltungseinheiten ist immer wieder Gegenstand von Diskussionen.","Teil der ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der umfangreichen dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Der zweite Teil dieses Buches ist in England angesiedelt.","Eine der am meisten verbreiteten Krankheiten ist die Diagnose","Eine der verbreitetsten Krankheiten ist hier.","Die Krankheit unserer heutigen Städte und Siedlungen ist folgendes.","Die darauffolgenden Jahre war er ...","Die letzten zwei Monate war ich fleißig wie eine Biene.","Bei sehr guten Beobachtungsbedingungen ist zu erkennen, dass ...","Die beste Rache für Undank und schlechte Manieren ist Höflichkeit.","Ein Gramm Pfeffer war früher wertvoll.","Die größte Stuttgarter Grünanlage ist der Friedhof.","Mancher will Meister sein und ist kein Lehrjunge gewesen.","Ellen war vom Schock ganz bleich.","Nun gut, die Nacht ist sehr lang, oder?","Der Morgen ist angebrochen, die lange Nacht ist vorüber.","Die stabilste und häufigste Oxidationsstufe ist dabei −1.","Man kann nicht eindeutig zuordnen, wer Täter und wer Opfer war.","Ich schätze, die Batterie ist leer.","Der größte und schönste Tempel eines Menschen ist in ihm selbst.","Begehe keine Dummheit zweimal, die Auswahl ist doch groß genug!","Seine größte und erfolgreichste Erfindung war die Säule.","Egal was du sagst, die Antwort ist Nein.","... in der Geschichte des Museums, die Sammlung ist seit 2011 zugänglich.","Deren Bestimmung und Funktion ist allerdings nicht so klar.","Sie hat eine Tochter, die Pianistin ist.","Ja, die Milch ist sehr gut.","Der als Befestigung gedachte östliche Teil der Burg ist weitgehend verfallen.","Das Kopieren und Einfügen ist sehr nützlich.","Der letzte der vier großen Flüsse ist die Kolyma.","In christlichen, islamischen und jüdischen Traditionen ist das höchste Ziel der meditativen Praxis.","Der Autor der beiden Spielbücher war Markus Heitz selbst.","Der Autor der ersten beiden Spielbücher war Markus Heitz selbst.","Das Ziel der elf neuen Vorstandmitglieder ist klar definiert.","Laut den meisten Quellen ist das Seitenverhältnis der Nationalflagge...","Seine Novelle, die eigentlich eine Glosse ist, war toll.","Für in Österreich lebende Afrikaner und Afrikanerinnen ist dies nicht üblich.","Von ursprünglich drei Almhütten ist noch eine erhalten.","Einer seiner bedeutendsten Kämpfe war gegen den späteren Weltmeister.","Aufgrund stark schwankender Absatzmärkte war die GEFA-Flug Mitte der 90er Jahre gezwungen, ...")
mValues[7]
sourceNodeTextData.getText().isEmpty()
Integer.valueOf(value)
/**   * Received bytes count.   */ private final LongAdder rcvdBytesCnt=new LongAdder(); 
ams.mContext.createPackageContext(appInfo.packageName,0)
mMncStr == null
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
new TextVar(shell,SWT.SINGLE | SWT.LEFT | SWT.BORDER)
WaitUtils.waitForPageToLoad(driver)
win.isDrawnLw()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
listAdapter.notifyDataSetInvalidated()
invocation.addAttachmentsIfAbsent(context)
tableCache.getTypedObjects(monitor,this,PostgreTableReal.class)
new CallbackStub()
color.length() > 0
return false; 
holder.textView.setBackground(mSelectedBackground)
3
Beans.newDuration(rtProps.getTimeToKillInSeconds()).toMillis()
DirectoryReader.open(writer,true)
length < 0
members == null
number.equals("A")
delta + contextEnd
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
computeHorizontalScrollRange()
mJSONArrayRequestListener=null
mService.oneTouchPlay(getCallbackWrapper(callback))
this.keyDeserializer.configure(config.originals(),false)
Math.min(mXAxis.mAxisMinimum,pos.x)
tracesFile.mkdirs()
when(rs.wasNull()).thenReturn(false)
logger.warn("Cannot play sound ({})",e.getMessage())
IOUtils.closeQuitely(is)
Trans == TRANSPOSE
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(3).backward(true).hiddenLayerSizes(new int[]{3,2}).override(new ClassifierOverride(2))
name="java:/ConnectionFactory"
found=false
stopTimeNs - responseStartTimeNs
runningTasks.get(assignedTask)
myPieces.ceilingEntry(startOffset)
(NestedForm)form
List<PairedStats>
block instanceof BlockGrass
database.getDatabaseMajorVersion() >= 9
Integer.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
fragFilename == null
!newDatabase && (bibDatabaseContext != null)
mTextColor.getColorForState(ds.drawableState,0)
credentials.getUsername()
super.getDefaultContexts()
loaded.getLoaded().getConstructor()
endTrack("main")
type.getConstructor()
public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
mBoundServices.isEmpty()
a.getFloat(attr,0)
LOG.isDebugEnabled()
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
container.getTimeFormat().equals(TimeFormat.DATE)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
mAlpha.end()
platformVersion < MNC
range.endsWith("^.." + _latestHASH) && ticketIds.isEmpty()
t1.setToUpperCase(true)
session.close(new CloseReason(code,reasonPhrase))
mDisplayContent.getSplitScreenPrimaryStack()
Looper.prepare()
mMenu.getVisibleItems()
pCommandLineArg.indexOf(" ") != -1
AnkiDroidApp.deck().setUndoStart(undoName)
viewGroup == null
1024 * 64
/**   * @return a String for the summary of the preference.  */ public String getSummary(){   return null; } 
new StringBuilder(247)
FunctionTypesKt.isExactExtensionFunctionType(upperBoundType)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=true
UserNotificationEventLocalServiceUtil.getDeliveredUserNotificationEvents(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable,start,end)
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
itemMatches(itemStack,target,false)
"A task is in the ABORTED state but stage is " + stageState
showMessage(context.getString(R.string.error_calculating_route) + " : " + res.getErrorMessage())
1023 * 200
log.warn("Problem in JSR223 script ",e)
mSyncStatus.get(i)
behindFraction * mScrimBehindAlphaKeyguard
Integer.valueOf(value)
create.fetch(meta().getSchemas(),SQLDataType.VARCHAR,SQLDataType.VARCHAR)
logger.error("Error connecting to Plex",e)
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
timeout * 2
_typeSettingsProperties.toSortedString()
Integer.parseInt(setting)
mResourceData[i] != null
node.getName()
target.addTask(task)
dstPath.getPath()
platform.map(version::compareTo).orElse(0) < 0
MoreCollectors.toImmutableSortedSet()
amenity.getName(lang)
sampleFactory.getConstructor()
printSelect(unionSelect.left(),sb)
log.debug(e1.getMessage(),e1)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
functionJSDocInfo != null
getTree().getVisibleRowCount()
tester.getServletRequest()
id=15858
this.route(request).map(RouterFunctions::cast).otherwiseIfEmpty(Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))
FileUtils.setPermissions(fstr.getFD(),0660,SYSTEM_UID,PACKAGE_INFO_GID)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
JwsUtils.getSignatureVerifier(key)
parser.parse(GroovyElementTypes.OPEN_BLOCK,builder)
logIndex <= lastToApply
XMLInputFactory.newFactory()
tableHasData(oldTableName)
mPostKeyguardExitAnimation.hasEnded()
evaluator.evalComponentTypeFromArrayExpression(resolveParent,arrayExpression)
FilenameUtils.getPath(destination)
new IOException("JSON forbids NaN and infinities: " + value + " at path "+ reader.getPath())
getNetworkPolicies()
getAllprojects()
public Resource getResource(){   return resource; } 
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=500
setWindowingMode(windowingMode,false,true,false)
info.crashInfo.stackTrace.length() > 10000
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
ScanResult.is24GHz(frequency)
dynamicType.getLoaded().getConstructor()
uiSettings.setShowToolWindowsNumbers(myShowCodeLensInEditorCheckBox.isSelected())
new NodeInfo(Version.CURRENT,org.elasticsearch.Build.CURRENT,new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT),emptyMap(),Settings.EMPTY,DummyOsInfo.INSTANCE,new ProcessInfo(randomInt(),randomBoolean()),JvmInfo.jvmInfo(),new ThreadPoolInfo(Collections.singletonList(new ThreadPool.Info("test_threadpool",ThreadPool.ThreadPoolType.FIXED,5))),new TransportInfo(transportAddress,Collections.emptyMap()),new HttpInfo(transportAddress,randomLong()),new PluginsAndModules(),new IngestInfo(Collections.emptyList()),new ByteSizeValue(randomIntBetween(1,1024)))
PropertyListParser.saveAsASCII(x,outputFile)
ClosureToSamConverter.isSamConversionAllowed(myPlace) && InheritanceUtil.isInheritor(argType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE) && !TypesUtil.isClassType(paramType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)
mPkg.getConfig(new ResConfigFlags())
ClassNotFoundException e
Trans == TRANSPOSE
logger.warn(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
mActiveAgents.valueAt(i)
getVal(path,false)
Assert.assertEquals(0,key)
ImmutableSet.of("superconsole")
RemoteException e
AbstractMethodError e
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()
checkManageUsersPermission("getting profiles related to user " + userId)
Matchers.greaterThanOrEqualTo(1000L)
Assert.assertNotNull(semaphore.acquire(3,TimeUnit.SECONDS))
Boolean.valueOf(attrValue)
(GrTypeDefinition)element
bytes.length > 100000
block.useSourceInfoFromForTree(exprRoot)
mNavigationBarView.getPaddingStart()
IBackupManagerService svc=mService; 
getConnection(url)
List<String>
project == null
module != null
new WorldPoint(3458,3364,0)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
event.isResuming()
m.getSize()
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
checkPojoMetaClass()
textureDataMap.size()
getTokenNames()
mQsContainer.getLayoutParams()
Short.valueOf(value.toString())
log.warn("Reset to factory defaults : onOperatorError")
isAfter(currentChange.getFirst(),child)
y == 0
PyQualifiedExpression.class
StringManager sm=StringManager.getManager(Constants.Package); 
new IndexWriter(dir,new WhitespaceAnalyzer())
new NativeAllocationRegistry(nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
getTestName(false)
context.getPackageName()
valueFormatter != null
List<ActivityManager.RecentTaskInfo>
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
notifier.isIgnoreExchangeSentEvents()
new ConfigurationException(String.format("Incompatible SSTable found.  Current version %s is unable to read file: %s.  Please run upgradesstables.",Descriptor.Version.CURRENT,desc))
builder.length() == 0
(!mIsExpanding || mHintAnimationRunning) && !mQsExpanded && mStatusBar.getBarState() != StatusBarState.SHADE
LOG.info("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
NestedSetBuilder.stableOrder()
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
comp.requestFocus()
new IndexWriter(directory,analyzer,true)
offsetHandler.enter()
log.warn("Double activation of SQL context")
new Long(getIntValue(workingMemory,object))
this.disconnect(account,false)
MultiValueMap<String,String>
TestUtils.randomByte() + 127
return mRxTimeMillis; 
loaded.getLoaded().getConstructor()
KotlinFacetSettingsProvider.Companion.getInstance(module.getProject()).getSettings(module)
topMbMessage.getMessageId()
localLOGV || true
runUTRunner(testDir.getPath(),testDir.getPath() + "/")
ver.isPreRelease()
type == FILE_URI
n.intValue()
getModel().getRowCount()
mAttributes.getFlags()
Log_OC.e(TAG,"Got to start sync")
getAddedCount()
TokenSet.create(mSL_COMMENT,mML_COMMENT,mREGEX_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,WHITE_SPACE)
FluxPeekHelper<T>
new UnsupportedOperationException()
sourceSet.getClasses()
numMessages=1000
in.readInt()
ensureNoInitializingShards()
int year() default 2007; 
id=8
ImmutableMap.of(columnFamily,mutations)
logger.info("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
win.isDrawnLw()
TEST_STREAM_KEYS_SIZE=10
value.length() > MAX_LENGTH
1
PyQualifiedExpression.class
mBiometricUnlock.stopAndShowBackup()
new IllegalStateException("Could not find navigation view for Toolbar!",e)
sendMessage(CMD_STOP_AP)
curr.end > intervals[i].start
pkgs.get(i)
final ClassNotFoundException e
mNextWakeFromIdle != null
op.z()
exchange.get(BindingOperationInfo.class)
selenium.isVisible("link=Control Panel")
dockedBounds.top - adjustment
serializer.serializeForInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
Realm.getInstance(this)
new AudioNode(audioRenderer,assetManager,"Sound/Environment/Ocean Waves.ogg",false)
a.willChangeTransformationMatrix()
mAppOpsManager.noteOp(opCode,uid,packageName)
editor.apply()
lock.isLocked()
arg.indexOf('.') >= 0
mContext.sendBroadcast(intent)
encoderLayerSizes == null
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
isSelected(node)
AnnotatedElementUtils.getAnnotationAttributes(method,annotationType)
securityMode != SecurityMode.None
mContext.sendBroadcast(intent)
new SemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: Column " + field + " is of type "+ lInfo.getType().getTypeName()+ " on first table and type "+ rInfo.getType().getTypeName()+ " on second table"))
getActiveFgCall().getPhone().sendDtmf(c)
LOG.debug(e)
e.getMessage()
moveTaskToBack(true)
new IllegalStateException("unable to find primary shard assigned to node [" + request.getCurrentNode() + "]")
btceDepth.getAsks()
Assert.assertFalse(permissionChecker.isOmniadmin())
Timber.e(e,errorMsg)
loaded.getLoaded().getConstructor()
GlobalContextKey.create("_java_compiler_usage_stats_")
Exception e
toHeapData(key)
Resources.getString("defaultGroupName")
g.getTarget().setPackageName("target/generated-sources/jooq")
Builder<T,B>
assertEquals(5,ti.nrOfInvocations)
DEBUG=true
getRestricted(null,uid,restrictionName,md.getName(),false,true)
sliceSize * 20480
setZrtpEncryptionToDescription(mediaType,description,null)
this.typeDescriptorCache.put(pd,td)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
index > 0
config.getServletContext()
deletionInfo.memorySize()
onCreateView(mContext,appWidgetId,appWidget)
messageType.set(message2,"message","Hello World")
selenium.isVisible("link=Control Panel")
id=15864
mp.getValue()
apnContext.getWaitngApns()
emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
MonitoringWebUpgrade.class
tileBox.getMapDensity()
GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))
final ImageView buttonShare=(ImageView)view.findViewById(R.id.context_menu_share_button); 
!result.getResult()
parseBlockPos(sender,args,1,false)
dpToPx(32f)
new IllegalStateException()
new PeepholeSubstituteAlternateSyntax(true)
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
text.indexOf('\n') >= 0
myRole2 == ChildRole.LOOP_BODY
selenium.isVisible("link=Control Panel")
@Override public final Object createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
Long.valueOf(attrValue)
op == ASSIGN
new DhcpAckPacket(transactionId,(short)0,broadcast,serverIpAddr,relayIp,INADDR_ANY,yourIp,mac)
selenium.isVisible("link=Control Panel")
paths.get(0)
return true; 
timeout=60000
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
selenium.isVisible("link=Control Panel")
day.equals("pt") || day.equals("piątek")
logger.warn("Callback onResult call produced an error",e)
argNr >= 0
new MockNode(builder.build(),false,Version.CURRENT,Arrays.asList(ShieldPlugin.class,LicensePlugin.class))
mAttributes.getFlags()
checkManageUsersPermission("getting profiles related to user " + userId)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_DEFAULT_TO_FINALIZED,false)
getBorderRadius() >= 0.5f
final String accountExternalKey
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
owner == null
completion.otherwise(ex -> handler.handle(exchange,ex))
vindex >= Short.MAX_VALUE
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
assertEquals("throughput",78.588803087,model.getThroughput(),0.00000001)
popup.requestFocus()
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
WordPress.getCurrentBlog().getRemoteBlogId()
gapBlock.getParentHash()
new SpannedString(new CustomSpannable(first),false)
statistics.addGetTimeNano(System.nanoTime() - start)
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.<Type>asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
jarName.endsWith(".jar")
Integer.valueOf(contentLength)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
executor.scheduleWithFixedDelay(this,period,period,unit)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
Exception cause
insets.left == 0
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Expression.gt(this.propertyName,arguments[0])
contact != null
verifyNull(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
mGpsListener != null
showRecentApps(true)
parameter.getSimpleName()
ModalityKt.isFinal(this)
uri.getPath()
public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Rect r=(Rect)o; 
mHandler.removeCallbacks(pae)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
ts.getJobId() == jobid
InputProcessor[]
private MtpManagerMock mMtpManager; 
new UnsupportedTemporalUnitException("Not a time field: " + field)
final MediaDriverReceiver receiver
new TreePath(rootPath,compilationUnitTree)
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())
parameter.getType()
new CreateIndexResponse(true,true){ } 
Assert.notNull("ExpiringSession cannot be null")
mStackScroller.getChildAtPosition(x,y)
Tuple2.of(timeoutPattern2,13L)
super.getProperty(property)
mActiveStreamType == -1
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex())
Thread.sleep(5000)
_freemarkerEngineConfiguration.getResourceModificationCheck()
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
project.isInitialized()
CommonUtils.randomString(random.nextInt(10))
subscriber.tryEmit(String.valueOf(i))
myKeepSimpleBlocksInOneLine.isSelected()
mHorizontals == null
type.getConstructor()
Simple.of(SkylarkNestedSet.class)
new IndexWriter(this.__test_dir,new org.apache.lucene.analysis.standard.StandardAnalyzer(),false)
new AnalyzedToken(word,taggerTokens[i + 1],taggerTokens[i])
mHotspotBounds.set(left,top,bottom,right)
Map<K,? extends V>
mPulseCallback.onPulseFinished()
localMaster == null
new IllegalAccessError("read-only")
contains="doIntrinsicReceiverCachedTruffleObjectCached"
DBG=true
method.getReturnType().getSimpleName()
String.format("Expression must consist of 6 fields (found %d in %s)",fields.length,fields)
Integer.valueOf(nextArgRequired())
AllCodehausJavaTestsSuite.suite()
listAdapter.notifyDataSetInvalidated()
provider == null
logger.fine("Packed texture. Reading directly from the blend file!")
FileUtils.deleteDirectory(store.directory())
constructorInvokationMarker.drop()
instance2.getLifecycleService().terminate()
!projectGeneratorParameters.isWithoutTests()
BUKKIT_VERSION=1818
new RuntimeException("Unable to find className in " + classCommandName)
getLlvmParamTypes()
splitVert.setDividerLocation(220)
mDataAuthorities == null
checkTables("purgeSnapshots","snapshots","project_measures","measure_data","rule_failures","snapshot_sources","dependencies","events")
DDLDisplayWebUpgrade.class
fileIds == null
ClassNotFoundException ex
superClasses.length == 1
context.createContext(createdBy,reason,comment,request)
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
mBoundServices.isEmpty()
DataStream<OUT>
nativeSetFlags(mNativeObject,sc.mNativeObject,0,OPAQUE)
EntityRegistry.registerEntityID(entityClass,entityName,id,background,foreground)
!isTopLeftVisible
(mConfiguration.openFlags & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0
jsonFile.getParentFile()
Integer.valueOf(time.split(":")[1])
new CircularClipper(mDetail)
executableType.getType().getBoxedType()
public DerivedBuilder setRealmPassword(String password){   realm().setPassword(password);   return this; } 
mAppTokens.get(i)
threadContext.isRestartNextLoop()
Log.d(tag,msg,tr)
a.getInt(attr,0)
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize()
service.getFullName()
selenium.isVisible("link=Control Panel")
popupWindow.setWidth(menuWidth)
new JSONWebServiceServiceAction(servletContext,null)
ConfiguredTargetValue.key(label,hostConfiguration)
selenium.isVisible("link=Control Panel")
Math.min(leftLen,rightLen)
LOGGER.warning(e.toString())
selenium.isVisible("link=Control Panel")
TreeUtil.nextLeaf(last)
selenium.isVisible("link=Control Panel")
startErrPos < endPos
USE_DISPLAY_LIST_PROPERTIES=false
next.stream()
selenium.isVisible("link=Control Panel")
HEAT_PER_MJ=0.01F
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
ex.getClass().equals(ClassNotFoundException.class)
chargeUAh > 0
original.getKeyProperty("path") != null
leftExpression.getName()
serviceTester.systemReady()
KeyValueStoreTest.class
mp.getValue()
dis.read(serializedData,0,length)
bodyParts != null
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
new GeoPoint(bottom,negRight)
mAms.mWaitForNetworkTimeoutMs=100
matcher.groupCount() == 2
pToX - pToY
!mIsRecentsShown || !mIsPipFocusedInRecent
agentInstances.findAgent(uuid)
mState.isAlive()
sn != null
loaded.getLoaded().getConstructor()
String.class
fluentSetters()
this.typeDescriptorCache.put(pd,td)
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
Integer.valueOf(tokens[3])
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)
getRecentsButton()
duration - SystemClock.uptimeMillis() - bedtime
c.deactivate()
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
service.getFullName()
Optional.of(layout)
mService.reconnect()
SaveTask.class
(System.currentTimeMillis() - date.getTime()) < 10 * 24 * 60* 60* 1000L
Packet packet
selenium.isVisible("link=Control Panel")
myTreeBuilder.buildNodeForElement(element)
new ArrayList<>()
Integer.valueOf(this.getOptional("kylin.restclient.connection.max-total","200"))
getLocationEnabled()
Error err
buttonevent != null
usage.getInit()
this.maxKeySize
jmsManager.destroyTopic(name)
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
Exception e
return false; 
GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)
selenium.isVisible("link=Control Panel")
assertDurationLessThan(stopDate - firstStopLogDate,10000)
Util.convertDpToPixel(dataSet.getBarBorderWidth())
name.startsWith("!") && name.endsWith("!")
String tag
canPerformRequestOverConnection(mAccessibilityViewId)
GlobalSearchScope.projectScope(getProject())
line.contains(" throws ")
LOG.error("Failed to find " + baseDirectory.getAbsolutePath())
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
XContentType.YAML.restContentType()
platformData.get(key)
definition.contains(" abstract ")
selenium.isVisible("link=Control Panel")
(Long)123l
entry != null
mBiometricUnlock.stopAndShowBackup()
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.MICRO)
type.getConstructor()
factory.getEmbdeddedServletContainer()
schedule(new CheckQueue(),500)
PdeBase.calcFolderSize(dataFolder) > 768 * 1024
PFLAG3_FITTING_SYSTEM_WINDOWS
!isPassword
NoSuchLayoutSetException.class
native_get_videoeditor_export_profile(vidCodec)
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615c00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
new MyAlertDialogFragment()
_log.error(ioe,ioe)
port=8080
ClassNotFoundException ex
sourceMapping != null
mHandler.removeCallbacks(pae)
ticks / ticksInGap
selenium.isVisible("link=Control Panel")
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
messenger.sendCode(res)
gateway.sendAndRecieve(requestMessage)
prevSearchFiles
assertEquals(0.20462305452536414,mses[i],1e-4)
metadata.getFaceRectangles()
item == null
ColorResources.getColor("splitPaneDeviderFocused")
InetAddress.getLoopbackAddress()
CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime)
message.getToUser()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(implRef).description(message)
"DROP INDEX " + PATTERN_ITEM_INDEX_SHORT
DEBUG_STARTING_WINDOW=true
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_CHECK))
loaded.getLoaded().getConstructor()
(_branch == switchTouchData._branch) && (_switchNumber == switchTouchData._switchNumber)
jarName.endsWith(".jar")
meta.getEnclosure()
mContext.sendStickyBroadcast(mStorageLowIntent)
workishDir.getAbsolutePath()
e.getPresentation().setVisible(false)
JavaSdkImpl.getMockJdk("java 1.5")
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mProviderRequest.reportLocation && !mDisableGps
new HTable(TABLE)
connectionStreams.getInputStream().read(buffer)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
mStackScroller.getChildAtPosition(x,y)
paramEntry.getKey()
mJobs.get(i)
TYPE_DEBUG.equals(json)
rep.isAccountManagement()
@NotNull
result.getSqlType()
selenium.isVisible("link=Control Panel")
ap.getSsid()
_languageImpl.format(nullableLocale,_LANG_KEY_WITH_ARGUMENT,"31")
defaultRequestConfig.getConnectionRequestTimeout()
event.getY()
assertNumUniqueNodeNameBuckets(0)
sep < 0
startMediaTimeUs=START_NOT_SET
instance.startAction(getDefaultTitle(),null,false)
"content".equals(scheme)
Middle middle1=new Middle(); 
MimeTypeUtil.getFolderTypeIcon(file.isSharedWithMe() || file.isSharedWithSharee(),file.isSharedViaLink(),file.isEncrypted())
mBitmapState.mBitmap.hasAlpha()
Q.row(j).add(delta_qj.scale(lRate))
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,true,userId)
requestData.setText("")
new GregorianCalendar(TimeZone.getTimeZone("GMT"))
parent.getChild(jarfile)
MultiValueMap<String,String>
List<String>
numSameBitCells > 5
createHalf(buffer.length(),init)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
mergeButton != null
localLOGV || false
f.cancel(true)
truePositives.incrementCount(classLabel,1.0)
this == OtiOnly
ChannelStateHandler handler=(ChannelStateHandler)handler(); 
child.getParent()
JBUI.scale(12)
case 4: 
ft.commit()
mContext.sendBroadcast(intent)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Slog.e(TAG,"Hardware Activity-Recognition not supported.")
fmd.getTargetClass()
new Request(picasso,CONTENT_1_URL,mock(ImageView.class),null,transformations,null,Type.CONTENT,0,null)
ConditionalOnEnablednHealthIndicator.class
((ContainerLifeCycle)contextHandler).addBean(clientContainer)
Thread.sleep(30000)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE
new StrutsSpringObjectFactory(null,null,null,new MockServletContext(),null,"false")
recordSetVersion1.getVersion()
DEFAULT_ALLOW_CALLS=false
id=15839
mActiveAgents.remove(info)
Error err
mAlpha.end()
dropdownItem.setHref(getPortletURL())
new HumanReadableException("%s: %s",target,e.getMessage())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
mDisplay.getMetrics(mDisplayMetrics)
req.getServletPath()
child.resetResolvedLayoutDirection()
info.getDeviceIdForPhone(slotId)
cache.setRecord(key,record)
user.canAfford(getMoney())
mMessageList.getId()
/**   * @deprecated do not use  */ @Deprecated public final Object getRootImmediately(){   if (!root.isValid()) {     root.set(getValidRoot());   }   return root.get(); } 
getIntent().getAction() == null
m.get(OutputStream.class)
new Ticker.Builder().currencyPair(pair).ask(kcTick.getBuy())
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
integerSwitchNode.keySuccessor(i) == predecessor
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
params.getConsole().getStdErr()
ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())
mStackScroller.getChildAtPosition(x,y)
size=10000
version == 2
UastUtils.isChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
c == separatorChar
selenium.isVisible("link=Control Panel")
a.getFloat(attr,0)
anyAreClear(state,FLAG_SHOULD_RESUME_READS)
new UnsupportedOperationException()
CommitId
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
ArrayIndexOutOfBoundsException e
new SpannedString(first,false)
buffer == null
fileSystem.move(outputFile,archivedOutputFile(1))
mock.expectedMessageCount(2)
selenium.isVisible("link=Control Panel")
fileEntry.getMimeType()
isSavedPostsList()
dlFileEntry.getLatestFileVersion(true)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),blacklistedSubdirectories)
dirtyOutputBuffer()
loaded.getLoaded().getConstructor()
Object getBean() throws Exception ; 
name == null
_isPosInf(text)
Assert.assertEquals(122L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
JournalStructureLocalServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
mapEntry.getValue().isSame(source)
Trans == TRANSPOSE
mMccMncs != null
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
Long.valueOf(subSecs)
serializer.serializeForInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,COMPARATOR_REF_ATTRIBUTE)
toArrayHelper(1)
svcs.deployAsync(name,new DummyService())
target.getShortName()
c.write("[you] " + msg + '\n')
telephony.getCdmaEriIconIndexForSubscriber(subId)
super.onDetachedFromWindowInternal()
Boolean.valueOf(attrValue)
new Paint(Paint.ANTI_ALIAS_FLAG)
new PrestoException(INVALID_CAST_ARGUMENT,e)
position > lastPos
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid")
label.getPackageFragment()
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mWorkSource,mResultStorages,ActivityThread.currentOpPackageName())
i=0
null == user
Futures.successfulAsList(resultList)
UserHandle.getCallingUserId()
mf.getColumnName()
e.getMessage().contains("Error decoding XML-RPC response")
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
className.indexOf(CONTROLLER_SUFFIX)
dockedBounds.bottom + adjustment
c.getLiquid().amount == 0
_typeSettingsProperties.toSortedString()
this.identityProvider.getId()
private final String mHostNameKey; 
userStreamListener.onStatus(new StatusJSONImpl(json))
(short)655
e.nextElement()
this.rejectedAttr=requiredAttr
LOG.isDebugEnabled()
schematicEntity.build(localWorld,FakeWorld.BLUEPRINT_OFFSET)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Thread.sleep(5000)
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
sublistsIndices.keySet().parallelStream()
existing.getProgramParameters()
DefaultAtmosphereRequest request
prefsWriter.commit()
mWPAndroidGlueCode.setContent(null,postContent)
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,1)
assertEquals(512f,i,10f)
myKeepSimpleBlocksInOneLine.isSelected()
Numeric.encodeQuantity(filterId)
stall_till_cloudsize(1)
requestedProvider.get().verify(service)
selenium.isVisible("link=Control Panel")
modulePath.split(File.pathSeparator)[1]
new Duration(2,SECONDS)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
args[1]
log.debug(e1.getMessage(),e1)
@ConditionalOnEnablednHealthIndicator("redis")
log.warn("Can't set transaction isolation level",e)
bundlesMap.get(module)
new StringBundler(9)
mListener.setConnectionId(0)
final SimulatedTrackball mSimulatedTrackball; 
mUserPaddingEnd >= 0
LOG.warn("Could not find missing deps",e)
pojo.valueFields(includeKeys)
thenStore.storeChanged | elseStore.storeChanged
this.patchSize
awsClient.deleteLaunchConfiguration(resource.getId())
-1L
setAll(lowResults,highResults,expectedResults,MUC_TP,5965)
s.toString().toUpperCase()
new String(decryptCipher.doFinal(Base64.decode(ciphertext)))
el instanceof GridSqlQuery
dpToPx(4f)
type.getConstructor()
data.split("\\s*,\\s*")
player.isAuthorized("essentials.world." + user.getWorld().getName())
_buildTemplateWithGradle("template-context-contributor","context-contributor-dependency-management","--dependency-management-enabled","true")
g.cluster().node()
project == null
Log.e(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
Numeric.encodeQuantity(filterId)
assertNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
mAnswer.setBackgroundDrawable(null)
!mIsRecentsShown || !mIsPipFocusedInRecent
vertexIndex % 3 == 0
Resolvable<Object>
log.debug("Error while closing command context",exception)
patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(fragUrl))
new InvoicePaymentModelDao(id,createdDate,type,paymentId,invoiceId,paymentDate,amount,currency,paymentCookieId,linkedInvoicePaymentId)
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,true)
DumbService.getInstance(getProject()).runReadActionInSmartMode(() -> actionManager.tryToExecute(mainMenuAction,fakeMainMenuMouseEvent,null,ActionPlaces.MAIN_MENU,true))
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_FRIST),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_FRIST)),AccountType.Normal,200_000_000L)
new Paint(Paint.ANTI_ALIAS_FLAG)
resources.getDimension(R.dimen.close_handle_height)
DiagnosticType.warning("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
JMenuItem predefined=new JMenuItem("Predefined Style"); 
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
selenium.isVisible("link=Control Panel")
new LruCache<>(15)
createFromResourceStream(res,value,is,srcName)
interpreterSetting.getName()
logger.warn("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR)
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
mService.enableNetwork(netId,attemptConnect)
setNumber(String.valueOf(integerPart))
a.getInt(R.styleable.BootstrapButton_android_layout_width,0)
data != null
return localElement; 
chain.filter(exchange).contextStart((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
VDBG=true
id=33
a.getDimensionPixelOffset(attr,0)
getOldValue()
SCAN_STATUS_PARTIAL=0
LOGGER.debug("Could not perform drage and drop",ioex)
engine.execute(query).toString()
storeSettings(actionRequest,themeDisplay,getServiceName())
new LightweightThread(null,this)
LOGD=true
getAllprojects()
assertEquals(expectedPlan,actualPlan)
ch == '?'
sendMessage(CMD_STOP_AP)
final PsiReferenceExpression expression=(PsiReferenceExpression)descriptor.getPsiElement(); 
loadScriptByName(scriptName)
exportReturnCodes(exporter)
newInstance(classResourcesKey,resDir,displayId,config,scale,token,isThemeable)
e instanceof AuthException
@ConditionalOnEnablednHealthIndicator("db")
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
in.getDepth() < outerDepth
new ContentDescription(ContentType.SERVICE_JOINED,"",0,true)
@Override public Integer call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
mAlpha.end()
loaded.getLoaded().getConstructor()
new LocalCheckpointTracker(indexShard.indexSettings(),maxSeqNo,minSeqNo)
mUserManagerHelper.getAllUsersExcludesSystemUser()
disjPred.isAlwaysFalse()
DictionaryGenerator.buildDictionaryFromValueList(Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ),tblColRef.getType())
vsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
orgReplica.applyDeleteOperationOnReplica(1,1,2,"type","id",VersionType.EXTERNAL,u -> { } )
StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
stack.mStackId != DOCKED_STACK_ID
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
selenium.isVisible("link=Control Panel")
mGpsListener != null
awsClient.deleteLaunchConfiguration(resource.getId())
mActivity.get() != null
Validator.isNull(getKeywords())
new IndexWriter(directory,new SimpleAnalyzer(),true)
requestData.setText(element.getPropertyAsString(TCPSampler.REQUEST))
Resolvable<Object>
StringBuffer sb=new StringBuffer(); 
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
StringUtil.valueOf(key.hashCode())
selenium.isVisible("link=Control Panel")
zController.sendData(doRequestStop())
TOUCHEVENT_POOL.recylePoolItem(pTouchEvent)
LOG.warn("Error applying formatter '{}'. Skipping.",ex)
params.getConsole().getStdErr()
getCustomArgumentResolvers()
if (mCheckUnusedThrows) {   processPackage(aAST); } 
removeCallbacks(null)
selenium.isVisible("link=Control Panel")
new OpenFileDescriptor(project,selectedFiles[i],0)
Context.getVisitService().getAllVisitTypes()
new IndexWriter(directory,autoCommit,ANALYZER,false)
InsertFinalStep<R>
return false; 
_validation_metrics != null
Entry<String,V>
request.getTaskDefinitionKey()
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE)
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
new OverflowPanelViewHelper(mContext)
fluentSetters()
attribute.split("\\.")
c.deactivate()
type.getConstructor()
ParseUtils.parseHumidity(S300TH_DATA_1)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_CHECK))
k < 100
CollectionItemInfo.obtain(column,1,row,1,isHeading,isSelected)
return threadRunning; 
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false)
isCreated()
mHandler.removeCallbacks(pae)
patientState.getState().getId()
coreThreads.asString()
checkArgument(partitionColumns.size() == values.size())
holder == null
Boolean.valueOf(attrValue)
IllegalStateException e
p.speedAlarm()
this.mTitle.compareTo(another.mTitle)
ORIENTATION_SETTLE_TIME_MS=100
System.currentTimeMillis()
mWM.isKeyguardSecure()
Ints.min(completedSplits.get(),splits)
VDBG=true
RemoteOperation synchFolderOp=new SyncFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
PsiTreeUtil.getParentOfType(file.findElementAt(offset),PsiComment.class)
Exception ex
krakenDepth.getAsks()
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
IBackupManagerService svc=mService; 
items[24]
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
BuildData buildData=getBuildData(); 
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE,VAR)
(startTime + 500) / 1000
conn.getResponseCode() == 302
node.getName()
changeAffiliationByOwner(jid,"admin")
mAccessibilityController.isTouchExplorationEnabled()
log.error("Couldn't find style: " + styleId)
new IndexWriter(directory,analyzer,create)
scheduleRemoveStartingWindow(wtoken)
GL20.glUniform3(location,v)
(float)executions / iteration
grantAlias == null
from > to
mvStore != null
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
connection.zrangeByLex(key,max,min)
mTextUtil.nextRandomParagraph(WORD_LENGTH,NO_STYLE_TEXT)
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
bean.getCollectionCount()
@Override public String getSource(){   return modSource; } 
new ConnectionError(sm.getString("http2Parser.processFrameSettings.ackWithNonZeroPayload"),Http2Error.FRAME_SIZE_ERROR)
UIUtil.isCloseClick(e,MouseEvent.MOUSE_RELEASED)
StorageService.instance.getTokenMetadata().invalidateCaches()
new ShardId(index,0)
dest.writeParcelableArray(remoteInputs,flags)
TypeParameterDescriptorImpl.createWithDefaultBound(receiverFunction,Collections.<AnnotationDescriptor>emptyList(),true,Variance.IN_VARIANCE,Name.identifier("T"),0)
ctx.getMapView().refreshMap()
selenium.isVisible("link=Control Panel")
signature.getToSign()
lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
requestsPolicy.isValid(count)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_ONLY_JOB_OUTPUT))
ACRA.log.e(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
SessionClicks.get(request.getSession(),"ignoreUserLocaleOptions")
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,journalArticleId,false,JournalArticleConstants.VERSION_DEFAULT,getMap(articleDefaultLocale,title),descriptionMap,content,"general",ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
1000 * 60 * 3
@NotNull
isDoubleA && isIntA
MAX_PERCENT_DIFFERENCE=0.1
doTest("class Test {\n" + "  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\n" + "}\n"+ "class Comparator<X>{}","sort-T:A-Comparator-","sort-T:A-Comparator<? super T>-")
conf.getInt("mult")
Exception e
public List<CexIOArchivedOrder> archivedOrders(TradeHistoryParams tradeHistoryParams) throws HttpStatusIOException {   String baseCcy=null;   String counterCcy=null;   Integer limit=null;   Long dateTo=null;   Long dateFrom=null;   Long lastTxDateTo=null;   Long lastTxDateFrom=null;   String status;   if (tradeHistoryParams instanceof CexIOTradeHistoryParams) {     CexIOTradeHistoryParams params=(CexIOTradeHistoryParams)tradeHistoryParams;     CurrencyPair currencyPair=params.currencyPair;     baseCcy=currencyPair == null ? null : currencyPair.base.getCurrencyCode();     counterCcy=currencyPair == null ? null : currencyPair.counter.getCurrencyCode();     limit=params.limit;     dateTo=params.dateTo;     dateFrom=params.dateFrom;     lastTxDateTo=params.lastTxDateTo;     lastTxDateFrom=params.lastTxDateFrom;     status=params.status;   }  else {     status="d";     if (tradeHistoryParams instanceof TradeHistoryParamsTimeSpan) {       TradeHistoryParamsTimeSpan tradeHistoryParamsTimeSpan=(TradeHistoryParamsTimeSpan)tradeHistoryParams;       lastTxDateFrom=toUnixTimeNullSafe(tradeHistoryParamsTimeSpan.getStartTime());       lastTxDateTo=toUnixTimeNullSafe(tradeHistoryParamsTimeSpan.getEndTime());     }     if (tradeHistoryParams instanceof TradeHistoryParamCurrencyPair) {       CurrencyPair currencyPair=((TradeHistoryParamCurrencyPair)tradeHistoryParams).getCurrencyPair();       baseCcy=currencyPair == null ? null : currencyPair.base.getCurrencyCode();       counterCcy=currencyPair == null ? null : currencyPair.counter.getCurrencyCode();     }     if (tradeHistoryParams instanceof TradeHistoryParamLimit) {       limit=((TradeHistoryParamLimit)tradeHistoryParams).getLimit();     }     if (tradeHistoryParams instanceof TradeHistoryParamPaging) {       limit=((TradeHistoryParamPaging)tradeHistoryParams).getPageLength();     }   }   ArchivedOrdersRequest request=new ArchivedOrdersRequest(limit,dateFrom,dateTo,lastTxDateFrom,lastTxDateTo,status);   return cexIOAuthenticated.archivedOrders(signatureCreator,baseCcy,counterCcy,request); } 
TrustManagerFactory.getDefaultAlgorithm()
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
ArrayList<String>
assertEquals(2,config.getMapConfigs().size())
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ T serialize(Object input); 
block.blockMaterial.isHarvestable()
mPulseCallback.onPulseFinished()
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
config.setProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(MethodDelegation.to(ToStringInterceptor.class).defineParameterBinder(StringValueBinder.INSTANCE)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
c.getDeclaredMethod(mtdName,paramTypes)
new IllegalArgumentException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
new INodeDirectory(s)
fill
checkPojoMetaClass()
GuiPackage.getInstance().updateCurrentNode()
getInstantiator().newInstance(DefaultDistribution.class,fileResolver)
testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
enabled=true
predicate != null && !predicate.match(match,start,end,context)
new SonarException(String.format("You don't have access rights to project [%s]",projectKey))
mPluginsContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
ORIENTATION_SETTLE_TIME_MS=100
MathUtils.PI * (this.width * this.height) / 2
log.warn("IntrospectionUtils: InvocationTargetException for " + o.getClass() + " "+ name+ ")")
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,0)
delaySoFar > mReEnableDelayMillis
child.getMeasuredHeight()
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar")
new SimpleDateFormat("yyyy/MM/dd")
stateAfter() == null
times(2)
StringUtils.isBlank(content)
lastUpdateIdx < firstUpdateIdx
NB_CACHED_PARAMS=20
info.getImeiForSubscriber(subId[0])
ReferenceCountUtil.safeRelease(holder)
protected abstract ReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,List<ResolvedType> typeParameters); 
Ints.checkedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
EnumSet.of(Scope.JAVA_FILE)
Object audioData
returnType.getSort()
handler.inGroup(base,node)
readPermission.intern()
strokePaint.getTypeface()
mDataSetObserver != null
cacheController.add(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
two.setCoordinateIndex(0)
tx == null
mResourceData[i] != null
intent.resolveTypeIfNeeded(getContentResolver())
element.getText()
relationshipCursor.label()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_RECORD_FUNCTION)
myLoader.loadSkeleton(myTicket.copy(),rootsHolder,Collections.<String>emptyList(),filters,myController,false)
typeSettingsProperties.toString()
HashMap<String,FilterBuilder>
openSession.close()
ReferencesSearch.search(element,element.getUseScope(),true)
fulfillmentGroupItemWrapper.wrapDetails(fgi,request)
mFirstNotificationMillis=-rateLimitMillis
myModuleBuilder.modifySettingsStep(settingsStep)
HashSet<>
U.delete(install)
graph.add(new FloatingReadNode(klassNode,location,null,stamp))
tree.getVisibleRowCount()
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
Response.ok()
selenium.isVisible("link=Control Panel")
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
selenium.isVisible("link=Control Panel")
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment)
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
log.error(e.getMessage())
item.isOnlyShared() && item.getSubStatus() == RosterItem.SUB_FROM
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
new WorldPoint(2552,3557,0)
file.getLocalFile()
V
fileObject.hasExt("zip")
typeDeclaration.isNovel()
mInitialMotionX == null
keySyncOperation.contains(targetKey)
new Button("submit",new StringResourceModel("submit",this,null)){   private static final long serialVersionUID=-2842881187264147131L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setJAI((JAIInfo)jaiModel.getObject());     gs.save(global);     doReturn();   } } 
doubleValue == 0
AttributeCache.instance().get(packageName,realTheme,styleable.Window)
SCAN_STATUS_COMPLETE=1
metadata.getFaces()
bbbGW.userConnectedToGlobalAudio(emm.voiceConf,emm.userid,emm.name)
Delete_dialogLayout.findViewById(R.id.ll_location)
vsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
wifiConfig.isValid()
is(3)
CommonBundle.getErrorTitle()
getTypeName(decl.getMethodBinding().getReturnType())
p.getFileSystem(conf).delete(p)
cc.isLazy()
Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
@Override public Object createNullToken(String token,int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
selenium.isVisible("link=Control Panel")
DatabaseDescriptor.getListenAddress().getHostName()
encounter.getObsAtTopLevel(false)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
typedAction.getHandler()
bottomost.getLanguage().getFormattingModelBuilder() != null
ArrayList<TaggedWord>
checkPojoMetaClass()
mHotspotBounds.set(left,top,bottom,right)
new Paint(Paint.ANTI_ALIAS_FLAG)
pos.getInputType(usage) == type
tableHasData(newTableName)
new RuntimeException(e)
securityDomain != null
allocator.getFlowController().prepareAction(input,epsilon,nextEpsilon,gamma,dGammaView,dBetaView)
new LeftTuple(new DefaultFactHandle(2,"cheese"))
methodNode != null
insertImport(node,target,asName)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
new HashMap<>(layouts.size())
Slog.e(TAG,"Unable to bind FLP Geofence proxy.")
10 * 1000
mBondState.setBondState(address.toUpperCase(),state)
getStubOrPsiParent()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
AudioFormat.isEncodingLinearPcm(mAudioFormat)
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
UADEntityAggregator::getUADEntitySetName
(device=1 << i) <= AudioSystem.DEVICE_OUT_DEFAULT
terminal.receivedInput(postCreateText)
new StoreFileMetaData(file.getName(),file.length(),file.lastModified(),checksums.get(file.getName()))
Beans.newDuration(jpaProperties.getPool().getMaxWait()).toMillis()
selenium.isVisible("link=Control Panel")
GL20.glUniform4(location,v)
new InternalSearchResponse(hits,null,null,null,false,null)
databaseFile.getPath()
manager.beginTransaction().remove(fragment).commit()
RANGES.contains(builder.getTokenType())
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
return true; 
return CTR; 
logger.error("InterruptedException during playing a notification sound")
new GroupDialog(frame,panel,null)
tracesFile.mkdirs()
"Error resetting interface " + mInterfaceName + ", :"+ e
"A task is in the ABORTED state but stage is " + stageState
Integer.valueOf(topStr)
resetTimeInSeconds * 1000
ai.uid <= Process.FIRST_APPLICATION_UID
(line=reader.readLine()) != null
fragmentCollectionPersistence.filterCountByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
client != null & client.autofillClientIsFillUiShowing()
new SpannedString(first,false)
origin > other
equalAny(DefaultKeyword.LIKE)
selenium.isVisible("link=Control Panel")
KotlinCompilerClient.Companion.connectToCompileService(compilerId,daemonOptions,System.out)
i < 5
newDto(RecipeDto.class).withLocation(DEFAULT_DOCKER_IMAGE)
key.startsWith("jar:")
new RagManager(tm)
FileNotFoundException ex
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
lexerEngine.equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
TEMP_DIR_ATTEMPTS=10000
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
new TextPaint()
shardDao.insertShard(shard,tableId,null,0,0,0)
SystraceMessage.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE)
deltaY < 0
new FtrlDelta(true,alpha)
mapReader.isBasemap()
app.setOrgName(ownerName)
check(given("HEAD","master","origin/master"),ContainerUtil.list("HEAD"),Pair.create("Local",ContainerUtil.list("master")),Pair.create("Tracked",ContainerUtil.list("origin/master")))
assertEquals(11,definitions.size())
refresh(false)
target.setField(1,edge)
loaded.getLoaded().getConstructor()
selenium.isVisible("link=Control Panel")
factCount=50000
ab.get1()
dispatched.remove(node)
Exception e
factory.getEmbdeddedServletContainer()
new BuckUncheckedExecutionException("When starting activity.")
copy1DRangeFrom(0,mType.getCount(),i)
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
super.getLikeProvider(path)
myNameField.getComponent()
id >= allocatedIds.length
sqlRouteResult.getSqlParsedResult().getSqlType()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
model.getEnum().size() == 2
telephony.isRinging()
EXCEPTION_CAUSE_PATTERN.matcher(error)
info.getLine1AlphaTagForSubscriber(subId)
activityNdx < topActivityNdx
synchronized (mAccounts) {   writeStatusLocked(); } 
users.get(i)
value | 0xff
JCVideoPlayerManager.listener()
assertEquals(0.0,biaOp.currentResult().doubleValue())
selenium.isVisible("link=Control Panel")
stripFilter.skipWhiteSpace(charBuffer,stringWriter)
myApplicabilityError.set(null)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
mPostKeyguardExitAnimation.hasEnded()
loaded.getLoaded().getConstructor()
person.getVoidReason()
logger.warn("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
mUserStates.get(i)
logger.error("Table spec retrieval failed!")
StringBuffer buffer=new StringBuffer("("); 
event.getTime() > currentPlayTime
parseContext.fieldMapper(DATE_FIELD_NAME) != null
Double.isNaN(longitude)
createHalf(buffer.length(),init)
new LinkedHashSet<>()
new BufferedOutputStream(new FileOutputStream(file))
CalciteTests.createMockSystemSchema(druidSchema,walker)
new IndexWriter(dir2,new StandardAnalyzer())
cacheController.add(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
new MaxCandidatesCondition(10)
LOGGER.lifecycle(msg.apply())
new LayerView(this,0xff00ff00)
ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)
mHotspotBounds.set(left,top,bottom,right)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
Character.isLetterOrDigit(buffer.charAt(i))
striped.get(key).readLock()
binary.getName()
partStore.finishLoad()
_connector.getResponses("GET /foo?status=206&data=42 HTTP/1.0\n\n")
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
FSIndexInput clone=(FSIndexInput)super.clone(); 
items[29]
new Intent()
tok.getID()
IndexReader.open(store,true)
exchange.addRequestHeader("Authorization",_basicAuth)
status == 400
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
TimeUnit.SECONDS.toMillis(25)
this.messageService.monoPostAuthorizeBeanFindById(1L).contextStart(withUser)
new ArrayList<>()
n.isArrayPattern()
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameMethod.run();   } } 
new Paint()
newChain.toString()
OAuthConstants.BEARER_TOKEN_TYPE.equals(tokenType)
mTouchProgressOffset=1.1f
GoExecutor.in(module).withExePath(executable.getAbsolutePath()).withParameters(filePath)
RelativePoint.getSouthEastOf(link)
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) == 1
account.getExternalKey()
message.isEphemeral()
getCompactionStrategyFor(deleted)
selenium.isVisible("link=Control Panel")
Assert.assertFalse(permissionChecker.isOmniadmin())
new StringBuilder(input.length())
tilesRect.getRotate()
composite.isDisposed()
ALIAS.addOperationParameterDescription(resources,"infinispan.container",op)
new int[296]
mFlexItem.setAlignSelf(AlignItems.FLEX_END)
public void setHeaderTableSize(long headerTableSize) throws ConnectionError {   if (headerTableSize > (16 * 1024)) {     throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR);   }   this.headerTableSize=(int)headerTableSize; } 
container.getDataSource()
iterations * BLOCK_SIZE
structuralLock.isLocked()
needsUpdate
StringBuffer ret=new StringBuffer(100); 
Integer.valueOf(attrValue)
oldPresence.getPriority() != this.presence.getPriority()
rowLabels.size()
Ticket.class
Thread.sleep(5000)
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false")
entry.rxBytes == 0 || entry.txBytes == 0
BaslineCompiler baselineCompiler=new BaslineCompiler(GraphBuilderConfiguration.getDefault(),providers.getMetaAccess()); 
editor.repaintHeader()
sourceSet.getClasses()
Foundation.NSLog("[error] " + tag + ": "+ message)
ControllerStatusReportingTask.class.getField(fieldName)
ContainerUtil.newHashSet(PLATFORM_IOS,PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS)
"RebaseInstrumentationTarget{" + "typeDescription=" + typeDescription + ", defaultMethods="+ defaultMethods+ ", bridgeMethodResolver="+ bridgeMethodResolver+ ", methodRedefinitionResolver="+ methodRedefinitionResolver+ '}'
Log_OC.wtf(TAG,"Trying to open a NULL OCFile")
mWebViewClassic.addJavascriptInterface(mTextToSpeech,ALIAS_TTS_JS_INTERFACE,false)
LOG.error("Root project path of the Gradle project not found for " + rootModel.getModule())
mRepeat > 1
valueElement != null
FluxPeekHelper<T>
ModelReference.of(ModelPath.path("componentTypeRegistry"),new ModelType<RuleAwarePolymorphicNamedEntityInstantiator<ComponentSpec>>(){ } )
error("Failed to resolve default logging config file: " + DFLT_CONFIG_PATH)
factory.createCatchSection(exceptionType,name,file)
metadata.getFaceRectangles()
U.warn(log,"Message is ignored due to an error [msg=" + msg + ']',e)
Exception e
mAuthorities.get(i)
NonNullList.func_191196_a()
mAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"createUser:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign Up Failed",Toast.LENGTH_SHORT).show();     }   } } )
layoutPageTemplateCollectionService.getBasicLayoutPageTemplateCollections(getGroupId(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,layoutPageTemplateCollectionNameComparator)
loadAnimator(fragment,transition,true,transitionStyle)
clear(request,plid)
i--
peopleListFromJSON(jsonArray,blogId,localTableBlogId,false,false,true)
myRole1 == ChildRole.LOOP_BODY
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
namespace.equals("")
Mono<CsrfToken>
logger.getLogger().warn("Shut down master")
Assert.assertEquals(2,propertyCategories.size())
PushArbitraryData.class
new int[37518]
serialVersionUID=3256439218229424434L
UserHandle.getCallingUserId()
assertEquals(3,publisher.events.size())
Long.valueOf(timeString)
dest.writeLong(mSubId)
given().content(bytes).when().post("/file")
logger.error("{}",general)
id=15862
mAuthorities.get(i)
Long.valueOf(attrValue)
fileName.indexOf('.')
group == null
result == Integer.MAX_VALUE
TX_TIMEOUT=100
element.getStringValue()
RecentsHorizontalScrollView.super.removeViewInLayout(view)
LOGGER.debug("Could not parse URL",nfe)
post.hasChangedFromLocalDraftToPublished()
nodeEngine.getService(LockService.SERVICE_NAME)
Collectors.joining()
eventJournalConfig.getMapName()
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
Exception e
GameData.injectSnapshot(snapshot,true,true)
/**   * An SQL Dialect for PostgreSQL 9.3 and later. Adds support for Materialized view.  * @author Dionis Argiri  */ public class PostgreSQL93Dialect extends PostgreSQL9Dialect {   @Override public void augmentRecognizedTableTypes(  List<String> tableTypesList){     super.augmentRecognizedTableTypes(tableTypesList);     tableTypesList.add("MATERIALIZED VIEW");   } } 
scale(1f)
ttl > 0
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47))
14
NoClassDefFoundError ex
objective != null
elementAtOffset == null
hasCdmaDataConnectionChanged
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
StepVerifier.create(Mono.just(1).then()).expectComplete()
appBundle.exists() == false
this.setOrder(50)
ActionUtil.getProductEntry(renderRequest)
addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)
dexBuf.readSmallUint(interfacesOffset + 4 + (2 * index))
mLastBatteryLevel != mHealthInfo.batteryLevel
prepareCreate("test").addMapping("article")
items[26]
lp.width != panelWidth
checkPojoMetaClass()
anchorView.getWindowToken()
new RuntimeIOException(e)
this.registrations.values().stream().filter(registration -> registration.getClientAlias().equals(clientAlias)).findFirst().orElseGet(null)
mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000
new JRHtmlExporter()
analysis.getType(windowFunction)
stack.mStackId != DOCKED_STACK_ID
TestPropsValues.getUserId()
loaded.getLoaded().getConstructor()
MacMessages.showYesNoDialog(message,title,yesText,noText,WindowManager.getInstance().suggestParentWindow(project))
layoutChildLayouts.sort(Comparator.comparing(Layout::getPriority))
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","DbHits","No data returned")
private final String mBindHostKey; 
values.get("error").getAsString()
selenium.isVisible("link=Control Panel")
new Intent(ACTION_FAST_TRACK)
sendObjectInfoResult.getCompressedSize()
new StringPreference("map_tile_sources",TileSourceManager.getMapnikSource().getName(),true)
klass.getDeclaredFields(false,declaredFields)
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
service.asBinder().isBinderAlive()
private void _runClassCommandName(String classCommandName) throws PoshiRunnerException {   Element rootElement=PoshiRunnerContext.getTestcaseRootElement(_testClassName);   List<Element> varElements=rootElement.elements("var");   for (  Element varElement : varElements) {     String name=varElement.attributeValue("name");     String value=varElement.attributeValue("value");     PoshiRunnerVariablesUtil.putIntoExecuteMap(name,value);   }   PoshiRunnerVariablesUtil.pushCommandMap();   Element commandElement=PoshiRunnerContext.getTestcaseCommandElement(classCommandName);   if (commandElement != null) {     PoshiRunnerStackTraceUtil.pushFilePath(classCommandName,"testcase");     PoshiRunnerExecutor.parseElement(commandElement);     PoshiRunnerStackTraceUtil.popFilePath();   } } 
fileName.contains("-ext") || !isJarFile(file)
sanitizedName(name)
((TcpDiscoverySpi)cfg.getDiscoverySpi()).setJoinTimeout(8000)
assertPhoneNumberEqual("123123","0123123",false)
RandomDocumentPicks.randomIngestDocument(random())
new IllegalStateException("No SHA implementation available!",e)
Outcome.match("missing database driver " + driverClassName)
validatorHelper.enclosingElementHasEnhancedViewSupportAnnotation(element,validatedElements,valid)
mPowerManager.isScreenOn()
FilterResult::isFiltered
queuedChunk.provider.loadChunk(queuedChunk.x,queuedChunk.z)
JDBCUtils.safeGetString(dbResult,"SOURCESCHEMA")
8 * 1024
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg)
selenium.isVisible("link=Control Panel")
f.toURL()
assertEquals("Size of " + r,10,r.size())
String.format("%n%s after %d ms\n" + "[%10d tests found     ]\n" + "[%10d tests started   ]\n"+ "[%10d tests skipped   ]\n"+ "[%10d tests aborted   ]\n"+ "[%10d tests successful]\n"+ "[%10d tests failed    ]\n",msg,(this.timeFinished - this.timeStarted),this.testsFound.get(),this.testsStarted.get(),this.testsSkipped.get(),this.testsAborted.get(),this.testsFailed.get(),this.testsSucceeded.get())
this.messageService.fluxPreAuthorizeBeanFindById(1L).contextStart(withUser)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
scannerSupplier.filter(bci -> namedCheckers.contains(bci.canonicalName()))
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true,null)
m.getSize()
layoutTreeNodes.size()
IS_USER_BUILD
Integer.valueOf(displayIdStr)
getSrcPath("checks/javadoc/Input_02.java")
MAX_DIMEN_FOR_ROUNDING=1080
type.getConstructor()
AnnotatedElementUtils.getAnnotationAttributes(method,annotationType)
credentials.getUsername()
value.toLowerCase().contains(constraintLowerCase)
selenium.isVisible("link=Control Panel")
LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,false,progress)
paramValue.isEmpty()
ColorResources.getColor("buttonGradientDark")
mService.removeNetwork(netId,mContext.getOpPackageName())
new ImmutableShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
to.toPhoneString()
mInternalOnScrollListener=listener
VertexProgram.createVertexProgram(ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
operation.equals("in")
new TextPaint(Paint.ANTI_ALIAS_FLAG)
new NullPointerException("profession and name can not be null")
mapper.getTypeFactory().uncheckedSimpleType(InspectExecResponse.class)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
logName()
((PyFunction)def).getParameterList().accept(new PyElementVisitor(){   @Override public void visitPyParameter(  PyParameter par){     PyNamedParameter n_param=par.getAsNamed();     assert n_param != null;     if (!n_param.isKeywordContainer() && !n_param.isPositionalContainer()) {       LookupItem item=(LookupItem)factory.createLookupElement(n_param.getName() + "=");       item.setIcon(n_param.getIcon(0));       ret.add(item);     }   } } )
Math.max(titleRight,subtitleRight)
lastPos != mBoundPos
selenium.isVisible("link=Control Panel")
table.hasIndex(table.getColumnIndex("columnString"))
Pattern.compile(".*[ \t\n\r]+(.+?)[ \t\n\r]*\\(.*")
mPersistedFiles.removeAll(mPersistedFiles)
synchronized (classCache) {   classCache.put(cls.getName(),cls); } 
mapCopy.getAbsolutePath()
cfstore.getSSTables()
newParameters.add(o)
IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0025F)
LocalDateTimeUtils.getLocalDateClass()
getTestVector().getNumNondefaultElements()
TelephonyManager.getDefault().getPhoneType()
raw.getParameters()
Dependency.embeddedPackage("rsconnect")
SimpleScheduleBuilder.simpleSchedule().withIntervalInMinutes(this.refreshInterval)
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
braceStyle == CodeStyleSettings.END_OF_LINE
p2.getStatus()
i < 10
mValues[7]
CoreMatchers.anyOf(is(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>$Placeholder"))
a.getFloat(attr,0)
selenium.isVisible("link=Control Panel")
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
loaded.getConstructor()
commandContext.isDirty()
Math.max(1,Integer.parseInt(split[1]) - 1)
isCreated()
event.init(viewTag)
readOwners.clear()
evaluate("value = read_config('foo', 'bar')").lookup("value")
apnContext.getWaitngApns()
Integer.valueOf(taskIdStr)
StringUtil.in(name,"base","basefont","bgsound","command","link","meta","noframes","style","title")
Nd4j.randn(order,shape).divi(FastMath.sqrt(2.0 / (fanIn + fanOut)))
longSize >= 800
bound == Bound.END
GridHadoopTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
/**   * Obtain the property descriptor for a specific property of the wrapped object.  * @param propertyName the property to obtain the descriptor for(may be a nested path, but no indexed/mapped property)  * @return the property descriptor for the specified property  * @throws InvalidPropertyException if there is no such property  */ PropertyDescriptor getPropertyDescriptor(String propertyName) throws BeansException ; 
SamplingProfiler.newThreadGroupTheadSet(group)
flux.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
getGpx().getColor(0)
not(isStatic())
m.shapeInfoDataBuffer()
sstable.getMinTimestamp() >= maxDeletionTimestamp
System.arraycopy(otherReferences,0,references,0,otherReferences.length)
new PseudoDescription().load(getClass().getClassLoader())
service.asBinder().isBinderAlive()
setAttributeInternal(tempInodePath,true,opTimeMs,options)
mock.expectedMessageCount(2)
c.getLiquid().amount != 0
recommendArrayListByUser.size() > 0
LocalFileSystem.getInstance().findFileByPath(filePath)
myTaskManager.suggestBranchName(localTask)
DEBUG=true
src.isDirectory()
new JarResourceRoot(root,new File(getBase()),pathInJar,path)
userImpFactor.add(userFactors.row(userIdx,false))
mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately))
Picasso.get()
private final CircularClipper mClipper; 
MessagingService.instance().sendRR(message,target,handler)
Log.d(TAG,"We have a callback to send this result to")
bitmap.getWidth()
shardSearchStats.onFailedQueryPhase(context)
capacity > 1 << 30
LOGGER.error("[{}] Caused by: [{}]",e.getMessage(),authnExceptions,e)
Set<String>
typeDeclaration.isNovel()
groupVM.getIsCanEditAdministration().get()
createFile("Test.java","class Test extends Type {\n}")
loaded.getLoaded().getConstructor()
lp.width != panelWidth
typeSettingsProperties.toSortedString()
PokemonMetaRegistry.getHightestForFamily(getPokemonFamily())
selenium.isVisible("link=Control Panel")
out.writeInt(data[0])
connection.getInputStream()
this.callStatusLabel.setText(state)
new MutableDateTime(getMillis())
from >= to
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).contains(offset)
LookupElementBuilder.create(referencedName)
!executableFlag
++cursor == 0
invalidate()
mState.mPivotXRel == relative
labels != null
sendMessage(CMD_STOP_AP)
HazelcastClient.newHazelcastClient()
canvas.clipPath(mRenderPath,Region.Op.REPLACE)
Long.valueOf(args[1])
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValue()
HashMap<String,AstyanaxOrderedKeyColumnValueStore>
StringBuffer sb=new StringBuffer("["); 
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
ArrayList<String>
new ItemStack(blockAlt,1,meta)
addProperty(firstNode,"band","The Clash")
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage",ioe)
sourceIterator.numExamples()
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).beforeValidityChanged(arr)
setSDesEncryptionToDescription(mediaType,description,null)
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER
_lapseConf(card)
mDateView.setTypeface(Typeface.SANS_SERIF)
headerHandled=false
env.lookup(PARSE_CONTEXT)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
System.getProperty("karaf.data")
storeField(field,isAttributeExpression,pexp,objectExpressionType,visitor,receiver.getData())
this.propertyDescriptorCache.put(pd.getName(),pd)
@Override public Value emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new AMD64ByteSwapOp(result,input));   return result; } 
ValueNode[]
startMediaTimeUs != START_NOT_SET
avb.getData().clear()
clazz.getClassName()
id=13
cache.localPeek(1,CachePeekMode.ONHEAP)
new IllegalAccessError("read-only")
Http401Auth.class
issueUpdater.setSeverity((DefaultIssue)context.issue(),severity(properties),context.issueChangeContext())
mPlayer.getCurrentPosition() * 1000
(res == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
unfinishedVerificationHere()
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",500,"application/xml","resources/add_book.txt",null)
ARM_LINUX_ADNROIDEABI("arm-linux-androideabi")
setImageDrawable(icon)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
styles.styles()
createTextAttributesKey("KOTLIN_ANNOTATION")
selenium.clickAt("//td[2]/div/div/span[1]",RuntimeVariables.replace("Reply"))
mHorizontals == null
command.getNewName()
V_5_6_10_ID=50601099
super.onPause()
!isAutopopupCompletion()
assertEquals(expectedResponse,orig.getResponse())
this.thrown.equals("File must not be null")
handshake.getProcolVersion()
new Paint(Paint.ANTI_ALIAS_FLAG)
mLastAnnouncementWasQuickSettings && !mTracking
new SlopStorageEngine(new InMemoryStorageEngine<ByteArray,byte[],byte[]>("slop"),2)
mAlpha.end()
mDrawable != null
pk.getColumnName()
createCurrency("LTC","Litecoin","XLT")
mapper.getTypeFactory().uncheckedSimpleType(Event.class)
Integer maxIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
new int[296]
portletRequestDispatcher != null
DEFAULT_PERIOD_MS=60000L
parent.decrementPrioritizableForTree(amt)
LOG.info("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
variables.putAll(variables)
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
mHeight <= 0
addInactiveSubscription(subscriptionKey,info)
mKey.equals(other.mKey)
stmt.executeQuery(sqlCommand)
new int[100]
expectedCountsForADoc(weights,ind)
new TimeoutException()
fill
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
Assert.assertEquals(3,clusterEventListeners.size())
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,connectionTracker,transactionSPI)
ACTIVE_NOTIFICATIONS_MAP.values()
Thread.sleep(5000)
REAL_DRIVER.close()
new StringBuilder(741)
bc.getExecutorService()
LOG.isDebugEnabled()
new BooleanPreference("use_step_by_step_rendering",true,false)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
_persistedScheduler.getJobNames(groupName)
ASYNC_CONSUMER_THREAD.getStackTrace()
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
isScannerInSameProcess()
new Paint(Paint.ANTI_ALIAS_FLAG)
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName())
parameter.getTypeElement()
Float.valueOf(strings[i])
mService.reassociate()
event.getResult() != Result.ALLOWED
GL15.glGetBufferParameter(target,pname,params)
hasExtension("GL_EXT_framebuffer_blit")
XmppStringUtils.parseBareAddress(user)
startSynchronization()
String.format("%-15s: %s",entry.getKey(),String.join(",",markedRoles))
DBG=true
IOException expected
((ChannelProgressivePromise)promise).setProgress(progress,-1)
_log.error(StringBundler.concat("Column ",columnName," in Table ",tableName," already is ",newTypeDefinition))
exitCode != 0
tnCount=100
index >= widgets.length
telephony.isRinging()
ignite.services()
project.getId()
@Controller
profileCluster.clear()
List<T>
targetInfo != null
terminal.receivedInput(event.getInputText())
metadata.getFaces()
operation == RESTORE_OPERATION
new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR)
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
mMncStr == null
from > to
filterJson != null || !filterJson.isEmpty()
DiagnosticFactory0.create(ERROR)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
getPreferences().store(fos,"")
PreferenceManager.instantPictureUploadEnabled(context)
AnimationAdapter<T>
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
versionDeterminer.getGccMetaData(candidate)
POLLNIVEACH(890.0,540,13358)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
clientConfig.getRegistryFetchIntervalSeconds() * 2
inserter.release()
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
conf.getSearchBaseURL()
request.getUserPrincipal()
getFinalArg(args,2)
word.length() > line_max_size
context.getBeanNamesForType(type,false,true)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
generatePack
matchAxisFilter != 0
format(arguments[i],true)
this.typeDescriptorCache.put(pd,td)
Files.exists(subAssetFile)
mContext.sendBroadcast(intent)
primary.getDefaultCollection()
telephony.getCdmaEriIconModeForSubscriber(subId)
mContext.getPackageManager().getUserBadgedDrawableForDensity(icon,new UserHandle(td.userId),null,0)
intermediateArtifacts.strippedSingleArchitectureBinary()
!mIsRecentsShown || mIsPipFocusedInRecent
mBondState.setBondState(address.toUpperCase(),state)
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
LogManager.getContext()
return 6; 
connectors.put(connectorName,connector)
Log_OC.wtf(TAG,"Trying to open a NULL OCFile")
node.order()
application.getApplicationContext()
new WitnessCapsule(ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),10L,URL)
from > to
sm.getString("introspection.classLoadFailed")
DumpUtils.checkDumpPermission(mContext,TAG,pw)
scheduleRemoveStartingWindow(wtoken)
Object node
new Font(edgeFontName,edgeFontSize,edgeFontStyle)
SamplingProfiler.newThreadGroupTheadSet(group)
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",false,new ServiceContext())
report(n,MISPLACED_ANNOTATION)
PsiSwitchLabelStatement.class
syncOperation.delay == 0
assertEquals(response.getStatusCode(),301)
getIEuiccController().getEid(mCardId)
telephony.isRadioOn()
awaitMessages(4,7,20000)
mPaused
assertEquals(40,carEncoder.getSpeed(iter.getFlags()))
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false)
buildJSLoaderModulesServlet()
id=42
r != null
StringBuffer sb=new StringBuffer(32); 
patientState.getState().getId()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
sendKeyUp()
log.error("Metric=[%s] has no StatsD type mapping",statsDMetric)
DEBUG=true
mgr.checkSystemClipboardAccess()
runLayoutListener()
connectedHeaders.setAcceptVersion("1.2")
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR,VARCHAR.getTypeSignature().toString(),VARCHAR)
buildPages.getTypes()
index >= widgets.length
telephony.getNetworkTypeForSubscriber(subId)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.8f,FOLDER_NAVIGATION)
statistics.addPutTimeNano(System.nanoTime() - start)
field.createField(fieldType.indexedToReadable(indexedValue),0.0f)
mHandler.removeCallbacks(pae)
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,null,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
Integer.valueOf(nextArgRequired())
Exception e
length < 0
IOException e
mService.mAppTransition.isReady()
assertEvaluate(buildFile).lookup("txts")
icon.setVisibility(visible ? VISIBLE : GONE)
hours >= 2
evaluate(123.5,DataTypes.FLOAT)
type.getConstructor()
viewStateIndex|=VIEW_STATE_PRESSED
scheme.equals("tel")
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
mSyncStatus.get(i)
EstimatedHistogram.serializer.serialize(rowSizes,out)
((-3 * t + 4) * t + 1) * t / 2f
-1
speed=5.5f
e.getMessage()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
LOG.debug("recovered from " + StringUtils.stringifyException(e))
i < 1
Simple.of(Integer.class)
new ResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
typeLength == 0
r.getUri().toString()
popupWindow.setWidth(menuWidth)
FUNC_CODE_OPERAND_BUNDLE
compressed.capacity()
tw.release()
LogDelegate.createLog(name)
selenium.isVisible("link=Control Panel")
inserter.release()
onEvaluateInputViewShown()
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
LOG.debug("data:" + StringUtils.byteToHexString(data))
conf.getSearchBaseURL()
editor.getColorsScheme().getAttributes(diffAttributeKey).getBackgroundColor()
schemeSpecificParts != null
sourceSet.getClasses()
copy.getGenericsTypes()
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,mWifiActivityIconId)
LOG.fatal(msg,e)
disableBluetoothContactSharing
maxSize > (used / 1024 / 1024)
searcher.get().getIndexReader()
new ObjectMapper().reader(DiskBalancerCluster.class)
four.setCoordinateIndex(LEAF)
getAllAncestors()
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin application project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).plugin("Apply the application to add support for building a CLI application","application").compileDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
e.getMessage()
checkPojoMetaClass()
assertEquals(serdeC.getCodec().toString(),CodecFactory.deflateCodec(i).toString())
callerApp == null
Thread.sleep(5000)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
mBackdrop.animate().alpha(0f)
destinations[i].getQualifiedName()
restRequestData.params.getPostBodyOrNull()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
Math.min(maxSize,layoutParams.height)
masm.cas(size,expected,newVal,address,true,true)
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
System.out.println("")
clipItem.getText()
domain == null ? 1 : domain.length
mHandler.removeCallbacks(pae)
XContentParserUtils.ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_OBJECT,parser::getTokenLocation)
filename.startsWith(ext)
Utils.writeFile(outputDirectory,getFileName(cls),xsb.toXML())
ret.setComplete(e,response)
profile.getActiveRules()
qname.startsWith(CommonClassNames.JAVA_LANG_STRING)
state.getTypes().isCastable(argType,jUnit4ClassRunnerType)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
@SuppressWarnings("unused") private final Object strongReference; 
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
Trans == TRANSPOSE
from > to
lp.onResolveLayoutDirection(layoutDirection)
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
handleDnsConfigurationChange(networkType)
selenium.isVisible("link=Control Panel")
dest.writeLong(mSubId)
dir.isDirectory() && !"target".equals(dir.getName())
return Long_TYPE; 
String key
public Value emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   AMD64AddressValue addressValue=asAddressValue(address);   RegisterValue raxRes=AMD64.rax.asValue(kind);   emitMove(raxRes,expectedValue);   append(new CompareAndSwapOp(memKind,raxRes,addressValue,raxRes,asAllocatable(newValue)));   assert trueValue.getLIRKind().equals(falseValue.getLIRKind());   Variable result=newVariable(trueValue.getLIRKind());   append(new CondMoveOp(result,Condition.EQ,asAllocatable(trueValue),falseValue));   return result; } 
StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))
index.getName()
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
new GroupPartitionId(cacheId,partId)
fraction * (nextValue - prevValue)
new IllegalArgumentException()
value.toString().getBytes()
GBActivitySample[]
mAttachInfo == null
selenium.isVisible("link=Control Panel")
entry.notification.clone()
assertEquals(0.208323733363106,mses[i],1e-4)
downloadInfo.getUrl()
onCreateView(mContext,appWidgetId,appWidget)
dest.writeLong(txPower)
new CountryListLoadTask(mListener,null,null)
final IOException e
resp.addHeader("Access-Control-Allow-Credentials",credentials)
service.handlePinMmiForPhoneAccount(accountHandle,dialString)
i < totalTo
users.get(i)
resources.getDimension(R.dimen.close_handle_height)
locationNode.text()
myExpr != null
appearance.getString(attr)
Integer.valueOf(listenPort)
value + value + MINIMUM_BACKLIGHT
javaWriter.emitSingleLineCOmment("foo")
addIndex(indices)
sampleFactory.getConstructor()
new RuntimeException()
logger.error("Failed to enumerate network interfaces",e)
DnDSupport.createBuilder(myTree)
selenium.isVisible("link=Control Panel")
headers.keySet().itrator()
UserLocalServiceUtil.fetchUserById(userId)
Timber.e(e,"Argument %s is incorrect",playBackgroundColorString,e.getMessage())
logger.warn("Using folder " + checkPointFolderFile + " for storing checkpoints")
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
store.setZkSessionTmeout("15s")
mGridView.getNumColumns() > maxColumnSize
IconGenerator.generateCharacterIcon(context,engineName.charAt(0))
getName()
res.getRoutingTime() != 0f
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
scrollbarsOnTop && scrollX
trade.getType().equals("buy")
new CompilerTask(project,"Android auto-generation",true,false)
pathText.getText()
st.setCharacterStream(name,characterStream.asReader(),characterStream.getLength())
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
vertx.createHttpServer().requestHandler(req -> {   req.response().putHeader("content-type","text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>"); } ).listen(8081)
possibleCenters.get(i)
stopwatch.elapsedMillis()
i=1
s String; 
lastPos != mBoundPos
type.getConstructor()
ssl.has(CommonAttributes.PROTOCOL)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
expected == int.class
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
ENABLE_APK_ASSETS_CACHE=true
30 * 60 * 1000
VoiceInteractionManagerService.this
availablePlugins.get(i)
getCurrentTab().handleHTMLCopy()
myProject.isDisposed()
nextTokenIsFast(b,IDENTIFIER)
ContainerUtil.newHashSet("<br>","</br>","<br/>","<p>","</p>","<p/>")
new IndexShardRoutingTable.Builder(new ShardId(indexName,0),false)
Collection<String>
resp.addHeader("Access-Control-Allow-Origin",origin)
(RuleBaseEventListener)this
Bytes.toBytesBinary(regionname)
new TemporalParseException("Wrong header information type: " + fieldsFromHeader)
new AndroidBinaryNonExoInstaller(buildTarget,projectFilesystem,androidBinary)
DBG=false
b == null
lbHttpSolrServer.setAliveCheckInterval(1)
targetInfo != null
Slog.wtf(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
csUseGlobalSearch.getSelection()
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
mDarkIntensity == DARK_INTENSITY_NOT_SET
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,fromX,y,0)
TYPE_ATSC_M_H=0x00030200
amfOut.getByteArrayOut().writeTo(amfOut)
ZLibrary.Instance()
i == 0 && (post.blog.isFullSizeImage() == false && !post.blog.isScaledImage())
selenium.isVisible("link=Control Panel")
primitiveType != null
node1.checkTreeEqualsSilent(node2)
set(object,value.intValue())
GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))
Matrix.multiplyMM(m,0,matrix.getDoubleValues(),0,mTmp,0)
IR.name(TMP_ERROR)
mFrameSlots.remove(slot)
GL20.glUniform1(location,toIntBuffer(v,offset,count))
@Mock private HidProfile mHidProfile; 
CommonUtils.randomString(random.nextInt(10))
mSyncStatus.get(i)
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))
fileEncoding == null
CompilationAlarm.trackCompilationPeriod(initialOptions)
_relanuchCounter > maxRelaunch
1024 * 1024 * 14
n < who3d.lastVertex
INTERRUPTION_THRESHOLD=11
mMenu.getVisibleItems()
result.seAttributePrefix("")
RepositoryDirectoryUI.getTreeWithNames(newCat,rep,objectMap,dircolor,sortColumn,includeDeleted,ascending,true,false,directoryTree,null,null)
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
IllegalArgumentException e
users.toArray()
routes.BufferResource()
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
file.getName()
c.getLiquid().amount != 0
Log_OC.wtf(TAG,"Unhandled conflict decision " + decision)
put("1.7",CompilerOptions_VERSION_1_6)
container.getAttributeModel().getNodeTable()
gateway.sendAndRecieve(requestMessage)
enabledVariants[i].width
type.getConstructor()
return ES5; 
attributes.getDimension(R.styleable.ArcProgress_arc_angle,default_arc_angle)
mInner.end()
(ChronicleEngineEnpoint)getEndpoint()
param.args[1]
w.println(padding)
fragment.dismiss()
entry.getCheckName().equals(checkAlias)
RequestContextHolder.currentRequestAttributes()
EntityRegistry.registerEntityID(entityClass,entityName,id,background,foreground)
mCanSeekForward=mCanSeekForward=true
realm.assertThread()
IllegalArgumentException e
super.performAccessibilityAction(action,arguments)
r.curApp != null
dir.listFiles(globFileFilter)
mDisplayContent.getSplitScreenPrimaryStack()
ktAFile.getName()
Object rootName
_log.error(ioe,ioe)
this.messageService.monoPostAuthorizeBeanFindById(2L).contextStart(withUser)
new Long(93)
Date tillId
SearchFragment.newInstance(s)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
capacity > 1 << 30
mAuthorities.get(i)
createCurrency("BTG","Bitcoin Gold",null,null)
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
mWM.isKeyguardSecure()
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN)
create.fetch(meta().getCatalogs())
fraction * (nextValue - prevValue)
data.limit()
Sets.<Integer>newHashSet()
Thread.sleep(110)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Build.VERSION.SDK_INT > Build.VERSION_CODES.M
cache1.remove(1)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
new CountDownLatch(3)
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).finallyDo(() -> commentIsPosting.onNext(false))
new Paint()
condition.isEmpty()
mStartDelay == 0
String message=messageObj.getString("d"); 
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
endTrack("main")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
assertEquals(10,beanCount)
this.setSelectedGroup(metaContact.getParentMetaContactGroup())
author.getIsChatOwner()
codeItem.getIndex()
logger.debug("defineClass pluginClass:{} cl:{}",className,classLoader)
(Object)x
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
Integer.valueOf(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
mGpsListener != null
view != null
WordPress.getCurrentBlog().getRemoteBlogId()
_buildTemplateWithGradle("mvc-portlet","mvc-dependency-management","--dependency-management-enabled","true")
assertTrue(CompressionTest.testCompression("SNAPPY"))
insets.left == 0
enabled.get()
Assert.assertSame(_ehcachePortalCache.ehcache,_ehcache)
selenium.isVisible("link=Control Panel")
edge.getUpNode()
WebDriverHelper.setDefaultTimeoutImplicit(this)
AnimationAdapter<T>
readStayAwakeConditions()
toolWindow.getType() != ToolWindowType.SLIDING
myTools != null
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public void onContextMenuClick(  int itemId,  int pos,  boolean isChecked,  DialogInterface dialog){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }   } } ).position(8)
table.leftJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
AbstractConfiguredTarget.class
account.getExternalKey()
Dagger_AutoFactoryProcessorComponent.builder()
hostsInPool.decrementAndGet()
SmackConfiguration.getVersionNumber()
postVisitColumnDefinition(ancestorNode,statement,column.getName())
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).description(message)
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
event.getRequestedTransitionTime()
keyCode == KeyEvent.KEYCODE_BACK
ComboStringEditor cse=new ComboStringEditor(null,notExpression && notOther,notNull); 
DEFAULT_ALLOW_REPEAT_CALLERS=false
OptionalIdentifiedType<Type>
Window.<Integer>into(new GlobalWindows()).triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1))).accumulatingFiredPanes().withAllowedLateness(new Duration(0))
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
PortalUtil.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
new SummariserRunningSample("TOTAL",0)
parcel.readCharSequence()
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .run()
GitFileUtils.delete(project,root,removed,"--ignore-unmatch")
Log.info(this + " Busy selector - injecting delay " + _paused+ " times")
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)
findAnnotationOnBean(beanName,annotationType) != null
selenium.isVisible("link=Control Panel")
tableHasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
response.getHeader(Exchange.CONTENT_TYPE) != null
start.expectedMessageCount(6)
private static final Configuration config=HBaseConfiguration.create(); 
DynamicCounter.increment(filterName,"fail",filter.filterType())
this.spiceServiceListenerSet.add(spiceServiceServiceListener)
mFilesAll.indexOf(file)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
_connector.getResponses("GET /foo HTTP/1.1\n\n")
new ConstraintIndexCreator(() -> kernel,indexingService,propertyAccessor,false)
logger.warn("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
type.getConstructor()
assertNull(stubTree)
mNextWakeFromIdle != null
if (DBG) loge("Exception trying to remove a route: " + e); 
new MediaController(token)
rootDir.mkdirs()
reducer.getKeyColumnsSet()
new CancelJobSupervisorOperation(name,jobId,jobOwner)
Objects.requireNonNull("value should not be null")
templatesToAddressList(engine,replyTo,model)
selenium.isVisible("link=Control Panel")
timeoutMs=500
platformVersion < MNC
position >= 0
selenium.isVisible("link=Control Panel")
module.getExcludes()
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",realSubStepName)
applyCurrentState()
selenium.isVisible("link=Control Panel")
mKey.equals(other.mKey)
return CTR; 
SHUTDOWN_VIBRATE_MS > 0
lhs.getScore()
ERROR_MARGIN=10
position.getLatitude()
mState == StatusBarState.SHADE_LOCKED
isSuccess
ret=true
addProperty(firstNode,"band","The Clash")
this.thrown.equals("File must exist")
current.getSuperClass()
scrollWebElementIntoView(webDriver,webElement)
event.getY()
DEBUG=true
!TextUtils.isEmpty(title)
TitanGraphTransaction g
public abstract Double execute(); 
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,fromX,y,0)
new int[15048]
localLOGV || true
Log.wtf(mTag,"Adjusting remote volume without a controller!")
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
LOG.info("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
key.endsWith("authmechanismproperties")
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
new Message("XML_STREAM_EXC",LOG)
IOException e
tableCache.getObject(monitor,this,name,DB2View.class)
entry.key == k
LocalFileSystem.getInstance().findFileByPath(libPath)
"Using bind address: " + publicAddress
ExternalSystemModulePropertyManager.getInstance(module).seExternalModuleType(GradleConstants.GRADLE_SOURCE_SET_MODULE_TYPE_KEY)
wms.getGeoServer().getSettings()
mMat[6]
times(2)
entry.getValue().acccessibleNodeLabels
mRemote.transact(REVOKE_URI_PERMISSION_TRANSACTION,data,reply,0)
new JButton()
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
value == null
DefaultCacheKeysFactory.getEntityId(cacheKey)
historyRoot.exists()
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
Build.VERSION.SDK_INT >= 14
typeSwitch.keySuccessor(i) == predecessor
details.put(CONFIG_HASH_KEY,currentConfigHash)
Exception e
ret=true
return true; 
mContext.getString(R.string.branded_monitoring_description_app_personal)
from > to
getString(R.string.day_night_info_description,"null")
lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION) || lastPathSegment.endsWith(VTT_FILE_EXTENSION)
new RuntimeException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d(%3$s)",aFileName,lineNumber,line))
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
Log_OC.wtf(TAG,"Unhandled conflict decision " + decision)
Number.class
mAimsicdService.getCellTracker().updateNeighbouringCells()
maxWait=50
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
appName != null
readIdentifierWithSchema()
setAudioSystem(AUDIO_SYSTEM_JAVASOUND,null,false)
node == null
origKey + 10
test("MissingAuthor.testjava","Missing author")
parent instanceof AppWidgetHostView
selenium.isVisible("link=Control Panel")
checkPojoMetaClass()
retries=2
DEBUG=true
Math.min(desired,height)
method.getReturnType().getSimpleName()
hasGetter=true
(line=reader.readLine()) != null
sentiment.getPolarity()
RandomStringUtils.random(50)
WordPress.getCurrentBlog().getRemoteBlogId()
etp.setText(etp.getText())
redisson.<Integer>getBucket("executed1")
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
String.class
Exception e
mMncStr == null
mActiveAgents.valueAt(i)
Preferences.navigationEnabled(context)
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()))
selenium.isVisible("link=Control Panel")
mHandler.removeCallbacks(pae)
writer.write(getReferenceIndex(instruction))
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
new Boundary()
json.optJSONArray("roles")
WildcardType maybeWildcardType
win.isAnimatingLw() && appWindow && showWhenLocked
new KillableColoredProcessHandler(finalCommandLine){   @Override public void startNotify(){     if (myShowGoEnvVariables) {       GoRunUtil.printGoEnvVariables(finalCommandLine,this);     }     super.startNotify();   } } 
resultEndpoint.expectedMessageCount(2)
DEPENDENCY_FORMAT_VERSION=46
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
checkPojoMetaClass()
date(2008,10,12)
@Nullable CommitId getCommitToJump(); 
fragment == null
place == null
{4,5,5,11,6,5,7,5,11,11}
"abcdefghijklmnop".getBytes()
blog.getRemoteBlogId()
qux.getConstructor()
loaded.getLoaded().getConstructor()
assertTrue(jmsTemplate.isPubSubDomain())
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
IllegalArgumentException ex
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
DEBUG_RC=true
acquiredChannelCount <= maxConnections
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null)
policyFlags & SCAN_REQUIRE_KNOWN
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
i <= 'Z'
data + END
targetInfo != null
j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
LOG.error("delete failed: {}",e.getMessage())
account.getExternalKey()
indexFile.exists()
selenium.isVisible("link=Control Panel")
TelephonyManager.getDefault().getPhoneType()
checkPojoMetaClass()
onPackageDisappeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
syncMessage.length() == 0
heightIn != height
Results.unauthorized()
DBException e
this.getFieldValue().get()
reader.numDocs()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
typeSettingsProperties.toString()
telephony.isRadioOn()
logger.info(String.format("connect attempt timed out after %d",timeout))
return false; 
performDexOpt(packageName,instructionSet,true)
loaded.getLoaded().getConstructor()
n.intValue()
AbstractMethodError e
p == null
RecentBloggersWebUpgrade.class
e.getMessage()
parent.getOverriddenJoinTable(propertyName)
in.markReaderIndex().readChar()
g.cachesx(null)
JSChangeSignatureDialog.buildParameterListText(Arrays.asList(myParameters),newConstuctorText,true,DialectDetector.dialectOfElement(jsClass))
MethodRedefinitionResolver methodRedefinitionResolver
fileNode.dexVersion >= DexConstants.DEX_037
return false; 
invocation.addAttachmentsIfAbsent(context)
checkManageUsersPermission("getting profiles related to user " + userId)
format(arg,true)
server1.getStoreRepository().getLocalStore(storeName)
new MultiValuesMap<PsiVariable,PsiExpression>()
public RelativeLayout rlName; 
ViewConfiguration.getDoubleTapTimeout()
mVectorState == null && mVectorState.mVPathRenderer == null
index >= widgets.length
dest.writeLong(txPower)
lock.isLocked()
TelephonyManager.getDefault().getPhoneType()
XmppStringUtils.parseBareAddress(userJID)
v.isString() && meta.isEnclosureForced()
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
deltaY < 0
logger.error("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
new RedissonSession(id)
"Error resetting interface " + mInterfaceName + ", :"+ e
mValues[7]
cursor.getString(COLUMN_NAME)
manager.enable(keyId)
simple.getFromSentDate()
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
addSourcesBuildPhase(target,targetGroup,buildable.getSrcs(),buildable.getPerFileFlags())
ModelReference.of(ServiceRegistry.class)
mQsContainer.getLayoutParams()
fileService.getLocalResource(getResourcePath(versionedBundleName))
input.getPlatformKind()
model.getNodeTextColumns() == null
Assert.assertEquals(122L,ownerCapsuleNew.getFreeNetUsage())
verify(instrumentation,times(2)).isRetransformClassesSupported()
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
MIN_NET_ID=10
LdapUtils.getFullDn(dn,ctx).toUrl()
net.feedForward(new INDArray[]{in,decode},false)
mWM.isKeyguardSecure()
Arrays.asList(MaterialColor.PLUM,MaterialColor.CRIMSON,MaterialColor.VERMILLION,MaterialColor.VIOLET,MaterialColor.BLUE,MaterialColor.INDIGO,MaterialColor.FOREST,MaterialColor.WINTERGREEN,MaterialColor.TEAL,MaterialColor.BURLAP,MaterialColor.TAUPE,MaterialColor.STEEL)
mContext.getString(R.string.branded_monitoring_description_app_personal)
nextValue >= 0x9F
rowKeyColumnIO.writeColumnWith(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
format(conf,true)
Strings.isNotBlank(password)
EPS_THRESHOLD=1e-5f
param.args.length > 0
createFromResourceStream(res,value,is,srcName)
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
this.conf.addResource(yarnSiteXMLInputStream)
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingFile",filename))
CMISFileEntry.class
new IndexWriter(ram,analyzer,true)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
/**   * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is smaller than the amount of data read after the mark position.  */ public static class InvalidMarkException extends RuntimeException {   private static final long serialVersionUID=-4338378848813561757L;   public InvalidMarkException(  String detailMessage){     super(detailMessage);   } } 
parser.parse(GroovyElementTypes.GROOVY_FILE,builder)
selenium.isVisible("link=Control Panel")
new RoutingControlAction(this,newPath,false,callback)
capacity > 1 << 30
!showOnKeyguard
mGoogleApiConnectionTask.setException(new ConnectException(result.toString()))
metaClass.getMetaMethod(name,arguments)
DocumentationManager.storeOriginalElement(project,element,originalElement)
checkpointPath.getPath()
!showOnKeyguard
!mpline.contains(boundary)
out.writeObject(function)
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
id=15
TelephonyManager.getDefault().getPhoneType()
mapTypeString=R.string.overlay_transparency
Long.valueOf(id)
near.remove(1)
UnsupportedTypeException.raise(arguments)
getConnection().setFollowRedirects(followRedirects)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
res.getString(R.string.data_usage_warning_body,Formatter.formatFileSize(mContext,policy.warningBytes))
parameters == null
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).description(message)
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)
clickOnWebElement(by)
input.getPlatformKind()
null == file
peer.getSyncBlockToFetch().size() < NodeConstant.SYNC_FETCH_BATCH_NUM
dst.limit()
mLteSignalStrength > 63
TestPropsValues.getUserId()
lhs.getScore()
i > speedBumpIndex
onJava10()
h2 || h2c || ajp
(maxValue - minValue) > 0
NativeDecoder.matches(in,inputFormats)
!hasDisplayList
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
postVisitColumnDefinition(ancestorNode,statement,column.getName())
userRecord.mClientRecords != null
LOGGER.debug("Unable to process JSON",exception)
selenium.isVisible("link=Control Panel")
jvmOptions.setAllJvmArgs(DEFAULT_JVM_ARGS)
log.warn("Null primary key column for '" + object.getName() + "'")
log.error("Unable to initialize AuthorizationBackend {} due to {}",ad,e.toString())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
promise.setSuccess()
!typeDescription.represents(void.class)
9 * width
CollectionUtils.isNotEmpty(elements)
AMQ3529Test.class
this.mTitle.compareTo(another.mTitle)
mDataAuthorities == null
FluxPeekHelper<T>
Ignition.start()
"com.android.browser".equals(browserPackageName)
factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)
metaContact.getDisplayName().startsWith(queryString)
super(defaultAudited,persistentPropertiesSource,auditedPropertiesHolder,globalCfg,reflectionManager,propertyNamePrefix); 
inputItems.length >= index
myTypeChecker.checkExpressionIsAssignableToType(arguments[0],BOOLEAN_CLASS_NAME,"javascript.argument.type.mismatch",null)
@Override public ModelMetricsRegressionV3 fillFromImpl(ModelMetricsRegression modelMetrics){   super.fillFromImpl(modelMetrics);   r2=modelMetrics.r2();   return this; } 
Long.valueOf(value)
instruction.getHatLiteral()
LOG.info("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
hj[]
new FileSystemWebDabServer(nioFileSystem())
targetType.getConstructor()
typeSettingsProperties.toString()
PlatformTestCase.initPlatformLangPrefix()
this.alphabet
defaultListenerAccess != null
new ArrayList<>()
previousParameterName.compareTo(parameterName)
Map<String,Counter>
className.indexOf("org.openmrs.")
v2.getString()
branch.hasState()
!regex.equals(lastRegex)
result == Short.MAX_VALUE
mService.setUidPolicy(UID_A,POLICY_NONE)
mBoundServices.isEmpty()
resources.getDimension(R.dimen.close_handle_height)
program.stackPop().intValue()
getValue(activity.getExtraData(),"title",kbArticle.getTitle())
logger.info("license [{}] - grace",license.uid())
selenium.isVisible("link=Control Panel")
Throwable e
IBackupManagerService svc=mService; 
fluentSetters()
in.getDepth() < outerDepth
addView(root,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
URI != null
data.split("\\s*,\\s*")
cc.isLazy()
!isPartialUpdate
@JsonProperty(STICKER_FIELD)
cachedDevice != null
@Override public final DivideBy or(String sql,QueryPart... parts){   return or(condition(sql,parts)); } 
new SkylarkTest()
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
super.onDetachedFromWindowInternal()
c.getDeclaredConstructors()
imeWin.getDisplayFrameLw()
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
cf.getLocalDeletionTime() <= gcBefore
from >= to
ScanResult.is24GHz(frequency)
@Override protected Content setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
selenium.isVisible("link=Control Panel")
service.cancelMissedCallsNotification()
case s: 
chatRooms.add(chatRoomID)
validator.warning("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
Java6Assertions.assertThat(mountedSubComponents).isEqualTo(subComponents)
EnumSet.of(UpdateTask.TAGS,UpdateTask.FOLLOWED_BLOGS)
!bundledResourcesDir.isDirectory()
FRAME_STATS_COUNT=14
new DefaultQueryOptions(consistency,values,false,SpecificOptions.DEFAULT,0)
animData == null
selenium.isVisible("link=Control Panel")
mResourceData[i] != null
jobsLogs.operationsLogGetter()
fb.capacity()
telephony.getNetworkTypeForSubscriber(subId)
CoreMatchers.anyOf(is(NestedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedTypeVariableType<T>$Placeholder"))
keyCode == KeyEvent.VK_ALT
metastore.getHostText()
cf.getCompressionType() == null
routeList == null
classNode.getName()
RequestContext.create()
wizardModel.databaseConnection.contains("localhost")
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
tracesFile.mkdirs()
USE_MACOSX_CALAYERS=true
System.out.printf("na.setNode(%d, %f, %f);\n",node,na.getLat(node),na.getLon(node))
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0
file.getAbsolutePath()
selenium.isVisible("link=Control Panel")
logger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
response.getContentAsString()
mState == STATE_UNINITIALIZED
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
tableIdx == table.array.length()
new byte[160]
formatTime(fullWifiLockOnTime / 1000)
BACKGROUND_DEXOPT_JOB=808
SecurityActions.getModuleClassLoader(JACC_MODULE)
obtainMessage(MSG_TIMEOUT,state)
referenceDatabase.getObjectQuotingStrategy()
type.equals("")
new JsonUt8Writer(buffer)
FileUtil.loadFile(new File(testFileName))
exchFut.discoveryEvent().node()
Session.getInstance(prop,null)
serviceDataUuid == null
Log.w(TAG,"Session failed to close due to remote exception",e)
mConferenceById.containsKey(callId)
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(10000)
new IterableAlgorithmRunner(blockScanner,40000)
Lists.newLinkedList()
out.write(ANNOTATION_CONSTANT_TAG)
mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
offView.setClearEnabled(true)
getQualifiedName() == AbstractName.NO_NAME
LOG.info("Failed to read expected encryption handshake from client " + "at " + peer.getRemoteAddressString() + ". Perhaps the client "+ "is running an older version of Hadoop which does not support "+ "encryption")
getRandom()
myCredentialsMap.containsKey(scope) || quietMode
userInfo.getWebpage()
searchCompleter.addBibtexEntry(entry)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
SHOW_ON_APP_LAUNCH=3
treeStyles.styles()
TelephonyManager.getDefault().getPhoneType()
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
JCheckBox formatPhoneNumber=new JCheckBox("",ConfigurationManager.isNormalizePhoneNumber()); 
mBitmapState.mBitmap.hasAlpha()
selenium.isVisible("link=Control Panel")
offsets == null
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
poList[1]
IgniteCheckedException e
ps.setString(i,parameter)
acos(arr,Nd4j.copyOnOps)
SessionErrors.add(actionRequest,e.getClass().getName())
XmppStringUtils.parseBareAddress(local)
selenium.isVisible("link=Control Panel")
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)
new StringBuilder(239)
value.longValue()
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
zoomScale(im,w,h)
mOuterRadius * 1.0f
tessellator.tessellatePolygon(false,close,true)
vb.getData().capacity()
i < 50
random().nextInt(10000)
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
new INodeDirectory(srcChild)
case 7: 
period < MINIMAL_POLL_PERIOD
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
super.cancel()
position - 1 > 0
portlet.getPortletName()
cctx.wal() != null
RemoteException e
getTotalSpaces() < spaceProperty.getMinSpaces()
CollectionUtils.isEmpty(blocks)
checkPojoMetaClass()
mAuthorities.get(i)
plugin != null
dest.writeLong(mSubId)
((Element)iter.next()).getName()
MAX_BATCH_SIZE=1000
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,prevDeviceState,newDeviceState)
transportRoutingHelper.getRoutes()
new IndexWriter(dir,new StandardAnalyzer(),true)
new FileInputStream(engineSocket.getFileDescriptor())
mAttributes.getFlags()
endpoint.getConnectionFactory()
mapper.writeValueAsString(segment)
app.info.targetSdkVersion < targetSdkVersion
readSuspendablesFile(suspendablesFileName,suspendables,suspendables)
SHUTDOWN_VIBRATE_MS > 0
getServiceName()
file.getPath()
messageJournalEnabled=false
type.getConstructor()
mSyncStatus.get(i)
resourceTableStream.read(tableBytes,0,(int)alignedSize)
mFocusStack.remove(fse)
Key.class.getCanonicalName()
viewToClick != null
fingerId == 0
WordPress.getCurrentBlog().getRemoteBlogId()
id=15872
instanceMethod.getDeclaringClass() == implementation.getClass()
removeQuote(timestring.trim())
mMncStr == null
SchedulerFactory.singleton().createOrGetParallelScheduler(PythonInterpreter.class.getName() + this.hashCode(),10)
Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION))
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",false,featuresConfig.isLegacyOrderBy())
ImmutableList.of(qmark,bang)
libraryDescriptionDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
/**   */ private final LongAdder mapSize=new LongAdder(); 
arguments.setSourceMapSourceRoots(sourceMapSourceRoots.toString())
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
((Scorecard)serializable).isUseReasonCodes()
oldStatus == status
NoteDrawerTagAdapterViewHolder holder; 
selenium.isVisible("link=Control Panel")
set(object,value.intValue())
new AssertionError("The dataflow failed.")
values.putNull(Document.COLUMN_ICON)
new MediaSize("UNKNOWN_PORTRAIT","android",R.string.mediasize_unknown_portrait,Integer.MAX_VALUE,1)
Map<Object,RealmObject>
StagedModel existingStagedModel=stagedModelRepository.fetchStagedModelByUuidAndGroupId(uuid,groupId); 
prjFile.getPath()
epsilon.dup()
file.getLocalFile()
new CompoundShelfFileProcesor(new StreamProvider[]{},PathManager.getConfigPath() + File.separator + "shelf")
font.getFamily()
mHorizontals == null
System.getProperty(Tokens.FAUNUS_HOME)
raw.getParameters()
descrTextView.setVisibility(color)
securityMode != SecurityMode.None
BufferUtils.freeMemory(bytebuffer)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
mJobs.get(i)
Log.wtf(TAG,e.getMessage(),e)
cluster.restartDataNode(dnIdxToDie,true)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
id.getHash()
temp_descs.get(i)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
ks.getKieClasspathContainer()
IllegalStateException e
LOG.error("register druid-driver mbean error",ex)
new InfoData(InfoData.NOT_AWAY,null,MY_CAPS,null)
DEBUG=true
AccessException ex
backgroundColor=0xffC0C0C0
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
e.getMessage()
resourceInfo.getResourceClass()
IllegalStateException e
Integer.valueOf(taskIdStr)
assertEquals(3,unindexedFieldNames.size())
message.processMessage()
serversByLoad.lastKey()
log.e(LOG_TAG,"ACRA processName='" + processName + "'")
xtw.writeCharacters(customProperty.getSimpleValue())
itemRenderer.renderItemIntoGUI(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
new StringBuilder(247)
prj0.putIfAbsent(i,i * i)
buildVolumeSettingsPendingIntent(vol)
m.getClass()
new IndexWriter(directory,analyzer,true)
setupRhino("dlw-service-endpoint","/org/apache/cxf/javascript/DocLitWrappedTests.js",false)
constructor.getTypeParameters()
context.var("double")
formatCommand(command,"SA200CMD;{%s};0{%s};Enable{%s}\r",Command.KEY_UNIQUE_ID,Command.KEY_DATA)
mImm.setInputMethod(mToken,id)
timeout(1000)
wifiConfig.isValid()
platformVersion < MNC
doneAdvance(mark(),KEY_CHARACTERS)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
RecentProjectsManager.getInstance().getRecentProjectsActions()
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null)
colors.getResourceId(i,0)
selenium.isVisible("link=Control Panel")
apacheHttpClient.sendRequest(httpRequest)
converter.convertTo(leftValue.getClass(),rightValue)
selenium.isVisible("link=Control Panel")
new ColorUIResource(0xFFFFFF)
childrenExpanded ? mDividerHeight : mChildPadding
error
IllegalStateException.class
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
new BTreeMap<K,Object>(engine,nodeSize,true,false,defaultSerializer,serializer,null,comparator)
new EntityTrackerInfo(mod,ID,range,updateFrequancy,sendVelocityInfo)
(flags & 0x20) > 0
Math.ceil((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
new OptionKey<>(true)
actionAdapter.execute(null,null,null,null)
Assert.assertEquals(2,json.size())
new byte[10]
VoiceInteractionManagerService.this
ServiceContextThreadLocal.popServiceContext()
hashSymbols.keySet()
ExecutionParameters parameters
mUserManagerHelper.getAllUsersExcludesSystemUser()
!mStatus.showStatusLines()
isCancelled0(result)
new HTTPArgument(getArgumentName(),value,false)
out.writeLong(sampleCount)
DefaultCacheKeysFactory.createNaturalIdKey(naturalIdValues,persister,session)
UIMODE_SERVICE.equals(name)
child.resetResolvedLayoutDirection()
dynamicType.getConstructor()
SLEEP_TIME=500
mService.mAppOps.checkOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
new ModelNode().set(17500)
cancelHardwareAnimations(false)
this.aliasToCTEs.containsKey(alias)
location.getSchemeSpecificPart()
mState.isAlive()
mDrawable.getIntrinsicHeight()
Collection<Fragment>
last.getParent()
new MaterialDialog.Builder(getActivity()).title(R.string.reschedule_card_dialog_title).positiveText(getResources().getString(R.string.dialog_ok)).negativeText(R.string.cancel).inputType(InputType.TYPE_CLASS_NUMBER).inputRange(1,9999)
ImmutableMap.of("CHECK_THIS_VARIABLE","1")
return true; 
InterruptedException e
expectedClockTime - 500
((AstridActivity)getActivity()).setupTasklistFragmentWithFilter(newFilter)
incomingMessage.setTransActionCanceled(true)
world.scheduleUpdate(other,state.getBlock(),state.getBlock().tickRate(world))
result.addEnchantment(enchantment,(Integer)entry.getValue())
Long.valueOf(value)
internalCluster().getInstance(SystemCollectSource.class)
buildVersion=0
any(TransactionHook.Outcome.class)
loaded.getLoaded().getConstructor()
Strings.split(Util.expr2Object(sqlExpr.getRight()).toString(),",")
fireBridgeFailed(new Throwable("remoteBrokerInfo is null"))
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName())
Long.valueOf(value)
mConferenceById.containsKey(callId)
(switchValues & SW_CAMERA_LENS_COVER_BIT) == 0
what instanceof UpdateAppearance || what instanceof ParagraphStyle
_connector.getResponses("METHOD /f\00o HTTP/1.0\n\n")
logger.debug("Illegal argument in chart: {}",e)
new IndexWriter(dir,analyzer)
lock.isLocked()
logger.debug("Propose response {} from {}",msg.payload,msg.from)
e.toString()
i--
m.getClass()
new User(credentials.getUsername())
(U)result
new Color(pixels[i])
ai.uid <= Process.FIRST_APPLICATION_UID
selenium.isVisible("link=Control Panel")
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(calendarBooking,1,true,true)
smsHeader.portAddrs != null
resultEndpoint.expectedBodiesReceived("one","two","three")
AnalyticsDataFactory.getAnalyticsData()
jmsDestination == null
preResourcesElementDesc.getStoreFactory()
assertEquals(ex.getCause().getMessage(),"Unable to read 1 bytes, got 0")
main.call(frame,args)
i < 6
mService.setUidPolicy(UID_A,POLICY_NONE)
new InputStreamReader(bais,StandardCharsets.UTF_8)
new Property()
Settings.Global.getInt(cr,Settings.Global.DOCK_AUDIO_MEDIA_ENABLED,1)
return false; 
spec.multiPart(controlName,mimeType)
enabled=false
namesOfResourcesWithInvalidMac.contains(cleartextPath)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET)
map.lock(key,4,TimeUnit.SECONDS)
a.getFloat(attr,0)
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
Integer.valueOf(nextArgRequired())
getObject()
intermediateArtifacts.strippedSingleArchitectureBinary()
grantAlias == null
AudioManager.class
method.getStatusCode() == HttpStatus.SC_NOT_FOUND
c == Character.class
type.getConstructor()
myFile.getParent()
valueFormatter != null
!list.append(ai)
FastMath.max(origin,num.floatValue())
new CustomChangeException("Failed to insert one or more concept map types")
new V(1,new BooleanSetting(false))
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
LOGGER.debug("Registering handler [{}] with no principal resolver into the execution plan",handler.getName(),principalResolver)
transactionLogTriggerEnable=true
mockResultSet.getDouble(1)
text.contains(nick + " ") || text.contains(" " + nick) || text.endsWith(nick)|| text.equals(nick)
anyContinue=true
mHandler.handleMessage(msg)
null != lvElement(buffer,calcWrappedOffset(index + 1,mask))
dynamicType.getConstructor()
selenium.isVisible("link=Control Panel")
return 6000; 
new BindException(concept,"concept")
{0x038,0x121,0x061,0x160,0x031,0x130,0x070,0x025,0x124,0x064,0x109,0x049,0x148,0x019,0x118,0x058,0x00D,0x10C,0x08C,0x01C,0x103,0x043,0x142,0x013,0x112,0x052,0x007,0x106,0x046,0x016,0x181,0x0C1,0x1C0,0x091,0x190,0x0D0,0x085,0x184,0x0C4,0x094,0x0A8,0x0A2,0x08A,0x02A}
pluginsModel.setSortByStatus(true)
new HgSetExecutableDialog(project)
connection.getParser().addListener(websocket)
PolyglotBindings.class
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
TimeUnit.SECONDS.toMillis(2)
aa.getFlags()
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
s.equals(s2)
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).description(message)
Log_OC.e(TAG,"onSaveInstanceState() start")
selenium.isVisible("link=Control Panel")
agentUri.getPath()
new Update(MavenProjectsManager.this){   public void run(){     wrapper.get().run();   } } 
mContext.checkCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
log.warn("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
view.getContext().getPackageName()
getStepIOMeta().getTargetStreams()
logger.debug("Received MyQ  JSON: {}",dataString)
metaData.getColumnName(1)
LOG.info("Removed connection {} for {} - open: {}",connection,this,open)
mPowerManager.isScreenOn()
mQsContainer.getLayoutParams()
schemas == null
public Object mapLine(FieldSet fieldSet,int lineNum){   Customer customer=new Customer();   if (Customer.LINE_ID_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setCompanyName(fieldSet.readString(COMPANY_NAME_COLUMN));     customer.setRegistered(true);   }   if (Customer.LINE_ID_NON_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setLastName(fieldSet.readString(LAST_NAME_COLUMN));     customer.setFirstName(fieldSet.readString(FIRST_NAME_COLUMN));     customer.setMiddleName(fieldSet.readString(MIDDLE_NAME_COLUMN));     customer.setRegistered(TRUE_SYMBOL.equals(fieldSet.readString(REGISTERED_COLUMN)));   }   customer.setRegistrationId(fieldSet.readLong(REG_ID_COLUMN));   customer.setVip(TRUE_SYMBOL.equals(fieldSet.readString(VIP_COLUMN)));   return customer; } 
timeoutMs >= 0
new SpannedString(new CustomSpanned(first),false)
formatter != null
Long.valueOf(value)
new StringBuilder(561)
mHandler.removeCallbacks(pae)
logger.info("munlocking region")
imageViewFuture.setComplete(imageView)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
method.getReturnType()
column.getName()
"Segment initialized with too large address: " + address + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
_log.error(ioe,ioe)
300 * 1000L
active && mCurrentUser != UserHandle.USER_NULL
32 * 1024 * 1024
log.warn("Problem in JSR223 script ",e)
mService.setEnableAutoJoinWhenAssociated(enabled)
source.readInt()
dynamicType.getLoaded().getConstructor()
module != null
coreId < nReplicas
Map<String,Object>
"".equals(textArr[9])
Observable.timer(0,1,TimeUnit.SECONDS)
!regex.equals(lastRegex)
WordPress.wpDB.getAccounts()
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
capacity > 1 << 30
!file.exists()
WindowedValue.valueInEmptyWindows(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
i > speedBumpIndex
setupStrokePaint(paint,opacity)
options.needsTranspilationFrom(ES7)
resultSet.getShort(index)
opSetIm.removeMessageListener(messageSourceService)
calendar.roll(Calendar.DATE,2)
msgLog.warn("Exception occurred while starting the datasource. Attempting to close things down.",e,true)
cs == null
300 * KB
ref.getParentObject()
ddmStructureService.updateStructure(ddmStructure.getStructureId(),nameMap,descriptionMap,xsd,serviceContext)
cache5.setColor(red)
ThreadFactoryBuilder.create().withNamePrefix(THREAD_NAME)
pur.getFile(dirId.getId())
mMountTable.resolve(getPath(next)).getPath()
mMncStr == null
getTtsVoiceUsed()
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
Util.SDK_INT <= 24
mHandler.removeCallbacks(pae)
properties.get(logSlow)
titleListMergeable != null
/**   * @author Spencer Gibb  */ @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes=SpringDecoderTests.Application.class) @WebAppConfiguration @IntegrationTest({"server.port=0","spring.application.name=springdecodertest","spring.jmx.enabled=true"}) public class SpringDecoderTests extends FeignConfigurer {   @Value("${local.server.port}") private int port=0;   public TestClient testClient(){     return feign().target(TestClient.class,"http://localhost:" + port);   } protected static interface TestClient {     @RequestMapping(method=RequestMethod.GET,value="/hello") public Hello getHello();     @RequestMapping(method=RequestMethod.GET,value="/hellos") public List<Hello> getHellos();     @RequestMapping(method=RequestMethod.GET,value="/hellostrings") public List<String> getHelloStrings();   } @Configuration @EnableAutoConfiguration @RestController protected static class Application implements TestClient {     public Hello getHello(){       return new Hello("hello world 1");     }     public List<Hello> getHellos(){       ArrayList<Hello> hellos=new ArrayList<>();       hellos.add(new Hello("hello world 1"));       hellos.add(new Hello("oi terra 2"));       return hellos;     }     public List<String> getHelloStrings(){       ArrayList<String> hellos=new ArrayList<>();       hellos.add("hello world 1");       hellos.add("oi terra 2");       return hellos;     }     public static void main(    String[] args){       new SpringApplicationBuilder(Application.class).properties("spring.application.name=springdecodertest","management.contextPath=/admin").run(args);     }   }   @Test public void testSimpleType(){     Hello hello=testClient().getHello();     assertNotNull("hello was null",hello);     assertEquals("first hello didn't match",new Hello("hello world 1"),hello);   }   @Test public void testUserParameterizedTypeDecode(){     List<Hello> hellos=testClient().getHellos();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match",new Hello("hello world 1"),hellos.get(0));   }   @Test public void testSimpleParameterizedTypeDecode(){     List<String> hellos=testClient().getHelloStrings();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match","hello world 1",hellos.get(0));   } @Data @AllArgsConstructor @NoArgsConstructor public static class Hello {     private String message;   } } 
PROGRESS_DATA_MESSAGE=6
Boolean.valueOf(getOptional("kylin.query.convert-create-table-to-with","false"))
_parms._distribution == Distribution.Family.bernoulli
service.getFullName()
mMncStr == null
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
x=1
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
tracesFile.mkdirs()
public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } 
mBiometricUnlock.stopAndShowBackup()
lc.contains("_oceania_")
CONTENT_TYPE + "; boundary=" + getBoundary()
!inventory.getStackInSlot(slot).isItemEqual(stack)
case WIKI: 
new ClusterConfiguration("clusterName",StringLogger.DEV_NULL,initialHosts)
selenium.isVisible("link=Control Panel")
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getConstructor()
hits.length()
new IllegalArgumentException("Advertising can't be both connectable and scannable")
myEditor.offsetToVisualPosition(endOffset,false,true)
remoteUidMap.get(localMessage.getUid()) == null
writerNotify.wait()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mInjector.getUserManager().removeUser(userId)
selenium.isVisible("link=Control Panel")
SSEAtmosphereInterceptor.class
mSize != -1
entry.notification.clone()
upload1.getUploadEndTimestamp() == 0
mDataSetObserver != null
item.getType() == DownloadActivityType.NORMAL_FILE
unsafeBuffer.wrap(decodingBuffer)
@XmlAttribute(name="miterlimit") protected BigDecimal miterlimit; 
getActionBar()
e1.getValue()
httpClient.close()
parser.getText()
properties.containsKey(protocol + ".extended")
getRegistrationState().equals(RegistrationState.UNREGISTERED) || getRegistrationState().equals(RegistrationState.UNREGISTERING)
polyLats.length - 2
requestFilters.isEmpty()
ReflectionUtils.invokeMethod(httpClientConnectCallbackMethod,httpClient,listener,uri,this.undertowBufferPool,worker,options)
a.getFloat(attr,0)
ref2something.getOrDefault(ref,null)
klass.getDeclaredMethods(false,declaredMethods)
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
canvas.drawArc(mArcRect,45,90,true,mPaint)
new NameAlias(tableNameAlias)
selenium.isVisible("link=Control Panel")
(DataProvider)dataProvider
-1.0
classMapper.lookupType(reader.getNodeName())
install.getAbsolutePath()
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
createFromResourceStream(null,null,is,srcName)
out.writeLong(sampleCount)
BUKKIT_VERSION=2586
i <= size
assertFalse(Jodd.isModuleLoaded(PETITE))
StampedCommonCache<String,Class>
case Deposit: 
left != startFromPixel
StringUtils.isEmpty(objectId)
mCol != null
msbFragmentEntry.getFragmentEntryId()
mView.post(mAnimationStarter)
"Error resetting interface " + mInterfaceName + ", :"+ e
id=15
player.isAuthorized("essentials.world." + user.getWorld().getName())
Collections.<IntPair>emptyList()
m.getClass()
assertEquals(12,scannedBeanCount)
viewToClick != null
selenium.isVisible("link=Control Panel")
fb.capacity()
knownType != null
Long.valueOf(timeString)
motherTongue.getName()
IdeBorderFactory.createTitledBorderBoldWithIndent(ApplicationBundle.message("title.preview"))
Object[]
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName())
lock.isLocked()
res.getQuantityString(R.plurals.time_seconds_quantified,v)
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,mustHaveFlags)
deadline < now
unsetDefault.isPrivate()
image.getFile_url() != null
mHorizontals == null
new Duration(10,TimeUnit.SECONDS)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).compareAndSet(expected_value, value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()))
mHorizontals == null
public Object getMethod(); 
assertEquals(4,factory.getConfiguration().getResultMapNames().size())
DiagnosticFactory3.create(WARNING,CALL_ELEMENT)
typeLength == 0
charArray.length * 2
new StreamError(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR,streamId)
from.getCanonicalPath()
dynamicType.getLoaded().getConstructor()
setImageDrawable(icon)
Character.isHighSurrogate(tmpBuffer[len - 1])
Boolean.getBoolean("java.awt.headless")
new MediaController(token)
clickView != null
MAX_STATUS_WIDTH=6
assertLeftRightCategory(2,category2a)
factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)
new CountDownLatch(3)
TestRepositoryUtil.assertEqualCollections(localTags,myLocalTags)
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
NullPointerException.class
myPriorityRange.contains(info)
LOG.isDebugEnabled()
new IgniteCheckedException("Failed to initialize cache store (data source is not provided).")
i < 12
from > to
stepsNumber=0
new int[25]
javaWriter.emitSingleLineCOmment("foo")
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)
giveFieldBinding(s)
metadata.getFaceRectangles()
new ArrayList<PhysicsJoint>()
selenium.isVisible("link=Site Name")
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.TERADATA)
actionBuilder.setStdout(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
mPrefWriteAnswers
uncompressedProto.length < 2500000
s3dir + ".dir"
mSyncStatus.get(i)
@Overide
super.getFamilyMap()
this.setBuffer(VertexBuffer.Type.Index,3,indices)
Object[]
recoveryDescs.put(id,recovery=new GridNioRecoveryDescriptor(queueLimit,node,log))
cs[c].setNA0(r)
ActivityManagerNative.getDefault().updateConfiguration(config)
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button); 
DDMStructureLocalServiceUtil.getStructure(GetterUtil.getLong(ddmStructureFieldNameParts[2]))
serialVersionUID=145789840
new RuntimeException()
holder == null
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
config.getOrcMaxBufferSize()
a.getFloat(attr,0)
i <= 0
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_FLAC,Format.NO_VALUE,streamInfo.bitRate(),streamInfo.channels,streamInfo.sampleRate,initializationData,null)
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
four.setCoordinateIndex(LEAF)
System.arraycopy(orig,0,target,0,160)
logger.debug("Invalid Account Credentials")
LOG.info("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
document.addKeyword(name,valueString)
logicalExpressionStack.get(logicalExpressionStack.size() - 1)
mImm.hideStatusIcon(mToken)
callbacks.onHardwarePostDraw(canvas)
new ServerSparseDoubleRow(rowId,startCol,endCol)
theContact=props.getProperty(TERMS_URL_PROPERTY)
cs.getMetaData()
new ClientAttributeUpdater(clients.get(salesRep.getId())).setFrontchannelLogout(true).setAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE,"")
tour.getStageInformation().isEmpty()
AllGroupsCollector c1=new AllGroupsCollector(groupField); 
public KeyValueBinding getValueBinding(){   return attributeBinding; } 
mHasSurface && !resizingWindows.contains(this)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Thread.sleep(1000)
adapterCount < MAX_VISIBLE
memoryCacheSize <= 0
new WithAccountLock<ReturnType,ExceptionType>(paymentConfig).processAccountWithLock(locker,accountExternalKey,callback)
super.getLikeProvider(path)
(Integer)1
mSyncStatus.get(i)
typeSettingsProperties.toString()
verify(mWifiService,never()).stopLocalOnlyHotspot()
notebook.cloneNote(note.getId(),"clone note with Exception result")
new String(payload)
if (isVisible) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
position.offset(mLeft,mRight)
config.enterpriseConfig != null
new HttpHost(proxy.host,proxy.port,proxy.protocol)
LoggerFactory.getLog(MongoQueryCreator.class)
availableAllocations[lowIndex]
args.length > 5
jobDataMap.put(SchedulerEngine.JOB_STATE,jobState)
to("direct:foo")
response.getResponseBody().isEmpty()
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
return raf; 
RowSqlType.builder().withIntegerField("f_int").withIntegerField("sub_string")
executionStats.getSplits()
mListView.getChildAt(index)
fRestriction && ondemand
Exception e
myFirstComponent.getPreferredSize()
mValues[7]
Object node
(child.mViewFlags & VISIBILITY_MASK) != GONE
layoutTypePortlet.getPortlets()
new PyDocstingParser()
nodeInfo.getPlugins().getInfos()
popupWindow.setWidth(menuWidth)
RouteInfo r; 
AllGroupsCollector c2=new AllGroupsCollector(groupField); 
file.getInputStream()
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
holder == null
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL_ALL,pkg,mustHaveFlags)
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
mShouldTranslateContents
StripedFileTestUtil.randomArray(dataBlocks,dataBlocks + parityBlocks,dataDNFailureNum)
valuesLoaded=true
enter && hasWindowFocus() && isFocused()
super.onResolveLayoutDirection(layoutDirection)
column.getValueClobFile() != null
context.var("long")
logger.info("license [{}] - expired",license.uid())
buffer[extLenIndex] << 4
new UnsupportedOperationException()
Simple.of(SkylarkDict.class)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION)
/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws IOException {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } 
connections.get(address)
logger.error("{}",builder.toString())
status().isMovedTemporarily()
drawPath(g)
public String getText(){   return text; } 
new FirefoxWebDriverImpl(projectDir,portalURL)
Integer.valueOf(taskIdStr)
old + 15
originalValue != null
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
Stream.of("CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
assertEquals(actualTables,expectedTables)
identifier.toString()
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(project,"Synchronizing OSGi dependencies",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         indicator.setIndeterminate(true);         ModuleManager instance=ModuleManager.getInstance(project);         Module[] modules=instance.getModules();         for (        Module module : modules) {           getInstance(module).syncDependenciesFromManifest();         }       }     } .queue();   } } )
mPulseCallback.onPulseFinished()
properties.length > 3
analysis.getTypeWithCoercions(aggregate)
memoryCacheSize <= 0
System.currentTimeMillis() - start > 500
AbilityRegistryProxy.setAsRecoverable(itemStack)
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
sendMessage(CMD_STOP_AP)
Integer.valueOf(nextArgRequired())
percentComplete=50
new HTTPArgument("",text.replaceAll("\n","\r\n"),true)
Helpers.exec(j4p,"setProfileRepositories(java.lang.String, java.lang.String, java.util.List)",id,strings)
getBinaryTupledSet()
clusterService().localNode().name()
_TestUtil.nextInt(seedRandom,2,64)
editor1 == editor
private MyClassLoader myClassLoader; 
nextTokenIsFast(b,IDENTIFIER)
OnSubscribeGroupByUntil<T,TKey,TValue,TDuration>
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
!startPositioningLocked(win,true,startX,startY)
ap.getSsid()
new Paint(Paint.ANTI_ALIAS_FLAG)
@Override public Cell deepClone(){   return new KeyValue(this); } 
final FileBasedWikiPage parent
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
selenium.isVisible("link=Control Panel")
behindFraction * mScrimBehindAlphaKeyguard
AssetTagLocalServiceUtil.checkTagsWithProperties(userId,groupId,queryRule.getValues())
findDelegate(name)
!method.isStatic() && method.isPublic() && method.getAnnotations(ACTION_ANNOTATION_NODE.getClassNode()).isEmpty()&& method.getLineNumber() >= 0
new PoolBagEntry(null,TestElf.getPool(ds))
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
RequestContext.create()
m.shapeInfoDataBuffer()
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName())
!violationRules.isFailOnViolation()
new GridDataLoaderProcessor(ctx)
context == null
request.getPath().split("\\?")
buildHiloOptimizer(-1,incremepnt)
tracesFile.mkdirs()
table.getFields()
mResourceData[i] != null
modulePropertyManager.seExternalModuleType(moduleType)
if (isVisible) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
mConfig.hasTransposedNavBar
registrar.registerReferenceProvider(new PsiElementPattern.Capture<PsiElement>(PsiElement.class){   @Override public boolean accepts(  @Nullable Object o,  ProcessingContext context){     return o instanceof PsiLiteralValue && ((PsiLiteralValue)o).getValue() instanceof String;   } } ,new ArbitraryPlaceUrlReferenceProvider())
type.getConstructor()
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
StringUtil.valueOf(key.hashCode())
hz1.getLifecycleService().terminate()
InputMethodManager.getInstance(mTargetActivity)
procs.getBoolean("NULLABLE")
new BufferedInputStream(new FileInputStream(file))
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistartion(PBHelper.convert(registration))
LOG.error("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().otherwiseIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
new IOException("Downloading Gradle distributions with HTTP Basic Authentication is not supported on your JVM.",ex)
(device=1 << i) <= AudioSystem.DEVICE_OUT_DEFAULT
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,aggregationAnnotation.approximate(),factory)
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
body.transferTo(position,Long.MAX_VALUE,target)
InitialFactImpl.class
parsedResult.getSqlType()
new EnterSelectionDialog(shell,props,procs,Messages.getString("DBProcDialog.EnterSelection.DialogTitle"),Messages.getString("DBProcDialog.EnterSelection.DialogMessage"))
counter <= max
injectionConfiguration.getSource().getResourceValue(serviceBuilder,context,managedReferenceFactoryValue)
slotId == 0
isNavBarVirtKey && !down
pathText.getText()
target.addTask(task)
_log.warn("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
mAppliedTemporaryAutoBrightnessAdjustment=true
new ObjectMapper().reader(DiskBalancerVolume.class)
deadline < now
CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking()
BUTTON_QUIESCENT_ALPHA=0.6f
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))
pti.getTotalFields()
fragment.dismiss()
ourGuard.doPreventingRecursion(element,false,computable)
ruleIndex <= runCount
cursor != null
instrumentation.isRetransformClassesSupported()
new SSLConnectionSocketFactory(sslContext())
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
TRACE_ROUTING=true
mMatchMode=numOfMatchesPerFilter
matcher.matches()
result.addEnchantments(getEnchantments())
this.r != null
SerializableString name
imeWin.getDisplayFrameLw()
mWidth - glowWidth
ScatteringByteChannel.class
context.restartRequired()
new FrameV2()
selenium.isVisible("link=Control Panel")
loadingResult.getPackageRoots()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
client.getLocalPlayer().getInteracting().getName().equals(FISHING_SPOT)
NativeDecoder.matches(in,inputFormats)
twitter.getHomeTimeline()
clone != null
new AffineTransform(mTextScaleX,mTextSkewX,0,0,1,0)
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
fireBridgeFailed(new Throwable("localBrokerInfo is null"))
System.getProperty(Tokens.FAUNUS_HOME)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
!compareRequestAndSessionTokens(sessionToken,params,userSubject)
new SpannedString(new CustomSpanned(first),false)
greaterThanOrEqualTo(0L)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted,restricted)
context == null
loaded.getLoaded().getConstructor()
createClient(addr.getHost(),addr.getPort())
Exception exception
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),userGroupGroup,ActionKeys.VIEW)
selenium.isVisible("link=Control Panel")
mService.setUidPolicy(UID_A,POLICY_NONE)
create.fetch(meta().getTables(null,getName(),"%",types))
newId > max
getString(R.string.known_issue_wrong_base_directory)
DEFAULT_NUMBER_OF_WRITE_BUFFERS=128
cxt != null
cluster.restartDataNode(dnp,true)
hours >= 2
(mOomMinFreeHigh[5] * 7) / 8
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
regSocial * trusterWeightValue * trusterWeightValue
Simple.of(Boolean.class)
writer.write(getReferenceIndex(instruction))
words.length >= 2
Nd4j.zeros(mb,1,inputLength)
mAvailableSessionKeys == null
selenium.isVisible("link=Control Panel")
_maxTransactionActive=0
stringLiteralExpression(b,l + 1)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
!mWindow.getSharedElementsUseOverlay()
log.severe("Change Set " + toString(false) + " failed.  Error: "+ e.getMessage(),e)
-1
c.toArray()
ReflectUtil.isSubclass(type,Number.class)
createTextAttributesKey("KOTLIN_LABEL")
perfRule.assertDurationAround(duration,4200L)
selenium.isVisible("link=Control Panel")
Thread.sleep(5000)
new ApiHelper.RefreshBlogContentTask(this,WordPress.currentBlog).execute(true)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_FONT_SIZE,false)
selenium.isVisible("link=Control Panel")
users.get(i)
mHandler.handleMessage(msg)
json.optJSONArray("roles")
FRAME_STATS_COUNT=14
dstPath.getPath()
new PopupWindow(mContext)
SelectTimeZonePacificStandardTimeTest.class
config.isAnimateWater()
assertPhoneNumberEqual("123123","0123123",false)
View divider=new View(mContext); 
deltaY > 0
DefaultManagementAgent.class
m.getClass()
assertEquals(13,lm.getFields().size())
sep < 0
DumpUtils.checkDumpPermission(mContext,TAG,pw)
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
actionButton.setRolloverImage(new ImageIcon(ca.getRolloverIcon()).getImage())
assertEquals(1,files.length)
font.getFamily()
mScreenBright=false
referenceDatabase.setObjectQuotingStrategy(originalStrategy)
attribute.getDefinition().getAttributeMarshaller()
((GroovyObject)receiver).getMetaClass() != metaClass
resolver.acquireContentProviderClient(uri)
PyQualifiedExpression.class
DEBUG=true
buildVolumeSettingsPendingIntent(vol)
fr.delete()
? extends T
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isVisible("link=Control Panel")
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends AbstractWalletActivity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK)     SendCoinsActivity.start(this,intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT));     finish();   } } 
y / vz
getParameterValues(request,param)
colors.getResourceId(i,0)
mService.publish(clientId,publishConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,true,callback,clientId))
flux.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
spec.multiPart(controlName,mimeType)
context.getPackageManager().queryIntentActivities(intent,0)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
mavenProject.getName()
PortalUtil.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
mPowerManager.isScreenOn()
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
assertEmptyCommentRelatedResults(searchResult)
HashMap<String,ASTNode>
Exception e
getEffectiveCleartextTrafficPermitted()
Long oldValue=(Long)conn.get(getName()); 
Exception e
assertFalse(predicate.apply(pickleEvent))
intermediateArtifacts.strippedSingleArchitectureBinary()
mGpsListener != null
"Port '" + timeoutSeconds + "' is illegal. Port should not be less than 0"
SelectTimeZonePacificStandardTimeTest.class
mRCStack.remove(rcse)
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_VIDEO_OUTPUT) != PackageManager.PERMISSION_GRANTED
buf.readableBytes()
String.format("Failed to invoke TestWatcher %s for test %s",watcher.getClass().getName(),ReflectionUtils.getFullyQualifiedMethodName(extensionContext.getRequiredTestClass(),extensionContext.getRequiredTestMethod()))
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout)
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
Color.fromRGB(0xABABAB)
SAVE_TRACK_TO_GPX.setModeDefaultValue(ApplicationMode.DEFAULT,false)
Class.forName("java.lang.invoke.CallSite")
resourceList == null
StringUtils.hasLength(secretQuestion) || StringUtils.hasLength(secretAnswer)
caller.isOwner()
MAX_PERCENT_DIFFERENCE=0.1
"Skipped invalid content exclude pattern: " + includeExp
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValue()
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",false))
logger.error("{}",general)
countNewlines(headerFragment) + 1
fault.getDetail() != null
IndexReader reader=IndexReader.openIfChanged(open); 
SessionErrors.isEmpty(resourceRequest)
public void testWithDFS() throws IOException {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractACLCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
chart != null
origin.realComponent().doubleValue() >= other
DIARY_TEXT=1
getPlayerPosition().z
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
new HashMap<>()
className.getValue()
new ArrayList<>()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mVectorState == null && mVectorState.mVPathRenderer == null
requestOptionMethod.toString()
new RedissonSession(id)
WebSettings.setTextSize(WebSettings.TextSize.NORMAL)
twitter1.checkUserListSubscription(id1.screenName,id2.id,userList.getId())
Map<Long,Fields>
pathParts[0] != null
ref.getAssociatedEntity()
mLocalDirtyRect.setEmpty()
UserManager.getUserProvider()
Integer.valueOf(taskIdStr)
name == null
ChromeTraceBuildListenerCloseAction.class
setProgress((int)progress,true)
private Color color; 
STUB_VERSION=21
y < bb.maxY
Set<CommitId>
ClassPropertyFetcher.getStaticPropertyValue(getClazz(),name,type)
selenium.isVisible("link=Control Panel")
slash < 0
new Paint(Paint.ANTI_ALIAS_FLAG)
Loader.loadClass(__logClass)
3
!token.hasVisible && !mClosingApps.contains(token)
Exception e
commitLock.lock()
new Paint(Paint.ANTI_ALIAS_FLAG)
from=PERSISTENT_ALL_CACHES
submittedNode.get("values") != null
IOException e
new Paint(Paint.ANTI_ALIAS_FLAG)
TestEmployeeTable.class.getCanonicalName()
System.nanoTime()
-1
requestUrlregex == null
psiElement instanceof GoFunctionDeclaration
mAlpha == 0
logger.error("InterruptedException during playing a notification sound")
laneOptions[j].equals("slight_right")
from >= to
findDelegate(name)
getLastNonConfigurationInstance() == null
ReflectiveOperationException e
new VectorDrawableAnimatorRT(this)
System.err.print(s)
Exception e
mState == STATE_UNINITIALIZED
file.getCanonicalPath()
set(object,value.intValue())
new AmazfitBipFWHelper(uri,context)
logger.debug(e.getMessage())
showMessage(context.getString(R.string.empty_route_calculated))
AUTH_TYPE_DIGEST.equals(this.authType)
logger.warn("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
gatherDisableActionsLocked(userId)
@NonNull
"com.google.android.talk".equals(callingPackage) || "com.google.android.quicksearchbox".equals(callingPackage)
lhs.getScore()
new ObjectMapper().reader(DatanodeAdminProperties.class)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,TemporaryFileEntryRepositoryDefiner.class,"_portalCapabilityLocator",false)
expected == byte.class
indexNameExpressionResolver().concreteIndices(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
mSlideableView != child
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProessor(new ButtonItemProcessor(this))
new ByteSizeValue(1,ByteSizeUnit.BYTES)
userId <= 0
maxRecents > 0
intermediateArtifacts.strippedSingleArchitectureBinary()
logger.debug("Authentication request failed: " + failed.toString())
return false; 
log.info(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").layer("0",new DenseLayer.Builder().nOut(10).build(),"in1").layer("1",new DenseLayer.Builder().nOut(10).build(),"in2").layer("2",new DenseLayer.Builder().nOut(10).build(),"0").layer("3",new DenseLayer.Builder().nOut(10).build(),"1").layer("4",new DenseLayer.Builder().nOut(10).build(),"1").layer("5",new DenseLayer.Builder().nOut(10).build(),"1").layer("6",new DenseLayer.Builder().nOut(10).build(),"3","4","5")
new BitmapDrawable(holder.getValue())
Thread.sleep(5000)
a.getInteger(attr,DEFAULT_MAX_WIDTH)
selenium.isVisible("link=Control Panel")
typeSettingsProperties.toString()
this.setAutoCommitOnClose(false)
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
selenium.isVisible("link=Control Panel")
FileTime.fromMillis(0)
(line=reader.readLine()) != null
configureAST(classNode,code)
height / 2
mAttributes.getFlags()
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
arguments.length > 0
Integer.valueOf(listenPort)
Threads.sleep(2000)
_training_metrics.auc().maxF1()
IBackupManagerService svc=mService; 
call.getProject()
getDataSource()
runner.addExtensions(session,getLog(),lifecycleExecutor,artifactFactory,localRepository,artifactMetadataSource,artifactCollector,dependencyTreeBuilder,projectBuilder)
type.getConstructor()
result == null
nodeTextIndex > nodeText.getElements().size()
statistics.addGetTimeNano(System.nanoTime() - start)
DEFAULT_MAX_DHCP_RETRIES=2
Integer.valueOf(displayIdStr)
revision.isEmpty()
assertNotNull(message.getPayload() instanceof Collection<?>)
selenium.isVisible("link=Control Panel")
mHandler.obtainMessage(MSG_FINISHED,status,0,currentPackage)
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
TextContainer.class
view.getContext().getPackageName()
new NotifyBuilder(context).whenDone(4)
dos.write(valueBytes.length)
parser.nextInt()
mFrameSlots.remove(slot)
FlowManager.getWritableDatabase(getTable())
proportional
windowEnd=Long.parseLong(cmd.getOptionValue(CLI_WINDOW_SIZE)) * DAY_IN_MS
windowState.isOnScreen() && !windowState.mWinAnimator.mEnterAnimationPending
Arrays.asList("/css/**","/js/**","/images/**","/**/favicon.ico")
world.setBlockMetadataWithNotify(x,y,z,0,3)
dynamicType.getConstructor()
MatchingFilters filters=new MatchingFilters(Module.LUCENE,Target.LUCENE); 
nodeEngine.getService(LockService.SERVICE_NAME)
JMeterUtils.getPropDefault("undo.history.size",25)
RuntimeGlue optionalGlue
mMncStr == null
synchronized (classCache) {   classCache.remove(name); } 
mSupportsSpeed ? 1 : 0
DatabaseDescriptor.getRpcAddress().toString()
ModalityState.any()
DISPLAY_TASKS_PORTRAIT + 2
Executors.newCachedThreadPool()
BaseMessages.getString("Spoon.Dialog.PromptSave.Message")
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
protocolProvider.getProtocolName()
getUriBuilderFactory().expand(uriTemplate)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
expectFailure ? toExecutionFailure(output,error) : toExecutionResult(output,error)
resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'))
executeMethodAndCovertExceptions(httpPatch)
getLogger().error("Unknown classloader [CNFE]: " + loader.getClass().getName())
partialUri.toString()
questions.size()
PFLAG3_ASSIST_BLOCKED=0x100
selenium.isVisible("link=Control Panel")
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
selenium.isVisible("link=Control Panel")
audioManager.getRingerMode()
AnkiDroidApp.deck().setUndoStart(undoName)
UnsafeUtils.get4(_mem,8)
node.isRoot()
set != null
id.errorIfMissing()
i < maxIndex
v.getCreationTime() + timeToLive > now
super.onDetachedFromWindowInternal()
getRawDefinition().contains(" ")
e.getMessage()
GL20.glUniformMatrix4(location,transpose,value)
attachment.getDataUri() == null
WPWebViewActivity.openUrlByUsingMainWPCOMCredentials(context,url)
Utils.deserialize(_boltSer,IBatchBolt.class)
EnumSet.noneOf(AlarmInfoType.class)
url.lastIndexOf(';')
protected abstract BlockBuilder getBlock(); 
length % dictionarySize
getWriter().println("FAILED")
@Nonnull Integer versionId
new JavaPropertyDescriptor(getContainingDeclaration(),getAnnotations(),getVisibility(),isVar(),getName(),getSource())
Log.w(TAG,"Session failed to close due to remote exception",e)
this.constraints.updateFromFactHandle(handle)
this.transactionsRepository.removeTransaction(this.xidTransactionID)
frustum(xmin,xmax,ymin,ymax,zNear,zFar)
Arrays.asList("-d",outputDir)
mUserPaddingEnd >= 0
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
appearance.getFont(attr)
jsonObject.get("error").getAsString()
checkManageUsersPermission("getting profiles related to user " + userId)
moveInputMethodWindowsIfNeededLocked(false)
x509ExtendedTrustManager.checkServerTrusted(chain,authType,engine)
Assert.assertEquals(masterAddress,new InetSocketAddress("RemoteMaster3",defaultPort))
new LeftTuple(f0)
filteredData.addAccessRestrictedResource(absoluteChildAddr)
LOGGER.info(msg.apply())
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0
selenium.isVisible("link=Control Panel")
assertEquals("Incorrect number of fields",4,f.length)
mKeyguardController.isKeyguardLocked()
kryo.readObjectOrNull(input,JobID.class)
BiMap<String,ModContainer>
pluginManifest.setRequiresPlugins(metadata.getRequiredPlugins().toArray(new String[]{}))
paintInnerCircle.setColor(0xddFFFFFF)
pool.dealloc()
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
chain.getEarliestKeyCreationTime() >= vKeyRotationTimestamp
cursor.getString(COLUMN_VALUE)
NORMAL(R.drawable.sense_ok,R.string.normal,R.string.detail_info_normal)
host.getHostText()
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
MAX_PERCENT_DIFFERENCE=0.1
JDBCUtils.safeGetLong(dbResult,"pid")
WebSettings.setTextSize(WebSettings.TextSize.NORMAL)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() != 0
getNullFrame()
layer.type() == Layer.Type.CONVOLUTIONAL
selenium.isVisible("link=Control Panel")
assertEquals(1419,lastLink)
mState.mPivotY == pivotY
needApply=2
new IndexWriter(dir,false,new WhitespaceAnalyzer())
getConfiguration()
mKey.equals(other.mKey)
mHomeStack == null
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
mFinishing && mSupportHardware
serviceDataUuid == null
Math.max(1 << (pulseCount - 1),64)
proxyFactory.createClass().getConstructor()
actionText.equals("Replace with '(true|false|null)'")
TestUtils.randomByte() + 127
LinkMode linkMode
TextComponent.toLegacyText(message)
new ImmutableShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
"Requeuing shutdown because rootScanned: " + rootScanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO
new ObjectMapper().reader(BlockIteratorState.class)
_buildTemplateWithGradle("npm-vuejs-portlet","vuejs-portlet-dependency-management","--dependency-management-enabled","true")
selenium.sendKeys("//input[@id='_86_importFileName']",RuntimeVariables.replace("L:\\portal\\build\\portal-web\\test\\com\\liferay\\portalweb\\portlet\\mediagallery\\dependencies\\Media_Gallery-Selenium.portlet.lar"))
testClass.getName()
ThemeUtils.getDefaultDisplayNameForRootFolder()
analysis.getTypeWithCoercions(windowFunction)
new IllegalStateException("Unable to access to system bundle")
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
Assert.assertEquals(serviceContext.getAssetCategoryIds(),assetCategoryIds)
selenium.isVisible("link=Control Panel")
this.httpHandler.handle(request,response).otherwise(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
response.getHits().getAt(0).field("s_obj2_arr2").value()
new SolrException(2,"Operation requires schema to have a unique key field")
DEBUG=true
new QueryException("Error getting target node for %s\n%s",target,e.getMessage())
Integer.valueOf(taskIdStr)
saveToFile()
enabled=false
getEditedSchemeSettings(myProjectScheme)
MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)
name.equals(currentMethod.getName())
FileInStream.create(status,options.toInStreamOptions(),mContext)
H2O.waitForCloudSize(x,10000)
hour != 0
selenium.isVisible("link=Control Panel")
private final ResponseBodyWriteResultPublisher resultPublisher=new ResponseBodyWriteResultPublisher(); 
slice.getAddress()
_excludeFilePathMatchers.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
IntegerMulNode.class
UserHandle.getCallingUserId()
Object... sources
i < n
location.sourcePath()
Throwable e
new PlainMenuItem(iconId,text,null,needLinks,isUrl,collapsable,collapsableView,onClickListener)
telephony.getLteOnCdmaModeForSubscriber(subId)
WadlTests basicTest=new WadlTests(); 
pod.setId(expectedId)
bitmap == null
item == null
"-n".equals(arg) || "-s".equals(arg)
@Path(PATH_NODE_INDEX_ID)
Preconditions.checkArgument(values.length == 2)
REAL_DRIVER.close()
Trans == TRANSPOSE
Key.class.getCanonicalName()
toPreCompute.size()
parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)
this.setOpaque(false)
this.supervisors
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
TextComponent.toLegacyText(message)
IndexReader.open(store,true)
((SuperColumn)c).cloneMeShallow()
methodExists(altName,fieldNode)
IllegalArgumentException e
ISOChronology.getInstance()
d.setHotspot(x,y)
Math.min(leftLen,rightLen)
DEBUG_DRAG=true
private final ResponseBodyWriteResultPublisher resultPublisher=new ResponseBodyWriteResultPublisher(); 
matchAxisFilter != 0
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
toString()
Preconditions.checkNotNull(worker)
mSrc.getParent()
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
mapper.getTypeFactory().uncheckedSimpleType(UpdateContainerCmdImpl.class)
HashSet<String>
tracesFile.mkdirs()
mAimsicdService.getCellTracker().updateNeighbouringCells()
case 8: 
IllegalArgumentException.class
assertEquals(7,resultList.size())
assertEquals(obj,this.serializer.toObject(this.serializer.toBytes(obj)))
System.getProperty(value,"")
!rrdFile.exists()
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
Set<UUID>
CHECKIN_VERSION=30
mAccessibilityController.isTouchExplorationEnabled()
ViewConfiguration.getDoubleTapTimeout()
{0,7}
selenium.isVisible("link=Control Panel")
!isPartialUpdate
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Site Name")
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200))
undoBarHideListener.onUndoBarHide(mUndoToken == null)
toHeapData(key)
entry.rxBytes == 0 || entry.txBytes == 0
sendMessage(peer,text,null,null,false)
getAllAncestors()
new StepMeta(log,tostepid,tostepname,(StepMetaInterface)toi)
doTestNotIndexed(type)
msbFragmentCollection.getFragmentCollectionId()
Exception exception
PortletLocalServiceUtil.getPortletById(portletId)
getClientConfig().getAddressList()
loaded.getLoaded().getConstructor()
add2(ds[0],yact[0])
metadata.getClass()
Delete_dialogLayout.findViewById(R.id.ll_location)
new GridDrPause(pauseReason,errMsg)
compensationRange.inRange(compensation)
Files.createDirectory(destPath)
CancelledKeyException e
mLteSignalStrength > 63
String url
LOGGER.debug("Error during XML parsing",e2)
JSParameter parameter
this.messageService.fluxPostAuthorizeBeanFindById(2L).contextStart(withUser)
s > 0
serialVersionUID=3256439218229424434L
op.get("address").set("host",host)
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
acceptor.getFilterChain()
readPermission.intern()
v[4]
TypeResolver.resolve(channelTypeUID)
new DifDiffViewer(context,(ContentDiffRequest)request)
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getLibrariesScope()
Boolean.valueOf(getOptional("kylin.query.skip-empty-segments","true"))
(Long)resultList
r - scrollY
msg.offset()
new Long(93)
mAttachInfo == null
mResources.getDrawable(id)
l_Inflater.inflate(R.layout.adv_user_strings_list,parent)
new JMSException("Cannot publish to a deleted Destination: " + destination)
selenium.isVisible("link=Control Panel")
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
Gdx.files.internal(fileName).nameWithoutExtension()
assertEquals(1,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
type.getConstructor()
new Intent()
new StringBuilder(741)
getValidationError() != null
getOrCreateContainer().unlock(dataKey,caller,threadId)
registerConsumer(newUUIDString(),newUUIDString(),owner,attributes)
scheduleRemoveStartingWindow(wtoken)
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
new BoBHash("sha1",SHA1.hex(bobData.getContent()))
new MaxCandidatesCondition(10)
mInterpolator == null
new InputStreamReader(githubResponse)
threads.isEmpty()
Log.setDebugEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
lock.lock()
CentralizedThreadLocal.class
Assert.assertEquals(interop.getFloatField(),copy.getFloatField())
-1
type.getConstructor()
formatter=new DefaultFillFormatter()
mLayoutParams.height >= 0
maxLifetime < 120000
new ArrayList<>()
doTest()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commit()
new AssetUri(uri)
mControllers.get(i)
checkCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS)
GL20.glUniform1(location,toFloatBuffer(v,offset,count))
new ImmutableAssertion(CoreAuthenticationTestUtils.getAuthentication(),list,RegisteredServiceTestUtils.getService(),fromNewLogin)
crashInfo.durationMillis != -1
someConfiguredTargetEvaluated || anyConfiguredTargetDeleted || !dirtiedConfiguredTargetKeys.isEmpty()|| !largestTopLevelKeySetCheckedForConflicts.containsAll(newKeys)
Map<TypeMirror,TypeData>
Exception e
selenium.isVisible("link=Control Panel")
DEBUG=false
getProperties().requestCachingEnabled()
Exception e
fetchSize > 0
mockResultSet.getDouble(1)
loaded.getLoaded().getConstructor()
docTag != null
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
_connector.getResponses("GET //bad/foo?data=1 HTTP/1.0\n\n")
type.getConstructor()
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
getImportGroupId()
dest.writeLong(mSubId)
debugProcess.isAttached()
mAdapter != null
powerFlowResponse == null
JavaModuleType.getModuleType().modifySettingsStep(settingsStep,moduleBuilder)
MockSpecModel.newBuilder().props(ImmutableList.of(makePropModel("param0"),makePropModel("param1")))
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)
-0f
new ArrayList<>()
loaded.getLoaded().getConstructor()
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
ImmutableSortedMap.builder()
outState.putIntegerArrayList(KEY_REQUESTED_PASSWORD,mOldSitesIDs)
selenium.isVisible("link=Control Panel")
settingsResources.get(urlKey)
packet.getFrom().split("/")
hz.getCluster().getLocalMember().isSuperClient()
get(PLUGIN_BUNDLE_PATH)
StringBuffer sb=new StringBuffer(); 
createTextAttributesKey("KOTLIN_EXTENSION_FUNCTION_CALL")
item.getName().matches(name)
maker.getTaggedData(NOTIFICATION_SINCE_CREATE_MILLIS)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
_parms._force_load_balance
weekRange.roll(Calendar.DATE,6)
selenium.isVisible("link=Control Panel")
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
dataFilter != null
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
main.getClasses()
media.getDuration() == 0
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
setDefault.isPrivate()
selenium.isVisible("link=Control Panel")
mWorkerId + BASE_FILE_NUMBER
model.addAttribute("cookie",cookie)
this.getAllowAdaptiveEnergy() == 0
FBUtilities.getLocalAddress()
len < 0 && len > 52
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0
myImplementation.clearAndRecreate()
mService.getConnectionInfo()
mWidth <= 0
String jid
RTPConnectorOutputStream.logPacket(numberOfPackets) && NeomediaActivator.getPacketLogging().isLoggingEnabled(PacketLoggingService.ProtocolName.RTP)
createAndTestKieContainer(gav,createKieBuilder(kfs),null)
logger.warn("Cannot update channel for group member ({})",e.getMessage())
!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY) || !ConnectivityUtils.isInternetWalled(context)
mApplicationObject == null
mState != STATE_FINISHED
this(i18nKey,i18nKey,icon,isEnableable,null); 
loaded.getLoaded().getConstructor()
callbacks.onHardwarePostDraw(canvas)
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key,pnoSettings)
new AssertionError()
masm.movl(AMD64.r13,object)
t.equals(type)
readStayAwakeConditions()
@NonNull
GL20.glUniformMatrix2(location,transpose,value)
log.debug("Can not check and authorize " + user.getName() + " due to "+ e.toString())
walk.release()
connect(monitor)
Nd4j.zeros(mb,1,inputLength)
_propertyComments.isEmpty()
attributes.getFlags()
_("")
JMenuItem langs=new JMenuItem("Language"); 
new int[100]
mVibrator.vibrate(1000L)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(lib)
RolesAdminWebUpgrade.class
verifyPosition(decoder,binary("0011000315A07F440B1D07534554494f20636f6e66696775726174696f6e2064617461206f6b341C"))
Color.rgb888ToColor(color,colorInt)
private static class ToolbarPanel extends JPanel implements Skinnable {   private Image logoBgImage;   public ToolbarPanel(  LayoutManager layoutManager){     super(layoutManager);     loadSkin();   }   public void paintComponent(  Graphics g){     super.paintComponent(g);     if (logoBgImage != null) {       g.drawImage(logoBgImage,(this.getWidth() - logoBgImage.getWidth(null)) / 2,0,null);     }   }   /**   * Reloads bg image.  */   public void loadSkin(){     Image logoBgImage=ImageLoader.getImage(ImageLoader.WINDOW_TITLE_BAR);     if (logoBgImage != null)     logoBgImage=ImageUtils.scaleImageWithinBounds(logoBgImage,80,35);     this.logoBgImage=logoBgImage;   } } 
log.info("mlocking " + file + " with length "+ length)
showNotifications.isNull()
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
telephony.getNetworkTypeForSubscriber(subId)
"Excluding secondary region " + regionToFlush + " - trying to find a different region to refresh files."
mEnded && !pending.hasRemaining()
fraction * (nextValue - prevValue)
origin.realComponent().doubleValue() < other
mService.addOrUpdateNetwork(config)
!_isAtLineEnd(detailAST)
i=3
arguments == null
WAKEUP_STATS=true
createFromResourceStreamThemed(res,value,is,srcName,null,theme)
telephony.getCdmaEriTextForSubscriber(subId)
size * 1.75f
presentation.refreshData(false,false)
baseLanguage == StdLanguages.HTML
rdi != null
connectionManager == null
log.debug("Unexpected exception on closing transaction.  Cause: " + e)
value={XSSHtmlFilter.class}
deletionInfo.memorySize()
Sets.newHashSet()
new AddStringKeyStoreCommand()
valueMono.otherwiseIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
connection.prepareStatement(sql)
logger.info("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
new NeuralNetConfiguration.Builder().momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1e-1,1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).layerFactory(layerFactory).list(2).hiddenLayerSizes(new int[]{3}).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.weightInit(WeightInit.ZERO);       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
_addTestVariant("small.hd","uuid1",200,99)
ft.commit()
Integer.valueOf(stackIdStr)
new ArrayList<>()
settings.readLPw(null)
XMLOutputFactory.newFactory()
in.read(buffer)
new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())
platformVersion < MNC
info.getInfo().getHeadToBranchCommits(myGitRepository).isEmpty()
service.getAllGtasksFromListId(DEFAULT_LIST,false)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
series.Index.toString()
TypeSpec.parse(builder,false)
((PyRemoteSdkAdditionalData)sdk.getSdkAdditionalData()).getRemoteSdkCredentials()
Exception e
lookup.getLookupStart() < offset
resolved.asSnapshot()
RIGHT_ID_T=3534
myConfigFiles.collectValues()
mService.setUidPolicy(UID_A,POLICY_NONE)
menu == null
is(21)
selenium.isVisible("link=Control Panel")
((EventFactHandle)((ObjectVariableContextEntry)context).left).getStartTimestamp()
selenium.isVisible("link=Control Panel")
super("NSIL",0,1); 
input.slices()
maxFileDescriptorCount != -1 || maxFileDescriptorCount < (1 << 16)
this.counterpart.split("/")
tableHasColumn("MicroblogsEntry","receiverUserId")
bundleContext.getBundle().getEntry(uri)
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
mContext.startActivity(intent)
hint != null
selenium.isVisible("link=Control Panel")
worker.setnoData(nod != null ? RangeFactory.create(nod,nod) : null)
docDisplay_.getFileType().isRmd()
builder.timeValueField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
this.getClass()
mContext.startActivity(cantAddAccount)
get(context,R.string.pref_navigation,true)
RowingBoat captain=(RowingBoat)beans.get(ROWING_BEAN); 
super.dispatchTouchEvent(ev)
toJSON(item)
new RebalanceStealInfo(0,(int)Math.random() * 5,partition,Arrays.asList("testStoreName"),(int)Math.random() * 3).toString()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT
DEBUG_LOG_ENABLED=true
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10L)
blogVals.get(26)
data != null
assertRemoveSubsystemResources(servicesA)
holder.setVisible(getLoadingViewId(),visible)
selenium.isVisible("link=Control Panel")
region.getRegionWidth()
maxMergeAtOnce != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
getEnvironment().updateClasspath(Collections.singletonList(testDir))
mMccMncs != null
primTarget && !primTop && ClassHelper.getWrapper(targetType).equals(top)
m.getSize()
JournalStructureUtil.fetchByPrimaryKey(entry.getPrimaryKey())
sm.getString("apr.read.error",Integer.valueOf(-result),Long.valueOf(socket))
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
LISTEN_RADIO_POWER_STATE_CHANGED=0x00400000
getSelectedColorRes()
targetType.getConstructor()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mDropDownAlwaysVisible
target.getDestination()
result1.getMatches()
SCAN_STATUS_COMPLETE=1
new IOException()
mContext.startActivity(cantAddAccount)
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("js/js.translator/testData/box/crossModuleRef"),Pattern.compile("^([^_](.+))\\.kt$"),true)
runner != null
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(2)
IllegalStateException ise
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
Arrays.asList("SUM","MAX","MIN","AVG","TOPHITS","COUNT")
DialogUtils.resolveColor(builder.context,R.attr.md_background_color)
formController.getEventLogger().logEvent(EventLogger.EventTypes.GOOGLE_PLAY_SERVICES_NOT_AVAILABLE,0,null,true)
new GridLayout(0,1)
mOneShot=true
mAnimator.getPhaseY()
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0l
mWidth <= 0
null != m_parallel
_label != null
hz1.getLifecycleService().terminate()
parent instanceof PsiReturnStatement
bukkit.setNote(we.getNote())
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
processEngineConfiguration.getCommandExecutorTxRequiresNew()
mAppOpsManager.checkOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
Bytes.setInt(end_row,(end_time == UNSET ? -1 : (int)getScanEndTimeSeconds()),metric_width)
showDialog(DIALOG_SYNC_ERROR)
loaded.getLoaded().getConstructor()
i < count
Class.forName(ORIGIN_EXECUTABLE).getConstructor()
_typeSettingsProperties.toSortedString()
!mIsRecentsShown || mIsPipFocusedInRecent
getContext()
result == Short.MAX_VALUE
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
query.from(employee).distinct(employee.datefield,employee.timefield)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
keyRestriction != null || keyRestriction.isEquality()
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
r - scrollY
Thread.sleep(1350)
String pattern=this.prefix; 
Math.abs(mLastModified * 1000 - time) >= 86400000
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),true)
project == null
getTimeout()
GBActivitySample activitySample
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
DEBUG=false
new WebApplicationException(serverError(e))
buildData.getJenkinsGitHubURL()
mDataAuthorities == null
launchServer(BookServerSpring.class,true)
checkManageUsersPermission("getting profiles related to user " + userId)
SampleObservables.numberStrings2()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
selenium.isVisible("link=Control Panel")
logger.debug("Creating bloom filter for {} elements and spec {}",numElements,spec)
WebStorage.getInstance().deleteAllDatabases()
mConferenceById.containsKey(callId)
selenium.isVisible("link=Control Panel")
index.getName()
failure != null
DBG=true
src.getPlatformKind() == Kind.Int
memoryOnly
new PebbleMisfitSample(timestamp + i * 60,userId,deviceId,sample & 0xffff)
sharedOptsCount.contains(thread)
new EditSessionBlockChangeDegate(editSession)
contains(permissionChecker,primaryKey,actionId)
mConnector.execute("cryptfs","createnewuserdir",userHandle,path)
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
classes.addAll(classes)
assertEquals(1,yubiKeyAccountRegistry.getAccounts().size())
JournalArticleFinderUtil.countByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,type,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
mHorizontals == null
counter + 2
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle)
failOrAccept(prevAccept,input,reach,t)
fieldType.equals(SupportedFieldType.BROADLEAF_ENUMERATION.toString())
DurationType.getAverageYearMonthType()
getHeight()
SPACE_BEFORE_TYPE_COLON=true
selenium.isVisible("link=Control Panel")
connection.getRequestProperty("User-Agent") != null
NullPointerException.class
rawType.getTypeName()
Object edge
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
values.get("error").getAsString()
assertRestrictBackgroundOff()
params.getSimulatePlatformVersion()
SaslException.class
uiAclHandler.permit(reqContext,op,conf)
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
DefaultModuleRegistry createModuleRegistry(){   return new DefaultModuleRegistry(); } 
new SpannedString(new CustomSpanned(first),false)
factory.getEmbdeddedServletContainer()
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final DefaultHttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
createCurrency("LTC","Litecoin","XLT")
getDelegate().getSupportedCipherSuites()
new IllegalStateException()
logger.warn("Cannot play queue ({})",e.getMessage())
replName != null
!TextUtils.isEmpty(title)
_connector.getResponses("METHOD /f" + ooo + " HTTP/1.0\n\n")
synchronized (classCache) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedWouldBeOverwrittenDetector.getFiles(),"rebase")
scrollLoadingMoreToDefault()
GridHadoopTestUtils.jsonToMap(restCfg)
Boolean.valueOf(resizeableStr)
beansXml.createAlternatives()
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",BIGINT)
origin <= other
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Integer.valueOf(sessionTTL)
blog.getRemoteBlogId()
req.getServletPath()
peekServiceForUserLocked(userId)
conf.getSearchBaseURL()
XmppStringUtils.parseBareAddress(user)
mAuthorities.get(i)
!state.isFrameTypePermitted(FrameType.DATA)
ASHMEM_SIZE=296
info.crashInfo.stackTrace.length() > 10000
queue.removeLast()
val == null
packageManager.getApplicationInfo(packageName,0)
edge.getDownNode()
app().repositories()
Slog.wtf(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
mEnginesHelper.isEngineEnabled(engine)
logger.debug(getName() + " has been started")
new Counter(mOnBatteryTimeBase)
weekRange.roll(Calendar.DATE,6)
lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
config.getReadOnlyBackups()
!tmp.exists() && !tmp.isDirectory()
@NotNull
/**   * {@inheritDoc}  */ public Comparable getTo(){   return Integer.valueOf(to); } 
selenium.isVisible("link=Control Panel")
token.equals(";") && !prevToken.equals("\u00a0")
"Predefined " + pkg + " blocked="+ pblocked+ " unused="+ unused+ " roaming="+ proaming
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
IccUtils.gsmBcdByteToInt((byte)0x8c)
Response.ok()
log.warn("Existing HeaderManager '" + mgr.getName() + "' merged with '"+ value.getName()+ "'")
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
createRenderScript(false)
inputPath=args[1]
responseEncoding == null
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
getChunk(pos)
writer.getSourceFile(1)
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THREADS))
key.equals("image") || key.equals("mapillary")
previousAttribute.compareTo(attribute)
Exception.class
new IdentityHashMap<>(values.length)
permissions+=2
BooleanUtils.isFalse(p.getMetadata().getExcluded())
new DatabaseFormatterOracle()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
uri.toASCIIString()
new InstantPeriodicWorkerTask(errorRunnable,exec,composit)
Math.sqr(x[i] * y[i])
ticker.interrupted()
data.contains("red")
mDisplay.getMetrics(mDisplayMetrics)
preferences.putString("cityAdminLevel",s)
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false)
metadata.getFaces()
log.error("The TGT cannot be renewed beyond the next expiry date: {}." + "This process will not be able to authenticate new SASL connections after that " + "time (for example, it will not be able to authenticate a new connection with a Kafka "+ "Broker).  Ask your system administrator to either increase the "+ "'renew until' time by doing : 'modprinc -maxrenewlife {} ' within "+ "kadmin, or instead, to generate a keytab for {}. Because the TGT's "+ "expiry cannot be further extended by refreshing, exiting refresh thread now.",expiryDate,principal,principal)
replace(searchStr,0,searchStr,replacement,ignoreCase)
_cm_json == null
Exception e
new Paint()
ImmutableSet.of(modules)
selectorBox.getCanvas()
parent instanceof AppWidgetHostView
newId > max
createFromResourceStream(res,value,is,srcName)
new Resource(include,name)
method.getClass()
out.writeLong(sampleCount)
((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(oldChannel,exchange)
i < 50
assertEquals(11,definitions.size())
j / 2 + from
j=1
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
typeSettingsProperties.toString()
cell.recon == null
data != null
new MapProducerCapabilities(false,false,true,true)
AsynchronousCloseException e
near.remove(1)
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin application project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).plugin("Apply the application to add support for building a CLI application","application").compileDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
realm.assertThread()
t.isFreeformTask()
playClientBlock.await(1,TimeUnit.SECONDS)
mySshHandler > 0
portletDataContext.setDataStrategy(portletDataContext.getDataStrategy())
virtualFile != null
logger.error("InfluxDB is not yet connected")
subscriptionMap.get(sub)
telephony.getCdmaEriIconModeForSubscriber(subId)
hyphenationFile.toURL()
mRS.nMeshGetIndices(mID,idxIDs,primitives,vtxCount)
onPackageDisappeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
Integer measureId
dest.writeLong(mSubId)
actionText.equals("Replace with '(true|false|null)'")
IP_FILTER_ENABLED_HTTP_SETTING.getDefault(s)
storeField(field,true,pexp,objectExpressionType,visitor,receiver.getData())
times(7)
flushAfterDuration(entry.getKey(),entry.getValue())
public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
trade.getType().equals("buy")
Mono.currentContext()
activityType == ACTIVITY_TYPE_RECENTS
new ComponentContext(c.getBaseContext())
Thread.sleep(5000)
Integer.valueOf(value)
callbacks.onHardwarePostDraw(canvas)
from >= to
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
telephony.isRadioOn()
index > capacity()
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
info.crashInfo.stackTrace.length() > 10000
mCol != null
className.indexOf("org.openmrs.")
c == Float.class
mWidth - edgeWidth
Math.log(df)
scannedUnit.excludeUnlistedClasses()
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
tnCount=100
prop.getParamName()
SingleModel<V>
user.getSystemId() == null
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
mOuterRadius * 1.0f
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true)
m.isVersioned()
new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
SPACE_BEFORE_EXTEND_COLON=false
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Set<String>
Throwable e
private Label text; 
graphModel.getUndirectedGraph()
listView.getCheckedItemCount()
mock.message(0).outBody(String.class)
JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportSetOnNoOperatorWarning.test")
PsiTreeUtil.getParentOfType(location.getPsiElement(),PyElement.class)
waitOnThreads(f1,f2,f3,f4,f5,f6,f7,f8,f10)
flexItem.getMarginEnd()
meta.getDynamicSearchFieldName()
new ConcurrentHashMap<String,Boolean>(64)
graphics=new QDGraphics(QDGraphics.kDefaultPixelFormat,qdrect)
a.getFloat(attr,0)
mAttributes.getFlags()
builder.timeValueField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
onEvaluateInputViewShown()
process.destroy()
randomNonNegativeLong()
mDrawable.getIntrinsicHeight()
ExecutionSParameters parameters
retryPolicy.onWriteTimeout(wcl,WriteType.from(wte.writeType),wte.received,wte.blockFor,queryRetries)
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
result.getReceipt().getEnergyTotal()
new StringBuilder(561)
child.getElementType() != TokenType.ERROR_ELEMENT
mDataAuthorities == null
activity == null
loaded.getLoaded().getConstructor()
context.getResponse().setBufferSize(byteContent.length)
instrumentation.isRetransformClassesSupported()
Exception ex
GenericCommand<Void>
ALL_ARGUMENTS.OVERLOAD.equal(getOverload())
err != 0
StringBuffer buffer=new StringBuffer(); 
info.getType() & 0x7
parts.length >= 2
mp.getValue()
mContext.sendBroadcast(intent)
shardRouting.recoverySource()
popupWindow.setWidth(menuWidth)
conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_HEARTBEAT_INTERVAL,hbInterval.get(),TimeUnit.MILLISECONDS)
new Location(user.getWorld(),x,y,z)
A args
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
XmppStringUtils.parseBareAddress(userJID)
this.mTextureRegions[pTileIndex].setTextureY(pTextureX)
Integer.valueOf(attrValue)
StringBuffer buffer=new StringBuffer("["); 
new Rect(left,top,bottom,right)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
SettingsBaseActivity.getRoutingStringPropertyName(this,p.getId(),p.getDescription())
w / 2
recordSetVersion1.getVersion()
canvas.saveLayer(mRect.left - rad,mRect.top - rad,mRect.right + rad,mRect.bottom + rad,mLayerPaint,Canvas.HAS_ALPHA_LAYER_SAVE_FLAG)
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
Collections.emptyList()
doThrow(exception).when(fs).move(any(File.class),any(File.class))
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
Thread.sleep(5000)
mValues[7]
Log.w(TAG,"setSubtitleAnchor in MediaPlayer")
valueRelay.hasObservers()
new ArrayList<>()
viewHolder.getItemViewType() == TYPE_EDIT
Throwable ex
RuntimeException e
new IllegalArgumentException()
port == 443 & "https".equals(scheme)
TelephonyManager.getDefault().getPhoneType()
GROUPS=3
g.setClip(offX,y,width - offX,height)
new HashMap<String,Object>(1)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
anyInt()
mLargePaint.setColor(0xff00ff00)
XContentParserUtils.ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_ARRAY,parser::getTokenLocation)
any()
sep < 0
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler))
mAppOpsManager.noteOp(opCode,uid,packageName)
info.gpx != null
mSyncStatus.get(i)
TransactionMetadata::setInActive
XSourcePositionImpl.createOpenFileDescriptor(project,this)
m.getClass()
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
temporaryFolder.newFolder()
instance instanceof IFluidTank
retval=(x != constValue)
mAccessibilityController.isTouchExplorationEnabled()
HashSet<Long>
Iterator<WebPageDetail>
Throwable e
selenium.isVisible("link=Control Panel")
mockRegionInfo.isMetaRegion()
LOGGER.warning(e.toString())
model.getBoundingBox(bbox)
EntryStream.of(1,1,2,null,3,null).nonNullKeys()
mTfs.setPin(mTfs.open(path),false)
size > Message.MAX_SIZE
Thread.sleep(5000)
Exception e
c == Byte.class
doCast(returnType)
this.keycloakSession.users().getUserByServiceAccountClient(clientModel)
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,true,userId)
Simple.of(skylarkType)
new ArgWriter(writer,false)
myModuleBuilder.modifySettingsStep(settingsStep)
si.targetPermissionUid >= 0
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
case 13: 
locationNode.text()
ArrayList<UsageInfo>
Arrays.asList("round_robin","keep_all","keep_last","keep_none","metrics.neo4j","i.e","e.g","fixed_ascending","fixed_descending")
DataStream<OUT>
!mIsRecentsShown || mIsPipFocusedInRecent
jsonModel.update(async)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,accountId,"")
message.isIssueAsynchronousCallbacks()
mJobs.get(i)
mServiceMap.valueAt(userId)
fileIds == null
scopes.stream()
assertContainsParams(CollectionAdminRequest.createCollection("foo",null,1,1).getParams(),ACTION,NAME,ZkStateReader.NUM_SHARDS_PROP,"replicationFactor",ZkStateReader.NRT_REPLICAS)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
connections.get(address)
new RuntimeException()
parcel.writeCharSequence(mViewIdResourceName)
new Paint()
caretOffset > indent
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
processEngineConfiguration.getCommandExecutorTxRequiresNew()
Integer.valueOf(taskIdStr)
i <= 7000L
Build.VERSION.SDK_INT < 23
config.getProperty("peer.p2p.pingInterval",5)
!isConsole && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
outActivity.length > 0
logger.info("Session destroyed")
clients.entrySet()
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
fluentSetters()
context.createTaskContext().addPipelineContext(0,true,true)
selenium.isVisible("link=Control Panel")
reservedWords.contains(codegenProperty.datatypeWithEnum)
createHalf(buffer.length(),init)
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
val > mMaxValue
pm.performDexOpt(pkg,null,false)
mPowerManager.isScreenOn()
assertFalse(removed)
BehaviorSubject<Void>
addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
propExcludedBiomes.getIntList()
e.getCause()
new Runtime()
AnnotatedElementUtils.getAnnotationAttributes(controllerType,annotType)
new InspectionProfileImpl("Base",registrar,InspectionProfileManager.getInstance())
message.getFormattedFields()
selenium.isVisible("link=Control Panel")
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0),false)
15 * 60 * 1000
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
typCategoryStr != null
{4,5,5,11,6,5,7,5,11,11}
length == 0
assertFalse("reuse-address",networkConfig.isReuseAddress())
assertEquals(200,((SoftValueHashMap)catalog.getResourcePool().getFeatureTypeCache()).getHardReferencesCount())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
engine.execute(query).toString()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
DEBUG=true
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
jp.getIntValue()
blockUri.getIdentifier().toString()
rotateAround(axis,angle)
logger.error("Error connecting to Plex",e)
a.getFloat(attr,0)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,false,false)
new MediaController(token)
ParseException e
popupWindow.setWidth(menuWidth)
131 + (USE_OLD_HISTORY ? 1000 : 0)
isVideoScalingModeSupported(mode)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS))
grantAlias == null
" firstActiveTime=" + lastActiveTime
mapRouteInfoMenu.isVisible()
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
blankPosition=obj.getInt("errorPosition")
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
dest.writeLong(mSubId)
mapTypeString=R.string.map_transparency
result.getComponents()
Trans == TRANSPOSE
findDelegate(name)
mDisplayContent.getSplitScreenPrimaryStack()
Loader.loadClass(mName)
!mPhones.contains(phone)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_USERNAME,false)
service.getDomain().getName()
id > holdingColor.length
Schema.builder().addInt32Field("id")
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
Integer.valueOf(patchVersionString)
JSONUtilities.safePut(options,"guessCellValueTypes",true)
MAGIC=0xcafebabe
canvas.drawArc(mArcRect,45,90,true,mPaint)
logger.error("Couldn't read file: " + file)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
Preconditions.checkNotNull(root,"Root value can't be null")
planDetailJson.getPlanName()
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
typCategoryStr != null
interval * 1000
kv.getValue() > minMatch
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mService.setUidPolicy(UID_A,POLICY_NONE)
isCreated()
config.getBroadcasterFactory().lookup(a.broadcaster(),true)
GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,PythonFileType.INSTANCE,DjangoTemplateFileType.INSTANCE,StdFileTypes.XML,StdFileTypes.XHTML,HtmlFileType.INSTANCE)
id=14239
PyNames.COMPARISON_OPERATORS.contains(qexpr.getReferencedName())
tracesFile.mkdirs()
cause.getMessage().startsWith("Relative Redirect detected on")
DEFAULT_PORT=8080
testClass.getName()
selenium.isVisible("link=Control Panel")
uuids.split("/")
bottomLeft.addView(DatabaseBrowserView.VIEW_ID)
assertThat(lastTrade.getFeeAmount()).isNull()
mAttributes.getFlags()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
resolver.stop()
field.getModifiers() == (Modifier.PUBLIC | Modifier.STATIC | Modifier.FINAL)
mService.reconnect()
headers.setValue("Vary")
IndexReader.open(dir,true)
final View view
assertEquals(4,matches.size())
ts.getJobId() == jobid
protected final MethodRedefinitionResolver methodRedefinitionResolver; 
lp.onResolveLayoutDirection(layoutDirection)
StringBuffer buffer=new StringBuffer(); 
mCollapsibleHeight > 0
checkRequiredCaps(Caps.GLSL100,Caps.GLSL150)
resolveSession.getStorageManager().createWeaklyRetainedMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
DeclarationDescriptorVisitorEmptyBodies<Void,StringBuilder>
buildConfigurables()
rj.mapProgress()
getEndPoint().fillInterested(_blockingReadCallback)
sentHeaders.get(0).getNumber() > bestKnownBlock.getNumber()
file == null
Map self
getFragmentManager().beginTransaction().add(android.R.id.content,peopleListFragment)
fileSystem.move(archive,archivedOutputFile(i + 1))
LOG.error(e,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
in.readInt()
nestedTuplesSchemaHelper(128)
selenium.isVisible("link=Control Panel")
new SimpleDateFormat(DATE_FORMAT)
Long.valueOf(attrValue)
src.getPlatformKind() == Kind.Int
HashSet<String>
externalCacheDir.getPath()
MAX_PERCENT_DIFFERENCE=0.1
db.myBatis().openSession(true)
mContext.startActivity(cantAddAccount)
Exception e
new Paint()
type.getConstructor()
id=35
getMyApplication().getSettings().isLastKnownMapLocation()
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)
uniqueConcreteType != null
isGreaterOrEqual(platformVersion,MNC)
event.getY()
selenium.isVisible("link=Control Panel")
writer.write(getReferenceIndex(instruction))
distance * MILES_KILOMETRES_RATIO
selenium.isVisible("link=Control Panel")
VERSION=22
previous.last.compareTo(current.first) > 0
size.height * 5 + 5
LogDelegate.createLog(name)
DISPLAY_TASKS_PORTRAIT + 2
COOKIE_SYNC_MANAGER=true
temp.reAddLeft()
treePathTraverser(tree).expand(tree::isExpanded)
amp*=0.1
isOptionalTagEnd
mReason=REASON_HARDWARE
entity.getNotes()
LOGGER.debug("No file list editor found.")
j < size
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
parts.length > 0
mFocusStack.remove(fse)
inUtc
klass.getDeclaredFields(false,declaredFields)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mService.setUidPolicy(UID_A,POLICY_NONE)
Exception e1
BitmapDrawable.class
SamplingProfiler.newThreadGroupTheadSet(group)
mContext.startActivity(intent)
pvtKeyStore == null
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
new Intent()
baseRevision != null
mContext.startActivity(intent)
matcher.matches()
create().select(t1,t2,t3,t4,t6,t7,t8,t9,tb)
trace.debug(e,"removing server because of exception")
insertComponentImpl(newPublicProjectDto(organizationDto),true,dtoPopulators)
Long.valueOf(value)
scaleImage(scale,viewWidth / 2,viewHeight / 2,false)
!justBootedUp
lp.onResolveLayoutDirection(layoutDirection)
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)
ComputeTaskTimeoutException e
PortalUtil.getSiteDefaultLocale(groupId)
invoiceDao.create(invoice,1,context)
type.getConstructor()
mImm.getInputMethodList()
UserHandle.getCallingUserId()
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
_resourceExistsMap.containsKey(key)
chargeUAh > 0
new Paint(Paint.ANTI_ALIAS_FLAG)
transitiveClosure.setNumberOfPartitions(6)
Thread.sleep(5000)
" firstActiveTime=" + lastActiveTime
assertPhoneNumberEqual("123123","0123123",false)
fill
selenium.isVisible("link=Control Panel")
reply.getJMSCorrelationID()
return dataPack; 
ZeppelinhubRestApiHandler.class
!getViewRootImpl().isInLayout()
new MongoClient()
!failureDesc.contains("14807") && !failureDesc.contains("14883")
sublistsIndices.keySet().parallelStream()
getBinaryTupledSet()
mockBigtableSource.getRange()
Model.getSingleton().getSession().isNewState()
resp.addHeader("Access-Control-Allow-Origin",origin)
Pair<Match,PsiElement>
disabledIf.get()
Math.max(20,myListModel.getSize())
dest.writeLong(mSubId)
mContext.sendStickyBroadcast(mStorageFullIntent)
new Paint(Paint.ANTI_ALIAS_FLAG)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
_typeSettingsProperties.toString()
PaginationTestUtil.of(10,1)
metadata.getFaces()
parts.length > 0
line.startsWith(StringPool.TAB + "protected class ") || line.startsWith(StringPool.TAB + "protected enum ")
BeanFactoryUtils.beanOfType(context.getParent(),ConfigClientProperties.class)
0 < f
Boolean.valueOf(attrValue)
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).otherwiseIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
Class.forName("android.support.v7.widget.Toolbar",false,null)
telephony.isIdle()
mRotation != RotationUtils.getExactRotation(mContext)
Long.valueOf(delay)
t.report(n,UNUSED_PRIVATE_PROPERTY)
independentReserveOrderBook.getBuyOrders()
new IllegalArgumentException("Advertising can't be both connectable and scannable")
mContext.startActivity(intent)
Trans == TRANSPOSE
fileChooser.setSelectedFile(defaultSelection)
new ShareType(shortExplanation,CLIPBOARD)
_connector.getResponses("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
RowMutation rm; 
myPriorityRange.contains(element.getTextRange())
getResultHandler(result).handleResult(exchange,result).otherwise(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
@Override public ResponseImpl headers(Map<String,Property> headers){   this.headers=headers;   return this; } 
Cli.buildCli("presto",Runnable.class)
setDozeInFrontAlphaDelayed(mAodFrontScrimOpacity,30)
Thread.sleep(5000)
verify(safeOutputStreamConsumer,times(7)).stdOutput(anyString())
proxyHTTPPort.getText()
JournalStructureUtil.fetchByPrimaryKey(entry.getPrimaryKey())
EqualityComparer<T>
@NotNull
Math.max(timestamp,dp_to_keep.kv.timestamp())
ONE_MINUS_DST_ALPA(7)
delegatedResourceAccountIndexCapsule.getToAccountsList()
log.info(message)
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED
field.getType()
List<ActivityManager.RecentTaskInfo>
Environment.getRootDirectory()
targetInfo != null
selenium.isVisible("link=Control Panel")
display.getMetrics(dm)
StepVerifier.create(Mono.just(0).then(Mono.just(1)).then(Mono.just(2))).expectNext(2).expectComplete()
sortByDate(false)
mSearchInput.setFocusable(focusable)
telephony.getCdmaEriTextForSubscriber(subId)
popupWindow.setWidth(menuWidth)
new TreeToBuffer(buffer,0,true,false,false,true,null){   @Override protected boolean shouldSkipNode(  TreeElement node){     return super.shouldSkipNode(node) || node instanceof PsiErrorElement || node instanceof PsiComment|| node instanceof LeafPsiElement && StringUtil.isEmptyOrSpaces(node.getText()) || node instanceof OuterLanguageElement;   }   @Override protected boolean showEmptyChildren(){     return false;   } } 
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
new RandomIndexWriter(random(),dir)
Optional.of(((IndicesRequest)message).indices())
Math.min(leftLen,rightLen)
getLogger().warn("\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() + "' was invalid or not found on any repositories.\n"+ "\tThis may not be supported by future versions of Maven and should be corrected as soon as possible.\n"+ "\tError given: "+ e.getMessage()+ "\n")
offset >= editor.getDocument().getTextLength()
put(v)
Integer.valueOf(attrValue)
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).contextStart(withAdmin)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.isVisible("link=Control Panel")
mCurrentVrService == null
tile.getUrn().getResourceName()
cache.localPeek(1,CachePeekMode.ONHEAP)
layerInput.slices()
mMncStr == null
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
TelephonyManager.getDefault().getPhoneType()
intermediateArtifacts.strippedSingleArchitectureBinary()
logger.info("AUTHENTICATE")
block.getEnchantPower(world,x,y,z)
data == null
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger
checkpointPath.getPath()
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules())
final IndexReader r=w.getReader(); 
exists
config.setTenantIsolationEnabled(true)
(UnsubscribeForm)form
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
new IndexWriter(startDir,new WhitespaceAnalyzer(),true)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
this.thrown.equals(IllegalStateException.class)
mContext.startActivity(intent)
StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
new JarFile(mArchiveSourcePath)
generateRandomStringArray(20,10,false)
AbstractMethodError e
value.doubleValue()
selenium.isVisible("link=Control Panel")
mService.mAppOps.checkOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
clusterService().localNode().name()
getEditedSchemeSettings(myProjectScheme)
layout.setRefreshingLabel(label)
mAttributes.getFlags()
@NotNull
model.getBoundingBox(bbox)
assertEquals(mock.getExchanges().get(0).getIn().getBody(String.class),"val-1")
m - 5
String.class
softClassCache.put(beanClass,results)
!file.getMimetype().equals("DIR")
mSyncStatus.get(i)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
LOGGER.debug("Could not parse URL",nfe)
response.header("location")
modelName + "." + expressionEntry.getKey()
(Integer)criteria.uniqueResult()
selenium.isVisible("link=Control Panel")
new TextPaint(Paint.ANTI_ALIAS_FLAG)
SCAN_STATUS_PARTIAL=0
mContext.startActivity(intent)
Float.parseFloat(value)
ev.getY() < mQsContainer.getBottom()
tw.release()
protocolProvider.getProtocolName()
clean.setGroup(VERIFICATION_GROUP)
dest.writeLong(mSubId)
parsedResult.getSqlType()
subjectAlternativeNameDomains != null
mHidProfile.isProfileReady()
log.warn("Double activation of navigator context")
r.curApp != null
getHeight()
timeout=600000
ams.mContext.createPackageContext(appInfo.packageName,0)
metaData.getColumnName(1)
from("direct:start").aggregator().header("id").batchTimeout(2000L)
telephony.getForbiddenPlmns(subId,appType)
entry.getValue().getIdentifiesControllerService() != null
query.components().toArray(new String[0])
new NullPointerException("the ast is null")
counter >= max
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
args.length < 1
StringBuffer buffer=new StringBuffer(); 
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
type.getConstructor()
List<String>
verify(issueUpdater).setSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).expectComplete()
Long.valueOf(attrValue)
dynamicType.getLoaded().getConstructor()
Entry<String,V>
enabled=true
Long.valueOf(str)
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
!KotlinDetector.isKotlinType(ctor.getDeclaringClass())
assertEquals(3,repos.length)
buildPages.getTypes()
_typeSettingsProperties.toString()
getActivity()
typeLength == 0
writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
logger.info("Parsing Dep: " + filePath)
backUpDirs.length <= 1
public TokenStream create(Reader input){   return new CharStreamAwareWhitespaceTokenizer((CharStream)input); } 
loaded.getLoaded().getConstructor()
expandableView.getActualHeight()
dbManager.getHeadBlockId()
record == null
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
selenium.isVisible("link=Control Panel")
view.getClusteredLayerInDegree(absNode)
expand("serializedforms/CronTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
v != null
ContactAccessor.getInstance().getNumbersForThreadSearchFilter(filter,context)
waitOnThreads(f1,f2,f3,f4,f5,f6,f7,f8,f10)
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
TelephonyManager.getDefault().getPhoneType()
matchAxisFilter != 0
stack.isVisible() && (imeOnBottom || isDockedOnBottom)
idfr.identify(this.getClass().getResourceAsStream(tokens[0]))
(InvocationTargetException)wrapped
req.getContentLength()
super.dispatchTouchEvent(ev)
Files.newOutputStream(self,CREATE,APPEND)
currentResponse.getAuthentication() != null
mMccMncs != null
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection)
_numAlphaFactors=20
Exception e
numberOfPopulateTest=10000
new OneRun(50.0780,9.1570,49.5860,9.9750,91715,1299)
logger.error("Failed to load config file {}, falling back on default config")
receiverUserId != mCurrentUserId
mConfig.hasTransposedNavBar
new Bitmap(nativeInt,isMutable,null,density)
defineClass("org.apache.catalina.loader.JdbcLeakPrevention",classBytes,0,offset)
x + leftSmallWidth + rightFullWidth
assertEquals(serdeWrite.getCodec().toString(),CodecFactory.xzCodec(9).toString())
sep < 0
log.debugf("Duplicate @At mapping ? path=" + path)
moveCursorToRow(pac.getRow())
new ConditionalWriteAction(){   @Override protected byte[] checkCondition(){     if (getDeviceInfo() != null && getDeviceInfo().isAmazFit()) {       return null;     }     int location=MiBandCoordinator.getWearLocation(getDevice().getAddress());     return new byte[]{MiBandService.COMMAND_SET_WEAR_LOCATION,(byte)location};   } } 
logoutConfigurer != null
capacity > 1 << 30
metadata.getFaceRectangles()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
outputArtifact != null
info != null
nextTokenIsFast(b,IDENTIFIER)
mConferenceById.containsKey(callId)
mCaCerts != null || mCaCerts.length > 0
blockIntervalAgo.getDifficultyTarget()
/**   * {@inheritDoc}  */ @Override public Object clone(){   DoubleProperty prop=(DoubleProperty)super.clone();   prop.value=value;   return prop; } 
crashInfo.durationMillis != -1
private final String key; 
new FileOutputStream(newState.getFileDescriptor())
selenium.isVisible("link=Control Panel")
objectManager.markUnusedObject(this)
Map<List<Object>,Object>
calendar.getTime()
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
parsedVersion != null
selenium.isVisible("link=Control Panel")
Iterable<SkyKey>
new WorldPoint(2783,3210,0)
selUser.getUserId()
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
in1 >= 0x7e
rowsRet <= 0
findTearDownMethod(psiClass)
selenium.isVisible("link=Control Panel")
this.seperator
timeout=30000
this.gatewayDelegate.setRequestChannel(replyChannel)
mUserManager.isUserRunning(userHandle)
DirectMessage.constructDirectMessages(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
this.messageService.monoPostAuthorizeBeanFindById(2L).contextStart(withUser)
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDw,unrotDh)
grantResults[0] == PackageManager.PERMISSION_GRANTED
word2Vec.setSentenceIter(iterator)
n.getNodeData().x()
this.seperator=seperator
safeClose(channel)
setZrtpEncryptionToDescription(mediaType,description,null)
selenium.isVisible("link=Control Panel")
IOException err
DEBUG=true
new OptionValue<>(true)
data.limit()
Thread.sleep(5000)
i <= repeatCount
LOG.warn("Unable to close socket selector",ex)
bucket.exists()
mFlexItem.setWrapBefore(isChecked)
mPowerManager.isScreenOn()
Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,false)
ProcessExecutor.class
cs[0].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
retriever.captureFrame()
newHttpConnection(this)
analysis.getTypeWithCoercions(aggregate)
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)
loaded.getLoaded().getConstructor()
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
mBoundServices.isEmpty()
DDMServiceUpgrade.class
or.isYNegated()
y - r
cache.localPeek(1,CachePeekMode.ONHEAP)
lastUpdateTime2 > lastUpdateTime
Preconditions.checkState(hasInstanceType())
VERSION=41
matcher.group(2)
results.size() == K
new StringBundler(8)
HashCodeBuilder.class
sourceWidth > 0
Boolean.valueOf(request.getParameter("notify"))
new IndexWriter(dir,new WhitespaceAnalyzer(),create)
realm.assertThread()
sentiment.getPolarity()
uri.indexOf("http://") == -1
i <= repeatCount
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",10)
readStayAwakeConditions()
mRemote.transact(GRANT_URI_PERMISSION_TRANSACTION,data,reply,0)
createTestBlockCapsule(dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,blockCapsule3.getBlockId().getByteString(),addressToProvateKeys)
!mMediaPlayer.isPlaying()
twitter.getHomeTimeline()
NUMBER_OF_IDS_PER_THREAD=400001
from > to
mCurrIconRow != null & mCurrIconRow.isVisible()
mListener.onInputUpdated(inputId)
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,50)
dynamicType.getConstructor()
command.getId()
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
next.handle(request).map(responseProcessor)
assertEquals(2,props.getConfigPathPatterns().length,2)
DataStream<OUT>
((StringLiteral)literal).getSlice()
LOGICAL_TYPE_TIMESTAMP_MILLIS.equals(logicalName)
64 * 1024
selenium.isVisible("link=Control Panel")
new CompositeException(e,t)
provider == null
loaded.getLoaded().getConstructor()
typeSettingsProperties.toString()
T
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
gatherWriteActionStatistics && myWriteActionsStack.isEmpty()
mHidProfile.isProfileReady()
delaySoFar > mReEnableDelayMillis
now - 888888
new HttpOpenListener(new ByteBufferSlicePool(BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,8192,8192 * 8192))
Boolean.valueOf(System.getProperty("cassandra.consistent.rangemovement","true"))
Thread.sleep(5000)
bicyclePriorityValues.put("bridleway",1d)
fromCal.get(Calendar.ERA)
error("Unable to connect due to unrecognised server certificate")
acceptor.getFilterChain()
out.write(bytes,0,len)
actionAdapter.execute(null,null,null,null)
config.enterpriseConfig != null
fragmentEntryPersistence.filterFindByG_FCI(groupId,fragmentCollectionId,start,end)
status().isMovedTemporarily()
type.getConstructor()
cSet.getConcept()
BufferUtil.zeroBuffer(128)
mHorizontals == null
selenium.isVisible("link=Control Panel")
myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),project)
outputRowMeta.mergeRowMeta(data.fileRowMeta[i])
String.class
selenium.isVisible("link=Control Panel")
in.readInt()
flags_=0
logger_.error("Repair session " + future.session.getName() + " failed.",e)
pMotionEvent.getX(1)
GL20.glGetVertexAttrib(index,pname,params)
commandExecutor.evalReadAsync(getName(),codec,EVAL_GET_TTL,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "if value == false then " + "return nil; "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return nil; "+ "end; "+ "return val; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
selenium.isVisible("link=Control Panel")
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
getLocationEnabled()
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
v.getTableId() == LobStorageFrontend.TABLE_RESULT
mNavigationBarView.inScreenPinning()
Log.e(TAG,"readStaticField(SYSTEM_SERVICE_MAP) from %s fail",e,baseContext.getClass())
expandableView.getActualHeight()
new AndroidInstrumentationInfoProvider(targetApk,instrumentationApk)
mQsContainer.getLayoutParams()
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
field.getRawType()
SDK_INT >= JELLY_BEAN
deleteTaskView.animate().setDuration(300).scaleX(0)
selenium.isVisible("link=Control Panel")
objective != null
uri == null
localExclude != null
replace(wmlTemplateString,0,new StringBuilder(),mappings)
t.join(10)
private Label text; 
_sumsqe / _count
Log.d(tag,msg,tr)
AvroKey<GenericRecord>
file == null
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment)
new INodeDirectory(oldinode)
MetadataInstrument2.class.getName()
resources.getDimension(R.dimen.close_handle_height)
new NotificationCompat.BigTextStyle().bigText(errorMessage)
accountHandle.getComponentName().toString()
mPolicy != null
logger.getLogger().warn("Shut down master")
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
isPathClassLoaderName(classloaderName)
child.resetResolvedLayoutDirection()
cursor != null
selenium.isVisible("link=Control Panel")
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),OsProbe.getInstance().osStats(),ProcessProbe.getInstance().processStats(),JvmStats.jvmStats(),new ThreadPoolStats(threadPoolStats),new FsInfo(0,pathInfo),null,null,null,null,null)
ServiceLoader.load(MasterFactory.class)
faultSerialVersionUID.equals(FaultSerialVersionUID.TIMESTAMP)
new BranchedDataException(e)
mConnector.execute("volume","format",vol.id)
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
Numeric.encodeQuantity(filterId)
Value emitArrayEquals(Kind kind,Value array1,Value array2,Value length); 
/**   * Represents a dependency on another Eclipse project.  */ public interface EclipseProjectDependency extends ProjectDependency, EclipseDependency {   /**   * Returns the target of this dependency.  * @return The target project, or null for a dependency on a different build within a composite.  */   HierarchicalEclipseProject getTargetProject();   /**   * Returns the project directory of the target eclipse project.  * @return The target project directory, never null.  * @since 2.14  */   @Incubating File getTargetProjectDirectory();   /**   * Returns the path to use for this project dependency.  */   String getPath();   /**   * Marks this dependency as exported.  * @return whether this dependency needs to be exported.  * @since 2.5  */   boolean isExported(); } 
targetState == STATE_EXPANDED
mEncoder.swithToSoftEncoder()
mDarkIntensity == DARK_INTENSITY_NOT_SET
new SolrException(2,"Operation requires schema to have a unique key field")
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
viewGroup == null
tableIdx == table.array.length()
POOL_LIMIT=12
SmackConfiguration.getVersionNumber()
AuditManagerImpl.class
mService.setUidPolicy(UID_A,POLICY_NONE)
p == null
result("success")
msg.getMessageId().setDataLocator(id)
mergeWithParentCategory && !oldCategoryId.equals(parentCategoryId)
mAuthorities.get(i)
new RuntimeException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
BASIC_CONSTRAINS(org.bouncycastle.asn1.x509.Extension.basicConstraints)
DBSSchema.class.isAssignableFrom(childType)
model.getProductOptionValidationStrategyType()
mAssetManager.openNonAssetFd(mAssetName)
future.get(10,TimeUnit.SECONDS)
indexMap || indexAddress || indexTransport
public static PhotoContent createRemotePhoto(FileReference reference,int w,int h,int duration,FastThumb fastThumb){   return new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration)))); } 
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
from >= to
new LinkedFileViewModel(linkedFile,entry,databaseContext,taskExecutor,dialogService)
fileLock != null
log.e(LOG_TAG,"ACRA processName='" + processName + "'")
data.contains("siamese")
mProgressDialog != null
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
showTetheredNotification(com.android.internal.R.drawable.stat_sys_tether_wifi)
private CharSequence mViewIdResourceName; 
-1
Math.sin(Math.PI / 8)
1
collectJSVariables(clazz,candidates,false,false,true,true)
constraint.hasFilter()
Exception e
bs.getDependsOnGroups()
BuildData buildData=getBuildData(); 
mNetAttributes[type].mLastState == state
mJobs.get(i)
selenium.isVisible("link=Control Panel")
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
UResultOperator.class
c.getLocalDeletionTime() <= gcBefore
/**   * set if this item is enabled  * @param enabled true if this item is enabled  * @return  */ public T withEnabled(boolean enabled){   this.mEnabled=enabled;   return (T)this; } 
aClass != null
selenium.isVisible("link=Control Panel")
IBackupManagerService svc=mService; 
createQuery(jpaqlString,resultClass)
odbcUrl.indexOf(project)
pair.getSecond() > best.getSecond()
tag_names.getIdAsync("dc")
old + 26
tracesFile.mkdirs()
CompletableFuture<Boolean>
LOG.error("OpenTracing: Failed to capture tracing data",t)
unresolvedReferenceDiagnostic.getReference()
AndroidExcludedRefs.createAndroidDefaults()
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
(Long)o
projectName.equals(executable.getProjectName())
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
valid
myFirstComponent.getPreferredSize()
Preconditions.checkState(subscriptionId != null || !failOnMissingSubscription)
findDelegate(name)
Arrays.asList("com.google.errorprone.MaskedClassLoader$MaskedFileManager","com.google.devtools.build.buildjar.javac.BlazeJavacMain$ClassloaderMaskingFileManager","com.google.devtools.build.java.turbine.javac.JavacTurbineCompiler$ClassloaderMaskingFileManager","org.netbeans.modules.java.source.parsing.ProxyFileManager","com.sun.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager")
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
Network.connectToServer("localhost",5110,5000)
zkController.getZkStateReader().getReplicaProps(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),props.getStr(ZkStateReader.CORE_NAME_PROP))
final Exception lastException
native_get_videoeditor_export_profile(vidCodec)
indexBuf.getData().capacity()
inLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
mService.factoryReset()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent)
days >= 2
4 * width * height
Futures.transformAsync(actionInfoFuture,actionInfo -> uploadInputs(rule.getBuildTarget(),actionInfo))
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
MessagingException me
DatabaseDescriptor.getRpcAddress().toString()
LOG.debug("data:" + StringUtils.byteToHexString(data))
null != entity
isCreated()
isDismissed
annotationHolder.createErrorAnnotation(expression,message)
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,true)
selenium.isVisible("link=Control Panel")
needApply=2
iterator.getStart() != offset
i < 10
seriesInfo.Index.toString()
getDialog()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
i < maxIndex
level < 0
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
com.android.internal.util.DumpUtils.checkDumpPermission(mAm.mContext,TAG,pw)
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
new JsonUt8Writer(sink)
mHandler.removeCallbacks(pae)
fluidOil.getBlockID()
rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1
b.append(x)
_content=nc
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_ENABLED,0,null,true)
selenium.isVisible("link=Control Panel")
coloring.length() > 0
Thread.sleep(1200)
getServerManager().getProperties().contains("meiligao.server")
log.warn("Problem in JSR223 script ",e)
Gdx.files.internal(fileName).nameWithoutExtension()
Layout.class
prefsWriter.commit()
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_REMOVED,null,false,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
MAX_OPEN_TRANSACTIONS=0x400
CollectionUtils.filter(sources,secondaryRoutes,new Spec<File>(){   @Override public boolean isSatisfiedBy(  File file){     return file.getName().equals("routes");   } } )
Exception ex
field.getElementType()
threadHandler.get().post(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
bulkSize > NO_BULK_REQUESTS
username != null
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
MutableLongValue value
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false)
data == null
((SQLDataSource)dataSource).getSQLDialect().storesQuotedCase()
new IllegalArgumentException("Advertising can't be both connectable and scannable")
state.mBitmap == null
parameterTokens.add(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
attributes.getFlags()
um.getUsers()
Thread.sleep(100)
Long.valueOf(deadline)
driverPropertySource.getProperties()
Assert.isNotNull(fl,"Cannot find root deserializers")
order.getFilledSize()
/**   * set if this item is selected  * @param selected true if this item is selected  * @return  */ @Override public T withSetSelected(boolean selected){   this.mSelected=selected;   return (T)this; } 
builder120.build()
speed < 30
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
type=500
KeycloakHttpServerAuthenticationMechanismFactory.class
Float.valueOf(strings[i])
data.lineBuffer.size() <= meta.getNrFooterLines()
mQsContainer.getX()
addRewrite(0x0B,ProtocolConstants.Direction.TO_SERVER,true)
new OwnCloudVersion(0x040001)
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection)
applyCurrentState()
UndertowLogger.ROOT_LOGGER.debug("JDK9 ALPN not supported",e)
LOGGER.lifecycle(msg.apply())
mRingingCallState != other.mRingingCallState
client.get().uri("/").exchange().expectStatus().isOk().expectBody()
mCurrIconRow != null & mCurrIconRow.isVisible()
onlyRemoveOutdatedData
return CTR; 
!cncFile.exists()
classMapper.lookupName(wrap.testPlan.getClass())
IBackupManagerService svc=mService; 
Iterable<Symbol>
Environment.getRootDirectory()
SharingEntryActionKey::getBitwiseVaue
batchConvertMergedAnomalyBean2DTO(list)
dockedBounds.left - adjustment
assertTrue(mDisabled.hasFocus())
tableHasColumn(tableName,columnName)
CookieDecoder.decode(aCookieHeader)
getDatabaseSchema() != null
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
engine == null
msg.getRecipients(Message.RecipientType.TO)
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
resultSetView.getControl()
addVault(file.toPath(),false)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
THUMBNAIL_APP_TRANSITION_DURATION=300
assertEquals(23,sqlStatements.get(2).getLineNumber())
(UndeclaredThrowableException)wrapped
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetdata,mergedManifest,keystore)
maxCards[i]=numWords
new RuntimeException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
Timber.e(e,errorMsg)
screenX != 0 && screenY != 0
dependency.getManfiestEntry("Export-Service")
getProject()
logger.warn("Could not fetch {} result for type: {} and filter: {}. Using default value '0': {}",requestedKey,entriesType,entriesFilter,ex.getMessage(),ex)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_GOOGLE_ACCOUNT,false)
getSupportActionBar() != null
mPowerManager.isScreenOn()
LocaleUtil.getDefault()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
deltaoNext.mmul(Nd4j.diag(wOO))
selectionArgs[1]
PART_COUNT=800
verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))))
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
String[]
assertMockEndpointsSatisfied()
form.getMultipartRequestHandler()
notNullValue()
realm.assertThread()
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel())
assertPhoneNumberEqual("123123","0123123",false)
getValue(activity.getExtraData(),"title",kbTemplate.getTitle())
new FileNotFoundException()
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
public String getFileSize(){   return fileSize; } 
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[buildfile]","includes = //java/com/facebook/defaultIncludeFile","[project]","check_package_boundary = false","temp_files = ''")
IOException e
shuffleWithInexistingUuids(project2.uuid(),project1.uuid())
ColorResources.getColor("tabbedPaneBorderHighlight")
thread.sleep(10)
_typeSettingsProperties.toString()
valueMono.otherwiseIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
written.incrementAndGet()
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
logger.debug("myq securityToken: {}",securityToken)
mContext.sendBroadcast(intent)
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getParentGroupId(),assetTagName)
selenium.isVisible("link=Control Panel")
String... selected
retval=(x == constValue + constValue2)
jid.split("/")
receiverType.getSetterMethod(setter)
context.getString(R.string.history_attach_added,item,attachmentName)
telephony.getCdmaEriIconModeForSubscriber(subId)
appName != null
previousState.getPrevCall()
Sets.difference(liveQueries,queryIdsSnapshot)
new UnsupportedOperationException("refresh token invalidation cannot be serialized with version [" + out.getVersion() + "]")
commit.getAuthorTime()
client.srandmember(key)
SCAN_STATUS_PARTIAL=0
vertex.vertexID() == newVertex.vertexID()
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
logoutPost != null
flexItem.getMarginStart()
StringBuffer pattern=new StringBuffer(this.prefix); 
id=15803
CharSequence message
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
IllegalStateException e
handshake.getProcolVersion()
1533529947843L + 3000
new IllegalArgumentException()
mMncStr == null
value.toLowerCase().contains(constraintLowerCase)
buffer.setFlags(C.BUFFER_FLAG_DECODE_ONLY)
Values.UPGRADE.equalsIgnoreCase(connection)
(Long)countObj
Integer.valueOf(stackIdStr)
xam.getStudentNumber()
mContext.sendStickyBroadcast(mStorageFullIntent)
162 + (USE_OLD_HISTORY ? 1000 : 0)
RESULT_TIMEOUT=1500
state == _JavaDocLexer.COMMENT_DATA
callbacks.onHardwarePostDraw(canvas)
private Exception maybeAttachBuildRuleNameToException(@Nonnull Exception thrown){   if ((thrown instanceof HumanReadableException) || (thrown instanceof InterruptedException)) {     return thrown;   }   String message=thrown.getMessage();   if (message != null && message.contains(rule.toString())) {     return thrown;   }   return new RuntimeException(getErrorMessageIncludingBuildRule(thrown),thrown); } 
Map<String,LocalInspectionToolWrapper>
capacity > 1 << 30
onFocusChange(mRefreshButton,false)
asyncProcessor.execute()
index=0
isBigDecCategory(typeRe)
mHandler == null
assertEquals(5,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())
Object item
UniqueId.forEngine("engine",engineId)
tempPinnedTaskBounds != null
oldConfig.densityDpi != newConfig.densityDpi
targetDirectory.directory("unwritable")
new DuplicateOrganizationException()
disableForUser(what,token,pkg,mCurrentUserId)
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),ScaleType.CENTER_CROP)
soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)
loading.dismiss()
DateFormat.getDateFormat(context)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
new int[684]
mWidth - glowWidth
apex.installPackage(mResolvedBaseFile.toString())
elementToHighlight == null
db.needUpgrade(8)
res - _bias
ret.setComplete(response)
this.profiles(System.getProperty(VERSION,DEFAULT_VERSION))
clazz.getSimpleName()
sourceSet.getClasses()
getMeasuredHeight()
this.params.getBlock()
recipient.getExpireMessages() * 1000
Simple.of(value.getClass())
TCN_RECOMMENDED_PV=6
TfsShell.convertMsToDate(files[2].getCreationTimeMs())
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
query(new JSONPointer(jsonPointer))
logger.info("Mlock successfull")
Long.valueOf(val)
is(expectedSql)
selenium.isVisible("link=Control Panel")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
row.setBackground(getResources().getDrawable(R.drawable.list_highlight_bg))
LOGGER.lifecycle(msg.apply())
string.getName()
case NORMAL: 
AbstractMethodError e
verify(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
WriteReplyToCommentActivity.ACTION_NOTIFICATION_REPLY.equals(getIntent().getAction())
accountHandle.getComponentName().toString()
velocityX / flingThreshold
info.getIccSerialNumberForSubscriber(subId)
fileSystem.move(backup,file)
aCheckIn("foo/bar.baz")
new StringBuilder(254)
jmsConfig.getReconnectPercentOfMax()
version > 0
baseRequest.getResponse().isWriting()
(pnrows-=(espc[_pcidx + 1] - espc[_pcidx])) > 0
contains(connection.getRedisClient().getAddr())
new HashSet<>()
ZKMetadataProvider.getRealtimeTableConfig(propertyStore,tableName)
file == null
new NullOutputOperatorFactory(operatorId,sourceType)
mApplicationObject == null
new ArrayList<>()
dest.writeLong(mTxPower)
manager != null
WorkflowDefinitionLinkLocalServiceUtil.getDefaultWorkflowDefinitionLink(company.getCompanyId(),assetClassName,0)
PULL_TIME=250
session.executePost(urlPath,_parameters,responseHandler)
out.write(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
view.getClusteredLayerInDegree(absNode)
this.httpHandler.handle(req,resp).otherwise(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
selenium.isVisible("link=Control Panel")
layer.mDrawable == null
hasFocus() && showClearButton
loaded.getLoaded().getConstructor()
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(false)
hook.startPlay(program)
mapView.getMapOrientation()
create().select(t1,t2,t3,t4,t6,t7,t8,t9,tb)
new LeftTuple(f0)
-1
Integer.valueOf(taskIdStr)
params[2]
return true; 
word=START_WORD
mLastAnnouncementWasQuickSettings && !mTracking
/**   * Closed connections.   */ @GridToStringExclude private final LongAdder closed=new LongAdder(); 
assertThat(registration.getScopes()).containsOnly("openid","profile","email","address","phone")
keySyncOperation.contains(targetKey)
a.getCanonicalName()
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
Integer.valueOf(this.getOptional("kylin.server.auth-user-cache.max-entries","100"))
mPlayer.getCurrentPosition() * 1000
verify(runSvn("status"),"","--- Changelist 'newOne':","A + c.txt","D a.txt")
myViewingPanel.requestFocusInWindow()
StringUtils.isNumeric(query)
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
callTimeout=5000
NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST=false
Thread.sleep(5000)
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
isCreated()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
type.getName()
data[terminationPos + 1] == (byte)0
showNotifications.isNull()
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
Newer
Log.wtf(mTag,"Adjusting remote volume without a controller!")
selenium.isVisible("link=Control Panel")
public static final Object WS_EXTENSIONS_HEADER_NAME_LOWER=WS_EXTENSIONS_HEADER_NAME.toLowerCase(Locale.ENGLISH); 
dependency.getManfiestEntry("Export-Service")
getDelegate().getSupportedCipherSuites()
resources.getDimension(R.dimen.close_handle_height)
checkValidHandle(muMMatrixHandle,null)
synchronized (classCache) {   return (Class[])classCache.values().toArray(new Class[0]); } 
DEBUG=true
m.getSize()
shareByLinkAllowEditing.isChecked()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).description(message)
app.getSettings().AVOID_UNPAVED_ROADS.get()
artifact.getRootRelativePath()
ParamUtil.getInteger(actionRequest,"type")
public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"10:34: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"value")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS" + "/PARAMETER_DEF[@text='value']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"other")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
thread.sleep(10)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
string.toLowerCase()
logger.warn("Cannot add group member ({})",e.getMessage())
UIUtils.createPlaceholder(panel,2)
ChannelBuffers.copiedBuffer(request.getByteData())
disableBluetoothContactSharing
mConnector.executeForList("volume","list")
LOGGER.warn("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
Long.valueOf(value)
keyed=false
!mDreamsEnabledByDefaultConfig
Exception e
((ChannelProgressivePromise)promise).setProgress(progress,-1)
tracker.timeUpperBound=500
testClass.getName()
formatTime(scanWifiLockOnTime / 1000)
qs[0]
mockResultSet.getDouble(1)
@Converter
result.add(max)
sendMessage() == false
fluentSetters()
listener.equals(pongMessageHandler)
selenium.isVisible("link=Control Panel")
JavaCompletionData.addExpectedTypeMembers(parameters,result,position)
private final ReplayingDecoderBuffer replayable=new ReplayingDecoderBuffer(); 
new PullImageCmdImpl(NOP_EXEC,"")
RuntimeVersion.isAtLeast12()
findDelegate(name)
Class.forName(ORIGIN_EXECUTABLE).getConstructor()
runtime.lookupType(returnType,(HotSpotResolvedObjectType)accessingClass,true)
resources.getDimension(R.dimen.close_handle_height)
iconicsDrawable.icon(mPlainIcon)
findServerName(server)
error.expectedMessageCount(2)
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
@NotNull
rootVDir.refresh(false,false)
format == BarcodeFormat.UPC_E
selenium.isVisible("link=Control Panel")
Integer.valueOf(leftStr)
getDelegate().getSupportedCipherSuites()
TimeUnit.SECONDS.toNanos(5)
IBackupManagerService svc=mService; 
getDataSource()
from("direct:a").delay(3000)
ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
annotationReader.ofParameter(index)
incomingEdges.containsKey(source)
classNode.hasMethod(methodName,parameterTypes)
DataStream<OUT>
indexData.clear()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
applicationContext.destroy()
stdErr.print(ansi.asErrorText(message))
LOG.error("Ignoring duplicate class " + className)
Class.forName(this.owner)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
LOG.warn("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
endFunction("write_partition_column_statistics: ",ret != false)
localBinder.getServiceInstance().clearCache()
tw.release()
Preconditions.checkNotNull("Streaming Job name should not be null.")
logger.debug("Item not found error while generating chart.")
log.error(error,cause)
vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager())
mThumbnail.copy(Config.HARDWARE,true)
type.equals("")
conditionCache.get(conditionExpression)
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
lineArgs[3]
mColumn + (x - 0.5f) * 4 + 1
WINDOW_FREEZE_TIMEOUT_DURATION=3000
this.httpHeaderNames.put(KEYCLOAK_SUBJECT,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
singleModelJSONObjectBuilder.nestedField(head,tail).field(OPERATION)
mSharedElementNames.size()
BlockMasterClient.class
mRenderNode.isPivotExplicitlySet()
Boolean.parseBoolean((String)disableMultipart)
!enteringSplitScreenMode
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
(line=reader.readLine()) != null
mLayerType == LAYER_TYPE_SOFTWARE
m.getSize()
hasCapability(GPS_CAPABILITY_MSA)
i > speedBumpIndex
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport()
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBefore(new Date())
"thing".equals(uri.getScheme()) == false
getLastNonConfigurationInstance() == null
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE))
node.getClass().getMethod(methodNames[column],null)
new SynthesizedAnnotationInvocationHandler(annotatedElement,annotation,getAttributeAliasMap(annotationType))
httpClient.getSocketMiddleware()
trade.getTotal()
enforceSystemOrSystemUI("grant notification assistant access")
new Paint()
invertedIndex.getImmutable(i)
AccessException ex
container.addon.markDirty()
ALL_ARGUMENTS.OVERLOAD.equal(getOverload())
getVersion()
i < DatabaseDescriptor.getIndexInterval()
/**   * Callback that is invoked <em>before</em> all  {@code @BeforeAll} methods have been invoked.  * @param context the current container extension context  */ void beforeAll(ContainerExtensionContext context) throws Throwable ; 
new AntTypeDefinitionImpl(id,typeClass.getName(),isTask,attributes,nestedDefinitions)
Exception e
i=0
simple.getFromSentDate()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT
new UnsupportedOperationException()
mf.getColumnName()
statistics.addGetTimeNano(System.nanoTime() - start)
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SERVER_ERROR)
new JavaScriptAggregatorFactory(name,Arrays.asList(input),fnAggregate,fnReset,fnCombine)
getConcept() != null || getConcept().getName() != null
isSmartLockAvailable()
LOGGER.info("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
from >= to
log.i(LOG_TAG,"ACRA processName='" + processName + "'")
AbstractBlockWrapper parent
DEBUG=true
data != null
mAttributes.getFlags()
StringBuffer buffer=new StringBuffer(); 
operandStack.remove(2)
logger.error("",ex)
method != null
mConnector.executeForList("volume","list")
"weighting " + weighting + " not supported"
myBook.addUid(uid)
assertEquals(4,steps.size())
servletClass != null && filterClass != null
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
Double rate
pane.setMinimumSize(new Dimension(300,80))
executionJobVertex.getParallelism()
file.getName().startsWith("branched-")
logger.debug("rapidRefreshFutureEnd stopping")
new ListenerInfo("http",server.getLocalAddress(),openListener,null,channel)
new MultipartEntity(getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT)
HistoryRecord r=(HistoryRecord)it.next(); 
!mDreamsEnabledByDefaultConfig
if (mIsOverride) {   sb.append("\" !important;"); }  else {   sb.append("\";"); } 
UIMODE_SERVICE.equals(name)
"none".equals(maxItems)
Optional.of(privateKeyFile)
Integer.toString(flags,16)
delaySoFar > mReEnableDelayMillis
new MapProducerCapabilities(false,false,false,false)
context.currentProcessingTime()
Color.red(endColor)
return context; 
selected != null || selected != current
s > 0
RELEASE_DELAY_MS=120
selenium.isVisible("link=Control Panel")
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentType(TEXT_EVENT_STREAM)
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error),error)
Element.F64(mRS)
Rank.getInstance()
response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty())
settings.ANIMATE_MY_LOCATION.get() && !smallSpeedForAnimation && !movingToMyLocation
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static String get(String self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
UnsupportedOperationException.class
new CacheCreateConfigOperation(cacheConfig,create,false)
resolve()
Exception e
new MockQueryExecution(1)
context.formatSeparator()
MonitoringPortletImpl.isMonitoringPortletEventRequest()
LOG.info("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
ArrayList<UsageInfo>
surfaceHolder.setFixedSize(320,240)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
request.getServletContext()
BorrowablePath.borrowablePath(output.getUnchecked())
WebSocketEventListener.class.cast(l).onMessage(event)
Integer.valueOf(3)
(mOomMinFreeHigh[5] * 7) / 8
actualParamType.asReferenceTypeUsage().isRawType()
clientCodeChallenge == null
mavenBundle().groupId("org.conscrypt").artifactId("conscrypt-openjdk-uber").version("1.1.4")
assertPhoneNumberEqual("123123","0123123",false)
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0),false)
sslService.sslConfiguration(SSLService.getHttpTransportSSLSettings(settings),Settings.EMPTY)
_log.error(ioe,ioe)
fieldTable[i]
StringBuffer buffer=new StringBuffer("("); 
args.length == 0
sysPkg != null
mRepeat > 1
from > to
checkPojoMetaClass()
RESULT_TIMEOUT=1500
InterruptedException e
mDrawerItems.size() > mCurrentSelection
touchEventPool.free(touchEvents)
next.getField(0)
LOG.error("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
StringUtils.isNoneEmpty(xml)
getLlvmParamTypes()
@Overide
failingOnThis.without(UpgradePolicy.canary).startedFailingOnVersionAfter(version)
type.getConstructor()
this.artifactServerFactory=jobServerFactory
assertEquals(true,StringUtils.isAlpha(""))
getHeight()
return false; 
ZipUtil.unzip(null,myCoursesDir,file,null,null,true)
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",true))
mHeight <= 0
mBiometricUnlock.stopAndShowBackup()
server.getPlayer(name)
selenium.isVisible("link=Control Panel")
LogFactory.getLogger().info("Could not find table or view " + tableName + " for column "+ columnName)
ciManagement.getNagEmailAddress()
annotationHolder.createErrorAnnotation(expression,message)
return true; 
AudioFormat.isEncodingLinearPcm(mAudioFormat)
id=26
size >= Long.MAX_VALUE / unit.toBytes(1)
return mDisappearingDuration; 
join(list,",","(",")")
sentencesFile == null
RedisRunner.startDefaultRedisServerInstance()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
LOG.error("Ignoring duplicate class " + className)
datum.getScore()
SIDE_MARGIN_DIP=5
it.current() == '/'
connection.subscribe(jedisPubSub,patterns)
CharSequence message
Exception e
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
graphModel.getUndirectedGraph()
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,109000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
LOG.warn("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace,true)
LowLevelSearchUtil.processElementsContainingWordInElement(occurenceProcessor,psiFile,searcher,false,new EmptyProgressIndicator())
message.size()
in.getDepth() < outerDepth
SSTableScanner scanner
spec.getClass()
PsiClass[]
from > to
preMergedCustomer.isLoggedIn()
assertEquals(2,result.getAuthorities().size())
_addTestVariant("small.hd","uuid1",101,200)
osmandSettings.DAYNIGHT_MODE.get().toHumanString(ctx)
surfaceChanged
colNameToSkip != null
QUEUE_TRANSACTION_LOG_RECORD=43
acrComparator.compare(prevRow,compactedRow) > 0
typeInfoList[type.ordinal()].toArray()
this.xpath.setText(xpath)
this.getString(R.string.shared_string_release).toLowercase()
DEFAULT_WAKE_LOCK_TIMEOUT=30000
getModel().getRowCount()
new NativeAllocationRegistry(getNativeFinalizer(),NATIVE_ALLOCATION_SIZE)
"Missing " + gradlePropertiesExists
Set<XmlElementDescriptor>
Lists.newArrayList(condaExecutable,"create","-p",destinationDir,"python=" + version,"-y")
lastPos != mTargetPos
principal.getName()
resolveMethod(exception)
_buildTemplateWithGradle("control-menu-entry","entry-dependency-management","--dependency-management-enabled","true")
phoneDisplayHeight == actionBarOverlayLayoutHeight
barrier1.await(2,TimeUnit.SECONDS)
currenType != Type.INT
ImportAutoConfigurationWithItemsOne.class
role.description().get()
isCreated()
String channel
account.getName()
JvmDeclarationOriginKt.OtherOrigin(element)
formatTime(scanWifiLockOnTime / 1000)
slash < 0
selenium.isVisible("link=Control Panel")
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
path.indexOf(Constants.JAR_EXT)
FlexUtils.equalLists(filesToPackage,myFilesToPackage)
new Paint(Paint.ANTI_ALIAS_FLAG)
wrapper.wrapDetails(attribute,request)
new AndroidMobileDriverImpl(projectDir,portalURL)
hasPermission(permission)
Deque<String>
(((3 * t - 5) * t) * t + 2) / 2f
FilterAndProjectOperator.class
Query.select(Task.ID,Task.UUID,Task.RECURRENCE)
inUtc
DEBUG=true
Long.parseLong(value)
testSame("asdf;","var asdf;",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)
getStorage().getCode(codeAddress)
JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
a.getInt(attr,0)
new AssertionError("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
public Integer getId(){   return id; } 
new LLVMInsertFloatValueNode(resultAggregate,sourceAggregate,size,offset,(LLVMFloatNode)valueToInsert)
sendMessage(CMD_STOP_AP)
r.curApp != null
request.getParams() != null
version == null
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
replicatedMapService.getReplicatedRecordStore(mapName,false)
mode.getInflater()
mMMatrix.leftMultiply(mParentMatrix)
ks.getKieClasspathContainer()
result=35
ConfigPropertyVetoExceoption ex1
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.web",Collections.<UpgradeProcess>singletonList(upgradePortletId),1,0,false)
RuntimeException e
this.copyErrors
candidateMatchPosition=currentWordsIndex
mSearchFab.setScaleX(0.0f)
mService.oneTouchPlay(getCallbackWrapper(callback))
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
(visibility & VISIBILITY_MASK) == VISIBLE
createCondition.isPrivate()
selenium.isVisible("link=Control Panel")
lp.onResolveLayoutDirection(layoutDirection)
new String(temp)
app.getDaynightHelper().isNightModeForMapControls()
this.thrown.equals("File must not be null")
new SimpleDateFormat(format)
pkg.findBinFile()
selenium.isVisible("link=Control Panel")
Short.valueOf(param.getValue())
promise.setSuccess(null)
node.getLifecycleService().terminate()
createArtifact("b","1.0-SNAPSHOT")
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
ft.commit()
XmppStringUtils.parseBareAddress(local)
type.getConstructor()
grammar.getTokenNames()
cursor.getString(COLUMN_NAME)
Simple.of(String.class)
@NotNull
ent.getValue().intValue()
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
cacheSize > 0
expandableView.getActualHeight()
new AtomicBoolean(true)
ImmutableMap.<String,String>of()
DEFAULT_WAKE_LOCK_TIMEOUT=30000
BuildParametersBuilder parametersBuilder=new BuildParametersBuilder(); 
Integer.toString(contentLength)
generateBitmapFromImageData(rotateImage(mImageData,mWidth,mHeight),mWidth,mHeight)
ApplicationManager.getApplication().isInternal()
new InvalidFragmentCollectionFileException("selected-file-does-not-contain-fragment-collections")
mAdapter == null
index != 0
/**   * Indicates only the user is able to see posts made by the application.  */ OnlyMe(NativeProtocol.AUDIENCE_ME)
errors.addAllErrors(errors)
LinkedHashMap<String,Object>
logger.info(String.format("close (%s)",reason))
solo.clickOnMenuItem(solo.getString(R.string.settings_label))
ev.getY() < mQsContainer.getBottom()
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
Table.isMetaTable(tableName)
polyglot.executeUnsupported(receiver)
featureNum=1230
anchorView.getWindowToken()
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
TelephonyManager.getDefault().getPhoneType()
item.getClass()
private FallbackKeySettings _fallbackKeySettings; 
selenium.isVisible("link=Site Name")
mProgressListener != null
state.mTint != null
new UpdateDeParser(expressionDeParser,buffer)
List<ActivityManager.RecentTaskInfo>
new CustomChangeException("Failed to insert one or more concept map types")
iter.next()
observable.timeout(5,SECONDS).toList().toBlockingObservable()
socialActivityFinder.countByRelation(userId)
Vector<MediaDescription>
mock.expectedBodiesReceived("Hello World 2")
propertyValue.getName().replace(prefix + PREFIX_SEPERATOR,"")
mQSPanel.getHost() != null
services.add(ClassLoaderScope.class,targetScope)
sep < 0
sUseRenderThread=true
@Override public AllocatedObjectNode getMaterializedRepresentation(FixedNode fixed,ValueNode[] entries,int[] locks){   return new AllocatedObjectNode(this); } 
effectColor=myFgColor
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
success >= 130
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
any()
this.sentinelMaster=sentinelMaster
StorageService.instance.getTokenMetadata().invalidateCaches()
(rsv & RSV_BITMASK) > 0
limit > 0
failed(x)
MIN_HEART_RATE_VALUE=0
U.warn(log,"Message is ignored due to an error [msg=" + msg + ']',e)
mService.mDisplayContents.get(displayNdx)
mPulseCallback.onPulseFinished()
new Paint(Paint.ANTI_ALIAS_FLAG)
loaded.getLoaded().getConstructor()
bicycleNotDefinedValues.put("footway",3d)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
mentionsState()
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
IR.var(IR.name(shortName),googRequireNode)
doNothing().when(safeOutputStreamConsumer).stdOutput(anyString())
account.getExternalKey()
resourcePermissionPersistence.fetchByC_N_S_P_R(companyId,name,scope,primKey,roleId,false)
!startPositioningLocked(win,true,startX,startY)
new QueryException("Could not parse build targets.\n%s",e.getMessage())
checkPojoMetaClass()
coreId < nReplicas
delta + contextEnd
getTokenNames()
sceneCam.getDirection()
LOGGER.debug("Could not open folder",e)
mAppToken.hasContentToDisplay()
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i)))
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
lookup(parseName(name))
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
resolveImpl(incomplete,null,false)
planPhase != null
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " is not a "+ cast.getName(),false)
StringBuffer error=new StringBuffer("GroovyServlet Error: "); 
pubnub.disablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
assertEquals(expectedPlan,actualPlan)
fragment == null
taskClass.findClassAttribute("negative_opt",false)
myInjectedFile.getFileType()
buildArchiveContext(persistenceUnit,false,resultCollector)
enableOptimization.isEnabled()
unsafeBuffers.contains(buffer,true)
type.getConstructor()
new IllegalAccessError("read-only")
Long.valueOf(timeString)
(V)identifier
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
LOG.isDebugEnabled()
return true; 
map.append(counter++,ValueRow.get(values))
ReflectUtils.getBeanGetters(target)
AnnotationDescription.Loadable<Annotation>
Iterable<AbstractConfiguredTarget>
context.formatSeparator()
selenium.isVisible("link=Control Panel")
if (DBG) log("returning Locked NetworkInfo"); 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
tJvmGcDetailed.getJvmGcNewCount()
syncOperation.delay == 0
fileIds == null
StringUtils.isNotEmpty(id)
logger.warn("Cannot set group volume ({})",e.getMessage())
29 * 8
Integer.valueOf(taskIdStr)
gen.addLoadImmediate(Register.R0,1234567890)
new ConcurrentHashMap<String,InjectionMetadata>(64)
streamTokenizer.ttype == StreamTokenizer.TT_WORD
asList()
SwingUtilities.invokeLater(() -> {   try {     if (!isDisposed()) {       myGutterComponent.updateSize();     }   }   finally {     updatingSize=false;   } } )
n >= 0
getActivity()
type.getConstructor()
GenericSendAndRecieveGateway.class
"Surface(native-token=" + mSurface + ")"
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP)
prefSize(new Fixed(width))
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
In.valueOf(apiKeyAuthConfig.in().toValue())
candidate.getSelected().getId()
resources[i].getFilename().endsWith(groovyFile)
kl.getAvailableKisoks()
new JobConf(config_)
clickListener_OnClickListener == null
Indent.getContinuationIndent(true)
this == OtiOnly
mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(),450L)
page.getPageId()
DeprecationLogger.nagUser("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)
icon.setVisibility(visible ? VISIBLE : GONE)
new Media(getApplicationContext(),uri)
triggerProto.getAfterEndOfWidow()
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).otherwise(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
graphModel.getDirectedGraph()
periodDurationUs < endTimeUs
Long.valueOf(val)
mResourceData[i] != null
Locale.getDefault().toString()
source.isInternal()
req.getRequestURI()
new StackManager(stackRoot,commonServices,osFamily,true,metaInfoDao,actionMetadata,stackDao)
Integer.toString(contentLength)
name="java:/ConnectionFactory"
w.getAddress()
29 * 8
logger.info(String.format("decoded %s as %s",str,p))
origin >= other
selenium.isVisible("link=Control Panel")
Long.valueOf(args[2])
Assert.assertSame(ehcache2,_ehcachePortalCache.ehcache)
new IllegalStateException("Unrecognized attribute type tag parsed: " + tag)
flux.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
FRAME_STATS_COUNT=14
startingWindow != null
GraalInternalError.unimplemented()
mp.getValue()
Math.min(mXAxis.mAxisMinimum,pos.x)
OCDirId > 0
elm.getTagName()
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
assertPhoneNumberEqual("123123","0123123",false)
e.toString()
noteAcquireWifiLock(wifiLock)
ENABLE_LAUNCH_DESK_DOCK_APP=false
info.crashInfo.stackTrace.length() > 10000
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ T serialize(Object input); 
BookmarksServiceUpgrade.class
setParams().nx()
_hasAnnotation(a,JsonSerialize.class) || _hasAnnotation(a,JsonView.class)
MIN_CONNECTIVITY_COUNT=2
Integer.valueOf(stackIdStr)
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false)
_freemarkerEngineConfiguration.getResourceModificationCheck()
_layout.isTypePanel()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
getInitClosure()
selenium.isVisible("link=Control Panel")
new GroovyParser().parse(GroovyElementTypes.EXPRESSION,builder)
mService.oneTouchPlay(getCallbackWrapper(callback))
assertEquals(5,dict.getSize())
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
qs.isEmpty()
getTimeout()
Class[]
type.getConstructor()
keyed=false
mFile.getPath()
defaults.put(ENTRY_EDITOR_HEIGHT,0.75)
AnnotatedElementUtils.getAnnotationAttributes(method,annotType)
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",true))
new AtomicInteger(1)
isFormat(format,F40,F50,F51,F52)
Exception e
(cls == null) || (cls.length == 0) || (!SvnVcs.getInstance(project).getName().equals(((CommittedChangeList)cls[0]).getVcs().getName()))
"Using bind address: " + publicAddress
createAndTestKieContainer(gav,createKieBuilder(kfs),null)
Integer.valueOf(stackIdStr)
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
loaded.getLoaded().getConstructor()
learnRate=1.0
offset != null
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
cik * (-puf)
motionPosition > 0
buf.writeByte(4)
headers.keySet().itrator()
new DigestEncode()
range.getFrom()
a.getInt(com.android.internal.R.styleable.Animator_duration,0)
displayOption=0
head.equals("ntpath") || head.equals("posixpath")
stack.hashCode()
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
Map<String,String>
buildPages.getTypes()
"Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH
def.needsInput()
dependencyNode.getId().getAsked()
getType().isArray()
mPackageUsage.write()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
getService().animateCollapse()
ResponseImpl headers(Map<String,Property> headers); 
t != null
mResourceData[i] != null
FastMath.max(origin,num.doubleValue())
rs.getLong(1)
button.actionId()
layerConfig.get(LAYER_FIELD_DROPOUT_W)
context.getSourcePathResolver().getRelativePath(resDir)
createFrame(getRootNode().getFrameDescriptor(),args)
mFocusStack.remove(fse)
keyGen.initialize(1024)
computeHorizontalScrollRange()
results.getCount() > 0
state != null
public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
e.printStackTrace()
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),DANCE)
selenium.isVisible("link=Control Panel")
mMncStr == null
assertEquals(consentDecision.getPrincipal(),"casuser")
Object deserialize(byte[] b); 
fireBridgeFailed(new Throwable("localBrokerInfo is null"))
mSlideOffset >= 0
Throwable t
thisVisible
RegisteredService::getName
assertEquals(expectedPlan,actualPlan)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
Tools.checkText(text,lt)
dynamicType.getConstructor()
Setting<Long>
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
new RuntimeException("builtin library initialization failed previously: " + initializationFailed,initializationFailed)
scan.getResults()
app.getTargetPointsHelper().getPointToNavigate() != null
((TileGenericPipe)source.getTile()).isPipeConnected(direction)
folder.toEscapedModel()
((MasterSlaveDataSource)dataSource).getAllDataSources()
logger.warn("Cannot play radio ({})",e.getMessage())
getCategoriesAndThreads(category.getGroupId(),categoryId)
BuildRule resourceRule2=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res2")).build()); 
snapshot != null
List<Map<String,Object>>
selenium.isVisible("link=Control Panel")
AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),3)
metadata.getFaceRectangles()
mLayerType == LAYER_TYPE_SOFTWARE
threadSafe=false
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
this.setOrder(102)
i <= MAX_AUDIO_PORTS
log.info("Setting {} to: {}",configKey,soTimeout)
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which))
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
split[0]
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"dbinfo",pw)
StringBuffer buffer=new StringBuffer(); 
holder.setVisible(loadEndViewId,visible)
value.toLowerCase().contains(constraintLowerCase)
mAuthorities.get(i)
return true; 
Integer.toString(minutes)
metadata.getClass()
mBoundServices.isEmpty()
val.get(key)
@ConditionalOnEnablednHealthIndicator("mongo")
editor == null
application.getApplicationContext()
new JSyntaxTextArea(15,50)
getActiveFgCall().getPhone().sendDtmf(c)
e.getMessage()
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
base - zoom
capacity > 1 << 30
Localization.menuTitle("Library")
realm.assertThread()
getStringList(m,"excludeTags")
new ConfigRepoConfig(new GitMaterialConfig("https://github.com/tomzo/gocd-indep-config-part.git"),"myplugin")
obj != proxiedObj
Resource resource
newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)
final LongAdder msgCntr=new LongAdder(); 
mContext.startActivity(intent)
isSdkLocationValid(sdkLocation)
!jackson2Present
((IWorkbenchPropertyPage)prefPage).setElement(dataSource)
table.getParameters()
DBUtils.getDefaultContext(object,true)
mHorizontals == null
logger.trace("Trying to map {} to {}",t,path)
mNoDreamEnterAnim=true
Utils.deserialize(_boltSer,IBatchBolt.class)
VersionedChecksummedBytes testAddressCopy=(VersionedChecksummedBytes)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
IndexReader reader=IndexReader.open(dir); 
clsName != null
m.shapeInfoDataBuffer()
new GotoFileAction().gotoActionPerformed(e)
new DeadCodeEliminationPhase(OPTIONAL)
return transactions; 
IBackupManagerService svc=mService; 
scale.getScaleX() != 0f
!mAwake
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
i < 200
supressLeadingZeroElements == false
mStackScroller.getChildAtPosition(x,y)
LOG.error("An exception was caught while attempting to handle an activity generated exception",th)
TupleDomain.none()
readStayAwakeConditions()
player.isAuthorized("essentials.world." + user.getWorld().getName())
ConnectionPool connectionPool=destination.getConnectionPool(); 
selenium.isVisible("link=Control Panel")
this.referenceId == referenceId
null == result
public final class Compare extends Value {   private static final int INPUT_COUNT=2;   private static final int INPUT_X=0;   private static final int INPUT_Y=1;   private static final int SUCCESSOR_COUNT=0;   @Override protected int inputCount(){     return super.inputCount() + INPUT_COUNT;   }   @Override protected int successorCount(){     return super.successorCount() + SUCCESSOR_COUNT;   }   /**   * The instruction that produces the first input to this comparison.  */   public Value x(){     return (Value)inputs().get(super.inputCount() + INPUT_X);   }   public Value setX(  Value n){     return (Value)inputs().set(super.inputCount() + INPUT_X,n);   }   /**   * The instruction that produces the second input to this comparison.  */   public Value y(){     return (Value)inputs().get(super.inputCount() + INPUT_Y);   }   public Value setY(  Value n){     return (Value)inputs().set(super.inputCount() + INPUT_Y,n);   }   Condition condition;   boolean unorderedIsTrue;   /**   * Constructs a new If instruction.  * @param x the instruction producing the first input to the instruction  * @param condition the condition (comparison operation)  * @param y the instruction that produces the second input to this instruction  * @param graph  */   public Compare(  Value x,  Condition condition,  Value y,  Graph graph){     super(CiKind.Illegal,INPUT_COUNT,SUCCESSOR_COUNT,graph);     assert (x == null && y == null) || Util.archKindsEqual(x,y);     this.condition=condition;     setX(x);     setY(y);   }   /**   * Gets the condition (comparison operation) for this instruction.  * @return the condition  */   public Condition condition(){     return condition;   }   /**   * Checks whether unordered inputs mean true or false.  * @return {@code true} if unordered inputs produce true  */   public boolean unorderedIsTrue(){     return unorderedIsTrue;   }   /**   * Swaps the operands to this if and reverses the condition (e.g. > goes to <=).  * @see Condition#mirror()  */   public void swapOperands(){     condition=condition.mirror();     Value t=x();     setX(y());     setY(t);   }   @Override public void accept(  ValueVisitor v){   }   @Override public void print(  LogStream out){     out.print("comp ").print(x()).print(' ').print(condition().operator).print(' ').print(y());   }   @Override public String shortName(){     return "Comp " + condition.operator;   }   @Override public Node copy(  Graph into){     Compare x=new Compare(null,condition,null,into);     x.unorderedIsTrue=unorderedIsTrue;     return x;   } } 
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
applyCurrentState()
parent instanceof PsiCodeBlock
new float[pageSize]
parentPackageInTree != null
entries.remove(key)
-10
f.getFp()
SubscriberBarrier<IN,Void>
addViewInLayout(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
Log.wtf(TAG,"This will become an error",ex)
TYPING_TEXT_TIMEOUT=3000
Locale.getDefault().toString()
offsetHandler.enter()
PsiTreeUtil.getParentOfType(element,PsiClass.class)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
DateTimeUtils.createGregorianCalendar()
IntList list
DEBUG=true
TelephonyManager.getDefault().getPhoneType()
logger.error(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
val > mMaxValue
logger.info("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
new BoBHash("sha1",SHA1.hex(bobData.getContent()))
VERSION=0
apnContext.getWaitngApns()
hz1.getLifecycleService().terminate()
isBigDecCategory(typeRe)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_STOP_FUNCTION)
presence.getTo()
location[0]
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
String jid
-1
measured.setPara(source,bufStart,bufEnd,textDir)
(dispatcherMapping & ASYNC) > 0
synchronized (this) {   updateDisplayLocked(); } 
selenium.isVisible("link=Control Panel")
!beanPrefix.isEmpty() | !beanSuffix.isEmpty() | beanPackageName != null
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
new IllegalAccessError("read-only")
embeddable.isMetadataComplete()
note.isLocked()
ActivityManagerNative.getDefault().updateConfiguration(config)
edge.getDownNode()
log.error("Metric=[%s] has no StatsD type mapping",statsDMetric)
Math.abs(expectedSum) * 1e-11
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)
assertEquals(12,scannedBeanCount)
applyCurrentState()
new LayerView(this,0xff0000ff)
-1
dest.writeLong(txPower)
in.readStringNull(8)
CookieHelper.addCookie(KEYCLOAK_REMEMBER_ME,username,path,null,null,2592000,secureOnly,true)
classFilter.getAcceptedIDs()
"No class type found for " + className
e.getMessage()
mLayerType == LAYER_TYPE_SOFTWARE
@Nullable
Exception e
mp.getValue()
mLayerType == LAYER_TYPE_SOFTWARE
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
selenium.isVisible("link=Control Panel")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","del","div","dfn","dl","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
new Paint(Paint.ANTI_ALIAS_FLAG)
t.getMessage()
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
contextBuilder.allowNativeAccess(allow_create_thread)
persistencePackage.containsCriteria(INVENTORY_ONLY_CRITERIA)
ReflectUtil.isSubclass(type,Number.class)
PermanentGraph<CommitId>
_log.error(ioe,ioe)
upd != null
OrderUtils.getOrder(((DecoratingProxy)obj).getDecoratedClass())
match.getRule().getLocQualityIssueType().name()
mKey.equals(other.mKey)
!mSpeakText
ContentType.create(request.getContentType())
recorder.record(frame2)
ConfigHelper.getClientTransportFactory(conf).openTransport(location,port,conf)
UIHelper.getContactPicture(contact.getName(),89,this.getApplicationContext())
COUNT_DATABASE.put(key,val)
mJSONArrayRequestListener=null
holder == null
mNwService.getInterfaceConfig(mInterfaceName)
assertEquals(serdeWrite.getCodec().toString(),CodecFactory.deflateCodec(9).toString())
is(200)
logger.debug("testConcurrentServiceTicketGeneration produced an error",e)
Status.constructStatuses(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
new InvalidPluginRequest("No plugins found for plugin id " + pluginId)
jsonModel.update(async)
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentType(TEXT_EVENT_STREAM)
selenium.isVisible("link=Control Panel")
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
topMbMessage.getMessageId()
public String getPort(){   return this.port; } 
Looper.getMainLooper()
mCol != null
EnumSet.noneOf(AlarmInfoType.class)
scrollWebElementIntoView(webDriver,webElement)
private void _runSetUp() throws PoshiRunnerException {   _runClassCommandName(_testClassName + "#set-up"); } 
new Paint(Paint.ANTI_ALIAS_FLAG)
factory.getDestination(info)
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription())
attribute.equals("\\Spam")
Utils.createInformativeDialog(mContext,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.import_bookmark_error))
myClassScopeTypeName != null
accumulator.addClass(fileDetails.getFile(),analysis)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
logger.debug("Retreiveing door data")
-1
StringBuilder sb=new StringBuilder(64); 
gradleProject.getIdentifier()
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
!mStopped
out.writeInt(mProgress)
lp.width != panelWidth
file.getLocalFile()
out.writeLong(sampleCount)
Log.w(TAG,"setSubtitleAnchor in MediaPlayer")
BufferUtil.zeroBuffer(4)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
!debugInfoEnabled
new Paint(Paint.ANTI_ALIAS_FLAG)
growLock.lock()
cursor.getString(COLUMN_NAME)
LOG.isDebugEnabled()
flowParameters.get(flowParam)
Exception e
checkPojoMetaClass()
Messages.showOkCancelDialog(myEntryTable,"No code dependencies were found. Would you like to remove the dependency?",CommonBundle.getWarningTitle(),Messages.getWarningIcon())
LOG.isDebugEnabled()
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
((ResolvedJavaType)obj).getName()
mSelectedItemIdentifier != 0
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle)
if (DBG) loge("Exception trying to remove a route: " + e); 
getContext()
myProgramParameters.getComponent().setDialodCaption(myProgramParameters.getRawText())
folder.getGroupId()
LOG.error("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
ScanResult.is24GHz(frequency)
mPowerManager.isScreenOn()
Log_OC.wtf(TAG,"\t file is NULL")
size * 1.75f
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
node.getEndColumn()
System.currentTimeMillis()
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
RowInfo<CommitId>
selenium.isVisible("link=Control Panel")
assertRestrictBackgroundOff()
assertFalse("reuse-address",networkConfig.isReuseAddress())
this.children != null
mHandler.handleMessage(msg)
lessThan(3600000L)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
row.setUserExpanded(true)
mRepeat > 1
logger.error("P2p handling failed",cause)
new CaptureStrategy(true,"com.zhihu.matisse.sample.fileprovider")
super.onMeasure(widthMeasureSpec,heightMeasureSpec)
mKey.equals(other.mKey)
mBoundServices.isEmpty()
unresolvedReferenceDiagnostic.getReference()
NativeDecoder.matches(in,inputFormats)
new IndexWriter(d,new StandardAnalyzer(),false)
/**   * set if this item is selectable  * @param selectable true if this item is selectable  * @return  */ @Override public T withSelectable(boolean selectable){   this.mSelectable=selectable;   return (T)this; } 
SCAN_STATUS_PARTIAL=0
is(false)
ModuleFactory.stopModule(mod)
mInner.end()
client != null & client.autofillClientIsFillUiShowing()
WebUtils.isForward(request)
flags_=0
getTestVector().getNumNondefaultElements()
index > n
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"))
fraction * (nextValue - prevValue)
this.evaluator.prepareLeftObject(handle)
ref.getParentObject()
mGsmPhone.mSST.isConcurrentVoiceAndData()
mccStr.isEmpty()
LOG.error(e)
mPowerManager.isScreenOn()
type == QUADS
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
LOG.isDebugEnabled()
st.setCharacterStream(index,characterStream.asReader(),characterStream.getLength())
new StringBundler(17)
stacktrace.indexOf(':')
inOrder.verify(mockAwareService).subscribe(eq(clientId),eq(subscribeConfig),sessionProxyCallback.capture())
(Long)strategy.getOrNull(third)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ COVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
args[0]
data * 0.9
FILES_BYTES * 1000L
assertEquals(defsPath + " children",2,children.size())
mHomeStack == null
fireMessageReceived(ctx,completeMessage)
dlFolderLocalService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
readBytes >= 0
new TermQuery(new Term("body","m?tal"))
securityMode != SecurityMode.None
new ShardingConnection(xaDataSourceMap,shardingContext)
getPath(renderRequest)
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
Localization.lang("Search")
PORT=6335
selenium.isVisible("link=Control Panel")
SUBCMD_TRIGGER_CHANNEL + " <channelUID> [<event>]"
mAuthorities.get(i)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
mPulseCallback.onPulseFinished()
userId != UserHandle.USER_ALL
TVisit
buffer.put(buffer)
BlockingIOCometSupport.class
insets.left == 0
UIHelper.getContactPicture(contact,null,90,this.getContext())
new StringBuilder()
statistics.addRemoveTimeNano(System.nanoTime() - start)
name == null
DEFAULT_LOCK_TIMEOUT=180000
Integer.valueOf(attrValue)
type.getConstructor()
LOG.error("Unable to unmarshall exception content",e)
NettyFactory.class
selenium.isVisible("link=Control Panel")
logger.warnf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
_typeSettingsProperties.toString()
GroupFinderUtil.findByC_C_PG_N_D(TestPropsValues.getCompanyId(),classNameIds,GroupConstants.ANY_PARENT_GROUP_ID,StringPool.NOT_EQUAL,new String[]{null},new String[]{null},new String[]{null},groupParams,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
propByGetter == null
to()
msg.getMessageId().setDataLocator(id)
Object edge
checkPojoMetaClass()
mapper.setSqlSession(sqlSessionTemplate)
computeHorizontalScrollRange()
new IndexWriter(dir,new WhitespaceAnalyzer())
active
new WorldPoint(2799,3074,0)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
texCoordIdx >= 1
mentionsState()
Localization.lang("Tools")
mRepeat > 1
logger.warn("gave up waiting for query reply from device {}",m_address)
Throwable t
fileType.isRd() || fileType.isJS() || canPreviewFromR
LockServiceUpgrade.class
LOG.error("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
buf.readBytes(length)
Math.max(titleRight,subtitleRight)
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
v.getContext()
assertEquals(503,cause.getStatusCode())
loaded.getLoaded().getConstructor()
id=14238
context.getPackageName()
log.warn("SQL Validation error",ex)
(union & 0x0800) == 0
onRotationLockChanged()
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
LOG.isDebugEnabled()
new IndexWriter(dir,new WhitespaceAnalyzer())
count < 50
Exception e
WordPress.getCurrentBlog().getRemoteBlogId()
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
matcher.group()
iter > 1
isControl && (scriptMode || cursorInsideToken)
node.order()
tracesFile.mkdirs()
module.getExcludes()
StringBuffer argBuf
mSyncStatus.get(i)
myCache1.getCacheConfiguration().getMaxElementsInMemory()
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
lock.isLocked()
new File(value).getPath()
mMccMncs != null
new Texture(file,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)
mObsoleteAgents.remove(info)
args[0]
-25
new UnsupportedOperationException()
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1)
bag.requite(reserved)
mbw.writeTo(o,cls,type,anns,contentType,headers,os)
this == group.mInternalConnection
DefaultCacheKeysFactory.getNaturalIdValues(cacheKey)
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
CommonBundle.getErrorTitle()
Slog.e(TAG,"Unable to bind FusedProxy.")
BAD_THRESHOLD=2
per > HEALTHY_PER
myDiscardedLengths[0]
logger.warn("running policy with current-step[" + currentStep.getKey() + "]")
query.length()
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
MUCUser.from(packet)
mAdapter.swapDirectory(mFile,storageManager)
type == TokenTypes.CLASS_DEF
ServiceManager.addService(Context.DISPLAY_SERVICE,display)
result.confirm()
((ExecutorService)executor).isShutdown()
aClass.isInterface() || aClass.isAnnotationType()
new Requirement(Skill.MINING,53)
prefix.add(tmp.substring(1))
assertTrue(mDisabled.hasFocus())
(short)suggestions.size() > max_results
new Random()
message.getContact()
encoding != null || !DEFAULT_ENCODING_NAMES.contains(encoding.name())
new Handler(){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
lhs.getScore()
startExpression != null
verify(people,times(2))
new TextField<String>(textFieldId)
32 * 1024 * 1024
zeroState[1][1]=0.25F
cache.size()
assertEquals(activeChangeList.getName(),"TEST-001 Summary")
HttpHeaderValues.IDENTITY.equals(targetContentEncoding)
ImmutableSortedSet.<BuildRule>of(bundle)
disableForUser(what,token,pkg,mCurrentUserId)
createTestBlockCapsule(dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
PlatformTestCase.initPlatformPrefix(ULTIMATE_MARKER_CLASS,"PlatformLangXml")
mAudioQuality=AUDIO_QUALITY_AMR_WB
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } ,0,inputRects.size)
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).errorStrategyContinue()
Exception e
location != null
new IndexWriter(directory,new KeywordAnalyzer(),create)
maxLiveColumns >= count
from > to
new RStudioThemedFrame()
new IndexWriter(indexStoreB,new StandardAnalyzer(),false)
GL20.glUniform4(location,v)
measureRun(0,0,target,mLen,false,fmi)
-823689956
new ArrayList<String>(64)
assertClusterSize(2,h2)
handshake.getProcolVersion()
Locale.getDefault().toString()
loaded.getLoaded().getConstructor()
"Unsupported filesystem scheme found in the backup target url. Error Message: " + newMsg
inUtc
mClocks.elapsedRealtime()
response.setHeader(WWW_AUTHENTICATE,value)
event.getX()
mValues[7]
checkPojoMetaClass()
telephony.isRinging()
PATH.getAbsolutePath()
keycode == KeyEvent.KEYCODE_HEADSETHOOK
n.getNodeData().getId().toLowerCase().contains(str)
getTokenNames()
commentText.substring(commentText.length() - 2,commentText.length())
super(expression," \t",startTime,zone,0,2); 
dir.toString()
getValidator().call()
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
getService().animateCollapse()
provider == null
new MyResult(null,DiffPresentationReturnValue.quit)
logger.info(e.getMessage(),e)
doNotUseAnimations ? 0 : ZOOM_MOVE_ANIMATION_TIME
Assert.assertEquals(118L,assetCapsuleNew.getNetUsage())
winAnimator.mSurfaceController == null
p2.getStatus()
selenium.isVisible("link=Control Panel")
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null)
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
a.cancel()
editor.selectPrevTab()
doTest("class Test {\n" + "  <T> void <caret>sort(T[] a, Comparator<? super T> c) { }\n" + "}\n"+ "class Comparator<X>{}","sort(T[], Comparator)","sort(T[], Comparator<? super T>)")
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
z.muli(activationDerivative)
super.performAccessibilityAction(action,arguments)
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName),"success",String.valueOf(rules.getRuleItems()))
new OptionValue<>(3)
Thread.sleep(5000)
scaleX == 0
newEmbeddedDatabaseBuilder(path)
mContext.sendStickyBroadcast(mStorageLowIntent)
version > 6
new IndexResponse(shardId,index.type(),index.id(),randomIntBetween(0,Integer.MAX_VALUE),true)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
r.getInteger(FIELD_STEP_ATTRIBUTE_ID_STEP_ATTRIBUTE,-1L)
Math.max(maxReturned * 2,maxRows)
new UnsupportedOperationException()
typeSettingsProperties.toString()
{FieldManifestation.TRANSIENT,Opcodes.ACC_TRANSIENT,false,false,true,true,false}
info.getName()
new Lock.With(directory.makeLock("commit.lock")){   public Object doBody() throws IOException {     segmentInfos.write(directory);     return null;   } } 
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetdata,mergedManifest,keystore)
worker.setnoData(nod != null ? RangeFactory.create(nod,nod) : null)
Boolean.parseBoolean(setting)
specHeightMode == MeasureSpec.EXACTLY
mp.getValue()
mMat[9]
attributes.getFlags()
mState != STATE_FINISHED
metadata.getFaceRectangles()
stringLiteralExpression(b,l + 1)
new StringBuilder(730)
createPermissionsXmlAsset(new JndiPermission("*","lookup"))
new JButton()
buf.readIntLE() * 0.01
selenium.isVisible("link=Control Panel")
i > speedBumpIndex
checkForMisplacedBindingAnnotations(method,errors) | !isValidMethod(injectableMethod,errors)
selenium.isVisible("link=Control Panel")
(article == null) || !hasViewPermission() || (articleDisplay == null)|| isExpired()|| article.isScheduled()
platformVersion < MNC
meta.getEnclosure()
new Paint(Paint.ANTI_ALIAS_FLAG)
new ConfigPropertyVetoExceoption(e.getLocalizedMessage(),evt)
new Influencer(JOB_ID,"n","v",new Date(DEFAULT_START_TIME),600,1)
getRecentsButton()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
setDeploymentStack(contextValue)
new IOException(e.getMessage(),e)
buddyIter.next().getKey()
getSelectedColorRes()
year <= 0
mPolicy != null
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
showViewUpdateCollection(request,model,pathVars,id,collectionField,null,collectionItemId,"viewCollectionItem")
qux.getConstructor()
ISOChronology.getInstance()
Beans.newDuration(session.getLockTimeout()).toMillis()
Exception e
mIam.getStackInfo(WINDOWING_MODE_UNDEFINED,ACTIVITY_TYPE_STANDARD)
lobMap.floorKey(lobId)
protected XmlElementDescriptorImpl createElementDescriptor(final XmlTag tag){   return new XmlElementDescriptorImpl(tag); } 
config.isAnimateWater()
mService.mDisplayContents.get(displayNdx)
isDeviceInVrMode()
new SubtasksUpdater()
entry.getKey()
Boolean.valueOf(attrValue)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)
getLog().error("register druid-driver mbean error",ex)
rs.last()
customCroutonControls.setVisibility(View.GONE)
_freemarkerEngineConfiguration.getResourceModificationCheck()
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsExactly("java","pmd")
Thread.sleep(5000)
mSplashScreen.getVisibility() == View.VISIBLE
playbackService != null
256 * 1024
mWidth - glowWidth
logger.info(sb.toString())
selenium.isVisible("link=Control Panel")
getLogger().error("Unknown classloader [NSME]: " + e.getMessage())
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
status().isPermanentRedirect()
Integer.valueOf(nextArgRequired())
Thread.sleep(100)
mMncStr == null
id=15806
message.getMessageId().setDataLocator(sequenceId)
mDrawerItems.size() > mCurrentSelection
mImmersiveModeConfirmation.onPowerKeyDown(isScreenOn,event.getDownTime(),isImmersiveMode(mLastSystemUiFlags))
LOGGER.warn("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
1000 * 1000
NOTIFICATION_TYPE_MOVE_ENTRY_TO_TRASH=4
java(convention).getClassesDir()
Duration.seconds(1)
dw != mBackgroundHeight
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
"found " + _className + " -- "+ _className
LOG.warn("Unable to close socket selector",ex)
executor.submit(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
del("*:*")
returnElements.isEmpty()
action == KeyEvent.ACTION_UP
EVICT_ALL + 1
BASE_DEPTH + 2
onlyInA.addAll(b)
this.referenceId == referenceId
server1.getStoreRepository().getLocalStore(storeName)
Table table=Table.open(tableName); 
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
cluster.shutdown()
i > generations.length
model.addAttribute("cookie",cookie)
selenium.isVisible("link=Control Panel")
AbstractMethodError e
element == null
e.getMessage()
DEBUG=true
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
modelName + "." + expressionEntry.getKey()
titleTextField.getText()
mGpsListener != null
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRoles"))
assertEvaluate(buildFile).lookup("txts")
selenium.isVisible("link=Control Panel")
requiredAcks > 0
assertThat(response).isEqualToIgnoringCase("Woop woop. yay\n")
selenium.isVisible("link=Control Panel")
functionFactory.lossMSLE(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
ortho(-width / 2,+width / 2,-height / 2,+height / 2,-1,+1)
log.debug("Unexpected exception on closing transaction.  Cause: " + e)
@Path(PATH_NODE_INDEX_ID)
assertEquals(2,hostAlertCount)
params.getSimulatePlatformVersion()
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
text.contains("://")
mAccessibilityController.isTouchExplorationEnabled()
item.getAddress().equals(id)
new ZLIntegerRangeOption("Scrolling","AnimationSpeed",1,10,4)
currencyPair.counter.getCurrencyCode().toString()
DateUtils.getStartOfToday()
props.value(DefaultSettings.JDBC_URL)
new LinearLayoutManager(getActivity())
Character.isDigit(ch)
log.debug("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
UserHandle.getCallingUserId()
gl.marginHeight=3
EmailFilter.filter().receivedDate(EmailFilter.Operator.EQ,1524575533757)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
event.getTime() > currentPlayTime
textView.getTop()
KeyValueStoreTest.class
mPulseCallback.onPulseFinished()
DefaultDeclaredTaskInputFileFilePropertySpec spec=new DefaultDeclaredTaskInputFileFilePropertySpec(task.getName(),resolver,paths,validationAction); 
view.isLaidOut()
client.get(path)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
private static final KeyStokeMap ourMap=new KeyStokeMap(); 
ReadNode result=graph.add(new ReadNode(klassOop,LocationNode.create(LocationNode.FINAL_LOCATION,CiKind.Int,config.klassModifierFlagsOffset,graph),StampFactory.forKind(CiKind.Int))); 
assertEquals(12,beanCount)
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
60 * 1000
new IllegalStateException("Could not access Field '" + classField.getName() + "'")
TextUtils.isEmpty(addresses)
DEFAULT_MAX=1024
addView(mTitleLayout,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT))
return toSelect; 
assertTrue(latch.await(5,TimeUnit.MINUTES))
_jsonWebServiceServiceAction.getJSON(null,null,mockHttpServletRequest,mockHttpServletResponse)
LocaleUtil.getDefault()
off >= buf.length
playable.localFileAvailable()
collection.addOnScrollListener(onScrollListener)
LOG.info(getName() + " caught: ",e)
op.z()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
AbstractMethodError e
targetProject.evaluate()
args.length == 2
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE,KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFiles,getOperationName())
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString())
soLingerTime.toSeconds()
loaded.getLoaded().getConstructor()
markerArray.get(1)
alertDialogBuilder.setPositiveButton(resources.getString(R.string.title_deny),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=true;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),true);     latch.countDown();   } } )
order.getFilledSize()
!list.append(ai)
Validator.equals(value.getData(),data)
new JsonUt8Writer(buffer)
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
tracesFile.mkdirs()
LOG.debug("Created new Configuration {}")
{types}
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
mWm.freezeRotation()
userContext.getContentResolver()
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
myConfiguration.copy()
mNetd.setDnsServersForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
logger.info("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).description(message)
it.current() == '/'
new SimpleAssert<Boolean>(condition,Boolean.TRUE){   @Override public void doAssert(){     org.testng.Assert.assertTrue(condition,message);   } } 
i.next()
element.isNamespace()
Values.UPGRADE.equalsIgnoreCase(connection)
pctx.evaluateActionQueue(workingMemory)
params.height != LayoutParams.WRAP_CONTENT
selectedPos < lastPos
Integer.valueOf(taskIdStr)
items[17]
assertEmpty(errors)
node.getName()
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
policyFlags & SCAN_NEW_INSTALL
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo(java.lang.Class...)","foo(java.lang.Class<?>...)")
Math.abs(loss)
parameter.toString()
index <= 2
selenium.isVisible("link=Control Panel")
DISPLAY_TASKS_PORTRAIT=8
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
localeKeyFluidFlow="buildcraft.mj.flow." + timeGap + longName
new DefaultPlexusContainer(null,null,null,classWorld)
videoInfoPage == null
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
new SSALinarScanResolveDataFlowPhase(this)
LOG.error(e)
ONE_MINUS_DST_ALPA(7)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")
Integer.valueOf(value)
new JsonPathConfig(numberReturnType)
new WorldPoint(2972,3489,0)
mWasActivatedOnDown || !mNeedsDimming
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,true,userId)
endPos < paraEnd
colors.getResourceId(i,0)
header.getX()
mContext.getString(R.string.branded_monitoring_description_app_personal)
new ReformatCodeProcessor(psiFile.getProject(),psiFile,e.getTextRange(),true)
applyTemplates(template)
oldConfig.densityDpi != newConfig.densityDpi
node.getBeginColumn()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
StatBuckets.prettyUptime(secs)
method.getName()
ClassFileVersion.JAVA_V5.getJavaVersion()
IS_USER_BUILD
nodeManager.getAllNodes()
@Override public final DivideBy andExists(Select<?> select){   return and(exists(select)); } 
metricName.getName()
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
from > to
loopField.getRangeDurationField().getType() != lastType
mPrivateInput == null
copy1DRangeFrom(0,mType.getCount(),i)
sourceWidth > 0
selenium.isVisible("link=Control Panel")
fraction * (nextValue - prevValue)
context().getSettingsModule().isNotificationsEnabled()
IllegalArgumentException.class
logger.error("Timeout occured when executing commandLine '" + commandLine + "'",e)
LOG.assertTrue(url != null)
log.info(message)
type.getConstructor()
_log.error(ioe,ioe)
displayContent.getDockedStackLocked()
QUEUE_TRANSACTION_LOG_RECORD=43
GL15.glGetBufferParameter(target,pname,params)
StringBuffer buffer=new StringBuffer(); 
assertEquals(0,sink.getModified().size())
Long.toHexString(v)
Map<String,String>
request.getRequestURI()
mOpenStreetMapView.setCenter(expectedCenter)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
Thread.sleep(5000)
parsedResult.getSqlType()
dest.writeLong(mSubId)
mForgotPatternButton.getVisibility() == View.VISIBLE
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
new Paint()
ONE_MINUS_DST_ALPA(7)
return true; 
new RootModelImpl(myRootModel,this,true,accessor,null,myFilePointerManager,myProjectRootManager){   @Override public void dispose(){     super.dispose();     if (Disposer.isDebugMode()) {       myModelCreations.remove(this);     }     for (    OrderEntry entry : ModuleRootManagerImpl.this.getOrderEntries()) {       assert !((RootModelComponentBase)entry).isDisposed();     }   } } 
getService().hasPrimaryClip()
a.getTranslation()
parameterTokens.add(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
annotationHelper.printError(element,"%s annotated element should have only one constructor")
IndexReader.openIfChanged(oldReader,writer.w,true)
IOException ex
one.setCoordinateIndex(3)
((PresenceStatus)status).getStatus() > PresenceStatus.ONLINE_THRESHOLD
mLayerType == LAYER_TYPE_SOFTWARE
return true; 
mPerformanceMap.get(userId)
this.globFileFilter
new RowMutation(KSNAME,ByteBufferUtil.bytes(key))
new EntityTrackerInfo(mod,ID,range,updateFrequancy,sendVelocityInfo)
new TestClass(ic,m_testName,testMethodFinder,m_annotationFinder,m_runInfo,this)
ib.isBlocking()
counter >= max
operands.length > 2
editorFactory.createViewer(historyDocument,getProject())
tableHasColumn("Calendar","timeZoneId")
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
logger.warn("Cannot update media data for group member ({})",e.getMessage())
logger.debug("tried to fail engine but engine is already failed. ignoring. [{}]",reason,failure)
buf.putInt(utf.length)
loaded.getLoaded().getConstructor()
30 * 60 * 1000
keyCache.get(keyExpression)
tableHasColumn("MicroblogsEntry","receiverUserId")
modItems == null
r.remoteCommits != 0
selectedTabLine.getTranslateX() == newTransX
startingWindow != null
mNextNonWakeupDeliveryTime > nowELAPSED
mTextUtil.nextRandomParagraph(WORD_LENGTH,NO_STYLE_TEXT)
info.crashInfo.stackTrace.length() > 10000
s.equals(".svn") || s.equals(".git")
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
fluentSetters()
pathParts[1] != null
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
hour != 0
mHomeStack == null
Lifecycle.BEFORE_DESTROY_EVENT.endsWith(type)
s.charAt(0) == 'z' | s.charAt(0) == 'Z'
prefs.getBoolean(AUTO_START,true)
case NORMAL: 
startMediaTimeUs == START_NOT_SET
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
DfsSearchResult.toNotAvailable(in.readVLong())
seqNoStats.v1()
!NettyUtils.isDomainSocketSupported(dataSource)
mContext.sendStickyBroadcast(mStorageLowIntent)
_path.toString()
Thread.sleep(50)
loaded.getLoaded().getConstructor()
indexData.clear()
fetch.get(i)
s.getIndexReader()
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
triggerProto.getAfterEndOfWidow()
recordingDescriptorDecoder.endTimestamp()
logger.error("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
saveAll(tableCollection,modelSaver.getWritableDatabase())
typeSettingsProperties.toSortedString()
NODE_START_CHECK_LIMIT=25
wifiConfig.isValid()
new GroupTest(false)
gi.getVertexNames()
i <= 'Z'
!myExcludedFileIndex.isExcludedFile(validParent)
webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))
Assert.assertEquals(5,count)
-1
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
getLock(address)
subProperties.put(subName,value)
new DataSpec(uri)
StatusBarIconController.getTint(tintArea,mMobileActivity,tint)
typeSettingsProperties.toString()
checkPojoMetaClass()
logger.trace("Receive queue ADD: Length={}",recvQueue.size())
sDefaults.putBoolean(BOOL_SHOW_CDMA,false)
clipItem.getText()
Collectors.toList()
sm.getString("cache.addFail")
JspDocumentParser.class
webSocket.isOpen()
authenticationText == null
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
parser.nextInt()
appendElementReference(buf,refElement)
mContext.startActivity(intent)
createFromResourceStream(null,null,is,srcName)
Matchers.anyInt()
displayNameComparator.compare(first,second)
Model.Book != null
eq(Expressions.constant(constant))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
selenium.isVisible("link=Control Panel")
retry=1
fragFilename == null
mDeviceProvisionedController.isDeviceProvisioned()
executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
DownloaderIndexFromGoogleCode.getIndexFiles(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
listener.equals(binaryMessageHandler)
packet.getAttribute("from").split("/")
final Exception ex
maxPagedStorageCacheProperty == null
uriElementText.substring(myRange.getEndOffset(),uriElementText.length())
buffer.capacity()
{4,5,5,11,6,5,7,5,11,11}
me.urls.size() == 0
ack.getLastMessageId().setDataLocator(seq)
nestedBuilder.nestedTypes("FormSuccessPageSettings")
mMat[6]
new ActFmServiceException(object.getString("message"))
b.length() - 1
SavedSearch.constructSavedSearches(get(getBaseURL() + "saved_searches.json",true))
StatusBarIconController.getTint(mTintArea,mWifiActivity,mIconTint)
CompilerDirectives.inCompiledCode()
testSame("yz();","function yz() {}",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)
person.getPersonType() == Person.PersonType.USER
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
GuiActivator.getConfigurationService().getBoolean(DISABLE_CALL_HISTORY_SEARCH_PROP,true)
@Override public ResponseImpl schema(Property property){   this.setSchema(property);   return this; } 
expected == short.class
MergeMatchedSetMoreStep<R>
TypeSpec.parseStrict(builder)
new LayerView(this,0xff0000ff)
typeUtil.getName(type)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   checkDrEnabled();   return ctx.dr().drPauseState(); } 
LOGGER.debug("Could not register FileUpdateMonitor",ex)
mInner.end()
mGpsListener != null
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
getNotNull(userId).contains(deviceId)
MIN_CONNECTIVITY_COUNT=2
GitBranch.list(myProject,myDir,true,true,branches)
logger.warn("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
sep < 0
matches.get(0)
jobState.clearExceptions()
mMncStr == null
utils.removeJobExecutions()
Thread.sleep(5000)
trainSamplesPerIteration(-2,1)
List<String>
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
mContext.startActivity(shortcutIntent)
expectedStatus != 500
checkManageUsersPermission("getting profiles related to user " + userId)
display.getMetrics(mDisplayMetrics)
new NonAnnotatedConfigurationProblem(metadata.getClassName(),reader.getResource())
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new MediaController(token)
checkPojoMetaClass()
OrderEntry myOrderEntry; 
Integer.valueOf(stackIdStr)
result.getCanonicalPath()
Long.valueOf(timeout)
result.getReceipt().getEnergyTotal()
checksums(targetSyncFile)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
case T_DOUBLE_DENSE: 
dest.writeLong(txPower)
search.scoreDocs[1].score > search.scoreDocs[2].score
in.markReaderIndex().readChar()
inflater.inflate(R.layout.mdtp_time_picker_dialog,container)
reference != null
DEFAULT_PORT=5432
getPreferences().store(fos,"")
((FloatValue)input).getValue().floatValue()
applied
IllegalStateException.class
y == 29
routeApplicationState(false)
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,true)
assertEquals("There should be no files",files.length,0)
FieldAccess.forField(delegateField).getter()
IBackupManagerService svc=mService; 
IR.var(IR.name(shortName),googRequireNode)
gzipHandler.setMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
TokenSet.create(OUT_KEYWORD)
new String(bytes)
mService.setUidPolicy(UID_A,POLICY_NONE)
getParameterValues(request,param)
Validate.notEmpty("Cookie name must not be empty")
WeDeployMessageQueuePlugin.class
UIUtil.drawBoldDottedLine((Graphics2D)g,xStart,xEnd,dottedAt,bgColor,effectColor,true)
query.contains("about:")
(0x0000000000000008L)
new PagesListInitNewPageRecord(cacheId,nextId,io.getType(),io.getVersion(),nextId,pageId,0L)
textLanguage.getName()
verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0c,0x02,0x06,0x00,0x00,0x00,0x02,0x0d,0x0a,0x02,0x00,0x00,0x6f,0x4e}))))
super(project,manager); 
Time.getDescription(milliseconds)
getLargestAlignment(targetDataLayout)
@UriParam(label="producer",defaultValue="1") private Integer requestRequiredAcks=1; 
requiresRefreshAfterBulk=true
Platfomr.isPPC()
telephony.getCdmaEriTextForSubscriber(subId)
LOG.warn(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
existingOne == null
startingWindow != null
String[]
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval
learnRate * 0.95f
subscriber.tryEmit(String.valueOf(i))
selenium.isVisible("link=Control Panel")
getProperties().requestCachingEnabled()
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
PetiteReference... lookupReferences
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
loaded.getLoaded().getConstructor()
assertEquals(2,StringUtil.countMatches(drl,"import "))
loaded.getLoaded().getConstructor()
index >> 2
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public String getSubscriptionCarrierName(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_SUBMODULE))
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
FunctionTypesKt.isExactExtensionFunctionType(supertype)
id=25
TEST_TIMEOUT_MS=200
mScrollView.setVisibility(View.GONE)
scheduleRemoveStartingWindow(wtoken)
mPowerManager.isScreenOn()
indexService.getQueryShardContext()
input.getDouble(0) < 10.0
compressedProto.length < 330000
data[1] > 772
matcher.matches()
getEditor().getDocument().addDocumentListener(this)
new Paint(Paint.ANTI_ALIAS_FLAG)
pgl.loadVertexShader(fragFilename)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
mRotation != RotationUtils.getExactRotation(mContext)
System.out.prinln("The stack is full, can't insert value")
firstPos != mTargetPos
RawUDPInput.class
Log.info("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
ONE_MINUS_DST_ALPA(7)
StringUtils.abbreviate(analyzedSentence.toTextString(),200)
InputType.recurrent(convNIn)
RedisRunner.startDefaultRedisServerInstance()
new EnterSelectionDialog(shell,props,Condition.functions,"Functions","Select the function:")
"found " + _className + " -- "+ _className
assertThat(pod).hasId("cheese")
Thread.sleep(5000)
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,0,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
scrollWebElementIntoView(webDriver,webElement)
-1688903193
E extends Model
Mono.currentContext()
mService.reassociate()
/**   * Controls tesselation factor (e.g how often a input patch should be subdivided)  */ TesselationControl
IOException e
type.getConstructor()
new ObjectMapper().reader(HashMap.class)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0
CLEAR_OUTPUT_DIRECTORY=false
Exception e
@Overide
channel.write(reply)
return __inferredEncodings; 
onRotationLockChanged()
id=20
S3DataSegmentKiller.class
HashMap<String,Terms>
LOCAL_OPTION.getOpt()
shutdown(app)
IBackupManagerService svc=mService; 
target == null
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClasses()
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
Float.valueOf(strings[i])
x != -1
getTestName(true)
!entry.hasChanged()
createUrl(Url.append(myRepositoryRoot,path))
getClass().getName()
visible=true
resolveFromIndices(localProcessor,null)
Int3 v
Size.kilobytes(3)
WebSettings.setTextSize(WebSettings.TextSize.SMALLER)
vocabularySettingsHelper.getClassTypePKs()
y == 0
new JCacheProducer(this,cacheCnfiguration)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character")
arrayExpression == null
noClasses.get() && !ApplicationManager.getApplication().isUnitTestMode()
action == KeyEvent.ACTION_UP
exported
mAppToken.hasContentToDisplay()
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),true,Variance.OUT_VARIANCE,Name.identifier("R"),parameterCount + 1)
transform(matrix,source,width,height,false,recycle)
mRCStack.remove(rcse)
proxyRequest.getEnvironment()
mRvc != null
element.getChildByName("properties")
annotationHelper.printError(element,"%s annotated element should have an empty constructor")
DBException e
Integer.valueOf(_ANALYTICS_GATEWAY_PORT)
count < 12
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.7f)
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
mAuthorities.get(i)
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",true))
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
Exception e
typeSettingsProperties.toString()
state > singleByteReads
sendMessage(CMD_STOP_AP)
postVisitColumnDefinition(ancestorNode,statement,column.getName())
ModuleFactory.stopModule(mod)
GL11.glGetInteger(pname,params)
new StringBuilder(674)
this.thrown.equals("File must exist")
Collections.emptyMap()
mEntries[which]
isRunning()
DATABASE_VERSION=482
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
mPrivateInput == null
new ShardPath(false,shardPath,shardPath,"",new ShardId(index,0))
page.getMembersByIdx(0).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(0)
new RelationIndexStatusReport(true,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
StringBuffer ret
out.write(SHORT_FULL)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
TokenSet.create(JetNodeTypes.BLOCK,JetNodeTypes.CLASS_BODY,JetNodeTypes.FUNCTION_LITERAL_EXPRESSION)
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
returnValue == null
cacheElement != null
rootDependency.toBundleUrl()
EditorHelper.normalizeOffset(editor,res,false)
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
TypeEvalContext.codeInsightFallback(getProject())
delegate.writeStartElement(prefix,namespaceURI,localName)
Arrays.deepEquals(valSrcQueries,other.valSrcQueries)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,editorArea)
new Paint(Paint.ANTI_ALIAS_FLAG)
orderUsingCustomerPayment || !cartHasTemporaryCreditCard
MAKIBESF68(50)
checkPojoMetaClass()
mWindowingMode == WINDOWING_MODE_PINNED
mUserManagerHelper.getAllUsersExcludesSystemUser()
SVID_SHIFT_WIDTH=7
sourceMapping != null
viewable=false
MessageDigest.isEqual(ourMac,theirMac)
ClassCastException e
responseCode < OK && MULTIPLE_CHOICES <= responseCode
realmFile.exists()
BorderFactory.createEmptyBorder(10,10,0,0)
scrollWebElementIntoView(webDriver,webElement)
headers.getMessageType()
scheduleRemoveStartingWindow(wtoken)
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
capacityOrValue > 0
Slog.wtf(TAG,sb.toString())
cfstore.getSSTables()
logger.info("Optimized Selector: " + selector.getClass().getName())
request.getServletPath()
IllegalArgumentException.class
getProperties().remove("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
mTxtLog.append(llog)
new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))
return true; 
DELAY_MILLIS=3000
e.getMessage()
ap.getSsid()
dim.containsKey(filterKey)
possibleCenters.get(i)
LOGGER.debug(e.getMessage(),e)
new GameObjectQuery().idEquals()
Math.min(desired,height)
intent.setData(uri)
jsonModel.update(async)
mConnector.executeForList("volume","list")
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
isSavedPostsList()
columnSums.mean(1)
tenantApi.uploadPluginPaymentStateMachineConfig(stateMachineConfig,PLUGIN_NAME,requestOptionsOtherTenant)
new NetAddress(resolvedHost,resolvedPort,-1)
MIN_DIMENSION_TO_RECUR - (int)maxY
enforceSystemOrSystemUI("grant notification assistant access")
comparePartitionOwnership(true,localMember,partition)
sharedOptsCount.contains(thread)
testPackage.getFormattedDuration()
r - scrollY
type.getConstructor()
context == null
hour != 0
LOG.error(e)
type.getConstructor()
super.getHibernateTemplate().executeFind(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     for (Iterator i=expressions.iterator(); i.hasNext(); ) {       GrailsMethodExpression current=(GrailsMethodExpression)i.next();       crit.add(current.getCriterion());     }     List results=crit.list();     if (results.size() > 0) {       return results.get(0);     }  else {       return null;     }   } } )
dropNonSystemTables()
{12,13}
assertEquals("Size of " + r,1,r.size())
!allowWrapperOperations && op.isUnwrappedCapable() && !op.isUnwrapped()
Float.valueOf(strings[i])
fileIds == null
params.getConsole()
!Character.isLetter((char)c) && (c != '_')
Double.toString(d)
prefs.getBoolean(context.getString(R.string.pref_enable_cell_key),false)
type2 == PyElementTypes.ANNOTATION
assertRestrictBackgroundOff()
telephony.getLteOnCdmaModeForSubscriber(subId)
order.getFilledSize()
IBackupManagerService svc=mService; 
putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
factory.createDataSource(p)
LOG.isDebugEnabled()
metadata.getPropertyIterator()
/**   * Returns the next pseudorandom  {@link ArrayValue} of local date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local date-time elements.  */ public ArrayValue nextDateTimeArray(){   ZonedDateTime[] array=nextDateTimeArrayRaw(minArray(),maxArray());   return Values.dateTimeArray(array); } 
mLastBatteryLevel != mHealthInfo.batteryLevel
new Paint(Paint.ANTI_ALIAS_FLAG)
((ContactJabberImpl)obj).getAddress().equals(getAddress())
IOConverter.toInputStream(s)
CharUtils.isAscii(CHAR_COPY)
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
previousAttribute.compareTo(attribute)
serialVersionUID=71390418
disableForUser(what,token,pkg,mCurrentUserId)
new char[16384]
new IndexWriter(rd,new StandardAnalyzer(),true)
String id=reader.getAttributeValue(null,"id"); 
telephony.getForbiddenPlmns(subId,appType)
metadata.addWhere(new BooleanBuilder())
selenium.isVisible("link=Control Panel")
RuntimeException e
intent.resolveTypeIfNeeded(getContentResolver())
wp.getRunAdvance(mChars,start,contextEnd,contextStart,contextEnd,runIsRtl,end)
dirContext=ldap.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw())
typeSettingsProperties.toString()
assertEquals("to",14,sr.getToInt())
new RunAutomaton(automaton)
imageViewFuture.setComplete(imageView)
selenium.isVisible("link=Control Panel")
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
m.getClass()
logger.warning("Unable to load image using AWT loader!")
new Dialog(ActivityMain.this,mThemeId)
(UndeclaredThrowableException)wrapped
new SpoonBrowser(cTabFolder,spoon,urlString,isURL,false,listener)
assertThat(context.getExtensions()).hasSize(43)
discardChannel.receive(10000)
telephony.getNetworkTypeForSubscriber(subId)
task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
RajLog.e("LoaderOBJ","File decode error",e)
RequestContext.create()
StringBuffer ret=new StringBuffer(100); 
FluxPeekHelper<T>
DiagnosticFactory2.create(WARNING)
selenium.isVisible("link=Control Panel")
colors[0]
new IndexWriter(indexStoreB,new StandardAnalyzer(),true)
response.set(ROLLED_BACK)
connect(monitor)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).subscribe()
jp.getFloatValue()
new VerifyBookmarks()
sLat == null
TelephonyManager.getDefault().getPhoneType()
new TitanException("Unable to close transaction",Iterables.getOnlyElement(txCloseExceptions.values()))
mQsContainer.getX()
doNotUseAnimations ? 0 : ZOOM_MOVE_ANIMATION_TIME
il.createGPX("test",0,"GMT")
new StringBuilder(247)
userHasMagnificationServicesLocked(userState)
@Nullable
LOGGER.debug("Error during XML parsing",e2)
new DebugFlag("debug.optimize_startinput")
lookup.getProcessorByType(requestControllerService.getType())
fill
val & 0xFFFFFFFF
configuration.getOutputType()
getResultHandler(result).handleResult(exchange,result).otherwise(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
getPackage(pname)
advised.getConstructor()
model.addAttribute("cookie",cookie)
Locale.getDefault().toString()
tome != null
flexItem.getMarginStart()
mImageManager.load(holder.mImgFeatured,new ColorDrawable(ContextCompat.getColor(holder.mImgFeatured.getContext(),R.color.grey_lighten_30)),ScaleType.CENTER)
textVersion.subString(0,textVersion.getIndex("#"))
super.performAccessibilityAction(action,arguments)
Loggers.get(getClass()).error(format("Pool %s did not terminate",getClass().getSimpleName()))
"Searching class for device type " + deviceAddress
mAppTokens.get(i)
steps < 0
mThemeStore.getThemeByThemeId(themeId)
{0x003,0x006,0x009,0x060,0x012,0x042,0x021,0x024,0x030,0x048,0x00c,0x018,0x025,0x051,0x054,0x015,0x01A,0x029,0x00B,0x00E,0x01A,0x029}
DefaultCacheKeysFactory.getCollectionId(cacheKey)
mGpsListener != null
List<String>
selenium.isVisible("link=Control Panel")
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
c >= 32
resources.getDimension(R.dimen.close_handle_height)
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",true)
SCAN_STATUS_PARTIAL=0
3 < buf.length - count
mPendingImageUris.iterator()
new ColorPickerField("paramValue",paramVale,Color.class){   @Override public IConverter getConverter(  Class type){     return new IConverter(){       public String convertToString(      Object value,      Locale locale){         String input=(String)value;         if (input.startsWith("#"))         return input.substring(1);  else         return input;       }       public Object convertToObject(      String value,      Locale locale){         if (value.equals(""))         return value;         return "#" + value;       }     } ;   } } 
onServerStopped()
DEFAULT_WIDTH=0x008000000
enabled=true
new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.args()[0].name().toString())
value.toLowerCase().contains(constraintLowerCase)
DiagnosticType.disabled("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
mBottomLeftStrip=mContext.getResources().getDrawable(resId)
contact != null
Validator.isNull(modified)
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage))
GL20.glUniformMatrix3(location,transpose,value)
is("/home/source")
MessageBodyWriter<TestDummy>
IoUtil.delete(dir,false)
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
findCodecForFormat(false,format)
new File(projectDirectory,"pom.xml").exists()
IccUtils.gsmBcdByteToInt((byte)0x8c)
isRowVector()
applyCurrentState()
is(expectedSql)
dataType.equals("double")
CHECKIN_VERSION=31
/**   * @return a String for the summary of the preference.  */ public String getSummary(){   return null; } 
FileEntry fileEntry=new TestFileEntry(fileName,folderId,groupId,inputStream); 
externalCacheDir.getPath()
/**   * Mounts file resources in sub directories that do not exist in the main resoucres.  */ public class TestFileResourceSetVirtual extends TestFileResourceSetReadOnly {   @Override public File getBaseDir(){     return new File("test/webresources/dir3");   } } 
pw.println(ps.getInstantApp(user.id))
selenium.isVisible("link=Control Panel")
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
LoginInteractorImpl loginInteractor
DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
DEBUG=true
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
EMOJI_SMALL=0.60
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
selenium.isVisible("link=Control Panel")
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commit()
Integer minIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0
drawable.getMinimumHeight()
m.get(OutputStream.class)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
verify(issueUpdater).setSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
mMncStr == null
System.currentTimeMillis() + 1_100
methodRedefinitionResolver.hashCode()
insertBeforeCursor(editor,context)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
public class ArialBlack extends FontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
host == null
service.getDomain().getName()
subrange.getStart()
VtexApis.REPLIES_URL + id
@ConditionalOnEnablednHealthIndicator("elasticsearch")
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
typeSettingsProperties.toSortedString()
new Paint()
new StringBuilder()
return softDepend; 
assertEquals(2,dataCountsDoc.get("bucket_count"))
state == STATE_IDLE
threadContext.isRestartNextLoop()
Timber.e(e,msg)
maxInvocationCountObservedDuringWarmup * 1.2
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
mCurrentReactContext.runOnUiBackgroundQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
CollectionAdminRequest.createCollection("halfdeletedcollection2","conf",4,2)
totalMessage++ % 10000 == 1
return true; 
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.REDIRECTION)
sysPkg != null
d == 0
TextUtils.isEmpty(addresses)
_imageStorage.getFileVersionPath(fileVersion,configurationUuid)
safeRefs.addAll(safeRefs)
COOKIE_SYNC_MANAGER=true
Double rate
recipient.getNode() != null
super.remove()
log.warn("Reset to factory defaults : onOperatorError")
dic.buildRouterChain(invokers)
bitmap == null
log.warn("Error extracting callable results",e)
return false; 
this.messageService.monoPreAuthorizeBeanFindById(2L).contextStart(withAdmin)
InputMethodManager.getInstance(instance)
Integer.valueOf(optionsHelper.getOptionValue(OPTION_PERIOD))
logger.getLogger().warn("Failover took:" + (end - start) / 1000000 + "ms")
getActiveFgCall().getPhone().sendDtmf(c)
mMncStr == null
request.contains(HttpParameters.SESSIONS_PART) || request.contains(HttpParameters.PROCESSES_PART) || request.contains(HttpParameters.JNDI_PART)|| request.contains(HttpParameters.CONNECTIONS_PART)
item.setState(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
mActionBarTop.getVisibility() == VISIBLE
maxLiveColumns >= count
newNode.getNodeId()
i.getTouchIconUrl() != null
originalSchemaUserObjects.getName().isEmpty()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
new FileStructurePresenter(view,javaNavigationService,context,editorAgent,loaderFactory)
Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
new RuntimeDroolsException(this.getEvalExpression() + " : " + e)
anchor instanceof PyFile
Math.min(clientCount,1)
obj.getAcceptableTokens()
"streams:" + filter
Exception e
callback.reconnectCallback(name,jsa)
params.keySet()
props.getProperty(SAVE_THREAD_COUNTS,FALSE)
this == group.mInternalConnection
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
protocolProvider.getProtocolName()
SCROLL_BAR_SIZE=4
maxActiveSessions == null
private final Fields fields; 
i <= repeatCount
Assert.assertTrue(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
tableHasColumn(oldTableName,"templateId")
MonitoringPortletImpl.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
scores.getAlgorithmName()
child.getElementType() != TokenType.ERROR_ELEMENT
new ArrayList<>()
loaded.getLoaded().getConstructor()
functionFactory.lossMSLE(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
factory.createType(clazz,factory.createRawSubstitutor(clazz))
telephony.getDataNetworkTypeForSubscriber(subId)
getGlobalOptions().setAutoscrollToSource(enabled)
new Paint()
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).mapError(this::mapError)
photos.selectPhoto(is.getTag().toString(),true)
active && mCurrentUser != UserHandle.USER_NULL
resp.addHeader("Access-Control-Allow-Credentials",credentials)
pctx.evaluateActionQueue(workingMemory)
RoleLocalServiceUtil.getRole(companyId,name)
findDelegate(name)
imeWin.getDisplayFrameLw()
StyleConstants.setFontSize(style,16)
ImmutableList.of(sourcesAsStrings)
!returnValue
from >= to
_typeSettingsProperties.toSortedString()
new IndexWriter(directory,new SimpleAnalyzer(),true)
order.getSide().equals("buy")
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
capacity > 1 << 30
isCancelled()
createHalf(buffer.length(),init,workspace)
mStackScroller.getChildAtPosition(x,y)
cl.show(cards,CARDS_DEFAULT)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,loadedMethodType))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
ExceptionUtils.getFullStackTrace(th)
DATABASE_TYPE_MYSQL.equals(databaseType)
appearance.getString(attr)
dest.writeLong(mSubId)
TelephonyManager.getDefault().getPhoneType()
new RuntimeException(e)
Long.valueOf(val)
ret.setComplete(response)
apnContext.getWaitngApns()
failedIncomingConnection || failedOutgoingConnection
registered.add(objectName)
System.identityHashCode(this)
currentGroupByExprData[index] != null
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator())
child.getMeasuredHeight()
details.put(CONFIG_HASH_KEY,currentConfigHash)
FindByIndexNameSessionRepository<Session>
exception.toString()
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,false)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
user.getTeleport()
invalidate()
head.getNext()
mAuthorities.get(i)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
ObjectHelper.isEmpty(configuration.getClusterService())
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
NetworkAddress.format(inet.address().getAddress())
Messages.showInfoMessage(component,getErrorTextFromException(e),title)
new AssertionError("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
LOG.error("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
PreferenceManager.instantPictureUploadEnabled(this)
t != globalType
Integer.valueOf(2)
layer.mDrawable == null
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper)
oldConfig.densityDpi != newConfig.densityDpi
mUserStates.get(i)
new StringBuilder()
FRAGMENTED_OPCODES.contains(mOpcode)
mDataAuthorities == null
getExpressionTypesFromInput(TEST_SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
LOG.info("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
metaData.getColumnName(1)
from >= to
mPkg.getConfig(new ResConfigFlags())
ifcg.addr == null
new NoSuchFileException()
calendar.set(Calendar.DAY_OF_WEEK,1)
new Fault("COULD_NOT_WRITE_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
assertFalse(metaInject.init(spyMeta,data))
w == winShowWhenLocked
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
_hasGuestViewPermission(layout)
Integer.valueOf(leftStr)
methodsToImplement(methods)
auxString.substring(0,auxString2.lastIndexOf(","))
filter != null && !filter.isAccept(field)
to()
mappingData.contextPath.recycle()
classFile.matcher(file.getName()).find()
mBluetoothService.notifyIncomingA2dpConnection(address,true)
uuid.getMostSignificantBits()
InvokerHelper.getMetaClass(obj.getClass()) == mc
case 10: 
DumpUtils.checkDumpPermission(mContext,TAG,pw)
origin.realComponent().doubleValue() > other
expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser","JDK16","JDK17")
hashSymbols.keySet()
getTestName(true)
generateIndex(f,null,alreadyGeneratedFiles,alreadyUploadedFiles)
target.getAddress() == null
b == null
cookies.columnMap()
TextUtils.isEmpty(tag)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"cpuinfo",pw)
taskClass.findClassAttribute("description",false)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
query.resolutions().toArray(new String[0])
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
length % dictionarySize
mHorizontals == null
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } 
currentGroupByExprData[cachedLookupIndex] != null
new CacheCreateConfigOperation(config,true)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
regSocial * trusterWeightValue * trusterWeightValue
new ScriptField_Point(mRS,PART_COUNT,Allocation.USAGE_GRAPHICS_VERTEX)
ImmutableMap.of(columnFamily,mutations)
filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))
mCurrentVrService == null
addEnum(ArmorMaterial.class,name,durability,reductionAmounts,enchantability)
List<Long>
assertPhoneNumberEqual("123123","0123123",false)
type.getConstructor()
new File(myConfig.getWorkingDirectory(),myConfig.getScriptName())
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
binding.getEntityAttribute() != null && binding.getEntityAttribute().getName().equals(binding.getMetaAttribute().getName())
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
testInput("DateTime",DateTimeValue::datetime,ZonedDateTime.now(),ZonedDateTime.parse("1956-10-04T19:28:34.123+01:00[Europe/Paris]"),ZonedDateTime.parse("1956-10-04T19:28:34.123+01:15"))
input.read(b)
((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject())).prepareForTest(true)
Long.valueOf(nfcid2,16)
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1500
dic.buildRouterChain(invokers)
winAnimator.prepareSurfaceLocked(recoveringMemory)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,true)
event.getTime() <= currentPlayTime
layout.createSequentialGroup().addGap(0).addComponent(iconLabel,ManagerFrame.STATUS_WIDTH,ManagerFrame.STATUS_WIDTH,ManagerFrame.STATUS_WIDTH).addGap(0).addComponent(label,labelWidth,labelWidth,labelWidth).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE).addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER).addComponent(installButton,BUTTON_WIDTH,BUTTON_WIDTH,BUTTON_WIDTH).addComponent(progressPanel).addComponent(updateLabel,BUTTON_WIDTH,BUTTON_WIDTH,BUTTON_WIDTH).addComponent(updateButton).addComponent(removeButton)).addGap(16)
new Paint(Paint.ANTI_ALIAS_FLAG)
Integer.valueOf(attrValue)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
processor.open(w,request)
new ConcurrentHashMap<String,RootBeanDefinition>(64)
mMncStr == null
selenium.isVisible("link=Control Panel")
m.getClass()
createTestNet(n)
setServiceForegroundInnerLocked(r,callingUid,notification,0)
Exception e
mHorizontals == null
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
BOLD
mThumbPosition <= getThumbScrollRange() / 2
new Version(V_1_1_2_ID,true,org.apache.lucene.util.Version.LUCENE_4_7)
SERIAL_VERSION_UID=420L
this.getChildCount() > 1
file.getFileName()
globalExecutionStats.getSplits()
constraints.weightx=0f
new Paint(Paint.ANTI_ALIAS_FLAG)
_imageTrain.loadModel(networkParms)
(task=writeQueue().poll()) != null
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
featuresMask != null
mContext.startActivity(intent)
STMT_CACHE_CLEANUP_TIMEOUT=1000
ProblemDescriptor descriptor
mgr.mergeSegments(cube,0,2000)
setTargetBuildConfigurations(buildable,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
callTimeoutMs=5000
new HttpSender(connectionParam,true)
expected=128
support.isFlexUnit1SuiteSubclass(aClass)
NullPointerException.class
info.getType() & 0x7
handleIncomingUser(callingPid,callingUid,userId,false,ALLOW_NON_FULL_IN_PROFILE,"checkContentProviderPermissionLocked " + cpi.authority,null)
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
Thread.sleep(50)
responseString(p)
lineArgs[3]
node.getName()
2 * BUFFER_SIZE
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
entity.getNotes()
si.id == id
striped.get(key).readLock()
Internal.prefixKeyWithSalt(key_a)
um.isUserUnlocked()
LOGGER.debug("Could not open folder",ex)
nextOption()
option == JOptionPane.CANCEL_OPTION
assertEquals(12,beanCount)
logName()
out.write(ENUM_CONSTANT_VALUE_TAG)
count > 1
ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(false)
!cursor.moveToFirst()
c.deactivate()
savedNetwork.setParameters(newParams)
sqlType == Types.NUMERIC
sentence.getTokens()
InstrumentationHandler.this.attachSourceListener(this,filter,listener,includeExistingSources)
spec.getClass()
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
Float.toString(f)
selenium.isVisible("link=Control Panel")
++lineCount
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1)
getTestName(true)
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
LOGGER.debug("Could not execute open URL",ex)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,fromX,y,0)
(short)0644
Long.valueOf(name)
value.getType().getCanonicalName()
height - 48
configuration.getPluginArtifactRepositories()
ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS=450
event instanceof ArtifactCacheEvent
new IllegalArgumentException()
evaluate("value = read_config('foo', 'bar')").lookup("value")
loaded.getLoaded().getConstructor()
Float.valueOf(value.toString())
editor.commit()
mReason=REASON_HARDWARE
i <= 0
drs.setTotalRecords(1)
cassandraProperties.getUsername()
acrComparator.compare(prevRow,compactedRow) > 0
mappers.mapper().searchAnalyzer()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
i + 1
selenium.isVisible("link=Control Panel")
type.getKind()
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
synchronized (mAccounts) {   writeStatisticsLocked(); } 
securityMode != SecurityMode.None
10 * Constants.SECOND_MS
Foo<Number>
mFirstNotificationMillis=-rateLimitMillis
super.getHibernateTemplate().executeFind(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Example example=Example.create(arg).ignoreCase();     Criteria crit=session.createCriteria(clazz);     crit.add(example);     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
new UnsupportedTemporalUnitException("Should only attach offsets to local times, not zone ids.")
Long.valueOf(args[1])
dateOfBirth == null
selenium.isVisible("link=Control Panel")
config != null || !config.isEmpty()
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
descriptor.superinterfaces.size() > 1
drawPath(g)
logger.warn("Cannot play TuneIn station {} ({})",stationId,e.getMessage())
parts.length > 1
PsiUtil.resultOfExpressionUsed(grAssignmentExpression)
selenium.isVisible("link=Control Panel")
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
postForm=false
Person person=new Person(); 
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
new CompositeException(e,t)
new RuntimeException("Unexpected endpoints returned from the Routing Generator")
POOL_LIMIT=12
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
node.getName().getName()
mSeekBar.setProgress(0)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
getUserStateLocked(callingUid)
name="java:/topic/myAwesomeTopic"
c == separatorChar
writeString(writer,String.valueOf(reader.getByte()),fieldName)
new ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
flags != 0
numDocs <= docCount
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
Publication addPublication(final String channel,final int streamId){   ensureOpen();   stashedChannel=channel;   final long registrationId=driverProxy.addPublication(channel,streamId);   awaitResponse(registrationId);   return (Publication)resourceByRegIdMap.get(registrationId); } 
_typeSettingsProperties.toSortedString()
USE_ROULETTE_WHEEL=true
i == -1
dis.read(serializedData,0,length)
new ByteBuddy().subclass(Object.class).name("example.Type").make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
/**   * Returns last child <b>element</b> node or <code>null</code> if no such child node exist.  */ public Node getLastChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[childElementNodes.length - 1]; } 
Log.e(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
layerConfig.get(LAYER_FIELD_DROPOUT_W)
editedGroup.getClass() == SearchGroup.class
findCodecForFormat(false,format)
selenium.isVisible("link=Control Panel")
log.info()
packageManager.getApplicationInfo(packageName,0)
readSync.notify()
LOG.debug("Skipping incompatibly changed class: " + className)
cors.isEnabled()
e != null
logger.info("license [{}] - valid",license.uid())
ignoreUnknown=false
selenium.isVisible("link=Control Panel")
ConstantLocationNode.create(FINAL_LOCATION,Kind.Int,runtime.getConfig().arrayLengthOffset,g)
selenium.isVisible("link=Control Panel")
r != null
index > 0
host.getHostText()
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false)
BufferUtil.toDebugString(prefilled)
data != null
Context.getGeofenceManager() != null
mConnector.executeForList("volume","list")
new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
Looper.getMainLooper()
cv.visitVarInsn(ALOAD,resultIdx)
pixmap.drawCircle(x,y,radius,color)
getParameterValues(request,param)
IndexReader.open(benchmark.getRunData().getDirectory(),true)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
targetActor.addCaptureListener(listener)
log.warn("Error processing event, NOT scheduling retry for event='{}', retryNb='{}'",originalNotificationEvent,effectiveDate,retryNb,exception)
checkResources(app)
Collections.sort(backends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
Set<Item>
AbstractItem<ImageItem,SimpleImageItem.ViewHolder>
this.urlPathHelper.getRequestUri(request)
selenium.isVisible("link=Control Panel")
lastPos != mBoundPos
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
instance.getPublicDnsName()
private final CircularClipper mClipper; 
getSelectedColorRes()
cachedDevice != null
callbacks.onImageLoadingFailed()
heatpumpValues[65]
target.directory("zk" + id + "data")
((BCECPrivateKey)privKey).getS()
setServiceForegroundInnerLocked(r,userId,notification,flags)
original.getScreenName().endsWith("new")
smartLockHelper != null
m.muli(beta1)
clickListener_OnClickListener == null
IDLE_TIMEOUT=100
new IndexWriter(dir,analyzer)
checkBoxView.setBackgroundResource(R.drawable.btn_check)
_log.error(e)
new EmbeddedKafkaCluster(3)
longSize >= 800
jniGetLocalAnchorA(addr,tmp)
WikiPageLocalServiceUtil.movePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
myLastPoint.isNull()
Assert.assertEquals(21,balances.size())
Boolean.valueOf(getOptional("kylin.query.skip-empty-segments","true"))
fundingUnsuccessfulTextView.setText(bannerSuccessfulString)
enabled=true
name == null
public static final Object NO_SETTINGS=new Object(); 
return 0; 
StringUtil.isNotEmpty(functionName) && o.getContainingFile().getImportMap().containsKey(functionName)
l.maxComputers(lic.maxCpus())
id=15853
maxMergedSegmentBytes / 1024 / 1024.
Status.constructStatuses(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
items[30]
windowStart <= messages.length
partOfStatement.getLibraryId().toString()
query.length()
Assert.assertTrue(_clusterInvokeAcceptor.accept(context))
tracesFile.mkdirs()
httpResponseCode == 204
args[0]
retry.attemptRetry()
Double.class
updateViewsVisibility(mIconifiedByDefault)
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " failed to instantiate "+ cast.getName(),e)
mMat[9]
final SimulatedTrackball mSimulatedTrackball; 
mState != STATE_FINISHED
this.healthMvcEndpointProperties.getMapping() != null
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now))
new RuntimeException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
javaVersion < 9
new ArrayList<>(modifiers.length())
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0)
result.routes[0].legs[0].steps[0]
new EnterSelectionDialog(shell,props,files,Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogMessage"))
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(calendarBooking,0,false)
routeInd + 2
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath")
Object data
createHalf(buffer.length(),init)
OptionalIdentifiedType<FromDefinition>
Log.error(e)
getWebElement(webDriver,locator,"1")
30 * 60 * 1000
!mDreamsEnabledByDefaultConfig
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
mNotificationsUtilsWrapper.mapJsonToFormattablbeContent(bodyArray.getJSONObject(i + 1))
bdtemp.floatValue()
socket.isOutputShutdown()
n.getNodeData().getId().toLowerCase().contains(str)
index.getName()
matchingUri.equals(targetUri)
res.getObject().isStopApplicable(res.isForwardDirection(),intId)
websocketComponent.setMaxThreads(11)
(ArrayInitHandler)getParent()
args[0]
assertThat(list.isInternal()).isFalse()
selectedPos < lastPos
checkPojoMetaClass()
Arrays.asList("Hidschāb/S","Dvořák/S","Erdoğan/S","Ångström","µg","µl","µm","'Ndrangheta","McDonald's")
ActionsEnum.valueOf(action)
StringBuffer output
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_START)
!handler.isDifferent(existing)
accountCapsule.getLatestAssetOperationTime(tokenID)
LocalFileSystem.getInstance().findFileByIoFile(new File(path1))
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
projectsEntryPersistence.update(projectsEntry)
newEmbeddedDatabaseBuilder(path)
public String getHeight(){   return height; } 
schemeSpecificParts != null
expectedCountsForADoc(weights,ind)
position == 0
entry.rxBytes == 0 || entry.txBytes == 0
selenium.isVisible("link=Control Panel")
visibility != View.VISIBLE
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new DatagramDnsQuery(addr,null,1)
addContactButton.setPressedImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
treePathTraverser(tree).expand(tree::isExpanded)
myCell.getStream()
private final CompoundShelfFileProcesor myFileProcessor; 
Identity id=gormMapping.getIdentity(); 
StringBuffer buf=new StringBuffer(); 
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class)
fingerId == 0
new ClassExpression(ClassHelper.make(text))
BeanMapper.mapList(books,Book.class,BookDto.class)
selenium.isVisible("link=Control Panel")
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
msbFragmentCollection.getFragmentCollectionId()
new StringBuilder()
new BadRequestException()
new S3DataSegmentMover(mockS3Client)
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
(byte)0xF7
expectedCountsForADoc(weights,ind)
retVal.put(entry.getKey(),value)
addFilter=false
checkPojoMetaClass()
getTimeout()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new CircularClipper(mDetail)
each.getCanonicalPath()
ByteBuffer.allocateDirect(4)
noteAcquireWifiLock(wifiLock)
JettyWebSocketServer.LISTEN_PORT.getName()
data.getAvatar() != null
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
LOG.info("{} failed to start",processRef)
isCreated()
mConnector.executeForList("volume","list")
new GlobalStatusEnum(65,FREE_FOR_CHAT_STATUS,loadIcon("service.gui.statusicons.USER_FFC_ICON"),"service.gui.FFC_STATUS")
LOGGER.lifecycle(msg.apply())
dbManager.getHeadBlockId()
inserter.release()
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
DLFolderLocalServiceUtil.deleteFolder(parentFolder.getFolderId())
ifcg.addr == null
lastVersionNumber + 1
iconSize * DisplayMetrics.DENSITY_LOW > availableHeight
connectedHeaders.setAcceptVersion("1.1")
logger.debug("testConcurrentServiceTicketGeneration produced an error",e)
isBigDecCategory(typeRe)
query.length()
near.remove(1)
!domElement.isValid()
Vector other=(Vector)obj; 
entry.rxPackets == 0 || entry.txPackets == 0
id.errorIfMissing()
m.getClass()
String.format("User [%s] doesn't exist",username)
this.url
mWM.isKeyguardSecure()
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Throwable {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
!cursor.moveToFirst()
FileMetadataSnapshot.missing()
return false; 
builder.breakToFill(" ")
method.getGenericReturnType().getTypeName()
mHidProfile.isProfileReady()
selenium.isVisible("link=Control Panel")
pMotionEvent.getX(1)
mAuthorities.get(i)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     Disposer.dispose(module);   } } )
Base64.getMimeEncoder()
public TokenStream create(TokenStream input){   return new RemoveDuplicatesTokenFilter(input); } 
TelephonyManager.getDefault().getPhoneType()
PathUtils.concatPath(filePath,YML_FILE_DIR)
disableForUser(what,token,pkg,mCurrentUserId)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
logger.error("Could not commit session",t1)
setUp(new JZDataSource(url),0,screen,objects)
actual.getAll()
DocumentationManager.storeOriginalElement(PlatformDataKeys.PROJECT.getData(dataContext),element,originalElement)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
exitCode != 0
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
mAssetManager.openNonAssetFd(mAssetName)
src.getPath()
getContext()
SocialActivityInterpreterLocalServiceUtil.interpret(selector,_activitySet,serviceContext)
PaginationTestUtil.of(10,1)
LOG.warn("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
Integer requestRequiredAcks
rsMeta.getColumnName(i + 1)
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements","testGettingVerticesAndEdgesWithKeyValue")
free(path,false)
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=4
is(false)
LOG.info("Ganglia server component is not live")
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
LOGGER.debug(e.getMessage(),e)
@Override public ResponseImpl header(String name,Property property){   addHeader(name,property);   return this; } 
selenium.isVisible("link=Control Panel")
new ExchangePatternType(exchangePattern)
CachedValuesManager.getCachedValue(newExpression,new CachedValueProvider<MethodCandidateInfo>(){   @Nullable @Override public Result<MethodCandidateInfo> compute(){     return new Result<MethodCandidateInfo>(getStaticFactoryCandidateInfo(psiClass,newExpression,context,argumentList),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);   } } )
thumbView.setTag(Video.getUrl(trailer))
log.error(error,cause)
error("Unable to connect due to unrecognised server certificate")
((BufferControl)ctl).setBufferLength(130)
DateUtils.getStartOfToday()
mInterpolator == null
Thread.sleep(5000)
Log_OC.wtf(TAG,"onAccountChanged was called with NULL account associated!")
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
options.get("wireFormat")
out.write(CONSTANT_VALUE_ARRAY_TAG)
message.getCounterpart()
destination.length + offset
chatCommandManager.registerCommand(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
row("p_comment",null,1.0,0.0,null,null,null)
new IndexWriter(dir,analyzer,true)
srcCount >= 1
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
Instrument.create(null,new AdvancedInstrumentRootFactory(){   public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return null;   } } ,"test AdvancedInstrument")
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
temporaryFolder.getRoot()
PreferenceManager.instantPictureUploadEnabled(context)
len > bits.length
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,sessionTimeZone,sessionTimeZone)
cookie.getMaxAge()
fieldTree.setStandalone(false)
taskFile.getAnswerPlaceholders().isEmpty()
node.order()
e.getMessage()
allocator.getFlowController().prepareAction(input,epsilon,activations,nextEpsilon)
new TaskData(true)
GETHOMEDIR
isDistinct(child)
logger.debug("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
retriever.captureFrame()
ClassNotFoundException.class
super.onRequestSendAccessibilityEvent(child,event)
emitScript(scriptStartNdx,ndx)
statistics.addPutTimeNano(System.nanoTime() - start)
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message")
data != null
new IndexWriter(merged,new StandardAnalyzer(),true)
exitCode != 0
assertEquals(0.21926955145068244,mse,1e-8)
logger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
myName.setIcon(AllIcons.Nodes.Pluginobsolete)
mService.enableNetwork(netId,attemptConnect,mContext.getOpPackageName())
node.has(Constants.ALIAS)
conf.getInt("fuzz")
offset=1
getResource(exchange).otherwiseIfEmpty(Mono.defer(() -> {   logger.trace("No matching resource found - returning 404");   exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);   return Mono.empty(); } ))
!OpeningHoursParser.parseOpenedHoursHandleErrors(openingHours.getOriginal()).toString().equals(openingHoursString)
propEditor != null
selenium.isVisible("link=Control Panel")
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_HIGH)
payload.get(MEETING_ID)
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
PrintAttributes.enforceValidColorMode(currentMode)
NATCommand.check(externalAddress,InetAddress.getByName(ipv6Str))
sep < 0
row1 * layerTileHeight
dest.writeParcelableArray(remoteInputs,flags)
renderManager.render(tpf)
setNumber(String.valueOf(integerPart))
methodName.startsWith("save")
logger.error(log)
contact.getUser()
validateFriendlyURL(groupId,user.getCompanyId(),classNameId,classPK,friendlyURL)
(line=reader.readLine()) != null
concurrent(driver,dataSource,100)
ParamUtil.getString(actionRequest,"publish")
into.get(i)
root.toURL()
ColorKey.createColorKey("MT_" + allFileStatus.getId(),null)
ir.mHandler != null
this.transactionsRepository.removeTransaction(this.xidTransactionID)
lhs == null
8 * Bytes.SIZEOF_LONG
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
TelephonyManager.getDefault().getPhoneType()
new Insets(2,6,2,6 + 6)
info.crashInfo.stackTrace.length() > 10000
15 * 60 * 1000
InsertFinalStep<R>
settings.readLPw(null)
new IllegalArgumentException()
node.incrementReferenceCount()
Long id
getTypeDescription(exceptionType)
new L2Vertex(null,"",-1)
position - dockDividerWidth
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")))
agentInfo.get().versionCode.equals(AgentUtil.AGENT_VERSION_CODE)
Assert.notNull(jarScanner,"Patterns must not be null")
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
position.setEmpty()
nodeColumn.getIndex()
getServerSslContext()
getRepoUrl().equals(gitHubRepo.getRepoUrl()) & getBranch().equals(gitHubRepo.getBranch())
new FrameTask.DataInfo(train,1,false,true,!classification,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
sharedPref.getBoolean(SettingActivity.SHOW_BIG_PIC,true)
fm.beginTransaction().add(R.id.stats_container,mStatsPhoneFragment)
log.warn("Can't set auto-commit state: " + e.getMessage())
chargeUAh > 0
new Documentation(__ -> Optional.empty(),__ -> Optional.empty(),null,null,null)
IBackupManagerService svc=mService; 
assertEquals(8,config.getMapConfigs().size())
Mono.currentContext()
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=10
@Nonnull Integer versionId
entry.leadershipTermId != leadershipTermId
new ServerData("Command Line",host + ":" + port)
addHeaderSymlinkTree(builder,params.getBuildTarget(),ruleResolver,flavor,headerVisibility,includeType)
Float.valueOf(strings[i])
selenium.isVisible("link=Control Panel")
NOTIFICATION_SERVICE_ID=1
navigateToUri("https://www.google.com/accounts/Logout",false)
AllGlsJavaTestsSuite.suite()
resultTabs.getItemCount() - 2
type.getConstructor()
getParents(directory,owner).first(dir -> Comparing.equal(element,dir.getVirtualFile()))
nextY < 0
ignite.cache(CACHE_NAME)
appearance.getFont(attr)
scannerSupplier.filter(bci -> namedCheckers.contains(bci.canonicalName()))
this.getDependencies()
from >= to
new CrypticClue("This crate is mine, all mine, even if it is in the middle of the desert.",new WorldPoint(3289,3022,0),"Center of desert Mining Camp. Search the crates. Requires the metal key from Tourist Trap to enter.")
!isPartialUpdate
expandableView.getActualHeight()
currLine > mPrevLine
packetType == AVC_PACKET_TYPE_AVC_NALU
selenium.isVisible("link=Control Panel")
message.getCounterpart()
ArrayUtil.mergeArrays(javaClassReferences,additionalReferences)
Item.itemsList[item.itemID].func_82790_a(item,0)
GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))
entry.getKey().isEmpty()
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
Arrays.<Object>asList(ipFinder)
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
(data[readAt++] & 0xffL) << 58
onCreateView(mContext,appWidgetId,appWidget)
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
LOG.error(e)
new UnsupportedOperationException()
readRecord(id,record,CHECK,cursor)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
dockedBounds.right + adjustment
TestPropsValues.getGroupId()
SceneApplication.getApplication().getRenderer().readFrameBuffer(offBuffer,cpuBuf)
typeSettingsProperties.toString()
diagnosedRanges.remove(2)
selenium.isVisible("link=Control Panel")
new DateTime(2012,3,2,23,59,59,0,testTimeZone)
mGpsListener != null
scorecard.isUseReasonCodes()
packetId == 0x18
input.getPath()
Simple.of(Tuple.class)
LookupElementFactory.getInstance().createLookupElement(element,referencedName)
Cleaner.create(this,new Closer(mFileDescriptor,mMemoryRegistration))
tok.getID()
new V(1,new BooleanSetting(true))
(o instanceof Record)
getLogger().error("Unknown classloader: " + loader.getClass().getName())
sanitizedName(name)
Validator.isNull(portalVersion)
target.getUri()
mLastEvent.getStartTime()
TransactionMetadata::setInActive
selenium.isVisible("link=Control Panel")
lastPos != mTargetPos
expirationTime == Long.MAX_VALUE && expirationTime < 0
verify(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
fieldDescriptor.getName()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
typeMismatchError=true
ticket.notify()
ire.printStackTrace()
LensPositionSelectors.external()
c == Integer.class
createHalf(buffer.length(),init)
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",realSubStepName)
args.length < 1
new RandomIndexWriter(random,directory)
config.getMaxElementsInMemory()
pk.getColumnName()
logger_.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
this.mTextureRegions[pTileIndex].setTextureY(pTextureX)
this.messageService.fluxPostAuthorizeBeanFindById(1L).contextStart(withUser)
Class<T>
NB_CACHED_PARAMS=20
DBCException e
new Error(me)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
storedOverlayInfos.get(i)
new String(bytes)
Throwable e
findTearDownMethod(psiClass)
starting != null
attribute.getFieldName()
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
nodeEngine.getService(LockService.SERVICE_NAME)
logger.warn("Favorite '{}' not found",favorite)
newDefaultSubIdObj.equals(mDefaultSubId)
new IOException(msg,ex)
String.format("%s : filtering out %s as it's stats is unavailable.",MINIMUMFREEMEMORY_FILTER_NAME,filteringTarget.toString())
queueIndex < 0
PrintAttributes.enforceValidColorMode(currentMode)
new LayerView(this,0xff00ff00)
LOG.assertTrue(true,"Invalid element: " + elementAt)
Arrays.sort(hyperParamNames1)
name != null
scores.getAlgorithmName()
cc.isLazy()
IBackupManagerService svc=mService; 
extras.getInt("fragment")
state.isKeyguardShowingAndNotOccluded()
right >= sourceWidth
slash < 0
new Dimension(700,400)
ev.getAction() == MotionEvent.ACTION_DOWN
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE)
ChronicleEngineEnpoint.class
Exception exc
Utils.parseBoolean(name,defaultValue,true)
new Long(post.getId())
NullPointerException.class
Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB
MIN_DIMENSION_TO_RECUR - (int)maxX
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
mDataSetObserver != null
number.equals("A")
counter >= max
recipient.getExpireMessages() * 1000
mWm.freezeRotation()
AWAKE_INTERVAL_DEFAULT_MS=5000
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
PushImageCmdImplTest.class
new Intent()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
httpServletRequest.getParameterValues(name)
mAuthorities.get(i)
rw.release()
logger.error("Starting Jetty Azkaban Executor...")
new ZooKeeperServer(dataDir,dataLogDir)
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=true
logger.info(e.getMessage(),e)
ParamUtil.getLong(uploadRequest,"nodeId")
nextMapping == null
100 * width
shadowSize == 0
BigInteger.valueOf(0xffffl)
runelite.getEventBus().unregister(logger)
realm.assertThread()
Thread.sleep(500)
public Void execute(Context context){   KieSession ksession=((KnowledgeCommandContext)context).getKieSession();   if (this.outIdentifier != null) {     ((StatefulKnowledgeSessionImpl)ksession).getExecutionResult().getResults().put(this.outIdentifier,object);   }   ksession.setGlobal(this.identifier,this.object);   return null; } 
times(2)
DBG=true
setDuration(playedDurationWhenStarted + position - startPosition)
BeanMapper.mapList(books,Book.class,BookDto.class)
SHUTDOWN_VIBRATE_MS > 0
handleActiveAutofillServiceRemoved(getChangingUserId())
out.writeLong(length())
FileUtils.write(fileWithBom,FileUtils.readFileToString(jsFile),true)
UnsupportedOperationException.class
mDropDownAlwaysVisible
OrganizationMembershipPolicyUtil.checkRoles(null,filteredSiteUserGroupRoles)
body.getContentType().restContentType()
mAimsicdService.getCellTracker().updateNeighbouringCells()
super.getLikeProvider(path)
minutes >= 2
in.readObject()
sortByDate(false)
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,0)
c < 'z'
sep < 0
indexOfSlashN != -1
Long.valueOf(subSecs)
@Override public Value emitBitScanReverse(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IBSR,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LBSR,result,asAllocatable(operand),this));   }   return result; } 
LOG.error(e)
mRS.nMeshGetIndices(mID,idxIDs,primitives,vtxCount)
NoopChatHandlerProvider.class
item.getClass()
location.getAccuracy() < precision
a.getDimensionPixelOffset(attr,0)
Thread.sleep(5000)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
i != Integer.MAX_VALUE
!mIsRecentsShown || !mIsPipFocusedInRecent
Objects.isNull(value)
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null)
route.isEmpty()
dictionary.get("type")
mBouncer.show(true,false)
capacity > 1 << 30
network.successors(producedNode)
DEBUG=true
new OkHttpClient.Builder().connectTimeout(10,TimeUnit.SECONDS)
keyBindings.checkSearchResultKeyBinding("open",6)
nodeData.getAttributes() == null
sliceInput.length()
ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsManifestResource("META-INF/batch-jobs/myJob.xml","batch-jobs/myJob.xml")
Validate.configurationDirectoryExists(javaHome,"controllerJavaHome must exist at " + controllerJavaHome)
LOG.error("Unable to unmarshall exception content",e)
centroid.size()
QMMObject[]
cctx.gridEvents().isRecordable(EVT_CACHE_OBJECT_READ)
reverseSpeedEncoder.getBits()
restrictedFilters.load(is)
charArray.length * 2
application.getApplicationContext()
mActiveStreamType == -1
mHandler.postDelayed(pae,timeout)
getRight() + getPaddingRight()
new InvokedMethod(tr.getTestClass(),tr.getMethod(),new Object[0],true,false,tr.getStartMillis())
new ThingUID(WEMO_INSIGHT_TYPE_UID,device.getDetails().getSerialNumber())
new Configuration(inputParam,m7zipPath)
pti.getTotalFields()
mHotspotBounds.set(left,top,bottom,right)
getActiveFgCall().getPhone().sendDtmf(c)
" firstActiveTime=" + lastActiveTime
new StringBuilder(561)
this.propertyDescriptorCache.put(pd.getName(),pd)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
builder.startArray("upgraded_indices")
lhs.getScore()
new AutoBuffer().put(this).bufClose()
mNextNonWakeupDeliveryTime > nowELAPSED
getTestName(true)
serialVersionUID=1983327111
catalog.entries()
Math.min(o.outWidth / targetWidth,o.outHeight / targetHeight)
adapter.callback != null
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/testData/navigation/gotoSuper"),Pattern.compile("^(.+)\\.test$"),TargetBackend.ANY,true)
w == winShowWhenLocked
StringBuffer builder=new StringBuffer(); 
setInputMethodEnabled(info.getId(),true)
"" + docCount
request.mConnectionID != null
new BooleanPreference("use_high_res_maps",false,false,true)
"Using bind address: " + publicAddress
new LeftTuple(f0)
myWidthProvider.compute() / 2
child.getMeasuredHeight()
token != null
hasCollapsibleActionView()
Integer.MIN_VALUE + 11
tblObj.getDataLocation()
Integer.valueOf(attrValue)
SmsHeader.toByteArray(header).length + 1
child.resetResolvedLayoutDirection()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
0.09f * mainUnitInMeters
p + "." + M_ITERATOR
am.blockingGetAuthToken(account,AccountTypeUtils.getAuthTokenTypePass(account.type),false)
System.getProperty(key,"")
mNwService.getInterfaceConfig(mInterfaceName)
Exception e1
hasPermission(permission)
@Priority(5)
return MICROSECONDS_OF_SECOND; 
mSharedElementNames.size()
item.getAddress().equals(id)
new NoSuchMethodError()
/**   * Needed for statistics.   */ private final LongAdder finishedJobsCnt=new LongAdder(); 
new BufferedImage(10,height,BufferedImage.TYPE_INT_RGB)
EditorHelper.normalizeOffset(editor,res,false)
pixmap.getHeight() - yHotspot - 4
pgl.initTexture(glTarget,width,height,PGL.GL_RGBA,PGL.GL_UNSIGNED_BYTE)
type != BlockType.TOP_UP
assertEquals(builder.defaultLbPolicy,"pick_first")
applicationContext.destroy()
enabled=false
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY)
cmd.append("upsert",returnNew)
CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(getProject()); 
FilterModifWord.modifResult(result)
setBackgroundDrawable(null)
getPreferences().getBoolean(DEBUG_PREF,true)
TelephonyManager.getDefault().getPhoneType()
IWorkbenchPartSite.class
currentToken.hasType("operator","comment","numeric")
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
lock.tryLock(1000,MILLISECONDS)
new SparkRuntimeContext(p)
query(new JSONPointer(jsonPointer))
JsonWriteContext.createRootContext()
cursor.getString(COLUMN_VALUE)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")))
getTestName(false)
Integer.valueOf(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
data[0].charAt(0)
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
new MediaController(token)
s <= 100
DecimalUtility.getDecimal18FromBigDecimal(bigDecimal,precision,scale)
myDispatcher.addListener(l)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("jps-plugin/testData/incremental/lookupTracker"),Pattern.compile("^([^\\.]+)$"),true)
new ArrayList<>()
!cursor.moveToFirst()
flags.length == 0
((FillLayout)parentLayout).marginHeight=5
c == Float.class
SingleModel<V>
CharSequence message
annotations.isEmpty()
state.isGloballyTerminalState()
DEBUG=true
log != null
button.buttonGroup()
LOG_SERVICE_START_STOP=true
myAccountPortlet.getPortletName()
LLVMWriteAddressNodeGen.create(stackPointer,frameDescriptor.findFrameSlot(LLVMStack.FRAME_ID),sourceSection)
entry.doesSupportPartial()
logger.info("Calimero library version {}",Settings.getLibraryVersion())
Mono.currentContext()
mWorkerId + BASE_FILE_NUMBER
builder.timeValueField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
mSeekBar.setProgress(mVolumeBeforeMute)
service.asBinder().isBinderAlive()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN)
new DoubleInetAddressDns()
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"results"),connection,transformer(source,connection))
getStaticCatalog(from,requestedDate,subscriptionStartDate)
new JavaScriptServlet()
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,port)
parcel.writeCharSequence(mViewIdResourceName)
from >= to
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
pipe != null
ObjectStreamClass.lookupAny(clazz)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
UNDEFINEND
Arrays.asList("onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
(ret == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
case REPLACE_IS_SAME: 
_classPathReferences.contains(file)
new ConditionVariable()
Long.valueOf(attrValue)
selenium.isVisible("link=Control Panel")
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId))
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
indexSettings.get("fpp")
BeanUtils.instantiateClass(this.executorType,FeatureSpecificationExecutor.class)
tag.setLabelPosition("top")
details.put(CONFIG_HASH_KEY,currentConfigHash)
@CheckForNull Integer getVersion(); 
new IndexShardRoutingTable.Builder(new ShardId(WatchStore.INDEX,0),false)
config().useCompressedKlassPointers
lock.isLocked()
assertEquals(12,commits.size())
index=0
event.isCanceled()
mAttributes.getFlags()
getBackgroundNetworkFetchToEncodedMemorySequence()
Assert.assertEquals(3,clusterEventListeners.size())
connection.setSchema(name)
ImmutableSet.of("reportUnknownTypes")
collectJSVariables(clazz,candidates,false,false,true,true)
immediate=false
LOG.warn(ex.getLocalizedMessage(),ex)
LOGGER.error("The principal id attribute [{}] is not found. CAS is configured to disallow missing principal attributes")
currentNumOfAttempts == maxAttempts
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
tagService.getTagsAsString(task.getId())
getFailedExecutionException()
mSpinner != null
context == null
Long.valueOf(args[2])
RequestContext.create()
deferUpdateBounds(RECENTS_STACK_ID)
sharedOptsCount.contains(thread)
Database.builder()
sourcepath.isEmpty()
finish()
StepVerifier.create(Flux.just(1).thenEmpty(Flux.empty())).expectComplete()
from=PERSISTENT_ALL_CACHES
ph_sample[i]
TelephonyManager.getDefault().getPhoneType()
XSLContentWebUpgrade.class
new String[0][]
@Override public final Object createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
mGpsListener != null
checkPojoMetaClass()
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
labelIndex >= 0
currentConditionType[0]
selenium.isVisible("link=Control Panel")
isSecureText
new boolean[nrfields]
SURFACE_SELECTOR=25
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
msg.payload().copy()
taskOutput.getState().isDone()
numberOfIntercept.incrementAndGet() == 1
endpoints.addAll(entry.getValue())
doNotAskDialogOption != null
offset=e.startOffset
str.chomp_bang19(context)
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true).incompatibleDisallowFileType(true).incompatibleDisallowLegacyJavaProvider(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false)
Thread.sleep(1000)
duration.getMinutes()
SiteNavigationMenuWebUpgrade.class
id.provider.info != null
Metric<Long>
ImmutableSet<ImplemetationMethodDescriptor>
config.isAutoRead()
StringUtil.isNotEmpty(name)
!list.append(ai)
request.getTaskDefinitionKey()
Color.fromRGB(0xF0F0F0)
WikiTestUtil.addPage(TestPropsValues.getUserId(),(Long)parentBaseModel.getPrimaryKeyObj(),ServiceTestUtil.randomString(),keywords,approved,serviceContext)
mCheckUnusedThrows=aFlag
allGroupingColumns.isEmpty()
ActivityManagerNative.getDefault().updateConfiguration(config)
response == null
channel.close()
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
getJndiString(JNDI_JMX_PASSWORD)
destinationName == null
this.registrations.get(handler)
insertOrder("ds1")
contentType.getCharSet()
lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
Log_OC.e(TAG,"onCreateView")
IndexReader.openIfChanged(reader)
getDefaultLanguage()
node.getLifecycleService().terminate()
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
css.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
TCN_REQUIRED_MINOR * 100
loaded.getLoaded().getConstructor()
sl.size() == 1
CalciteTests.createMockSystemSchema(druidSchema,walker)
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class)
new MapProducerCapabilities(false,false,false,true)
ColorResources.getColor("scrollBarTrackHighlight")
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
onPackageDisappeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
super.onResolveLayoutDirection(layoutDirection)
registerListPreference(settings.PREFERRED_LOCALE,screen,idsPl,valuesPl)
return false; 
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
200000 * 4 * 4
mCurrentVrService == null
Integer.valueOf(quantifier)
message.addHeader("Message-ID",cursor.getString(12))
apex.installPackage(mResolvedBaseFile.toString())
for (CommittedChangeList list : myLists) {   final SvnMergeInfoCache.MergeCheckResult result=myMergeChecker.checkList((SvnChangeList)list);   if (SvnMergeInfoCache.MergeCheckResult.MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.MERGED);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.ALIEN);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS_PARTLY_MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.NOT_MERGED);   }  else {     myStatusMap.put(list.getNumber(),ListMergeStatus.REFRESHING);   }   --cnt;   if (cnt <= 0) {     ApplicationManager.getApplication().invokeLater(new Runnable(){       @Override public void run(){         myRevisionsList.revalidate();         myRevisionsList.repaint();       }     } );     cnt=10;   } } 
!entry.cacheContentViews(mContext,notification.getNotification())
IndexReader indexReader=tuple.v1(); 
MA_AddMessageTest.class
getModifiableRootModel()
selenium.isVisible("link=Control Panel")
JSONFactoryUtil.looseDeserializeSafe(cmd)
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBefore(new Date())
specModel.getProps()
if (mIsEnabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
return false; 
getContext()
final PatternBasedPackageSet packageSet=(PatternBasedPackageSet)currentScopes[descriptor.getIdx()].getValue(); 
model.getVisibleColumn(cell.col)
if (DBG) loge("Exception trying to remove a route: " + e); 
1 << 6
RedisRunner.startDefaultRedisServerInstance()
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
Integer.valueOf(2)
sn != null
ar.cause()
assertEquals(2,possibleOutcomes.size())
CHECKIN_VERSION=31
latch.await(10,TimeUnit.MILLISECONDS)
inner.deletedNodes()
i >= 0
myBuilder.enableEols()
Character.isSpaceChar(origText.charAt(i))
new LiferayLocalRepository(repositoryId)
myRegisteredPasses == null
fixture.checkResultByFile(after,true)
k < THREADS
message.getExpiresInSeconds() * 1000
item.getClass()
new Paint(Paint.ANTI_ALIAS_FLAG)
type == null
mSharedElementNames.size()
!timeout
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mWorkSource,mResultStorages,ActivityThread.currentOpPackageName())
new SystemVibrator()
!mIsRecentsShown || !mIsPipFocusedInRecent
WRONG_SHARED_SECRET=1001
testClass.getMethod(SUITE_METHODNAME,new Class[0])
LanguageLevel.getDefault()
request.getClientAttributeNames()
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
storedOverlayInfos.get(i)
testClass.getMethod(SUITE_METHODNAME,new Class[0])
new FilePathImpl(new File(path.substring(0,pos)),false)
request.addHeader(h.getKey(),h.getValue())
layer.setLayerPaint(paint)
indexSettings.get("fpp")
bop.getBindingInput()
Integer.valueOf(taskIdStr)
new HashSet<>()
side.toString()
a.getDimensionPixelOffset(attr,0)
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
public Object mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Game game=new Game();   game.setId(fs.readString("id"));   game.setYear(fs.readInt("year"));   game.setTeam(fs.readString("team"));   game.setWeek(fs.readInt("week"));   game.setOpponent(fs.readString("opponent"));   game.setCompletes(fs.readInt("completes"));   game.setAttempts(fs.readInt("attempts"));   game.setPassingYards(fs.readInt("passingYards"));   game.setPassingTd(fs.readInt("passingTd"));   game.setInterceptions(fs.readInt("interceptions"));   game.setRushes(fs.readInt("rushes"));   game.setRushYards(fs.readInt("rushYards"));   game.setReceptions(fs.readInt("receptions",0));   game.setReceptionYards(fs.readInt("receptionYards"));   game.setTotalTd(fs.readInt("totalTd"));   return game; } 
CHATTY=true
assertEquals(expectedPlan,actualPlan)
request.mConnectionID != null
new IllegalStateException(format("Component of scope '%s' is not allowed",component.scope()))
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
synchronized (id) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
robot.getBattery().receiveEnergy(1000,false)
DISPLAY_TASKS_PORTRAIT + 2
dataField.type.equals("UInt8")
websocketComponent.setMaxThreads(11)
dockedBounds.bottom + adjustment
new IndexWriter(d,new StandardAnalyzer(),false)
data != null
StringBuffer buffer=new StringBuffer("("); 
new NamedList()
getFragmentManager().beginTransaction().replace(android.R.id.content,personDetailFragment)
ONE_MINUS_DST_ALPA(7)
DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS=5000
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_unique_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR))
this.compilations.remove(codeTask)
return false; 
new ChronicleEngineEnpoint(uri,this,configuration)
fm.getKnownNodes().size() > 0
c.getLiquid().amount < c.getCapacity()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
Method.date(type)
@Override public final DivideBy or(String sql,Object... bindings){   return or(condition(sql,bindings)); } 
PromotionMessage promotionMessage=(PromotionMessage)input; 
DEBUG=true
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
RowPosition.forKey(range.start_key,p).compareTo(stop) > 0
return true; 
printTypeWithoutBounds(out,type)
PRODUCT_FORMATS.size() + 3
Thread.sleep(5000)
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)
_iterNumber=200
dest.writeList(userIds)
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
new HashMap()
resultEndpoint.assertIsNotSatisfied()
word2Vec.setSentenceIter(iterator)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
StringUtils.isNoneEmpty(xml)
selenium.isVisible("link=Control Panel")
mBondState.setBondState(address.toUpperCase(),state)
log.debug("PID contains identifier with no assigning authority")
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
new LeftTuple(f0)
Long.valueOf(delay)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
@NonNull
returnType.isPrimitive()
builder.length() == 0
new RuntimeException()
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Throwable exceptionThrown=null; 
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(FixedValue.value(42).withAssigner(new PrimitiveTypeAwareAssigner(ToStringAssigner.INSTANCE),Assigner.Typing.STATIC)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
mTextColor.getColorForState(ds.drawableState,0)
selenium.isVisible("link=Control Panel")
new Paint(Paint.ANTI_ALIAS_FLAG)
graphWidth / 2
dest.writeLong(mSubId)
reply.writeZero(10)
matchAxisFilter != 0
LOG.error(e)
i & 0x100
mCurrentVrService == null
DEBUG=true
LOGGER.info("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
DEFAULT_DISMISS_TO_VIEW_RATIO_LIMIT=.4f
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0
DEFAULT_MIN_PREFS_PER_USER=2
assertResultsPresentInDataResponse(url,timerJob.getId())
SHOW_ZOOM_LEVEL_BUTTON_DELAY=2500
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isVisible("link=Control Panel")
HashMap<String,String>
Context.getEncounterService().createEncounter(encounter)
selectedPos < lastPos
enabled=true
sname.getParent().getSimpleName().substring(9)
Integer.valueOf(bottomStr)
selenium.isVisible("link=Control Panel")
myName.setIcon(AllIcons.Nodes.Pluginobsolete)
loaded.getLoaded().getConstructor()
protected Object findItemToAdd(){   String word=Messages.showInputDialog(SpellCheckerBundle.message("enter.simple.word"),SpellCheckerBundle.message("add.new.word"),null);   if (word == null) {     return null;   }  else {     word=word.trim();   }   if (Strings.isMixedCase(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.mixed.cased.you.must.enter.simple.word",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   if (!manager.hasProblem(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.correct.you.no.need.to.add.this.in.list",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   return word; } 
TextUtils.isEmpty(credential)
SamplingProfiler.newThreadGroupTheadSet(group)
jobFinishHandler.onComplete(results)
i < text.length() - 1
Exception e
new IllegalArgumentException("Advertising can't be both connectable and scannable")
(b & 0x80) > 0
finish()
console.printToHistory(string,attributes)
selenium.isVisible("link=Control Panel")
focused == null
"MySQL".equals(databaseProductName) || "Google SQL Service/MySQL".equals(databaseProductName)
buffer.putLong(nextMarker + 4,0)
!mbMessage.isDiscussion()
new BufferedInputStream(fi,5000000)
new LightweightThread(null,this)
ConsistencyManager.class
ChannelBuffers.dynamicBuffer()
net.feedForward(new INDArray[]{in,decode},false)
r.unlock()
mMncStr == null
mSupportsSpeed ? 1 : 0
/**   * This version of getRow() only takes data from certain rowsets We select these rowsets that have name = step Otherwise it's the same as the other one.  */ public synchronized Row getRowFrom(String from) throws KettleException {   output_rowset_nr=findInputRowSetNumber(from,0,stepname,0);   if (output_rowset_nr < 0) {     throw new KettleException("Couldn't find hop '" + from + "' for reading from");   }   return getRowFrom(output_rowset_nr); } 
logger.warn("[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed")
selenium.isVisible("link=Control Panel")
Criterion.and(TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.eq(tagUuid))
getMethod(restrictionName,methodName).isDangerous()
FileUtils.deleteDirectory(root)
preferences.getBoolean("forceQuickUpdate",false)
new PluginsPanel(new GridBagLayout())
DEBUG=true
mHomeStack == null
JwsUtils.verify(jws,stateString).getUnsignedEncodedSequence()
public static TutorialFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
Realm.getColumnIndices()
inUtc
selenium.isVisible("link=Control Panel")
LOGGER.debug("Could not perform drage and drop",ioex)
new PacketDecoder(support,new NamespacesHub(new Configuration()),null)
t < _to
MAX_ITEMS=1000
Files.delete(dir.toPath())
Log.error(e)
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,false,false)
value.isEmpty()
checkPojoMetaClass()
initializeMainContext(monitor)
type.toUpperCase(ENGLISH)
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
TIMEOUT=3000
getDecoder().decode(detectorResult.getBits())
Assert.assertEquals(catalogsJson.get(0).getPriceLists().size(),6)
protocol.read(inputStream)
type > 25
promises.addFirst(promise)
Localization.lang("File")
DefaultCacheKeysFactory.createNaturalIdKey(naturalIdValues,persister,session)
attributes.getFlags()
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionValues)
getTtsVoiceUsed()
ddmStructureService.deleteStructure(ddmStructure.getStructureId())
failure.getCause()
selenium.isVisible("link=Control Panel")
list(OAuth2Constants.AUTHORIZATION_CODE,OAuth2Constants.REFRESH_TOKEN,OAuth2Constants.PASSWORD)
freezeBalanceContract.getFrozenBalance() / 10000
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",STRING)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
storedOverlayInfos.get(i)
cursor.getLong(1)
selenium.isVisible("link=Control Panel")
mResourceData[i] != null
BTraceUtils.setInstrLevel(1)
extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)),false)
result.getInfo()
timeout > 0
rats.getConfig()
value == null
mKey.equals(other.mKey)
partitionKey.getType().toString()
platformVersion < MNC
/**   * Column number filter.   */ private CSVFilter columnFilter; 
logger.info("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
case INODE_REFRENCE: 
ImmutableSet<ImplemetationMethodDescriptor>
log.debug(msg,t)
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
new WorldPoint(1653,3577,0)
JSONObject.writeValue(writer,this.myArrayList.get(0),thisFactor,indent)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING
localeKeyFluidFlow="buildcraft.mj.flow." + timeGap + longName
LOG.isDebugEnabled()
applyCurrentState()
resolveClass(psiClass)
Collections.sort(backends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
mConferenceById.containsKey(callId)
bits2[0]
BufferUtil.zeroBuffer(4)
StringBuffer buffer
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
_log.error(ioe,ioe)
MIN_RECALL=0.5f
info.getName()
userRecord.mClientRecords != null
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
expandableView.getActualHeight()
telephony.getNetworkTypeForSubscriber(subId)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
TIMEOUT_BUFFER=5L
mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
UIMODE_SERVICE.equals(name)
n == stringLength
s > 0
JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt")
UnsafeUtils.set4(_mem,8,bias)
Thread.sleep(5000)
!mediaControl.isLocalVideoAllowed()
setBackgroundDrawable(null)
mAttributes.getFlags()
assertEquals(actualPattern.pattern(),someName)
AllGlsJavaTestsSuite.suite()
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
assertThat(finder.findByIds(newArrayList(2,3))).hasSize(2)
assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
list.size() + 1
CHATTY=true
mPathParameterMap != null
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
testClass.getName()
0 != mNetworkCapabilities
threadSafe=false
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null)
setNumber(String.valueOf(integerPart))
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
ruleGroup.getGroupId()
context.getPackageName()
rowLabels.size()
result == Integer.MAX_VALUE
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").append("#")
RLP.unwrapList(data)
Plugin.class
port.readBytes()
IBackupManagerService svc=mService; 
jmsManager.destroyTopic(name)
mGpsListener != null
!connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)
new UnsupportedOperationException()
scope instanceof GlobalSearchScope
deadline < now
selenium.isVisible("link=Control Panel")
ref_val.startsWith("HTTP error 403")
tags[1]
assertOpenEventually("responseLatch",responseLatch,5)
terminal.receivedInput(event.getInputText())
!panelsEnabled() || !mKeyguardMonitor.isDeviceInteractive()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
viewObject.getMessageOwner() != null
WeakReference<Class<?>>
request.masterNodeTimeout()
_typeSettingsProperties.toSortedString()
new ServletHolder(accountServlet)
ams.mContext.createPackageContext(appInfo.packageName,0)
REQUEST_TIMEOUT=1000
61L + 122L
selenium.isVisible("link=Control Panel")
oldModel.getVendorExtensions().get("x-className") == null
centerButton(mButtonNeutral)
mGpsListener != null
new PrestoException(INVALID_CAST_ARGUMENT,e)
AnkiDroidApp.colIsOpen()
serverQueue.add(holder)
StringBuilder sb=new StringBuilder(); 
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,false,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
object.realm.id == this.id
sizeNeeded >= items.length
IconGenerator.generateCharacterIcon(context,engineName.charAt(0))
modulePropertyManager.seExternalModuleType(moduleType)
@NonNull String uri
public Integer getId(){   return id; } 
artifact.getRootRelativePath()
selenium.isVisible("link=Control Panel")
ColorResources.getColor("scrollBarTrackHighlight")
createUrl(cleanedLine,el)
operandStack.remove(2)
gapBlock.getParentHash()
ENERGY_COUNTER=4
(dispatcherMapping & INCLUDE) > 0
FMLCommonHandler.instance().tickEnd(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6324_e,client.field_6313_p)
stateChangedLatch.await(1,TimeUnit.SECONDS)
assertClusterSize(2,h2)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
Application.SDK_INT >= 14
@Nullable
new ArrayList<>()
request.getClientAttributeNames()
name.equals(pkg.getName())
ByteArray.write16bit(newDelta,info,pos + 1)
/**   * {@inheritDoc}  */ public Comparable getFrom(){   return Integer.valueOf(from); } 
Sets.<Integer>newHashSet()
new IndexWriter(benchmark.getRunData().getDirectory(),null,false)
origin <= other
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
new DatabaseExplorerDialog(shell,props,SWT.NONE,dbinfo,databases,true)
CustomSQLUtil.get(COUNT_BY_G_F,queryDefinition)
ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)
new SoftReference(result)
provider == null
disableBluetoothContactSharing
LineAndLineHashKey that=(LineAndLineHashKey)o; 
lines("Function.prototype.inherits = function(parentCtor) {","  function tempCtor() {};","  tempCtor.prototype = parentCtor.prototype;","  this.superClass_ = parentCtor.prototype;","  this.prototype = new tempCtor();","  this.prototype.constructor = this;","};")
classNode.getMethod("validate",new Parameter[0])
getUserStateLocked(callingUid)
IndexReader.open(benchmark.getRunData().getDirectory(),true)
waiting - addConnectionQueue.size() > 0
rt.allowCallsFrom=DEFAULT_SOURCE
mp.getValue()
view.getClusteredLayerInDegree(absNode)
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT)
selenium.isVisible("link=Control Panel")
disableForUser(what,token,pkg,mCurrentUserId)
mf.getColumnName()
ACRA.log.e(LOG_TAG,"Could not delete report : " + files[i])
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId))
query.length()
Localization.lang("Check integrity")
selenium.isVisible("link=Control Panel")
kbase.newStatefulSession(conf)
getSession(false)
entry.notification.clone()
userRecord.mClientRecords != null
mPerformanceMap.get(userId)
mHelper.onActivtyCreate()
-1147719266
Boolean.valueOf(attrValue)
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
mContext.sendBroadcast(intent)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
routes.InputsResource()
level <= RF_STATUS_MEDIUM_SIGNAL
{2,3,3,4,5}
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).description(message)
testEventsByType(DYNAMIC_TEST_REGISTERED)
mResourceData[i] != null
new UnsupportedOperationException()
onBackPressed()
filePath.toFile()
assertTrue(now.modTime != snapshot.modTime || !Arrays.equals(now.hash,snapshot.hash))
selenium.isVisible("link=Control Panel")
LOGGER.debug("Error with XML parser configuration",e1)
is(expectedSql)
executeRunnableDismissingKeyguard(runnable,null,false,true)
peekServiceForUserLocked(userId)
attachmentSaved(file.toString())
outList.size()
SmartList<DocumentRange>
new Dimension(450,300)
"mobi".equals(file.getExtension())
checkNotNull(jobName,"The data sink must not be null.")
Assert.isNotNull(fl,"Cannot find root deserializers")
Exception e
webSocketConnection.getRemote().sendString(s)
reporter.report("\"default\" methods must have a body",n)
assertEquals(512f,i,10f)
localBinder.getServiceInstance().clearCache()
myLocalResolve && localProcessor.isEncounteredDynamicClasses()
CacheData<Booleans>
Thread.sleep(5000)
checkPojoMetaClass()
selenium.isVisible("link=Control Panel")
new StringBuilder()
mValues[7]
Logger.getLogger(loggerName).getLevel()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
flags != 0
mAnimator.getPhaseY()
public static String getItemText(FormEntryPrompt formEntryPrompt,SelectChoice selectChoice){   String choiceName=formEntryPrompt.getSelectChoiceText(selectChoice);   return choiceName != null ? TextUtils.textToHtml(choiceName).toString() : ""; } 
payload.getBodySources().size() == 1
telephony.isRinging()
type.getConstructor()
Looper.getMainLooper()
new PairPongMsg(getMessageCount(),(byte)0,MaxCulMsgType.PAIR_PONG,(byte)0,this.srcAddr,dstAddr)
range.getFrom()
(lastInsert.getFlags() & Command.FLAG_NO_REPEAT) != 0
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
rj.mapProgress()
Sets.newLinkedHashSet()
IBinder.FIRST_CALL_TRANSACTION + 64
ByteBuffer.allocateDirect(16)
"adjustedPath=" + path
Trans == TRANSPOSE
getTotalSpaces() > spaceProperty.getMaxSpaces()
BufferUtil.clear(raw[i])
new GroupTest(true)
conn.getResponseCode() == HttpURLConnection.HTTP_OK
new GenericDynamicProperty(MODEL_AND_VIEW,ModelAndView.class,null,false)
@NonNull String bluetoothAddress
type.getConstructor()
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
checkManageUsersPermission("getting profiles related to user " + userId)
new ArrayList<>()
Json.createArrayBuilder().add(DELETE_METHOD_SPEC)
t != null
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"cpuinfo",pw)
new StringRepresentation(resourceGetRet.toString())
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))
comparator == null
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
mMccMncs != null
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
logger.info("license [{}] - expired",license.uid())
mccStr.isEmpty()
List<Exception>
addTo(instant.getMillis(),scalar)
mAppToken.hasContentToDisplay()
Thread.sleep(5000)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
display.getMetrics(mDisplayMetrics)
destination.length + offset
new WorldPoint(3498,3507,1)
!context.getViolations(violationQuery).isEmpty()
selenium.isVisible("link=Control Panel")
atUserBeans.size() == 0
List<String>
mSharedElementNames.size()
targetPointsHelper.getIntermediatePoints()
newDefaultSubIdObj.equals(mDefaultSubId)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
props.value(DefaultSettings.JDBC_URL)
mQsContainer.getLayoutParams()
FastMath.max(origin,num.doubleValue())
selenium.isVisible("link=Control Panel")
/**   * Executes the action with the given controller. <p> The state of the build is not defined as part of this contract, it is highly context specific.  */ T run(BuildController buildController); 
logger.warn("Cannot set group volume ({})",e.getMessage())
methods[i].getParameterTypes().length == 0
new RuntimeException()
listAdapter.changeCursor(cursor)
random.propertyValue()
super.create(theClass,registry)
GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null,caps,null,width,width,null)
assertFalse(metaInject.init(spyMeta,data))
telephony.isOffhook()
offsetHandler.enter()
temporaryFolder.getRoot()
formatTime(scanWifiLockOnTime / 1000)
mLastAnnouncementWasQuickSettings && !mTracking
result.getCanonicalPath()
/**   * {@inheritDoc}  */ public Comparable getFrom(){   return Integer.valueOf(from); } 
assertion.getXmlObject()
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss()
DEBUG=true
dest.writeLong(mSubId)
Math.min(desired,height)
AcidUtils.getTableSnapshot(hive.getConf(),tbl,true)
return readRepairChance; 
Method.date(type)
new IllegalStateException("UTF-8 not supported!",e)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
logger.trace("Receive queue TAKE: Length={}",recvQueue.size())
Timber.v("Authentication exception, re-trying with new token",negativeResponseFromOldToken)
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
value.toLowerCase().contains(constraintLowerCase)
length > 0L
new IllegalStateException(e)
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
new IfNode(currentGraph.unique(new IsNullNode(receiver)),trueSucc,falseSucc,0.5)
initBounds(copy[i])
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark
selenium.isVisible("link=Control Panel")
DumpUtils.checkDumpPermission(mContext,TAG,pw)
mapper.getJsonFactory()
Integer.valueOf(displayIdStr)
row.size() == 0
invoke(agentInfoList,payload,DEFUALT_FUTURE_TIMEOUT)
deltaY < 0
mm.tryLock(key,4,TimeUnit.SECONDS)
new int[3456]
fields[i] >= 0
ON_TOP
builder.timeValueField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
mActiveStreamType == -1
IRON_GOLEM("VillagerGolem",IronGolem.class,98)
Log_OC.wtf(TAG,"Incorrect action sent " + intent.getAction())
LOG.error(e)
{12,13}
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavaDoc()
loaded.getLoaded().getConstructor()
split[0]
metadata.getModified().getTime() > project.getLastSave().getTime()
checkPojoMetaClass()
message.getLine() != lineNumbers.get(i)
-7
buildName(rightNode)
new LazyTailArrayNode(record,schema)
VersionNumber.parse(playVersion).getMicro() < 6
log.warn("Error loading known hosts",e)
new Chat(name,uid,mMessageEdit.getText().toString())
mService.setUidPolicy(UID_A,POLICY_NONE)
checkPojoMetaClass()
temporaryFolder.getRoot()
mPowerManager.isScreenOn()
ClassFileVersion.forCurrentJavaVersion()
serialVersionUID=3256441400072353336L
Trans == TRANSPOSE
selenium.isVisible("link=Control Panel")
new IllegalArgumentException(ERROR_ADD_REMOTE_URL_MISSING)
Callable<Integer>
toLong(b,8)
xOff=3
infoAndPosition.substring(colIndex + COL_MARKER.length(),infoAndPosition.length())
bufferSize != minAllocSize
new IndexWriter(dir,false,new WhitespaceAnalyzer())
stats.getLastAccessTime() > lastAccessTime
case 15: 
ensureExpectedToken(token,Token.FIELD_NAME,parser::getTokenLocation)
ks.getKieClasspathContainer()
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",500,"application/json","resources/add_book2json_invalid.txt",null)
log.warn("Problem in JSR223 script ",e)
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null))
Exception e
profile.getMinimumInstances()
expected == float.class
dirtyOutputBuffer()
factory.getDestination(endpoint)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
ReflectionUtils.invokeMethod(generateViewMethod,scaffoldingTemplateGenerator,domainClass,templateName,sw)
RedisRule.bindToPort(6379)
assertEquals(attrs.size(),3)
mLineageStore.requestFilePersistence(fileId)
dic.buildRouterChain(invokers)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
promise.isDone()
new IllegalAccessError("read-only")
loaded.getLoaded().getConstructor()
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).otherwise(exceptionHandler)
sessionState.out.printf("      Memtable thresholds: %s/%s/%s (millions of ops/minutes/MB)%n",cf_def.memtable_operations_in_millions,cf_def.memtable_throughput_in_mb,cf_def.memtable_flush_after_mins)
bufferedKeys.size() > getBatchSize()
Thread.sleep(5000)
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
3.0 + (3 * random().nextDouble())
LOG.error(String.format("%d ms elapsed since build job marked as finished, but still missing build rule finished events.",elapseMillisSinceFirstFinishedStatus))
System.getProperty("java.io.tmpdir")
stack.mStackId != DOCKED_STACK_ID
mController.getMaxConnectionState(device)
isTop() || isUnknown()
account.httpUploadAvailable(fileBackend.getFile(message,false).getSize())
/**   * @author Hugo Huijser  */ @RunWith(LiferayIntegrationJUnitTestRunner.class) public class JavaSourceProcessorTest extends BaseSourceProcessorTest {   @Test public void testExceedMaxLineLength() throws Exception {     test("ExceedMaxLineLength.testjava","> 80:",22);   }   @Test public void testUnusedImport() throws Exception {     test("UnusedImport.testjava");   } } 
focusOwner.isVisible()
timeOut=30_000
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
T
this.propertyDescriptorCache.put(pd.getName(),pd)
((MapType)toCheck).getKeysType()
selenium.isVisible("link=Control Panel")
javaWriter.emitSingleLineCOmment("foo")
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",jobId,queryableStateName)
onEvaluateInputViewShown()
striped.get(key).readLock()
TestUtils.isJUnit4TestMethod(method)
clusterType == Unknown
mCol.getDb().queryScalar("SELECT nid FROM cards WHERE id = " + id)
n.intValue()
type.getActualTypeArguments()[0]
new UpdateNotifierTimerTask(this,verChecker)
anyInt()
activity == null
sendPingAndReceivePong(pingPublication,pongSubscription,WARMUP_NUMBER_OF_MESSAGES)
assertThat(this.repository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username)).isNotNull()
processResult.getStdout()
e.contains(SVNErrorCode.WC_NOT_DIRECTORY) || e.contains(SVNErrorCode.WC_NOT_FILE)
selenium.isVisible("link=Control Panel")
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(new ClassifierOverride(1))
getConfiguration()
textMessage.getMessageType()
util.getDataTestDir(table)
_sumsqe / _count
myExpr != null
f
MAX_EMITTER_THREADS=2
assertEquals(id3,new Twitter(id3,pass3).verifyCredentials().getName())
loaded.getLoaded().getConstructor()
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
new UnsafeBasedStringCharProvider(UNSAFE,stringValueFieldOffset,str)
Long id
Exception e
/**   * The upper value in the range.  * @return the upper value in the range  */ Comparable getTo(); 
a.getFloat(attr,0)
sender.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
retriever.captureFrame()
@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
UIUtil.isCloseClick(e,MouseEvent.MOUSE_RELEASED)
lookup.getProcessorByType(requestControllerService.getType())
value >>> 8
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
mQsContainer.getLayoutParams()
attributes != null
near.remove(1)
SameValueContexualRule<ConfirmPassword,Password,String>
Localization.lang("Edit")
header.getX()
mNavigationBarView.isQuickScrubEnabled()
new Rect(left,top,bottom,right)
artifact.replace("(?<!solr-)analysis-","analyzers-")
callerPrincipalCallback.getSubject()
poList[1]
RedisRunner.startDefaultRedisServerInstance()
fortData.getLureInfo().getLureExpiresTimestampMs() < api.currentTimeMillis()
assertTrue(jmsTemplate.isPubSubDomain())
Element.F64(mRS)
new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR)
new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(true);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(false);     countDownLatch.countDown();   } } )
band.getResultAmount().compareTo(fulfillmentAmount) <= 0
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED
jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false)
XmppStringUtils.parseBareAddress(connection.getUser())
stringEntry.getKey()
SmsHeader.toByteArray(header).length + 1
greaterThan(0L)
new RStudioThemedFrame()
type.getConstructor()
new Builder().setDuration(5000).setTextColor(android.R.color.holo_red_light)
mcGroup.getGroupName()
_buildTemplateWithGradle("simulation-panel-entry","simulator-dependency-management","--dependency-management-enabled","true")
await().atMost(1,TimeUnit.SECONDS)
ab.get1()
loaded.getLoaded().getConstructor()
TEMPLATE_TYPE_FIELD.getPreferredName()
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
filePath == null
isReserved(c)
beansXml.createAlternatives()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
creating || !mRtHandlingPositionUpdates
_log.error(ioe,ioe)
mService.oneTouchPlay(getCallbackWrapper(callback))
Thread.sleep(20000)
SemVerMatcher.parseFromText(text)
Messages.getString(key,param1,param2)
status().isMovedTemporarily()
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
enabled=false
Integer.valueOf(rightStr)
Object[]
userImpFactor.add(userFactors.row(userIdx,false))
!isCorrectFile
assertEquals(input.getFieldCount(),3)
mSurfaceView.getHolder() != null
getTelecomService().hasVoiceMailNumber(accountHandle)
fragmentEntryPersistence.filterCountByG_FCI(groupId,fragmentCollectionId)
LOG.info(() -> createDiscoveredTestEnginesMessage(testEngines))
configurations.get(typeName)
Exception e
getPolicy().getMaxBinaryMessageBufferSize()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
5 * 60_000
mPressFooterView != null
raw.getParameters()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
attributes.getFlags()
version == null
return false; 
GL20.glGetActiveUniform(program,index,256,typeTmp)
LOGGER.lifecycle(msg.apply())
header.getX()
Loggers.get(getClass()).error(format("Termination of pool %s failed",getClass().getSimpleName()),ie)
property.getGetter().value()
PsiElement context
distanceToView(focused) > 0
new Button(shell,SWT.CHECK)
(exception ? throwable instanceof RuntimeException : throwable == null)
selenium.isVisible("link=Control Panel")
elementClass != null
context.registerReceiver(mBroadcastReceiver,broadcastFilter)
!options.getJvmOpts().contains("-Xmx")
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
argCount > paramCount
{CUSTOM_STUDY_NEW,DECK_OPTIONS,CONTEXT_MENU_STANDARD}
synchronized (q) {   q.offer(t); } 
value={StringFilterAggregator.class}
field.hasNameIndex()
compensationRange.inRange(compensation)
Publisher<T>
log.debug(message,exception)
UnsafeUtils.get4(_mem,8)
mBackdrop.animate().alpha(0f)
bLocations[0].getNames()
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"meminfo",pw)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
transformation.getMoreData(opCode,fin,rsv,messageBufferBinary)
longValue == 0
condition.isEmpty()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
messageType.set(message2,"message","Hello World")
allowedWithoutQuotes.clear()
start.expectedMessageCount(6)
PARANOID=true
Long.valueOf(args[1])
currentResponse.getAuthentication() != null
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false)
eps(otherArr)
IOException e
myFoundationLibrary.CFStringConvertEncodingToNSStringEncoding(cfEncoding) & 0xffffffffffl
tm != null
getUserStateLocked(callingUid)
childFolder.getType() != FileType.FOLDER
readOwners.clear()
mSearchInput.setFocusable(focusable)
Log.wtf(TAG,e.getMessage(),e)
postLoaderDao != null
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
docsSinceCommit > docsUpperBound
this.getScanId()
anchorView.getWindowToken()
memberRequestPersistence.update(memberRequest)
selenium.isVisible("link=Control Panel")
new CompletionThread(w,TestConcurrencyObserverEvent.onCompleted,f1,f2,f3,f4)
mFocusStack.remove(fse)
readStayAwakeConditions()
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1,UserHandle.USER_CURRENT)
action == KeyEvent.ACTION_UP
temp_descs.get(i)
buildData.getMasterHostname()
getTimeout()
spoon.saveToRepository(jobMeta)
createMaterializedFrame(arguments)
fullname.contains(".")
previousTypeSettingsProperties.toString()
resources.getDimension(R.dimen.close_handle_height)
Exception e
COOKIE_SYNC_MANAGER=true
BufferUtil.clear(raw[i])
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
states.length == 3
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
NoObjectType noResolvedType=new NoResolvedType(this); 
selenium.isVisible("link=Control Panel")
new SeleniumBuilderFileUtil(".")
Double.valueOf(m.group(2))
tp.go(fd)
String.format("Option %s is not supported by this runtime")
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
endTime > startTime
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
fraction * (nextValue - prevValue)
new Intent(ACTION_FAST_TRACK)
nextTokenIsFast(b,IDENTIFIER)
l_Inflater.inflate(R.layout.adv_user_sms_listview,parent)
Nd4j.createUninitialized(shape)
condition != null
timeout < 0
Arrays.asList("round_robin","keep_all","keep_last","keep_none","metrics.neo4j","i.e","e.g","fixed_ascending","fixed_descending")
floatBuffer.clear()
mDark == dark
lastUid >= 0
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
availableVersions == null
factory.getSemaphore(packet.name)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
Math.min(desired,height)
in.indexOf("{") > 0
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
isDirectory()
selenium.isVisible("link=Control Panel")
canvas.clipRect(0,0,tabWidth,tabHeight)
logger.error("Could not commit session",t1)
RELEASE_DELAY_MS=120
EmailableReporter.class
upload1.getUploadEndTimestamp() == 0
body.getContentType().restContentType()
params[1]
parentAccessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
parametersList.getParamsGroup(GROUP_EXE_OPTIONS)
Integer.valueOf(taskIdStr)
schedulerEventListenerWrapper.setGroupName(groupName)
getNextClusterID()
out.writeObject(function)
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()
resolver.acquireContentProviderClient(uri)
LAST_VERSION=936
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
channel.write(buf)
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
mAuthorities.get(i)
dataType.equals("int") || dataType.equals("long")
-1
conf.getSearchBaseURL()
order.getFilledSize()
Settings.Secure.getInt(getContext().getContentResolver(),ROUNDED_DIVIDER,1)
ctTypeStr.equals(ContentType.MULTIPART_MIXED) || ctTypeStr.equals(ContentType.MULTIPART_RELATED)
case 14: 
!getDatabaseTypeEnvironment().isEnabled() && !isExecuted()
log.error("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
hour != 0
HashMap<String,Operator<? extends Serializable>>
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,true)
loaded.getLoaded().getConstructor()
t.equals(type)
UIPasteboard.getGeneral()
LOG.info("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
mFixedExecutionService.shutdown()
current > 0
new Paint()
mode != null
@Input(InputType.Association)
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())
StringBuffer buffer=new StringBuffer("["); 
selenium.isVisible("link=Control Panel")
Log.w(TAG,"Session failed to close due to remote exception",e)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
commandContext.isDirty()
results.getCount() > 0
s <= 2000
queryArtist != null
toArrayWithTransform(input,new Function<PriceList,DefaultPriceList>(){   @Override public DefaultPriceList apply(  final PriceList input){     return toDefaultPriceList(input);   } } ,false)
selenium.isVisible("link=Control Panel")
JavaConversions.asIterable(logManager.allLogs())
keySyncOperation.contains(targetKey)
provider.addRootSetChangedListener(this,myProject)
Utils.convertDpToPixel(4f)
Latkes.getStaticPath()
is(true)
mJobs.get(i)
tableHasColumn("KBTemplate","engineType")
mListener.setConnectionId(0)
sampleFactory.getConstructor()
runtimeDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
GridHadoopTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
substitutor.substituteTemplate(myEditor,file,caretOffset,template)
methods[index] == null
IndexScanVerbHandler.class
lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
new FileAttribute("stubIndexStamp",2,false)
isClosed()
LOG.warn(title + "; " + message)
TestPackage.foo(a,1,"1","!")
TimeUnit.SECONDS.toNanos(5)
GithubNotifications.showErrorDialog(myPane,"Can't login using given credentials: " + ex.getMessage(),"Login Failure")
typeSettingsProperties.toSortedString()
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
if (VDBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
target.directory("zk" + id + "data")
populateLibraryUi()
a.getDimensionPixelOffset(attr,0)
typeSerializer.getClass()
mapper.seAttributePrefix("ROLE_")
ensureGreen()
mValues[7]
JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,"Undecomposable expression")
Exception e
this.messageService.monoPostAuthorizeFindById(1L).contextStart(withUser)
new MediaController(token)
output.flush()
getLogger().error("Unknown classloader [ITE]: " + e.getMessage())
if (segmentation) throw new IgniteException("Failed to send custom message: client is disconnected"); 
Exception e
setImageDrawable(icon)
@UriPath(label="producer",defaultValue="true")
new RuntimeException("Unexpected element value kind in annotation: " + type)
FIRST_CUSTOM=8092
@Self Statement currentStatement
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
display.getMetrics(mDisplayMetrics)
buffer == null
N > 0
public Object mapLine(FieldSet fieldSet,int lineNum){   BillingInfo info=new BillingInfo();   info.setPaymentId(fieldSet.readString(PAYMENT_TYPE_ID_COLUMN));   info.setPaymentDesc(fieldSet.readString(PAYMENT_DESC_COLUMN));   return info; } 
Slog.wtfStack(TAG,"ProcessState dead: name=" + mName + " pkg="+ mPackage+ " uid="+ mUid+ " common.name="+ mCommonProcess.mName)
mAccessibilityController.isTouchExplorationEnabled()
myChangeListManager.ensureUpToDate()
@Override public Value emitBitCount(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IPOPCNT,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LPOPCNT,result,asAllocatable(operand),this));   }   return result; } 
notificationManager.notify(NOTIFICATION_ID,id,notification)
(Inlining)other
new UnsupportedTemporalUnitException("Not a date field: " + field)
receiverUserId != mCurrentUserId
pa.getStore().getJournal().getFileMap().size() == 1
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
/**   * User: anna Date: 30-Jan-2006  */ public class ClassesScopeTreeStructureExpander implements ScopeTreeSctructureExpander {   private Project myProject;   public ClassesScopeTreeStructureExpander(  final Project project){     myProject=project;   }   public void treeWillExpand(  TreeExpansionEvent event) throws ExpandVetoException {     ProjectView projectView=ProjectView.getInstance(myProject);     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<ClassNode> classNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof FileNode) {           final FileNode fileNode=(FileNode)childNode;           final PsiElement file=fileNode.getPsiElement();           if (file instanceof PsiJavaFile) {             final VirtualFile virtualFile=((PsiJavaFile)file).getVirtualFile();             if (virtualFile == null || (virtualFile.getFileType() != StdFileTypes.JAVA && virtualFile.getFileType() != StdFileTypes.CLASS)) {               return;             }             final PsiClass[] psiClasses=((PsiJavaFile)file).getClasses();             if (classNodes == null) {               classNodes=new HashSet<ClassNode>();             }             commitDocument((PsiFile)file);             for (            final PsiClass psiClass : psiClasses) {               if (psiClass != null && psiClass.isValid()) {                 final ClassNode classNode=new ClassNode(psiClass);                 classNodes.add(classNode);                 if (projectView.isShowMembers(ScopeViewPane.ID)) {                   final List<PsiElement> result=new ArrayList<PsiElement>();                   PsiClassChildrenSource.DEFAULT_CHILDREN.addChildren(psiClass,result);                   for (                  PsiElement psiElement : result) {                     psiElement.accept(new JavaElementVisitor(){                       @Override public void visitClass(                      PsiClass aClass){                         classNode.add(new ClassNode(aClass));                       }                       @Override public void visitMethod(                      PsiMethod method){                         classNode.add(new MethodNode(method));                       }                       @Override public void visitField(                      PsiField field){                         classNode.add(new FieldNode(field));                       }                       @Override public void visitReferenceExpression(                      PsiReferenceExpression expression){                       }                     } );                   }                 }               }             }             node.remove(fileNode);           }         }       }       if (classNodes != null) {         for (        ClassNode classNode : classNodes) {           node.add(classNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   public void treeWillCollapse(  TreeExpansionEvent event) throws ExpandVetoException {     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(PackageDependenciesNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<FileNode> fileNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof ClassNode) {           final ClassNode classNode=(ClassNode)childNode;           final PsiElement psiElement=classNode.getPsiElement();           if (psiElement != null && psiElement.isValid()) {             if (fileNodes == null) {               fileNodes=new HashSet<FileNode>();             }             fileNodes.add(new FileNode(psiElement.getContainingFile(),true));           }           node.remove(classNode);         }       }       if (fileNodes != null) {         for (        FileNode fileNode : fileNodes) {           node.add(fileNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   private DependencyNodeComparator getNodeComparator(){     return new DependencyNodeComparator(ProjectView.getInstance(myProject).isSortByType(ScopeViewPane.ID));   }   private void commitDocument(  final PsiFile file){     final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);     final Document document=documentManager.getDocument(file);     documentManager.commitDocument(document);   } } 
LibraryTableEditor.editLibraryTable(getApplicationServerLibrariesProvider())
logger.warning(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
id=15837
w.mBaseLayer <= myLayer
DirectoryReader.open(writer.w,true)
ONE_MINUS_DST_ALPA(7)
myDispatcher.addListener(l)
name.indexOf('.')
cubeManager.mergeSegments(cube,0L,1386835200000L)
type.getConstructor()
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!")
_context == null
location.sourcePath()
PathUtilRt.getFileName(moduleDirParent)
Character.toLowerCase(ch)
provider instanceof IpnbFileEditor
socket.getSocket() == null
loaded.getLoaded().getConstructor()
mContext.getString(R.string.branded_monitoring_description_app_personal)
LOG.info(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master")
mVideoCallListener=null
client != null & client.autofillClientIsFillUiShowing()
length=5_000
host1.getAddress()
List<WebPageDetail>
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message")
KieSessionModelImpl kSessionModel
checkManageUsersPermission("getting profiles related to user " + userId)
fragmentEntryPersistence.filterFindByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
stall_till_cloudsize(1)
Integer.valueOf(attrValue)
statistics.addGetTimeNano(System.nanoTime() - start)
TestEmployeeTable.class.getCanonicalName()
selenium.isVisible("link=Control Panel")
mCaCerts != null || mCaCerts.length > 0
mBitmapState.mBitmap.hasAlpha()
mListener.onInputUpdated(inputId)
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin library project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).compileDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
this.homeString
sec.getEndpointClass()
IBackupManagerService svc=mService; 
tracesFile.mkdirs()
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
WordVectorSerializer.loadGoogleModelNonNormalized(new File("/ext/GoogleNews-vectors-negative300.bin.gz"),true,false)
LocalFileSystem.getInstance().findFileByPath(libPath)
capacity > 1 << 30
SCAN_STATUS_COMPLETE=1
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=6
parent instanceof AppWidgetHostView
service.asBinder().isBinderAlive()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
uri.getQuery()
assertEquals(activeEmployees,values.size())
((Number)s.first()).intValue()
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),userGroupGroup,ActionKeys.VIEW)
sessionChanged(session)
maxLength > 0
new FtrlDelta(true,alpha)
stacktrace.indexOf(':')
loaded.getLoaded().getConstructor()
context.lineWidth != mesh.getLineWidth()
localMaster == null
testPool.getListeningExecutorService()
new IOException("JSON forbids NaN and infinities: " + result + " at path "+ getPath())
InetAddress.getLoopbackAddress()
return mChangingDisappearingDuration; 
mGpsListener != null
type.getConstructor()
new CircularClipper(mDetail)
securityDomain != null
CONTENT_SCOPE_KEY.get(project)
sourceWidth > 0
!SSID_PATTERN.matcher(ssid).matches()
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
new RegressionEvaluation(1)
l.equals("</pre>")
assertEquals("There should be no files",files.length,0)
topLevelBuildData.getJobName()
acos(arr,Nd4j.copyOnOps)
copy1DRangeFrom(0,mType.getCount(),i)
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
partialUri.toString()
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
Constant.messages.getString("start.gui.cmdline.invalid.session.options",CommandLine.SESSION,CommandLine.NEW_SESSION)
FileUtils.setPermissions(mPackageListFilename,0660,SYSTEM_UID,PACKAGE_INFO_GID)
host.setHeaderView(this)
centralDirOffset >= eocdOffset
CONTENT_TYPE + "; boundary=" + getBoundary()
setEnabledFunctions(mDefaultFunctions,false)
id == null
hasCapability(GPS_CAPABILITY_MSA)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
string.toUpperCase()
Internal.prefixKeyWithSalt(key_b)
completion.switchOnError(ex -> handler.handle(exchange,ex))
mRotation != RotationUtils.getExactRotation(mContext)
XContentType.JSON.restContentType()
unsafe.compareAndExchangeObject(container,doubleOffset,container,dummyValue)
loadingResult.getPackageRoots()
lastPosition < positionCount
Boolean.valueOf(literalOption)
directory.mkdir()
a.getTranslation()
new RedissonSession(id)
return 30; 
getRequiredLong(singletonMap("long","Apio"),list)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
new CompilerException(sourceName,e.line,e.getCause())
MockReset.before()
mHorizontals == null
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
commState.getBoolean()
rangeOffset < thisEnd
singleLanguageProfile.getName()
"TcpIpConnectionManager configured with Non Blocking IO-threading model: " + inputThreadCount + " input threads and "+ outputThreads+ " output threads"
assertEquals(20,instance.getCapacity())
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0)
Assert.assertEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
ArrayUtil.isEmpty(groupId)
Slog.wtf(TAG,"Receiver with filter " + filter + " already registered for pid "+ rl.pid+ ", callerPackage is "+ callerPackage)
return flowControlOverRuns; 
event.getX()
targetInfo != null
sm.getString("upgradeHandler.rst.debug",connectionId,Integer.toString(se.getStreamId()),se.getError())
timeout=50000000
DEBUG=true
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
selenium.isVisible("link=Control Panel")
errorCount > maxErrors
FBUtilities.getLocalAddress()
testClass.getName()
id=53
runtime().config.useCompressedKlassPointers
IBackupManagerService svc=mService; 
logger.error("No such directory: " + dir.getAbsolutePath())
NETWORK_ACCESS_TIMEOUT_DEFAULT_MS=0
name == null
reversed
IndexReader.open(dir,true)
qryCfg != null
-frustumNear
DensityUtil.convertPixelsToDp(100,this)
mono.otherwise(ex -> Mono.error(getReadError(bodyParameter,ex)))
m.getClass()
globalExecutionStats.getSplits()
logger.error(e.getMessage())
mDir.getDirId()
super.dispatchTouchEvent(ev)
StringBuffer ret=new StringBuffer(internalName.length()); 
private CSVFilter filter; 
xfrm.getExt().getCx()
blog.getRemoteBlogId()
objectMapper.readerFor(DataSegment.class)
methodName.startsWith("save")
assertEvaluate(buildFile).lookup("txts")
Log.e(t,"Unable to obtain BouncyCastle provider! Decryption may fail!")
OrderItemAdjustmentImpl other=(OrderItemAdjustmentImpl)obj; 
av != null
/**   * Represents an invalid default audience value, can be used when only reading.  */ None(null)
mImm.getInputMethodList()
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)
event.getChild()
System.currentTimeMillis()
LocaleUtil.getDefault()
mCurrentTheme != null
new CircularClipper(mDetail)
Object.class
LocalFileSystem.getInstance().findFileByPath(filePath)
telephony.isRadioOn()
docker.startContainerCmd(container.getId())
from=PERSISTENT_ALL_CACHES
resultBits == 32
LOG.lifecycle("Detection of classes for compilation ({}) plus the compilation took {}.",clock.getTime(),recompilationSpec.getClassNames().size())
formatTime(fullWifiLockOnTime / 1000)
this.heading=0.0
holder.createInfoAnnotation(element,composeTooltipString(descriptor,deprecated))
public class RegExpParseTest extends BaseParseTestCase {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
equalTo(25714837.0)
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
app.getString(in)
Collection<GridDrStateTransfer>
selenium.isVisible("link=Control Panel")
LOG.warn("No SessionScavenger set, using defaults")
serialVersionUID=215521212534238L
public static final JPQLTemplates DEFAULT=new HQLTemplates(); 
offset + n
pb.setProcessListener(pBmpHandler)
StringBuffer buf=new StringBuffer(); 
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
DumpUtils.checkDumpPermission(mContext,TAG,pw_)
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new Version(V_1_1_2_ID,true,org.apache.lucene.util.Version.LUCENE_4_7)
coreThreads.asString()
originalDefinition.toLowerCase().startsWith("raw")
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.",ioe)
isPost(request)
assertEquals(3,StringUtil.countMatches(drl,"import "))
Messages.showErrorDialog("Error loading package list:" + e.getMessage(),"Packages")
List<String>
new File(mantleThemeCss)
selenium.isVisible("link=Control Panel")
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_UNICODE,myLanguageLevel.isPy3K())
selenium.isVisible("link=Control Panel")
t.getCause()
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope)
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
Thread.sleep(5000)
MAX_PERCENT_DIFFERENCE=0.1
state.value == rotationLocked
mGpsListener != null
Session.getDefaultInstance(mailServerProperties,null)
enabled=false
processor.open(w,request)
XPathUtil.makeDocument(new ByteArrayInputStream(responseData),isValidating(),isWhitespace(),isNamespace(),isTolerant(),isQuiet(),showWarnings(),reportErrors())
id=15868
t instanceof ThreadDeath
FileHash.hash(outputFile,algo).equals(checksum)
expressionType.equals(JetStandardClasses.getUnitType())
new StringBuilder()
IoUtil.delete(dataDir,false)
mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
i == -1
curLayout.getName(locale).equals(localizedName)
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
selenium.isVisible("link=Control Panel")
XContentHelper.toXContent(response,XContentType.JSON)
fileSpecs.size() >= 0
new CountDownLatch(3)
input.getPath()
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
accumulator.addClass(fileDetails.getFile(),analysis)
new FieldFrame(currentFrame,isStaticInnerType,type,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)
mFlexItem.setAlignSelf(AlignItems.FLEX_START)
set(object,value.intValue())
LOG.info(getQueueName() + " user=" + userName+ " used="+ queueUsage.getUsed()+ " numContainers="+ numContainers+ " headroom = "+ application.getHeadroom()+ " user-resources="+ user.getUsed())
partitionKey.getType().toString()
_log.error(e)
json.getBytes()
info != null
Thread.sleep(50)
assertEquals(provider.fetchCount,is(3))
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentType(TEXT_EVENT_STREAM)
BufferUtils.newByteBuffer(fileSize)
position.setEmpty()
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
featuresMask != null
result.getErrors()
annotationHelper.printError(element,"%s annotated element should not have a private constructor")
shuffleWithInexistingUuids(project2.uuid(),project1.uuid())
URL.encode(content)
callback.disconnectCallback(name,jsa)
XmlUtils.readIntAttribute(parser,ATTR_SDK_VERSION)
return true; 
defaultListenerAccess != null
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).expectComplete()
clusterList.contains(newClock)
Integer.valueOf(taskIdStr)
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
r.locals.ast=returns
Integer.valueOf(topStr)
msbFragmentCollection.getFragmentCollectionId()
file != null
ImmutableMap.<String,String>of()
new BlockFamilyRegistryImpl(context)
-1
locPart.state() == MOVING
selenium.isVisible("link=Control Panel")
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,connectionTracker,transactionSPI)
id.getHash()
checkPojoMetaClass()
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),e)
data.contains("black")
loaded.getLoaded().getConstructor()
this.cusolverDnSsyevd_bufferSize.invoke(solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
adapter.unregisterDataSetObserver(mObserver)
reader.getString(reader.readSmallUint(protoIdItemOffset + RETURN_TYPE_OFFSET))
new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR)
flags_=0
parent instanceof AppWidgetHostView
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
methodType(Void.TYPE,StringBuilder.class,Request.class)
hgraph.getMutualDegree(n)
AbstractMethodError e
assertEquals(1,boo.getFoo().getCounter())
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
DEBUG=true
client != null & client.autofillClientIsFillUiShowing()
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.clearNotifications(); } ,ModalityState.NON_MODAL)
2 * 8192
CompletableFuture<Boolean>
parseSitemapXml=false
assertThat(o.takeNext()).isNull()
map.get(i)
EntityRegistry.registerEntityID(entityClass,entityName,id)
this.encoding == null
mClocks.elapsedRealtime()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name,map.size())
imageWidth / targetHeight
mImm.showStatusIcon(mToken,getPackageName(),iconResId)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.PNORM,(double)pnorm,outH,outW,output)
public SELF setStandardInput(InputStream inputStream){   operationParamsBuilder.setStdin(inputStream);   return getThis(); } 
c.deactivate()
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
Boolean.valueOf(attrValue)
AbstractTreeNode<TypeMigrationLabeler>
computeSemiJoin(inputStatistics,inputStatistics,x,unknown)
BeanFactoryUtils.beanNamesIncludingAncestors((ListableBeanFactory)parserContext.getRegistry())
locations.get(0).distanceTo(start) > 200
defaultListenerAccess != null
mHorizontals == null
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
nativeLibraryDir.getParent()
selenium.isVisible("link=Control Panel")
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
path.substring(6)
max() <= 32
checkNotNull(uri,"URI should not be null")
returnJClassRef.dotclass()
idx + 1
mergeRefUpdate.forceUpdate()
TIMESTAMP_READ_METHOD.invoke(object,connection)
numExamples=10
scan.getResults()
!showOnKeyguard
createHalf(buffer.length(),init)
mContext.sendBroadcast(intent)
selenium.isVisible("link=Control Panel")
value.isNull()
rsWrap.getMobFileCacheAccessCount()
selenium.isVisible("link=Control Panel")
context.getPackageName()
firstSlash == 0
indexWriter.expungeDeletes(false)
dateVector.getMutator().set(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
sourcepath.isEmpty()
new ConfigurationMethod(getConstructorOrMethod(),getAnnotationFinder(),isBeforeSuiteConfiguration(),isAfterSuiteConfiguration(),isBeforeTestConfiguration(),isAfterTestConfiguration(),isBeforeClassConfiguration(),isAfterClassConfiguration(),isBeforeMethodConfiguration(),isAfterMethodConfiguration(),getBeforeGroups(),getAfterGroups(),false)
workQueue.getStats()
new HTTPResponseResult(reqEntity,httpClient)
jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)
callbackList.getRegisteredCallbackCookie(i)
ctx.write("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
parent.getChildCount() > 0
Long.valueOf(value)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
/**   * Total job execution time (unaccounted for in metrics).   */ private final LongAdder finishedJobsTime=new LongAdder(); 
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
!mergedDDMFormFieldValues.contains(text2DDMFormFieldValue)
mService.removePasspointConfiguration(fqdn)
discardChannel.receive(10)
initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR
prots != Protections.SIGN_ENCRYPT
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"cpuinfo",pw)
new Paint(Paint.ANTI_ALIAS_FLAG)
-1
provideArguments(',',"foo","bar","").count()
AdviceWithTasks.removeByType(route,type,selectFirst,selectFirst,selectFrom,selectTo,maxDeep)
resultCode == RESULT_OK
request.mConnectionID != null
Environment.getRootDirectory()
mAuthorities.get(i)
DefaultManagementAgent.class
peekServiceForUserLocked(userId)
-418533254
@Override public ResponseImpl description(String description){   throw new RuntimeException("Not implemented"); } 
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",1,SECONDS)
builder.length() == 0
VertexAttribute.Color()
new MockResponse().setResponseCode(401)
VDBG=true
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml")
loaded.getLoaded().getConstructor()
index >= size && index < 0
return false; 
err != 0
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
c.dataFlowInfo.getStableTypes(dataFlowValue)
selenium.isVisible("link=Control Panel")
mContext.startActivity(shortcutIntent)
playable.localFileAvailable()
logger.error("Exception mapping responses to requests.",e)
NB_CACHED_PARAMS=20
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
i < message.length()
Formatter.getInstance().createContinuationIndent()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
targetDirectory == null
chatRooms.add(chatRoomID)
editor.commit()
mInjector.getUserManager().removeUser(userId)
mGestureDetector != null
delayDuration - 50
OPTION=29
target.addTask(task)
ThreadLocal<Map<String,CacheEntry>>
mWorkerId + BASE_FILE_NUMBER
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ AtmosphereResource addAtmosphereResource(AtmosphereResource resource); 
context.registerReceiver(mBroadcastReceiver,broadcastFilter)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
selenium.isVisible("link=Control Panel")
script.getInstructions()
PyElement parentScope=PsiTreeUtil.getParentOfType(lambdaExpression,PyClass.class,PyFile.class); 
vcs == null
cacheFb.setMaxElementsInMemory(5)
apnContext.getWaitngApns()
new SecretKeySpec(randomBytes,ENCRYPTION_ALG)
input.setSourceFileNameFieldName(wSourceFileNameField.getText())
ImmutableSet.of(modules)
return mAppearingDuration; 
mContext.startActivity(intent)
RtlUtils.isPunctuations(punctuation1)
toArrayHelper(array,1)
onEvaluateInputViewShown()
LOG.error("Unable to delete {} because listInternal returns null",path)
LOGGER.debug("Could not open folder",e)
new MulticastSocket(SSDP_PORT)
imageView.setImageBitmap(null)
Long.valueOf(value)
new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR)
grid(1).cache(null).localSize()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
AsyncResult<InetAddress>
!reportInteraction.performInteraction(context,config,reportBuilder,reportFile)
selenium.isVisible("link=Control Panel")
_validateHasRequiredPropertyElements(element,filePath)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
functor != 0
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
packer.packStructHeader(1,INIT.signature())
command.runHelp(stdErr)
cfs.clearUnsafe()
tracesFile.mkdirs()
GridCacheAffinityImpl.class
csUseGlobalSearch.getSelection()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
bundleBinaryPath.getParent()
new ClusterNodesDecoder()
mFile.getPath()
in.readVInt()
public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
selenium.isVisible("link=Control Panel")
origin.realComponent().doubleValue() < other
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)
_typeSettingsProperties.toSortedString()
kompiler.getDeclaredMethod("exec",PrintStream.class,String[].class)
DataStream<OUT>
new PacketDecoder(new JacksonJsonSupport(),new NamespacesHub(new Configuration()),ackManager)
input().slices()
mHidProfile.isProfileReady()
"Can not parse conflict reason: " + reason
(ImageView)convertView.findViewById(R.id.repost_flag)
mActiveAgents.valueAt(i)
assertMockEndpointsSatisifed()
config.highlightOwnName()
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
myImplementation.clear()
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
ImmutableSortedSet<String>
returnType.getSort()
layer.type() == Layer.Type.CONVOLUTIONAL
@SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement); 
public interface Constants extends Constants {   s String; } 
new ObjectMapper().reader(BlockIteratorState.class)
selenium.isVisible("link=Control Panel")
absolutePath.contains("/modules/apps/") || absolutePath.contains("/modules/private/apps/")
/**   * {@inheritDoc}  */ public Object next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
loaded.getLoaded().getConstructor()
mValues[7]
jsonSupport.addEventMapping("edwald",HashMap.class)
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
public Value emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   Variable newValueTemp=newVariable(newValue.getLIRKind());   emitMove(newValueTemp,newValue);   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   SPARCAddressValue addressValue=asAddressValue(address);   append(new CompareAndSwapOp(asAllocatable(addressValue),asAllocatable(expectedValue),asAllocatable(newValueTemp)));   return emitConditionalMove(memKind,expectedValue,newValueTemp,Condition.EQ,true,trueValue,falseValue); } 
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n")
letters[0]
Gdx.input.getX()
loadModuleProble(iFace,features.mockedType,true,false,false)
Foundation.NSLog("[error] " + tag + ": "+ message)
System.currentTimeMillis()
LOG.error("Error reading HTTP response from " + url)
new SeleniumBuilderContext(_BASE_DIR,_LIFERAY_SELENIUM_DIR)
DumbServiceImpl.getInstance(project).queueCacheUpdate(Arrays.asList(updater))
c.deactivate()
greaterThanOrEqualTo(300L)
new Paint(Paint.ANTI_ALIAS_FLAG)
new byte[16]
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L)
dst.equals(sp)
diff.remove('-' + item)
ON_TOP
cache.put(new Element(key,element),true)
sdk != null
Algorithms.isEmpty(pref.get())
map.append(counter++,ValueRow.get(values))
selenium.isVisible("link=Control Panel")
result.expectedMessageCount(2)
cfs.getMemtableFlushAfterMins() * 60 * 1000
proxyHTTPServer.setText(Preferences.get("proxy.https.server"))
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
itemRenderer.renderItemIntoGUI(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
numThreads.get() > MAX_THREADS
http2Stream.inboundFlow()
Arrays.asList(RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.BATTERY_LEVEL,RFXComValueSelector.TEMPERATURE,RFXComValueSelector.SET_POINT,RFXComValueSelector.CONTACT)
root.waitThis().size() >= 0
View.SYSTEM_UI_TRANSPARENT
status == SocketStatus.DISCONNECT
UserHandle.getCallingUserId()
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this)
myProgressTailIcon == null
DEFAULT_VERIFY_ENABLE=false
GL11.glTexParameter(target,pname,params)
si.deliveryCount > 0
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
copticDate.monthOfYear()
rangedRegion.getProximityUuid()
logger.error("Error connecting to Plex",e)
qux.getConstructor()
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)
1 << 6
Loggers.get(getClass()).error(format("Termination of pool %s failed",getClass().getSimpleName()),ie)
GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))
o instanceof CreateOptions
dw != mBackgroundHeight
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
AbstractMethodError e
predicate != null && !predicate.match(match,start,end,context)
runtime().config.useCompressedKlassPointers
Nd4j.rand(200,200,max,min,Nd4j.getRandom())
NeoStore.class
DEBUG_STARTING_WINDOW=false
sampler.getFilename()
c.deactivate()
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY)
SchematicsLoader.INSTANCE.load(ProjectManager.getInstance().getDefaultProject(),localFile,true)
marketDataService.getOrderBook(CurrencyPair.LTC_USD)
policyFlags & SCAN_REQUIRE_KNOWN
Ints.min(startedSplits.get(),completedSplits.get(),splits)
artifactFilter == null
@NotNull protected abstract TStatement createNewStatement(@NotNull PsiElementFactory factory,@NotNull PsiElement expression,@NotNull PsiElement context); 
logger.warn("{} {}",errorCode,message)
mSharedElementNames.size()
pm.performDexOpt(pkg,null,false)
editor.apply()
SegmentedFile.getBuilder()
freezeThisOneIfNeeded != null
Bytes.toBytesBinary(tableNameOrRegionName)
_replaceTranslationCommand.replaceTranslation(file.toPath())
tableHasColumn(oldTableName,"templateId")
telephony.isRadioOn()
attribute.getDefinition().getAttributeMarshaller()
MavenHelpers.getOrCreateElementBuilder(build,"name")
ticket.cancel(true)
(halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth
private final Integer id; 
mFacetCategoryMap.get(packageName)
selenium.isVisible("link=Control Panel")
LARGER_DIMENSION=1000
TimeUnit.SECONDS.toMillis(2)
wikiPagePersistence.findByN_H(nodeId)
@NotNull
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
activityPointList.size() + 1
message.getMessageId().setDataLocator(id)
allDefinitions != null
mMncStr == null
assertEquals(worldVocab.getIndex(),2)
getData() ^ 0x8
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
telephony.isRinging()
candidatePriority > highestPriority
checkManageUsersPermission("getting profiles related to user " + userId)
(short)600
Long.valueOf(id)
selenium.isVisible("link=Control Panel")
IndexReader.open(userindex,true)
String value
serverEnvironment == null
calendar.getTime()
mDownloadXtraDataPending=true
System.out.println()
options != null
new RuntimeException(e)
Math.min(implicitOffset - 1,0)
mAuthorities.get(i)
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
host1.getAddress()
createRandomPk()
Error err
JvmDeclarationOriginKt.OtherOrigin(myClass)
editor.repaintHeader()
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
r[1]
Long.valueOf(attrValue)
new Paint(Paint.ANTI_ALIAS_FLAG)
schemeSpecificParts != null
tagName.equals(TAG_FORWARDING_INTENT_FILTERS)
SortedMap<String,SortedMap<String,Object>>
updatePanel()
@ConditionalOnEnablednHealthIndicator("elasticsearch")
typeSwitch.keySuccessor(i) == predecessor
exchFut.discoveryEvent().node()
EXPLICIT_NO_UNSAFE_CAUSE == null
from >= to
pubnub.unsubscribe(channel)
synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
? extends TypeDefinition
FilenameUtils.getPath(destination)
list.getFirst()
mLayerType == LAYER_TYPE_SOFTWARE
myEditor.getBackroundColor()
Ints.min(startedSplits.get(),completedSplits.get(),splits)
expectedItemClass.isAssignableFrom(baseItem.getClass())
feature.getName()
CharUtils.isAscii(CHAR_COPY)
assertNotNull(message.getPayload() instanceof Collection<?>)
MockRamDirecorySerivce.class
attributes.getFlags()
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
r.unlock()
pw.println(ps.getInstantApp(user.id))
new InputStreamReader(fileObject.getInputStream())
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials)
clientConfig.property(ClientProperties.READ_TIMEOUT,1000)
lpNameBuffer.getPointer()
"content".equals(scheme)
Thread.sleep(5000)
id=30
getIsTypeCheckCallable(type)
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
mBoltPaint.setColor(backgroundColor)
isCreated()
DefaultChannelFuture.setUseDeadLockChecker(false)
assertEquals(table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size(),inserted.size())
mLastAnnouncementWasQuickSettings && !mTracking
bfd.singularData.getSingularizer().appendBuildCode(bfd.singularData,type,statements,bfd.name)
expandable::collapse
old + 25
ThemeUtils.fontColor()
new Paint(Paint.ANTI_ALIAS_FLAG)
mCollapsibleHeight > 0
mConnector.execute("volume","format",vol.id)
addDaysAndCheckForCompletion(20,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR)
one.setCoordinateIndex(LEAF)
new Rect(28,14,28,14)
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).putter()
@Mock HttpServletResponse servletResponse; 
BigDecimal value
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SERVER_ERROR)
mFrameSlots.remove(slot)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
UNPINNED=0x7FFFFFFF
ResponseEntity<Void>
LOG.error(ex,"Distributed build step failed.")
createListFromPropertyString(description)
ExpandoWebUpgrade.class
new RuntimeException("Buffer already freed, free point: ",freePoint)
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
filteredData.addAccessRestrictedResource(absoluteChildAddr)
Long.valueOf(id)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
new int[5243]
private final CircularClipper mClipper; 
lock.isLocked()
InetAddress.getLocalHost()
status.isDirectory()
VALIDATE_AFTER_INACTIVITY_DEFAULT=2000
LOG.trace("Unsupported minification resource: " + filename)
batteryService.isBatteryLow()
Response.created(localUriInfo.getAbsolutePathBuilder().path("state").build())
agentInstances.findAgent(uuid)
field.getType()
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
Long dateObject=(Long)lastMessageElement.getAttributes().getAttribute("date"); 
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
realm.assertThread()
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
Math.max(limit,1)
MonitoringPortletImpl.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
this.messageService.monoPreAuthorizeBeanFindById(2L).contextStart(withAdmin)
removeCallbacks(null)
paras.put(20L,10000L)
name.equals(node.getText())
return false; 
getService().animateCollapse()
mValues[7]
telephony.getDataNetworkTypeForSubscriber(subId)
DEFAULT_WAKE_LOCK_TIMEOUT=30000
add(food(perc(.1,1)),SWEETCORN,SWEETCORN_7088)
tokenLength >= 2
LOG.error(e,"Parser exited while decoding BSER data")
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
registeredService.getAccessStrategy().doPrincipalAttributesAllowServiceAccess(principalAttrs)
c.getPath() == null
Validator.isNull(entry.getUrlTitle())
next == null
id=15801
public TokenStream create(TokenStream input){   return new ArabicStemFilter(input); } 
serverQueue.add(holder)
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",10)
!isXop
mPlayer.getCurrentPosition() * 1000
Futures.transform(Futures.allAsList(delegate.store(ArtifactInfo.builder().setRuleKeys(info.getRuleKeys()).setMetadata(metadataWithCacheKey).build(),BorrowablePath.notBorrowablePath(emptyFilePath)),delegate.store(ArtifactInfo.builder().addRuleKeys(new RuleKey(hashCode)).build(),output)),Functions.constant(true))
url.equals(completeUrl)
paras.put(17L,10000L)
/**   * Choose a default message to use if the applyAsync() method throws an exception.  * @return ZuulMessage  */ ZuulMessage getDefaultOutput(I input); 
Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
loopField.getRangeDurationField().getType() != lastType
req.getContentLength()
!dockOntopOrLeft
Math.max(filterExplanations.get(i).getValue(),maxFactor)
addKeys(externalClasses,DATE,"org.joda.time.LocalDate")
Double.valueOf(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
searchContext.sort().getSort().length > 0
deriveFontMethod.invoke(font,new Object[]{floatSize})
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
timeout < 0
10 * 60 * 1000L
selenium.isVisible("link=Control Panel")
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
CythonLanguageDialect._isDisabledFor(node)
addView(mNotificationHeader)
Exception e
initSize / 100
cr != null
Class.forName(line)
EMERGENCY_ASSISTANCE_ENABLED=false
DEBUG=true
platformVersion < MNC
dockerConfigPath.isEmpty()
_resourceExistsMap.containsKey(key)
token != null
contentBitmap != null
dest.writeLong(mSubId)
createCurrentSeverities()
assertTrue(blockDirectory.isBlockCacheWriteEnabled())
conf.getSearchBaseURL()
listenersMap.remove(container)
dl.info("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
String modSource
Identity id=gormMapping.getIdentity(); 
Environment.getRootDirectory()
node == null
RandomStringUtils.random(20)
mService.disableEphemeralNetwork(SSID)
myMapping.update(outputPath,outputPath)
startGrids(NODES_CNT)
activity == null
CommandLineProcessor.processExternalCommandLine(args)
temp_descs.get(i)
getLock(address)
final SimulatedTrackball mSimulatedTrackball; 
contains="doIntrinsicCachedTruffleObject"
mQsContainer.getX()
getWidth()
CallParticipantRecord cpr=new CallParticipantRecord((String)callParticipantIDs.get(i),new Date(Long.parseLong((String)callParticipantStart.get(i))),new Date(Long.parseLong((String)callParticipantEnd.get(i)))); 
getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery())
getParameterValues(request,param)
globalScheme.getAttributes(DiffColors.DIFF_DELETED).getEffectColor()
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize()
getAndAppendNextComparator(i,bb,sb)
i > speedBumpIndex
TelephonyManager.getDefault().getPhoneType()
header.getX()
CalendarWebUpgrade.class
logger.warn("an error")
config.getMaxElementsInMemory()
assertEquals(9,definitions.size())
new TextPaint(Paint.ANTI_ALIAS_FLAG)
DefaultCacheKeysFactory.getCollectionId(cacheKey)
flushAfterDuration(entry.getKey(),entry.getValue())
currentTx.preConcatenate(matrixTx)
ROUTE_IGNORED_WARNING_CODE=4100
SKELETONS_VERSION=8
loaded.getLoaded().getConstructor()
params.getSimulatePlatformVersion()
GL11.glGetInteger(pname,params)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
HashMap<String,String>
Set<UidRange>
times(2)
logMinimal(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
req.startAsync()
AmazonRankingsWebUpgrade.class
mAppToken.hasContentToDisplay()
ColorResources.getColor("selectionForeground")
url.toServiceString()
type.getConstructor()
selenium.isVisible("link=Control Panel")
new AudioBuffer(audioData,bufferIndex,presentationTimeUs)
flow.getUpdateTime() > updateTime
DbConnectionManager.closeConnection(pstmt,null)
mHandler.removeCallbacks(pae)
Outcome.match("missing database driver " + driverClassName)
new LFWLoader(imgDim,imageTransform,useSubset)
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_velocityEngine,_templateContextHelper)
selenium.isVisible("link=Control Panel")
data.remaining()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
myToolWindowManager.isToolWindowActive(myId) && (myDecorator != null && myDecorator.isFocused())
getExecutorServiceManager().shutdown(errorHandlerExecutorService)
IntentFactory.create(mContext,type,text)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
mPostKeyguardExitAnimation.hasEnded()
new Paint(Paint.ANTI_ALIAS_FLAG)
uri.getAssetName().toString()
GithubNotifications.showInfoDialog(myPane,"Connection successful for user " + user.getLogin(),"Success")
node.getBeginColumn()
input().slices()
ONE_MINUS_DST_ALPA(7)
platformVersion < MNC
UserHandle.getCallingUserId()
getSshUrl(name,httpPort)
resultSetView.getControl()
Publisher<T>
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
del("*:*")
Thread.sleep(100)
previousLine.endsWith(StringPool.COMMA) && (previousLineTabCount == lineTabCount) && !previousLine.contains(StringPool.CLOSE_CURLY_BRACE)
return CTR; 
Throwable throwable
mStartDelay == 0
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
condition.signal()
winAnimator.mSurfaceController == null
Thread.sleep(5000)
internalExecutor.submit(command)
@Message(id=14151,value="Could not find view %s for EJB %s") RuntimeException viewNotFound(String viewClass,String ejbName); 
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
from("direct:a").delay(500)
mResourceData[i] != null
final GridCache cache=internalCache(i); 
new IllegalArgumentException("Advertising can't be both connectable and scannable")
private BaseAdapter mListAdapter; 
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
org.apache.kylin.common.util.DateFormat.formatToTimeStr(1433250418000L)
@Override public Content detach(){   throw immutableError(this); } 
libDirectory="."
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
ChannelBuffers.copiedBuffer(bytes,0,length)
IOException e
Collections.emptyList()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
store.setConfigPath(usersFile)
Trans == TRANSPOSE
msg.obj == mSmHandlerObj
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
sTestCaseCounter == 1
restrictions.length > 0
private final View view; 
pluginPanel.init()
releaseLock(LOCK_TRIGGER_ACCESS,transOwner)
ssl.has(CommonAttributes.CA_REVOCATION_URL)
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
MAX_RETRIES_ON_ASSOCIATION_REJECT=4
revision.equals("latest.integration") || revision.equals("latest")
163 + (USE_OLD_HISTORY ? 1000 : 0)
userRecord.mClientRecords != null
dockedBounds.bottom + adjustment
mVectorState == null && mVectorState.mVPathRenderer == null
data.contains("siamese")
locationNode.text()
minIdle < 0
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
mFlags.containsKey("debug")
SiteBrowserWebUpgrade.class
cause.getMessage().startsWith("Different HTTP Scheme or Host Redirect detected on")
currentChatPanel.getDefaultContact()
c.getDeclaredMethod(mtdName,paramTypes)
mActiveAgents.remove(info)
selenium.isVisible("link=Control Panel")
DataStream<OUT>
SOCKET_TIMEOUT_MILLIS=2000
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
UserLocalServiceUtil.fetchUserById(userId)
t.equals(type)
generatorConfig.getModelPackage()
telephony.isOffhook()
logger.info("Execution of UDF '{}' failed",name,e)
new ConnectionError(sm.getString("http2Parser.processFramePushPromise",connectionId,Integer.valueOf(streamId)),Http2Error.PROTOCOL_ERROR)
(opcode == TEXT.getOpCode()) | (opcode == BINARY.getOpCode())
intbuf.get()
value.equals(getString(R.string.protocol_odk_default))
DateFormat.getDateFormat(context)
log.info(message)
logTable.getDatabaseMeta().getSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
Integer.valueOf(port)
zzStartRead == zzCurrentPos
requestHeader.mConnectionID != null
assertEquals(-2147483648,TileSystem.MapSize(23))
tableHasData(newTableName)
assertEvaluate(buildFile).lookup("txts")
firstPos != mTargetPos
position - 1 > 0
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)")
new RuntimeConfigurationError("No py.test runner found in selected interpreter")
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
getStub()
@ApiEndpointPreference final @NonNull StringPreference apiEndpointPreference
LLVMMetadataNode m2
mCanSeekForward=mCanSeekForward=true
Serde<V1>
new byte[0]
iterations=100
config.getProperty("peer.p2p.pingInterval",5)
a.willChangeTransformationMatrix()
getProperty().contains("spark.yarn.keytab")
new IllegalArgumentException()
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapBaseTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue("map should be empty",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse("map should not be empty",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,"bar");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           assertEquals("bar2",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format("We do not expect an entry which's key equals to %d in entry set",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     assertFalse(map1.removeEntryListener("2"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } 
viewToClick != null
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
options.setLanguageIn(LanguageMode.ECMASCRIPT5)
contentType.split("charset=")
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
new WeekViewEvent(event.getId(),event.getName(),event.getStartTime(),endTime)
myAccountPortlet.getPortletName()
32 + (PersistentHashMapValueStorage.COMPRESSION_ENABLED ? 1 : 0)
val == null
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
this.func_180475_a(objective,res)
tableHasColumn(oldTableName,"description")
loader.filePath != null
securityMode != SecurityMode.None
metadata.getFaceRectangles()
logger.error("No such directory: " + dir.getAbsolutePath())
DefaultStaticAnalysisWidget.class
in.markReaderIndex().readChar()
type.getConstructor()
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).contextStart(context -> context.put("foo","bar"))
AnnotatedElementUtils.getAnnotationAttributes(controllerType,annotType)
tx.getOutputs().size() >= uxtoIndex
batteryService.isBatteryLow()
add(m)
Boolean.valueOf(System.getProperty("cassandra.native.epoll.enabled","true"))
Slog.wtf(TAG,"Unknown restriction: " + restriction)
FrameType.SETTINGS.check(1,settings.length)
@NonNull
selenium.isVisible("link=Control Panel")
entityRef.removeComponent(ItemIsHeldComponent.class)
tryHarder ? 7 : 4
new MethodCallExpression(INVOKERHELER_RECEIVER,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",new ArgumentListExpression(target.isStatic() ? new ClassExpression(target.getDeclaringClass()) : receiver,new ConstantExpression(target.getName()),arr))
KBP_MINIMUM_SCORE=45.30
Connection.class
pipeline.addLast(new PassportStateHttpClientHandler())
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
place != null
mSyncStatus.get(i)
length % dictionarySize
mService.enableNetwork(netId,attemptConnect)
verify(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
AppLog.e(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
mMessageList.getId()
TextUtils.isEmpty(info.getUploaderAvatarUrl())
15 * MINUTES
Internal.prefixKeyWithSalt(key)
newId > max
origin > other
@NonNull String uri
logger.error("{}",general)
new Builder().setDuration(3000).setTextColor(android.R.color.holo_blue_bright)
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
u.equals(user)
mAlarmManager.setInexactRepeating(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class))
attributes.getFlags()
NativeBinarySpecInternal nativeBinary
display.getMetrics(dm)
logger.error("moveToStep[" + policy + "] ["+ index.getName()+ "]"+ currentStepKey+ " -> "+ nextStepKey)
del("*:*")
mDateView.setTypeface(Typeface.SANS_SERIF)
Exception e
Boolean.valueOf(params.get(name))
-25
logger.info(String.format("emitting event %s",args))
vCard.getTextTrim()
native_get_videoeditor_export_profile(vidCodec)
Thread.sleep(1000)
logger.info("Adding PropertySource: " + source + " in group: "+ basename)
@Override @NotNull public ClassifierDescriptor getDeclarationDescriptor(){   return LazyClassDescriptor.this; } 
!mDreamsEnabledByDefaultConfig
id=15861
sourceWidth > 0
model.getClass().getName()
!startPositioningLocked(win,true,startX,startY)
((GroovyObject)receiver).getMetaClass() != metaClass
row.setUserExpanded(true)
heightSize == MeasureSpec.UNSPECIFIED
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address),mTachyonConf)
realm.assertThread()
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
child.getParent()
rotationVector.length == 4
parent.setCoordinateIndex(0)
sendObjectInfoResult.getCompressedSize()
GithubNotifications.showInfoDialog(myPane,"Connection successful","Success")
!remoteInterpreterProcess.isRunning()
onDetachedFromWindows()
IBackupManagerService svc=mService; 
new CompositeException(e,t)
interfaces[i].isAssignableFrom(c)
userRecord.mClientRecords != null
MetricsLogger.count(getContext(),DEMO_SESSION_DURATION,sessionDuration)
CalciteTests.createMockSystemSchema(druidSchema,walker)
optionalClient.orElseGet(null)
fingerId == 0
assertEquals(8,definitions.size())
mContext.startActivity(cantAddAccount)
writeRepeatedSFixed64(id,val)
new Spinner(getContext())
viewToClick != null
capacity > 1 << 30
recyclerView.indexOfChild(view)
mMatchMode=numOfMatchesPerFilter
mMncStr == null
event.getServletContext().getAttribute(SERVER_CONFIG_KEY)
new OidcClientTokenContextImpl()
id.errorIfMissing()
new RefProperty(existing)
mCurrIconRow != null & mCurrIconRow.isVisible()
this.categoryWithApiModel=categoryWithApiModel
ZKMetadataProvider.getRealtimeTableConfig(propertyStore,tableName)
@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
callButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
sep < 0
byteBuffer == null
expandableView.getActualHeight()
inverseCopy.apply(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
!mWindow.getSharedElementsUseOverlay()
myTabs.getPresentation().setPaintBorder(0,-1,rightIds.size() > 0 ? 1 : 0,-1)
assertDurationAround(startedAtDate - firstLogDate,45000)
worker.setnoData(nod != null ? RangeFactory.create(nod,nod) : null)
mapJoinTables != null
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
name.substring(0,name.length() - 1)
saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS)
getSingleModelLoader()
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
StepVerifier.create(Mono.just(1).then()).expectComplete()
myCurrentScope.getActiveInspectionProfiles()
XContentType.fromRestContentType(template.substring(2,endOfContentName))
ACRA.log.e(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
timeNanos > DateTimeUtils.NANOS_PER_DAY
_getParentUpstreamBranchName()
getName().equalsIgnoreCase("enum")
node.getStringValue()
canWrite(mediaType)
dynamicType.getConstructor()
id=38
selenium.isVisible("link=Control Panel")
delaySoFar > mReEnableDelayMillis
type == VolumeInfo.TYPE_PUBLIC
case 8: 
private TextView mAlarmStatusCollapsed; 
getName()
LOG_SERVICE_START_STOP=true
TypeEvalContext.fast()
setDeploymentStack(contextValue)
100 * 1000
this.principalFactory.createPrincipal(principalFromRest.getId())
ImmutableSet.<DataType>of(DataTypes.STRING,DataTypes.OBJECT,DataTypes.GEO_SHAPE,DataTypes.GEO_POINT)
lhs == null
executeMethodAndCovertExceptions(httpPost)
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").format(clazz.getName(),IGlobalExtension.class.getName())
interceptor.intercept(invocation)
ap.getSsid()
tableHasColumn("Akismet_AkismetData","mbMessageId")
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()
parameters == null
JCublasBackend.class
json.toString(1)
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
!world.isAirBlock(pos) && boxIterator != null
mContext.startActivity(intent)
statusCode > 500
"Port '" + timeoutSeconds + "' is illegal. Port should not be less than 0"
field.getWrappedField() == wrappedField
/**   * Get the <em>required</em>  {@link Method} associated with the current testor container. <p>Use this method as an alternative to  {@link #getTestMethod()} for usecases in which the test method is required to be present.  * @return the test method; never {@code null}  * @throws PreconditionViolationException if the test method is not presentin this  {@code ExtensionContext}  */ default Object getRequiredTestMethod(){   return Preconditions.notNull(getTestMethod().orElse(null),"Illegal state: required test method is not present in the current ExtensionContext"); } 
new RelationshipLinkbackStage("Test",Configuration.DEFAULT,store,newCache(),0,false)
myHttpHandler > 0
!useSuper && !isStatic && GroovyCategorySupport.hasCategoryInCurrentThread()
current.getSuperClass()
usersStats.getMax()
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
fileIds == null
sqle.getErrorCode()
RedisRunner.startDefaultRedisServerInstance()
Integer.valueOf(displayIdStr)
isTestOnBorrow()
PaginationTestUtil.of(10,1)
TfsShell.convertMsToDate(files[3].getCreationTimeMs())
typeSettingsProperties.toString()
this.getClass().getName()
StringBuffer ret
!mAwake
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.1100,10.7530,ef),currIdx.findClosest(49.6500,10.3410,ef),73533,1462)
JDBCUtils.safeGetString(dbResult,"time")
assertTrue(predicate.apply(pickleEvent))
toArrayHelper(array,1)
truePositives.incrementCount(classLabel,1.0)
layoutChildLayouts.sort(Comparator.comparing(Layout::getPriority))
/**   * Returns the constructor call which is on the top of the stack, or null if there's no such element.  * @return the enclosing constructor call on top of the stack, or null if no such element.  */ public Expression getEnclosingConstructorCall(){   if (enclosingConstructorCalls.isEmpty())   return null;   return enclosingConstructorCalls.getFirst(); } 
new EnterSelectionDialog(composite.getShell(),props,str,Messages.getString("System.Dialog.SelectEnvironmentVar.Title"),Messages.getString("System.Dialog.SelectEnvironmentVar.Message"))
verify(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
return false; 
getBooleanValue("project","thrift_target_types_enabled",true)
supplement(this,aggregate)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
sendGetBlockHashesByNumber(blockchain.getBestBlock().getNumber(),maxHashesAsk)
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
mAuthorities.get(i)
icer_cc.toClass()
new StringBuilder(239)
perfRule.assertDurationAround(Long.valueOf(prof.getProperty("Xoo Highlighting Sensor")),9700L)
pathText.getText()
showDialog(parent,message,title,options,defaultOptionIndex,icon)
formService.populateEntityForm(cmd,entity,subRecordsMap,entityForm)
Set<String>
return CTR; 
new IndexWriter(dir,new WhitespaceAnalyzer())
getTimeout()
_serviceMonitorAdvice.isActive()
selenium.isVisible("link=Control Panel")
flusher.register(handler)
compensationRange.inRange(compensation)
item.qualifies(itemType)
cbWhitelistExtra1.isChecked()
type.getConstructor()
Double.parseDouble(value)
Integer.valueOf(stackIdStr)
new ImagePredicate(idName,id)
/**   * <p>A  {@code TaskInputs} represents the inputs for a task.</p><p>You can obtain a  {@code TaskInputs} instance using {@link org.gradle.api.Task#getInputs()}.</p>  */ @HasInternalProtocol public interface TaskInputs extends TaskInputsVersion2 {   /**   * Returns true if this task has declared the inputs that it consumes.  * @return true if this task has declared any inputs.  */   boolean getHasInputs();   /**   * Returns the input files of this task.  * @return The input files. Returns an empty collection if this task has no input files.  */   FileCollection getFiles();   /**   * Registers some input files for this task.  * @param paths The input files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder files(  Object... paths);   /**   * Registers some input file for this task.  * @param path The input file. The given path is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder file(  Object path);   /**   * Registers an input directory hierarchy. All files found under the given directory are treated as input files for this task.  * @param dirPath The directory. The path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder dir(  Object dirPath);   /**   * Returns the set of input properties for this task.  * @return The properties.  */   Map<String,Object> getProperties();   /**   * <p>Registers an input property for this task. This value is persisted when the task executes, and is compared against the property value for later invocations of the task, to determine if the task is up-to-date.</p> <p>The given value for the property must be Serializable, so that it can be persisted. It should also provide a useful  {@code equals()} method.</p><p>You can specify a closure or  {@code Callable} as the value of the property. In which case, the closure or{@code Callable} is executed to determine the actual property value.</p>  * @param name The name of the property. Must not be null.  * @param value The value for the property. Can be null.  */   TaskInputs property(  String name,  Object value);   /**   * Registers a set of input properties for this task. See  {@link #property(String,Object)} for details.  * @param properties The properties.  */   TaskInputs properties(  Map<String,?> properties);   /**   * Returns true if this task has declared that it accepts source files.  * @return true if this task has source files, false if not.  */   boolean getHasSourceFiles();   /**   * Returns the set of source files for this task. These are the subset of input files which the task actually does work on. A task is skipped if it has declared it accepts source files, and this collection is empty.  * @return The set of source files for this task.  */   FileCollection getSourceFiles();   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param paths The paths. These are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #files(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object... paths);   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #file(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object path);   /**   * Registers a source directory for this task. All files under this directory are treated as source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #dir(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return this  * @deprecated Use {@link #dir(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs sourceDir(  Object path); } 
selenium.isVisible("link=Control Panel")
mHorizontals == null
id=6
Thread.sleep(5000)
dest.writeLong(mSubId)
FAB_PREFIX + overridesLocation.replace('/','_')
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
tracesFile.mkdirs()
new BigInteger(parseData(headerTck.getNumber()))
Integer.getInteger("org.mortbay.io.nio.MAX_SELECTS",15000)
sendMessage(CMD_STOP_AP)
mAttributes.getFlags()
Lists.newArrayList(DEFAULT_FILE_PARSER)
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
new IllegalAccessError("too big")
employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100)
holder == null
@ConditionalOnEnablednHealthIndicator("jms")
old.equals(dexedJar)
Executors.newCachedThreadPool()
routeToMapPoint=true
Math.min(leftLen,rightLen)
this.args=args
number.length()
doNotUseAnimations ? 0 : Math.max(450,(Math.abs(mStX) + Math.abs(mStY)) / 1200f * MOVE_MOVE_ANIMATION_TIME)
List<ValueParameterDescriptor>
getEffectiveCleartextTrafficPermitted()
super.execute(executor,patchers)
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
i--
RANGES.contains(builder.getTokenType())
DEBUG_ADD_REMOVE=false
amount.toFriendlyString()
mInstalld.snapshotProfile(appId,packageName,codePath)
mAppOpsManager.checkOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
cancelSubscriptionAndCheckForCompletion(bpSubscription,clock.getUTCNow(),NextEvent.CANCEL,NextEvent.CANCEL)
response.getStatusCode() / 100 == 4
super.updateCachedItem(group)
bindingGroup.get(PORT_OFFSET).asInt() >= 0
mHidProfile.isProfileReady()
mTfs.mkdirs(new TachyonURI(dirPath))
ImmutableList.of("/bin/bash","-c",bash)
include.hashCode()
lock.lock()
equalTo(24)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
deltaY < 0
monitor.isCanceled()
return mRxTimeMillis; 
mNextNonWakeupDeliveryTime > nowELAPSED
converter.compile("/data/MultiSheetDST.xls","Another Sheet","/templates/test_template1.drl",21,2)
robot.setAutoDelay(300)
keyPhysType.comparer()
true_parts.addAll(Hive.get().getPartitions(tab))
second.get(i)
mPostKeyguardExitAnimation.hasEnded()
ProjectInspectionProfileManagerImpl.getInstance(project)
DateTimeZone.getDefault()
Log.e("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
connectionConfirmed()
newNode.getNodeId()
mHorizontals == null
converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
new StructuresPortletConfigurationIcon(portletRequest)
new MediaController(token)
entry.notification.clone()
cache.clear(0)
currentResponse.getAuthentication() != null
BaseBinaryFixtures.create(type,name,component,taskFactory)
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive())
KafkaInput.class
length > Integer.MAX_VALUE
baseRevision.getChangeset().equals("")
Trans == TRANSPOSE
telephony.getLteOnCdmaModeForSubscriber(subId)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
TextUtils.isEmpty(credential)
tag.getLocalName()
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRoles"))
id=21
testRunner.addListener(itl)
new DartUnitMemberGroupingRule()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
DDLRecordServiceUtil.addRecord(themeDisplay.getScopeGroupId(),recordSetId,fields,0,serviceContext)
mContext.sendStickyBroadcast(mStorageFullIntent)
retriever.captureFrame()
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
context.getString(R.string.notification_additional_messages,data.droppedMessages.size())
FinalUtils.canFieldBeFinal(field)
mService.saveConfiguration()
PART_COUNT=800
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(24)
mpi < 135
executeDraw()
assertEquals(2,resultList.size())
mDrawable.getIntrinsicHeight()
equalTo("cookieManagerShared")
new LeftTuple(new DefaultFactHandle(1,"cheese"))
new MatParamTexture(texParam.getVarType(),texParam.getName(),texture,texParam.getUnit())
case SUBCMD_TRIGGER_CHANNEL: 
ManagedImplStructSchema<?>
randomIntBetween(1,12)
telephony.getForbiddenPlmns(subId,appType)
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
FileEntry.class
rest.getEndpointUrlEmail()
getAddedCount()
Long.valueOf(this.getOptional("kylin.server.sequence-sql.expire-time","86400000"))
mInputConsumer == null
2 << 16
IOUtils.close(wrapper,w,dir,analyzer)
connection.subscribe(jedisPubSub,patterns)
selenium.isVisible("link=Control Panel")
executing != null
new StormClientHandler(client)
!calledSetTotal
outputBatchSize=25
bareAddress != null
ignite.createCache(cacheCfg)
new Integer(5)
-25
this.messageService.monoPostAuthorizeFindById(1L).contextStart(withUser)
CompletableFuture<Boolean>
ab.get1()
getSrcPath("checks/javadoc/Input_01.java")
loaded.getLoaded().getConstructor()
addView(mTitleLayout,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT))
sizeNeeded >= items.length
getJavaVersion(nom)
onDetachedFromWindows()
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
uri.toString().equalsIgnoreCase(future.getURI().toString())
imageResOnFail != 0
Long.valueOf(val)
mLargePaint.setColor(0xff00ff00)
selenium.isVisible("link=Control Panel")
new GroovyPagesTemplate(context,request,response,pageMeta)
httpResponseCode == 204
mLayoutParams.width >= 0
_formatWriteFeatures != 0
init(context,null)
holder == null
note.getContent()
mHandler.postDelayed(pae,timeout)
notifierFuture.cancel(true)
executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
mLayerType == LAYER_TYPE_SOFTWARE
type.getConstructor()
qux.getConstructor()
pm.setBlockUninstallForUser(packageName,blockUninstall,userId)
mAttributes.getFlags()
Representor<T,Identifier>
IccUtils.gsmBcdByteToInt((byte)0x8c)
OkHttpImagePipelineConfigFactory.newBuilder(this,okHttpClient).setRequestListeners(listeners).setProgressiveJpegConfig(new SimpleProgressiveJpegConfig()).setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this)).experiment().setMediaVariationsIndexEnabled(new Supplier<Boolean>(){   @Override public Boolean get(){     return true;   } } ).experiment().setBitmapPrepareToDraw(true,0,Integer.MAX_VALUE)
CompletableFuture<Boolean>
Bottom bottom
new ArrayList<Wallet>(4)
StatBuckets.prettyUptime(secs)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
env.getDirectories().getExecRoot()
lock.tryLock(3,TimeUnit.SECONDS)
LOG.info(e)
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mSupportsSpeed ? 1 : 0
isFirstChar || Character.isLowerCase(c)
selenium.isVisible("link=Control Panel")
getType().isArray()
createHalf(buffer.length(),init,workspace)
analysis.getType(expression)
attribute.getDefinition().getAttributeMarshaller()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
checkManageUsersPermission("getting profiles related to user " + userId)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
new Duration(10,TimeUnit.SECONDS)
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
!isLoaded && item.isOptional()
handleActiveAutofillServiceRemoved(getChangingUserId())
mWorkerId + BASE_FILE_NUMBER
"0".equals(text) || "0L".equals(text)
log.error("Error invalidating SSH tunnel",e)
ServerError._getCode(res)
contentEncoding != null
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
mStartActivity.task == null
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
type.equals("")
Math.max(titleRight,subtitleRight)
IOException ioe
_buildTemplateWithGradle("portlet-configuration-icon","icon-dependency-management","--dependency-management-enabled","true")
smppClient.reconnect()
internalRenderers.containsKey(name)
LOG.error("Download " + fileURI + " in "+ toFile)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
is(true)
mWebViewClassic.addJavascriptInterface(mTextToSpeech,ALIAS_TTS_JS_INTERFACE,false)
Long.valueOf(attrValue)
mAttributes.getFlags()
t.equals(type)
return raf; 
mPowerManager.isScreenOn()
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,true,userId)
lexer.token() == (Token.SELECT)
node instanceof InspectionRootNode || node instanceof InspectionGroupNode
event.fromDisplayDensityChange
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
getActiveFgCall().getPhone().sendDtmf(c)
mMessageReferences == null
FluxFlatMap.trySubscribeScalarMap(source,s,mapper)
o1.getPriority()
SAMPLE_RATE_HZ_MAX=48000
Thread.sleep(5000)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
public SELF setJvmArguments(String... jvmArguments){   operationParamsBuilder.setJvmArguments(jvmArguments);   return getThis(); } 
patientState.getState().getId()
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
return false; 
lp.onResolveLayoutDirection(layoutDirection)
Throwable ex
!isStopped
5 * 60 * 1000L
computator.getContentRectMinusAxesMargins()
entity.get(Keys.DISPLAY_NAME).orElse(Text.EMPTY).isEmpty()
requestEncoding == null
mp.getValue()
endTrack("main")
selenium.isVisible("link=Control Panel")
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
myTempDir.getCanonicalPath()
mTfs.delete(mTfs.open(path))
LOG.error("OpenTracing: Failed to capture tracing data",t)
getTimeout()
delayMs < 0
structure.getDocument()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
@Override public final DivideBy on(Condition... conditions){   condition.addConditions(conditions);   return this; } 
List<Map<String,Object>>
activityManager.getMemoryClass()
selenium.isVisible("link=Control Panel")
HttpEntity.class.equals(parameterType)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,account.getId(),paymentMethodId)
LOG.trace("Could not get value for property[" + field.getQualifiedFieldName() + "] for product id["+ product.getId()+ "]",e)
new ScrolledComposite(wTabFolder,SWT.V_SCROLL | SWT.H_SCROLL)
HighlightInfo.newHighlightInfo(type).range(refElement).description(message)
accountInfo.compareTo(order.getTotalAmount()) <= 0
new DeadCodeEliminationPhase(OPTIONAL)
oldStarred=Boolean.parseBoolean(value)
visible=false
dest.writeLong(mSubId)
savedAlarm.getId()
RAMDirectory dir=new RAMDirectory(); 
" firstActiveTime=" + lastActiveTime
session.sessions().createUserSession(adminRealm,admin,"admin",null,"form",false)
LocaleUtil.getDefault()
header.getX()
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
senders == SendersEnum.both
SCROLL_BAR_SIZE=10
Integer.valueOf(rightStr)
Numeric.encodeQuantity(filterId)
new DisplayEnvironment()
tableHasColumn(oldTableName,"commentId")
new ExecutionContext(instrumentation,executionId,graphQLSchema,queryStrategy,mutationStrategy,subscriptionStrategy,fragmentsByName,operation,variableValues,root,context)
type.equals("")
Boolean.getBoolean("java.awt.headless")
compare(other,method) > 0
CanaryLog.d(leakInfo)
Serde<V1>
ap.getSsid()
http2Stream.inboundFlow()
selenium.isVisible("link=Control Panel")
Looper.getMainLooper()
new CompletionPhase.AutoPopupAlarm(false,hostEditor)
new Color(mParams.getCustomBackgroundColor())
response.getStatusCode() / 100 == 4
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
"Error resetting interface " + mInterfaceName + ", :"+ e
streamCachingStrategy.setSpoolThreshold(1l)
((ContactJabberImpl)obj).getAddress().equals(getAddress())
sep < 0
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class)
CharSequence message
symbolUsageValidator.validateCall(iteratorFunction,context.trace,loopRangeExpression)
myInflatorId != -1
Exception e
MonitoringPortletImpl.setMonitoringPortletEventRequest(monitoringPortletEventRequest)
final SimulatedTrackball mSimulatedTrackball; 
id=54
mState.isAlive()
selenium.isVisible("link=Control Panel")
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
U extends Identifier
mode == MODE_PULL_DOWN_TO_REFRESH
TurnPathHelper.getBitmapFromTurnType(ctx.getResources(),bitmapCache,TurnType.C,0,0,TurnPathHelper.FIRST_TURN,null,scaleCoefficient / miniCoeff,leftSide)
toolchainBuilder.addCompilerFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
!TextUtils.isEmpty(title)
restrictions.length > 0
Class.forName(DEFAULT_IMPL)
context.reloadRequired()
coreLog.log(level,String.format(format,data),ex)
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
Exception e
DB_VERSION=22
@NotNull
new IndexWriter(directory,autoCommit,ANALYZER,false)
indexStats.getPrimaries().getMerge().getCurrentSize()
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
r.curApp != null
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
iter.next()
oldConfig.densityDpi != newConfig.densityDpi
super.dispatchTouchEvent(ev)
new Intent(ACTION_FAST_TRACK)
hr != null
param.setResult(xparam.getThrowable())
Slog.wtf(TAG,sb.toString())
smsHeader.portAddrs != null
params.copyWithExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
USE_DISPLAY_LIST_PROPERTIES=false
method.hasModifierProperty(PsiModifier.STATIC)
from >= to
credentials.split(":")
AuditEvemtFormatter messageFormatter
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
hz1.getLifecycleService().terminate()
new String(expected,0,i + 1)
delete.prepareRowMutations(keyspace,clientState)
Subqueries.gt(0L,subquery)
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
arg1 == 0
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
correlationID != null
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
60 * 1000
{abiList}
showRecentApps(true)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
offset != null
_dlGroupServiceSettings != null
note.addParagraph(AuthenticationInfo.ANONYMOUS)
app.getTargetPointsHelper().getPointToNavigate() != null
url.toDecodedString()
setMode(mode)
selenium.isVisible("link=Control Panel")
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public String getSubscriptionCarrierName(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
unfinishedVerificationHere()
new ServletException()
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
Assert.assertEquals(4,users.size())
selenium.isVisible("link=Control Panel")
new SQLException(e.getMessage())
new VisorBinaryConfiguration()
mOneShot=true
lineIdx > 0
selenium.isVisible("link=Control Panel")
buildData.getTopLevelMasterHostname()
reBoxg.setMaterial(matRock)
duration - SystemClock.uptimeMillis() - bedtime
styles.styles()
new FileOutputStream(newState.getFileDescriptor())
user.getUserId()
@SuppressWarnings("unused") private final Object strongReference; 
Pointer.class
temporaryFolder.newFolder()
mBackdrop.animate().alpha(0f)
DateTieredCompactionStrategy.class
!refType.equals(StructuredDocString.PARAMETER_TYPE)
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
System.out.println("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
mSupportView != null
i < 0
mode != null
logger.debug("AtmosphereResource {} is resuming",uuid())
out.writeObject(entry.getValue())
mActionView.getHeight()
DBG=true
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
Slog.e(TAG,"Unable to bind ActivityRecognitionProxy.")
Thread.currentThread().getId()
myProject.isDisposed()
mDiskCache.put(key,value)
app.setOrgName(ownerName)
i <= MAX_AUDIO_PORTS
partOfStatement.getLibraryId().toString()
IoUtils.safeClose(delegate)
expression instanceof PsiJavaCodeReferenceElement && !aClass.equals(PsiTreeUtil.getParentOfType(expression,PsiClass.class))
_training_metrics.auc().maxF1()
topLevelBuildData.getJobName()
Exception e
toolItem.getControl()
value.isNull()
typeDeclaration.isNovel()
!remoteTableHandle.isPresent()
ctx.cache().dynamicStartCaches(cacheCfgs,false,true,true)
status().isMovedTemporarily()
contentType != null
renderBlock(util,world,lightX,lightY,lightZ,false,true)
getTokenNames()
result == null ? 0l : result
lowJson.getDouble(i)
Thread.sleep(5000)
delayMs < 0
assertEquals(true,statement.getReferencesUniqueColumn())
into.get(i)
this.cusolverDnDsyevd_bufferSize.invoke(solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
{2,3,3,4,5}
mDataAuthorities == null
setColor(color)
m.getAnnotation(Test.class) != null
AbstractPushBufferStream.class
pw.println(ps.getInstantApp(user.id))
assertEquals(6,set.size())
private Integer id; 
c.networkId == netId
mNwService.getInterfaceConfig(mInterfaceName)
Math.abs(endAngle - startAngle) >= 360
Exception e
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
mAttachInfo == null
+portNum
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL)
holder == null
lock.isLocked()
writer.getSourceFile(1)
Integer.valueOf(st.nextToken())
err.jspError("jsp.error.tld.mandatory.element.missing","jsp-version")
_log.debug("Skipping undecodable parameter " + param,e)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
checkValidHandle(muMMatrixHandle,null)
SESSIONS_ROOM_AFTER(408,"sessions/room/*/after/*",ScheduleContract.Sessions.CONTENT_TYPE_ID,false,null)
getActiveFgCall().getPhone().sendDtmf(c)
DataManager.getInstance().getDataContext(getEditor().getComponent())
assertClusterSize(2,nodes[0])
new ArrayList<>()
NUM_DAYS_AGO=5
mAttributes.getFlags()
getDelegate().getSupportedCipherSuites()
Integer.valueOf(rightStr)
new String(bs2.toByteArray())
GL.glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)
cs.getString(columnIndex)
isDirectory()
!mStatus.showStatusLines()
query.getSliceEnd()
mContext.startActivity(cantAddAccount)
upgradeVersion=36
message.getType() == Message.TYPE_FILE
getName()
apex.installPackage(mResolvedBaseFile.toString())
asIntReg(result)
AssertionFailedError e
IMPL_HTTP_CLIENT4.equals(impl)
new LinkedHashSet<>()
ddmStructureLocalService.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
mSettings.writeRuntimePermissionsForUserLPr(userId,true)
display.getMetrics(dm)
mActionBar != null
HeaderBuilder.this
URLUtils.currentUrlStartWith(toString())
new MessageHeaderAccesssor(originalMessage)
text.closeElement(BR)
return START_NOT_STICKY; 
textEditor != null
telephony.getForbiddenPlmns(subId,appType)
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
mPlayer.getCurrentPosition() * 1000
PsiTreeUtil.isAncestor(exceptPart,e,true)
type.getConstructor()
CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(getProject()); 
user.getWorld().getTime()
selenium.isVisible("link=Control Panel")
Exception exception
cache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
new EngineConfig(shardId,"allocation-id",threadPool,indexSettings,null,store,newMergePolicy(),indexWriterConfig.getAnalyzer(),indexWriterConfig.getSimilarity(),new CodecService(null,logger),new Engine.EventListener(){   @Override public void onFailedEngine(  String reason,  Exception e){   } } ,IndexSearcher.getDefaultQueryCache(),IndexSearcher.getDefaultQueryCachingPolicy(),translogConfig,TimeValue.timeValueMinutes(5),Collections.emptyList(),Collections.emptyList(),null,new TranslogHandler(xContentRegistry,IndexSettingsModule.newIndexSettings(shardId.getIndexName(),indexSettings.getSettings())),new NoneCircuitBreakerService(),() -> SequenceNumbers.NO_OPS_PERFORMED,() -> primaryTerm.get())
(mOomMinFreeHigh[5] * 7) / 8
mockRegionInfo.isMetaRegion()
isSavedPostsList()
structuralLock.isLocked()
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
-7
loaded.getLoaded().getConstructor()
cudnnSetConvolution2dDescriptor(cudnnContext.convDesc,pad[0],pad[1],strides[0],strides[1],1,1,CUDNN_CROSS_CORRELATION)
meanCellsPerPartition <= 0
params.getSimulatePlatformVersion()
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
Validator.isNull(portalVersion)
MigrationManager.instance.notifyUpdateUserType(ut)
selenium.isVisible("link=Control Panel")
setAttributeInternal(inodePath,true,opTimeMs,options)
method.getMethodInfo()
!mWindow.getSharedElementsUseOverlay()
mediaController != null
dist < bestdist
!cursor.moveToFirst()
DBG=true
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
builder.setPositiveButton(res.getString(R.string.import_message_replace),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     Resources res=getResources();     StyledDialog.Builder builder=new StyledDialog.Builder(DeckPicker.this);     builder.setTitle(res.getString(R.string.import_title));     builder.setMessage(res.getString(R.string.import_message_replace_confirm,mImportPath));     builder.setPositiveButton(res.getString(R.string.yes),new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         DeckTask.launchDeckTask(DeckTask.TASK_TYPE_IMPORT_REPLACE,new DeckTask.TaskListener(){           @Override public void onPostExecute(          DeckTask.TaskData result){             if (mProgressDialog != null && mProgressDialog.isShowing()) {               mProgressDialog.dismiss();             }             if (result.getBoolean()) {               Resources res=getResources();               int count=result.getInt();               if (count < 0) {                 if (count == -2) {                   mDialogMessage=res.getString(R.string.import_log_no_apkg);                 }  else {                   mDialogMessage=res.getString(R.string.import_log_error);                 }                 showDialog(DIALOG_IMPORT_LOG);               }  else {                 Object[] info=result.getObjArray();                 updateDecksList((TreeSet<Object[]>)info[0],(Integer)info[1],(Integer)info[2]);               }             }  else {               handleDbError();             }           }           @Override public void onPreExecute(){             if (mProgressDialog == null || !mProgressDialog.isShowing()) {               mProgressDialog=StyledProgressDialog.show(DeckPicker.this,getResources().getString(R.string.import_title),getResources().getString(R.string.import_importing),true,false);             }           }           @Override public void onProgressUpdate(          DeckTask.TaskData... values){           }         } ,new TaskData(AnkiDroidApp.getCol(),mImportPath));         mImportPath=null;       }     } );     builder.setNegativeButton(res.getString(R.string.no),null);   } } )
copy.add(obj)
mWorkerId + BASE_FILE_NUMBER
isRemoteRegionRequested
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
sendSigInt(myProcessUid)
rats.getConfig()
Log_OC.e(TAG,"onResume() start")
syncMessage.length() == 0
builder.getErrors().getErrors()[2]
mMountTable.resolve(getPath(next)).getPath()
new NagiosNscaStub(25667,"password")
mNextNonWakeupDeliveryTime > nowELAPSED
selenium.isVisible("link=Control Panel")
threadHandler.get().post(new Runnable(){   public void run(){     long loopFinishTime=SystemClock.uptimeMillis();     if (windowManager != null) {       try {         windowManager.showStrictModeViolation(false);       }  catch (      RemoteException unused) {       }     }     for (int n=0; n < records.size(); ++n) {       ViolationInfo v=records.get(n);       v.violationNumThisLoop=n + 1;       v.durationMillis=(int)(loopFinishTime - v.violationUptimeMillis);       handleViolation(v);     }     records.clear();   } } )
getter.getRawReturnType()
new DMLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
Trans == TRANSPOSE
g.paidAppName.isEmpty()
(RepositoryImpl)ethereum.getRepository()
LOGGER.debug("Unable to process JSON",exception)
out.setAttributesToElements(value)
test(externs,js,(String)null,ConstCheck.CONST_REASSIGNED_VALUE_ERROR,null)
Boolean.valueOf(attrValue)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
Log.e(TAG,msg)
selenium.isVisible("link=Control Panel")
new RangeSliceCommand(KS,CF,System.currentTimeMillis(),filter,range,count)
new Paint(Paint.ANTI_ALIAS_FLAG)
NativeDecoder.matches(out,getMatchingOutputFormats(inputFormat))
ATLAS_MAP_ENTRY_FIELD_COUNT=4
mCurrentVrService == null
c < 0xe000
v instanceof View
r.lock()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public Info create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
ft.commit()
mMenu.getVisibleItems()
key.equals(OAuthConstants.SCOPE)
row > getRowCount() - 1
Math.abs(diff - maxAge) <= 1
OutOfCapacityError e
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
a.length >= count()
routingTable.routePacket(probee,presence)
executeRunnableDismissingKeyguard(runnable,null,false,true)
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,false,incompleteCode)
generateRandomStringArray(10,5,false)
Trans == TRANSPOSE
pluginPanel.init()
clientBuilder.readTimeout(timeout,TimeUnit.MILLISECONDS)
policyFlags & SCAN_REQUIRE_KNOWN
methods[index] == null
log.error(notJava6.getMessage() + " .. trying RI.")
i=0
handler.inGroup(base,node)
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
AnnotatedElementUtils.isAnnotated(type,Validated.class)
shortSizeDp > 600
"Error resetting interface " + mInterfaceName + ", :"+ e
logger.error("Couldn't write to file: " + filename)
scheme.equals("tel")
appMode.getSmallIconDark()
cal.add(Calendar.MILLISECOND,12)
logger.error("Error connecting to Plex",e)
nodeEngine.getService(LockService.SERVICE_NAME)
expandableView.getActualHeight()
ConcurrentHashMap<VoiceRouter.VoiceMessageListener,Void>
mainFile.getRunfilesPathString()
result.bitmap != null
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity")
super.getLikeProvider(path)
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().getEpochSecond()
(line=reader.readLine()) != null
buildExplodedWebapp(getWebappDirectory(),getWebappDirectory())
new ExtractionGeneratorOptions(false,propertyCheckBox.isSelected())
case 12: 
pkgs.get(i)
this.spiceServiceListenerSet.add(spiceServiceServiceListener)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mHorizontals == null
Long.valueOf(attrValue)
layoutTreeNodes.size()
y < bb.maxY
createTextAttributesKey("KOTLIN_EXTENSION_PROPERTY")
!mUserVisibleHint && isVisibleToUser && mState < STARTED
mState == STATE_STARTED | mState == STATE_STARTING
mPowerManager.isScreenOn()
getTimeout()
ImmutableMap.of(BuildInfo.BUILD_TIMESTAMP,Key.of(KeyType.INTEGER,"0","0"))
logger.trace("{} error while performing pre synced flush on [{}], skipping",shardId,exp,shard)
selenium.isVisible("link=Control Panel")
settings.readLPw(null)
new Error()
sendKeyDown(keycode)
oldConfig.densityDpi != newConfig.densityDpi
@Nullable JLabel label
analysis.getType(expression)
-337089824
lp.width != panelWidth
i <= 'Z'
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
assignableValue.getValue().equals(populateValueRequest.getProperty().getValue())
!active
return false; 
populateLibraryUi()
new SpannedString(first,false)
-46
ignoreUnknown=false
completeBox.setBackgroundResource(R.drawable.btn_check)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
new UnsupportedOperationException("Storing a directory is not yet supported.")
previousState.getPrevCall()
return false; 
last.getParent()
DomUtil.getRawType(type)
(!client.isFailed()) && (!client.isGone())
return mChangingAppearingDuration; 
getTelecomService().hasVoiceMailNumber(accountHandle)
"Camera resolution: " + screenResolution
new ArrayList<>()
display.getMetrics(mDisplayMetrics)
mResourceData[i] != null
from.getRegistryName()
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.INFORMATIONAL)
selenium.isVisible("link=Control Panel")
Long.valueOf(args[ai])
mFragmentManager.findFragmentById(R.id.navigation_drawer) != null
new RoutingControlAction(this,newPath,false,callback)
dateFormatter.format(value)
mock.expectedMessageCount(1)
index >= widgets.length
chargeUAh > 0
assertEquals(43.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
ps == null
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
read.getReadDate()
run()
return false; 
DiagnosticType.error("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
PrintAttributes.enforceValidColorMode(currentMode)
smsHeader.portAddrs != null
container.getAttributeModel().getNodeTable()
dynamicDefines.hashCode()
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout)
jid != null
selenium.isVisible("link=Control Panel")
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
jobDataMap.put(SchedulerEngine.JOB_STATE,jobState)
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ;
request.getServletPath()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
Map<Integer,Object>
getPlayerPosition().z
OverridingMethodsSearch.search(method,method.getUseScope(),false)
exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
@SystemApi
dynamicType.getLoaded().getConstructor()
pubnub.unsubscribePresence(channel)
sm.getString("namingContext.nameNotBound",name.get(0))
Throwable t
current.getSuperClass()
is(3)
c == Double.class
server1.getStoreRepository().getLocalStore(storeName)
@Nullable
Maps.newHashMap()
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement())
Log_OC.e(TAG,"Canceling all syncs for " + MainApp.getAuthority())
requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS)
meta.getColumnDefinition(columnName.key)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
Mono.currentContext()
new ConnectionError(sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),Http2Error.COMPRESSION_ERROR)
(lo + hi) >> 1
node.getBranch()
new Paint(Paint.ANTI_ALIAS_FLAG)
new UnsupportedOperationException()
warn(Log.IGNORED,ignored)
Localization.menuTitle("Find unlinked files")
new StringBuilder()
mGpsListener != null
1234567890 * 2
dialog.show()
tracesFile.mkdirs()
telephony.getCdmaEriTextForSubscriber(subId)
selenium.isVisible("link=Control Panel")
_log.error(ioe,ioe)
winAnimator.prepareSurfaceLocked(recoveringMemory)
assertNotEquals(BuildRuleSuccessType.BUILT_LOCALLY,logEntry.successType.get())
List<Map<String,Object>>
-1
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
bs.max() <= 32
processInstanceArray.size() == 0
entry.key == k
stores.contains(name)
librariesConfigurable instanceof ProjectLibrariesConfigurable
esVersion.after(Version.V_5_3_0_UNRELEASED)
selenium.isVisible("link=Control Panel")
storeField(field,isAttributeExpression,pexp,objectExpressionType,visitor,receiver.getData())
counter >= max
put.writeToWAL()
JspUtil.makeXmlJavaIdentifier(poolName)
parameter.toString()
new WeekViewEvent(event.getId(),event.getName(),event.getStartTime(),endTime)
JetTypeChecker.INSTANCE.isSubtypeOf(type,expectedType)
Pair.of(buffer,volumeBox)
assertFalse(strayChild.isSafelyReplaceableBy(newChild))
UastUtils.isChildOf(((UBinaryExpression)parent).getRightOperand(),expression,false)
allowedAudiences.contains(providedAudiences)
logger.info("Parsing Dep: " + filePath)
mWM.removeView(mView)
EXCEPTION_PATTERN.matcher(error)
side.toString()
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
publishProgress(progress,max)
Integer painelStatus=parser.nextInt(); 
selenium.isVisible("link=Control Panel")
InputProcessor[]
Assert.assertEquals(9500,Utils.calculateHeapSize(10000))
LOGGER.lifecycle(msg.apply())
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
args[0].length() == 51
Class.forName(serializerConfigClassname,true,userCodeClassLoader)
tracesFile.mkdirs()
Utility.cancelTasks(followOrUnfollowTask)
commonPrefixLength == chars.length()
LOG.error("PriviledgedActionException as:" + this + " cause:"+ cause)
i <= repeatCount
TURN_DISTANCE=55
Double.valueOf(value.toString())
RequestContext.create()
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer","jenen")
Queue<String>
cachedDevice != null
mPowerManager.isScreenOn()
suiteClass.getName()
docker.createContainerCmd("busybox")
/**   * Checkstyle frame model.   */ private final transient CheckstyleFrameModel model=new CheckstyleFrameModel(); 
openConnection(true)
new Paint(Paint.ANTI_ALIAS_FLAG)
_freemarkerEngineConfiguration.getResourceModificationCheck()
IQProvider provider
sExecutorService.shutdown()
mQsContainer.getX()
telephony.isRadioOn()
loaded.getLoaded().getConstructor()
availablePlugins.get(i)
exchFut.discoveryEvent().node()
application.isPresent()
i=1
statusBar.setRedraw(true)
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkInfos,checkWeakWarnings)
writeRepeatedBool(id,val)
sender.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
!tickEnd
Assert.assertEquals(serviceContext.getAssetLinkEntryIds(),assetLinkEntryIds)
new IndexWriter(dirName,new WhitespaceAnalyzer(),true)
selenium.isVisible("link=Control Panel")
logger.debug("myq securityToken: {}",securityToken)
dstCursor != null
Environment.getRootDirectory()
createFromResourceStream(res,value,is,srcName)
Looper.getMainLooper()
assertEquals(7,resultList.size())
model.getNodeTextColumns() == null
public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.isVisible("link=Control Panel")
Exception e
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
um.getUsers()
new ImmutableInstruction3rc(deodexedOpcode,instruction.getRegisterCount(),instruction.getStartRegister(),resolvedMethod)
t.getVolume()
startIndex + startIndex
dest.writeArray(serviceUuds)
assertEquals(row.getField(0),2L)
Optional<T>
getDataSource()
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
TimeUnit.SECONDS.toMillis(2)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
@SuppressWarnings("unused") private final Object strongReference; 
page.getMembersByIdx(1).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(1)
mPositions[i] >= 0
getRoot()
mAuthorities.get(i)
drawable != mBackgroundDrawable
Arrays.asList(Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),"h2-15")
callTimeout=1000
isGroupConversation()
buf.openElement("url")
STANADALONE
dependencyNode.getId().getAsked()
loaded.getLoaded().getConstructor()
type.getConstructor()
MAX_DEFAULT_FRACTIONS_DIGITS=4
Encr.decryptPasswordOptionallyEncrypted(r.searchValue("PASSWORD").getString())
getLoaderManager().initLoader(LOADER,null,mLoaderCallbacks)
teleport(new Target(loc),chargeFor)
myLeftPrecalculated.get(lineRight)
return 1; 
Integer.toHexString(quality)
new byte[160]
serialVersionUID=256413574
getDefaultLanguage()
Integer.valueOf(this.getOptional("kylin.restclient.connection.max-total","200"))
Localization.menuTitle("Bibtex key patterns")
parameter.getSimpleName()
scheduleRemoveStartingWindow(wtoken)
selenium.isVisible("link=Control Panel")
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
dynamicType.getLoaded().getConstructor()
bs.getDependsOnGroups()
tree.getClientArea()
a.getInt(attr,0)
data[1] < 4
cacheDirectory.exists()
id=36
isZeroLatencyTypingEnabled() && IMMEDIATE_EDITING_ACTIONS.contains(action.getClass())
mTargetNames != null
user.getCompanyId()
Cache.class
UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),true,event.mediaModelList,event.successMessage)
List<ConstantExpression>
sb.append(servletName)
password.length() > 8
mAlarmManager.setInexactRepeating(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class))
uri.getAssetName().toString()
bulkInsertableMap.get(entityClass)
internalTransaction.getReceiveAddress()
selenium.isVisible("link=Control Panel")
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
256 << zoomLevel
fileExtension.equals("testcase")
-1
new WKTWriter()
EqualityComparer<T>
child.resetResolvedLayoutDirection()
case 5: 
dl.info("_offset_column","Offset is only supported for regression.")
mUserPaddingStart > 0
file.getInputStream()
log.error("Couldn't find style: " + styleId)
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
tw.release()
!"https".equals(uri.getScheme())
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
mStackScroller.getChildAtPosition(x,y)
newState.score()
Integer.valueOf(st.nextToken())
response.getHits().getAt(0).field("s_obj2_arr2").value()
Exception ex
new org.apache.ws.security.message.token.UsernameToken(tokenElement,false)
mKey.equals(other.mKey)
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
dataFormatModel.setLabel(row.get("description"))
String tag
IccUtils.gsmBcdByteToInt((byte)0x8c)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
Exception e
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
new InternalTestCluster("network",randomLong(),createTempDir(),1,1,tribeClusterName,tribeSettingsSource,0,false,TRIBE_CLUSTER_NODE_PREFIX)
HttpRequest.put("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
DEBUG=true
dashboard.addWidget("issues_action_plans",2)
type == null
nativeEvent_.getKeyCode() != KeyCodes.KEY_TAB
makeProperty(obj,boolean.class,"setEnabled","isEnabled","Enabled")
client != null & client.autofillClientIsFillUiShowing()
Optional.of(certificatesFile)
display.getMetrics(dm)
dest.writeLong(mSubId)
Color.fromRGB(0x7B2FBE)
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).contains("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
logger.debug("NODE {}: Retry timout: Can't advance")
callNode.call(frame,packArguments(frame,arguments,toLLVMNodes,cachedLength))
mapMarkersHelper.getMapMarker(objectInMotion)
request.addHeader(h.getKey(),h.getValue())
@Nullable public Params getParams(){   return params; } 
userInfo.getWebpage()
ArrayList<IncomingServerSession>
mTfs.ls(Constants.PATH_SEPARATOR,true)
dimension - 11
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
getStreamNode(iterationHead)
Locale.getDefault().toString()
return true; 
getApplicationInfo().targetSdkVersion >= O
metastore.getHostText()
session != null
DiagnosticGroups.registerGroup("oldCheckTypes",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS)
return false; 
ImmutableList.of("jinput.jar","lwjgl.jar","lwjgl_util.jar")
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 90
(float)executions / iteration
LOG.info("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
reportError(context,"encoding %s as an ARRAY was unexpected")
treeWalk.release()
log.warn("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
ArrayList<Library>
Utils.class
_start > 0
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
new LayerVisitor(this,asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
new IllegalArgumentException(e.getMessage())
con.commit()
accountHandle.getComponentName().toString()
DefaultAtmosphereRequest request
serverService.getIncomingInterceptors()
mGpsListener != null
new IndexWriter(dir,new Analyzer(){   public TokenStream tokenStream(  String fieldName,  Reader reader){     return new TokenFilter(new StandardTokenizer(reader)){       private int count=0;       public Token next() throws IOException {         if (count++ == 5) {           throw new IOException();         }         return input.next();       }     } ;   } } ,true)
ArrayList<MemberNode>
trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)
is(2)
connection.getServiceName()
row > getRowCount() - 1
call.getRpcTimeout()
Math.abs(a.d - b.d) < 1e-3
assertEquals(3,StringUtil.countMatches(drl,"import "))
n.extras.getString(Notification.EXTRA_TITLE)
createScopePanel()
telephony.getCdmaEriTextForSubscriber(subId)
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),name)
new CommandExecutor(context,message,this)
mKeyguardController.isKeyguardLocked()
liveMetadata != null
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
Arrays.asList("Bnd-LastModified","Javac-Debug","Javac-Deprecation","Javac-Encoding")
this.thrown.equals("File must not be null")
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
serviceDataUuid == null
Timber.e(e,error)
/**   * Logical name of the property; will be used as the field name under which value for the property is written. <p> NOTE: do NOT change name of this field; it is accessed by Afterburner module.  */ protected final SerializableString _name; 
session.users().getUserByServiceAccountClient(client)
BuildNumber.fallback()
log.warn("Reset to factory defaults : onOperator")
new Paint()
child.resetResolvedLayoutDirection()
minSize(new Fixed(width))
String text
WebSettings.setTextSize(WebSettings.TextSize.SMALLEST)
binary.length < 32
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
new UnsupportedOperationException()
8 * 1024
UserGroupRoleLocalServiceUtil.getUserGroupRole(userGroupRolePK)
viewStateIndex|=VIEW_STATE_PRESSED
uid > 0
delaySoFar > mReEnableDelayMillis
flux.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
DEBUG=true
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
sides > 3
i >= 0
Files.createDirIfNoExists(root)
type.getConstructor()
branch.hasState()
ffmpegExecuteAsyncTask.isProcessCompleted()
id=15866
telephony.getDataNetworkTypeForSubscriber(subId)
mBondState.setBondState(address.toUpperCase(),state)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
((GrReferenceList)e).getReferenceElements()
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)","NP|QP < ( DNP=target < (QP < OD !< CD) !< JJ|ADJP $++ NP|QP )")
editor.commit()
DEBUG=true
inverterRealtimeResponse == null
r.curApp != null
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
secretQuestionPanel.getSecret()
System.currentTimeMillis()
mHeader.performClick()
type.getConstructor()
RecentsHorizontalScrollView.super.removeViewInLayout(view)
wikiPagePersistence.findByG_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
logger.info("Calimero library version {}",Settings.getLibraryVersion())
WebSettings.setTextSize(WebSettings.TextSize.NORMAL)
SpellCheckerBundle.message("word.0.1.is.misspelled",token.getElement().getLanguage())
mp.getValue()
Log.info(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
mock.expectedMessageCount(3)
logger.debug("myq securityToken: {}",securityToken)
isEnabled()
ft.commit()
args.argsLength() > 1 ? args.getDouble(1) : 2
"Failed to generate [" + source + "]"
ServiceHelper.startService(jmx)
fragmentEntryPersistence.filterFindByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
mMncStr == null
Exception e
mWM.isKeyguardSecure()
progressHeight - 3
StringUtils.isEmpty(formKey)
!method.getModifiers().contains(Modifier.STATIC) && method.getModifiers().contains(Modifier.ABSTRACT) && method.getParameters().isEmpty()&& method.getReturnType().getKind() != TypeKind.VOID
srTree.Result != mySearchResult
this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
status == PlayerStatus.INITIALIZED
Math.max(desiredTileWidth,desiredTileHeight)
new StringBundler(6)
ev.getY() < mQsContainer.getBottom()
Slog.e(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
this.csrfTokenRepository.generateToken(exchange).flatMap(token -> this.csrfTokenRepository.saveToken(exchange,token))
doOpenIfChanged(false)
selenium.isVisible("link=Control Panel")
_typeSettingsProperties.toSortedString()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
getMockEndpoint("mock:event").expectedMessageCount(5)
LOG.warn(title + "; " + message)
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)
params.get(key)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
Math.min(1000L,connectionTimeout)
RuntimeGlue optionalGlue
settings.readLPw(null)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
module != null
IBackupManagerService svc=mService; 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
Void... objects
sleep < 0
varType instanceof PsiWildcardType
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
message.getExpiresInSeconds() * 1000
Log.wtf(TAG,"Unable to resolve SystemUI's UID.",e)
mActiveAgents.remove(info)
desktopSharingButton.setRolloverImage(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
mActiveAgents.remove(info)
dest.writeLong(mSubId)
mHandler.postDelayed(pae,timeout)
public S on(Expr.EBoolean o){   query.on(o);   return self; } 
final DeletionRetentionStrategy deletionRetentionStrategy=clusterConfigService.get(DeletionRetentionStrategy.class); 
DEBUG=true
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
mAlpha.end()
Validator.isNotNull(PropsValues.MOBILE_DEVICE_TYPE)
ts.getJobId() == jobid
mServerFile.getModificationTimestamp() > mLocalFile.getModificationTimestampAtLastSyncForData()
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null)
gatherDisableActionsLocked(userId)
code.length > 65536
registerError(elseToken)
_freemarkerEngineConfiguration.getResourceModificationCheck()
typeSettingsProperties.toString()
JiveGlobals.getPropertyEncryptor().encrypt(propValue)
from > to
mService.setUidPolicy(UID_A,POLICY_NONE)
LOG.error(e)
getLabel()
new IllegalStateException()
Validator.isNull(entry.getUrlTitle())
atlasFile.path()
toArrayHelper(array,1)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
"value".equals(key)
selenium.isVisible("link=Control Panel")
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
mContext.sendStickyBroadcast(mStorageLowIntent)
mWindowingMode == WINDOWING_MODE_PINNED
userContext.getContentResolver()
Map<Integer,Object>
loaded.getLoaded().getConstructor()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
logoutPost != null
callNode.call(frame,getCallTarget(function),packArguments(frame,function,arguments,cachedLength))
merge4dCnnData(featuresToMerge)
mDemoSlider.setDuration(1200)
expandableView.getActualHeight()
Long.valueOf(val)
new Paint()
assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON)
(Object)y
e.isShiftPressed()
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
MLPMnistSingleLayerExample.class
this.originX
g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),expr)
mGpsListener != null
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
bar.getValue() > 0
result=false
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
node instanceof InspectionNode
new DeserializationException(e)
String.class
IOException e
computeActive()
i < 10000
method.getClass()
waitOnThreads(f1,f2,f3,f4,f5,f6,f7,f8,f10)
selenium.isVisible("link=Control Panel")
this(60000L); 
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
file != null
lastVisibleIndex >= 0
config.getBoolean("single.reader.only")
new CircularClipper(mDetail)
position - dockDividerWidth
factory.getEmbdeddedServletContainer()
isRunning()
!thingGroupItem.getLabel().equals(label)
part.getEndLine()
win.isAnimatingLw() && appWindow && showWhenLocked
LOG.error("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
ServiceLoader.load(ReportInteraction.class)
HashMap<>
orderBook.getDate()
webSocketProcessor.close(webSocket,0)
firstPos != mTargetPos
_backgroundTaskThreadLocalManagerImpl.setUserLocalService(userLocalService)
log.info("BouncyCastle not registered, using the default JCE provider")
inserter.release()
new IOException(badLine)
RuntimeGlue optionalGlue
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
this.messageService.fluxPostAuthorizeBeanFindById(1L).contextStart(withUser)
hiddenElements.contains(graphElement)
origin.realComponent().doubleValue() <= other
T
PasswordEncryptorUtil.encrypt(jPassword)
StringBuffer buffer=new StringBuffer(strings[i]); 
is(400)
annotations.isEmpty()
"Error resetting interface " + mInterfaceName + ", :"+ e
listener.onComplete(new AsyncEvent(event.getAsyncContext(),request,response,event.getThrowable()))
i < 9
logger.error("Could not locate PropertySource: " + (errorBody == null ? error == null ? "label not found" : error.getMessage() : errorBody))
sequenceFileVersion == SEQUENCE_FILE_VERSION
this.role
!mConfig.bindPermission.equals(info.permission)
new Paint(Paint.ANTI_ALIAS_FLAG)
Exception e
notifyDataSetChanged()
doTestNegative(301,false)
message.getContact()
mContext.startActivity(intent)
ServiceManager.addService(Context.DISPLAY_SERVICE,display)
replicaEngine.refresh("test",true)
!mDownloadXtraDataPending
conn.prepareStatement(sql)
/**   * Needed for statistics.   */ private final LongAdder rejectedJobsCnt=new LongAdder(); 
Assert.assertEquals(stdoutLines.length,lines.length)
new IllegalArgumentException(String.format("Cannot get the time zone of: %s",this))
mHorizontals == null
is(3)
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP)
startingWindow != null
result=null
outputDir.getCanonicalPath()
Integer.toString(flags,16)
SkylarkDict<String,Object>
Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor()
Double.isNaN(rate)
valueRelay.hasObservers()
Log.wtf(TAG,e.getMessage(),e)
MAX_PERCENT_DIFFERENCE=0.1
s.charAt(3) != '<'
logger.warn("Line-in of {} is not connected",getUDN())
mFile.getPath()
ts.getJobId() == jobid
customCroutonControls.setVisibility(View.VISIBLE)
fb.capacity()
sourceWidth > 0
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
adapter.item(R.string.layer_underlay).selected(underlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_down_dark,R.drawable.ic_action_down_light).listen(listener).position(11)
!cursor.moveToFirst()
store.setConfigPath(usersFile)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
return self; 
Long.valueOf(value)
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(calendarBooking,0,false)
bucket.exists()
telephony.getCdmaEriTextForSubscriber(subId)
Allocation.createFromBitmap(mRS,b,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
mapper.getJsonFactory()
printServices.size() >= 2
verify(mWifiService,never()).stopLocalOnlyHotspot(anyString())
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(ChangingLoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
constraints.weightx=0f
new DownSamplerForExposureNode(context,readOnlyGBufferConfig,displayResolutionDependentFBOs,FBO_16X16_CONFIG,immutableFBOs,aLabel)
statement.addPrimaryKeyColumn(column.getName(),constraints.getPrimaryKeyName(),database.getColumnType(column.getType(),isAutoIncrement))
descriptors[i].getPropertyType().equals(propertyType)
Thread.sleep(100)
isMailSenderDefined()
IndexReader.openIfChanged(reader)
? extends Exception
sampleFactory.getConstructor()
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",14)
new IllegalStateException("PLAIN supports neither integrity nor privacy")
UIPasteboard.getGeneral()
c.write("[you] " + msg + '\n')
mPowerManager.isScreenOn()
mService.setUidPolicy(UID_A,POLICY_NONE)
settings.readLPw(null)
cache.context().isStatisticsEnabled()
simple.getFromSentDate()
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,true)
setErrorPlaceholder()
telephony.getNetworkTypeForSubscriber(subId)
Preferences.navigationEnabled(context)
loaded.getLoaded().getConstructor()
Assert.assertTrue(System.currentTimeMillis() - now < 5000)
assertEquals(4,result.getBySeverity(Severity.NOTE).size())
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",sourceFileObject.toString(),e.getMessage()),e)
Calendar.getInstance(JSON.defaultLocale)
!mRequestFilterKeyEvents
new Paint(Paint.ANTI_ALIAS_FLAG)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
selenium.isVisible("link=Control Panel")
@NotNull RemoteSdkCredentialsHolder credentials
parser.getText()
mContext.startActivity(cantAddAccount)
processEngineConfiguration.getCommandExecutorTxRequiresNew()
LOG.isDebugEnabled()
TupleDomain.none()
store.getImage()
@Mock private HidProfile mHidProfile; 
gatherDisableActionsLocked(userId)
@Path(PATH_NODE_INDEX_ID)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
Nd4j.zeros(mb,1,inputLength)
mEditSessionTime.setText(String.valueOf(repLimit))
id=50
target.getDestination()
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER")
attributes == null
total > 0
selenium.isVisible("link=Control Panel")
monitoringStatus.updateMonitoringStatusTime()
contribution[LIGHT_AMBIENT_R]
DEFAULT_WIDTH=0x008000000
final LongAdder cnt=new LongAdder(); 
TYPEAHEAD_LOG.warn(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
Executors.newCachedThreadPool()
new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup)
DbException.get(ErrorCode.OBJECT_CLOSED)
verify(mWifiService).stopLocalOnlyHotspot()
"SELECT id, factId, combinedDue FROM cards WHERE type = 1 AND combinedDue > " + dueCutoff + " ORDER BY combinedDue LIMIT "+ mQueueLimit
ConstantNode.forLong(config.logOfHRGrainBytes)
mInTouchMode=false
Boolean.valueOf(resizeableStr)
text.contains("${")
readPermission.intern()
(mOomMinFreeHigh[5] * 7) / 8
Looper.getMainLooper()
LOG.error("Couldn't delete {} - does not exist",f)
this(128); 
verifyAttributes(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
ClusterLeaveReelectionListener.class
executor.scheduleWithFixedDelay(this,period,period,unit)
Character.isDigit(first)
isAlphaModeEnabled(window)
Long.valueOf(args[1])
selenium.isVisible("link=Control Panel")
expandable::collapse
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
logger.warn("Radio station '{}' not found",station)
Exception e
mToolbar.setTitle(title)
-26
IntentFactory.create(mContext,type,text)
selenium.isVisible("link=Control Panel")
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_RECORD_FUNCTION)
compensationRange.inRange(compensation)
logger.debug("Requsting URL {}",url)
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
path(11)
/**   * Creates the  {@link TokenStream} of n-grams from the given {@link Reader}.   */ public TokenStream create(Reader input){   return new NGramTokenizer(input,minGramSize,maxGramSize); } 
java.lang.System.currentTimeMillis() + 2000
header.writeBytes(mask)
WordPress.getCurrentBlog().getRemoteBlogId()
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkWeakWarnings,ignoreExtraHighlighting,checkInfos,getHostFile())
synchronized (classCache) {   classCache.clear(); } 
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getParentGroupId(),assetTagName)
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
editor.commit()
delayDuration - 50
gauge.getValue() instanceof Long
event.getTime() > currentPlayTime
redefined.getConstructor()
new CommentByBlockCommentHandler().invoke(myFixture.getProject(),myFixture.getEditor(),myFixture.getFile())
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
mGpsListener != null
new GraphQLException()
Integer.valueOf(port)
WordPress.getCurrentBlog().getRemoteBlogId()
options.getLambdaRole()
new ConcurrentHashMap<String,Boolean>(64)
dest.writeParcelableArray(remoteInputs,flags)
defaultCamelContext.removeRouteDefinition(id)
response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty())
Object node
what instanceof UpdateAppearance || what instanceof ParagraphStyle
StringBuffer ret
Integer chatId
Long.valueOf(args[2])
new StringBuilder()
/**   * Returns an  {@code AfterAll} {@code Trigger} with the given subtriggers.  */ public static OnceTrigger of(OnceTrigger... triggers){   return new AfterAll(Arrays.<Trigger>asList(triggers)); } 
new BufferedImage(region.height,region.width,page.getType())
lp.onResolveLayoutDirection(layoutDirection)
pool.dealloc()
selenium.isVisible("link=Control Panel")
telephony.getNetworkTypeForSubscriber(subId)
logger.info("Failed to register block {} - no id",block,block.getId())
IllegalStateException e
row("p_comment",null,1.0,0.0,null,null,null)
AbstactStoreHandler<DelayedEntry>
activityMonitor.waitForActivity()
new RecordReaderDataSetIterator(rr,new SelfWritableConverter(),batchSize,labelIndex,numPossibleLabels,regression)
DEBUG=true
mPolicy != null
e.getOldLeadSelectionPath() != null
SDK_INT >= O
request.getRequestURI()
"$" + functionName
c.deactivate()
queryIndex == 0
fraction * (nextValue - prevValue)
SpectralKMeansDriver.run(new Configuration(),affinities,output,1100,5,measure,convergenceDelta,maxIter)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
!closedWay && getOuterWays().size() == 1
currentResponse.getAuthentication() != null
customCroutonControls.setVisibility(View.GONE)
selenium.isVisible("link=Control Panel")
flusher.register(handler)
mSyncStatus.get(i)
mShouldTranslateContents
new DecoderInfo("OMX.google.raw.decoder",null)
new IllegalAccessError("read-only")
void receiveEndOfStream(int streamId) throws ConnectionError ; 
loaded.getLoaded().getConstructor()
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
Conv2DConfig.builder().kh(kernel[0])
updateRotation(1)
Sets.newHashSet("int","int8","int16","int32","int64","uint","uint8","uint16","uint32","uint64","uintptr")
Arrays.asList(manageSelectors,mergeDatabaseAction,newSubDatabaseAction,close,save,saveAs,saveSelectedAs,undo,redo,cut,delete,copy,paste,mark,unmark,unmarkAll,editEntry,selectAll,copyKey,copyCiteKey,copyKeyAndTitle,editPreamble,editStrings,toggleGroups,toggleSearch,makeKeyAction,normalSearch,incrementalSearch,replaceAll,importMenu,exportMenu,openPdf,openUrl,openFolder,openFile,openSpires,togglePreview,dupliCheck,highlightAll,highlightAny,newEntryAction,plainTextImport,massSetField,manageKeywords,closeDatabaseAction,switchPreview,integrityCheckAction,autoSetPdf,autoSetPs,toggleHighlightAny,toggleHighlightAll,databaseProperties,abbreviateIso,abbreviateMedline,unabbreviate,exportAll,exportSelected,importCurrent,saveAll,dbConnect,dbExport,focusTable)
256 << zoomLevel
httpClient.getSocketMiddleware()
new IndexWriter(store,new SimpleAnalyzer(),true)
commit()
expectedCommentLength < maxCommentLength
new NameAlias(tableNameAlias)
assertValue(context,recordClass,Trait.INSTANTIABLE,Trait.MEMBERS)
valueType.isIntegerNumber()
@Override public Value emitBitScanReverse(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IBSR,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LBSR,result,asAllocatable(value)));   }   return result; } 
activity == null
selenium.isVisible("link=Control Panel")
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
ch.unsafe().flushNow()
getActivePreferenceStore()
getRawFieldBlock(i).getSizeInBytes()
PrivacyManager.getSettingBool(null,context,uid,PrivacyManager.cSettingRandom,true,false)
PREVIEW_FRAME_TIMEOUT=300
saveAttachmentTo(directory)
offset > mValue.length
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
viewToClick != null
into.get(i)
TransformItem.create(R.id.ivFirstImage,Direction.LEFT_TO_RIGHT,0.50f)
deployOneTaskProcess()
position.setLatitude(field.getJsonNumber("Long").doubleValue())
addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
origin >= other
interceptor.intercept(invocation)
i < 98
thumbView.setTag(Video.getUrl(trailer))
endPosition.getPosition() < logfileoffset
createCachedInstanceOn(event)
Math.cos(Math.toRadians(degrees))
new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR)
indexData.clear()
mEnterTransformation.printShortString(pw)
Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor()
i=1
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage))
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
blog.getRemoteBlogId()
selenium.isVisible("link=Control Panel")
Thread.sleep(5000)
nameDefinitionMultimap.keys()
selenium.isVisible("link=Control Panel")
StringUtils.isEmpty(value) ? true : Boolean.parseBoolean(value)
Thread.sleep(5000)
ContainerUtil.getLastItem(expressions)
List<ValueParameterDescriptor>
Object edge
stmts == null
currentVersions.get(flowFile.getId()) != null
seqNoStats.v1()
evaluationText.getText().indexOf('\n') == -1
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
mTestStream.getBytesFlushed()
id.provider.info != null
GL20.glUniform2(location,v)
type.getConstructor()
mResourceData[i] != null
Thread.sleep(20)
closing.get()
typeTmp.get(0)
mNextWakeFromIdle != null
filter != null && !filter.isAccept(field)
GridHadoopTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
j < size
NUM_OUTPUT_BUFFERS=16
new Ansi(true)
ifcg.addr == null
sketchWidth0 < sketchWidth0
IBackupManagerService svc=mService; 
annotationHelper.printError(element,"%s annotated element should have an empty constructor")
runner.addExtensions(session,getLog(),lifecycleExecutor,artifactFactory,localRepository,artifactMetadataSource,artifactCollector,dependencyTreeBuilder,projectBuilder)
position - dockDividerWidth
assertEquals(model.getProperties().get(COUNT).getType(),"integer")
final Prototype testedPrototype
@NotNull
internalAddChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
ftm.registerFileType(StdFileTypes.XML,RNG_EXT)
Thread.sleep(5000)
canWrite(mediaType)
client.loginWithFacebook(fbAccessToken,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
WEB_SYNC_MANAGER=true
fields != null
@NotNull
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
ret.setComplete(response)
getCategoryMethodGetter(sender,getterName,false)
name.equals("Devices")
oldStarred=Boolean.parseBoolean(value)
element.getText()
position.setEmpty()
String.format("Time taken: %d.%03ds",seconds,milliseconds)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
SIZE_OF_LONG + SIZE_OF_INT
Nd4j.createUninitialized(new int[]{1,nParams},'c')
securityMode != SecurityMode.None
Arrays.asList("bool","qint32","qint64")
mQsContainer.getLayoutParams()
task.cancel()
mock.expectedBodiesReceived("c","b","a")
DEBUG=true
now.plusDays(3).toDateMidnight()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
@JsonProperty("id") Integer id
public SELF withArguments(String... arguments){   operationParamsBuilder.setArguments(arguments);   return getThis(); } 
dest.writeParcelable(this.milestone,flags)
LOG.warn("Couldn't collect changes between " + oldRevision + " and "+ newRevision,e)
new DisappearAnimationUtils(context,125,1.2f,0.8f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
synchronized (point) {   points.add(point);   int size=points.size();   if (size > MAX_RESULT_POINTS) {     points.subList(0,size - MAX_RESULT_POINTS / 2).clear();   } } 
maxEntries == -1
modules.size()
Long.valueOf(args[1])
token.getLifetime()
post.getTitle()
config.get(CONFIG_KEY_READ_TIMEOUT)
KeyEvent.isMetaKey(keyCode)
sqlRouteResult.getSqlParsedResult().getSqlType()
m[M03]
XmppStringUtils.parseBareAddress(key)
a.getColor(R.styleable.WeekView_dayNameLength,mDayNameLength)
mContext.startActivity(shortcutIntent)
selenium.isVisible("link=Control Panel")
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
File javaExecutable
ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId",publicLayoutSet.getLayoutSetPrototypeId())
bagEntry.getState() != STATE_NOT_IN_USE
vector.iterator()
StartupManager.getInstance(myProject).registerStartupActivity(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
mp.getValue()
length > 4
resolver.acquireContentProviderClient(uri)
fragFilename == null
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
BasicMonkeyServer.class
CONSTELLATION_TYPE_SHIFT_WIDTH=3
!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()
mHandler.postDelayed(pae,timeout)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted)
file.getAbsolutePath()
beansXml.createAlternatives()
firstIdx + 1
list.isPrivate()
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the IQ provider.  */ public static Object getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return privateDataProviders.get(key); } 
log.error("Expected " + s.getStyleId() + " to have <w:basedOn ??")
loaded.getLoaded().getConstructor()
Item.itemsList[item.itemID].func_82790_a(item,0)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
DefaultCacheKeysFactory.createNaturalIdKey(naturalIdValues,persister,session)
Thread.sleep(1000)
(fl & FLAG_LAYOUT_NO_LIMITS) != 0
assertEquals(3,publisher.events.size())
value.setScale(1,RoundingMode.HALF_EVEN).toString()
id=15857
getObject()
service.getRecordsForSelectedTab(mainMetadata,entity,sectionCrumbs,currentTabName)
CompletableFuture<Boolean>
newDict.initParams(baseDir.replaceFirst(srcConfig.getHdfsWorkingDirectory(),dstConfig.getHdfsWorkingDirectory()),baseId,maxId,maxValueLength,nValues,bytesConverter)
mAppToken.hasContentToDisplay()
paramType.getName()
text.length() != 0
state == AsyncState.DISPATCHING
offset == 0
JobEntry.class
mAuthorities.get(i)
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,mustHaveFlags)
selenium.isVisible("link=Site Name")
a.getBoolean(R.styleable.View_fadeScrollbars,false)
event.getGameState() != GameState.LOGGED_IN
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
formatter.format(toString(Verbosity.Short))
val == null
((MasterSlaveDataSource)dataSource).getAllDataSources()
command.next(answerForm)
PushArbitraryData.class
blocked.isDone()
fullSize + 1
mQuietEnable
new GZIPInputStream(input)
component.setUnderlined(object.get("strikethrough").getAsBoolean())
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
selenium.isVisible("link=Control Panel")
mMncStr == null
TelephonyManager.getDefault().getPhoneType()
matchAxisFilter != 0
mView.setTransitionVisibility(mFinalVisibility)
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false)
SetMultimap<ChunkCoordIntPair,Ticket>
logger.debug("Invalid Account Credentials")
elementType == null
ArrayUtils.equals(MiBand2Service.RESPONSE_ACTIVITY_DATA_START_DATE_SUCCESS,value,0,2)
selenium.isVisible("link=Control Panel")
mTestStream.getBytesFlushed()
FileEntry.class
delaySoFar > mReEnableDelayMillis
selenium.isVisible("link=Control Panel")
ret=true
new ProtoFile("hex.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
nextTokenIsFast(b,IDENTIFIER)
metadata.addWhere((Predicate)null)
loaded.getLoaded().getConstructor()
TitanGraphTransaction gview=null; 
new EmoteClue("Cheer at the top of the agility pyramid. Beware of double agents! Equip a blue mystic robe top, and any rune heraldic shield.",new WorldPoint(3043,4697,3),CHEER,any("Any rune heraldic shield",item(RUNE_SHIELD_H1),item(RUNE_SHIELD_H2),item(RUNE_SHIELD_H3),item(RUNE_SHIELD_H4),item(RUNE_SHIELD_H5)))
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,connectionTracker,transactionSPI)
UNDEFINEND
origin.realComponent().doubleValue() < other
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
learnRate * 0.95f
String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",getId(),maxXms)
Bytes.toBytesBinary(tableNameOrRegionName)
mDataAuthorities == null
lineNumber=0
e1.getPointerCount()
dlFolderLocalService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
FRAME_STATS_COUNT=14
!event.isError()
id=5
type.getConstructor()
DLStoreUtil.addFile(serviceContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,dirName + StringPool.SLASH + shortFileName,0,StringPool.BLANK,serviceContext.getModifiedDate(null),serviceContext,bytes)
dynamicType.getLoaded().getConstructor()
eipCandidates.iterator()
new TermInfosWriter(store,"words",fis)
assertEquals(worldVocab.getIndex(),2)
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
pos + toFind.length() < limit
REPLACE_IS_SAME(7)
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,mustHaveFlags)
DecimalUtility.getDecimal9FromBigDecimal(bigDecimal,precision,scale)
testSame("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
new HazelcastInstance[count]
cascadeValidationToOne(errors,bean,associatedObject,persistentProperty,propertyName + "[" + (idx++)+ "]")
BTraceUtils.setInstrLevel(0)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SHOW_SPLASH_SCREEN,false)
PathUtils.getTestDir(getClass()).getAbsolutePath()
id=29
dist > maxDist
AceThemes.TEXTMATE.equals(theme().getValue())
Program
Pair.newPair(0,"Killed")
getLayoutIndex(upNodeIndex)
throwable.isPresent()
assertFalse(indicesService.hasUncompletedPendingDeletes())
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("hello"))
log.error("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
synchronized (mAccounts) {   writeStatisticsLocked(); } 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
channel.indexOf("-pnpres") > 0
context.createTaskContext().addPipelineContext(0,true,true)
new ByteArray(rowKeyBodyBuf)
tl.set(mPaint,mText,start,end,dir,directions,hasTabs,tabStops)
mUfs.create(testFile)
buffer.rewind()
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao)
uri.equals("/")
dbIdsRepository.getComponentId(component)
line.endsWith("warning")
appName != null
handleShowingDetail(detail,x,y,true)
orderBook.getDate()
new FsInfo(0,pathInfo)
log.warn("Hooking new default : onErrorDropped")
LOG.warn("Working dir: " + workDir.getAbsolutePath())
ContainerUtil.newHashSet(PLATFORM_IOS,PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS)
String channel
final MediaDriverReceiver receiver=new MediaDriverReceiver(ctx.toClientBuffer); 
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
p.getSize()
subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
timeout < 0
LOG.debug("Exception while creating remote block reader, datanode {}",source,e)
name.length() > 0
protected abstract ReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration); 
certificate(certURL,password,certType,port)
LineNumberConvertor.Builder.createRight(data.getLines())
messenger.signUp(name,null,false)
_cameras.get(cameraType)
SDK_INT < LOLLIPOP
testAllocation("test1snippet",1,0,0)
new Duration(2,SECONDS)
lineArgs[3]
projectName.equals(executable.getProjectName())
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
field.tokenStreamValue()
localBinder.getServiceInstance().clearCache()
ConfigureMapMenu.getSortedMapNamesIds(this,entriesValues,entries)
waitFor(condition,MAX_WAIT_MILLIS,SLEEP_MILLIS)
hotRestartState != null
DEFAULT_WIDTH=0x008000000
requiredAcks > 0
!beanPrefix.isEmpty() | !beanSuffix.isEmpty() | beanPackageName != null
code.executeVarargs(args)
row - 0.25f
Color.fromRGB(0x253192)
selenium.isVisible("link=Control Panel")
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
Gdx.files.internal(fileName).nameWithoutExtension()
xmlenc.writeObject(t)
resolver.acquireContentProviderClient(uri)
mListener.onInputUpdated(inputId)
boardsFile.getAbsolutePath()
methodExists(setterName,fieldNode)
options.getPreserveOrder()
element.getStringValue()
downloadInfo.getUrl()
heightSize == MeasureSpec.UNSPECIFIED
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mHandler.removeCallbacks(pae)
new ObjectRecordWithStats(key,v)
params.getSimulatePlatformVersion()
type.getConstructor()
rec.isValidLineInSource(pastViolation.getLine())
event.getTime() <= currentPlayTime
DeprecationLogger.nagUserOfDiscontinuedMethod("Task.dependsOnTaskDidWork()")
mock(ExampleService.class,MockReset.before())
mLastAnnouncementWasQuickSettings && !mTracking
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
mPackageUsage.write()
onSuccess(statusCode,headers,handler)
insets.left == 0
if (dockOntopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
topVer(4,2)
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
StringBuffer buffer=new StringBuffer("["); 
mpi > -135
mNavigationBarView.getPaddingStart()
LookupElementBuilder.create(referencedName)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
root.waitThis().size() >= 0
WINDOW_FREEZE_TIMEOUT_DURATION=3000
(status & 0x04000000) > 0
innerLoader.parseClass(inputStream)
metadata.getFaces()
list != null
_cameras.get(cameraType)
new IllegalStateException("Unable to load error page data")
getTimeout()
writeRepeatedFixed64(id,val)
request.getContentType().equals("application/x-www-form-urlencoded")
new DefaultDependentsSet()
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
cs[i].at0(row)
pk.getColumnName()
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Integer.valueOf(getOptional("kylin.engine.spark.max-partition","5000"))
new InterruptedException()
index >= widgets.length
new ModelRenderer(model,0,0)
LOG.debug("Retrieving location for state={} of job={} from the cache.",jobId,queryableStateName)
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
Thread.sleep(300)
onDetachedFromWindows()
ArrayUtils.subarray(args,4,args.length)
this.e != null
tokens[position].isImmunized()
logger.warn("Cannot handle shuffle command ({})",e.getMessage())
reformatRangeImpl(element,startOffset,endOffset,true)
ddmStructureService.fetchStructure(groupId,ddmStructureKey)
sctpChannelClass.getMethod("open",null)
Throwable t
position != -1
firstSlash == 0
Log.wtf(TAG,"This will become an error",ex)
List<String>
formService.populateEntityForm(cmd,entity,entityForm,false)
this.constraints.updateFromTuple(leftTuple)
fix.android.opengl.GLES20.glVertexAttribPointer(maVelocityHandle,4,GLES20.GL_FLOAT,false,0,0)
headers.setValue("Vary")
selenium.isVisible("link=Control Panel")
new LFWDataFetcher(imageHeight,imageWidth)
mode != null
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
getVersion()
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallback(new MetricCB())
bitmapPoolScreens >= 0
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
mentionsListView.setSelection(0)
visitNode(node,context)
new ImportResults(globalSettingsImported,importedAccounts,errorneousAccounts)
super.setV(u)
form instanceof IObj && ((IObj)form).meta() != null
Integer.toHexString(quality)
progressHandler.onProgress(downloaded,total)
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
mRvc != null
g.getTarget().setPackageName("target/generated-sources/jooq")
replace(wmlTemplateString,0,new StringBuilder(),mappings)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
context.addStep(new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)
listener.onComplete(new AsyncEvent(event.getAsyncContext(),request,response,event.getThrowable()))
LOG.debug("Failed to install vim keymap.\n" + e)
Optional.of(layout)
DEBUG_GESTURES=true
mMenuView.setBackgroundDrawable(null)
resources.nextElement().getPath()
Class.forName(className)
OsmandPlugin.onDestinationReached()
uuid != null
file.getSubmittedFileName()
error.expectedMessageCount(2)
blog.getRemoteBlogId()
mGpsListener != null
result=false
DEFAULT_NUMBER_OF_READ_BUFFERS=128
text.charAt(start - 1)
loadingFinished
activity == null
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding())
context.getLocation(node)
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
!myProject.isDisposed() && file.isValid()
mSyncStatus.get(i)
mHandler.postDelayed(pae,timeout)
mAms.mWaitForNetworkTimeoutMs=100
entry.getKey().isEmpty()
new StepMeta(log,stepPlugin.getID()[0],name,info)
TestSuiteEnvironment.getServerAddress()
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,completedTasks,false,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
timeout=30000
mHorizontals == null
mNetAttributes[type].mLastState == state
!mIsRecentsShown || mIsPipFocusedInRecent
queryMixin.leftJoin(target)
lock.isLocked()
JBUI.Borders.empty(0,12,0,7)
log.warn("SQL Validation error",ex)
UIUtil.applyRenderingHints(g)
TelephonyManager.getDefault().getPhoneType()
weight + (yreal * Math.log(ymodel) - logfactorial - ymodel)
callNode.call(frame,arguments)
onEvaluateInputViewShown()
templateToEdit.isBuiltin()
assertThat(client).replicationController("fabric8-console-controller").hasId("fabric8-console-controller")
presenceXML != null
infos == null | infos.length == 0
sendMessage() == false
assertEvaluate(buildFile).lookup("txts")
index >= widgets.length
Boolean.valueOf(attrValue)
TelephonyManager.getDefault().getPhoneType()
getLog().info("Module name is " + moduleName)
new CountDownLatch(3)
port == 8080
file.getName()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false)
mAuthorities.get(i)
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
getTimeout()
realStartActivityLocked(hr,app,true,true)
that.getPath() == null
Preconditions.checkNotNull(nativePlatforms.get(targetCpuType))
delaySoFar > mReEnableDelayMillis
serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
new KsqlTopic("FOO","TEST_TOPIC1",new KsqlJsonTopicSerDe())
mMethod.invoke(MenuInflater.this,params)
new IndexWriter(ramDir,new WhitespaceAnalyzer(),true)
thenStore.storeChanged | elseStore.storeChanged
bm.copy(bm.getConfig(),true)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
db.hashMapCreate("cache").expireAfterAccess(1,TimeUnit.HOURS)
status.isDir()
logger.error(message)
clipItem.getText()
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,new UserHandle(mUserId))
resources.getDimension(R.dimen.close_handle_height)
loaded.getLoaded().getConstructor()
init(app)
temp_descs.get(i)
mDrawable.getIntrinsicHeight()
type.getConstructor()
loaded.getLoaded().getConstructor()
mf.getColumnName()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
extras.getInt("quick-media")
session.executePost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler,false)
FBUtilities.getLocalAddress()
path != null
new InetSocketAddress(configuration.getRestListenUri().getPort())
mAuthorities.get(i)
ClassHelper.make(SoftReference.class)
pathToFileInProject.indexOf("error-prone")
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
LOGGER.error("Following Class is no side pane: '" + componentName,e)
Object node
Collection<Street>
mAppToken.hasContentToDisplay()
StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName())
h - x
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"isAppInactive",null)
value < 0
glyph.get().setSizeRatio(sizeSlider.getValue())
incomingCounter.getAndSet(0) / 1024
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
setHasStableIds(true)
return true; 
tableInfo.getType()
new IndexWriter(storeDirectory,analyzer,true)
task == null
"LEVEL".equalsIgnoreCase(ident)
fT.add(R.id.feeditemlistFragment,filf)
assertEvaluate(buildFile).lookup("txts")
SCAN_STATUS_PARTIAL=0
sentHeaders.get(sentHeaders.size() - 1).getNumber() <= bestKnownBlock.getNumber()
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
this.httpHandler.handle(req,resp).otherwise(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
user.id()
Boolean.valueOf(getOptional("kylin.query.enable-dynamic-column","false"))
view.getCurrentMode()
user instanceof UIRepositoryUser
service.diff(appContext.getDevMachine(),project.getLocation(),null,NAME_STATUS,false,0,"HEAD",false)
transformedLine == null
public static AnimationAction $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
relatedProduct.getProduct()
textMessage.getMessageType()
mDatamodels[1] != null
body.endsWith("6")
!userInfo.canHaveProfile()
telephony.getCdmaEriIconIndexForSubscriber(subId)
new S3DataSegmentMover(mockS3Client)
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
fmd.getFieldType().equals(SupportedFieldType.EXPLICIT_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.BROADLEAF_ENUMERATION)
Assert.assertEquals(150,resultAll)
!cls.isInterface() && !Modifier.isAbstract(cls.getModifiers()) && !cls.isEnum()
++modCount
result.setWriteIfCompleted(true)
Assert.assertEquals(101220L,ret.getFee())
TelephonyManager.getDefault().getPhoneType()
criteria.andEquals("category",null)
assertEquals(response.getStatusCode(),302)
_freemarkerEngineConfiguration.getResourceModificationCheck()
Thread.sleep(5000)
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
data.needsTransformation()
cs[c].set0(r,(int)(rng.nextDouble() * _createFrame.factors))
Throwable throwable
entry.getCompleteStore()
source=this
proxyRequest.getEnvironment()
LoggerFactory.getLogger(ProcessUtils.class).error("Fail to kill " + process)
SubscriptionItem channelObj=channelSubscriptions.getItem(channel); 
new ShardPath(false,path,path,null,shardId)
mBackdrop.animate().alpha(0f)
ClusterNode node=ring.node(nodeId); 
new Info("std::complex<float>")
selenium.isVisible("link=Control Panel")
!showOnKeyguard
selector.select(500)
((String)toRender).toLowerCase()
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString())
mActiveAgents.remove(info)
SyncEngine.cancelSyncAccountTasks(syncAccount.getSyncAccountId())
ImmutableSet.of("testStringRepresentation")
mWorkerId + BASE_FILE_NUMBER
verifyPosition(decoder,text("$PHO0,6091,233606.000,A,0902.9855,N,06944.3654,W,0.0,43.8,141112,,,A/00010,00000/0/224000//"))
~PUBLIC_STATUS_BAR_VISIBILITY_MASK
child.resetResolvedLayoutDirection()
mDateView.setTypeface(Typeface.SANS_SERIF)
CollectionUtils.filter(featuredProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((FeaturedProduct)arg).getProduct()).getArchived();   } } )
Trans == TRANSPOSE
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
Log.e(TAG,"Stats: Failed to get summary")
clazz.getField("commandProcessor")
clone.setTypeSettings(getTypeSettings())
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]))
auxString.lastIndexOf(",")
loaded.getLoaded().getConstructor()
thrown.equals(UserCodeException.class)
WRITE_SIZE / 2
selenium.isVisible("link=Control Panel")
new GroupTest(true)
dpToPx(72f)
selenium.isVisible("link=Control Panel")
classNode.getName()
_projectTemplateArgs.getName()
myProgramParameters.getComponent().setDialodCaption(myProgramParameters.getRawText())
getContext()
c.getLiquid().amount == 0
floatVal(doc)
Boolean.valueOf(getOptional("kylin.query.disable-cube-noagg-sql","false"))
mAnswer.setBackgroundDrawable(null)
selenium.isVisible("link=Control Panel")
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
deadline < now
subscriber.tryEmit(String.valueOf(i))
PARTIAL_ORDERBOOK_SIZE=200
FMLLog.log(mod.getModId(),Level.FINE,"Mod Logging channel %s configured at %s level.",level == null ? "default" : level)
CharSequence message
mpi > -135
template.setQueue(this.queue.getName())
LOGD=true
logger.fine("Packed texture. Reading directly from the blend file!")
N > 0
dlFileShortcut.getFolderId()
button.getName()
Thread.sleep(5000)
SAMPLE_RATE_HZ_MAX=48000
fraction * (nextValue - prevValue)
cs.getMetaData()
targetSdkVersion >= N_MR1
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT))
structuralLock.isLocked()
name.equals("Devices")
/**   * Pops a constructor call from the enclosing constructor call stack.  * @return the popped call  */ public Expression popEnclosingConstructorCall(){   return enclosingConstructorCalls.removeFirst(); } 
field_92016_l.getItem()
edge.setType(edgeDefault)
activityNdx < topActivityNdx
methods.put(name,methods)
DDMStructureLocalServiceUtil.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
amp*=0.1
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractACLCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
System.currentTimeMillis() / 1000
(byte)0xff
assertSame(conf,(Configuration)serializeDeserialize(conf))
id=15856
lineCount == 4
StringUtil.join(modules,new Function<Module,String>(){   @Override public String fun(  Module module){     return module.getName();   } } ,", ")
intent.resolveTypeIfNeeded(getContentResolver())
i < getATN().maxTokenType
level < 96
child.getMeasuredHeight()
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new JMenuItem(docktoTrayText)
VfsUtil.isAncestor(parent,child,true)
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),UNSET)
selenium.isVisible("link=Control Panel")
input.getName().toLowerCase().contains(partialName.toLowerCase())
IndexReader.open(benchmark.getRunData().getDirectory(),true)
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
c.getLiquid().amount == 0
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,true)
m.put(InputStream.class,is)
U
batch.isEmpty()
EditorHelper.normalizeOffset(editor,res,false)
is(3)
field.setRequired(false)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
return mAppearingDuration; 
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getParentGroupId(),assetTagName)
randomInt(VALID_CHARS.length)
DLFileEntryTypeFinderUtil.countByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
testClass.getName()
CoreMatchers.anyOf(is(NestedStaticTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"))
dynamicType.getLoaded().getConstructor()
si != null
checkPojoMetaClass()
selenium.isVisible("link=Control Panel")
GraphAnswer<CommitId>
mService.disableNetwork(netId)
new SVNReporter(info,info.getAnchor().getFile(info.getTargetName()),false,true,SVNDepth.INFINITY,false,SVNDebugLog.getDefaultLog())
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,false,false,factory)
out.writeUTF(type)
mWM.isKeyguardSecure()
mBiometricUnlock.stopAndShowBackup()
getDefaultLanguage()
capacity > 1 << 30
ImmutableSettings.builder().put("index.number_of_replicas",0).put("index.number_of_shards",1).put("index.mapper.dynamic",false).put("index.analysis.analyzer.sortable.type","custom").put("index.analysis.analyzer.sortable.tokenizer","keyword").putArray("index.analysis.analyzer.sortable.filter","trim","lowercase","truncate")
Collections.emptyList()
ENABLE_COPY_OPTIMIZATIONS=false
new RuntimeDroolsException(this.getEvalExpression() + " : " + e)
ch.write(new LogEvent(null,-1,file.getAbsolutePath(),line))
animateHeader()
super.mySetupMutualAuthServerIsValidException(cause)
message.getMessageId().setDataLocator(id)
meta.getColumnName(i)
ctxLogger.error("Unsupported field type: {} for field: {}",dataType,fieldName)
mResourceData[i] != null
list.getFirst()
stdErr.print(ansi.asErrorText(message))
ref.getParentObject()
{abiList}
new ServerPartition(partitionKeyNew,RowType.T_DOUBLE_DENSE)
log.error("Error extracting parameters meta data",e)
CompilerTestUtil.disableExternalCompiler()
final CharSequence message
1234567890 * 2
dynamicType.getConstructor()
HashMap<String,Operator<? extends Serializable>>
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
type.getConstructor()
MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)
historyItem.getCityId()
out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)
Double.parseDouble(args[1])
app.getSettings().SHOW_NEARBY_FAVORIES
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
collectors.size() > 1
mp.getValue()
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
Exception exception
isDirect=false
targetClass != null
new WebDriverWait(driver,5)
scorecard.isUseReasonCodes()
ImmutableSet.of("key","vertex","edge","element","property")
iconsByFileExtension_.put(filespec.toLowerCase(),icon)
new WorldDataHolder(worldName)
assertEquals(302,t.request().get().getStatus())
defaultListenerAccess != null
TreeUtil.insertNode(parent,node,getTreeModel(),getNodeComparator())
myContents.isEmpty()
mccStr.isEmpty()
new IndexWriter(mDirectory,new StandardAnalyzer(),false)
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
suffix.add(tmp.substring(0,tmp.length() - 1))
checkPojoMetaClass()
LookupManager.getInstance(project).getActiveLookup() != null
Object edge
getBeginNode() != ((InvokeWithExceptionNode)predecessor).exceptionEdge()
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
krakenDepth.getAsks()
readStayAwakeConditions()
new KotlinStructureViewModel(file)
revWalk.release()
LOG.info("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
mHorizontals == null
lib.getName()
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
4 * sum / common * (common - 1)
rtWithDecryptedAssertion.getAssertions()
srcActivity.getParent() == null
realm.assertThread()
((IdentifierTree)var).getName().contentEquals(JUNIT_PARAMS_VALUE)
this.getClass().getSimpleName()
xml.openElement(getElementName())
mDisplay.getMetrics(mDisplayMetrics)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
new OwnCloudVersion(0x040001)
String requestCacheKey
closeForbidden(ok)
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,false,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
lastPos != mBoundPos
new AutoValue_PackageFiles(chunks,jsFiles,cssFiles)
itemView.getScaleX()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).description(message)
doTest(true)
mContext.checkCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
selenium.isVisible("link=Control Panel")
Double.parseDouble(data[metadata.indexOf(name)])
new V(27,new BooleanSetting(true))
_parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
mService.setUidPolicy(UID_A,POLICY_NONE)
c < ic
recipient.getName()
seq.length() < width
logger.debug("Apollo bootstrap config is enabled for context {}",context,PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED)
javaVersion < 9
Files.newOutputStream(self,CREATE,APPEND)
finish()
DEFAULT_VERIFY_ENABLE=false
measureRun(0,0,target,mLen,false,fmi)
cv.visitInsn(DUP)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
HEIGHT=616
stack == null
StringBuffer line=new StringBuffer(); 
Boolean.valueOf(attrValue)
selenium.isVisible("link=Control Panel")
(getSource().x() + getTarget().x()) / 2f
for (IMethodInterceptor methodInterceptor : methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
Long.valueOf(nfcid2,16)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AV_INPUT_FUNCTION)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
dateOfBirth == null
jvmOptions.setAllJvmArgs(DEFAULT_JVM_9_ARGS)
mWm.addAppToken(0,null,0,0,false,false)
log.warn("caught exception",e)
Map<String,Object>
maxSize > (used / total)
equalTo(20)
last.getParent()
telephony.getForbiddenPlmns(subId,appType)
IndexReader r=IndexReader.open(dir); 
name.length() > 0
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
parsedResult.getSqlType()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Trans == TRANSPOSE
runtimeContextFactory.create(originEnv,openShiftEnvironment,id,this)
ap.getSsid()
public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
new Settings(getContext(),getContext().getFilesDir(),new Object())
30 * 60 * 1000
_ginfo != null
hasFocus() && showClearButton
sStatsd.writeDataToDisk()
conf.getSearchBaseURL()
!sDisplayAnswer || getConfigForCurrentCard().getBoolean("replayq")
scheduleRemoveStartingWindow(wtoken)
LOGGER.debug("Could not register FileUpdateMonitor",ex)
"Surface(native-token=" + mSurface + ")"
LOGGER.debug("Could not copy BibTex key",ex)
mNoDreamEnterAnim=true
fb.capacity()
mHeadsUpNotificationView.clear()
webSocketConnection.getRemote().sendString(s)
inputBuffer.nbRead() > 0
new TreeModelBuilder.GenericNodeData(filePath,fileStatus,myIndex)
mMncStr == null
colors[0]
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS
cursor.getChildAt(i)
StringEscapeUtils.escapeXml(atts.getValue(i))
actionButton.setRolloverImage(new ImageIcon(ca.getRolloverIcon()).getImage())
JavaConversions.asMap(logManager.logsByTopicPartition())
InvokerException e
mHorizontals == null
matchAxisFilter != 0
mMime.toLowerCase().startsWith("video/")
LOGGER.warning(e.toString())
@Override public ClassExpression visitBuiltInType(BuiltInTypeContext ctx){   String text;   if (asBoolean(ctx.VOID())) {     text=ctx.VOID().getText();   }  else   if (asBoolean(ctx.BuiltInPrimitiveType())) {     text=ctx.BuiltInPrimitiveType().getText();   }  else {     throw createParsingFailedException("Unsupported built-in type: " + ctx,ctx);   }   return configureAST(new ClassExpression(ClassHelper.make(text)),ctx); } 
TypeEvalContext.fast()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
type.set(other.getType())
mAccessibilityController.isTouchExplorationEnabled()
LLVMArgNodeGen.create(1)
AbstractBottomUpTraversal<TargetNode<?>,Void>
TABLE_COMMIT
list.size() > 1
account == null
ScanResult.is24GHz(frequency)
uncompressedProto.length < 2100000
!mIsMessageReady
mTouchMode == TOUCH_INIT_MODE
users.size() > 90
WebSettings.setTextSize(WebSettings.TextSize.SMALLEST)
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,true)
myFindModel.isReplaceState()
ImmutableSet.Builder<ImplemetationMethodDescriptor>
fragmentCollectionPersistence.filterFindByGroupId(groupId)
cf.getCompressionType() == null
storedOverlayInfos.get(i)
insets.left == 0
selenium.isVisible("link=Control Panel")
config.isAutoRead()
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static Object get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
XMLHandler.closeTag(XML_META_TAG)
System.getProperty(KYLIN_HOME)
target.getDestination()
!justBootedUp
logger.info(String.format("connect attempt timed out after %d",timeout))
!match && compareCompat
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
lastReturned == streamSessions.size() - 1
statusMessage != null
return mRxTimeMillis; 
b.getTopicId()
mView.post(mAnimationStarter)
Log.wtf(mTag,"Adjusting remote volume without a controller!")
mp.getValue()
Thread.sleep(5000)
flow.getStatus()
Environment.getRootDirectory()
mViewModel.getNewsItem()
ApplicationManager.getApplication().isUnitTestMode()
RegisterRules2.class
index > 0
getEffectiveCleartextTrafficPermitted()
type.getConstructor()
FLAG_USE_MAGNIFIER=false
entityMetadata.getIdProperty()
isSelected(node)
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
Clock.setTime(2004,Calendar.DECEMBER,10,17,10,15)
intent.resolveTypeIfNeeded(getContentResolver())
new Paint(Paint.ANTI_ALIAS_FLAG)
InterruptedException e
context.registerSubsystem(SUBSYSTEM_NAME,1,0)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
SQLException e
10 * countStillActiveThreads()
stream.<NettyServerStream>data()
scheme.equals("tel")
resource.removeExtractor(input.getId(),extractorId)
toolchainBuilder.addCompilerFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
AWAKE_INTERVAL_DEFAULT_MS=5000
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,false,false,factory)
IOException ex
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState)
ImplemetationMethodDescriptor methodDescriptor
super.getRealtimeSegmentFlushSize(useLlc) * 10
dest.writeLong(mSubId)
mQsContainer.getX()
_typeSettingsProperties.toString()
new GroupDialog(frame,panel,oldGroup)
synchronized (io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
selenium.isVisible("link=Control Panel")
!xAppInfo.getIsSystem()
PersistenceManager.class
mListener.setConnectionId(0)
focusManager.requestFocus(new MyFocusCommand(),true)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
4 * width * height
getServerSslContext()
data.eachX=8
dirs[i].exists()
updateSubtree(parentNode)
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
new IndexWriter(dir,new KeywordAnalyzer(),true)
assertNotNull(message.getPayload() instanceof Collection<?>)
methodCall.accepts(eMethodCall)
lock.isLocked()
this.maximumSymmetricKeyLength=192
deadline < now
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
TelephonyManager.getDefault().getPhoneType()
n + 1
events.add(event)
type.getConstructor()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
ArrayList<String>
Extensions.getExtensions(FileBreadcrumbsCollector.EP_NAME)
Optional.of(certificatesFile)
selenium.isVisible("link=Control Panel")
contact.getDefaultContact().getPresenceStatus().getStatus() > PresenceStatus.ONLINE_THRESHOLD
mActionView.getHeight()
selenium.isVisible("link=Control Panel")
antClassLoaderClass.isInstance(loader)
logger.warn("an error")
typeSettingsProperties.toSortedString()
USE_DISPLAY_LIST_PROPERTIES=true
httpclient.execute(httppost)
EntityRegistry.registerEntityID(entityClass,entityName,id,background,foreground)
addr.toString()
conn.setSourceDecoration(srcDec)
Exception e
new TextSelection(queryStartOffset + pos.position,1)
LOGGING=true
primTarget && !primTop && ClassHelper.getWrapper(targetType).equals(top)
Map<UserJid,Drawable>
batch.getSample().getRequiredBatchMemorySize() * 5
day <= 23
foldersSize.y > sashSize.y / 2
expandedItemsList.get(i)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
new RuntimeException()
mHandler.postDelayed(pae,timeout)
a.getInt(attr,0)
delaySoFar > mReEnableDelayMillis
e.getMessage()
UnmodifiableIterable<T>
Object[]
JDBCUtils.safeGetString(dbResult,"id")
byteBuf.readable()
selenium.isVisible("link=Control Panel")
mService.getProfiles(UserHandle.myUserId(),false)
Assert.assertNotNull(semaphore.acquire(3,TimeUnit.SECONDS))
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
SystemProperties.getInt("ro.cdma.timetoradiorestart",20000)
cannedReplies != null
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY)
log.warn(msg,t)
mMccMncs != null
fileAnnotation.setRevisions(revisions)
new ModelNode(10)
VERSION=41
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
TaskExecutor.class
IBackupManagerService svc=mService; 
action == KeyEvent.ACTION_UP
GL20.glUniform4(location,v)
new IncrementalIndexSegment(index)
elements == null
gtype < TYPES.length
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,160}
source.getAddress() == null
modIcon.getOriginalWidth()
file.getLocalFile()
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
NORMAL(1)
apnContext.getWaitngApns()
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
LanguageUtil.isAvailableLanguageCode(languageId)
exchFut.discoveryEvent().node()
assetUri.getAssetName().toString()
new ConstructingObjectParser<>("client_security_authenticate_response",a -> new AuthenticateResponse(new User((String)a[0],((List<String>)a[1]),(Map<String,Object>)a[2],(String)a[3],(String)a[4]),(Boolean)a[5],(RealmInfo)a[6],(RealmInfo)a[7]))
mSecondSpaceView.setVisibility(View.GONE)
mContext.startActivity(cantAddAccount)
(line=reader.readLine()) != null
i < 1000
info.crashInfo.stackTrace.length() > 10000
loaded.getLoaded().getConstructor()
MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity,src,amount))
userVector.get(index) != 0.0
arguments[0]
col2d.addiRowVector(epsilon1d)
onCreateView(mContext,appWidgetId,appWidget)
findPackage(PIP,false)
GridSubsetFactory.createGridSubSet(testGridSet)
equalsToSchemaName(tag,"include")
disableForUser(what,token,pkg,mCurrentUserId)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
meta.getColumnName(i)
possibleCenters.get(i)
public class GraphQLEnumType implements NamedType, GraphQLInputType, GraphQLOutputType {   String name;   private Coercing coercing;   public String getName(){     return name;   }   public void setName(  String name){     this.name=name;   }   public Coercing getCoercing(){     return coercing;   }   public void setCoercing(  Coercing coercing){     this.coercing=coercing;   } } 
CommandLineUtils.createDatabaseObject(cl,referenceUrl,referenceUsername,referencePassword,referenceDriver,referenceDefaultSchemaName,null)
input.getDelta()
tagService.getTagsAsString(task.getId())
public <A>S from(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).from((Expr<?>)entity);   return self; } 
MainApp.getAccountType()
mFile.getPath()
arguments == null
child.getMeasuredHeight()
this.thrown.equals("File must exist")
selenium.isVisible("link=Control Panel")
config.getMaxElementsInMemory()
folder.getModel()
redefined.getConstructor()
(byte)0xdf
new ObjectMapper().reader(Map.class)
checkPojoMetaClass()
props.getInt("session.time.to.live",SESSION_TIME_TO_LIVE)
base.getContentFile("modes/java")
types == null
i <= size
IBackupManagerService svc=mService; 
binary.getName()
mContext.startActivity(intent)
serverId > 0
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,6)
mObsoleteAgents.remove(info)
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",14)
blockId >= Block.field_71973_m.length
prefs.getBoolean("show_system",true)
((GroovyObject)receiver).getMetaClass() != metaClass
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
blocks.size() >= newChildIndex - 1
stmt.setDate(1,date,UTC)
/**   */ public class S3SnapshotRestoreOverHttpTest extends S3SnapshotRestoreAbstractTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","http");     return settings.build();   } } 
setInputMethodEnabled(info.getId(),true)
trainSamplesPerIteration(-2,1)
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
success=true
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
(Compound)locationStrategies
o instanceof Attribute
mSlideableView != child
clone.setTypeSettings(getTypeSettings())
ReflectUtil.isSubclass(parameterType,methodParameters[i].getType())
SyntheticLibrary.newImmutableLibrary(Collections.emptySet(),Collections.singleton(root),Collections.emptySet(),excludePattern)
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-logging-juli-","tomcat-embed-websocket-")
fraction * (nextValue - prevValue)
starting != null
put(v)
_connectors != null
four.setCoordinateIndex(LEAF)
addView(mTitleLayout,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT))
address.getHostText()
map.lock(key,4,TimeUnit.SECONDS)
Thread.sleep(5000)
!m.containsNonNullValue(TagMetadata.TASK_UUID) && m.getValue(TagMetadata.TASK_UUID) == 0
IllegalArgumentException e
targetState == STATE_EXPANDED
timeout < 0
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
LOG.error("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
graphWidth / 2
Iterable<ManyValues>
Integer divisor
telephony.getLteOnCdmaModeForSubscriber(subId)
mWorkerId + BASE_FILE_NUMBER
DEBUG=false
getTestVector().getNumNondefaultElements()
args[0]
mUnreachedBarPaint.setColor(mReachedBarColor)
TextComponent.toLegacyText(message)
public class Arial extends FontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait()
_typeSettingsProperties.toSortedString()
Optional.of(resourceManagement.getStats())
POSITVE_X(0)
this.file.maxContentLength > 0
telephony.isRadioOn()
mWasActivatedOnDown || !mNeedsDimming
mSurfaceView.getHolder() != null
selenium.isVisible("link=Control Panel")
DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE)
BrowserApp.getAppContext()
telephony.getCdmaEriIconIndexForSubscriber(subId)
notifier.isIgnoreExchangeSentEvents()
@NonNull String uri
new RemoveSubscriptionCmd(destination,channelIds)
i=1
CharSequence message
new Instant(5L)
prev.getPrevProp()
delayMs < 0
entry.getKey().contains("defaultProduct.")
new InputStreamReader(urlConnection.getInputStream())
@NotNull protected abstract T getCommitColumnCell(int index,@Nullable VcsShortCommitDetails details); 
GitBranch currentBranch=repository.getCurrentBranch(); 
jvmOptions.setAllJvmArgs(DEFAULT_JVM_9_ARGS)
Long.valueOf(name)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
log.error("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
getJavaVersion(nom)
this.messageService.monoPreAuthorizeBeanFindById(1L).contextStart(withUser)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Math.min(leftLen,rightLen)
mAccessibilityController.isTouchExplorationEnabled()
_constructor.newInstance(0,0,StringPool.BLANK,_IMAGE_URL,_IMAGE_URL)
DEBUG_RC=true
LOG.error("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
Boolean.valueOf(attrValue)
Object node
invoiceChecker.checkInvoice(account.getId(),2,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2015,10,1),new LocalDate(2016,10,1),InvoiceItemType.RECURRING,new BigDecimal("2399.95")))
selenium.isVisible("link=Control Panel")
/**   * Enhances a public non-final class. Source class must have a public or protected no-args constructor. Code is generated for protected and public non-final methods, and package methods if the source class is not in a the java.* hierarchy.  * @param cls class to extend, uses Object.class if null  * @param interfaces interfaces to implement, can be null or empty  * @param ih interceptor used to handle implemented methods  * @param loader ClassLoader for enhanced class, uses "current" if null  * @param filter a filter to prevent certain methods from being intercepted, may be null to intercept all possible methods  * @return an instance of the enhanced class. Will extend the source class and implement the giveninterfaces, plus the CGLIB Factory interface.  * @see Factory  */ public static Object enhance(Class cls,Class[] interfaces,Callbacks callbacks,ClassLoader loader,CallbackFilter filter){   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
new IndexWriter(dir,analyzer)
selenium.isVisible("link=Control Panel")
serialVersionUID=844410366
new RuntimeException()
AndroidAssetsInfoApi.class
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
file.toLowerCase()
Math.round(value * 100) / 100
LOG.warn(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
assertThat(controller.actions()).hasSize(5)
meta.getColumnName(i)
node.getOtherNode()
factory.getEmbdeddedServletContainer()
(System.currentTimeMillis() - last.getTime()) <= maximumAge
oldConfig.densityDpi != newConfig.densityDpi
rcvdBytesCnt.intValue()
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,false)
Float.valueOf(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
POOL_LIMIT=12
monitor.isCanceled()
new PopupWindow(mContext)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
downloadFragment == null
attributes.getFlags()
dlFileShortcut.getFolderId()
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))
new ObjectMapper().reader(Map.class)
wlZipFilename.getText()
mService.oneTouchPlay(getCallbackWrapper(callback))
NUM_PUBLISHERS=1
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
Math.max(titleRight,subtitleRight)
assertEquals(service.state(),Service.State.FAILED)
lhs.getScore()
LensPositionSelectors.lensPosition(LensPosition.BACK)
attr("heuristic_label_expansion",BOOLEAN).value(true)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
longSize >= 530
t.getType() == Term.Type.STRING
/**   * Returns an  {@code AfterEach} {@code Trigger} with the given subtriggers.  */ @SafeVarargs public static Trigger inOrder(Trigger... triggers){   return new AfterEach(Arrays.<Trigger>asList(triggers)); } 
capacity > 1 << 30
_request == null
layer.initializer().numParams(nnc,true)
bottomLeft.addView(DatabaseBrowserView.VIEW_ID)
CommonUtils.sleepMs(5)
new PsiArrayType(mappedComponent)
new URLClassLoader(new DefaultClassPath(runSpec.getClasspath()).getAsURLArray())
refresh()
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
result=55
YamahaZoneThingHandler.class
hour != 0
webSocket.resource().getAtmosphereResourceEvent().isSuspended()
UnsafeUtils.get4(_mem,8)
mPlayer.getCurrentPosition() * 1000
mRenderNode.isPivotExplicitlySet()
verifyNothing(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
public SELF setJavaHome(File javaHome){   operationParamsBuilder.setJavaHome(javaHome);   return getThis(); } 
request.getLocalAddr()
fla != null
logger.error("Table spec retrieval failed, couldn't find table spec: " + modelName)
bookmarksFolderFinder.findBF_BE_ByG_F(groupId,folderId,queryDefinition)
featureType.getName()
SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
mDarkIntensity == DARK_INTENSITY_NOT_SET
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,46.26961741541022,DeepLearningParameters.Activation.Rectifier)
JavascriptCompiler.compile("bar()",functions,thisLoader)
new SystemAudioActionFromTv(tv(),mAvrAddress,true)
pageSize > pageCache.pageSize()
Throwable e
mWorkerId + BASE_FILE_NUMBER
logger.error(evt.getReason())
UserHandle.getCallingUserId()
!output.isEmpty()
myVfsEventNesting == 0
Key.class.getCanonicalName()
type.getConstructor()
case RGB: 
mNwService.getInterfaceConfig(mInterfaceName)
selenium.isVisible("link=Control Panel")
getTimeout()
logger.warn("using stable discover node UUIDs with seed: [{}]",seed)
assertThat(client).replicationController("doesNotExist").hasId("fabric8-console-controller")
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).contextStart(context -> context.put("foo","bar"))
JsonUt8Writer.string(buffer,strings[i])
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
peopleListFromJSON(jsonArray,localTableBlogId,!isEmailFollower,isEmailFollower)
selenium.isVisible("link=Control Panel")
ROOT_LOGGER.error(consoleSlot == null ? "main" : consoleSlot)
Integer.valueOf(rightStr)
Lists.newArrayList(eol(),header(message,failed),status(status,failed),eol())
obj.getJSONArray("types")
this(type,0); 
new StringBuilder(639)
apnContext.getWaitngApns()
getProject()
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
tableHasColumn(tableName,columnName)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
object=this
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
getTimeout()
i < 200000
(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
DLStoreUtil.addFile(portletDataContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,fileName,0,StringPool.BLANK,serviceContext.getCreateDate(null),serviceContext,bytes)
prjFile.getPath()
Optional.of(dynamicProperties)
mBluetoothHeadset.stopScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
logger.error("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
Long.valueOf(deadline)
searchContext | UsageSearchContext.IN_PLAIN_TEXT
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.set()
mode.contains("creat") || mode.equalsIgnoreCase("1")
MOD_NUM=100
Numeric.encodeQuantity(filterId)
bo.write(0x0b)
UserHandle.getCallingUserId()
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding())
SystemTable.removeEndpoint(DatabaseDescriptor.getReplaceAddress())
DB_VERSION=1
ts.getJobId() == jobid
LOG.isTraceEnabled()
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,about)
keymapManager == null
assertEquals(10,semaphore.availablePermits())
HashMap<String,String>
mDrawable.getIntrinsicHeight()
attributes.getFlags()
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
LOG.warn("Gradle execution error",e)
SmartEnterProcessors.INSTANCE.forKey(language)
"".equals(lib)
selenium.isVisible("link=Site Name")
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
routes.UsersController.index()
resolvedAlias.equals(resolvedName)
new Entry((float)val,i)
case 2: 
!TextUtils.isEmpty(realPath)
PROPS.load(is)
SAMPLE_RATE_HZ_MAX=48000
selenium.isVisible("link=Control Panel")
Integer.parseInt(args.get(2))
ExampleRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
localizedTextUtil.clearDefaultResourceBundles()
blendColor(srcPixels[x],alphaFiller | dstPixels[x],mode)
liquibaseDataType.toString()
"frame".equals(provides)
DEBUG=true
mUserManager.isUserRunning(userHandle)
final CoverageSuiteImpl coverageSuite=(CoverageSuiteImpl)CoverageDataManager.getInstance(myProject).getCurrentSuite(); 
windowedInputCoder instanceof KvCoder
Context.getAdministrationService().saveGlobalProperty(coreProp)
JetTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
!mRequestFilterKeyEvents
focusedStack.getTaskCount() == 0
SamplingProfiler.newThreadGroupTheadSet(group)
future.isCancelled()
GraphicsUtil.setupAAPainting(g)
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0")
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
type.getConstructor()
mHorizontals == null
LabeledComponent<JTextPane>
-1
telephony.getCdmaEriTextForSubscriber(subId)
h - x
typeSettingsProperties.toSortedString()
mTFS.exists(turi)
IBackupManagerService svc=mService; 
Exception e
t.isFreeformTask()
DumpUtils.checkDumpPermission(mContext,TAG,pw)
Exception e
IndexReader.open(spellindex,true)
mQSPanel.getHost() != null
exchange.addRequestHeader("Authorization",_basicAuth)
sDefaults.putBoolean(KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL,true)
nodeEngine.getService(LockService.SERVICE_NAME)
new Paint(Paint.ANTI_ALIAS_FLAG)
getStepIOMeta().getTargetStreams()
VtexApis.REPLIES_URL + id
new PyRemoteTracebackFilter(project,(RemoteProcessHandlerBase)processHandler)
MeasureSpec.makeMeasureSpec(maxSize,MeasureSpec.AT_MOST)
Preferences.getBoolean(AstridPreferences.P_FIRST_LIST,false)
LOG.trace("Terminating gRPC server")
case GRIDGAIN_HANDSHAKE: 
media.getMediaType() == MediaType.AUDIO
new HashMap()
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
getEffectiveCleartextTrafficPermitted()
clone.setClassNameId(getClassNameId())
totalTime / curTime == curOps
commState.putBoolean(sys)
mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
telephony.getCdmaEriTextForSubscriber(subId)
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")
csUseGlobalSearch.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
delegates.size() > 1
((AbstractDrawerItem)drawerItem).isExpanded()
getConfig().getBoolean(SPIDER_PARSE_SITEMAP_XML,false)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
T
-1
new String(decoded,B2CConverter.ISO_8859_1)
flushStatements(false)
new IndexWriter(dir1,new StandardAnalyzer())
query.rules().toArray(new String[0])
temporalType < TYPES.length
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
Modules messenger
Thread.sleep(1500)
mGestureDetector != null
new ConcurrentHashMap<String,BeanDefinition>(64)
Throwable t
object.remove(key)
from >= to
!isRunning()
log.error("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
"true".equals(mode)
focusedTopActivity != null
getNullFrame()
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
defaultFloat=1f
ImmutableSet.of("wsagent/http","exec-agent/http","terminal")
getRequestMethod == null
tableHasData(oldTableName)
header.writeBytes(mask)
InetAddress.getLocalHost()
new Error("expected }, got " + currentToken + " syntax:"+ syntax)
mHandler.removeCallbacks(pae)
findNodeByElement(element)
new FieldFrame(null,true,null,null)
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1500
Slog.wtf(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
params.getSimulatePlatformVersion()
header.writeBytes(mask)
Params params
new Info("wchar_t","WCHAR").cast().valueTypes("char")
VERBOSE=true
adapter.unregisterDataSetObserver(mObserver)
mock.expectedMessageCount(10)
delaySoFar > mReEnableDelayMillis
FluxPeekHelper<T>
id.provider.info != null
sendCommand(CLIENT_SETNAME)
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)
getDelegate().getSupportedCipherSuites()
MAX_DIMEN_FOR_ROUNDING=1080
new StringBuilder(246)
cr.session_timeout_ms != 0
adapter.getArgumentResolvers()
dir.findChild("python")
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
dynamicClassType.getConstructor()
request.mConnectionID != null
ArrayList<String>
lookup.getProcessorByType(requestControllerService.getType())
FsDatasetImpl.LOG.info("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
List<Map<String,Object>>
BeanUtils.instantiateClass(this.executorType,FeatureSpecificationExecutor.class)
log.error(throwable,"Query %s failed",queryId)
mEnabledPrintServices.size() > 0
parent instanceof AppWidgetHostView
buildPages.getTypes()
toString(includePrivateKeys,includeTransactions,includeExtensions,chain)
"Using bind address: " + publicAddress
identity.getId()
bind.getExplicitTemporalType() != null
isCreated()
new ArgTypePreparedStatementSetter(args,argTypes)
name == null
Int2 v
BitmapUploadActivity.class
receiver.receive(this,activeCorrelationId)
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
writeDelaySeconds=2
inverseCopy.apply(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
set(object,value.intValue())
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
name.isEmpty()
selenium.isVisible("link=Control Panel")
mGpsListener != null
updateBreakRequestBtn()
onUserBlockedChanged(unblocked.getUid(),true)
LOGGER.info("No access to path {}",input)
executorService.awaitTermination(5,TimeUnit.SECONDS)
mPathBitmap == null
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
new SpannedString(new CustomSpannable(first),false)
mOpenStreetMapView.onDraw(canvas)
Arrays.deepEquals(valSrcQueries,other.valSrcQueries)
assertOpenEventually(countDownLatch,30)
mode != null
getVersion()
Table table=Table.open(tableName); 
mData != data
peekServiceForUserLocked(userId)
length > 4
new StackManager(new File(stackRoot),new File(commonServicesRoot),osFamily,true,metaInfoDao,actionMetadata,stackDao)
FlipDeleteAdapterActivity.class
ObjectMapper.class
in.readStringNull(8)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
System.currentTimeMillis()
logger.debug("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
p + "." + M_ITERATOR
lineArgs[1]
minIdle < 0
CodeStyleFacade.getInstance(project).isUnsuitableCodestyleConfigurable(configurable)
assertEquals(result.toString(),expected)
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
ENTER_DOZE_HIDE_WALLPAPER_DELAY=2000
asList(CUBRID,DERBY,FIREBIRD)
/**   * How to handle a missing part. By default, if no part matches, the  {@link org.apache.cxf.jaxrs.provider.MultipartProvider} throws a  {@link javax.ws.rs.WebApplicationException}with status 400. If this option is set to <strong>false</strong>, the parameter is set to <strong>null</strong>.  */ boolean errorIfMissing() default true; 
DEBUG_ALL || false
FLog.d(TAG,"Failed inserting a file into the cache",ioe)
Intermediary.class
dest.writeLong(mSubId)
vb.getData() != null
"Content-Type".equals(name)
proxy.getHostText()
workspace.runBuckBuild("//main/...","-c","project.embedded_cell_buck_out_enabled=true","//main/...")
context.var("double")
new Intent(ACITON_FEED_LIST_UPDATE)
is(400)
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
!mMediaPlayer.isPlaying()
type.getConstructor()
public TokenStream create(TokenStream input){   return new SynonymFilter(input,synMap,ignoreCase); } 
logger.warnf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
ctx.setInputSource(context,file,context.getRuntime().getNil())
event.getX()
mapActions.openOptionsMenuAsList()
preDestroys != null
endBounds.width()
tradeService.getBittrexOpenOrders()
typeSettingsProperties.toSortedString()
attribute.getDefinition().getAttributeMarshaller()
getServiceName()
log.error(notJava6.getMessage() + " .. trying RI.")
new NTCredentials(user,getProxyPass(),localHost,PROXY_DOMAIN)
myFindModel.isRegularExpressions()
handshakeFuture != null
new IllegalStateException()
wsSession == null
Integer.valueOf(bottomStr)
isVideoScalingModeSupported(mode)
AnnotatedElementUtils.isAnnotated(type,Validated.class)
stream.close()
new NeuralNetConfiguration.Builder().layer(new RBM.Builder().dist(new NormalDistribution(1,1e-1)).build())
pieces.length <= wordColumn
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
oldVersion == 3
log.error("Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!")
this.rep.getAttributes().put(name,null)
method.varParam(parameterClass.elementType(),parameterName)
currentTransform.getOutputs()
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
maxTryTime=10
displayList != null
params.getSimulatePlatformVersion()
callButton.setPressedImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
b == null
heightIn != height
JMXJsonServlet.class
authenticationBytes != null
button == MouseEvent.RELEASE
lookup.getProcessorByType(requestControllerService.getType())
format.getId()
strat.getLevelSize(0) > 0
converterRegistry.addConverter(Enum.class,String.class,new EnumToStringConverter((ConversionService)converterRegistry))
appearance.getFont(attr)
command instanceof PrioritizedRunnable
model.getStatus() == FileDownloadStatus.pending
ois.close()
loadAnimator(fragment,transition,true,transitionStyle)
ref.getParentObject()
return _EMPTY_CONFIGURATION; 
_("")
isPlaybackActive(false)
request.paramAsStrings("tags")
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
dlFileEntry.getFolderId()
threadSafe=false
type.getConstructor()
p.getUnknownSearchWordLength() > 3
DEFAULT_ADDRESS_BBOX_RADIUS * 10
(data + increment) % 3
StringUtils.trimToNull(comparisonObjectSchema.getName())
selenium.isVisible("link=Control Panel")
getTitle()
mService.isOemUnlockAllowed()
Truffle.getRuntime().getCurrentFrame()
commit.getAuthorIdent()
mime == null
AndroidInstrumentationInfoProvider instrumentationProvider=instrumentation.get(AndroidInstrumentationInfoProvider.ANDROID_INSTRUMENTATION_INFO); 
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker")
sw.toString().getBytes()
IndexReader.open(dir,true)
isCreated()
logger.info("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
{11,6.5f}
Preferences.navigationEnabled(context)
id=56
String result
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.MICRO)
_connection.onIdleExpired()
@Nullable
waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)
new PriorityTieredBrokerSelectorStrategy(1,1)
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
varX("listener")
value == null
selenium.isVisible("link=Control Panel")
builder.appendColumns("4dlu, pref")
sentBytesCnt.intValue()
ThirdEyeUtils.getTimeSpecFromDatasetConfig(datasetConfig)
getPreferences().getBoolean(SIGNAL_PREF,true)
Response.ok()
!mAwake
Exception e
aa.getFlags()
cls.getMethods()
E extends Model
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
origin.realComponent().doubleValue() <= other
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //thrift:fake","cpp_reflection_library = //thrift:fake")
new ArrayList<RowSorter.SortKey>()
jaxbbean.addConstructorArg(paramsbean.getBeanDefinition())
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath",e)
selenium.isVisible("link=Control Panel")
completion.switchOnError(ex -> handler.handle(exchange,ex))
request.getRequestURI()
mMncStr == null
new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)
now == currentPage
checkResultByText("dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}")
mSelectResponse != null & mSelectResponse.length > 0
new CompositeException(e,t)
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER
imageResOnFail != 0
assertEquals(3,StringUtil.countMatches(drl,"import "))
drawable != null
p1.getStatus()
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_UNICODE,myLanguageLevel.isPy3K())
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
volume.getMtpReserveSpace() * 1024 * 1024
FileEntry.class
contact.GetWorldManifold()
new Parameter(new IdentifierImpl("_" + f.getIdentifier().getName()),f.getType(),false)
!debuggerSettings.equals(currentSettings) && Registry.is("debugger.mayBringFrameToFrontOnBreakpoint") != myFocusAppCheckBox.isSelected()
typeSettingsProperties.toSortedString()
benchmark.expectAround("Throughput to scroll FILE_SOURCES",throughputPerSecond,120,0.04)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
instance.criterion.sql.replaceAll("?",instance.criterion.entryValues[instance.selectedIndex])
session.sessions().createUserSession(adminRealm,admin,"user",null,"form",false)
this.route(request).otherwiseIfEmpty(Mono.defer(() -> other.route(request)))
legacyModel.isDefined()
selenium.isVisible("link=Control Panel")
/**   * set the identifier of this item  * @param identifier  * @return  */ public T withIdentifier(long identifier){   this.mIdentifier=identifier;   return (T)this; } 
context == null
event.world.spawnEntityInWorld(entity)
moveInputMethodWindowsIfNeededLocked(false)
private final Integer id; 
vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager())
getLogger().info("Building MavenProject instance: " + mavenProject)
maxThreads / 2
width < 0
"Segment initialized with too large address: " + address + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
checkPojoMetaClass()
resources.getDimension(R.dimen.close_handle_height)
COUNT_DATABASE.put(key,val)
mValues[7]
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
displayList != null
TextUtils.isEmpty(JCUtils.getCurrentUrlFromMap(urlMap,currentUrlMapIndex))
HTREEMAP_DIR_SHIFT=6
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,500,0)
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)
new ActivityMvpNonConfigurationInstances<>(presenter,nonMosbyConfiguraionInstance)
dbManager.getHeadBlockId()
graph.add(new OSRLocalNode(i,proxy.stamp().unrestricted()))
mResourceData[i] != null
dynamicType.getConstructor()
logger.debug("NODE {}: Retry timout: Advancing")
destination.isTopic()
synchronized (mAccounts) {   writeStatisticsLocked(); } 
writeLine(STLS_COMMAND)
valueFactory.normal(token)
ENABLE_KERNEL_UPDATES=false
from >= to
file.isDirectory()
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
"mvn:" + DEFAULT_COORDINATES + "/"
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_READ,evtOld,evtOld != null,evtOld,evtOld != null,subjId,transformClo.getClass().getName(),taskName,keepBinary)
ShirtPocket.this.startDrag(clip,thumb,false)
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
ImmutableList<Class<?>>
loaded.getLoaded().getConstructor()
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,true,"cancelAllNotifications",pkg)
evaluate(123.5,DataTypes.FLOAT)
fraction * (nextValue - prevValue)
LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort())
CharSequence message
runner.run(1,true)
Glide.with(activity).load(url).downloadOnly(size.getWidth(),size.getHeight())
sm.getString("deltaManager.waitForSessionState",getName(),mbr)
getService().animateCollapse()
builder.addDependency(RegistryInstallerService.SERVICE_NAME)
allocator.getFlowController().prepareAction(input,weights,weightGradView,biasGradView,delta,epsNext)
version == null
mMenuDrawer.isShown()
id=15833
realm.assertThread()
accountHandle.getComponentName().toString()
DiagnosticType.error("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time",false)
logger.error("InterruptedException during playing a notification sound")
IndexReader reader=writer.getReader(); 
logger.warn("Cannot play playlist ({})",e.getMessage())
DEBUG=true
public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } 
MAX_BATCH_SIZE=250
note.getAttachmentsList().size() > 0 && showThumbnails
(long)y & 0xFFFFFFFL
Slog.wtf(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
info.getType() & 0x7
klass.getDeclaredMethods(false,declaredMethods)
Set<Long>
mCurrIconRow != null & mCurrIconRow.isVisible()
XmppStringUtils.parseBareAddress(user)
Thread.sleep(5000)
LOG.error("Failed to load schematics")
isReserved(c)
new EnterSelectionDialog(shell,props,schemaNames,"Select a partition schema","Select the partition schema to use:")
Set<Long>
singletonObject == null
totalNbSuggestions > MAX_NUMBER_SUGGESTIONS
new EmoteClue("Panic by the mausoleum in Morytania. Wave before you speak to me. Equip a mithril plate skirt, a maple longbow and no boots.",new WorldPoint(3504,3576,0),PANIC,WAVE,item(MITHRIL_PLATESKIRT),item(MAPLE_LONGBOW))
LOGGER.debug("Could not find DropTargetDropEvent class",e)
loaded.getLoaded().getConstructor()
a.getDimensionPixelOffset(attr,0)
r.ensureActivityConfigurationLocked(0,false)
PostgreTable.class
receiver != null
new IndexWriter(dir,new StandardAnalyzer(),true)
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,new UserHandle(mUserId))
lockForRegularUsage()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
startBounds.width()
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
LOGGER.debug("Could not open folder",ex)
case GRIDGAIN: 
TestPackage.foo(a,1,"1","!")
o == null
ys.at8(row)
_connector.getResponses("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
pvtKeyStore == null
case READ_UNCOMMITED: 
StringBuffer sb=new StringBuffer(); 
mBouncer.show(true,false)
name.equals("not")
checkPojoMetaClass()
DEBUG=true
super.onDetachedFromWindow()
new WebdavEntry(resp.getResponses()[0])
TreeSet<Date>
result.signum() <= 0
msg.obj == mSmHandlerObj
c == Float.class
TelephonyManager.getDefault().getPhoneType()
channel.close()
dest.writeLong(mSubId)
2 << 8
size * 1.75f
taskName.startsWith(":buildSrc:")
updateCrumbs()
new SpannedString(first,false)
return false; 
enabled=false
new IllegalStateException()
fragmentEntryPersistence.filterFindByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
Map<Long,Double>
maxSegmentSize >= numHits
Thread.currentThread().isInterrupted()
new Paint(Paint.ANTI_ALIAS_FLAG)
this.actual=expected
toArrayHelper(array,1)
treeWalk.release()
Long.valueOf(attrValue)
Collection<GridDrStateTransfer>
ColorResources.getColor("primaryControlShadow")
new IllegalArgumentException("Advertising can't be both connectable and scannable")
Optional.of(target)
Integer.toHexString(quality)
name == null
deltaY < 0
editable=true
markerHeight
WATCHDOG_TIMEOUT_MILLIS=5000
getTestName(false)
Response.ok()
WebUtils.toHttp(response).setStatus(HttpServletResponse.SC_UNAUTHORIZED)
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
e.getStateChange() == ItemEvent.SELECTED
synchronized (mAccounts) {   writeStatusLocked(); } 
data.isEmpty()
mGpsListener != null
mFinishing && mSupportHardware
pos == -1
entry.maximumAmount - entry.freeConnectionsCounter.get() + entry.connections.size() >= entry.minimumAmount
telephony.iccTransmitApduBasicChannel(subId,cla,instruction,p1,p2,p3,data)
new IndexWriter(mDirectory,new StandardAnalyzer(),true)
e.getMessage()
readStayAwakeConditions()
LOG.error("An exception was caught while attempting to handle an activity generated exception",th)
mActionBar != null
System.arraycopy(bytes,0,this.bytes,0,SIZE)
display.getMetrics(dm)
new SelectMetadataChange()
Integer.valueOf(attrValue)
Long.valueOf(attrValue)
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
cursor != null
doMethod("GET","/books/" + bookId,null)
ImmutableList.of("/bin/bash","-c","python convert_to_katana.py AndroidManifest.xml > $OUT")
!isTopLeftVisible
clusterService.operationRouting().indexShards(clusterService.state(),request.index(),request.type(),request.id(),request.routing())
KeyValueHolder<RouteContext,Processor>
UIUtils.getFontHeight(group) * 10
tableHasData(oldTableName)
caches.get(i)
ctx.isSwapEnabled()
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
viewDefinition.getViewName()
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
dist < bestdist
mGpsListener != null
_parms._distribution == Distribution.Family.bernoulli
phrase.length()
jGitConnection.executeRemoteCommand("ssh://host.xz/repo.git",transportCommand)
GoPsiImplUtil.findBaseTypeFromRef(methodType.getTypeReferenceExpression())
new GrammaticalRelation(Language.UniversalChinese,"nummod","numeric modifier",MODIFIER,"QP|NP|DP",tregexCompiler,"NP|QP < ( QP  =target << M $++ NN|NP|QP)","NP|QP < ( DNP=target < (QP < CD !< OD) !< JJ|ADJP $++ NP|QP )")
response.getStatusCode()
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",true))
mBitmapState.mBitmap.hasAlpha()
mTfs.createFile(new TachyonURI("/root/testFile1"))
getKeyFromGrant(alias)
mJobs.get(i)
FORMAT_FIELD.getPreferredName()
cursor != null
serialVersionUID=9006432914018679675L
x < maxX
Results.unauthorized()
m.getMethod()
parser.getText()
getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC)
typeSettingsProperties.toSortedString()
private final View view; 
XmppStringUtils.parseBareAddress(user)
Integer chatId
mAppToken.hasContentToDisplay()
streamTokenizer.ttype == StreamTokenizer.TT_WORD
a.getDimensionPixelOffset(attr,0)
mLayerType == LAYER_TYPE_SOFTWARE
executionManager.findChildExecutionsByParentExecutionId(processInstanceId)
mock.expectedMessageCount(2)
selenium.isVisible("link=Control Panel")
BrowseCap.isChrome()
assertEquals(300,counter.get())
aliases.size() > 0
resources.getDimension(R.dimen.close_handle_height)
loaded.getLoaded().getConstructor()
r - scrollY
ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
new ModelNode().set(60000)
rightTuple.setStagePrevious(rightTuple)
new IndexMetadata(column,type,row.getString(INDEX_NAME))
text.startsWith("Compilation completed successfully")
expectedMinimumCount == -1
displayContent.getDockedStackLocked()
new CallbackStub()
mHorizontals == null
duration - SystemClock.uptimeMillis() - bedtime
selenium.isVisible("link=Control Panel")
mBluetoothService.notifyIncomingA2dpConnection(address,true)
"Using bind address: " + publicAddress
context.var("double")
fill
Object[]
onDetachedFromWindows()
GROUP_IDLE_TIME_S=5
SCRIM_BEHIND_ALPHA_KEYGUARD=0.55f
type.getConstructor()
IOHelper.getCharsetName(exchange)
F.asList(ctx.store(),ctx.events(),ctx.evicts(),ctx.queries(),ctx.continuousQueries(),ctx.dr())
Schedulers.computation()
performDexOpt(packageName,instructionSet,true)
List<Map<String,Object>>
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
logger.info("license [{}] - grace",license.uid())
capacity > 1 << 30
resource.getPath()
Timber.e(e,"Error enabling compression",e)
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
String.format("Could not find method %s(%s) on %s",name,Arrays.toString(paramTypes),target)
mService.setWifiApConfiguration(wifiConfig)
logger.info("Strip code")
Exception e
initial=10
resourceTableStream.read(tableBytes,0,(int)alignedSize)
layout.getGroup()
Looper.getMainLooper()
attributes.getFlags()
mQsContainer.getX()
sep < 0
majorVersion != null
(Integer)card[15]
new InvalidPluginRequest("Found more than one plugin for plugin id " + pluginId)
document != null
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
into.get(i)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "var c = goog.require('a.c');\nvar d = goog.require('a.b.d');\n\n")
WebSettings.setTextSize(WebSettings.TextSize.LARGEST)
TelephonyManager.getDefault().getPhoneType()
new StringBundler(5)
selenium.isVisible("link=Control Panel")
url.equals(completeUrl)
getWebElement(webDriver,locator,"1")
TokenSet.create(TEXT,TAG_NAME,MARKDOWN_LINK,MARKDOWN_ESCAPED_CHAR)
edge.setType(type)
cacheConfig.isPopulateCache()
boosted - base < config.boostThreshold()
title.length() > 12
ExprEval.of(null)
orderedSet((int)i & mask,item)
SHUTDOWN_VIBRATE_MS > 0
!mAwake
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
TruffleOptions.AOT
display.getMetrics(dm)
args[i].charAt(0) == '-'
sendAdminCommandLocked(deviceOwner,action,extras,null)
new IndexWriter(benchmark.getRunData().getDirectory(),null,false)
mService.disconnect()
position < mSrcDragPos
platformJars.contains(classfile)
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
sm.getString("introspection.classLoadFailed")
CoreProxy.sendToPlayers(createItemPacket(item,orientation),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance)
RunnableFuture<?>
index=0
SCRIM_BEHIND_ALPHA_KEYGUARD=0.55f
ref_val.startsWith("HTTP error 403")
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
result.getContentType().equalsIgnoreCase(PresContentClient.CONTENT_TYPE)
Math.min(desired,height)
loaded.getLoaded().getConstructor()
newStart.equals(ByteBufferUtil.EMPTY_BYTE_BUFFER)
GL20.glVertexAttribPointer(indx,size,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())
Assert.assertEquals("Recall outside target range",0.6924,r,0.001)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
new TextPaint()
createTestNet(n)
Exception e
src.getPath()
condition.signal()
actionButton.setRolloverImage(new ImageIcon(ca.getRolloverIcon()).getImage())
mTouchProgressOffset=1.1f
pushNotificationsSender.resetPushNotificationSenders()
new RuntimeException("builtin library initialization failed: " + e,e)
swapFile.delete()
Integer.valueOf(bottomStr)
String.format("Field [%s] needs to be a primitive; found [%s]",fieldNames,foi.getTypeName())
insertIndex > 0
meta.getDatabaseMeta().getSchemaTableCombination(environmentSubstitute(meta.getSchemaName()),environmentSubstitute(meta.getTableName()))
directoryUrl.getParameter(Constants.GROUP_KEY)
mUserManagerHelper.getAllUsersExcludesSystemUser()
mTimes[i]
mResourceData[i] != null
/**   * User: anna Date: 1/10/13  */ public class JavaFXUnresolvedFxIdReferenceInspectionTest extends AbstractJavaFXQuickFixTestCase {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxUnresolvedFxIdReferenceInspection());   }   public void testUnknownRef() throws Exception {     doTest("Controller");   }   private void doTest(  final String controllerName){     myFixture.configureByFiles(getTestName(true) + ".fxml",controllerName + ".java");     final IntentionAction singleIntention=myFixture.findSingleIntention(getHint("unknown"));     assertNotNull(singleIntention);     myFixture.launchAction(singleIntention);     myFixture.checkResultByFile(controllerName + ".java",controllerName + "_after.java",true);   }   @Override protected String getHint(  String tagName){     return "Create Field '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/unresolvedFxId/";   } } 
toolchainBuilder.addCompilerFlag("-isystem%ndk%/usr/include".replace("%ndk%",ndkPaths.createBuiltinSysroot()))
loaded.getLoaded().getConstructor()
myApplyData == null
mContext.enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
mTrustListeners.get(i)
return false; 
Object[]
matcher.matches()
dynamicType.getConstructor()
timeout < 0
(T)filteredItems
old.isUnderlined()
config.getCredentialsProvider() == null
TokenSet.create(YAMLTokenTypes.SCALAR_STRING,YAMLTokenTypes.SCALAR_DSTRING)
Math.min(128,Math.max(-128,priority))
!detector.isInProgress()
transform(matrix,source,width,height,false,recycle)
return true; 
mPrivateInput == null
contentType != null
new RuntimeException(e)
winAnimator.mSurfaceController == null
totalBytes()
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
formatTime(scanWifiLockOnTime / 1000)
mMenuDrawer.isShown()
mContext.sendStickyBroadcast(mStorageLowIntent)
from.getRegistryName()
opcode > 0
subscriptionSender.setContextAttributes("[$CONTENT_TITLE$]",contentTitle,false)
LOG.error(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
mc.getMod() == null
createHalf(buffer.length(),init,workspace)
r.getEffectiveKey()
new BindException(concept,"concept")
Assert.notNull("MapSession cannot be null")
Assert.assertEquals(19,as.getAllGlobalProperties().size())
app.getSettings().SHOW_CAMERAS.get()
capacity > 1 << 30
c == 10
cs[c].set0(r,rng.nextFloat() > _createFrame.binary_ones_fraction ? 0 : 1)
parser.getName().equals(xhtmlExtension.getElementName()) || parser.getDepth() <= startDepth
log.info("In OSGi: using programmatically wired maven parser")
new TextPaint(Paint.ANTI_ALIAS_FLAG)
final TestActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
findCodecForFormat(false,format)
new Paint(Paint.ANTI_ALIAS_FLAG)
TestUtil.stall_till_cloudsize(1)
BitUtil.check(status,6)
FLog.d(TAG,"Failed inserting a file into the cache",ioe)
NSNameResourceCodec.encode(ci)
RingBuffer.newWriteQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
position > lastPos
connectionManager == null
label.getPackageFragment()
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.showErrorNotificationTerse("Analysis server has terminated"); } ,ModalityState.NON_MODAL)
new YUIJavaScriptMinifier()
new MapStoreWithStoreCount(expectedStoreCount,300,100)
logger.debug("myq ReturnCode: {}",returnCode)
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
verify(mWifiService).stopLocalOnlyHotspot()
List<E>
selenium.isVisible("link=Control Panel")
assertEquals(expectedPlan,actualPlan)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
assertEquals(7,databases.size())
given().contentType(ContentType.BINARY).content(file).when().post("/file")
HashMap<String,ASTNode>
existing.getState()
mDataAuthorities == null
selenium.isVisible("link=Control Panel")
@Controller
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges),0)
logger.trace("[monitor] rescheduling check for [{}]. last access time is [{}]",lastSeenAccessTime)
metricsByDimensions.remove(dimension)
Thread.sleep(5000)
LOG.error("OpenTracing: Failed to capture tracing data",t)
Collection<GridDrStateTransfer>
!mUserVisibleHint && isVisibleToUser && mState < STARTED
num.add(j,numbers.get(keys[j]))
cctx != null
ArrayList<String>
record == null
knownActions.contains(handler)
format(elem,true)
mWM.isKeyguardSecure()
new NetscapeValidator()
uri.toString().equalsIgnoreCase(future.getURI().toString())
arguments.setSourceMapSourceRoots(sourceMapSourceRoots.toString())
Math.max(titleRight,subtitleRight)
itemLeft > headerRight
TimeValue.timeValueMillis(randomIntBetween(1,5) * aggHistogramInterval)
"A task is in the ABORTED state but stage is " + stageState
log.error("Cannot evaluate types() for {} due to {}",requestClass,e)
relations.replace(oldName,newTable) != null
timeout=2000
WebServicesTestUtils.checkStringMatch("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
selenium.isVisible("link=Control Panel")
eventType != XmlPullParser.START_TAG
new RecoveryCleanFilesRequest(request.recoveryId(),shard.shardId(),recoverySourceMetadata,translogView.totalOperations())
session.save(model)
cache.size()
((WithNode)node).getContext()
metadata.getFaces()
myEditor.getComponent()
StringBuffer tmpLocation=new StringBuffer(actionMapper.getUriFromActionMapping(new ActionMapping(actionName,namespace,method,null))); 
accountHandle.getComponentName().toString()
entry.getKey().startsWith("sun.")
imageView.setBackgroundDrawable(drawable)
app.getSettings().SHOW_IMAGES
new ObjectMapper().reader(Map.class)
@Override public ResolvedJavaType getDeclaringClass(){   return holder; } 
parent.setBytes(300)
RowMutation rm=new RowMutation("Keyspace1",key); 
numExamples=10
event.causeOfChange != CommentAction.PUSH_COMMENT
Integer.valueOf(stackIdStr)
122 + (USE_OLD_HISTORY ? 1000 : 0)
mHwSession.getConfigFlag(flag,(int result,boolean value) -> {   halResult.value=result;   flagState.value=value; } )
lock.isLocked()
writer.close()
loaded.getLoaded().getConstructor()
message.contains("14807") || message.contains("14883")
AssetCategoriesAdminWebUpgrade.class
Utils.addMenuItem(menu,Menu.NONE,MENU_SYNC,Menu.NONE,R.string.menu_rotate,android.R.drawable.ic_menu_always_landscape_portrait)
mPowerManager.isScreenOn()
Iterable<SkyKey>
TelephonyManager.getDefault().getPhoneType()
(short)777
states.length == 3
new GridQueryPortableFieldsIterator(new Iter(res),cctx,cctx.keepPortable())
settings.ROUTER_SERVICE.get()
ConfigserverUtil.createExampleConfigserverConfig()
new DataSize(42,Unit.MEGABYTE)
realm.assertThread()
readOwners.clear()
mService.setUidPolicy(UID_A,POLICY_NONE)
return expected; 
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
SimpleScheduleBuilder.simpleSchedule().withIntervalInMinutes(this.refreshInterval)
tok[2]
MetricsLogger.count(getContext(),DEMO_SESSION_DURATION,sessionDuration)
!mProcessesReady
verify(connection,exception,error)
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
assertEquals(5,scannedBeanCount)
_wValue instanceof Integer && ((Integer)_wValue > 0)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
assertEquals(1695,res.getWeight(1,2),10)
LineNumberConvertor.Builder.createLeft(data.getLines())
loaded.getLoaded().getConstructor()
createHandlerResult(c,principalFactory.createPrincipal(principal.getId()),null)
isStarted()
enabled=true
new PathBasedFilterInvocationDefinitionMap()
cupboard().withDatabase(getWritableDatabase()).delete(PhilmMovie.class,null,null)
/**   * Create Reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonReactiveClient createRx(){   Config config=new Config();   config.useSingleServer().setAddress("redis://127.0.0.1:6379");   return createReactive(config); } 
getLogger().error("Unknown classloader [CNFE]: " + loader.getClass().getName())
propExcludedBiomes.getIntList()
list.listIterator()
Log.e("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
new TextField<String>(JMSConfiguration.GROUP_KEY)
c.getWidth()
TelephonyManager.getDefault().getPhoneType()
context.init(httpServletRequest,httpServletResponse)
Assert.assertEquals(8,v2)
Locale.getDefault().toString()
activity == null
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
pur.getFile(dirId.getId())
Simple.of(Runtime.NoneType.class)
moveInputMethodWindowsIfNeededLocked(false)
System.nanoTime()
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")
LayoutAdminWebUpgrade.class
inserter.release()
m.getSize()
partitionGroup.numBuffered()
Math.max(titleRight,subtitleRight)
mono.otherwise(ex -> Mono.error(getReadError(bodyParameter,ex)))
target.getDestination()
mLocalDirtyRect.setEmpty()
cache.remove(this)
getActivity().getSupportFragmentManager() != null
routes.ExtractorsResource().list(input.getId())
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo-java.lang.Class...-","foo-java.lang.Class<?>...-")
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).otherwiseIfEmpty(createSession(exchange))
setEnabledFunctions(mDefaultFunctions,false)
Assert.assertEquals(118L,ownerCapsuleNew.getNetUsage())
return false; 
rowLabels.size()
fingerId == 0
!proxyTransport.equals(ListeningPoint.UDP) || !proxyTransport.equals(ListeningPoint.TCP) || !proxyTransport.equals(ListeningPoint.TLS)
i == 0
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
T
@UriPath
providerInstance.getReferencesByElement(element,domCfg,context)
child.tagName.equals("base") || child.tagName.equals("script") || child.tagName.equals("link")|| child.tagName.equals("meta")|| child.tagName.equals("title")
e.getMessage()
impl.getServerFactory().setBlockInjection(true)
this.add(getPanelCommand())
new GZIPOutputStream(output)
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
SecurityUtils.isSecurityEnabled(configuration)
@Self Object currentStatement
T
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
expirationTime == Long.MAX_VALUE && expirationTime < 0
bungee.getTranslation("outdated_server")
selenium.isVisible("link=Control Panel")
ts.getJobId() == jobid
mContext.sendStickyBroadcast(mStorageLowIntent)
Object key
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
">>> Started two caches bound to '" + POLICY_20MB_EVICTION + "' memory region."
teleport(new Target(entity),chargeFor)
MigrationManager.instance.notifyUpdateUserType(ut)
mData.hashCode()
Executors.newCachedThreadPool()
mDir.getDirId()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
oldEntityBuilder.addComponent(new BlockComponent(type,new Vector3i(blockComponent.getPosition())))
buildData.getUserContentRelativePath()
position - dockDividerWidth
mLocation != null
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
WordPress.getCurrentBlog().getRemoteBlogId()
i < 10
type.getConstructor()
topMembersGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
friendlyAttributes.get(name)
Thread.sleep(100)
new Paint(Paint.ANTI_ALIAS_FLAG)
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
presence.getTo()
setUnknownLabels(binarized,mainLabel)
new LinearSectionConfig(SectionConfig.DEFAULT_GUTTER,SectionConfig.DEFAULT_GUTTER,SectionConfig.HEADER_INLINE,SectionConfig.FOOTER_STICKY,0,0,0,0)
PhoneNumberUtils.isISODigit(number.charAt(i))
FBUtilities.getLocalAddress()
version == null
mHandler.removeCallbacks(pae)
win.isDrawnLw()
!vis.isChecked()
npmAnalyzerPlugin.getBowerVersionFilter(version)
validationInterval=30000
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,6)
block.getEnchantPower(world,x,y,z)
boost == -1
!showOnKeyguard
mPtr != 0l
labels.slices()
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commit()
randomFrom(() -> new ComposeProcessor(instance.first(),randomValueOtherThan(instance.second(),() -> randomColumnProcessor(0))),() -> new ComposeProcessor(randomValueOtherThan(instance.first(),() -> randomColumnProcessor(0)),instance.second()),() -> new ComposeProcessor(instance.second(),instance.first()))
selenium.isVisible("link=Control Panel")
new IndexWriter(dir2,new StandardAnalyzer())
result.getAttack() == null
telephony.getForbiddenPlmns(subId,appType)
Trans == TRANSPOSE
new Message("XML_STREAM_EXC",LOG)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
new InputStreamReader(in)
installProgressBar.setIndeterminate(true)
id=39
nullabilityOfA.refine(nullabilityOfA)
-25
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
new DateMathParser(formatDateTimeFormatter,TimeUnit.MILLISECONDS)
childLeftTuple.reAddLeft()
getRoot()
selenium.isVisible("link=Control Panel")
wrappedBuffer(byteBuffer)
previewData == null
mergeConfigs(res,s -> ConfigFactory.parseFile(new File(s)))
noParam == null
archive.getNameHash() > 0
animData == null
metaContact.getDisplayName().startsWith(queryString)
blockStore.init(new HashMap<Long,List<IndexedBlockStore.BlockInfo>>(),new HashMapDB(),null,null)
CalendarLocalServiceUtil.updateCalendar(existingCalendar.getCalendarId(),calendar.getNameMap(),calendar.getDescriptionMap(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
CompletionServiceImpl.isPhase(CompletionPhase.EmptyAutoPopup.class)
TileEntity tile=getTile(o); 
!serverContextTakeover
(inWidth - kW + 2 * padW) / sH
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
callback.done(true)
Arrays.asList(expected.get(2),expected.get(0),expected.get(1),expected.get(2),expected.get(4),expected.get(3),expected.get(4),expected.get(4),expected.get(5))
Thread.sleep(5000)
this(0,null); 
socket.getPoller().cometInterest(socket)
getTokenNames()
saveToFile()
myFixture.getAvailableIntentions("struts-action-method.xml")
selenium.isVisible("link=Control Panel")
duration(0,15,18900,0)
String.format("%s: language=%s description=%s",commentFrame.id,commentFrame.language,commentFrame.description,commentFrame.text)
ViewFileSystemTestSetup.configWithViewfsScheme()
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
smallIcon.getType() == Icon.TYPE_RESOURCE
(line=reader.readLine()) != null
new StringBuilder()
selenium.isVisible("link=Control Panel")
mContext.sendBroadcast(intent)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
buildData.getWorkspaceDir()
new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask)
TIMESTAMP_READ_METHOD.invoke(object,connection)
updateSubtree(node)
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
TelephonyManager.getDefault().getPhoneType()
temporaryFolder.newFolder()
selenium.isVisible("link=Control Panel")
string.length() >= 0
mDisplay.getMetrics(mDisplayMetrics)
mHandler == null
Throwable t
StringBuffer buffer
allResources.isEmpty()
singletonObject == null
synchronized (this) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
Log_OC.e(TAG,"Initializing Fragments in onAccountChanged..")
new DefaultGoApiResponse(400)
" firstActiveTime=" + lastActiveTime
buf.readInt()
onRotationLockChanged()
workishDir.getAbsolutePath()
attachmentsDir.getCanonicalPath()
mentionsListView.setSelection(0)
LayoutLocalServiceUtil.validateImportPortletInfo(userId,targetGroupId,targetPlid,portletId,parameterMap,larFile)
FluentIterable.of(Default.class.getDeclaredClasses())
WikiTestUtil.addPage(TestPropsValues.getUserId(),_node.getNodeId(),ServiceTestUtil.randomString(),originalContent,true,serviceContext)
_freemarkerEngineConfiguration.getResourceModificationCheck()
Slog.wtf(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
new IllegalArgumentException("Invalid reference to commit for merge " + request.getCommit())
badLine.getMessage()
platformVersion < MNC
Exception e
Family.hashCode()
Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
ConstantNode.forConstant(JavaConstant.NULL_POINTER,null)
property != null
journalArticle.getId()
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle","jboss-har")
selenium.isVisible("link=Control Panel")
CANCEL_TIMEOUT_LIMIT=3000
this.e != null
mGpsListener != null
mPerformanceMap.get(userId)
PrintAttributes.enforceValidColorMode(currentMode)
userType(1)
return tsr; 
inner.deletedNodes()
hazelcastFactory.newHazelcastInstance()
EventPublishingService<ReplicationMessage,ReplicatedMessageListener>
new IndexWriter(ram,new StandardAnalyzer(),true)
parser.nextInt()
LOG.error("Couldn't run process with PTY",t)
mLastAnnouncementWasQuickSettings && !mTracking
polyLats.length - 2
Assert.assertEquals(2,latch.getCount())
bbbGW.userConnectedToGlobalAudio(emm.voiceConf,emm.userid,emm.name)
System.out.println("")
SAMPLE_RATE_HZ_MAX=48000
mBottomLeftStrip=drawable
mediaController.show(0)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
shadowSize == 0
entity instanceof ProcessDefinition
Response.ok()
setEditorText(expressions.get(myHistoryIndex))
status.isDirectory()
message.getMessage().getExpiresInSeconds() * 1000
logger.info("Return Object {} now at size {}",b,count.getAndDecrement())
DKV.get(vec._key) == null
peekServiceForUserLocked(userId)
"*********** Traced requests text saved to " + requestTraceFile + ".txt"
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_SERVER,false)
selenium.isVisible("link=Control Panel")
pY + pWidth
metaInjectMeta.isNoExecution()
selenium.isVisible("link=Control Panel")
Integer.valueOf(stackIdStr)
mPulseCallback.onPulseFinished()
printMultiCatch(cc,hasResources)
new ProtoFile("descriptor.proto","google.protobuf",NO_STRINGS,NO_STRINGS,Arrays.asList(message),NO_SERVICES,map("java_package","com.google.protobuf"),NO_EXTEND_DECLARATIONs)
client.pods()
displayList != null
component.length >= 2
con.getClass().getName()
allocator.getFlowController().prepareAction(x,activations,gamma,beta,mean,var)
CharSequence message
2 << 8
ASHMEM_SIZE=256
selenium.isVisible("link=Control Panel")
null != Configuration.getResource(dataSourceName)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
CellUtil.estimatedHeapSizeOf(cell)
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ AtmosphereResource removeAtmosphereResource(AtmosphereResource resource); 
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
items[28]
singleValueAggregation.has(String.valueOf(VALUE)) || !singleValueAggregation.get(String.valueOf(VALUE)).isJsonNull()
ReflectionUtil.setAccessible(m).invoke(this,new Object[1])
ConfigUtils.absoluteHealthCheckDir(stormConf)
id=15865
JDBCUtils.safeGetBoolean(dbResult,"COLUMN_IS_NULLABLE")
logger.info("started [{}] instances with [{}] stage=prod tag")
mPowerManager.isScreenOn()
VERSION=1
new CrypticClue("Search the boxes in the goblin house near Lumbridge.",NULL_10627,new WorldPoint(3245,3245,0),"Goblin house on the eastern side of the river.")
first.getIndexInFile() == j - 2
StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))
@NonNull
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_method_name"))
new SpannedString(first,false)
callbackList.getRegisteredCallbackCookie(i)
private ViewPagerAdapter mAdapter; 
publishProgress(progress,max)
parameter.toString()
new DataCompletenessScheduler()
fileFilters.get(module)
Object[]
mHandler.removeCallbacks(pae)
Boolean.valueOf(attrValue)
in.readVInt()
status_ != null
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
ultimateRecyclerView.enableSwipeRefresh(true)
bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
project.getId()
new RuntimeConfigurationError("No nosetest runner found in selected interpreter")
m.getClass()
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Slave.DoesNotExists.Message")
future.isCancelled()
statesByName.put(name,state)
input.getPath()
new GroupTest(true)
replicaId < nCores
timeout < 0
paren_argument_list_inner(b,l + 1)
SVNURL.parseURIDecoded(myUrl)
TestUtil.stall_till_cloudsize(1)
findAnnotationAttributes(element,annotationType.getName(),true,true,true,true,false,false)
new Paint(Paint.ANTI_ALIAS_FLAG)
Thread.sleep(1000)
this.subscribe(parentGroup,contactIdentifier)
readIf("AUTO_INCREMENT")
assertEquals(8,definitions.size())
type.getConstructor()
new MultiIterator(iterables)
ldapConfig.getAttrCrlBinary()
CommonUtils.truncateString(query.getQuery(),1000)
Collection<TblColRef>
s.array.length == 3
commentsListView.smoothScrollToPosition(0)
entry.notification.clone()
JavaAssistUtils.getParameterType(parameterTypes)
lengthInWords >> 4
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
res - _bias
GrailsWebRequest requestAttributes=new GrailsWebRequest(request,response,getServletContext()); 
elm.getTagName()
NestedSetBuilder.stableOrder()
new ApiException(ApiException.Type.BAD_TYPE)
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),null,null,null,null,new FsInfo(0,pathInfo),null,null,null,null,null)
blog.getRemoteBlogId()
context.getLogger().logAttributeWarning(address,SLOT_ATTRIBUTE_NAME,MESSAGES.invalidJSFSlotValue(slot.asString()))
property("script")
new Origin(origin,nativeGetUsageForOrigin(origin),nativeGetQuotaForOrigin(origin))
info.isConnected() == true
type.getConstructor()
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
commentsListView.setSelection(0)
myDetailsPane.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
mAdapter == null
targetJar.exists()
mService.oneTouchPlay(getCallbackWrapper(callback))
DynamicCounter.increment(filterName,"unknown",filter.filterType())
new EnumValidator<TransactionMode>(TransactionMode.class,true,false)
new Paint()
DEBUG=true
imeWin.getDisplayFrameLw()
stack.hashCode()
pinScrollBy(hdelta,vdelta,true,0)
is("/home/source")
public static ArrayValue timeArray(OffsetTime[] values){   return new TimeArray(values); } 
GestureListener listener=myListeners.get(frame); 
logger.info("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
memoryReservation.getAndAdd(bytes)
checkPlanDoNotMatch(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
getEffectiveCleartextTrafficPermitted()
new IncrementalIndexSegment(rtIndex)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
token.equals("»") && !prevToken.equals("\u00a0")
ImmutableSet.of("testStringRepresentation")
mGpsListener != null
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
randomIntBetween(0,10)
mContext.startActivity(intent)
doTest()
listView.getCheckedItemCount()
FileUtil.isAncestorThreeState(changeCandidate.getPath(),dir.getPath(),false)
sr.makeNextStartId()
conn.prepareStatement(sql)
selenium.isVisible("link=Control Panel")
ir.mHandler != null
selenium.isVisible("link=Control Panel")
factory.getEmbdeddedServletContainer()
!clientContextTakeover
driverPropertySource.getProperties()
getResource(exchange).otherwiseIfEmpty(Mono.defer(() -> {   logger.trace("No matching resource found - returning 404");   exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);   return Mono.empty(); } ))
Session.getInstance(mailServerProperties,null)
mService.mAppTransition.isReady()
duration - SystemClock.uptimeMillis() - bedtime
UniqueQueue<Node>
loaded.getLoaded().getConstructor()
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
AbstractBufferStreamT[]
T value2
perc(.10,3)
RemoteException e
authHeader.size() > 0
decompiler.addJScriptConditionalComment(ts.getString())
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
Int2 v
Thread.sleep(200)
ContactModel::getSmsSn
uri.getAssetName().toString()
dht.context()
ReflectUtil.isSubclass(parameterType,methodParameters[i].getType())
selenium.isVisible("link=Control Panel")
mock.expectedMessageCount(0)
localCache.put(name,NULL_ENTRY)
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
aa.getFlags()
oppositeWindow != null && oppositeWindow.getOwner() == w
Assert.assertNotNull("Test output points to null",input.size() > 1)
ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
m.getDeclaringClass().getName().startsWith("org.gridgain")
Files.newOutputStream(self,CREATE,APPEND)
getSslStoreProvider().getKeyStore()
dialog.hide()
TypeEvalContext.fast()
value + value + MINIMUM_BACKLIGHT
transmittableAudioEncodings.contains(sdp)
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new LayerView(this,0xff00ff00)
assertEquals(3,grailsApplicationAwares.size())
Long.valueOf(value)
assertThat(targetConnectionCount).isGreaterThanOrEqualTo(goodServerStats.getTotalRequestsCount())
fluentSetters()
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)
parser.getText()
mHandler.removeCallbacks(pae)
assertNull(stubTree)
info.getSubscriberIdForSubscriber(subId)
keys.isEmpty()
new IndexWriter(indexStore,new StandardAnalyzer(new String[]{}),true)
return 32.0f; 
fileType.equals(fileType.getName())
s2 < s1
Slog.wtf(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
Preconditions.checkNotNull(location)
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_script_name"))
new IndexWriter(indexStore,new SimpleAnalyzer(),true)
new StringBuilder(741)
AlluxioLogServer.class
rep.saveStepAttribute(id_transformation,id_step,"file_type_field",filenameField)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
context == null
jid.getLocal()
setEditorText(expressions.get(myHistoryIndex))
i < 1000
new File(fileName)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
clampScreenBrightness(mLastUserSetScreenBrightness)
paramType.getName()
dependentMeasureRef.equalsIgnoreCase(that.getDependentMeasureRef())
awaitBusy(() -> ALLOWED_OPERATIONS.hasQueuedThreads() && ALLOWED_OPERATIONS.availablePermits() == 0)
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amounts[face.getIndex()] / flow.capacity,1,min,max,vb,sides)
fMethodDescriptions.put(method,description)
minBukkitBuildVersion=698
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
Long assetId
Exception e
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
currentChatPanel.getDefaultContact()
Math.abs(mLastModified * 1000 - time) >= 86400000
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
mWM.removeView(mView)
getProperties().remove("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
BuildData buildData=getBuildData(); 
mPanelClosedOnDown && !mHeadsUpManager.hasPinnedHeadsUp() && !mTracking&& !mStatusBar.isBouncerShowing()
ran.nextInt(500)
topicRegistrations == null && topicRegistrations.isEmpty()
Integer.valueOf(getOptional("kylin.engine.spark.max-partition","5000"))
setStudyOptionsView(true)
new NullPointerException("ClassInfo's name should be non-null")
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=10
configureRemote(fork)
entry.notification.clone()
capacity > 1 << 30
application.getApplicationContext()
item.getName().matches(name)
-1
annotation.names()
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
_contextHandler.getBaseResource() == null
val == null
loaded.getLoaded().getConstructor()
result.setBytes(8)
jobLoader.findJobEntriesWithDescription(JobMeta.STRING_SPECIAL)
update(bytes)
isGreaterOrEqual(platformVersion,MNC)
assertFalse(metaInject.init(spyMeta,data))
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
Map<Long,Fields>
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
offset >= 0
coyoteRequest.getReadListener() != null
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER
position == -1
sortedModules.stream()
logger.info("Intercepted " + method.getFullMethodName())
parser.getBoolean(KEY_ANIMATION_DISABLED,true)
type.getConstructor()
pubnub.disablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
options.putOpt("updated",true)
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1)
getTimeout(ticket)
anchorView.getWindowToken()
mData.hashCode()
!mStopped
!userInfo.canHaveProfile()
checkPojoMetaClass()
TVisit
assertEquals(9,rows.size())
Long.valueOf(args[ai])
verifyPosition(decoder,binary("232302004200000880316890202968001e02582d00000000000000050000320000018901920000001dc1e2001601081154255d0202005a0053875a00a57e5a00af80"))
klass.getDeclaredFields(false,declaredFields)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
getListeners()
mMediaPlayer.isPlaying()
this.getSocket()
IDLE_TIMEOUT=3
o.getAmount()
Delete_dialogLayout.findViewById(R.id.ll_location)
5 * 60 * 1000L
Base.getTargetBoard()
twitter1.getHomeTimeline(new Paging().count(1))
mp.getValue()
lock.isLocked()
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
mAttachInfo == null
config.getStorageImpl()
Maths.logisticGradientValue(rating)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"gfxinfo",pw)
new OneRun(42.56819,1.603231,42.571034,1.520662,17712,446)
commitIfNecessary(session,message)
ENABLE_APK_ASSETS_CACHE=true
_log.error(ioe,ioe)
synchronized (mAccounts) {   writeStatusLocked(); } 
getDialect() instanceof PostgreSQLDialect
graph.getEdges()
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
jniGetLocalAnchorA(addr,tmp)
readStayAwakeConditions()
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class)
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).description(message)
logException(id,exception)
!hasAnnotation(annotatable,annotationMirror)
selenium.isVisible("link=Control Panel")
myClass != null
requestHeader.mConnectionID != null
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)
row.length < 0
WordPress.getCurrentBlog().getRemoteBlogId()
TABLE_COMMIT
SystemInfo.isMac
mResourceData[i] != null
assertEquals(2,conceptStopWords.size())
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
note.getTag().getId() != 0
this.deliveryDelay > 0
Thread.sleep(0,10)
req.getContentLength()
realm.assertThread()
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS)
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
-10
new EnumValidator(ParticipantStatus.class,false,false)
A args
new String(data,0,read)
factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)
"Error resetting interface " + mInterfaceName + ", :"+ e
op != CALLCODE
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
Thread.currentThread().isInterrupted()
worldsPath.resolve(getChunkFilename(chunkPos))
LOGGER.debug("Could not execute unmarkEntries",ex)
item.getType() == DownloadActivityType.NORMAL_FILE
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,false,count)
logger.warn("Cannot play line-in ({})",e.getMessage())
Object edge
hasPartialTag(tokens[pos - 1],"SUB","EIG","VER:AUX:3:")
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
config.enterpriseConfig != null
"Error resetting interface " + mInterfaceName + ", :"+ e
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_NAME)
PortletFileRepositoryUtil.addPortletFileEntry(portletDataContext.getScopeGroupId(),portletDataContext.getUserId(kbArticle.getUserUuid()),KBArticle.class.getName(),kbArticle.getClassPK(),PortletKeys.KNOWLEDGE_BASE_ADMIN,kbArticle.getAttachmentsFolderId(),inputStream,fileName,mimeType)
getTimeout()
IQ.Type.error == packet.getType()
SkylarkDict<K,V>
payload.writeBytesLenenc((byte[])each)
logger.debug("rapidRefreshFutureEnd stopping")
mTextColor.getColorForState(ds.drawableState,0)
device == AudioSystem.DEVICE_OUT_HDMI
super.setHeader(name,value)
ruleGroupInstance.getGroupId()
(outputFolder + File.separator + apiFolder).replaceAll("/",File.separator)
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
newCursorPos <= text.length()
new StringBuilder()
mMncStr == null
TestRepositoryUtil.assertEqualCollections(localTags,myLocalTags)
new ConcurrentHashMap<String,InjectionMetadata>(64)
expirationPeriod * 60 * 1000
Class.forName(mUfsClz).getConstructor(String.class)
deploymentUnit.getParent() == null
TestSuiteEnvironment.getServerAddress()
ft.commit()
!showOnKeyguard
new int[3600]
SelectTimeZonePacificStandardTimeTest.class
Executors.newScheduledThreadPool(0,new NamedThreadFactory("Strong-Reference-Leak-Detector"))
Log_OC.e(TAG,"onResume() start")
Thread.sleep(5000)
MetricsLogger.count(getContext(),DEMO_SESSION_DURATION,sessionDuration)
new OptionParser()
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
goalStartXp <= 0
ImmutableList.of(interceptors)
case PARENT: 
modifyList(list,arg)
lastPos != mBoundPos
data.hasTestPassed()
_buildTemplateWithGradle("npm-billboardjs-portlet","billboardjs-dependency-management","--dependency-management-enabled","true")
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
mService.setUidPolicy(UID_A,POLICY_NONE)
jobFinishHandler.onComplete(results)
getPreferences().getBoolean(DEBUG_PREF,true)
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").append("#")
node.toAppliedPTransform()
convertImportsToSingleLine=true
loadingResult.getPackageRoots()
UnsafeUtils.get4(_mem,8)
displayNameComparator.compare(itemStack1,itemStack2)
unfinishedVerificationHere()
loaded.getLoaded().getConstructor()
b == null
private final String mPortKey; 
entry.getKey()
" firstActiveTime=" + lastActiveTime
@NonNull String bluetoothAddress
dw != mBackgroundHeight
trackMotionScroll(delta,delta)
API_KEY == null
tabbed.addEventHandler(KeyEvent.KEY_PRESSED,event -> {   Optional<KeyBinding> keyBinding=preferences.getKeyBindings().mapToKeyBinding(event);   if (keyBinding.isPresent()) { switch (keyBinding.get()) { case ENTRY_EDITOR_NEXT_PANEL: case ENTRY_EDITOR_NEXT_PANEL_2:       tabbed.getSelectionModel().selectNext();     event.consume();   break; case ENTRY_EDITOR_PREVIOUS_PANEL: case ENTRY_EDITOR_PREVIOUS_PANEL_2: tabbed.getSelectionModel().selectPrevious(); event.consume(); break; case HELP: HelpAction.openHelpPage(HelpFile.ENTRY_EDITOR); event.consume(); break; case CLOSE_ENTRY_EDITOR: close(); event.consume(); break; default : } } } )
s1.isUnsubscribed()
Long.parseLong(jvmName.split("@")[0])
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
processExistingType(resolveType,processor,state)
writer.close()
(status & 0x20000000) > 0
is(2)
public Object getSourceSection(){   return sourceSection; } 
childLeftTuple.reAddRight()
new ShingleFilter(tokenStream,maxShingleSize,minShingleSize)
v[4]
@Override protected String doInBackground(Void... params){   helper.delete(groupsToDelete,getSelectedFavorites());   favoritesSelected.clear();   groupsToDelete.clear();   return getString(R.string.favourites_delete_multiple_succesful); } 
stripFilter.skipWhiteSpace(charBuffer,stringWriter)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
"Adding new Docker node " + node
ShrinkWrap.create(JavaArchive.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml")
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
DEFAULT_WAKE_LOCK_TIMEOUT=30000
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
fundingUnsuccessfulTextView.setText(bannerSuccessfulString)
TestUtil.nextInt(random(),1,IndexWriter.MAX_TERM_LENGTH)
(Long)strategy.getOrNull("test",third)
new Converter()
!mWindow.getSharedElementsUseOverlay()
String.format("Time taken: %02d:%02d.%03d",minutes,seconds,milliseconds)
servers.isEmpty()
targetSdkVersion >= N_MR1
ap.getSsid()
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
RoleLocalServiceUtil.getRole(companyId,name)
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
/**   * Represents an Eclipse-specific external artifact dependency.  * @since 2.14  */ @Incubating public interface EclipseExternalDependency extends ExternalDependency, EclipseDependency { } 
klass.getDeclaredMethods(false,declaredMethods)
new WorldPoint(1428,3864,0)
getExecutionContext(event,true)
fireMessageReceived(ctx,message)
getIntent().getExtras().getInt(EXTRA_PERSON_ID)
ResponseImpl header(String name,Property property); 
mStackScroller.getChildAtPosition(x,y)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
listener_OnClickListener == null
{CUSTOM_STUDY_REV,DECK_OPTIONS,CONTEXT_MENU_STANDARD}
mSelectPhotoView.getSelectFiles().size() > 0
MAX_ACTION_BUTTONS=2
moveInputMethodWindowsIfNeededLocked(false)
Thread.sleep(20)
sceneToLocalTransformation.postConcat(parent.getSceneToLocalTransformation())
/**   * The lower value in the range.  * @return the lower value in the range.  */ Comparable getFrom(); 
entry.notification.clone()
clusterNodeInfo.containsFlag(Flag.NOADDR)
Integer.valueOf(tokens[3])
mWindowManager.getDefaultDisplay().getMetrics(metrics)
info.getDeviceIdForPhone(slotId)
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithNonCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new PruneUnreferencedOutputs())
files != null
new GroupTest(false)
className.indexOf("org.openmrs.")
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
cancelHardwareAnimations(false)
klass.getDeclaredMethods(false,declaredMethods)
logger.info(logMessage)
PFLAG3_FITTING_SYSTEM_WINDOWS
Long.valueOf(attrValue)
origin <= other
mSeekBar.setProgress(0)
loaded.getLoaded().getConstructor()
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2)
selenium.isVisible("link=Control Panel")
avatar != null
assertFalse(indicesService.hasUncompletedPendingDeletes())
(exception ? throwable instanceof RuntimeException : throwable == null)
tw.release()
{4,5,5,11,6,5,7,5,11,11}
resolveSession.getStorageManager().createWeaklyRetainedMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
SiteTeamsWebUpgrade.class
TokenSet.create(TEXT,TAG_NAME,MARKDOWN_LINK,MARKDOWN_ESCAPED_CHAR)
new Intent()
pointer.isEmpty()
end + emoji.length()
@JsonProperty("id") Integer id
cachedMemoryUsageBytes < softMemoryLimitBytes
addOption(name,"MV_STORE","true")
securityMode != SecurityMode.None
new EnterSelectionDialog(shell,props,Condition.getRealOperators(),"Operator","Select the operator:")
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
state == SocketState.CLOSED
mContext.getString(R.string.branded_monitoring_description_app_personal)
LOG.trace("Unsupported minification resource: " + filename)
private FloatingActionButton btnScrollDown; 
row.setBackground(getResources().getDrawable(R.drawable.list_bg_selector))
exclude
currentResponse.getAuthentication() != null
onEvaluateInputViewShown()
(flags & FLAG_VIEW_ENTERED) != 0
!cursor.moveToFirst()
handleActiveAutofillServiceRemoved(getChangingUserId())
process.waitFor()
tableHasColumn(tableName,columnName)
return true; 
mRepeat > 1
unlockForRegularUsage()
usernameMatcher != null
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")|| (lowerCaseLine.contains("fatal: repository") && lowerCaseLine.contains("not found"))
context.getString(R.string.history_attach_removed,item,attachmentName)
latch.await(60,TimeUnit.SECONDS)
enabled=true
handles[i]
structuralLock.isLocked()
mySide1.select(titles)
mBluetoothHeadset.stopScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
tracesFile.mkdirs()
assertClusterSize(2,nodes[0])
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true)
mValues[7]
RequestContextHolder.currentRequestAttributes()
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
mSyncStatus.get(i)
link.bone.getInitialPos()
RexUtil.simplify(rexBuilder,node)
copy1DRangeFrom(0,mType.getCount(),i)
MonitoringPortletImpl.isMonitoringPortletEventRequest()
new Color(mParams.getCustomBackgroundColor())
BufferUtil.zeroBuffer(128)
HIVE_PARTITION_OFFLINE(6,EXTERNAL)
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
e.getMessage()
objectCache.put(parent,objects)
volume.getMtpReserveSpace() * 1024 * 1024
preMergedCustomer.isLoggedIn()
selenium.isVisible("link=Control Panel")
MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player,entity))
assertTrue(offset >= 0)
serialVersionUID=5345570420394408290L
width > 0
STUB_VERSION=45
config.getMaxRedirects()
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
loaded.getLoaded().getConstructor()
type.equals("")
JBScrollPane.findScrollPane(myContent)
isVideoScalingModeSupported(mode)
32 * 1024 * 1024
oldConfig.densityDpi != newConfig.densityDpi
util.getDataTestDir(table)
runPartialSorter(sorter,NUM_RECORDS,28)
diff >= freeLimit
zone5.equals(zone5)
mResourceData[i] != null
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,prevDeviceState,newDeviceState)
parent instanceof PsiReturnStatement
stmt.executeQuery(sql)
o1.getParameterTypes()
assertTrue(getProjectActions().contains(id))
serialVersionUID=1484299497
values == null
Assert.assertEquals(serviceContext.getAssetLinkEntryIds(),assetLinkEntryIds)
TokenSet.create(RegExpTT.CHARACTER,RegExpTT.CARET,RegExpTT.DOLLAR)
externalDependency.resolve()
1
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
!mWindow.getSharedElementsUseOverlay()
del("*:*")
new TextPaint(Paint.ANTI_ALIAS_FLAG)
typeLength == 0
socket.getPoller().cometInterest(socket)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
env.getDirectories().getExecRoot()
fLines.add(st.nextToken())
mContext.sendBroadcast(intent)
new int[25]
mTileState
LOG.error("Failed to look for classes in " + jarFileName + ": "+ ioEx)
List<Map<String,Object>>
highlightValue(highlight)
checkManageUsersPermission("setupRestrictedProfile")
capacity > 1 << 30
newLogMergePolicy()
"none".equals(maxItems)
response.getBytes()
path != null
logger.info("mmap address is: " + Pointer.nativeValue(addr))
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults)
addTrailingCells(false)
private final PsiClass myClass; 
Thread.sleep(5000)
preOutput != null
log.warn("Cannot fetch column count for cursor : " + e.getMessage())
now == currentPage
executor.submit(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
SystemClock.nanoTime()
LOGGER.lifecycle(exception.apply().toString())
_vresponse == null
token != null
"/index.jspx".equals(requestURI) || "/w/".equals(requestURI) || "/w/index.jspx".equals(requestURI)
@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
r.toRuleString(true)
result != START_SUCCESS
LocalFileSystem.getInstance().findFileByPath(filePath)
telephony.getNetworkTypeForSubscriber(subId)
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
this.constraints.updateFromFactHandle(handle)
mRvc == null
public <A>S leftJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).leftJoin((Expr<?>)entity);   return self; } 
eventFunc.equals("conf_api_sub_mute")
mWindowingMode == WINDOWING_MODE_PINNED
factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
MessagingService.instance().sendRR(cm.makeMutationMessage(),endpoint,responseHandler)
mergeButton != null
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
"Unknown id: " + mCurMethodId
64 * 1024 * 0124
loaded.getLoaded().getConstructor()
assertFalse(cache.context().systemTx())
type.getConstructor()
return self; 
ArrayList<UIDMeta>
field.getType().getName()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
mPowerManager.isScreenOn()
new Intent()
tex.getFieldValue("norfac")
Trans == TRANSPOSE
Exception e
mNoteTypeSpinner.setSelection(position)
error == FingerprintManager.FINGERPRINT_ERROR_USER_CANCELED
MessageDigest.isEqual(ourMac,theirMac)
provider.setClient(c)
!((HttpOutput)out).isWritten()
DumpUtils.checkDumpPermission(mContext,TAG,pw)
StringBuffer line=new StringBuffer(); 
cart != null
proxyHTTPServer.getText()
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId,lastFrameNumber)
sm.getString("namingContext.nameNotBound",name.get(0))
Criterion.or(MetadataCriteria.withKey(ProducteevTask.METADATA_KEY),MetadataCriteria.withKey(TagService.KEY))
read(buffer)
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
focusedStack.getTaskCount() == 0
connectPanDeviceNative(objectPath,"nap","panu")
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
new Paint(Paint.ANTI_ALIAS_FLAG)
out.annotateTo(reader.getOffset(),StringIdItem.getOptionalReferenceAnnotation(dexFile,paramaterIndex,true))
ON_TOP
new TextPaint()
mWorkerId + BASE_FILE_NUMBER
val == null
preResourcesElementDesc.getStoreFactory()
injectFieldSuppressWarnings(annotationNode.up().up(),fieldDecl)
selenium.isVisible("link=Control Panel")
ids1.size()
Reflect.on(result).set(childElementName,Convert.convert(childElement.getTextContent().trim(),childType))
mDataAuthorities == null
wordTypesType == null
log.isDebugEnabled()
EDGEVILLE_HOME_TELEPORT=97
deltaY > 0
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
final LongAdder sum=new LongAdder(); 
AbstractRanking.refreshMinMax(this,graph)
path.charAt(i) == PERIOD
layoutAlgorithm.getStackTransform(task,stackScroll,mTmpTransform,null)
newSearcher(r,false)
contentService.submitContentFromSandbox(contentIds,"UserSandBox","NumeroUno")
globalExecutionStats.getSplits()
new Dialog(ActivityApp.this,mThemeId)
meta.getReferenceStepName()
primaryServer.getClass()
chart.createBufferedImage(bounds.width,bounds.height)
role != MUCRole.none
(Long)resultList
Collections.singletonList("")
doTestWrapMethod(false)
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,true))
cv.visitVarInsn(ALOAD,resultIdx)
((PsiManagerImpl)manager).getFileManager().findCachedViewProvider(file)
isCancelled()
tag_values.getIdAsync("web03")
prefix.add(tmp.substring(1))
schemas == null
RedisRunner.startDefaultRedisServerInstance()
_formatDefinition(definition,nestedDefinitionIndent,level,!nestedDefinitions.isEmpty())
from > to
Thread.sleep(5000)
SiteNavigationBreadcrumbWebUpgrade.class
Exception e
executorService.scheduleAtFixedRate(fileWatcherRunnable,0,30,TimeUnit.SECONDS)
m.shapeInfoDataBuffer()
"could not execute request: " + response
5 * 1000
PsiFormatUtil.getExternalName(psiMethod)
addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()
response.setHeader(WWW_AUTHENTICATE,value)
!mUserVisibleHint && isVisibleToUser && mState < STARTED
connectedHeaders.setAcceptVersion("1.1")
new GdxRuntimeException("Failed to read Vorbis.")
Optional.of(dynamicProperties)
traceTag != 0
mAuthorities.get(i)
new HttpParameter("retweets",enableDeviceNotification)
Math.abs(loss)
checkPojoMetaClass()
snap.getGravity() == Gravity.CENTER_HORIZONTAL
account.getExternalKey()
mCameraUser.submitRequest(request,true)
Bytes.toBytesBinary(tableOrRegionName)
Float.valueOf(strings[i])
"None".equals(tree.getClientProperty("JTree.lineStyle"))
DEBUG_ALL_ACTIVITIES || false
new IllegalArgumentException()
XContentType.JSON.restContentType()
HttpUtil.removePathParamters(uri)
mHandler.removeCallbacks(pae)
new StringBuilder(561)
hashSymbols.keySet()
new AssetDisplayField(classTypeField.getName(),classTypeField.getLabel())
!mIsRecentsShown || !mIsPipFocusedInRecent
JSError.make(REPORT_PATH_IO_ERROR,reportPath)
reordableChildren.size() > actionUrl.getAbsolutePosition()
response.getStatusCode()
offset <= range.getEndOffset()
!mIsRecentsShown || !mIsPipFocusedInRecent
t instanceof EntityExistsException
TitanGraphTransaction g
PyTokenTypes.ADDITIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(expression.getOperator())
Integer.valueOf(displayIdStr)
LOG.error(msg,this)
mBottomLeftStrip=mContext.getResources().getDrawable(resId)
matchAxisFilter != 0
getFastAdapter().notifyAdapterItemInserted(position)
!list.append(ai)
candidate.getArgumentMaping()
new GZIPInputStream(input)
node.getLifecycleService().terminate()
checkPojoMetaClass()
request.getTaskDefinitionKey()
getRequiredLong(singletonMap("long","Apio"),list)
a.willChangeTransformationMatrix()
new Paint(Paint.ANTI_ALIAS_FLAG)
@Use({REG,ILLEGAL})
32 * 1024 * 1024
callback.done(true)
n.intValue()
selenium.isVisible("link=Control Panel")
firstPos != mTargetPos
!myToolWindow.isVisible()
FSDirectory.getDirectory(sub.toString(),true)
name.equals("Devices")
instrumentation.isRetransformClassesSupported()
@Override public final D reloadFromBytes(byte[] ary){   _mem=ary;   initFromBytes();   return (D)this; } 
mucUser.getDecline() != null
GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))
peekNode()
mMediaPlayer.isPlaying()
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
commit.getAuthorTime()
Utils.intNow()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
recordingDescriptorDecoder.endTimestamp()
patched != null
JetTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers2.kt")
Slog.wtf(TAG,sb.toString())
new NativeAllocationRegistry(nativeGetNativeFinalizer(),nativeSize)
alterStatement.getUpdateColumns().put(newName,oldDefinition)
typeSettingsProperties.toSortedString()
permissions+=2
(SubscribeForm)form
new Paint()
mHasSurface && !resizingWindows.contains(this)
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
mFragments.mCurState < Fragment.CONTENT
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
Assert.assertEquals(3,providers.size())
ft.commit()
holder.setVisible(getLoadFailViewId(),visible)
mWindowManager.removeView(mContainer)
hook.startPlay(program)
FileUtil.join(sdkHomePath,GoConstants.GO_EXECUTABLE_NAME)
ccCompilationContextInfo == null
Thread.sleep(5000)
StatusBarIconController.getTint(tintArea,mMobileActivity,tint)
new Rect(left,top,bottom,right)
chain.filter(exchange).contextStart((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
items[i].getValue()
currentTestStartTime.startedAt()
new NetworkRequestHandler.ResponseException(0,504)
args.length != 6
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
ExprEval.of(null)
log.error("Couldn't find style: " + styleId)
JobEntry.class
mTfs.createFile(new TachyonURI("/root/testFile1"))
adapter.item(R.string.layer_hillshade).selected(HILLSHADE.get() ? 1 : 0).icons(R.drawable.ic_action_hillshade_dark,R.drawable.ic_action_hillshade_light).listen(listener).position(9)
preloadQueue.size == 0
listener.iterationDone(policyNet,policyIterationCount)
public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mDataAuthorities == null
workspace.runBuckCommand("test","//:foo")
childLeftTuple.reAddLeft()
postfix.equals("id")
new PrestoException(INVALID_CAST_ARGUMENT,e)
BuildRule resourceRule1=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res1")).build()); 
mDownloadXtraDataPending=true
getDelegate().getSupportedCipherSuites()
new ArgPreparedStatementSetter(args)
Conv2DConfig.builder().kh(kernel[0])
ReferenceCountUtil.safeRelease(holder)
mAnimator.getPhaseY()
addTo(instant.getMillis(),scalar)
parentQuerySpec.limit()
length > 70
Mono.currentContext()
lpNameBuffer.getPointer()
element.getStringValue()
mCoveredFadeColor > 0
mHandler.removeCallbacks(pae)
masm.add(size,scratch1,result,delta,ShiftType.LSL,0)
mPowerManager.isScreenOn()
mPlayer.getCurrentPosition() * 1000
exchFut.discoveryEvent().node()
num.add(j,numbers.get(keys[j]))
value < minimumValue
handshake.getProcolVersion()
mDisplay.getMetrics(mDisplayMetrics)
userGroupMember.getMemberId()
SHORT_CF_NAMES_DEFAULT=true
DLFileShortcutLocalServiceUtil.deleteFileShortcut(classPK)
journalArticle.getId()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
selenium.isVisible("link=Control Panel")
host.getHostText()
tempMat4.multLocal(worldMatrix)
ColorResources.getColor("controlDarkShadow")
a.length <= size
T resource
application.getApplicationContext()
data != null
err != 0
mSupportView != null
Maps.newHashMap()
LOG.error("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
CellUtil.estimatedHeapSizeOf(cell)
mDateView.setTypeface(Typeface.SANS_SERIF)
new Random(System.currentTimeMillis())
subColumn.getLocalDeletionTime() <= gcBefore
notificationManager.cancel(NOTIFICATION_ID,id)
to.toPhoneString()
stackTrace.length < depth
imeWin.getDisplayFrameLw()
synchronized (classCache) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
calendar.roll(Calendar.DATE,-1)
client.query(query)
mUserStates.get(i)
this.getStyleClass().setAll("document-viewer")
ServiceLoader.load(ReportingAdministrator.class)
command.next(answerForm)
new ModelRenderer(model,0,0)
for (SampleStream sampleStream : sampleStreams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
log.warn("Hooking new default : onOperator")
BufferUtil.zeroBuffer(4)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
params.getSimulatePlatformVersion()
!isLoaded && item.isOptional()
COLUMNS=7
logger.trace("An error occurred while executing a command: ",e)
loaded.getLoaded().getConstructor()
assertEquals(flowerVocab.getIndex(),1)
PRAYER_ENHANCE(ItemID.PRAYER_ENHANCE_4,GameTimerImageType.ITEM,"Prayer enhance",275,ChronoUnit.SECONDS)
composeText.getTextTrimmed()
DistinguishedNameParser dnParser=new DistinguishedNameParser(cert.getSubjectX500Principal()); 
ddmStructureService.updateStructure(ddmStructure.getStructureId(),nameMap,descriptionMap,xsd,serviceContext)
tmpHopp.getGraph()
DegreeRangeBuilder.class
socketWrapper.getWriteTimeout()
scheduleRemoveStartingWindow(wtoken)
dispatchUpdatePluginAction()
logger.getParent()
new Paint(Paint.ANTI_ALIAS_FLAG)
{abiList}
a7 != a.a7
this.getClass().getSimpleName()
typeSettingsProperties.containsKey(oldRootPortletId)
startupArgs.isTestingModeEnabled()
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
mf.filter(r,message,transformed.message())
new IllegalArgumentException("Advertising can't be both connectable and scannable")
isIgnoreUriScheme()
policyFlags & SCAN_NEW_INSTALL
selenium.isVisible("link=Control Panel")
tnCount=100
FilterAndProjectOperator.class
ExpressionUtils.isNullLiteral(args[0])
what != -38
temp_descs.get(i)
/**   * The upper value in the range.  * @return the upper value in the range  */ Comparable getTo(); 
range.getStartOffset()
context == null
cachedValues.put(entry,NULL) != null
softWrapsIndex < softWraps.size()
cs == null
return r; 
Config.empty()
mHandler.removeCallbacks(pae)
bigSecondTokenBalance.multiply(bigTokenQuant).divide(bigFirstTokenBalance).longValue()
sqlRouteResult.getSqlParsedResult().getSqlType()
targetInfo != null
ImmutableList.of("/bin/bash","-c",command)
tableHasColumn(tableName,columnName)
objective != null
new SettingsValidators.InclusiveIntegerRangeValidator(0,99)
connection.getParser().addListener(websocket)
Thread.sleep(5000)
realm.assertThread()
listener.onTestFailed(test)
intent.setData(uri)
log.error(error,cause)
Simple.of(String.class)
origin > other
Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
rewardView::setBackgroundColor
log.warn("Reset to factory defaults : onNextDropped")
anchorView.getWindowToken()
assertNotNull(message.getPayload() instanceof Collection<?>)
mStackScroller.getChildAtPosition(x,y)
context.getResponse().setBufferSize(byteContent.length)
name.indexOf('+') >= 0
_log.error(ioe,ioe)
onHold | ON_HOLD_REMOTELY
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
mConnector.execute("volume","format",vol.id)
typeSer.writeTypePrefix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
parentKey != null
ContainerResources.from(2.3,4,16)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
i++
!mEventInterceptor.onPreMeasurePopupView(this,mContentView,w,h)
logger.warn("Playlist '{}' not found",playlist)
getPreferences().getBoolean(DEBUG_PREF,true)
new ModuleDescriptorImpl(Name.special("<built-ins module>"),storageManager,ModuleParameters.Empty.INSTANCE$)
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,true,"getAppStandbyBucket",null)
!Mirrors.isInstance(types,typeElement,PACKAGE_ANDROID_OS + ".Parcelable") || Mirrors.overridesMethod(types,typeElement,"writeToParcel")
child.getNodeValue().indexOf(lSep) == -1
styleBox.setSelectedIndex(0)
loaded.getLoaded().getConstructor()
plugin.isEnabled()
p.getIsFeaturedProduct()
mAms.mWaitForNetworkTimeoutMs=100
resources.getDimension(R.dimen.close_handle_height)
Status.constructStatuses(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
/**   * Include the name of each field when printing it. <strong>default: false</strong>  */ boolean includeFieldNames() default false; 
mHidProfile.isProfileReady()
new IllegalAccessError("read-only")
log.info("In OSGi: using programmatically wired maven parser")
super.getDither()
getValue(activity.getExtraData(),"title",kbTemplate.getTitle())
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState)
a.getDimensionPixelOffset(attr,0)
newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,false)).setRAMBufferSizeMB(0.5)
getExpressionTypesFromInput(TEST_SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
mClocks.elapsedRealtime()
copy1DRangeFrom(0,mType.getCount(),i)
minutes * 60 * 1000
disableBluetoothContactSharing
Throwable t
new Requirement(Skill.SLAYER,61)
field.getFieldInfo()
providerConfig.setTimeout(1000)
checkManageUsersPermission("getting profiles related to user " + userId)
RawUDPInput.class
c.toArray()
id=16
p.getLabel()
(showcaseX != 1000000 && showcaseY != 1000000) || !hasNoTarget
this.posColumn=posColumn
mImage.getFrameCount() >= 1
new Paint(Paint.ANTI_ALIAS_FLAG)
mListener.setConnectionId(0)
mClearPaint.setColor(0xff00ff00)
mListener.onInputUpdated(inputId)
info.getVoiceMailAlphaTagForSubscriber(subId)
List<File>
latch.countDownFirst()
Assert.assertEquals(result,expected)
session.close(new CloseReason(code,reasonPhrase))
id=15808
(T)capability
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
keyClass(NullWritable.class)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
getPagesAndOrPostsString()
canTakeAccessibilityFocusFromHover()
LAST_VERSION=286
new IndexWriter(dir,new StandardAnalyzer(),true)
timeout < 0
Proxy.getInvocationHandler(other).getClass().toString()
assertEquals(128,blockHashesMessage.getBlockHashes().size())
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
loadExternalSettingLinks(preferenceCategory)
from > to
(Long)array[this.index]
fragmentEntryPersistence.filterCountByG_FCI_S(groupId,fragmentCollectionId,status)
JsonObject.createObjectMapper().getJsonFactory()
proto.getExecPath()
!crawlId.equals("-all") || crawlId.startsWith("-")
data.remaining()
assertEquals(actual,expected)
equalTo("Eclipse")
await().atMost(5,TimeUnit.SECONDS)
filter.getMinPrice()
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
telephony.isRadioOn()
mAppToken.hasContentToDisplay()
getListeners()
mShadowDrawable != null
ACRA.log.e(LOG_TAG,"Could not delete report : " + files[i])
proportional
Log_OC.wtf(TAG,"Unhandled conflict decision " + decision)
assertEquals(12,handler.getErrors().size())
String.format("Cannot resolve placeholder '%s' in value '%s'",placeholder,replacement)
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
mObsoleteAgents.remove(info)
cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
LOG.info("Failed to register State Store bean {}",e.getMessage())
selenium.isVisible("link=Control Panel")
new DeleteOptions.Builder(ClientContext.getConf())
mMncStr == null
new Rect(left,top,bottom,right)
logger.warn("{} {}",errorCode,message)
System.currentTimeMillis() + 5000
LOG.info(getName() + " caught: ",e)
callContactItem.setName(detail.getContactAddress())
Integer.valueOf(tokens[3])
sTestCaseCounter == 1
GridHadoopTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
String.format("%s/view/instances;_since=%d;state.name=running;tags.key=owner;" + "_expand:(instanceId,tags:(key,value))",eddaClient.getBaseUrl(region),startTime)
inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 || evt.getButtonIndex() <= 2
@NotNull
ON_TOP
annotationHelper.printError(element,"%s annotated element should have only one constructor")
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
Integer.toString(bitstampOrder.getId())
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString())
attribute.getDefinition().getAttributeMarshaller()
return mChangingAppearingDuration; 
mDownloadXtraDataPending=false
endFunction("delete_column_statistics_by_partition: ",ret != false)
new AssertionError()
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false)
new Paint(Paint.ANTI_ALIAS_FLAG)
new DefaultRouteContext(route,null,list)
selenium.isVisible("link=Control Panel")
new IllegalStateException("UTF-8 not supported!",ue)
shard.idCache().onCached(readerCache.sizeInBytes())
public String getKey(){   return this.key; } 
loaded.getLoaded().getConstructor()
conversation.getContactJid().split("/")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
(Params)in.readOptionalNamedWriteable(PersistentTaskParams.class)
InvokerHelper.setProperty(parent,"layout",answer)
row.size() == 0
BufferUtil.zeroBuffer(128)
SystemInfo.isWindows && frame instanceof IdeFrameImpl
range.getFrom()
name.equals("Devices")
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
t.st == ST.LABEL
cc.isLazy()
stopwatch.elapsedMillis()
stepIdleStateLocked("s:shell")
TimeUnit.SECONDS.toMillis(2)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
invalidate()
UserGroupsAdminWebUpgrade.class
configurable.reset()
Map<Integer,Object>
/**   * @author Vitaliy.Bibaev  */ public interface TerminatorStreamCall extends StreamCall, TypeBeforeAwareCall {   @NotNull GenericType getResultType(); } 
PoolResources.fixed("tcp-client-pool")
miniBatchSize[m]
settings.isShowExcludedFiles() == isShowExcludedFiles() || settings.isUseFileNestingRules() == isUseFileNestingRules()
LOG.info(getName() + " caught: ",e)
typeDefinition.isEnum() || typeDefinition.isInterface() || typeDefinition.isAnonymous()
BROKER_PORT=9092
delegates.tabs.makeTabName(jobMeta,true)
from >= to
public String getId(){   return id; } 
Spoon.class
ResponseEntity<Void>
new Label(this.comboComposite,SWT.NONE)
selenium.isVisible("link=Control Panel")
5 * 60 * 1000L
Boolean.valueOf(attrValue)
nodeEngine.getService(LockService.SERVICE_NAME)
data != null
mappingsDir.exists()
hasMatch=true
segmentInfos.createBackupSegmentInfos(true)
temp.requestFocus()
mSearchFab.setScaleX(0.0f)
logger.isWarnEnabled()
new MonoWhen(true,a -> Tuples.fromArray((Object[])a),p2,p3)
getNode(indexConfigPrefix + "/nrtMode",false) != null
-1
VERSION_META_ARRAY=0
paymentStateContext.getPaymentInfoPlugin() == null
url.isEmpty()
mValues[7]
hour != 0
!isEnabledTracker()
imeWin.getDisplayFrameLw()
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
maxConnectionsPerNode <= 0
LOG.error("Failed to get next entry from " + jarFileName + ": "+ ioEx)
Boolean.valueOf(this.getOptional("kylin.query.escape-default-keyword","false"))
disableForUser(what,token,pkg,mCurrentUserId)
@NotNull TStatement statement
checkNotNull(getPropDefFromClass(superType,pname))
122 + (USE_OLD_HISTORY ? 1000 : 0)
writer.close(true)
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
ServiceLoader.load(ReportingAdministrator.class)
value.getType().getCanonicalName()
font.drawMultiLine(batch,results,20,300)
super.onCreate(state)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
servletPath.equals("/")
new Paint(Paint.ANTI_ALIAS_FLAG)
LOGGER.error("runCommand error: " + ex.getMessage())
parcel.writeCharSequence(mViewIdResourceName)
AtmosphereRequest.class.isAssignableFrom(request.getClass())
preserve.toString()
lock.isLocked()
appName != null
tableModel == null
propValue == null
ensureGreen()
Sanitizer.class
30 * 60 * 1000
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)
adapter.unregisterDataSetObserver(mObserver)
sublistsProperty.get().parallelStream()
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
final LabelProvider mainLabelProvider=(LabelProvider)viewer.getLabelProvider(); 
sharedOptsCount.contains(thread)
errorMessage.endsWith(" is deprecated")
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
onCreateView(mContext,appWidgetId,appWidget)
getTestName(false)
mSearchInput.setFocusable(focusable)
Trans == TRANSPOSE
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
mKey.equals(other.mKey)
session.createTextMessage()
_connection.onIdleExpired()
type.getConstructor()
methodAnnotations++
mSyncStatus.get(i)
p.clearContexts()
buildConfigurables()
authManager.setupCredentials(client,url,credentialsProvider,localHost)
getRepoUrl().equals(gitHubRepo.getRepoUrl()) & getBranch().equals(gitHubRepo.getBranch())
logger.info("copy {} to {}",srcFile.getAbsolutePath(),destPath)
Object[]
tableInfo.getType()
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
targetY - diffY
Color.green(color)
logger.debug("Retreiveing door data")
@Nullable Throwable cause
statistics.addGetTimeNano(System.nanoTime() - start)
allowPrivate.isNull()
attributes == null
case 3: 
expandableView.getActualHeight()
new Requirement(Skill.FARMING,68)
FiltersTopComponent.findInstance().getUiModel().getSelectedQuery()
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
Conv2DConfig.builder().kh(kernel[0])
type.getConstructor()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
final LongAdder sum=new LongAdder(); 
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false)
net.getDefaultConfiguration()
Iterable<SkyKey>
Integer.valueOf(displayIdStr)
this.messageService.monoPostAuthorizeBeanFindById(1L).contextStart(withUser)
boneIndexes.size() > 0
result.whenCompleteAsync((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
d.isObjectVisibleImpl(tag,val,zoom,type,nightMode)
Math.max(maxReturned * 2,maxRows)
SC_DUPLICATE_FILE_EXCEPTION=1000
new NextOccurrenceAction(editorSearchComponent,editorSearchComponent.getSearchTextComponent())
id=15831
addView(root,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
hashInd != -1
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).count(wrapper)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
_log.error(ioe,ioe)
selenium.isVisible("link=Control Panel")
disableForUser(what,token,pkg,mCurrentUserId)
XML_READER != null
mActionBarTop.getVisibility() == VISIBLE
n.isArrayPattern()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
mRCStack.remove(rcse)
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)
selectNext(currentCellPanel)
chunk.split("%n")
Long.valueOf(deadline)
req.getContentLength()
CodeStyleSettings.class.getDeclaredField(name)
lookup.isSelectionTouched()
getTimeout()
sourceWidth > 0
Collections.emptyList()
schemeSpecificParts != null
stream.close()
winAnimator.prepareSurfaceLocked(recoveringMemory)
myScopeSlider.setValue(2)
DEBUG_DRAG=true
world.setBlockMetadataWithNotify(x,y,z,targetID,targetMeta)
sDefaults.putBoolean(BOOL_SHOW_CDMA,false)
InetAddress.getLoopbackAddress()
((IEnergyHandler)source).extractEnergy(o.getOpposite(),energyExtracted,true)
headers.getMessageType()
new MockResponse().setBody("A").setSocketPolicy(SHUTDOWN_INPUT_AT_END)
provider == null
selenium.isVisible("link=Control Panel")
ScanResult.is24GHz(frequency)
System.nanoTime()
lock.isLocked()
IndicesOptions.fromOptions(true,false,true,true)
parsedResult.getSqlType()
List<T>
HotSpotGraalRuntime.getInstance().lookupType(arguments.get(index),(HotSpotResolvedJavaType)accessingClass,true)
clazzes.put(className,clazz)
StringBuffer result=new StringBuffer(); 
61L + 122L
hasCapability(GPS_CAPABILITY_MSA)
fixedValues
mAnswer.setBackgroundDrawable(null)
(CounterCell)this
ENCODED_ZONE_ID=0x8000_0000
tagService.getTagsAsString(task.getId())
loaded.getLoaded().getConstructor()
process.getInputStream()
service.handlePinMmiForPhoneAccount(accountHandle,dialString)
conn.setSourceDecoration(srcDec)
ddmStructureService.fetchStructure(dlFileEntryType.getGroupId(),"auto_" + fileEntryTypeId)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
constraintSystem.getTypeVariables()
Long.valueOf(args[1])
logger.info("Moving functions + variable into deeper modules")
pw.println(ps.getInstantApp(user.id))
myNamedElements == null
Throwable t
context == null
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,0,mUserId)
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
disableForUser(what,token,pkg,mCurrentUserId)
log.info("mlocking " + file + " with length "+ length)
new UnsupportedOperationException("This should never happen.")
CompilerDirectives.inCompiledCode()
new GoogleCodeRemoval(compiler)
LOGGER.debug("Could not execute paste",ex)
StringBuilder className=new StringBuilder(); 
assertEquals(iter.next().getMessage(),"Unable to open ''.")
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
DEBUG=true
settings.setWorkersEnabled(true)
cache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
version == 2
"*********** Traced requests text saved to " + requestTraceFile + ".txt"
num.add(j,numbers.get(keys[j]))
mConferenceById.containsKey(callId)
1234567890 * 2
proxyFactory.createClass().getConstructor()
_typeSettingsProperties.toSortedString()
mMncStr == null
loaded.getLoaded().getConstructor()
(next=this.input.get(currentPosition++)) != null
MARKER_FILE_VERSION=2
new ServerSparseDoubleRow(rowId,startCol,endCol)
fileInfo.getPath()
sessionChanged(session)
w.mBaseLayer <= myLayer
PATH.getAbsolutePath()
mPreferences.getBoolean(CLASSIC_NOTIFICATION,true)
val > mMaxValue
reverseSpeedEncoder.getBits()
StringBuffer buffer=new StringBuffer(); 
8 * Constants.MB
writer.value(null)
StringBuffer buffer=new StringBuffer(); 
new DefaultGoApiResponse(400)
structuralLock.isLocked()
bits2[0]
IOException e
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false)
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"isAppInactive",null)
public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
100 * 1024 * 1024L
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).contextStart(withUser)
args != null
volume.getType() == VolumeInfo.TYPE_PUBLIC
createProject(path,creationPlace,true)
doNotUseAnimations ? 0 : ZOOM_MOVE_ANIMATION_TIME
LocalFileSystem.getInstance().findFileByPath(libPath)
cf.setInMemory(true)
WordPress.getCurrentBlog().getRemoteBlogId()
metadata.getKey()
VERSION=41
findCodecForFormat(false,format)
info.crashInfo.stackTrace.length() > 10000
tracesFile.mkdirs()
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
viewRootImpl.getAccessibilityInteractionController().findAccessibilityNodeInfosByViewTextClientThread(text,accessibilityNodeId,interactionId,callback,interrogatingPid,interrogatingTid)
ams.mContext.createPackageContext(appInfo.packageName,0)
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,callbackIntent)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
websocketComponent.setMaxThreads(11)
value={XSSHtmlFilter.class}
Integer.valueOf(attrValue)
Integer.valueOf(attrValue)
(filterMap.getDispatcherMapping() & FilterMap.FORWARD) > 0
logger.error("Table spec retrieval failed, couldn't find table spec: " + modelName)
JobQueueUtils.getExecutableQueueName(jobClientNodeGroup)
Exception e
LOG.info("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
!expr.isGetProp() || !expr.getLastChild().getString().equals("bind")
new Paint(Paint.ANTI_ALIAS_FLAG)
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope)
propertyDescriptor.setType(inType,type,Collections.<TypeParameterDescriptor>emptyList(),ReceiverDescriptor.NO_RECEIVER)
new KsqlException(e.getMessage())
e != null
origKey + 10
new GridLayout(0,1)
mReportDrawNeeded=true
assertThat(client).replicationController("doesNotExist").hasId("fabric8-console-controller")
List<Long>
VDBG=true
view.flatMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
mError != null
permissions=4
entry.getKey().equals(name)
@Override public void headersEnd(int streamId) throws ConnectionError {   Stream stream=getStream(streamId,true);   StreamProcessor streamProcessor=new StreamProcessor(stream,adapter,socketWrapper);   streamProcessor.setSslSupport(sslSupport);   socketWrapper.getEndpoint().getExecutor().execute(streamProcessor); } 
LocalFileSystem.getInstance().findFileByIoFile(hardLinkFile)
getDefaultLanguage()
typeSettingsProperties.toSortedString()
_connector.getResponses("GET /foo HTTP/1.0\n\n")
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
fileList.isEmpty()
Throwable e
_ddmStructureLocalService.getStructure(structureId)
lastDot >= 0
LocaleUtil.getDefault()
retriever.captureFrame()
ConcurrentHashMap<Url,Channel>
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDw,unrotDh)
varX("name")
new Vector2()
CellNames.compositeDense(SuperColumns.scName(name))
Util.SDK_INT <= 25
status.getServerName()
@ConditionalOnEnablednHealthIndicator("jms")
address.getHostText()
this.publicKeyLocation
Integer.valueOf(bottomStr)
return false; 
newChain.toString()
win.isDrawnLw()
createAggregator(aggregationBuilder,fieldType,indexSearcher)
assertInCompletionList("<caret>UIView",false,"animationDidStart","animationDidStop:finished:")
@Override protected Content setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
this.jumpSpeed=fallSpeed
IccUtils.gsmBcdByteToInt((byte)0x8c)
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer")
i == 1
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
lbHttpSolrServer.setAliveCheckInterval(1)
LOGGER.debug("Could not execute exportToClipboard",ex)
new SAXException(e.getMessage())
client.getGameState() != GameState.LOGGED_IN
RedisRunner.startDefaultRedisServerInstance()
holder.setVisible(getLoadingViewId(),visible)
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
type.getConstructor()
configTimeCacheProviderHolder.remove()
LOGGER.debug("Could not perform drage and drop",nfe)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
Ignition.start("examples/config/example-compute.xml")
OptionSpec<Integer>
context == null
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title1,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,serviceContext)
result == JOptionPane.CANCEL_OPTION
attributes != null
selenium.isVisible("link=Control Panel")
PropertyEvaluator evaluator=new PropertyEvaluator(new HashMap<String,String>()); 
getDefaultLanguage()
fingerId == 0
context.containsMetaEmbeddable(fqcn)
shuffleWithInexistingUuids(project2.uuid(),project1.uuid())
createUrl(Url.removeTail(url.toDecodedString()))
Iterable<TypedVar>
mHidProfile.isProfileReady()
return 4090; 
resources.isEmpty()
MeasureTypeFactory.init()
List<String>
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
@GUIMenuSortOrder(4)
return mAppearingDuration; 
!segments.add(segment)
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
receiverStatusListener.waitForEvent(8000,3)
id=15854
CodeStyleManager.getInstance(myProject).reformatText(file,ranges)
loader.startInternal()
currentNetworkInfo.getState() == NetworkInfo.State.CONNECTED
peekServiceForUserLocked(userId)
@Override public String apply(String json) throws IOException {   Controller controller=createController();   return controller.applyJson(json); } 
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
this.getFieldValue().get()
FileUtil.loadFile(conflictsFile,CharsetToolkit.UTF8)
new DeadCodeEliminationPhase(OPTIONAL)
getImportGroupId()
loaded.getLoaded().getConstructor()
assertEquals(server.mode(),"stream")
selenium.isVisible("link=Control Panel")
clipItem.getText()
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
disableForUser(what,token,pkg,mCurrentUserId)
sr0.getValue().f1
selenium.isVisible("link=Control Panel")
glyph.setSizeRatio(16)
BlockStoreContext.INSTANCE.hasLocalWorker()
blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
i=1
Strings.isNotBlank(password)
public DerivedBuilder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
DeprecationLogger.nagUser("<someIdeTask>.beforeConfigured is deprecated! Replaced by beforeMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
oldConfig.densityDpi != newConfig.densityDpi
gl.marginHeight=3
UUID sndNodeId
application.getApplicationContext()
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,1,Integer.MAX_VALUE)
new ClientException(ClientException.ErrorType.CONFIGURATION,"Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:" + niwsClientConfig.getProperty(CommonClientConfigKey.NIWSServerListFilterClassName))
TimeUnit.SECONDS.toNanos(timeoutSeconds)
phrase.length()
c == '['
selenium.isVisible("link=Control Panel")
new IllegalStateException()
p.getIsFeaturedProduct()
AbstractMethodError e
ams.mContext.createPackageContext(appInfo.packageName,0)
return false; 
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
getBeanClass(factoryClassName).getMethods()
mContext.bindServiceAsUser(mIntent,mServiceConnection,flags,new UserHandle(mUserId))
context == null
!target.equals(element)
future.channel().write(request)
serviceTester.systemReady()
Set<UidRange>
loaded.getLoaded().getConstructor()
getCluster().getDescription().getPrimaries()
oldConfig.densityDpi != newConfig.densityDpi
id=15862
!isObjectMethod(method)
HashMap<String,Operator<? extends Serializable>>
grammar.getTokenNames()
locationServicesStatus.isLocationProviderEnabled()
(low + high) >> 1
lookup.getProcessorByType(requestReportingTask.getType())
add(5308,1,0)
killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,createdBy,reason,comment)
deserializerForCreator(config,enumClass,factory)
pTMXTiledMap.getTileWidth()
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
props.remove(PoolingConnectionProvider.POOLING_PROVIDER)
new HashMap<>(keys.size())
tz.getRawOffset()
first + SEPARATOR.length()
SCAN_STATUS_PARTIAL=0
Log_OC.wtf(TAG,"\t file is NULL")
Environment.getRootDirectory()
unlock()
_buildProjects(gradleProjectDir,mavenProjectDir,gradleOutputDir,mavenOutputDir)
testBadSentence(origBadSrcSentence,suggestedCorrection,expectedSrcMatchStart,expectedSrcMatchEnd,rule.getSrcRule(),lang,languageTool)
Boolean useGrouping=(Boolean)properties.get(NumberFormatSample.PROP_USE_GROUPING); 
attr("heuristic_label_expansion",BOOLEAN).value(true)
final String tId=getCentralAuthenticationService().createTicketGrantingTicket(TestUtils.getCredentialsWithSameUsernameAndPassword()); 
base.length() - 4
value.equals("strict")
Object edge
isPrettyLogging() && (contentType != null && contentType.indexOf("xml") >= 0)
DumpUtils.checkDumpPermission(mContext,TAG,pw)
rightTuple.setStagePrevious(rightTuple)
new LiferayLocalRepository(repositoryId)
GL20.glUniform1(location,v)
mContext.enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
isReserved(c)
DLFileEntryTypeFinderUtil.findByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
player.isAuthorized("essentials.world." + user.getWorld().getName())
EndpointOption that=(EndpointOption)o; 
LOG.error("Exception occurred during processing request: {}",e,e.getMessage())
new IndexWriter(ram,analyzer,true)
sourceNodeData != null
assertThat(response).isEqualToIgnoringCase("Ok.\n")
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
newUiPrefs.enableBackgroundDiagnostics()
actual.getAll()
this(client,path,true,false,Integer.MAX_VALUE,Executors.newSingleThreadExecutor(defaultThreadFactory),false,true,new DefaultTreeCacheSelector()); 
buffer.indexOf(partToMatch)
Math.max(desiredTileWidth,desiredTileHeight)
Clock.getTime() - ourLastTimePressed.get() < 500
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available))
destroy.isPrivate()
comment.lastIndexOf(')')
ServerToClientMessage.instantiateMessage(makeChanges)
m.getSize()
new Handler().postDelayed(new Runnable(){   @Override public void run(){     new AboutDialog().show(getSupportFragmentManager(),"ABOUT_DIALOG");   } } ,200)
message.getPresence().toString()
SegmentedFile.getBuilder()
new String(payload)
webRequest.getNativeRequest(HttpServletResponse.class)
in.readVInt()
new Type(null,"java.lang.Object",tableName)
StringBuffer sb=new StringBuffer(); 
psiFile == null
model::commit
user.getDisplayName()
parser.getText()
mValues[7]
/**   * Specify an ending condition for this trigger. If the  {@code until} fires then the combinationfires. <p>The expression  {@code t1.orFinally(t2)} fires every time {@code t1} fires, and finishesas soon as either  {@code t1} finishes or {@code t2} fires, in which case it fires one last timefor  {@code t2}. Both  {@code t1} and {@code t2} are executed in parallel. This means that{@code t1} may have fired since {@code t2} started, so not all of the elements that {@code t2}has seen are necessarily in the current pane. <p>For example the final firing of the following trigger may only have 1 element: <pre>  {@code Repeatedly.forever(AfterPane.elementCountAtLeast(2)) .orFinally(AfterPane.elementCountAtLeast(5))} </pre><p>Note that if  {@code t1} is {@link OnceTrigger}, then  {@code t1.orFinally(t2)} is the sameas  {@code AfterFirst.of(t1, t2)}.  */ public Trigger orFinally(OnceTrigger until){   return new OrFinallyTrigger(this,until); } 
setting.attach(this)
Schema.builder().addInt32Field("id")
sqlRouteResult.getSqlParsedResult().getSqlType()
fieldType.storeTermVectorOffsets()
new PercentType(precent)
public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
SCAN_STATUS_PARTIAL=0
LOG(3)
object.getDatabase()
getter.getRawReturnType()
new StringBuilder(239)
Arrays.asList("jacocoant","sonarqube-ant-task","hsqldb","activemq-all")
parent == null
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
telephony.getCdmaEriTextForSubscriber(subId)
ListHabitsActivity.class
tracesFile.mkdirs()
rulesJars.include(excludedJar)
varX("name")
new RunAutomaton(automaton)
ContextNameAction.class
_log.error(ioe,ioe)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
loaded.getLoaded().getConstructor()
platformVersion < MNC
si.deliveryCount > 0
exclBuilder.grow(numIncludedDocs)
JMeterUtils.getPropDefault("proxy.cert.validity",7)
/**   * The lower value in the range.  * @return the lower value in the range.  */ Comparable getFrom(); 
new Rectangle(3,2,ERROR_ICON_WIDTH,ERROR_ICON_HEIGHT)
ATLAS_MAP_ENTRY_FIELD_COUNT=4
mContext.startActivity(cantAddAccount)
messageParts.remove(mpart)
new DatabaseFormatterOracle()
getTelecomService().hasVoiceMailNumber(accountHandle)
listener.iterationDone(valueNet,valueIterationCount)
assertEquals(avDegree,2.0)
started.compareAndSet(false,true)
hasNextChange()
new IndexWriter(ramDir1,new StandardAnalyzer(),create)
mEnginesHelper.isEngineEnabled(engine)
name.equals(pkg.getName())
subscriptionSender.setContextAttributes("[$CONTENT_TITLE$]",contentTitle,false)
mMediaPlayer.isPlaying()
length > 4
k < THREADS
LOG.isDebugEnabled()
ColorResources.getColor("sliderGradientLight")
System.currentTimeMillis() / 1000
prepareServer(new HttpServlet(){   @Override protected void doGet(  HttpServletRequest req,  HttpServletResponse resp) throws ServletException, IOException {     if (req.getHeader("Via") != null)     resp.addHeader(PROXIED_HEADER,"true");     if (target.equals(req.getRequestURI())) {       if (query.equals(req.getQueryString())) {         resp.setStatus(200);         return;       }     }     resp.setStatus(404);   } } )
surfaceHeightFacet.get(pos.getX(),pos.getY())
lp.width != panelWidth
type == Object.class
resultMetaData.getColumnName(i)
target.getDestination()
/**   * Created by Marcin on 2015-12-19.  */ public class Chip extends FrameLayout {   private ImageView icon;   private TextView title;   private ImageView close;   private OnRemoveListener onRemoveListener; public interface OnRemoveListener {     void onDismiss();   }   public Chip(  Context context){     super(context,null,R.attr.carbon_chipStyle);     initChip(null,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs){     super(context,attrs,R.attr.carbon_chipStyle);     initChip(attrs,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr){     super(context,attrs,defStyleAttr);     initChip(attrs,defStyleAttr);   }   @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){     super(context,attrs,defStyleAttr,defStyleRes);     initChip(attrs,defStyleAttr);   }   private void initChip(  AttributeSet attrs,  int defStyleAttr){     inflate(getContext(),R.layout.carbon_chip,this);     title=(TextView)findViewById(R.id.carbon_chipText);     icon=(ImageView)findViewById(R.id.carbon_chipIcon);     close=(ImageView)findViewById(R.id.carbon_chipClose);     close.setOnClickListener(new OnClickListener(){       @Override public void onClick(      View v){         if (onRemoveListener != null)         onRemoveListener.onDismiss();       }     } );     if (attrs != null) {       TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.Chip,defStyleAttr,0);       setCornerRadius((int)a.getDimension(R.styleable.Chip_carbon_cornerRadius,0));       setText(a.getString(R.styleable.Chip_android_text));       int iconRes=a.getResourceId(R.styleable.Chip_carbon_icon,0);       if (iconRes != 0) {         setIcon(iconRes);       }  else {         setIconVisible(false);       }       int color=a.getColor(R.styleable.Chip_android_background,0);       setBackgroundColor(color);       a.recycle();       Carbon.initElevation(this,attrs,defStyleAttr);     }   }   public void setText(  String text){     if (text != null) {       title.setText(text);       title.setVisibility(View.VISIBLE);     }  else {       title.setVisibility(View.GONE);     }   }   public void setText(  int resId){     setText(getResources().getString(resId));   }   public String getText(){     return (String)title.getText();   }   public View getTitleView(){     return title;   }   public void setIcon(  int iconRes){     icon.setImageResource(iconRes);     setIconVisible(iconRes != 0);   }   public void setIcon(  Drawable drawable){     icon.setImageDrawable(drawable);     setIconVisible(drawable != null);   }   public void setIcon(  Bitmap bitmap){     icon.setImageBitmap(bitmap);     setIconVisible(bitmap != null);   }   public Drawable getIcon(){     return icon.getDrawable();   }   public View getIconView(){     return icon;   }   public void setIconVisible(  boolean visible){     icon.setVisibility(visible ? VISIBLE : GONE);     setPadding(visible ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingTop(),getPaddingRight(),getPaddingBottom());   }   public void setRemovable(  boolean removable){     close.setVisibility(removable ? VISIBLE : GONE);     setPadding(getPaddingLeft(),getPaddingTop(),removable ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingBottom());   }   public boolean isRemovable(){     return close.getVisibility() == VISIBLE;   }   public void setOnRemoveListener(  OnRemoveListener onRemoveListener){     this.onRemoveListener=onRemoveListener;   } } 
checkField(clazz,"octets",ByteArrayOutputStream.class)
new AnAction("Left | Right"){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=true;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourDot : VcsUtil.ourNotDot);   } } 
selenium.isVisible("link=Control Panel")
uploadArchivesTask.finalizedBy(updateBundleVersionTask)
getChildren().add(tabsContainerHolder)
cursor.retry()
stmt.executeQuery(sqlQuery)
selenium.isVisible("link=Control Panel")
ArrayList<Library>
logger.infof("OAuth clients imported: " + clients)
synchronized (mAccounts) {   writeStatusLocked(); } 
attributes.getFlags()
mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)))
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Super extra cool this annotation!!!")
superClass == Object.class
_typeSettingsProperties.toString()
oldestInflightEntry != null
mPm.getUserBadgedDrawableForDensity(icon,new UserHandle(userId),null,0)
Params params
logger.error("No file to compact for user defined compaction")
getCurrentTab().handleHTMLCopy()
assertEquals(4,visitor.getTables().size())
new ProgressDialog(this)
new WorldPoint(2487,3001,0)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
evaluate("value = read_config('foo', 'bar')").lookup("value")
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName)
1
isHoverable()
@NotNull
LOGGER.info("Generated {} star-tree records from {} segment records",numSegmentRecords,numStarTreeRecords)
!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
dst.equals(sp)
new HashSet<>()
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","DbHits","No data returned")
currentBlog.getRemoteBlogId()
setSelectedEditor(selectedComposite,true)
new RuntimeException()
new LogVersionMismatchRequest()
mPackageUsage.write()
Utils.writeFile(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
minPriority == null ? 1 : minPriority
Long.valueOf(timeString)
Optional.of(authorizedPeers)
private Color color; 
FBUtilities.getLocalAddress()
getBooleanValue(ASYNC_CLIENT + "acceptAnyCertificate",false)
idx + 1
new EnterSelectionDialog(shell,chef.props,err_lines,Messages.getString("ChefLog.Dialog.ErrorLines.Title"),Messages.getString("ChefLog.Dialog.ErrorLines.Message"))
Preconditions.checkNotNull(thirdOperand,"Argument thirdOperand can't be null")
Thread.sleep(5000)
IntrospectionSupport.setProperties(jpa,options)
childrenExpanded ? mDividerHeight : mChildPadding
mPositionScroller.startWithOffset(position,offset,offset)
JSONException e
ViewWebContentAssignedToMyRolesUpdateDueDateDetailsTest.class
mat2.isEqual(mat1)
Intent.ACTION_LOCALE_CHANGED.equals(action)
dragNode.isNodeChild(target)
type.getConstructor()
VERSION_META_ARRAY=0
LineNumberConvertor.Builder.createLeft(data.getLines())
StringBuilder sb=new StringBuilder("RuleFlowProcessInstance"); 
mObsoleteAgents.remove(info)
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
registerTags(ACTION_REFERENCE_PROVIDER,"action",NAMESPACE_TAGLIB_STRUTS_UI,"form","url")
CharSequence message
getLocationEnabled()
mContext.sendStickyBroadcast(mStorageLowIntent)
_log.error(ioe,ioe)
!(topicParts.length > 2) && !topicParts[0].equals(TOPIC_PREFIX)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
baseDir.equals(dir)
value < minimumValue
factory.getConstructor()
triggerProto.getAfterEndOfWidow()
getValue(activity.getExtraData(),"title",kbTemplate.getTitle())
value.getType().getCanonicalName()
Observable.timer(0,1,TimeUnit.SECONDS)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
new GridBagConstraints(1,1,1,1,0.6,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,15),0,0)
states.length == 3
count > 1
new StringBuffer()
mAttributes.getFlags()
logger.warning("Unable to load image using AWT loader!")
Log.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
getDelegate().handle(exchange).otherwise(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
getType()
centerButton(mButtonNeutral)
(halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
!list.append(ai)
"0.0.0.0:" + DEFAULT_NM_LOCALIZER_PORT
format.getDescription()
@NonNull String bluetoothAddress
config.getIdleConnectionTimeoutInMs()
AbstractConfiguredTarget current
ufsPath.getPath()
getPointer().getInt(0)
pos < len
selenium.isVisible("link=Control Panel")
((SQLDataSource)dataSource).getSQLDialect().storesQuotedCase()
type.getCanonicalText()
LOG.error(e)
new InterpreterLaunchContext(getJavaProperties(),option,interpreterRunner,id,name)
context.getAssets().addAssetPath(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mMediaPlayer.isPlaying()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
LOG.debug("removing shm " + shm)
GitWorkingDirectoryFactory.newGitWorkingDirectory(portalGitWorkingDirectory.getUpstreamBranchName(),JenkinsResultsParserUtil.getProperty(portalReleaseProperties,"lp.plugins.dir"))
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
selenium.isVisible("link=Control Panel")
LOG.error("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
Environment.getRootDirectory()
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope,Property.Filtered)
adapter.unregisterDataSetObserver(mObserver)
targetActor.addCaptureListener(listener)
cfstore.getSSTables()
settings.getDirection()
Objects.hash(expressions)
win.isDrawnLw()
new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource())
selenium.isVisible("link=Control Panel")
new PluginsPanel(new GridBagLayout())
c > 0
mock.expectedMessageCount(0)
info.crashInfo.stackTrace.length() > 10000
logger.error("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
mTextColor.getColorForState(ds.drawableState,0)
Http11AprProtocol.class
mState == STATE_UNINITIALIZED
liquibaseDataType.toString()
paymentStateContext.getPaymentInfoPlugin() == null
Math.log(docCount)
assertNotNull(message.getPayload() instanceof Collection<?>)
list.getAdapter().getCount() - 2
Long.valueOf(nfcid2,16)
getDataSource()
softClassCache.put(beanClass,results)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
type.getConstructor()
mAlpha.end()
ChannelBuffers.copiedBuffer(request.getByteData())
maxAlongDimension.isRowVector()
Thread.sleep(5000)
mStackScroller.getChildAtPosition(x,y)
Class.forName(DEFAULT_IMPL)
GuiActivator.getUIService().getConferenceChatManager().createChatRoom(chatRoomName.trim(),getSelectedProvider().getProtocolProvider(),new ArrayList<String>(),"",false,false,true)
checkPojoMetaClass()
testPackage.getFormattedDuration()
mInstalld.snapshotProfile(appId,packageName,codePath)
/**   * 是否搜索模块类同包以及子包的其他类  */ boolean scanPackage() default false; 
TypeEvalContext.fast()
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
System.out.print("JVM options:")
newRemoteAddr != null
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName)
condition.signal()
mode.getFormattedName().toLowerCase()
this.optimizedDispatch
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
bytes.write('\n')
Class<T>
mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
RecentsActivity.EVENT_BUS_PRIORITY + 1
mEditSessionTime.setText(String.valueOf(repLimit))
application.getApplicationContext()
DefaultExtendedAnalysisWidget.class
String.format("" + "DO $$ DECLARE constraint_name varchar;\n" + "BEGIN\n"+ "  SELECT tc.CONSTRAINT_NAME into strict constraint_name\n"+ "    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc\n"+ "    WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'\n"+ "      AND TABLE_NAME = '%2$s' AND TABLE_SCHEMA = '%1$s';\n"+ "    EXECUTE 'alter table %1$s.%2$s drop constraint ' || constraint_name;\n"+ "END $$;",schemaName,tableName)
ON_TOP
mMncStr == null
next.getValue() == null && next.getValue().get() == null
selenium.isVisible("link=Control Panel")
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0
Log.wtf(TAG,"Unable to resolve SystemUI's UID.",e)
synchronized (this) {   mScreenOnTime=readScreenOnTimeLocked(); } 
config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
Spoon.class
e.getMessage()
checkPojoMetaClass()
ColorResources.getColor("desktopBackgroundColor")
isNotNull(url)
Thread.sleep(5000)
classMapper.lookupType(classAttribute)
holder.setVisible(getLoadFailViewId(),visible)
Log.e(TAG,"read property failed, e:" + e)
DEBUG=true
new Paint()
new Paint(Paint.ANTI_ALIAS_FLAG)
CalendarServiceUpgrade.class
role.description().get()
dest.writeLong(mSubId)
Log.info(this + " JVM BUG(s) - injecting delay" + _jvmFix2+ " times")
case NONE: 
Object[]
isTouched(0.75f,1)
NettyAsyncHttpProvider.class
new URI(scheme,userInfo,server.host,server.port,prefix,null,null)
principal.getName()
BlockLiquid.getStaticBlock(material)
Thread.sleep(5000)
@Override public final Object clone(){   return this; } 
mGsmPhone.mSST.isConcurrentVoiceAndData()
t.equals(type)
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
Blocks.dirt.func_149739_a()
new WorldPoint(2783,3210,0)
this.asImmutable(ModelType.untyped(),modelNodeInternal,null)
new int[2500]
imageView.setBackgroundDrawable(drawable)
promise.tryFailure(new ClosedChannelException())
homeListView.smoothScrollToPosition(0)
versionObject.getVersion()
builder.timeValueField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
InsertFinalStep<R>
selenium.isVisible("link=Control Panel")
defaultListenerAccess != null
selenium.isVisible("link=Control Panel")
dataType.equalsIgnoreCase("NVARCHAR")
profileManager.loadSettingsProfile(settings)
KeyEvent.isMetaKey(keyCode)
fingerId == 0
node.put("persons",persons)
getClientConfig().getAddressList()
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,analyzer)
new Spinner(getContext())
camera.setMatrices(app.getGraphics())
ACTIVE_NOTIFICATIONS_MAP.size()
metadata.getClass()
currentlyProcessing.addCallback(callback)
Allocation.createFromBitmap(mRS,b,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractACLCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
ciManagement.getNagEmailAddress()
IOException e
new DeadCodeEliminationPhase(REQUIRED)
filterPipeline.add(new Canvas(width,height,croppingPosition))
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
WebServicesTestUtils.checkStringMatch("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
new MtpManagerMock(getContext())
closeTo(2569.0,200.0)
mStartup
Value emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue); 
mIconRes > -1
array1[4]
args[0]
treeWalk.release()
mFileLength - mPos < mBlockSize
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
ActivityManagerNative.getDefault().updateConfiguration(config)
tableName.toString()
objects == null
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
mgr.mergeSegments(cube,0,Long.MAX_VALUE)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
Params extends PersistentTaskParams
Sets.newHashSet()
codeStyleManager.reformatRange(elementParent.getContainingFile(),elementParent.getTextOffset(),elementParent.getTextOffset() + elementParent.getTextLength())
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding())
GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))
a.willChangeTransformationMatrix()
-1
IoUtils.safeClose(delegate)
sep < 0
checkPojoMetaClass()
new Bitmap(nativeInt,isMutable,null,density)
getEndpoint().getConfig().getIndexName()
types != null & !types.isEmpty()
LOG.error(e)
lineBuf.length() - 2
SamplingProfiler.newThreadGroupTheadSet(group)
getLabel()
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
? extends VcsCommitDetails
main.call(frame,args)
Throwable t
old + 26
win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)
_TestUtil.randomUnicodeString(random,fixedBytesLength)
arg1 == 0
conceptAnswer.getConcept()
buildPages.getTypes()
case 14: 
location == null
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,true)
saleAdjustmentPrice.lessThan(retailAdjustmentPrice)
mBackdrop.animate().alpha(0f)
entry.notification.clone()
!entry.cacheContentViews(mContext,notification.getNotification())
patient.getIdentifiers().size() == 1
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
pieces.length <= wordColumn
fraction * (nextValue - prevValue)
mIam.getStackInfo(WINDOWING_MODE_UNDEFINED,ACTIVITY_TYPE_STANDARD)
telephony.isIdle()
LogDelegate.createLog(name)
data.metadataRowMeta.getString(rowData)
Mockito.verify(mRMClient).start()
AnnotatedElementUtils.getAnnotationAttributes(controllerType,annotType)
target.getDestination()
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
selenium.isVisible("link=Control Panel")
targetDescription.getClassName()
telephony.getCdmaEriIconIndexForSubscriber(subId)
annotation == OriginalType.MAP
are("resource1-reflections.xml","resource2-reflections.xml","testModel-reflections.xml")
GL20.glGetActiveAttrib(program,index,256,typeTmp)
delegate.open(filename,grabSize,idType,highId,maxId)
graphVersion.incNodeVersion()
clearRefreshableViews()
canTakeAccessibilityFocusFromHover()
List<String>
keyClass(NullWritable.class)
logger.error("An exception occurred while parsing a date : '{}'",e.getMessage())
masm.add(64,resultRegister,zr,resultRegister,AArch64Assembler.ShiftType.LSL,encoding.shift)
ohCache.size()
passThruFields != null
sentBytesCnt.intValue()
SpatialIndexPartReader<NativeSchemaValue>
((BCECPrivateKey)privKey).getS()
new TrustException("DERIVED_KEY_ERROR",LOG,e)
c * b
RexUtil.simplify(rexBuilder,node)
requestHeader.mConnectionID != null
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(24)
setSDesEncryptionToDescription(mediaType,description,null)
directoryUrl.getParameter(Constants.GROUP_KEY)
endPos < paraEnd
state.value == rotationLocked
assertEquals(3,StringUtil.countMatches(drl,"import "))
reply.getJMSMessageID()
bean.getCollectionCount()
getService().animateCollapse()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
localSettings.getMaxConcurrentStreams() > activeRemoteStreamCount.incrementAndGet()
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
new IterableAlgorithmRunner(blockScanner,40000)
MAX_ERROR_RETRIES_DEFAULT=20
assertEquals(12,tokens.size())
commitLock.lock()
new Date(0)
new ConnectionError(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR)
c * b
new StepMeta(log,stepnode,transMeta.getDatabases(),transMeta.getCounters())
volume.getMtpReserveSpace() * 1024 * 1024
mUserPaddingStart >= 0
subscriptionSender.setContextAttributes("[$ENTRY_ID$]",entry.getEntryId(),"[$ENTRY_TITLE$]",entry.getTitle(),"[$ENTRY_TYPE$]","[$ENTRY_URL$]",entry.getUrl(),"[$PORTLET_NAME$]",LanguageUtil.get(locale,(entry.isAlert() ? "alert" : "announcement")))
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
logger.info("--> checking snapshot status for all currently running and snapshot with empty repository",blockedNode)
!isPartialResponse(message) && callback == null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)
? super Void
@TruffleBoundary private static Boolean parseBooleanOrNull(String s){   if ("true".equals(s)) {     return Boolean.TRUE;   }  else   if ("false".equals(s)) {     return Boolean.FALSE;   }  else {     return null;   } } 
Double.parseDouble(value)
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]))
definition.getPortTypes()
request.getServletPath()
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
v.layout(viewTop,viewLeft,viewLeft + viewWidth,viewTop + viewHeight)
mAbsListView.getPositionForView(childView) == position
checkPojoMetaClass()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
h.addParameters("--name-status","--no-abbrev","-M","--pretty=format:" + COMMITTED_CHANGELIST_FORMAT,"--encoding=UTF-8",revisionName,"--")
owner.getEnergyUsage()
DfsSearchResult.plusOne(stats.totalTermFreq())
pw.println(ps.getInstantApp(user.id))
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
mConnector.execute("volume","format",vol.id)
Throwable e
Log_OC.e(TAG,"Canceling all syncs for " + MainApp.getAuthority())
is(true)
assertEquals(adjustedInvoice.getAmount().compareTo(BigDecimal.ZERO),1)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
isPersistent
randomAlphaOfLengthBetween(1,20)
peekServiceForUserLocked(userId)
retriever.captureFrame()
getTtsVoiceUsed()
new DbTests()
getInt(DISPLAY_OPTION,0)
INGORE("ignore")
sm.getString("namingContext.nameNotBound",name.get(0))
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
mFile.getPath()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
3 * 1024 * 1024
loaded.getLoaded().getConstructor()
log.warn("Can't set auto-commit state: " + e.getMessage())
getSelectedColor(ctx)
Object strongReference
aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
new IllegalStateException()
IndexReader.open(benchmark.getRunData().getDirectory(),true)
Slog.wtf(TAG,sb.toString())
pctx.evaluateActionQueue(workingMemory)
update(bytes)
readdirCacheBuilder.maximumSize(maxStats)
selenium.isVisible("link=Control Panel")
DEBUG=true
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
new LeftTuple(f1)
element.getName()
mService.publish(clientId,publishConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,true,callback,clientId))
_isNegInf(text)
readIf("READ")
file.exists()
intent.putExtra(EXTRA_THEME,1)
tests.add(clazz.getGenericsTypes()[0].getType())
i < count
!virtualHostname.equalsIgnoreCase(_LOCALHOST)
Helpers.msgShort(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
dir.getPath()
cv.visitVarInsn(ALOAD,resultIdx)
new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration))))
activityNdx < topActivityNdx
z.muli(activationDerivative)
ViewConfiguration.getDoubleTapTimeout()
merge4dCnnData(featuresToMerge)
selenium.isVisible("link=Control Panel")
trimmedLine.endsWith(delimiter)
/**   * The number of public elements in this segment's region.   */ private final LongAdder pubSize=new LongAdder(); 
DEFAULT_MAX_METHODS=999
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).description(message)
sqlRouteResult.getSqlParsedResult().getSqlType()
blog.getRemoteBlogId()
platformVersion < MNC
JDBCUtils.safeGetString(dbResult,"id")
am.blockingGetAuthToken(account,AccountTypeUtils.getAuthTokenTypePass(account.type),false)
OrderException.class
this == group.mInternalConnection
@Override public synchronized AstyanaxOrderedKeyColumnValueStore openDatabase(String name) throws StorageException {   if (openStores.containsKey(name))   return openStores.get(name);  else {     ensureColumnFamilyExists(name);     AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy);     openStores.put(name,store);     return store;   } } 
Flavor flavor
versionTargetGraphMode.toString()
deferUpdateBounds(RECENTS_STACK_ID)
new Rect(left,top,bottom,right)
new Paint(Paint.ANTI_ALIAS_FLAG)
DEBUG_STARTING_WINDOW_VERBOSE || true
event.isHidden()
child.resetResolvedLayoutDirection()
assertEquals(expectedPlan,actualPlan)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
-120
mContext.startActivity(cantAddAccount)
map.put(entry.getKey(),valueToString(joiner,entry.getValue()))
dateFormatter.format(value)
IBinder.FIRST_CALL_TRANSACTION + 64
IOException e
minSlot > 1
POSITVE_Y(2)
Float.valueOf(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
executeKeywords.length > 0
command.getNewName()
DBCException e
file.getVirtualFile() != null
Exception exception
Assert.assertEquals(_VALUE_2,_recordCacheListener._value)
state.value == rotationLocked
lastPosition != null
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
id=19903
!TextUtils.isEmpty(library.getLibraryWebsite()) && !TextUtils.isEmpty(library.getRepositoryLink())
Timber.w(e,error)
Log.w(TAG,"Session failed to close due to remote exception",e)
config().getInt(BASE_PATH + "tolerance")
contains(getModifiers(),modifier)
11 * ClassSize.REFERENCE
mock.setMinimumResultWaitTime(1900)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
TestSuiteEnvironment.getServerAddress()
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
SiteAdminWebUpgrade.class
fileShortcut.getToTitle()
TestPackage.foo(a,1,"1","!")
new Float(((Integer)value).intValue())
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).contextStart(withUser)
Thread.currentThread().interrupted()
new GroupTest(true)
id=11100
subModule.add(persistencePackage)
@SuppressWarning("unused")
new CompilerException(sourceName,e.line,e.getCause())
String.format("Keyspace mismatch (found %s; expected %s)",cf_def.keyspace,tableName)
DISPLAY_TASKS_PORTRAIT + 2
mState == STATE_UNINITIALIZED
username.length()
hour != 0
button.buttonGroup()
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
!Strings.isNotBlank(newPassword)
runAllTasks()
mWM.isKeyguardSecure()
mAvailableSessionKeys == null
dynamicType.getConstructor()
Long.valueOf(row.getValue(partitionCol).toString())
obtainMessage(MSG_TIMEOUT,state)
RecentsVerticalScrollView.super.removeViewInLayout(view)
docker.createContainerCmd("busybox")
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
MATCH_SYSTEM_ONLY | MATCH_DISABLED_COMPONENTS
containerLats.length - 1
CompactionIterable.class
Util.convertDpToPixel(dataSet.getBarBorderWidth())
((ExecutorService)executor).isShutdown()
selenium.isVisible("link=Control Panel")
broker == null
Boolean.valueOf(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
getPlayerPosition().z
compensationRange.inRange(compensation)
wrapper.shutdownNow()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
TypesUtil.isAssignable(ltype,component,expression)
"".equals(format)
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
encoderLayerSizes == null
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
JOINER.join("java_binary(","    name = '%s',","    srcs = glob([ 'com/example/generated/*.java' ]),","    main_class = 'com.example.generated.Main',","%s",")")
RouteContext key
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
dis.read(serializedData,0,length)
new FileInputStream(engineSocket.getFileDescriptor())
a == null
Nd4j.createUnitialized(forwardPassShapes[i])
specFactory.createInputFilesSpec(value,RUNTIME_INPUT_FILES_VALIDATOR)
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } 
new HotSpotDebugConfig(GraalOptions.Log,GraalOptions.Meter,GraalOptions.Time,GraalOptions.Dump,GraalOptions.MethodFilter,GraalOptions.LogFile)
profile.getMinimumInstances()
converter.convertTo(rightValue.getClass(),leftValue)
Drawable.scaleFromDensity(sourcePadding.top,sourceDensity,targetDensity,false)
new UDFArgumentTypeException(2,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
value.toLowerCase().contains(constraintLowerCase)
retVal.put(p.getKey(),p.getValue())
SampleCacheApplication.class
ByteBuffer.allocateDirect(4)
TelephonyManager.getDefault().getPhoneType()
mSkipWebLineCount=1
op == ASSIGN
mPlayPause != null
mForgotPatternButton.getVisibility() == View.VISIBLE
args.getInt(KEY_GID,-1)
path(11)
(Long)24503500L
attribute.getDefinition().getAttributeMarshaller()
field.hasNameIndex()
logger.info("[v] Unsecure sync completed")
type.getConstructor()
new UnsupportedOperationException()
return 0; 
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
new EnterSelectionDialog(shell,props,CalculatorMetaFunction.calcLongDesc,Messages.getString("CalculatorDialog.SelectCalculationType.Title"),Messages.getString("CalculatorDialog.SelectCalculationType.Message"))
Internal.prefixKeyWithSalt(key)
mInputConsumer == null
filePath.toFile()
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL)
configureWriteBufferForRead()
ArrayList<String>
scope.getLocalVariable(name)
sonarQubeIsUpWatcher.waitForLog(10,TimeUnit.SECONDS)
mValues[7]
log.error("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,1)
SammonMapping.class
descriptorParser.parseMetaData(parserSettings,moduleDescriptorFile)
Observable.concat(_getCachedData(),_getFreshData())
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
Object edge
t instanceof ThreadDeath
read=0
fraction * (nextValue - prevValue)
new Paint()
assertThat(stack.selectChangelog("ISSUE-1")).isNull()
Thread.sleep(500)
swipeVertical
file != null
activityNdx < topActivityNdx
role.getChatUser().getAddress().toBareJID()
resources.getDimension(R.dimen.close_handle_height)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
mMat[9]
registerError(expression)
IllegalStateException e
component.getSource()
new MediaDriverReceiver(toClientReceiver)
new Paint(Paint.ANTI_ALIAS_FLAG)
new SimpleDateFormat(format)
PsiTypesUtil.isDenotableType(substitutor.substitute(typeParameter),typeParameter)
selenium.isVisible("link=Control Panel")
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null)
startNode != null
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicatesFromBases.kt")
AssetCategoriesNavigationWebUpgrade.class
mService.mAppTransition.isReady()
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
new ProtocolException()
origin.realComponent().doubleValue() > other
ChronicleEngineEnpoint endpoint
scrollWebElementIntoView(webDriver,webElement)
EqualityComparer<T>
new ThreadPoolExecutor(0,5,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>())
result == Byte.MAX_VALUE
loaded.getLoaded().getConstructor()
from > to
case 4: 
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
hasFocus()
popupWindow.setWidth(menuWidth)
chatPanel.getChatStatusIcon()
id=15846
data != null
isAssignableFrom(supertypeName,iface,cl)
uri.getAssetName().toString()
LOG.error("register druid-driver mbean error",ex)
new InetSocketAddress(0)
c == Short.class
builder.field(Fields.LARGEST,rejected)
pb.setProcessListener(pBmpHandler)
typeSettingsProperties.toString()
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
logger.info("attempting reconnect")
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
disableForUser(what,token,pkg,mCurrentUserId)
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,30_000)
start < 0
policyFlags & SCAN_NEW_INSTALL
view.getZoom()
tracesFile.mkdirs()
transaction.commit()
10 * 1000
type.getConstructor()
String channel
0 - originY
ColorResources.getColor("buttonGradientDark")
HBaseConfiguration conf
maxInvocationCountObservedDuringWarmup * 1.2
value={StringFilterAggregator.class}
ReferencesSearch.search(method,method.getUseScope().intersectWith(myRules.getSearchScope()),true)
/**   * {@inheritDoc}  */ @Override public Object clone(){   ObjectProperty p=(ObjectProperty)super.clone();   p.value=value;   return p; } 
gatherDisableActionsLocked(userId)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
dynamicType.getLoaded().getConstructor()
createFromResourceStream(res,value,is,srcName)
next.getElementType() == ElementType.WHITE_SPACE
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
"sort: " + fileName + " "+ referencePackagePath
MenuInflater.this.getClass()
parameters.length == 2
Group other
mApplicationObject == null
telephony.isIdle()
new OptionValue<>(30.0D)
mService.mDisplayContents.get(displayNdx)
a.getFloat(attr,0)
JettySolrRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders).jetty; 
isClassNameIdSpecified(classNameId,getRequiredClassNameIds())
descriptor.getKind() != ClassKind.TRAIT
rm.add(new QueryPath(cfName,cosc.super_column.name,column.name),column.value,column.timestamp)
ViewWSRPClickToInvokeResouceServingPhaseRDPTest.class
getFragmentManager().beginTransaction().add(R.id.content_frame,fragment,CATEGORY_TAG)
klass.getDeclaredFields(false,declaredFields)
_buf.position() - start
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
new Paint(Paint.ANTI_ALIAS_FLAG)
(((Map<String,Object>)argsEl)).get("hit") instanceof String
line.startsWith("ProGuard, version") || line.startsWith("Reading ")
ev.mTimeSamples.length < NT
new StringPreference("map_underlay",null,true)
private PostgreServerExtension serverExtension; 
Thread.sleep(5000)
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
ArrayList<>
assertMockEndpointsSatisifed()
mClocks.elapsedRealtime()
i <= tupleType.getElementCount()
mSyncStatus.get(i)
StringUtil.toString(extensionArray)
new RunAutomaton(automaton)
child.resetResolvedLayoutDirection()
public class PrivateKeyJwsSignatureProvider implements JwsSignatureVerifier {   private PrivateKey key;   private SecureRandom random;   private AlgorithmParameterSpec signatureSpec;   public PrivateKeyJwsSignatureProvider(  PrivateKey key){     this(key,null);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  AlgorithmParameterSpec spec){     this(key,null,spec);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  SecureRandom random,  AlgorithmParameterSpec spec){     this.key=key;     this.random=random;     this.signatureSpec=spec;   }   @Override public byte[] sign(  JwtHeaders headers,  String unsignedText){     try {       return CryptoUtils.signData(unsignedText.getBytes("UTF-8"),key,Algorithm.toJavaName(headers.getAlgorithm()),random,signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js")
new UnsupportedOperationException()
dw != mBackgroundHeight
_matcher.group(2)
zController.sendData(doRequestStop())
temp.reAddLeft()
mLocalDirtyRect.setEmpty()
Integer.valueOf(topStr)
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)
new Duration(2,SECONDS)
Lists.newArrayList()
httpResponseCode == 204
CodegenUtilKt.calcTypeForIEEE754ArithmeticIfNeeded(expression,bindingContext,context.getFunctionDescriptor())
InternalHandlerSettings.class
sm.getString("aprListener.tcnValid",major + "." + minor+ "."+ patch)
/**   * An SQL dialect for Postgres 9.4 and later. Adds support for various date and time functions  */ public class PostgreSQL94Dialect extends PostgreSQL92Dialect {   /**   * Constructs a PostgreSQL94Dialect  */   public PostgreSQL94Dialect(){     super();     registerFunction("make_interval",new StandardSQLFunction("make_interval",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamp",new StandardSQLFunction("make_timestamp",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamptz",new StandardSQLFunction("make_timestamptz",StandardBasicTypes.TIMESTAMP));     registerFunction("make_date",new StandardSQLFunction("make_date",StandardBasicTypes.DATE));     registerFunction("make_time",new StandardSQLFunction("make_time",StandardBasicTypes.TIME));   } } 
target.getContext().isIncluded(nodeName)
result.toSecondOfDay()
allCramTags == null
new UpgradePermission()
oconf.getJSONObject("rev").getInt("fuzz")
assertEquals(avDegree,1.0)
getDefaultLayout(groupId,privateLayout)
fragment.getEndOffset()
context == null
parseRobotsTxt=false
mHandler.removeCallbacks(pae)
Math.sin(Math.PI / 8)
counter >= max
config.getProperty("peer.p2p.pingInterval",5L)
Double.valueOf(param.getValue())
mapLayerConfiguration.setOpacity(((float)cachedOverlayTransparency) / 255.0f)
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
super(name,false,new DebugValue(name + "_Flat",true){   @Override public String toString(  long value){     return valueToString(value);   } } ); 
argumentsAreTabular(arguments) == 2
signedResult.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
new ObjectMapper().reader(Map.class)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
(Params)in.readOptionalNamedWriteable(PersistentTaskParams.class)
mService.oneTouchPlay(getCallbackWrapper(callback))
new HashMap<K,CacheObj<K,V>>(capacity + 1)
Boolean.valueOf(params.get(name))
selenium.isVisible("link=Control Panel")
n.extras.getString(Notification.EXTRA_TITLE)
Instrumenter instrumenter
memoryReservation.getAndAdd(bytes)
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
_freemarkerEngineConfiguration.getResourceModificationCheck()
cfs.getSSTables().size() > 1
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).description(message)
equalTo("cookieManagerShared")
externalCacheDir.getPath()
targetInfo != null
result.assertJson(this.getClass(),"search_debt_rules_sticky.json")
version > 0
UserHandle.getCallingUserId()
client.get(getAbsoluteUrl(url),params,responseHandler)
op.getIDLName()
pull(remote)
((DartUriElement)parentParent).getUriStringAndItsRange().second.getEndOffset()
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).description(message)
ai.uid <= Process.FIRST_APPLICATION_UID
jmsConfig.getReconnectPercentOfMax()
TypeScriptNodeClientCodegen.class
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
dispatchUpdatePluginAction()
mLabelView != null
mHomeStack == null
testConsumerConfig()
syncOperation.delay == 0
addKeys(externalClasses,DATE,"org.joda.time.LocalDate")
complete.expectedBodiesReceived("finish","stop","faulted","except")
FileUtil.toFile(u)
telephony.getDataNetworkTypeForSubscriber(subId)
Objects.isNull(value)
service.asBinder().isBinderAlive()
expectation.getTimeToLive()
PsiReplacementUtil.replaceExpression(expression,newMethodCallExpression.toString(),false)
EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)
isFetchActive=false
currentlyProcessing.addCallback(callback)
@Console
c.deactivate()
strings.length == 5
publishProgress(progress,max)
_log.error(sb.toString())
return key; 
Object key
node.getStringValue()
(Short)array[this.index]
deltaY > 0
newVarcharColumnDefBuilder().setColumnName("b_qualifier").setLimit(3)
Throwable t
ddmTemplateModel.setResourceClassNameId(structureId)
chargeUAh > 0
alterStatement.getUpdateColumns().put(newName,oldDefinition)
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
mock.expectedMinimumMessageCount(3)
return true; 
result.ocFile.getMimetype()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).description(message)
map.put(entry.getKey(),valueToString(joiner,entry.getValue()))
current != null
onEvaluateInputViewShown()
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
loaded.getLoaded().getConstructor()
Character.isLetterOrDigit(buffer.charAt(i))
loader.startInternal()
new EnterSelectionDialog(shell,props,files,Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogMessage"))
JSRootConfiguration.getInstance(getProject()).storeLanguageLevel(JSLanguageLevel.JS_1_7)
mock.expectedBodiesReceived("Hello World")
added.isEmpty()
ParallelStreams::sequentialSum
sm.getString("serverContainer.duplicatePaths",path)
lastPos != mTargetPos
Flavor flavor
bitmap == null
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
serialVersionUID=1982914918
AUTH_TYPE_DIGEST.equals(this.authType)
new NotificationCompat.Builder(context)
Collections.emptyList()
s.contains("://") || s.startsWith(MAILTO_PREFIX)
line.startsWith("##")
getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
new Parameter(new IdentifierImpl(parameter.getName()),typeToType(parameter.getType(),ConverterUtil.isAnnotatedAsNotNull(parameter.getModifierList())),false)
OfferDeliveryType.AUTOMATIC == deliveryType
mNwService.getInterfaceConfig(mInterfaceName)
queryIdsSnapshot.remove(deadQuery)
HashMap<DeclarationDescriptor,EnclosedValueDescriptor>
return CTR; 
config.swapBones()
psiElement().afterLeaf(".")
event.getY()
LOG.info("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
new SafeTextModel(Mode.relaxed)
mVectorState == null && mVectorState.mVPathRenderer == null
new AccountInfo(mtGoxAccountInfo.getLogin(),MtGoxAdapters.adaptWallets(mtGoxAccountInfo.getWallets()))
TValue
Arrays.asList("bool","qint32","qint64")
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
request.mConnectionID != null
metadata.getFaceRectangles()
factory.lookup(DefaultBroadcaster.class,id)
logger.warn("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
Boolean.valueOf(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
assetUri.getAssetName().toString()
newDefaultSubIdObj.equals(mDefaultSubId)
public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
selenium.isVisible("link=Control Panel")
target.getAddress() == null
public String comment() default ""; 
!inventory.getStackInSlot(i).isItemEqual(stack)
Maths.logisticGradientValue(rating)
sharedElements.remove(localName)
chargeUAh > 0
dest.writeLong(mSubId)
indexService.getQueryShardContext()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
return false; 
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
value < minimumValue
-10
three.setCoordinateIndex(LEAF)
mLayerType == LAYER_TYPE_SOFTWARE
!current.hasAccuracy()
Long.valueOf(subSecs)
removedGenerator.isAssignableFrom(next.getClass())
bodyParts != null
fingerId == 0
mListener.onInputUpdated(inputId)
_extensionsMap.put(mimeType,extensions)
DataStream<OUT>
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
out.getVersion().onOrBefore(Version.V_1_4_0)
type.getConstructor()
public QueryRunner printPlan(){   printPlan=true;   return this; } 
cs[c].set0(r,(int)(rng.nextDouble() * _createFrame.factors))
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValue()
args.length < 2
mService.setUidPolicy(UID_A,POLICY_NONE)
dest.writeLong(mSubId)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
selenium.isVisible("link=Control Panel")
randomSize=false
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
tenantApi.uploadPluginConfiguration(pluginConfig,pluginName,requestOptions)
enabled=false
/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ Object load(Object key); 
GlobalSearchScope.projectScope(getProject())
"Content-Type".equals(name)
CreateOptions.class
optional.isPresent()
CHECK_PKGNAME=false
ranges == null
Executors.newScheduledThreadPool(0)
isExpanded()
getEffectiveCleartextTrafficPermitted()
dest.writeLong(mTxPower)
Arrays.asList(TYPE_INTEGER,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING)
psiTypeParameter.getText()
str.length() == 0
TIMEOUT=3000
delegate.writeEmptyElement(prefix,namespaceURI,localName)
parent instanceof PsiReturnStatement
log.info("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
selenium.isVisible("link=Control Panel")
Assert.assertEquals(118L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
_buildTemplateWithGradle("freemarker-portlet","freemarker-dependency-management","--dependency-management-enabled","true")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
LOG.error("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
new String(bytes)
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
ConfigPropertyVetoExceoption ex
target.getDestination()
toolchainType != null
Element.F64(mRS)
handoffExecutor == null
new Exception("This code called statusNotice(null)")
IllegalStateException.class
CHECK_PKGNAME=false
settings.readLPw(null)
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port))
params.getSimulatePlatformVersion()
void execute() throws Exception ; 
new DisappearAnimationUtils(context,125,0.6f,0.6f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
mState != STATE_FINISHED
logger.trace("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
getTestName(true)
inUtc
Boolean.valueOf(resizeableStr)
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().otherwiseIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
selenium.isVisible("link=Control Panel")
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
Thread.sleep(2000)
length=5_000
View divider=new View(mContext); 
new DisappearAnimationUtils(context,125,0.6f,0.6f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
dstCursor != null
actualHeight > reqWidth
public SELF addProgressListener(ProgressListener listener){   operationParamsBuilder.addProgressListener(listener);   return getThis(); } 
myLocalResolve && localProcessor.isEncounteredDynamicClasses()
currentCall == callId
viewable=false
telecomManager != null
file.isDirectory()
loaded.getLoaded().getConstructor()
matcher.matches()
shouldAutoCancel(sbn)
add(comp)
IBinder.FIRST_CALL_TRANSACTION + 64
bits2[1] == false
MeasureSpec.makeMeasureSpec(MeasureSpec.EXACTLY,myHeight)
!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled()
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=1234567890
poolTimeoutMillis < 0
hasCapability(GPS_CAPABILITY_MSA)
wifiConfig.isValid()
password.length() > 0
resourceUrl.getPath()
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
fingerId == 0
sendResourcesChangedBroadcast(true,false,pkgList,uidArray,null)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
thenStore.storeChanged | elseStore.storeChanged
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
javaWriter.emitSingleLineCOmment("foo")
id.getHash()
Integer.valueOf(stackIdStr)
cat.getAllParentCategories().indexOf(cat.getDefaultParentCategory()) < 0
bound == Bound.END
Integer.parseInt(sid[0])
verify(client).bufferAtomicIncrement((AtomicIncrementRequest)any())
channels.toArray()
eq(ethernetIface)
chatButton.setPressedImage(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_PRESSED))
CollectionUtils.isNaturalSortedSet(key.classDef.getMethods())
Exception e
HttpConnectionUtil.getSoTimeoutClient(timeout)
value.getType().getCanonicalName()
stall_till_cloudsize(1)
mode != null
interfaceToImplement.contains(interfaceToImplement)
new KeyEvent(SystemClock.uptimeMillis(),eventTime,KeyEvent.ACTION_UP,keyEventCode,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)
final StringBuffer replacement=new StringBuffer(tag.getValue().getText()); 
parentAccessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
!type.isAnonymousClass() && !type.isInterface()
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
new DatagramDnsQuery(addr,null,1)
selenium.isVisible("link=Control Panel")
convertAnnotation(pkgAnnotation)
Map.Entry<String,OsRealmObjectSchema>
type == BSON.B_GENERAL
typeSettingsProperties.toString()
mContext.startActivity(intent)
mItems.set(toPosition - preItemCount,item)
movementComp.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),state.getPosition(),1.0f)))
LOGGER.warning(e.toString())
sourceSet.getClasses()
asList(DERBY,FIREBIRD,ORACLE,SQLSERVER,SYBASE)
MediaUploadReadyProcessor processor=new MediaUploadReadyProcessor(); 
ON_TOP
logger.warn("Cannot add to group ({})",e.getMessage())
new OneRun(49.8020,9.2470,50.4940,10.1970,125633,2253)
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
mNavigationView != null
Messages.getString("BaseStep.SafeMode.Exception.MixingTypes","" + (i + 1),Const.CR,referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
commState.getBoolean()
new UnsupportedTemporalUnitException("Fields should be either date based or time based")
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
Simple.of(MutableList.class)
leftTuple.setStagePrevious(leftTuple)
bndLanguageProperties.containsKey(languageKey)
length == 0
Map<String,Long>
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR)
public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter,ex)))
currentFactory != null
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))
(byte)0xdf
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
for (EventListener listener : _eventListeners) addEventListener(listener); 
COOKIE_SYNC_MANAGER=true
loaded.getLoaded().getConstructor()
selenium.isVisible("link=Control Panel")
new InterpreterContext("","1","","",null,null,null,null)
i=0
(operations.byteAt(contractType / 8) & (1 << (contractType % 8))) == 0
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
BufferUtil.zeroBuffer(9)
0.1 + (3 * random().nextDouble())
aClass.getManager().getElementFactory().createType(psiClass)
majorVersion <= MSSQL_SERVER_VERSIONS.MSSQL2008
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
out.write(CLASS_CONSTANT_VALUE_TAG)
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,aggregationAnnotation.approximate(),factory)
setupExceptions != null
Const.isEmpty(tablename)
-1544627568
Thread.sleep(5000)
@NotNull Object o
loader.startInternal()
popupWindow.setWidth(menuWidth)
in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)
selenium.isVisible("link=Control Panel")
buildPages.getTypes()
TextUtils.isEmpty(text)
callTimeout=1000
Assert.assertEquals(4,latch.getCount())
super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,false,false); 
BuildConfig.ENABLE_DEBUG_TOOLS && !SettingsUtils.wasDebugWarningShown(this)
var.isClosureSharedVariable()
lastGoodQuery.getQuery()
new StepMeta(log,selstepid,selstepname,(StepMetaInterface)svi)
new HttpPanelResponse(true,extension,httpMessage)
PokemonMetaRegistry.getHightestForFamily(getPokemonFamily())
mLayerType == LAYER_TYPE_SOFTWARE
new MtpManagerMock(getContext())
loaded.getLoaded().getConstructor()
id=15859
adminClient.describeConsumerGroup(groupId)
getOldValue()
Integer.valueOf(topStr)
Throwable ex
Slog.e(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.",ioe)
new Origin(origin,nativeGetUsageForOrigin(origin),nativeGetQuotaForOrigin(origin))
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
revWalk.release()
renditionGroups=new int[0]
mGBDevice.getFirmwareVersion()
filter.getMinPrice()
mHidProfile.isProfileReady()
value.toLowerCase().contains(constraintLowerCase)
a.getFloat(attr,0)
sharedPreferences.edit().remove(PREF_KEY_HIDDEN_DEFAULT_ENGINES).commit()
assertEquals(actualTables,expectedTables)
totalAccounts > 0
new IllegalArgumentException("Remote url " + url + " is invalid. ")
addTest(AB_NEW_LOGIN_YES_GOOGLE,new int[]{1,1,1},new int[]{1,0,0},new String[]{"old-welcome","new-welcome","new-quick-welcome"})
i < DatabaseDescriptor.getIndexInterval()
jp.getFloatValue()
delegate.writeEmptyElement(prefix,namespaceURI,localName)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
selenium.isVisible("link=Control Panel")
logger.warn("[{}] {}",msg)
selenium.isVisible("link=Control Panel")
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS))
Arrays.asList("internal:discovery/zen/fd*",TransportLivenessAction.NAME)
position - dockDividerWidth
a.getFloat(attr,0)
myCachedIntentions.getEditor()
checkManageUsersPermission("getting profiles related to user " + userId)
assertEquals(1,responseBody.get("bucket_count"))
new InstrumentationSpec(FileTypeSet.of(JavaSemantics.JAVA_SOURCE)).withSourceAttributes("srcs").withDependencyAttributes("deps","data","exports","runtime_deps")
selenium.isVisible("link=Control Panel")
annotation.authenticationType()
@JsonProperty("Index") private Integer index=null; 
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
{4,5,5,11,6,5,7,5,11,11}
this.mMesh.preDraw(this.mShaderProgram)
listener.iterationDone(cg,iterationCount)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
bungee.getTranslation("outdated_client")
i < arguments.length
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
resultSet.getDate(1,UTC)
infos.isEmpty()
selenium.isVisible("link=Control Panel")
new RendezvousAffinityFunction()
mAppToken.hasContentToDisplay()
temp_descs.get(i)
VibrationEffect.get(VibrationEffect.EFFECT_TICK)
protected MvcCommandLineState createCommandLineState(@NotNull ExecutionEnvironment environment,Module module){   return new MvcCommandLineState(environment,cmdLine,module,false); } 
"".equals(format)
request.getRequestURI()
incomingConnector.accept(connectEvent,false)
a.willChangeTransformationMatrix()
DiagnosticFactory0<KtIfExpression>
delayMs < 0
config.setProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES,snm.getConfig())
requestTraceFile + ".txt"
callTimeoutMillis=1000
e.getMessage()
ElementUtil.isWeakOuterType(element)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
_validation_metrics != null
jsonObject.get(ERROR_KEY).getAsString()
telephony.getCdmaEriTextForSubscriber(subId)
mock.expectedMessageCount(4)
sLon == null
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
NotReadablePropertyException nre
is.read(data)
cnt < 0
mHorizontals == null
_buildDataJSONFile.getParent()
mergeButton != null
type.getConstructor()
resultAmount.compareTo(fulfillmentAmount) <= 0
Exception e
selenium.isVisible("link=Control Panel")
ai.uid <= Process.FIRST_APPLICATION_UID
Flyway.configure(classLoader).configure(createFlywayConfig(envVars))
@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapBaseTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println("nodeCount = " + nodeCount);     System.out.println("operations = " + operations);     System.out.println("keyCount = " + keyCount);     Config config=new Config();     config.getReplicatedMapConfig("test").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName="test";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key="foo-" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println("---------------------");           System.out.println("key = " + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println("value[" + j + "] = "+ map.get(key)+ " , store version : "+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } 
assertEquals(2,data.size())
logger.getLogger().warn("Failover took:" + (end - start) / 1000000 + "ms")
mTileState
new ActionModeImpl(callback)
System.currentTimeMillis() - lastTimeGPSLocationFixed
from > to
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
obj.getAcceptableTokens()
PortalUtil.getClassNameId(rendererFactory.getClassName())
serviceContext.getModifiedDate()
LOG.trace("Should have transformed " + managedClassName + " but didn't")
configureSwipeToRefresh(savedInstanceState,view)
@Define("tableName") final TableName tableName
0 != mNetworkCapabilities
glyphPositions[i] - x <= x - glyphPositions[i - 1]
(flags & 0x01) > 0
showTetheredNotification(com.android.internal.R.drawable.stat_sys_tether_wifi)
typeSettingsProperties.toString()
Exception exception
mBluetoothHeadset.stopScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
null == mImage
implemetationMethodDescriptors.build()
Assert.assertEquals(result.getReceipt().getEnergyUsageTotal(),52457)
_connector.getResponses("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\nUser-Agent: Mozilla/5.0 (test)\n\n")
socket.closeLatch.await(1,TimeUnit.SECONDS)
rootDir.mkdirs()
new LaserRow(spriteTubeMiddle,0,8,8,8)
checkPlanDoNotMatch(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
type == TokenTypes.CLASS_DEF
console.getStdOut()
width / images.size()
mResourceData[i] != null
type.getConstructor()
original.getKeyProperty("path") != null
!isEventIgnored(event) && !myChangeListManager.isIgnoredFile(event.getFile())
new NotificationCompat.Builder(context,Manager.CHANNEL_ID).setDefaults(options.getDefaults()).setExtras(extras).setOnlyAlertOnce(true)
chooser.showSaveDialog(null)
mQuietEnable
Log.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
Character.toLowerCase(ch)
Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
note1.id()
Files.delete(dir.toPath())
mMncStr == null
legacyModel.isDefined()
field.holder().isResolved()
TelephonyManager.getDefault().getPhoneType()
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false)
preferences.putString("cityAdminLevel",s)
Exception e
RenderingRuleProperty.createInputIntProperty(OBJECT_TYPE)
number == null
css.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
commit.getAuthorIdent()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
mService.getWifiServiceMessenger(mContext.getOpPackageName())
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
vb.getData().clear()
sendKeyUp()
map.putSingle(OAuthConstants.CLIENT_AUDIENCE,scope)
config.getPatterns() != null || config.getPatterns().length() != 0
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
_typeSettingsProperties.toSortedString()
Sets.<Integer>newHashSet()
DEBUG_GESTURES=true
mActiveStreamType == -1
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
batteryService.isBatteryLow()
logger.warn("Cannot add to group ({})",e.getMessage())
mMatchMode=numOfMatchesPerFilter
props.setProperty(JdbcConnectionParams.PROPERTY_URL,url)
getLocationEnabled()
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT
mkdirs(mBaseDir)
Lists.<User>newArrayList(new DefaultUser().setLogin("john").setName("John"),new DefaultUser().setLogin("steven").setName("Steven"),new DefaultUser().setLogin("henry").setName("Henry"))
currentBlog.getRemoteBlogId()
new SQLExecuteTemplate(executeEngine)
Slog.wtfStack(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
mBitmapState.mBitmap.hasAlpha()
getPlayer(server,args,0,true)
assertThat(repo.rules()).hasSize(16)
holder == null
note == null
internalAddPlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
logoArea.setLineWrap(true)
checkPojoMetaClass()
!isUpdateAvailable()
Log_OC.e(TAG,"onSaveInstanceState()")
new float[2]
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while")
new Max()
onRotationLockChanged()
mBitmapState.mBitmap.hasAlpha()
a.getInt(com.android.internal.R.styleable.Animator_duration,0)
selenium.isVisible("link=Control Panel")
event.isCanceled()
false || DEBUG_WALLPAPER
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
SelectTimeZonePacificStandardTimeTest.class
new NeuralNetConfiguration.Builder().layer(new RBM.Builder().dist(new NormalDistribution(1,1e-1)).build())
updateRefreshToken(currentRefreshToken,at)
inputItem.getDescription()
new Long(item.getSeq())
element.getStringValue()
"memberOf".equalsIgnoreCase(attribute.getId())
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
IndexerRegistryUtil.nullSafeGetIndexer(baseModel.getModelClass())
mPositionAnimator.isRunning()
messenger.sendCode(res)
canTakeAccessibilityFocusFromHover()
mGpsListener != null
DEFAULT_HOME_DB_CACHE_COUNT=200
sep < 0
show.isPrivate()
private final View view; 
mResourceData[i] != null
upgradeVersion=36
new IndexSizeExceededException(getOutOfRowsReason())
pageSize > pageCache.pageSize()
Object[]
out.print(indent + "public void setup() {")
lhs.getScore()
mData.hashCode()
this(true,true); 
assertEquals(provider.fetchCount,is(2))
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
gran.next(timeStart)
mState.isAlive()
regSocial * trusterWeightValue * trusterWeightValue
new GridDhtPartitionDemander(cctx,busyLock)
lhs.getScore()
DEFAULT_GROUP_OWNER_INTENT=7
DEBUG_STARTING_WINDOW=true
((WithNode)node).getContext()
typeName.equalsIgnoreCase("Integer")
Response.ok()
JsonObject.createObjectMapper().getJsonFactory()
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
r != null
queryBuilder.appendQuoted(FlowManager.getTableName(table))
super.onOptionsItemSelected(item)
List<DBCException>
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/JavaStaticMethod.kt")
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
timeout=600000
mHandler.removeCallbacks(pae)
loginWindow.showWindow()
expandableView.getActualHeight()
new Histogram(10,100,1000,10 * 1000,100 * 1000)
w / 2
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","case","default")
NFC_UID=1025
note.get_id() != 0
-n2
tm.getProgress()
groupIdProperty.eq(0)
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
this.fs.delete(filePath,false)
new TypeList.Explicit(entryTypes)
nearbyTransportStopRoutes.size() > 0
avatar.init(Screen.dp(56),24)
32 * 1024 * 1024
callElement.toString()
mPowerManager.isScreenOn()
new LongObject(3l,"foobar")
ATLAS_MAP_ENTRY_FIELD_COUNT=4
mWorkerId + BASE_FILE_NUMBER
is(true)
client.getHintArrowTargetType() == HintArrowType.NONE.getValue()
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)))
this.messageService.monoPostAuthorizeBeanFindById(1L).contextStart(withUser)
test("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
selenium.isVisible("link=Control Panel")
@Nullable
StringBuffer buffer=(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey); 
@NotNull JsonValue value
Object node
keyProvider.getAuthKey()
new StringBundler(7)
@NotNull
buffer.rewind()
mNavigationBarView.getPaddingStart()
lp.onResolveLayoutDirection(layoutDirection)
e instanceof MaybePrimitiveExpr && e.hasJavaClass()
defaultListenerAccess != null
user.canAfford(money)
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,true,"cancelAllNotifications",pkg)
TfsShell.convertMsToDate(files[0].getCreationTimeMs())
ISOChronology.getInstance()
source.readInt()
getMeasuredHeight()
new LeftTuple(new DefaultFactHandle(2,"cheese"))
mHandler == null
addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
requestHeader.mConnectionID != null
msg.hasCacheMetrics()
a.getInt(attr,0)
Throwable t2
CharSequence message
hc.testIterationStart(event)
between(1,20)
file.renameTo(newFile)
new EnterSelectionDialog(shell,props,files,"Files read","Files read:")
DDLServiceUpgrade.class
"false".equals(showRelationships)
new RuleMatch(this,1,len,getMessage())
Helpers.exec(j4p,"setProfileOverrides(java.lang.String, java.lang.String, java.util.List)",id,strings)
exp.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval
platformData.get(key)
return false; 
configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
mf.getColumnName()
configurator.setExcludedEntries("*")
new StringBuilder(246)
mPowerManager.isScreenOn()
LOG.error("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"),BuildInfo.BUILD_SCM_REVISION,Key.of(KeyType.STRING,"0","0"),BuildInfo.BUILD_SCM_STATUS,Key.of(KeyType.STRING,"","redacted"))
entry.rxBytes == 0 || entry.txBytes == 0
new IllegalArgumentException("Advertising can't be both connectable and scannable")
ab.get1()
parsedVersion != null
MANAGEMENT_API_MICRO_VERSION=0
dateHeader % 100
s1.isNegative()
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
structuralLock.isLocked()
subject.isEmpty()
JetExpression lhs=(JetExpression)assignment.getLeft().copy(); 
AbstractMethodError e
bc.getExecutorService()
new EnumValidator<Mode>(Mode.class,true,false)
/**   * clockwise   */ CW(1)
Boolean.valueOf(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
params.getSimulatePlatformVersion()
notify()
/**   * This is  {@link SurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.2.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class SurrogateRegisteredServiceAccessStrategy extends BaseSurrogateextendsRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-1688944419711632962L;   private boolean surrogateEnabled;   private Map<String,Set<String>> surrogateRequiredAttributes=new HashMap<>();   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> attributes){     if (isSurrogateAuthenticationSession(attributes)) {       if (!isSurrogateEnabled()) {         return false;       }       return doPrincipalAttributesAllowSurrogateServiceAccess(attributes);     }     return super.doPrincipalAttributesAllowServiceAccess(principal,attributes);   }   /**   * Do principal attributes allow surrogate service access?.  * @param principalAttributes the principal attributes  * @return the boolean  */   protected boolean doPrincipalAttributesAllowSurrogateServiceAccess(  final Map<String,Object> principalAttributes){     if (!enoughRequiredAttributesAvailableToProcess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. There are not enough attributes available to satisfy requirements");       return false;     }     if (!doRequiredAttributesAllowPrincipalAccess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. The principal does not have the required attributes specified by this strategy");       return false;     }     return true;   } } 
assertCompletionVariants(myProjectPom,"2.0.2")
data.getSenderId() != myUid()
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
IndexOutOfBoundsException.class
activePopupHandler == null
ActivityOptions.makeScaleUpAnimation(view,0,0,view.getMeasuredWidth(),view.getMeasuredHeight())
new SslContextBuilder(false)
mDuration >= 0
JsonObject.createObjectMapper().getJsonFactory()
klass.getDeclaredFields(false,declaredFields)
GL11.glTranslatef(0.5F,0.0F,0.5F)
new MailFolder(folders[i].getNewMessageCount(),folders[i].getName(),folders[i].getMessageCount())
SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
refTableName.split("\\.")[0]
quoineTicker.getLastPrice24h()
CommitId
Logger.getInstance(getClass()).warn(e)
constraintSystem.getTypeVariables()
mPathParameterMap != null
new ImmutableShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=4
myCurrentScope.getActiveInspectionProfiles()
super.onPause()
editText.setText(task.getValue(property))
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
retransformsClasses=true
Messages.getString(key,param1,param2)
out.writeLong(sampleCount)
checkManageUsersPermission("getting profiles related to user " + userId)
log.warn("Problem in JSR223 script " + e,e)
TextUtils.isEmpty(credential)
ONE_MINUS_DST_ALPA(7)
params.getSimulatePlatformVersion()
mAuthStatusText=failedStatusText
mWindowManager.removeView(mPopupView)
reducer.getKeyColumnsSet()
engine.execute(query).toString()
mListener.onInputUpdated(inputId)
super.onRequestSendAccessibilityEvent(child,event)
new GenerationException(e)
calendar.getTimeZone().getDSTSavings()
StringUtil.toString(extensionArray)
getDelegate().handle(exchange).otherwise(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
location != null
applicationContext.destroy()
fileName.indexOf('.')
file.getLocalFile()
new ScriptField_Point(mRS,PART_COUNT,Allocation.USAGE_GRAPHICS_VERTEX)
helper(ans,comb,k,i + 1,n - i)
new SQLExecuteTemplate(executeEngine)
out.writeInt(mProgress)
mReportDrawNeeded=true
new TextPaint(Paint.ANTI_ALIAS_FLAG)
EVICT_ALL + 1
telephony.iccTransmitApduBasicChannel(subId,cla,instruction,p1,p2,p3,data)
dockedBounds.left - adjustment
lastGoodQuery.getQuery()
date.getTime()
localMessage == null
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.installerPackageName,null,pkgSetting.name,null)
customReportContent != null
MAX_PERCENT_DIFFERENCE=0.1
localScale.addLocal(scale)
pkgs.get(i)
parcel.readCharSequence()
new Error("type=" + type)
ReflectionUtils.invokeMethod(httpClientConnectCallbackMethod,httpClient,listener,uri,this.undertowBufferPool,worker,options)
receiver.getOuterClass()
UIUtils.createPlaceholder(panel,2)
PRESERVE_WINDOWS
config.enterpriseConfig != null
logger.debug("myq ReturnCode: {}",returnCode)
TelephonyManager.getDefault().getPhoneType()
new RebalanceStealInfo(0,(int)Math.random() * 5,partition,Arrays.asList("testStoreName"),(int)Math.random() * 3).toString()
mapConfig.getTotalBackupCount()
Key.class.getCanonicalName()
GlobalSearchScope.projectScope(getProject())
witnessCapsule.getAddress()
DumpUtils.checkDumpPermission(mContext,TAG,pw)
resource.terminate(input.getId(),extractorId)
user.getSystemId() == null
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
getLogger().error("Unknown classloader [IAE]: " + e.getMessage())
desc.getMessagingVersion()
replacement instanceof PsiStatement && !(replacement.getLastChild() instanceof PsiJavaToken)
result.setDataEncoding(st.getResponseSOAPContext().getContentType())
nsDescriptor.getAttribute(localName,namespace)
mMenu.getVisibleItems()
limit == 0
Boolean.valueOf(resizeableStr)
new TaskData(true)
BeanParamUtil.getInteger(user,actionRequest,"suffixId")
WindowedValue.valueInEmptyWindows(4,PaneInfo.NO_FIRING)
new WorldPoint(1428,3864,0)
protected OSGIConfigProperties configProperties; 
"Unknown id: " + mCurMethodId
m.set[i]
unfinishedVerificationHere()
compare(leftValue,rightValue) < 0
Foundation.NSLog("[error] " + tag + ": "+ message)
PlatformPatterns.or(psiElement().withParent(PsiExpression.class),psiElement().inside(PsiClassObjectAccessExpression.class))
telephony.getCdmaEriIconModeForSubscriber(subId)
Math.min(1,amount)
logger.trace("{} is already cancelled",impl.uuid())
mSyncStatus.get(i)
selenium.isVisible("link=Control Panel")
relatedProduct.getProduct()
this.serviceRpcServer.addProtocol(HAServiceProtocol.class,this)
document != null
Lists.newArrayList("timestamp","source")
quoineTicker.getLastPrice24h()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Locale.getDefault().toString()
store.setConfigPath(usersFile)
Integer.valueOf(stackIdStr)
Matrix.setIdentityM(mMatrixNight,0)
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT)
mSyncStatus.get(i)
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))
Long.valueOf(subSecs)
Throwable e
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).errorStrategyContinue()
mMccMncs != null
Slog.e(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
_freemarkerEngineConfiguration.getResourceModificationCheck()
moduleFileIndex.isInTestSourceContent(fileOrDir)
new RuntimeIOException(e)
STATUS_DRAW=0x2
Foundation.NSLog("[error] " + tag + ": "+ message)
fileChooser.setSelectedFile(defaultSelection)
new int[101]
(Node)container
new CamelExchangeException("JettyClient failed with state " + exchangeState,exchange)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
this.thrown.equals("File must exist")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
Long.valueOf(value)
Boolean.valueOf(resizeableStr)
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
intermediateArtifacts.strippedSingleArchitectureBinary()
allGroupingColumns.isEmpty()
mPressFooterView != null
String key=(String)next.getKey(); 
_buildTemplateWithGradle("npm-isomorphic-portlet","isomorphic-dependency-management","--dependency-management-enabled","true")
removedTerrains.remove(tq)
mActiveAgents.remove(info)
PsiTreeUtil.getParentOfType(e,PyTryPart.class,true)
DEFAULT_ROW_FLUSH_BOUNDARY=500000
expandableView.getActualHeight()
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
listeners.preExecute(context)
DEBUG_ALL || false
data != null
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
Thread.sleep(3000)
_connector.getResponses("GET /foo?status=206&data=42 HTTP/1.0\n\n")
dest.writeLong(mSubId)
buffer.putInt(0x1)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
List<String>
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
findCodecForFormat(false,format)
bindings.get()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
new Paint(Paint.ANTI_ALIAS_FLAG)
pgl.loadFragmentShader(vertFilename)
column.getName()
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"gfxinfo",pw)
GenericAttributeValue<String>
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
ListFragment.class
Item.itemsList[item.itemID].func_82790_a(item,0)
BaseOutputLayerSpace.Builder<RnnOutputLayer>
DumpUtils.checkDumpPermission(mContext,TAG,fout)
GL20.glGetVertexAttrib(index,pname,params)
mSyncStatus.get(i)
Boolean.valueOf(attrValue)
value == Short.class
List<Map<String,Object>>
private void _compareJarFiles(final Path expected,final Path actual) throws Exception {   Files.walkFileTree(expected,new SimpleFileVisitor<Path>(){     @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {       Path fileName=dir.getFileName();       if (_ignoredDirectories.contains(fileName.toString())) {         return FileVisitResult.SKIP_SUBTREE;       }       return FileVisitResult.CONTINUE;     }     @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {       Path relativize=expected.relativize(file);       Path fileInActual=actual.resolve(relativize);       Assert.assertTrue(Files.exists(fileInActual));       return FileVisitResult.CONTINUE;     }   } ); } 
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
Integer.valueOf(stackIdStr)
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName())
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
fmd.getValueCount() == 0
!match && compareCompat
Optional.of(target)
mPulseCallback.onPulseFinished()
buffer == null
deltaY > 0
UIUtil.getParentOfType(JComboBox.class,c) != null
useInternetToDownload.setOnPreferenceClickListener(this)
String.format("Gaussian:  min=%d,max=%d,mean=%f,stdev=%f",min,max,stdev,mean)
builder.createStructureViewModel(editor)
mAdapter.swapDirectory(mFile,storageManager)
buildData.getWorkspaceDir()
y > 11
schemeSpecificParts != null
NotificationColorUtil.calculateContrast(backgroundColor,foregroundColor)
"cache." + name + ".size"
mAms.mWaitForNetworkTimeoutMs=100
ifcg.addr == null
Object edge
TypeMissMatchException e
new ByteSizeValue(1,ByteSizeUnit.BYTES)
conf.getSearchBaseURL()
target.getDestination()
socketWrapper.getWriteTimeout()
items[31]
log.error("Couldn't find style: " + styleId)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mPendingImageUris.iterator()
totalLength / 100
final DomAnchorImpl parent
new UnsupportedOperationException("Command not found in spout message: " + shellMsg)
ProxyOutputStream.amountTransfered.getAndSet(0) / 1000
mHiddenForOtherReasons=false
mPowerManager.isScreenOn()
!traceIds.isEmpty()
value.toLowerCase().contains(constraintLowerCase)
!Utils.isRawValue(value)
HttpHeaderValues.IDENTITY.equals(targetContentEncoding)
new BinaryWebSocketFrame(payload)
ipnbFilePanel.getSelectedCell()
IndexReader.open(dir,true)
realm.assertThread()
mAttachInfo == null
immediate=false
private GenericSendAndRecieveGateway gateway; 
enchantments.putAll(stack.enchantments)
iconId <= 0
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodType.ofLoaded(loadedMethodType)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
Throwable e
new IllegalArgumentException("Not implemented")
result.isDigestQuery()
" firstActiveTime=" + lastActiveTime
disableForUser(what,token,pkg,mCurrentUserId)
!isPassword
deltaY < 0
MarketplaceServiceUpgrade.class
ShoppingServiceUpgrade.class
AddPortletChildPageTest.class
Location location
Exception e
HazelcastInstanceFactory.terminateAll()
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
hour != 0
ffmpegExecuteAsyncTask.isProcessCompleted()
mAttachInfo == null
MyModel rawModel=makeModel(); 
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid)
new ObjectMapper().reader(DatanodeAdminProperties.class)
d.slices()
greaterThan(1)
new StringBundler(8)
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
d.setAutoMirrored(true)
modifyList(list,arg)
CellUtil.estimatedHeapSizeOf(c)
isNullOrEmpty(number)
info.crashInfo.stackTrace.length() > 10000
StringUtf8Coder.of()
@NotNull public SoftWrapModel getSoftWrapModel(){   return myDelegate.getSoftWrapModel(); } 
(OneToOneCallPanel)callPanel
resources.getDimension(R.dimen.close_handle_height)
filtersId != null
checkPojoMetaClass()
View.SYSTEM_UI_TRANSPARENT
onEvaluateInputViewShown()
view != null
HttpRequest.put("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
gsonWrappedStack.toJsonTree(inputStack)
String.format(res.getString(R.string.error__upload__local_file_not_copied),((UploadFileOperation)operation).getFileName())
fm.beginTransaction().hide(samples)
selenium.isVisible("link=Control Panel")
targetLocation.x >= hOffset + viewRect.width
typeTreeStruct.embedded()
numConnections=5
loaded.getLoaded().getConstructor()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
findCodecForFormat(false,format)
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l)
CONSTELLATION_TYPE_SHIFT_WIDTH=3
-1
_connector.getResponses("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
params.getBuildTarget()
resultCode == ResultCodes.OK
t3.getSize()
showTooltip == null
transform.setToRotation(new Vector3(1,0,1).nor(),angle)
preMergedCustomer.isLoggedIn()
entry != null
assertEquals(expectedPlan,actualPlan)
routes.IndicesResource().single(index)
{4,5,5,11,6,5,7,5,11,11}
evaluate(123.5,DataTypes.FLOAT)
this.mTileColumns
@Override public final DivideBy on(String sql){   and(sql);   return this; } 
cacheScaled5.setColor(red)
continueUpdateBounds(RECENTS_STACK_ID)
assertRemoveSubsystemResources(servicesA)
dst.limit()
command != null
selenium.isVisible("link=Control Panel")
referenceDatabase.setObjectQuotingStrategy(originalStrategy)
note.addParagraph(AuthenticationInfo.ANONYMOUS)
random.nextBoolean()
port=47505
getLog().info("Compiling Kotlin sources from " + sourceRoots)
getStepIOMeta().getTargetStreams()
equalAny(DefaultKeyword.LIKE)
Log.i(TAG,"releaseInfoLock error",e)
new RuntimeException("Unexpected element value kind in annotation: " + type)
Drawable.scaleFromDensity(sourcePadding.bottom,sourceDensity,targetDensity,false)
rng.nextInt() % 100 + 100
sharedElements.remove(localName)
PropertiesComponent.getInstance().setValue(BOLD_TABS,true,false)
centerButton(mButtonNeutral)
LocaleUtil.getDefault()
AnnotatedElementUtils.getAnnotationAttributes(type,annotationType)
mProducerCounter=TIMEOUT_OCCURRED
"select actionId from ResourceAction where name = '" + oldName + "'"
analysis.getTypeWithCoercions(aggregate)
threadSafe=false
String.format("(\\d{0,%d})(\\.\\d{1,%d})?",integer,fraction)
_buildTemplateWithGradle("form-field","field-dependency-management","--dependency-management-enabled","true")
selenium.isVisible("link=Control Panel")
analysis.getTypeWithCoercions(windowFunction)
!list.append(pi)
PApplet.radians(angle)
Builder<T,B>
logger.debug("NODE {}: App version requested but Version class not supported",this.getNodeId())
schemeSpecificParts != null
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
language.is(knownLanguage)
mService.saveConfiguration()
session.setOffline(true)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
assertEquals(1,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
NoClassDefFoundError onlyIfJUnitIsNotAvailable
request.getIncludeMessage()
builder.add(fileDir).xy(3,1)
-25
OptimisticOptimizations.ALL.remove(OptimisticOptimizations.Optimization.UseExceptionProbability,OptimisticOptimizations.Optimization.RemoveNeverExecutedCode)
Arrays.equals(oldVal,val)
FileSystems.getDefault().canResolveSymbolicLink()
_cameras.get(cameraType)
longSize >= 530
item.setState(new StringType(modeString))
new HumanReadableException(e,"Couldn't get dependency %s of target %s.",buildTargetForDep,buildTarget)
IBluetoothMap.class
selenium.isVisible("link=Control Panel")
getScrollMode(scroll,hasFirstRow,useLimit,queryParameters)
result.getReceipt().getEnergyUsageTotal()
nextTokenIsFast(b,IDENTIFIER)
(long)y & 0xFFFFFFFL
super.onResolveLayoutDirection(layoutDirection)
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(4)
display.getMetrics(dm)
mAdapter != null
tagDataService.getTag(filter.title,TagData.ID,TagData.TAG_ORDERING)
typeSettingsProperties.toString()
Integer.valueOf(attrValue)
result.getReceipt().getEnergyUsageTotal()
DISABLE=true
Context.getProviderService().getAllProviderAttributeTypes(false)
Boolean.valueOf(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
mWindowManager.removeView(mContainer)
assertEquals(15,tokens.size())
totalBytesOnTiers.get(tierAlias) > 0
appendValue(value,sb)
setInitView()
lsize > rsize
format(arguments[i],true)
getFinalRunnable() == null
sendMessage(CMD_STOP_AP)
new ConcurrentHashMap<String,Object>(64)
byteBuffer == null
mHorizontals == null
mData.hashCode()
0.1 + (3 * random().nextDouble())
settings.readLPw(null)
Validator.isNull(body)
MicroblogsWebUpgrade.class
PART_COUNT=800
fileContent.getFileName().indexOf('$') >= 0
getTimeout()
myVMParameters.getComponent().setDialodCaption(myVMParameters.getRawText())
tableHasColumn("CalendarBooking","vEventUid")
savedNetwork.setParameters(newParams)
onDetachedFromWindows()
new HTTPArgument(getArgumentName(),value,true)
loader.stopInternal()
AbstractProjectViewPSIPane.class
keys.isEmpty()
new StringBuilder()
classFilter.getAcceptedIDs()
new int[95]
userId != UserHandle.USER_ALL
noteAcquireWifiLock(wifiLock)
ActionController<CommitId>
new ConstructingObjectParser<>("realm_info",a -> new RealmInfo((String)a[0],(String)a[1]))
file == null
new KsqlEngine(kafkaTopicClient,schemaRegistryClientFactory,clientSupplier,metaStore,ksqlConfig)
SubscriptionItem channelGroupObj=channelGroupSubscriptions.getItem(group); 
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"meminfo",pw)
BeanFactoryUtils.beanOfType(context.getParent(),ConfigClientProperties.class)
RoleLocalServiceUtil.getRole(companyId,name)
cachedMemoryUsageBytes < softMemoryLimitBytes
LinkedHashMap<String,Object>
status != BackupConstants.TRANSPORT_OK
timedOut.await(500,TimeUnit.MILLISECONDS)
myClassName.startsWith("javax.swing")
LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'))
newNode.makeNonIndexable()
msgLog.info(msg,true)
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
mHandler.removeCallbacks(pae)
jvmOptions.setAllJvmArgs(DEFAULT_JVM_ARGS)
material.getUseTickets()
mFinishing && mSupportHardware
_connector.getResponses("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\nUser-Agent: Mozilla/5.0 (test)\n\n")
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase)
checkManageUsersPermission("getting profiles related to user " + userId)
{1,0,0,0,0,0,1,0,0,0}
TfsShell.convertMsToDate(files[1].getCreationTimeMs())
IBackupManagerService svc=mService; 
new IllegalStateException()
editor == null
IOException e
DefaultAtmosphereRequest.newInstance()
ESTestCase.randomAlphaOfLengthBetween(1,10)
s.contains(a.getName())
pageContext.findAttribute("request")
return false; 
assertEquals(1208,trackPoints.size())
msgLog.warn("Exception occurred while setting up store modules. Attempting to close things down.",e,true)
kylinConfig.setProperty(KYLIN_JOB_JAR,path)
Navigation.checkNavigationCategory(undoCategoryList.get(note))
response.getStatusCode()
EnglishUdLas=84.9873
@Nullable
logger.info("Attaching API Key: " + apiKey)
state.mTint != null
mTFS.exists(turi)
fdoProvider.getFdoMode() != FdoMode.OFF
tileBox.getMapDensity()
Localization.lang("Quality")
_typeSettingsProperties.toString()
mVibratorService.vibrate(2000,new Binder())
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
returnTypeOfGetMethod != null
aProject.getTasks().all(captureReportingTasks)
container.lookup(ArtifactResolver.ROLE)
log_lines[9].substring(0,780)
new DefaultConfiguration(new DefaultConnectionProvider(connection),null,null,null,null,null,null,null,null,null,dialect,settings,null)
mock.expectedMessageCount(1)
Log_OC.wtf(TAG,"initFragments() called with invalid NULLs!")
titleTextField.getText()
(int)step + 2
uri.toString().equalsIgnoreCase(future.getURI().toString())
leftTuple.setStagePrevious(leftTuple)
logger.error("failed to create index [{}]",indexMetaData.index(),e)
ByteBuffer.allocateDirect(4)
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE)
Object name
methodExists("of",typeNode)
4 * width * height
Trans == TRANSPOSE
Env.valueOf(env)
SCAN_STATUS_COMPLETE=1
ErrnoException e
previous != null
varX("name")
type.getConstructor()
mRemote.transact(GRANT_URI_PERMISSION_TRANSACTION,data,reply,0)
_freemarkerEngineConfiguration.getResourceModificationCheck()
scopeGroup.isLayoutSetPrototype() || scopeGroup.isRegularSite()
copy1DRangeFrom(0,mType.getCount(),i)
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean")
addContactButton.setRolloverImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
DBG=false
createReactive(config)
minSize(new Fixed(width))
new ArrayList<>()
return false; 
o.getRule().isDefaultOff()
SC_FILE_NAME_EXCEPTION=1002
CharSequence message
count > 1
mock2.expectedMinimumMessageCount(3)
Simple.of(SkylarkNestedSet.class)
MapActivity.launchMapActivityMoveToTop(act)
mergeButton != null
selenium.isVisible("link=Control Panel")
mNoteTypeSpinner.setSelection(position)
FileUtil.toFile(u)
(flags & FLAG_VIEW_ENTERED) != 0
isAllFiles()
companAssetCategory.getCategoryId()
new IndexWriter(dirName,new WhitespaceAnalyzer(),true)
applyFilter()
suiteMethod.invoke(null,(Object[])new Class[0])
tracesFile.mkdirs()
mImageManager.load(holder.mImgAvatarOrBlavatar,imageUrl,null,ScaleType.CENTER)
GridCacheAdapter<K,V>
odi.release()
assertCompletionVariants(myProjectPom,"test","org.apache.maven.plugins","org.codehaus.mojo")
FileCopyPasteUtil.createDataFlavor(DataFlavor.javaJVMLocalObjectMimeType)
Slog.wtf(TAG,"Starting rect for app requested, but none available",new Throwable())
winAnimator.mSurfaceController == null
mMat[6]
wrapper == null
from >= to
tracesFile.mkdirs()
config.isAnimateWater()
fieldDescription.isAccessibleTo(instrumentedType)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
is(3)
p.clearContexts()
isAValuesDirectory(parentFile.getName())
obj.getExp()
CharSequence message
LinkedHashSet<String>
context.getVariableResolver().resolve(bsz)
feedEntryStatusDAO.findUnreadByCategories(children,null,0,1,ReadingOrder.desc,false)
((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
identifier != null
loaded.getLoaded().getConstructor()
getVirtualMachine().versionHigher("1.4")
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
getHeight()
pluginManager.isExecuted()
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
dynamicClassType.getConstructor()
buildVolumeSettingsPendingIntent(vol)
new RoutingControlAction(this,newPath,false,callback)
AssetPublisherWebUpgrade.class
UISettings.getInstance().getShowToolWindowsNumbers()
TelephonyManager.getDefault().getPhoneType()
new CompletionItemCapabilities(false)
index <= next
new ListenerInfo("ajp",server.getLocalAddress(),openListener,null,channel)
y * height
connection.hdel(key)
PATH_ITERATIONS * 50
Thread.sleep(50)
_log.error(ioe,ioe)
(UnsubscribeForm)form
e.getMessage()
selenium.isVisible("link=Control Panel")
values.equals(values[i])
config.getProperty(jailName.toLowerCase()) == null
rs.getString(columnIndex)
settings.readLPw(null)
display.getMetrics(dm)
log.debug("Error while closing command context",exception)
synchronized (this) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
Ddeml.INSTANCE.DdeUnaccessData(hData)
index.sync()
System.nanoTime()
stack.get(stack.size() - 4).longValue()
item(MITHRIL_PLATELEGS)
new Paint(Paint.ANTI_ALIAS_FLAG)
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","strike","strong","sub","sup","u","ul")
target.getParentFile().exists()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
map.addv2(key,map)
yvel == 0.f
this.date=date
leftTuple.setStagePrevious(leftTuple)
Arrays.asList("Java","CSharp")
logger.info("Expanding Jquery Aliases")
final PkgControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
selenium.isVisible("link=Control Panel")
date.getTime()
ONE_MINUS_DST_ALPA(7)
availableLocale.equals(defaultLocale)
parentFile.exists()
state.getTypeMapper().mapReturnType(type)
Arrays.deepHashCode(valSrcQueries)
out.writeInt(mProgress)
mFragments.mCurState < Fragment.CONTENT
targetProject.evaluate()
getName()
new PageException("分页参数不是合法的数字类型!")
mBiometricUnlock.stopAndShowBackup()
success >= 135
mRenderNode.isPivotExplicitlySet()
checkArgument(partitionColumns.size() == values.size())
_log.error(ioe,ioe)
Ln.d("An exception occured during service execution :" + e.getMessage(),e)
id >= allocatedIds.length
request.mConnectionID != null
NetworkParameters.testNet()
case READ_UNCOMMITED: 
socketFile.toString().length() >= 108
loaded.getLoaded().getConstructor()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
Collections.singletonList(EMPTY_PATH_SEGMENT)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
InputProcessor[]
public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
pluginContainer.lookup(ComponentConfigurator.ROLE)
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
simple.getFromSentDate()
setZrtpEncryptionToDescription(mediaType,description,null)
selenium.isVisible("link=Control Panel")
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
CAMERASERVER_UID=1046
agent.getHeader() != HttpHeader.USER_AGENT
mPowerManager.isScreenOn()
telegram.getTimestamp() < currentTime
Integer.valueOf(value)
(flags & FLAG_VIEW_ENTERED) != 0
ReflectUtils.getBeanGetters(target)
new ObjectTagging()
op.z()
highlightInfo != null
assertEquals(table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size(),inserted.size())
MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS=1000
sDefaults.putBoolean(KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL,true)
LOG.error("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
entry.rxBytes == 0 || entry.txBytes == 0
mData.hashCode()
FAILURE_PATTERN.matcher(error)
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
Utils.stackTrace(exception,true)
JSONArray whitelistArray=new JSONArray(mJpSettings.jetpackProtectWhitelist); 
preferences.getString("cityAdminLevel","8")
address.indexOf('?') != -1
Long.valueOf(nfcid2,16)
_log.error(ioe,ioe)
Exception.class
Arrays.asList(RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.BATTERY_LEVEL,RFXComValueSelector.WIND_DIRECTION,RFXComValueSelector.AVG_WIND_SPEED,RFXComValueSelector.WIND_SPEED)
DEFAULT_VERIFY_ENABLE=false
paramTypes[i]
new IndexWriter(dir,new StandardAnalyzer(),true)
POOL_SIZE > 1
m.getClass()
IntentFactory.create(mContext,type,text)
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())
format(elem,true)
eq(ethernetIface)
new NodeHistogram(application,range)
_buildTemplateWithGradle("npm-react-portlet","react-portlet-dependency-management","--dependency-management-enabled","true")
fluid.getBlockID() != 0
is(false)
viewWidth <= 0
converterTemplate(returnConverter)
requestHeader.mConnectionID != null
Integer.valueOf(bottomStr)
Boolean.valueOf(conf.get("mapreduce.job.is-mem-hungry"))
return fileEntry; 
pgl.blendFunc(PGL.ONE,PGL.SRC_ALPHA)
operand instanceof PsiTypeCastExpression
mImm.getInputMethodList()
new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/JavaStaticMethod.kt")
Thread.sleep(1000)
Looper.getMainLooper()
telephony.getCdmaEriIconModeForSubscriber(subId)
new Config()
AbstractMethodError e
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
new SystemException("Unable to communicate with OpenId provider",e)
cg.getUpdater().update(cg,gradient[0],1,batchSize)
/**   * counter-clockwise   */ CCW(2)
image.getRGB(i,j)
assertNull("rt",cfg.resultType)
_vecs[0]
SPEC_REGEN_TICKS=51
new LinkedHashMap<>()
executeDraw()
checkPojoMetaClass()
IndexReader.openIfChanged(reader)
Long.valueOf(val)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
new JpsMavenRepositoryLibraryDescriptor(groupId,artifactId,version)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
providedScope=false
mHotspotBounds.set(left,top,bottom,right)
view != null
str.chomp_bang19(context)
assertEquals(1d / (totalTime / 1000d),calculator.getRate(),0d)
Integer.toString(1)
stack.mStackId != DOCKED_STACK_ID
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
TokenSet.create(ABSTRACT_KEYWORD,ASSERT_KEYWORD,BOOLEAN_KEYWORD,BREAK_KEYWORD,BYTE_KEYWORD,CASE_KEYWORD,CATCH_KEYWORD,CHAR_KEYWORD,CLASS_KEYWORD,CONST_KEYWORD,CONTINUE_KEYWORD,DEFAULT_KEYWORD,DO_KEYWORD,DOUBLE_KEYWORD,ELSE_KEYWORD,EXTENDS_KEYWORD,FINAL_KEYWORD,FINALLY_KEYWORD,FLOAT_KEYWORD,FOR_KEYWORD,GOTO_KEYWORD,IF_KEYWORD,IMPLEMENTS_KEYWORD,IMPORT_KEYWORD,INSTANCEOF_KEYWORD,INT_KEYWORD,INTERFACE_KEYWORD,LONG_KEYWORD,NATIVE_KEYWORD,NEW_KEYWORD,PACKAGE_KEYWORD,PRIVATE_KEYWORD,PUBLIC_KEYWORD,SHORT_KEYWORD,SUPER_KEYWORD,SWITCH_KEYWORD,STRICTFP_KEYWORD,SYNCHRONIZED_KEYWORD,THIS_KEYWORD,THROW_KEYWORD,PROTECTED_KEYWORD,TRANSIENT_KEYWORD,RETURN_KEYWORD,VOID_KEYWORD,STATIC_KEYWORD,WHILE_KEYWORD,TRY_KEYWORD,VOLATILE_KEYWORD,THROWS_KEYWORD,ENUM_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,NULL_KEYWORD)
nodeEngine.getPartitionService()
String value
U extends Identifier
subProperties.put(subName,value)
Math.abs(a.d - b.d) < 1e-3
CompletableFuture<Boolean>
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) == null
defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary
JavaDocTagContinuationIndentationCheck.class
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
((JComponent)c).getClientProperty(CLICK_INFO) != null
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.installerPackageName,null,pkgSetting.name,null)
Slog.wtfStack(TAG_WM,"Leaked dim user=" + user.toShortString() + " state="+ state)
LOGGER.debug("Could not attach file",ex)
displayContent.getDockedStackLocked()
public static XQueryBuilder xquery(File file) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
new Integer(5)
ReflectionUtils.findMethod(user.getClass(),userPropertyToUse)
level < 0
node.getEndColumn()
assertEquals(11,beanCount)
2.0 + (3 * random().nextDouble())
conj == CONJ_AND
this.route(request).map(RouterFunctions::cast).otherwiseIfEmpty(Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))
telephony.isIdle()
buffer == null
Boolean.valueOf(this.getOptional("kylin.query.escape-default-keyword","false"))
anyOf(success(),serverError())
Image.class
activityNdx < topActivityNdx
source.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
mService.getConnectionInfo()
logger.warn("Cannot add group member ({})",e.getMessage())
new ConnectionError(sm.getString("http2Parser.payloadTooBig",Integer.toString(payloadSize),Integer.toString(maxPayloadSize)),Http2Error.FRAME_SIZE_ERROR)
((Activity)getContext()).onBackPressed()
new V(1,new BooleanSetting(Account.DEFAULT_SORT_ASCENDING))
TelephonyManager.getDefault().getPhoneType()
poiParentCategory != null
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
!mWindow.getSharedElementsUseOverlay()
mockRequest.setHeader("Authorization","bearer " + TGT_ID)
from > to
StringBuffer sb=new StringBuffer(); 
log.error("Error parsing command line: " + e.getMessage())
!mMediaPlayer.isPlaying()
super.getLikeProvider(path)
getPolicy().getMaxBinaryMessageBufferSize()
taskName.startsWith(":buildSrc:")
got == possible
new ObjectMapper().reader(Map.class)
size=3
adapter.unregisterDataSetObserver(mObserver)
startMediaTimeUs != START_NOT_SET
insertAfter != null
new Packet(data,0,serializationService.getPortableContext())
counts != null
new BuilderImpl<>(clazz,this::_getNameOrFail,biConsumer,relatedCollectionSupplier)
width - 6
buildHistoryNewItem(pageKey)
EJBException nsee
UsageDetailMode.DETAIL == usageDetailMode
assertEvaluate(buildFile).lookup("txts")
new Fault("COULD_NOT_REDA_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
clazz == null
data != null
getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) & getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) & getChatopsAuthToken().equals(ChatOpsRepo.getChatopsAuthToken())
Double rate
given().contentType(ContentType.BINARY).content(inputStream).when().post("/file")
enclosingHeight - insetBottom
@NonNull
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(14)
metrics.getExecutionTimePercentile(90)
methodName.equals("getUseScope")
getterVisibility=Visibility.NONE
mAccessibilityController.isTouchExplorationEnabled()
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
checkManageUsersPermission("getting profiles related to user " + userId)
blog.getRemoteBlogId()
e.printStackTrace()
myError == null
type.equals("")
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
RedisRunner.startDefaultRedisServerInstance()
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commit()
sendKeyUp()
mContext.checkCallingOrSelfPermission(PERMISSION)
instance2.getLifecycleService().terminate()
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),true,event.mediaModelList,event.successMessage)
configuredScriptEngineNames == null
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
keys.isEmpty()
recycle(true)
new Paint(Paint.ANTI_ALIAS_FLAG)
mode.contains("advent") || mode.equalsIgnoreCase("2")
mThumbPosition <= getThumbScrollRange() / 2
Math.min(1,amount)
telephony.isIdle()
cik * (-puf)
{0,7}
_testUploadPortlet.put(fileEntry)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
assertEquals(2,classLoaderAwares.size())
task.stack != tr.stack
selenium.isVisible("link=Control Panel")
groupVM.getGroupType() == GroupType.GROUP
selenium.isVisible("link=Control Panel")
enabled=false
mWorkerId + BASE_FILE_NUMBER
new MappingValueRename(outputField,outputMapping)
recompile(source,name,cls)
Optional.of(this.servicesManager.findServiceBy(service))
hyphenationFile.toURL()
BiMap<Integer,String>
StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField._TAGS.field())
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
selenium.isVisible("link=Control Panel")
c.deactivate()
public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } 
mHeight <= 0
fingerId == 0
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
event.getY()
reject()
mMncStr == null
languageContribution.isValid(credentials)
userRecord.mClientRecords != null
customer.getUuidId()
selenium.isVisible("link=Control Panel")
ColumnFilter filter
new ArrayList<>()
DEBUG_RC=true
state == SocketState.CLOSED
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
mObsoleteAgents.remove(info)
TreePath path
public TriggerStateMachine withEarlyFirings(OnceTriggerStateMachine earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,false)
mWorkerId + BASE_FILE_NUMBER
ultimateRecyclerView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
LOG.info("Cannot access storage directory " + rootPath)
displayContent.getDockedStackLocked()
block.blockMaterial.isHarvestable()
Response.ok()
Constant.isDailyBuild()
new RuntimeException()
testClass.getName()
new ArrayList<>()
DEFAULT_TETHER_OFFLOAD_DISABLED=0
copticDate.monthOfYear()
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
stationItemName != null
ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,AppleBinaryDescription.class,AppleBundleDescription.class,AppleTestDescription.class,HalideLibraryDescription.class)
60 * 1000
new TypeList.Explicit(entryTypes)
targetElement != null
dic.buildRouterChain(invokers)
source != null
schemeSpecificParts != null
eligible.size() >= allowedSegCountInt
settings.readLPw(null)
block.localsLiveIn.xor(block.localsLiveKill)
myLeftPrecalculated.get(lineRight)
assertEquals("Should have exact number of build phases",3,target.getBuildPhases().size())
_instanceDataManagerConfiguration.getBoolean(DIRECT_REALTIME_OFFHEAP_ALLOCATION,true)
temp_descs.get(i)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).description(message)
tiled != null
mFilesAll.indexOf(file)
LOG.fatal("Cannot run ThriftServer")
InsertFinalStep<R>
shell.run(script.toString(),source,EMPTY_ARGS)
mjCtx.getOldMapJoin() == null
mapper.getJsonFactory()
handlers[0] == null
isAvailable(status)
configurations.create(Dependency.ARCHIVES_CONFIGURATION)
getSelectTableQuery().query()
params.getSimulatePlatformVersion()
o1.getParameterTypes()
me.getComponent() == myCurrentComponent
++polled <= maxResults
assertRestrictBackgroundOff()
nextMapping == null
getAction().name()
FileType.of(".so")
line.split(HgChangesetUtil.ITEM_SEPARATOR)
VCS_BLAME=0
mState != STATE_INITIALIZED
PoolResources.fixed("tcp-client-pool")
logger.debug("Retreiveing door data")
mState.isAlive()
alluxioUri.getPath()
parser.getText()
event.remove(factory.getName())
performDexOpt(packageName,instructionSet,true)
Collections.<IntPair>emptyList()
dstCursor != null
mPathParameterMap != null
(OutputScrapingExecutionFailure)execResult
new WitnessService(appT)
LOG.error("register druid-driver mbean error",ex)
mAdapter != null
mListener.onInputUpdated(inputId)
@Nullable
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
mGpsListener != null
new ChunkUpdater(c,tessellator,worldProvider)
mPowerManager.isScreenOn()
presentation.refreshData(false,false)
oldFlagged=Boolean.parseBoolean(value)
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,true,userId)
FileContentUtilCore.reparseFiles(files)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
widthMode != MeasureSpec.EXACTLY
response.header("location")
new UpgradePortletId()
Data<List<T>>
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()).buildServiceRegistry()
StringUtils.isEmpty(initExpr) ? 0 : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
_typeSettingsProperties.toSortedString()
Integer.valueOf(stackIdStr)
csUseGlobalSearch.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
selenium.isVisible("link=Control Panel")
args.add(this)
inputFuture.cancel(mayInterruptIfRunning)
Response.ok()
builder.appendColumns("4dlu, pref")
details.put(fileName,Long.toString(timestamp))
expectation.getTimeToLive()
MIN_PORT_NUMBER < port
registerMethodCallError(expression,expression)
length <= 0
JvmDeclarationOriginKt.OtherOrigin(myClass,function)
imageView.setBackgroundDrawable(drawable)
new JBossServerCapabilities2()
ServiceLoader.load(ReportInteraction.class)
new Label(this.comboComposite,SWT.NONE)
LOG.info("Getting synchronous method stub from channel")
Simple.of(Boolean.class)
scriptField.setText("")
TypeMirror fooTypeMirror=types.getDeclaredType(fooElement); 
Value emitBitScanForward(Value operand); 
mBackdrop.animate().alpha(0f)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
validateTree()
isListViewFling()
@Specialization(guards="escapingValue == null") protected Object escapingNull(@SuppressWarnings("unused") Object escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return LLVMTruffleObject.createNullPointer(); } 
conditionCache.get(conditionExpression)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).otherwiseIfEmpty(EMPTY_FORM_DATA)
allOf(withContentDescription("drawer open"),withParent(withId(R.id.toolbar)),isDisplayed())
userImpFactor.add(userFactors.row(userIdx,false))
assertEquals(expectedPlan,actualPlan)
mAttachInfo == null
status().isPermanentRedirect()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
_securityHandler.getHandler() == null
Mono.currentContext()
getItemViewType(position)
-2028634701
log.error("Couldn't get font " + fontName)
MultiMap.createSmart()
BlockMasterClient.class
session.createTextMessage()
UnsupportedSchemeException e
this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)
this(dataSource,false); 
DEBUG && okay && mAgent != null
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
DBException e
expected == float.class
mHorizontals == null
event.getX()
cell.localCopy(cfs,HeapAllocator.instance)
typesArray.length == row.productArity()
info.getRegionName()
main.getClasses()
renameContactPanel.getName()
-1
buildVolumeSettingsPendingIntent(vol)
surfaceHeightFacet.get(pos.getX(),pos.getY())
manager.beginTransaction().remove(fragment).commit()
new TypeMissMatchException("'" + toName(object.getClass()) + "."+ field.getName()+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(field.getType()))
selenium.isVisible("link=Control Panel")
request.mConnectionID != null
checkPojoMetaClass()
connection.hdel(key)
node1.checkTreeTypeAwareEqualsSilent(node2)
mBluetoothGatt.registerScanner(this)
data.split("\\s*,\\s*")
javaWriter.emitSingleLineCOmment("foo")
myEditor.getDocument()
newCursorPos <= text.length()
signature.getToSign()
Environment.getRootDirectory()
ensureGreen()
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
getCurrCapacity()
!mShowAnimations && mCardTimer.getVisibility() == View.INVISIBLE
fileSystem.move(backup,file)
i=0
partialUri.toString()
List<SuggestedFix>
transaction.commit()
tv.setTextSize(mTextView.getTextSize())
200000 * 4 * 4
type.getConstructor()
sep < 0
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
getActiveFgCall().getPhone().sendDtmf(c)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.LOCKDOWN_IN_POWER_MENU,0)
getClusterMap().put(buildAttributeName(name),value)
edgeId > edgeCount
timeout < 0
builder.getNotification()
previousDataInputs == null
ohCache.size()
precision=1E6
lhs.getScore()
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,false,progress)
proposalController.processProposals(currentMaintenanceTime)
get(context,R.string.pref_auto_viewed,true)
mQuietEnable
outputArtifact != null
VERSION=41
ModuleType.get(module).getNodeIcon(expanded)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
@Input
AbstractBottomUpTraversal<T,Object>
ON_TOP
locationRequest.setInterval(fastestUpdateInterval)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
new Random(System.currentTimeMillis())
removeFlagForThreadsFromCache(account,ids,flag)
1 << 2
CommonUtils.randomString(random.nextInt(10))
lhs.getScore()
this.constraints.updateFromTuple(leftTuple)
sendMessage(CMD_STOP_AP)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
selenium.isVisible("link=Control Panel")
response.header("location")
public TokenStream create(Reader input){   return new ArabicLetterTokenizer(input); } 
method.getReturnType().getSimpleName()
focusedTopActivity != null
getAnimation(id,true)
sceneToLocalTransformation.postConcat(parent.getSceneToLocalTransformation())
_buildTemplateWithGradle("content-targeting-tracking-action","tracking-dependency-management","--dependency-management-enabled","true")
connection.getInputStream()
!WatchlistConfig.getInstance().isConfigSecure()
Object v
DEBUG=true
new BitSet(maxSize)
callTimeout=1000
IllegalStateException e
assertEquals(1000,((CacheHashTable)db.engine).cacheMaxSize)
interceptorParamTypes.length - 1
Byte.toUnsignedInt(seed[0])
app.setOrgName(ownerName)
buffer == null
console.getStdOut()
mAppliedTemporaryAutoBrightnessAdjustment=true
ofSeconds(1)
Aria.download(this).getDownloadList()
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
i < myParametersNotNull.length
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
getName()
new MockNode(settings.build(),false,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
size < maxListFill
assertTrue(timestamp[i] != modified)
buildData.getUserContentRelativePath()
new WitnessService(appT)
defaultRequestConfig.getConnectionRequestTimeout()
new Interval(startTime,endTime)
executeDraw()
rootReference.root.isSaved()
new IndexWriter(rd1,new SimpleAnalyzer(),true)
FileUtils.cleanDirectory(localRepoDir)
200000 * 4 * 4
4 * width * height
SAM<X>
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
assertRestrictBackgroundOff()
lockForRescale()
mStackScroller.getChildAtPosition(x,y)
mSite.getSpaceAvailable()
badgeText.length() == 1
LOGGER.warn("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
KotlinPluginUpdater.Companion.getInstance().kotlinFileEdited()
mNetd.setDnsServersForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
selenium.isVisible("link=Control Panel")
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
groupType == null
m.execute()
Assert.assertEquals(2,clusterEventListeners.size())
participantAddresses.get(2)
string activeTab
size * 1.75f
loaded.getLoaded().getConstructor()
getFailedExecutionException()
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
dstCursor != null
databaseFile.getPath()
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
new StringBundler(3)
historyItem.getCityId()
Beans.newDuration(casProperties.getAuthn().getOauth().getAccessToken().getMaxTimeToLiveInSeconds()).toMillis()
-2099140913
@Override public ConfigValue getValue(String path){   return find(path,null,path); } 
Int4 v
tag.setLabelPosition("top")
blockIo && !ContainerThreadMarker.isContainerThread()
new IndexWriter(dir,new MyAnalyzer(),true)
tokens.get().match('(','[','=',',',':',';')
response.optJSONObject("discussion")
Math.max(20,myListModel.getSize())
LogDelegate.createLog(name)
onRotationLockChanged()
VoiceInteractionManagerService.this
new URI(sb.toString(),true)
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
account.getJid().toBareJid() + ": resumption failed but server acknowledged stanza #" + h
assertEvaluate(buildFile).lookup("txts")
new StringBuffer()
!mUserVisibleHint && isVisibleToUser && mState < STARTED
GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))
dir.findChild("python")
typeLength == 0
this.exchanges.get(requestId)
assertEquals(expectedPlan,actualPlan)
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Assert.assertTrue(timeOne > timeTwo)
new ArrayList<>()
rt.allowCallsFrom=DEFAULT_SOURCE
showSelfHostedSignInForm()
@PATCH
mWasActivatedOnDown || !mNeedsDimming
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
copy.replace("@" + maybeUserName,"")
private String text; 
Collections.singletonList(reply)
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
PApplet.split(properties.getStringAttribute("points"))
graphBuilderConfig.eagerResolving()
_typeSettingsProperties.toString()
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_NAME)
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),any())
super.getLikeProvider(path)
Integer.valueOf(p.getProperty("numberid.id"))
transform(f -> f.map(new Elapsed<>()))
value < minimumValue
qp.getExclusiveMaximum()
Set<Long>
leafOutcomeValue.advance(valuesDocID)
new SpannedString(new CustomSpannable(first),false)
assertRestrictBackgroundOff()
writer.write(line)
Collection paramNames=Collections.EMPTY_SET; 
StringBuffer buffer=new StringBuffer("("); 
id=15802
si.id == id
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
objectFile.createDefinedSymbol(heapSection.getName(),heapSection,0,0,false,true)
selenium.isVisible("link=Control Panel")
pk.getColumnName()
request.getRequestURI()
mHorizontals == null
this.chatroom.getIdentifier().equals(chatRoomName)
getSessionTimeout().toMinutes()
Thread.sleep(5000)
builder.or(inRestrictions.toArray(new Predicate[inRestrictions.size()]))
log.warn("Double activation of SQL context")
gatherDisableActionsLocked(userId)
pgl.loadVertexShader(fragFilename)
!className.equals("DeepNamedValueScanner") && !className.equals("ProxyUtil") && newContent.contains("import java.lang.reflect.Proxy;")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
selenium.isVisible("link=Control Panel")
doTest("va","val ... = ...","var ... = ...","vararg","values","variables")
proportional
assertEquals(2,pools.size())
needRefresh=false
getClass().getName()
Arrays.asList("Prozent","Gramm","Kilogramm")
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity")
XmppStringUtils.parseBareAddress(address)
data != null && (resultCode != RESULT_CANCELED || (requestCode == 1 || requestCode == 3))
logger.info("transport is open - connecting")
assertEquals(6,tool.check("I can give you more a detailed description").size())
currentBuilder.getRoot()
element.isNamespace()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
e.getMessage()
apnContext.getWaitngApns()
Boolean.valueOf(attrValue)
selenium.isVisible("link=Control Panel")
partCount=0
SameValueContexualRule<ConfirmEmail,Email,String>
new HandlingEvent(cargo,new Date(10),new Date(20),HandlingEvent.Type.CLAIM,sesto)
totalAccounts > 0
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(555,TimeUnit.SECONDS)
new LeftTuple(f0)
oldEntityBuilder.addComponent(new BlockComponent(type,new Vector3i(blockComponent.getPosition())))
stepIdleStateLocked("s:shell")
Integer.valueOf(taskIdStr)
getName()
final SimulatedTrackball mSimulatedTrackball; 
MapsForgeTileSource.createFromFile(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
nodeEngine.getService(LockService.SERVICE_NAME)
readOwners.clear()
AtlasBuildContext.atlasMainDexHelper.getMainResFiles()
props.entrySet()
onDetachedFromWindow()
workingMemory.getObject(handle)
private PostgreServerExtension serverExtension; 
getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
public TokenStream create(TokenStream input){   return new SnowballFilter(input,language); } 
/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends AbstractCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } 
um.getEnabledProfileIds(userId)
List<Map<String,Object>>
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commit()
poList[1]
softClassCache.put(beanClass,results)
mDataSetObserver != null
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
new WitnessService(appT)
case 3: 
new FrameTask.DataInfo(train,1,false,true,!classification)
new Message("XML_STREAM_EXC",LOG)
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
clientCodeChallenge == null
LOG.error("Too many MultiFetch errors, falling back to Fetch only.")
old.isUnderlined()
i < uri.length() - 2
Collection<Fragment>
type.getDescriptor()
Integer.valueOf(this.getOptional("kylin.server.auth-user-cache.expire-seconds","300"))
ExternalSystemBundle.message("orphan.modules.dialog.text",buildSystem)
graph.getEdges()
getBorderRadius() >= 0.5f
ReplaceTranslationTaskTest.class
randomFrom(SearchType.QUERY_AND_FETCH,SearchType.QUERY_THEN_FETCH,SearchType.DFS_QUERY_THEN_FETCH)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)
fromCal.get(Calendar.ERA)
Double rate
((Scorecard)serializable).isUseReasonCodes()
ctx.cache().internalCache(cacheName)
IoUtils.safeClose(channel)
LOG.warn("Unable to close socket selector",ex)
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
hasCollapsibleActionView()
TEST_UTIL.waitTableEnabled(tableName)
imeWin.getDisplayFrameLw()
order=3
MAX_ARITY=22
accountSettings.isSynchronization()
Key.class.getCanonicalName()
owner == null
dist < bestdist
targetBox.setEnabled(true)
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
serviceDataUuid == null
hasAuthenticationTimeoutExpired()
inputItems.length >= index
return true; 
String.format(" CH: %6.2fms, without CH: %6.2fms",chTime * 1.e-6 / run,noChTime * 1.e-6 / run)
Convert objConvert=new Convert(); 
mCurrentVrService == null
selenium.isVisible("link=Control Panel")
id=55
tracesFile.mkdirs()
eKernel.length == 2
setNextBackupId(buf,0)
ExprEval.of(null)
return mRxTimeMillis; 
(visibility & VISIBILITY_MASK) == VISIBLE
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
precision == null
EqualityComparer<T>
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,value))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
res.findViewById(R.id.avatar_bgrnd)
ownedRanges.size()
second.getWeight()
logger.trace("Trying to map {} to {}",t,path)
ssl.has(CommonAttributes.CA_REVOCATION_URL)
new Random(System.currentTimeMillis())
@Ignore
args.length == 0
(Integer)array[this.index]
_classPathReferences.add(file)
mActiveStreamType == -1
ProjectRootManager.getInstance(project).getFileIndex().isInSourceContent(virtualFile)
appearance.getString(attr)
new InputStreamReader(this.getClass().getResourceAsStream(tokens[0]))
createHandlerResult(tokenCredential,p,null)
pubnub.getConfiguration().getProxyAuthenticator()
reference.resolve() == null
computeHorizontalScrollRange()
message.isEphemeral()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
types != null
batch.getMutations(keyspace,clientState)
host == null
loaded.getLoaded().getConstructor()
entry.rxBytes == 0 || entry.txBytes == 0
mInner.end()
prefsWriter.commit()
GitBekParentFixer.prepare(root,this)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
docker.copyArchiveToContainerCmd(container.getId())
mAttacher.getDrawMatrix()
/**   * @return When this column is a {@link ForeignKey} and a Model, returning true with save the modelbefore adding the fields to save as a foreign key. If false, we expect the field to not change and must save the model manually outside of the ModelAdapter. This also applies to ModelContainer objects as foreign key fields.  */ boolean saveForeignKeyModel() default true; 
GL20.glGetUniform(program,location,params)
parentAccessibilityViewId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID
final LongAdder msgCntr=new LongAdder(); 
BlockingManager.getInstance().getBlockedContacts(account)
manager.beginTransaction().remove(fragment).commit()
loading.dismiss()
new IllegalStateException()
assertEquals(3,StringUtil.countMatches(drl,"import "))
assertEquals(ss.getSalt(),"helloworld")
ret.setComplete(e,response)
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
getSelectedColorRes()
mapper.getTypeFactory().uncheckedSimpleType(InspectContainerResponse.class)
new WorldPoint(2487,3001,0)
new Intent(ACITON_FEED_LIST_UPDATE)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
StringUtil.isNullOrEmpty(websiteDir)
a.getInteger(attr,DEFAULT_MAX_WIDTH)
location != null
cr.isUnderflow() & !last
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
LOG.warn(title + "; " + message)
sendMessage(CMD_STOP_AP)
ColumnFilter sent
"Failed to create OutgoingJingleSession.\n" + fullCalleeURI + " does not support jingle"
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
displayNameComparator.compare(itemStack1,itemStack2)
mConnector.execute("cryptfs","deleteuserkey",userHandle)
item.getClass()
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
new ServletHolder(accountServlet)
prefixq(dst)
!field.getValueClass().isInstance(value)
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
shouldPersist=false
_connector.getResponses("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
exitCode == ExitCode.FATAL_DISK_FULL
this.getAuthorities() != null
container.addon.markDirty()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
U.compareAndSwapLong(o,longRawIdx(x),o,o + 1)
resource.getPath().endsWith("LanguageTool.uno.jar")
leftResult.cardinality()
hazelcastFactory.newHazelcastInstance()
new InetSocketAddress(5353)
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
SCAN_STATUS_COMPLETE=1
matcher.matches()
executeDraw()
Color.fromRGB(0x287697)
tradeService.getBittrexOpenOrders()
Thread.sleep(5000)
UnsupportedOperationException e
compressedProto.length < 390200
directory == null | (!directory.exists() && !directory.mkdirs())
subProperties.put(subName,value)
/**   * Saves the  {@link CacheWriteEntry}.  * @param cacheWriteEntry the {@link CacheWriteEntry}  * @return the {@link CacheReadEntry} for the written {@link CacheWriteEntry}  * @throws IOException if an I/O exception occurs  */ CacheReadEntry save(CacheWriteEntry cacheWriteEntry) throws IOException ; 
DLWebUpgrade.class
connection.subscribe(jedisPubSub,patterns)
System.currentTimeMillis()
holder.setVisible(loadEndViewId,visible)
selenium.isVisible("link=Control Panel")
new StringParser()
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
tupleOrigin != null
content.contains("&")
new Rect(left,top,bottom,right)
partitionKey.getType().toString()
Session.getInstance(prop,null)
tracesFile.mkdirs()
selenium.isVisible("link=Control Panel")
new Rectangle(width,height)
method.getClass()
matcher.matches()
lp.onResolveLayoutDirection(layoutDirection)
new Long(item.getSeq())
GitFileUtils.delete(myProject,root,e.getValue())
@Override protected MyContentEntryEditor createContentEntryEditor(String contentEntryUrl){   myContentEntryEditor=new MyContentEntryEditor(contentEntryUrl,getEditHandlers());   return myContentEntryEditor; } 
return tsr; 
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
HashSet<String>
req.getServletPath()
UserHandle.getCallingUserId()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
measureRun(0,0,target,mLen,true,fmi)
event instanceof BuckEvent
DescriptorUtils.getParentOfType(from,ClassDescriptor.class)
assertEquals(2,pools.size())
mAuthorities.get(i)
position - dockDividerWidth
Flux.from(inputStream).flatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
tracesFile.mkdirs()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
dockedBounds.top - adjustment
Middle middle
new IllegalArgumentException()
Loader.getResource(__dftMimeMap.getClass(),resourceName)
getPreferences().getBoolean(SIGNAL_PREF,true)
Platfomr.isPPC()
new MaxCandidatesCondition(10)
nameMethod.invoke(nameMethod)
isSmartLockAvailable()
(fl & FLAG_LAYOUT_NO_LIMITS) != 0
mMenu.getVisibleItems()
!justBootedUp
message.getToUser()
type.getConstructor()
Assert.assertEquals(47,c.getInt(0))
(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey)
new DeadCodeEliminationPhase(REQUIRED)
connectionProperties.contains("oracle.url")
Thread.sleep(5000)
Math.max(1,Integer.parseInt(split[1]) - 1)
DEBUG_RC=true
newDefaultSubIdObj.equals(mDefaultSubId)
multiValueRow.get(1)
256 * 256 * 12.8f
MetadataInstrument2.class.getName()
LOG.error("did not find superclass names when mapping inheritance....")
t instanceof LinkageError
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
node1.checkTreeTypeAwareEqualsSilent(node2)
!tryExtractRequired(buildingInfo.entitiesRequiredItems.get(schematicEntity),buildingInfo.entitiesRequiredFluids.get(schematicEntity),true).isPresent()
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
logger.warn("Cannot handle stop command ({})",e.getMessage())
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
public static TitledBorder createTitledBorderSimpleWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),0,1,new Insets(3,0,6,0)); } 
setNumber(String.valueOf(integerPart))
cal.set(1900,1,1,hour,minute,second)
isAllowedBySettingsLocked(p.getName(),UserHandle.getUid(mCurrentUserId,0))
payload.intPayload[3]
getPreferences().store(fos,"")
builder.length()
mentionsListView.smoothScrollToPosition(0)
nameTextField.getText()
mAdapter == null
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   return dht().drPauseState(); } 
mAlpha.end()
doTestNotIndexed(type)
loadWallpaper(forDraw,true)
new Version(1,0,0)
assertEquals(0,localReplicatedMapStats.getOwnedEntryMemoryCost())
new StringBuilder()
Integer.valueOf(sessionTTL)
Timber.v(e,"Permanent failure during XOAUTH2",e)
mHotspotBounds.set(left,top,bottom,right)
selenium.isVisible("link=Control Panel")
service.getAdnUriForPhoneAccount(accountHandle)
assertTrue(found)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers.kt")
new int[95]
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
-1
(MemberNode)children.nextElement()
getSharedLocalInspectionTool() != null
instance.getPublicDnsName()
assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName)
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
((EditorMediaUploadListener)mEditorFragment).onMediaUploadProgress(mediaId,false,count)
((MasterSlaveDataSource)dataSource).getAllDataSources()
this.thrown.equals("File must exist")
super.getDither()
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
HIVE_PARTITION_OFFLINE(6,EXTERNAL)
clipItem.getText()
new FindResultUsageInfo(findManager,psiFile,offset,findModel,result)
x509ExtendedTrustManager.checkServerTrusted(chain,authType,engine)
Integer.valueOf(leftStr)
new WeekViewEvent(event.getId(),event.getName(),startTime,event.getEndTime())
mDeviceProvisionedController.isDeviceProvisioned()
mPlayer.getCurrentPosition() * 1000
4 * 12 * 3
IllegalAccessError.class
PrintAttributes.enforceValidColorMode(currentMode)
tag.setLabelPosition("top")
selenium.isVisible("link=Control Panel")
IndexReader reader=IndexReader.open(dir); 
/**   * Changes permission on current working directory so that the directory is owned by the user and the group remains azkaban. Leverages execute-as-user with "root" as the user to run the command.  * @param effectiveUser user/proxy user running the job  */ private void assignUserDirOwnership(final String effectiveUser) throws IOException {   final ExecuteAsUser executeAsUser=new ExecuteAsUser(this.sysProps.getString(AZKABAN_SERVER_NATIVE_LIB_FOLDER));   final String groupName=this.sysProps.getString(AZKABAN_SERVER_GROUP_NAME,"azkaban");   final List<String> changeOwnershipCommand=Arrays.asList(CHOWN,effectiveUser + ":" + groupName,getWorkingDirectory());   info("Change current working directory ownership to " + effectiveUser + ":"+ groupName+ ".");   final int result=executeAsUser.execute("root",changeOwnershipCommand);   if (result != 0) {     error("Failed to change current working directory ownership. Error code: " + Integer.toString(result));   } } 
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
telephony.isRadioOn()
Exception ex
annotation == OriginalType.MAP
List<String>
new StringBundler(10)
String.format("Examples labeled as %s classified by model as %s: %d times%n",actual,expected,count)
index=0
selenium.isVisible("link=Control Panel")
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() == 0
serializedMapping != null
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_velocityEngine,_templateContextHelper)
unwindNode != null
targetMethod.recordCall(posBefore,target,debugInfo,false)
componentSettings.getAsDouble("segments_per_tier",9.2d)
ColorResources.getColor("primaryControlDarkShadow")
ArrayList<String>
Thread.sleep(30000)
ams.mContext.createPackageContext(appInfo.packageName,0)
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
paramType.getName()
Exception e
dexFile.readSmallUint(out.getCursor())
child.resetResolvedLayoutDirection()
System.arraycopy(objectArray,0,newObjectArray,0,3)
selenium.isVisible("link=Control Panel")
IBackupManagerService svc=mService; 
Slog.wtf(TAG,message,th)
mPulseCallback.onPulseFinished()
endPos < paraEnd
mHidProfile.isProfileReady()
shard.applyIndexOperationOnReplica(3,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id2",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
out.write(ENUM_CONSTANT_VALUE_TAG)
Flags.BITFIELD.isSetIn(mdType.getFlags())
event.getTime() > currentPlayTime
sub.emit(dataBuffer)
return authenticationDecisionStatementProviders; 
@Override public Appendable append(char c){   grow(ref.length + 1);   setCharAt(ref.length++,c);   return this; } 
optimizationLevelAsString.trim()
LOG.info(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
Integer.valueOf(leftStr)
PaginationTestUtil.of(10,1)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
formatted.split("\n")
/**   * A decorator around a  {@link org.gradle.caching.BuildCacheService} that passes through the underlying implementationuntil a number  {@link BuildCacheException}s occur. The  {@link BuildCacheException}s are counted and then ignored. After that the decorator short-circuits cache requests as no-ops.  */ public class ShortCircuitingErrorHandlerBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private static final Logger LOGGER=LoggerFactory.getLogger(ShortCircuitingErrorHandlerBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final int maxErrorCount;   private final AtomicBoolean enabled=new AtomicBoolean(true);   private final AtomicInteger remainingErrorCount;   public ShortCircuitingErrorHandlerBuildCacheServiceDecorator(  int maxErrorCount,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.maxErrorCount=maxErrorCount;     this.remainingErrorCount=new AtomicInteger(maxErrorCount);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader){     if (enabled.get()) {       try {         return super.load(key,reader);       }  catch (      BuildCacheException e) {         recordFailure();       }     }     return false;   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer){     if (enabled.get()) {       try {         super.store(key,writer);       }  catch (      BuildCacheException e) {         recordFailure();       }     }   }   @Override public void close() throws IOException {     if (!enabled.get()) {       LOGGER.warn("The {} build cache was disabled during the build after encountering {} errors.",getRole(),maxErrorCount);     }     super.close();   }   private void recordFailure(){     if (remainingErrorCount.decrementAndGet() <= 0) {       if (enabled.compareAndSet(true,false)) {         LOGGER.warn("The {} build cache is now disabled because {} errors were encountered",getRole(),maxErrorCount);       }     }   } } 
child.resetResolvedLayoutDirection()
new VertexBuffer(this,PGL.ARRAY_BUFFER,3,PGL.SIZEOF_FLOAT)
isCompressionSupported(httpRequest) && !(httpResponse instanceof CompressionServletResponseWrapper)
referencingEntity(other).get()
2.0f * zFar * rangeReciprocal
tile.getUrn().getResourceName()
TestRepositoryUtil.assertEqualCollections(tags,myTags)
TypeElement formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER); 
Thread.sleep(5000)
ConfigureUtil.configureSelf(configureClosure,delegate,delegate)
mAdapter == null
SAMPLE_ERROR_MILLIS=30
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
builder.addDependency(RegistryInstallerService.SERVICE_NAME)
assertNotNull(message.getPayload() instanceof Collection<?>)
Exception e1
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
FileUtil.loadFile(GenerateKeywordStrings.DEST_FILE)
queryBuilder.appendQuoted(FlowManager.getTableName(table))
new IntentStarter(ctx,Intent.ACTION_VIEW,Uri.parse("market://search?q=text to speech engine"))
selenium.isVisible("link=Control Panel")
mSharedElementNames.size()
firstSlash == 0
@UriPath(label="producer",defaultValue="true")
customization.getPaletteAnchor()
buffer.readableBytes() < 4
new ArgTypePreparedStatementSetter(args,argTypes)
cursor.getPosition()
StringBuffer ret=new StringBuffer(100); 
assertEquals(provider.fetchCount,is(2))
GL20.glUniform3(location,v)
contains={"doCachedTypeCachedOffset","doCachedType"}
eventFunc.equals("conf_api_sub_unmute")
sessionInfo != null
objects[2]
logger.warn("TuneIn service not found")
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final DefaultHttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
DatabaseFactory.getInstance().openDatabase(config.getString("database.url"),config.getString("database.user"),config.getString("database.password"),null,resourceAccessor)
cf.getCompressionType() == null
m.getClass()
selenium.isVisible("link=Control Panel")
QMMObject[]
PrintAttributes.enforceValidColorMode(currentMode)
getJavaType(keyColumns.get(0).getType(resolver()))
private final MessageHeaderAccesssor headerAccessor; 
new StringBuilder()
LOG.info(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master")
webSocketProcessor.close(webSocket,0)
melody.length() - 2
state.isFrameTypePermitted(FrameType.DATA)
result.set(0,new InetSocketAddress("idontexist",80))
selenium.isVisible("link=Control Panel")
new CachedSpiceRequest<T>(request,requestCacheKey,cacheDuration)
mActiveAgents.remove(info)
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
AnnouncementsWebUpgrade.class
Looper.prepare()
isImmutable(element)
adapter == ResultSetViewer.class
StringUtil.isEmpty(source)
new ExportCSVTask(testContext,habitList,selected,archiveFilename -> {   assertThat(archiveFilename,is(not(nullValue())));   File f=new File(archiveFilename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
c.getDeclaredMethods()
UserHandle.getCallingUserId()
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
sstable.markCompacted()
accountHandle.getComponentName().toString()
isSavedPostsList()
onCreateView(mContext,appWidgetId,appWidget)
oldValue != null
owners.add(Receiver.<String>make(clazzGT.getType()))
tokens.next().expect(Token.IDENTIFIER,'{')
telephony.getCdmaEriIconModeForSubscriber(subId)
StringBuffer sb=new StringBuffer(); 
1000 * 1000 * 10
Class.forName(ORIGIN_EXECUTABLE).getConstructor()
mgr.isToolWindowRegistered(((ToolWindowImpl)myWindow).getId())
mHandler == null
mStack.size() > 2
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
useInternetToDownload.setOnPreferenceClickListener(this)
!c.moveToFirst()
field.getClass()
rotationVector.length == 4
mAuthorities.get(i)
this.convertSceneToLocalCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
is_topic=true
config.getMaxElementsInMemory()
Slog.e(TAG,"couldn't inflate view for notification " + ident)
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
@Overide
sigmoid(ndArray,true)
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,false)
mMat[9]
getTestName(true)
Log_OC.wtf(TAG,"\t file is NULL")
mPlayer.getCurrentPosition() * 1000
a.getFloat(attr,0)
lp.onResolveLayoutDirection(layoutDirection)
shard.applyDeleteOperationOnReplica(1,1,2,"test","id",VersionType.EXTERNAL,mappingConsumer)
Integer.valueOf(taskIdStr)
groupsFile.getPath()
b & 0xFF
available > 0
Map<Object,RealmObject>
logger.error("Error while matching regex [" + matcher.toLowerCase() + "] for string ["+ matched.toLowerCase()+ "] "+ pse.getMessage())
statistics.addPutTimeNano(System.nanoTime() - start)
new LeftTuple(new DefaultFactHandle(2,"cheese"))
body.getContentType().restContentType()
new CacheCreateConfigRequest(cacheConfig,true,partitionId)
asParserError(e)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_velocityEngine,_templateContextHelper)
DeletionRetentionStrategy.class
serialVersionUID=1897822466
selenium.isVisible("link=Control Panel")
keyed=false
checkLocationAccess(uid,packageName,allowedResolutionLevel)
System.setProperty(MODEL_PROVIDER_KEY,provider)
lock.isLocked()
new ReactorHttpServer()
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
Assert.assertEquals(49503930,trace.getReceipt().getEnergyFee())
getInitializer()
time_delta <= 1 << (Short.SIZE - Const.FLAG_BITS)
new Paint(Paint.ANTI_ALIAS_FLAG)
this.sessionFixationAuthenticationStrategy
sigma[i] == 0.0
w.mBaseLayer <= myLayer
listAdapter.notifyDataSetInvalidated()
realm.assertThread()
new Paint(Paint.ANTI_ALIAS_FLAG)
new GameObjectQuery().idEquals()
new IllegalArgumentException()
checkLocationAccess(uid,packageName,allowedResolutionLevel)
synchronized (classCache) {   return (Class[])classCache.values().toArray(new Class[0]); } 
conn.setSourceDecoration(srcDec)
realm.assertThread()
buildName(node)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
Collectors.toSet()
new Message(MSG_TXT,false)
curArticle.getArticleId()
mBottomLeftStrip=mContext.getResources().getDrawable(resId)
logger.error("Invalid state {}",r)
selenium.isVisible("link=Control Panel")
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
Pair<ByteBuffer,IColumn>
defaultCallTimeout=10000
ap.getSsid()
mConferenceById.containsKey(callId)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
DateFormat.getDateFormat(context)
Log.e(TAG,"Prepare done")
number=1
List<WebPageDetail>
FORCE_LOGGING=true
payload.writeBytesLenenc((byte[])each)
? extends T
hideable && shouldHide(releasedChild,yvel)
refDeafult != null
selenium.isVisible("link=Control Panel")
getType().isArray()
!adapter.isClass(element)
ServiceManager.addService(Context.INPUT_SERVICE,inputManager)
context.init(httpServletRequest,httpServletResponse)
loaded.getLoaded().getConstructor()
checkPojoMetaClass()
AWAKE_INTERVAL_DEFAULT_MS=5000
Thread.sleep(5000)
visitNode(node,context)
parent.incrementPrioritizableForTree(amt,oldParent)
ChunkSatelliteView view
log.isDebugEnabled()
fs0.create(path,false)
assertEquals(q.toString(),"[]")
mExpandedChild.getHeight() == mContractedChild.getHeight()
new UnsupportedOperationException()
"Cannot find hibernate configuration file in CLASSPATH: " + HIBERNATE_DFLT_CFG
driverFile.getLocalFile()
mDrawable != null
dropIndex("DROP INDEX " + indexName)
case RU_TASKS: 
r1
serializer.serializeForInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
position - dockDividerWidth
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
(rsv & RSV_BITMASK) > 0
AUTH_TYPE_DIGEST.equals(this.authType)
DEBUG=true
number.intValue()
Simple.of(skylarkType)
timeMillis - MILLIS_IN
port > 21000
new RuntimeException("Unexpected rule: " + ruleStr)
model.getProductOptionValidationStrategyType()
getResource(GROOVY_AUTOCONFIG_FILE,myClassLoader,updateStatus)
Observable.create(takeWhile(source,new Func1<String,Boolean>(){   @Override public Boolean call(  String s){     return false;   } } )).toBlockingObservable().last()
LOG.error("Plugin " + plugin.getName() + " has an artefact "+ shortName+ " without a package name "+ "This could lead to artefacts being excluded from the application")
new GitVersion(1,7,1,0)
Exception e
value == null
i--
mDark == dark
(sms.getUserData() == null) && (SmsEnvelope.TELESERVICE_MWI != teleService)
adapterCount < MAX_VISIBLE
imeWin.getDisplayFrameLw()
/**   * Visits the specified list result.  * @param listResult the list result  * @return the result of the visit  */ TVisit visitListResult(ListResultData listResult); 
previousAttribute.compareTo(attribute)
new Environment(settings)
lock.tryLock()
new IOException(msg,ioe)
CodeStyleManager.getInstance(myProject).reformatText(file,ranges)
model.addAttribute("cookie",cookie)
new IllegalStateException("'targetCacheManager' is required")
redefined.getConstructor()
masm.cas(size,expected,newVal,address,true,true)
new BroadcastAction(originalMessage)
SystemInfo.isMac ? 5 : 2
notNullValue()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
layerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
new ElementsChooser<ComponentElementProperties>()
Thread.sleep(5000)
isProcessTerminated()
model.getVisibleColumn(cell.col)
logger.warn("gave up waiting for query reply from device {}",m_address)
w.getStart() > oldEndOffsetInLine
AbstractMethodError e
Object edge
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
t.join(10)
selenium.isVisible("link=Control Panel")
refresh(asynchronous,recursive,postRunnable,ModalityState.NON_MODAL)
!paused
synchronized (mAccounts) {   writeStatusLocked(); } 
getSelectedColorRes()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION)
executeDraw()
dir.setMaxSizeInBytes(2)
project.getId()
_log.error(ioe,ioe)
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName())
cxxDeps.get(resolver,cxxPlatform)
job.build(true,job.getId())
new IllegalStateException("Failed to create working path: " + workingPath)
current != null
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).toMillis()
new ProcessBuilder("/system/bin/logcat","-v","time","-b","events","-b","system","-b","main","-b","crash","-t",String.valueOf(lines))
LOGGER.warn("Caught exception while updating segment status for table {}",e,tableNameWithType)
testClass.getName()
Long.valueOf(val)
addTypes.remove("subway_region")
measured.setPara(source,bufStart,bufEnd,textDir)
io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait()
metadata.getFaceRectangles()
myTreeBuilder.isNodeBeingBuilt(event.getPath())
LOG.error("delete failed: {}",e.getMessage())
etp.setText(etp.getText())
Double rate
LogUtils.initializeDefaultConsoleLogger()
context.getAssets().addAssetPath(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
DEBUG_FOCUS=false
copy1DRangeFrom(0,mType.getCount(),i)
ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))
String.class
!handler.isProcessTerminating()
FileEntry.class
mBoundServices.isEmpty()
mRemote.transact(START_ACTIVITY_TRANSACTION,data,reply,0)
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
LOGGER.info("Application registered itself as {}",response.getBody())
checkPojoMetaClass()
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
(longValue() >> 16) & 0xFF
new DropTableEvent(tbl,deleteData,true,this)
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
i=10000
ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)
display.getMetrics(dm)
checkPojoMetaClass()
return true; 
ActorSDK.sharedActor().style.getDefaultBackgrouds()[1]
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
requestFocus()
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
useOsmandKeyboard
principal.getName()
new LightweightThread(null,new Merge3Test())
mAdapter == null
@Override public ZuulMessage getDefaultOutput(I input){   return input; } 
String.format("<html>Commits that exist in <code><b>%s</b></code> but don't exist in <code><b>%s</b></code> (<code>git log %s..%s</code>):</html>",firstBranch,secondBranch,firstBranch,secondBranch)
getPaymentMethodById(account.getPaymentMethodId(),false,context)
guiResource.getImageBol()
!task.isFreeformTask()
return alternatives; 
classType.getClassName()
new DoubleInetAddressDns()
selenium.isVisible("link=Control Panel")
subject.isEmpty()
workingMemory.getObject(handle)
archiver.createArchive(project,archive)
telephony.isIdle()
Long.valueOf(attrValue)
{2,3}
SamplingProfiler.newThreadGroupTheadSet(group)
new FormAttachment(wAttributes)
c == 10
message.processMessage()
cc.isLazy()
bucket.exists()
CompletableFuture<Boolean>
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
fullName.length() > selectedFullName.length()
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
mEncoder.swithToHardEncoder()
Matchers.empty()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,140000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
performDexOpt(packageName,instructionSet,true)
terms.facetFilter(standardFilters(range,filter))
IndexerRegistryUtil.nullSafeGetIndexer(baseModel.getModelClass())
assertEquals(4933401,received.get(0)[1])
StringUtil.last(oldDefaultList.getName(),30,true)
typeSettingsProperties.toString()
new TitanException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION))
startupArgs.isTestingModeEnabled()
_buildTemplateWithGradle("npm-angular-portlet","angular-dependency-management","--dependency-management-enabled","true")
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
Integer.parseInt("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
clickListener_OnClickListener == null
Build.VERSION.SDK_INT < 19
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
i < 10
List<DBCException>
mHomeStack == null
!sDisplayAnswer || getConfigForCurrentCard().getBoolean("replayq")
DDMStructureLocalServiceUtil.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
messenger.sendCode(res)
grabFrame(true,true,false,false)
Map<String,Long>
new AlertDialog.Builder(this,mThemeId)
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)
getTelecomService().endCall()
proto.getExecPath()
scannedUnit.excludeUnlistedClasses()
engine.execute(query).toString()
LAST_VERSION=1002
currenType != Type.INT
selenium.isVisible("link=Control Panel")
Preconditions.checkState(Files.exists(dir))
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
gl.marginWidth=0
fpId <= 0
service.getType()
mActiveStreamType == -1
nextValue >= 0x40
logger.debug("Received MyQ  JSON: {}",dataString)
className.startsWith(Classes.COROUTINE_NAME)
this.setParticipantState(state)
itemMatches(itemStack,target,false)
delaySoFar > mReEnableDelayMillis
meta.getEnclosure()
Iterator<Cache.Entry<Integer,Person>>
port.readBytes()
err != 0
read.getReadDate()
telephony.getCdmaEriIconIndexForSubscriber(subId)
selenium.isVisible("link=Control Panel")
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
GL20.glUniform1(location,v)
tickTupleInterval == 0
serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN
_typeSettingsProperties.toSortedString()
fileIds == null
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
new GroovyBugError("The lookup for " + name + " caused a failed compilaton. There should not have been any compilation from this call.")
new LocalizedXStreams(classLoader)
setImageDrawable(icon)
typeSettingsProperties.toSortedString()
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withUser)
return true; 
registerWithArgs(preMethods,"size",o,methodArgs)
instrumentedType.getSuperClass()
assertNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
var.setValue(guessType(value))
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
getService().animateCollapse()
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
Arrays.asList("d","D","s","S","w","W","b","B","A","G","Z","z","Q","E","t","n","r","f","a","e","h","H","v","V","R","X")
storedOverlayInfos.get(i)
ts > timeout
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
listJobInstances(cube,project,startTime,endTime)
new StreamError(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR,streamId)
LOG.info(() -> String.format("Discovering tests during launcher %s phase in engine '%s'.",phase,testEngine.getId()))
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
sendKeyDown(keycode)
byteBuffer == null
selenium.isVisible("link=Control Panel")
endpoint.getBus().getInInterceptors().size() == 1
!list.append(pi)
Assertions.checkArgument(isTopLevelSource)
fromTypeID != null
document != null
visibleOnly=false
etp.setText(s)
templatesToAddressList(engine,replyTo,model)
((MainTimeLineActivity)getActivity()).setHomeListView(listView)
Globals.class
new CheckboxTreeViewer(columnsGroup,style)
@Nullable
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Collection<GridDrStateTransfer>
setBackgroundDrawable(null)
sStatsd.informDeviceShutdown(true)
onDetachedFromWindows()
group != null
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null),JSONParseSpec.JSON)
parser.getText()
Thread.sleep(5000)
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.DoesNotExists.Message")
toArrayHelper(1)
new IllegalArgumentException(msg)
assertEquals(1111L,n2.expireLinkNodeRecid)
intellijProject == null
text.indexOf('@') == -1
stream.close()
(types != null) && (types.length > 0)
final string clientSecret="your client secret"; 
!BSSID_PATTERN.matcher(bssid).matches()
db.qualityProfiles().activateRule(builtInProfile,rule)
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).finallyDo(() -> _isFetching.onNext(false))
!tableLayoutHandle.getPartitions().isPresent()
!this.isStompConnected
new Selector(5000,failedAuthenticationDelayMs,metrics,time,"MetricGroup",channelBuilder,new LogContext())
isShowOffline
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
checkDirectory(config.getString("tsd.http.staticroot"),DONT_CREATE,!MUST_BE_WRITEABLE)
type.getConstructor()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
mPackages.add(coreModulesPackage)
resolve(propName,originalPath,settings,configPath,mustBeValid)
retval=(constValue + constValue2 == x)
assertThat(dtos).extracting("id").containsExactly(100L,103L)
wikiPagePersistence.findByG_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
(Source)src
mPowerManager.isScreenOn()
DBSSchema.class.isAssignableFrom(childType)
value > 0
c.getLiquid().amount < c.getCapacity()
new SQLiteBooksDatabase("LIBRARY_NG")
assertEquals("List size",2,retList.size())
isAllowedBySettingsLocked(p.getName(),UserHandle.getUid(mCurrentUserId,0))
Object edge
telephony.isRinging()
elementText.substring(i + 1)
setEnabledFunctions(mDefaultFunctions,false)
2000 * (1 - start)
dlFileEntry.getFolderId()
public NetworkLibraryItem libraryItem(){   TreeMap<Integer,String> urlMap=new TreeMap<Integer,String>();   urlMap.put(NetworkCatalogItem.URL_CATALOG,getLink(URL_MAIN));   return new OPDSCatalogItem(this,getTitle(),getSummary(),getIcon(),urlMap,myExtraData); } 
getDelegate().getSupportedCipherSuites()
deltaY < 0
mHandler.postDelayed(pae,timeout)
invoke(args.first(),args.rest())
Log.e(TAG,"Got null argument for a defined keyset, ignoring!")
c > 0
prefs.getBoolean(PERSIST_SERVICE,true)
ApplicationManager.getApplication().isInternal()
lock.isLocked()
new AtSet(COMMA,RPAR,COLON,ARROW)
Validator.equals(type,"toggle-switch")
drawable != null
AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy); 
IgniteCheckedException e
stack.peekFirst()
assertThat(localInetAddress)
setImageDrawable(icon)
selenium.isVisible("link=Control Panel")
mNextWakeFromIdle != null
getValidator().call()
rackIdToNodes.get(rid)
parentPackage.equals(shortName)
data != null
return false; 
Integer.valueOf(rightStr)
checkManageUsersPermission("query user")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
userImpFactor.add(userFactors.row(userIdx,false))
return true; 
propertiesComponent.setValue(CONFIGURED_V11,"true")
new Location(user.getWorld(),x,y,z)
Arrays.asList(gA0,gA1,gB2,gB3,gC1)
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING)
sorted_files.get(i).createReader()
PageRatingsWebUpgrade.class
nodeEngine.getPartitionService()
mOneShot=true
owner.getEnergyUsage()
mConnector.execute("cryptfs","createnewuserdir",userHandle,path)
event.consume()
.12
scheduleRemoveStartingWindow(wtoken)
API_KEY == null
ctx.getOuterContext()
GlobalSearchScope.projectScope(getProject())
buildChannelsUriForInput(inputId,true)
new Paint(Paint.ANTI_ALIAS_FLAG)
sLon == null
glyph.get().setSizeRatio(sizeSlider.getValue())
Object node
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
dest.writeLong(mSubId)
packet.getType() != IQ.Type.result
cell.localCopy(cfs,HeapAllocator.instance)
Long.valueOf(value)
minutes >= 2
!service.mRequestFilterKeyEvents
mHidProfile.isProfileReady()
new RuntimeException(e)
result != null
public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
!methodMatches(method,null,PsiType.INT,HardcodedMethodConstants.COMPARE_TO,PsiType.NULL)
node.getTextLength() > 0
config.getStartTime()
!myDisposed
assertContainsParams(CollectionAdminRequest.createCollectionWithImplicitRouter("foo",null,"bar",1).getParams(),ACTION,NAME,"shards","router.name","replicationFactor",ZkStateReader.NRT_REPLICAS)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY)
selenium.isVisible("link=Control Panel")
assertThat(xml).isEqualTo(expectedContent)
menu.isSelected()
getPhoneType(getJsonString(email,"type"))
DifDiffViewer.canShowRequest(context,request)
new StringBundler(6)
mData != data
selenium.isVisible("link=Control Panel")
originalLayout.getIconImageId()
id=43
JZVideoPlayer.onScrollReleaseAllVideos(view,firstVisibleItem,visibleItemCount,totalItemCount)
getSwaggerType(swaggerModel.getAdditionalProperties())
currentNumOfAttempts == maxAttempts
newField("id","",Field.Store.YES,Field.Index.NOT_ANALYZED)
movementComp.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),state.getPosition(),1.0f)))
Map.class
new Coordinator(node.getName(),clusterService.getSettings(),clusterService.getClusterSettings(),transportService,namedWriteableRegistry,allocationService,masterService,() -> persistedState,hostsResolver -> testClusterNodes.nodes.values().stream().filter(n -> n.node.isMasterNode()).map(n -> n.node.getAddress()).collect(Collectors.toList()),clusterService.getClusterApplierService(),random())
AndroidInstrumentationInfoProvider instrumentationProvider=instrumentation.get(AndroidInstrumentationInfoProvider.ANDROID_INSTRUMENTATION_INFO); 
!mAwake
offsets == null
@SmallTest
Log.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
childLeftTuple.reAddRight()
noStructuresDLFileEntryMetadatas.size()
components.beforeEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
zkClient.close()
findAnnotationAttributes(element,annotationType,true,true,true,true,false,false)
buildPages.getTypes()
realUserTagEventDel.getObjectId()
interfaces[i].isAssignableFrom(c)
mAppToken.hasContentToDisplay()
null == user
Integer.valueOf(3)
NB_CACHED_PARAMS=20
Thread.sleep(5000)
MessageListBean mentionsComment=intent.getParcelableExtra(BundleArgsConstants.MENTIONS_COMMENT_EXTRA); 
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,channel,channel,t)
seenVertices.contains(startAncestor)
XmppStringUtils.parseBareAddress(user)
SamplingProfiler.newThreadGroupTheadSet(group)
year=2013
List<String>
DEBUG=true
Long.toOctalString(localExpire)
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName())
TextUtils.isEmpty(tag)
CharSequence message
DEBUG=true
randomIntBetween(1,8)
zzStartRead <= zzCurrentPos
origin <= other
new Paint(Paint.ANTI_ALIAS_FLAG)
GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))
returnType.isPrimitive()
(line=reader.readLine()) != null
@UnrelatedOne
mAztecImageLoader != null
modulePath.relativize(child)
length - 2
replacePsiElementWithLambda(element,false,true)
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=500
!uniqueExpiryCallbackPresent
myIcon.getIconHeight() - 10
callGasWord.longValue()
from > to
this.propertyDescriptorCache.put(pd.getName(),pd)
par == null
assertTrue(exceptionMessage.contains("Invalid core"))
1
File.listRoots()[0].getParent()
enabled=false
IOUtils.toInputStream(responseString)
jdbcTemplate.queryForInt(sql)
15 * 60 * 1000
response.setHeader(WWW_AUTHENTICATE,value)
Log_OC.e(TAG,"onSaveInstanceState() start")
return true; 
new ConversationPrefsHelper(mContext,mThreadId)
private final Projections projections=new Projections(Module.HQL,getTarget()){   @Override public <A,Q extends SimpleExpression<A>>Collection<Expression<?>> list(  ListPath<A,Q> expr,  ListExpression<A,Q> other,  A knownElement){     return Collections.<Expression<?>>singleton(expr.size());   } } ; 
fluidOil.getBlockID()
WikiServiceUpgrade.class
info.crashInfo.stackTrace.length() > 10000
LocaleUtil.getDefault()
new StatsLogEventWrapper(tagId,6)
seriesInfo.Index.toString()
assertEquals(9,definitions.size())
new MapVectorLayer(null)
Params extends PersistentTaskParams
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
assertEquals(12,url.getPort())
IDHandler.getBounds(RelationCategory.PROPERTY)
setImageDrawable(icon)
log.error("Cannot retrieve roles for {} from {} due to {}",user.getName(),ab.getType(),e.toString())
loaded.getLoaded().getConstructor()
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title","_id","_version","_score")
JournalServiceUpgrade.class
fraction * (nextValue - prevValue)
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)
SECONDS.toMillis(3)
_log.error(ioe,ioe)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(17)
isReturnGeneratedKeys() && generatedKey.isPresent()
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
clone.setName(getName())
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
logger.warn("Cannot play radio ({})",e.getMessage())
mPlayer.getCurrentPosition() * 1000
stmt.executeQuery(sql)
List<WebPageDetail>
references.get() == 0
minorVersion=17
mActivity.getFragmentManager()
JSParameterTableModel.createParameterTypeCellFragment("",myProject)
new StandardTypeConverter()
from.getRegistryName()
activate()
mEvdoEcio > 0
parsedResult.getSqlType()
_subBlocks.size() > newChildIndex
String tag
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
cursor != null
AbstractRanking.refreshMinMax(this,graph)
builder.getNotification()
((SipStackImpl)this.stack).getLocalAddressForDestination(dst,dstPort,localAddress,0)
left == right
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
onCreateView(mContext,appWidgetId,appWidget)
type.getConstructor()
mHandler == null
EntryStream.of(1,1,2,null,3,null).nonNullKeys()
downNode > myDownIndex
IllegalArgumentException.class
TrayIconUtil trayIconUtil(); 
index.getName()
LOGGER.error("Following Class is no side pane: '" + componentName,e)
getChildFragmentManager().beginTransaction().add(R.id.stats_pager_container,fragment)
{false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
telephony.isRinging()
toHeapData(key)
row.getInt(4)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
Assert.assertEquals(32400,trace.getReceipt().getEnergyUsage())
CharSequence message
getEffectiveCleartextTrafficPermitted()
@Override public synchronized AstyanaxOrderedKeyColumnValueStore openDatabase(String name) throws StorageException {   if (openStores.containsKey(name))   return openStores.get(name);  else {     ensureColumnFamilyExists(name);     AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy);     openStores.put(name,store);     return store;   } } 
/**   * GridGain handshake.   */ GRIDGAIN_HANDSHAKE
UserManager.getUserProvider()
AdviceWithTasks.beforeByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
updater.myComponent.isShowing()
VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)
log.info("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
setDuration(playedDurationWhenStarted + position - startPosition)
type.getConstructor()
new PartialEscapeAnalysisPhase(null,runtime(),null,assumptions,iterativeEscapeAnalysis)
ModalityState.defaultModalityState()
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
!chatSession.isDescriptorPersistent() && !(chatSession instanceof ConferenceChatSession)
new Rect(left,top,bottom,right)
artifact.getRootRelativePath()
g.cachesx(null)
LOG.info("AFTER decResourceRequest:" + " applicationId=" + " priority=" + priority.getPriority() + " resourceName="+ resourceName+ " numContainers="+ resourceRequestInfo.remoteRequest.getNumContainers()+ " #asks="+ ask.size())
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_PUT,updateVal,true,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
WebUtils.isForward(request)
telephony.getCdmaEriIconIndexForSubscriber(subId)
index <= 2
_typeSettingsProperties.toString()
mRecyclerView.scrollBy(hScroll,vScroll)
mSharedElementNames.size()
ExceptionUtils.handleThrowable(t)
StackHelper.isCraftingEquivalent(reqStk,invStk,true)
logger.error("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
data != null
SyncToAsyncChannel.class
assertEquals(0,deserialized.getOwnedEntryMemoryCost())
verifyAndPrint("After Canonicalization")
continueBox.setSelected(true)
mHandler.removeCallbacks(pae)
latch.await(1,TimeUnit.MINUTES)
mLocalDirtyRect.setEmpty()
new Paint(Paint.ANTI_ALIAS_FLAG)
activeCount == maxActive
122 + (USE_OLD_HISTORY ? 1000 : 0)
super.close()
ddmStructureService.deleteStructure(ddmStructure.getStructureId())
mFacetCategoryMap.get(packageName)
item(IRON_PLATELEGS)
ref.getAssociatedEntity()
minPriority == null ? 0 : minPriority
new IllegalArgumentException("string cannot be null")
DEBUG=true
feedEntryStatusDAO.findAll(user,true,0,1,ReadingOrder.desc,false)
? extends Reader
a.getInt(attr,0)
app().repositories()
tableHasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
config.getStorageImpl()
osmandSettings.DAYNIGHT_MODE.get().toHumanString(ctx)
packageNames.length == 1
position.offset(mLeft,mRight)
dependency == null
nodeManager.getAllNodes()
result.getCanonicalPath()
!isObjectMethod(method)
Promise<Void>
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsFromImports.kt")
timeout=5_000L
mHandler.obtainMessage(MSG_FINISHED,status,0,currentPackage)
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
i <= 'Z'
VMRuntime.is64BitAbi(getPreferredInstructionSet())
IOException e
colNameToSkip != null
Validator.isNull(getKeywords())
122L * dbManager.getDynamicPropertiesStore().getTransactionFee()
mGsmPhone.mSST.isConcurrentVoiceAndData()
scrollBy(mAutoScrollX,mAutoScrollY)
assertEquals(5,ti.nrOfInvocations)
length / 2
NetworkAddress.format(inet.address().getAddress())
timeout=5000
"Adding new Docker node " + node
FinalUtils.canFieldBeFinal(field)
nServers < 2
getTelecomService().hasVoiceMailNumber(accountHandle)
parent == null
SettingsActivity.class
fileIds == null
commit.getTime()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
isTrivial()
return false; 
factory.getSemaphore(packet.name)
result.getComponents()
delimiterText != null
DifDiffViewer.canShowRequest(context,request)
initializeMainContext(monitor)
setImageDrawable(icon)
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commit()
mService.getWifiServiceMessenger()
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs())
mPowerManager.isScreenOn()
new CacheConfiguration()
Log.warn("The given country from the response: " + billToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
idleTimeoutStamp=-1
endIndex == 0
new Error("type=" + type)
paramType.getName()
nowELAPSED < minTime
processor.getOrCreateManifest(archive)
javaLibsByFile.containsKey(javaLibrary)
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
assertEquals(6,beanCount)
log.warn("Can't check auto-commit state",e)
map.tryPut(key,newValue,8,TimeUnit.SECONDS)
getView() == null
mServiceMap.valueAt(userId)
WebSettings.setTextSize(WebSettings.TextSize.SMALLEST)
typeSettingsProperties.toString()
System.out.println("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
Ints.checkedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
type.getConstructor()
new IgniteException("Failed to start near cache " + "(a cache with the same name without near cache is already started)")
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)
pgl.loadVertexShader(fragURL)
podStatus != null
attributes.setProperty(ATTRIBUTE_MAXIMUM_POOL_SIZE,Integer.toString(initialPoolSize))
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
/**   * {@link Builder#prefixWith(Tree,String)}    */ public static Fix prefixWith(Tree node,String prefix){   return builder().prefixWith(node,prefix).build(); } 
factory.getDestination(getEndpointInfo("sna","foo","https://localhost:9002"))
!mUserVisibleHint && isVisibleToUser && mState < STARTED
Internal.prefixKeyWithSalt(key_b)
indexOf(source,ch,fromIndex)
ActivityManagerNative.getDefault().updateConfiguration(config)
readStayAwakeConditions()
assertEquals(provider.fetchCount,is(1))
LOGGER.lifecycle(exception.apply().toString())
mBluetoothGatt.registerScanner(this)
Boolean.parseBoolean(ac)
ImportAutoConfigurationWithItemsOne.class
LOG.info("Found operation: " + ori.getMethod().getName())
new PseudoDescription().load(getClass().getClassLoader())
removeCallbacks(null)
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
_cats + _nums + cid
_paginator.flatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
lValue.getType()
private Artifact getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
assertEquals(12,singlePackageBeanCount)
new String[4]
WordPress.getCurrentBlog().getRemoteBlogId()
toArrayHelper(array,1)
createNextExchange(processor,exchange)
profile.setMaxLength(255)
/**   * Called to resolve a input from a variable. Null if not possible.  * @param input is never null  * @return null if not possible/invalid  */ T parseValue(Object input); 
assertEquals(6,data.size())
/**   * Returns a wrapper around  {@code ciphertextSource}, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using  {@code additionalData} asadditional authenticated data. The additional data is not included in the ciphertext and has to be passed in as parameter for decryption.  */ InputStream newDecryptingStream(InputStream ciphertextSource,byte[] associatedData) throws GeneralSecurityException, IOException ; 
!mDreamsEnabledByDefaultConfig
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
clazz.getField("commandProcessor")
MinecraftServer.getServer().theWorldServer
GL20.glGetVertexAttrib(index,pname,params)
i <= 'Z'
Const.isEmpty(port)
TEST_MAP_SIZE=100000
file.lastModified()
dest.writeLong(this.milestone)
ap.getSsid()
what != -38
msbFragmentCollection.getFragmentCollectionId()
expandableView.getActualHeight()
table != null
nestedBuilder.nestedTypes("FormInstanceSettings")
collisionPoints.get(2)
log.warn("Null primary key column for '" + object.getName() + "'")
new StringBuffer()
client().admin().cluster().prepareHealth("t").setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(false)
label.getPackageFragment()
loc != null
removed.isEmpty()
mHorizontals == null
Util.threadFactory("Rate Limited Dispatcher",false)
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots))
length > 4
calendar.roll(Calendar.DATE,2)
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,sessionTimeZone,sessionTimeZone)
cache.localPeek(key,ONHEAP)
15 * 60 * 1000
thingType != null
assertEquals(3,versions.size())
TelephonyManager.getDefault().getPhoneType()
version == null
anchorView.getWindowToken()
Color.fromRGB(0x434343)
Matchers.anyInt()
JavaConstant[]
new LightweightThread(null,this)
new StringBuilder(239)
!mIsRecentsShown || mIsPipFocusedInRecent
XmppStringUtils.parseBareAddress(from)
expand("serializedforms/JobDataMapSerializationTest.testEmptyAllowTransientsMap.{?}.ser","JDK16","JDK17")
!(listener instanceof ISuiteListener) && !(listener instanceof ITestListener) && !(listener instanceof IReporter)
assertEquals(expectedPlan,actualPlan)
priority > 128
Files.copy(zipFile.getInputStream(zipEntry),file.toPath())
JedisConnectionException e
dynamicType.getLoaded().getConstructor()
isStatementNeededForInitializationOfVariable(statement,nextStatement)
ImmutableList<HostAddress>
0f
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
SOCKET_TIMEOUT_MILLIS=2000
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
users.get(i)
constraints.weightx=0f
zkWorker.getWorker()
getPreferences().setProperty(key,value)
this.field_92016_l
new Version(V_1_0_0_Beta2_ID,true,org.apache.lucene.util.Version.LUCENE_4_6)
disableForUser(what,token,pkg,mCurrentUserId)
ColumnFamilyInputFormat.class
c.name()
AccessException ex
value.isNull()
Uri[]
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,editorArea)
project == null
!(pyElement instanceof PyExpression)
event.getTime() > currentPlayTime
resources.getDimension(R.dimen.close_handle_height)
IndexReader.openIfChanged(oldReader)
stores.next().getAssertMap()
in.readShortx()
config.getMaxElementsInMemory()
new NullPointerException(checkedValue + " should not be null")
result == JOptionPane.NO_OPTION
LineNumberConvertor.Builder.createRight(data.getLines())
row.getTable().remove(row.getIndex())
((HotSpotResolvedObjectType)type).getFingerprint() == 0
new StringBuilder(730)
document.addKeyword("size",dlFileEntry.getSize())
serviceDataUuid == null
countNewlines(fragment) + 2
statistics.addPutTimeNano(System.nanoTime() - start)
i <= endValue
mPulseCallback.onPulseFinished()
mClocks.elapsedRealtime()
Error err
FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}",mod.getModId(),e)
assertEquals(result,"that/has/two/bangs")
new Paint()
type instanceof WildcardType || type instanceof TypeVariable
stat.st_ctim.tv_nsec.get()
response.set(ROLLED_BACK)
mAttachInfo == null
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
chargeUAh > 0
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"),BuildInfo.BUILD_SCM_REVISION,Key.of(KeyType.STRING,"0","0"),BuildInfo.BUILD_SCM_STATUS,Key.of(KeyType.STRING,"","redacted"))
selenium.isVisible("link=Control Panel")
4 < buf.length - count
entry.getKey().getHostName()
SocialActivitiesWebUpgrade.class
StringUtils.stringToInt(mediaId)
mLocalDirtyRect.setEmpty()
showNotifications.isNull()
logger.warn("Line-in of {} is not connected",remoteHandler.getUDN())
mActiveAgents.remove(info)
position.setLatitude(field.getJsonNumber("Long").doubleValue())
entity.saveComponent(delayedComponent)
child.getMeasuredHeight()
start < 0
type.getName()
assertEquals(result,"that/has/one/bang")
mListener.onFragmentInteraction(uri)
type.getConstructor()
new PrestoException(INVALID_CAST_ARGUMENT,e)
category.isDefaultOff() && !enabledRuleCategories.contains(category.getId())
zkController.getZkStateReader().getReplicaProps(collection,shardId,coreNodeName,null)
fraction * (nextValue - prevValue)
srcActivity.getParent() == null
floatBuffer.clear()
mSrc.onTouchEvent(e)
data != null
FilteringClassLoader filteredGroovy=classLoaderFactory.createFilteringClassLoader(groovyClassLoader,filteredGroovySpec); 
mConnector.execute("cryptfs","deleteuserkey",userHandle)
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
PsiTreeUtil.getParentOfType(context,JetClassBody.class,true,JetBlockExpression.class)
dest.writeLong(mSubId)
model.size() == 1
loaded.getLoaded().getConstructor()
LOGGER.error("Something went wront : {}",errorMessage,element)
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
DumpUtils.checkDumpPermission(mContext,TAG,pw)
data != null
from > to
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) == -1
typesToMatch.length != 1
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
urlToLoad.getText().toString().isEmpty()
obj.getName()
mode == Mode.COMPILED && mode == Mode.ROOTS
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0
packet.getFrom().split("/")
mock.expectedMessageCount(1)
mMncStr == null
Slog.e(TAG,"Unable to bind FusedProxy.")
append(text,simpleTextAttributes,selected)
params.remove(key)
assertEquals(0,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
QueryProcessor.processInternal("SELECT * FROM cql_keyspace.table2;")
consumer.receive(1000)
childrenExpanded ? mDividerHeight : mChildPadding
context.startRoute("consumer")
stepIdleStateLocked("s:shell")
mAuthorities.get(i)
LOG.error("Shortcuts of global AnActions should not be changed outside of KeymapManager")
this.thrown.equals("File must not be null")
DUE_DILIGENCE_MILLIS=50
DBG=false
m.getParameters()
StringBuffer buffer=new StringBuffer(); 
new ProtoFile("search.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getParentGroupId(),assetTagName)
yAmount > 0
new IndexWriter(dir,sa)
n.getCharno()
getLog().info("Compiling Kotlin sources from " + sourceRoots)
in.readObject()
opSetIm.addMessageListener(messageSourceService)
context.setDelayer(1000)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
new InternalTopHits(name,topHitsContext.size(),topHitsContext.sort(),Lucene.EMPTY_TOP_DOCS,InternalSearchHits.empty())
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
getTimeout()
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
selenium.isVisible("link=Control Panel")
req.getServletPath()
JvmDeclarationOriginKt.OtherOrigin(myClass,valueOfFunction)
myScopeSlider.setValue(3)
contains="doDirect"
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
dockedBounds.left - adjustment
Thread.sleep(50)
Long.valueOf(value)
new RuntimeException("error initializing deserializer: " + deserializer.getClass().getName())
61L + 122L
dynamicType.getConstructor()
tokensToUpdateInSystemKeyspace.add(token)
GroovyJavaSecurityTestsSuite.suite()
r.toRuleString(true)
parent != null
Log.e(TAG,msg)
selenium.isVisible("link=Control Panel")
@Nullable
new SystemVibrator()
mOuterRadius * 1.0f
new BeanDefinitionStoreException(bd.getResourceDescription(),curName,ex.getMessage())
8 + count
enablePreload=true
new IndexWriter(dir,new StandardAnalyzer(),true)
FSA.getInstance(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
inflater.inflate(R.layout.mdtp_date_picker_dialog,container)
new Builder().setDuration(5000).setTextColor(android.R.color.holo_red_light)
c.getDeclaredConstructors()
LOGGER.info("Register profile {} for organization {}",qualityProfile.getQProfileName(),organization.getKey())
repoSelectorPanel.add(label,BorderLayout.WEST)
isCreated()
assertEquals(2,StringUtil.countMatches(drl,"import "))
nestedBuilder.nestedTypes("FormInstanceSettings")
LOG.error("Error reading HTTP response from " + url)
hashInd == -1
fingerId == 0
dependency == null
WordPress.getCurrentBlog().getRemoteBlogId()
mHomeStack == null
referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS)
DataStream<OUT>
ChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper); 
? extends Exception
loaded.getLoaded().getConstructor()
mAllowGeneratedReplies=false
type.length() > 0
n.getCharno()
new NonAnnotatedConfigurationProblem(metadata.getClassName(),reader.getResource())
ec2 != null
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
buildName(node)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
((Number)s.first()).intValue()
mContext.startActivity(cantAddAccount)
TABLE_SYSTEM.equals(this.table) || TABLE_SECURE.equals(this.table)
Attribute attribute=(Attribute)o; 
mState != STATE_FINISHED
/**   * The lower value in the range.  * @return the lower value in the range.  */ Comparable getFrom(); 
TestSuiteEnvironment.getServerAddress()
delayMs < 0
capacity > 1 << 30
new IndexWriter(dir,analyzer,true)
greaterThan(1)
object.getDatabase()
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
LOGGER.debug("Skipped over attribute [{}] since it's already contained by the principal",k,v)
InputMethodManager.getInstance(mTargetActivity)
Pair.<DataType,Object>create(LIST,((SetType)type).elements)
argumentsLength == 2
showFullResult ? 999999 : limit
endpoint.setDataSource(ds)
line <= 0
gatecoinOrder.getType()
EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries
return false; 
statusBar.setRedraw(true)
"Interceptors contributed by endpoint: " + i2
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
/**   * The tested prototype instance  */ private final Prototype testedPrototype; 
in.getDepth() < outerDepth
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
W data=function.apply(entry.getValue()); 
tagName.equals(TAG_FORWARDING_INTENT_FILTERS)
expect(cluster.getClusterName()).andReturn("clusterOld").times(2)
volume.getMtpReserveSpace() * 1024 * 1024
blog.getRemoteBlogId()
this.getClass().getSimpleName()
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.REMOVE)
(dispatcherMapping & FORWARD) > 0
drained != null
callBacks.parallelStream()
"No class type found for " + className
user.getName()
sizeNeeded >= items.length
buf.getByte(buf.readerIndex() + 2)
!isLoaded && item.isOptional()
new ModelNode(10000)
FRAME_STATS_COUNT=14
Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION))
id=3
new Intent()
classNode.getName()
crashInfo.durationMillis != -1
del("*:*")
manager.beginTransaction().remove(fragment).commit()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
retriever.captureFrame()
new GroupTest(false)
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
mLastBatteryLevel != mHealthInfo.batteryLevel
status.isDirectory()
parseKeywordIf(ctx,"DOUBLE")
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
PoshiElement returnElement=null; 
resultEndpoint.expectedMessageCount(2)
new NodeStats(discoveryNode,no,indices,os,process,jvm,threadPool,fs,null,null,null,null,null,null)
promise.setFailure(new ClosedChannelException())
appearance.getString(attr)
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
Node[]
filterCollection.getBranchFilter() != null
telephony.getCdmaEriIconModeForSubscriber(subId)
win.mAppToken != null ? win.mAppToken.mAppStopped : false
versionTargetGraphMode.toString()
runPartialSorter(sorter,NUM_RECORDS,28)
Lists.newArrayList(stream1)
-2
policyFlags & SCAN_NEW_INSTALL
getBareJID(0)
WsHttpUpgradeHandler.class
session.initBounds(param)
i=0
logger.debug("tried to fail engine but could not acquire lock - engine should be failed by now [{}]",reason,failure)
Long.valueOf(val)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
display.getMetrics(mDisplayMetrics)
queueView.get().get(index.longValue())
user.isOwner()
/**   * {@code "x-frame-options"}  */ public static final CharSequence X_FRAME_OPTIONS=new AsciiString("x-frame-options"); 
VERSION=18
logger.error("{}",general)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:10500}")
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
compensationRange.inRange(compensation)
public static String replaceCommandVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _commandMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _commandMap.containsKey(matcher.group(1))) {     String varValue=getStringFromCommandMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
getConcept() != null || getConcept().getDescription() != null
sb.toString()
mData.size() > 0
inMessage.getExchange().getInMessage()
is("/home/source")
mMountTable.resolve(getPath(dir)).getPath()
modelCalcinator.render()
IllegalArgumentException e
mPtr != 0l
buf.writableBytes()
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
this.getInputStream()
id=7
new AlertDialog(P.mContext)
calendar.get(HOUR)
theiaProjectTree.waitOpenWorkspaceButton()
workQueue.getStats()
sender.getHostName()
windowIndex > playbackInfo.timeline.getWindowCount()
from > to
VideoContent.createRemotePhoto(fileReference,baseVideoContent.getW(),baseVideoContent.getH(),baseVideoContent.getDuration(),baseVideoContent.getFastThumb())
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ name+ " />"
uri.append(ENTITY_AMPERSAND)
Realm.getColumnIndices()
structuralLock.isLocked()
MetadataInstrument2.class.getName()
mDeviceOwner.getProfileOwnerName(i)
res.sendError(202,"Websocket protocol not supported")
_notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
onEvaluateInputViewShown()
from >= to
config.getMapConfig(mapName).setTimeToLiveSeconds(5)
super.getHibernateTemplate().executeFind(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     crit.add(Expression.allEq(queryMap));     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
zkController.getZkStateReader().getReplicaProps(collection,shardId,cd.getCloudDescriptor().getCoreNodeName(),leaderProps.getStr(ZkStateReader.CORE_NAME_PROP))
klass.getDeclaredMethods(false,declaredMethods)
SessionErrors.add(actionRequest,e.getClass().getName())
new int[101]
@Override public void receiveEndOfStream(int streamId) throws ConnectionError {   Stream stream=getStream(streamId,true);   if (stream != null) {     stream.receivedEndOfStream();   } } 
annotatorImplementation.custom(inputProps,customName)
focusOwner.isVisible()
"Refreshing storefiles of region " + regionToFlush + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
right < chartCalculator.mContentRect.left
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
/**   * @param ctx Transaction context.  * @param key Key.  * @throws IgniteCheckedException If failed.  */ private void unlock(TxContext ctx,Object key) throws IgniteCheckedException {   if (ctx.unlocked(key)) {     txCtx.remove();     Transaction tx=cache.tx();     assert tx != null;     try {       tx.commit();     }   finally {       tx.close();     }     assert cache.tx() == null;   } } 
telephony.isIdle()
h - x
DiagnosticFactory0.create(WARNING)
new CommandExecutor(context,message,this)
mock(Grouped.class)
entry.getClass()
node.getEndColumn()
RESULT_TIMEOUT=1500
display.getMetrics(dm)
getSslStoreProvider().getKeyStore()
assertThat(client).replicationController("fabric8-console-controller").hasId("fabric8-console-controller")
!isEnabled()
ZonePlannerMapDataServer.instance.loadChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
loaded.getLoaded().getConstructor()
blockIntervalAgo.getDifficultyTarget()
120 * 1000L
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
assertEquals(0,ginfo._val.residualDeviance(),1e-5)
StringBuffer buffer=getCurrentBuffer(); 
setSDesEncryptionToDescription(mediaType,description,null)
(mOomMinFreeHigh[5] * 7) / 8
Arrays.asList(new CommaWhitespaceRule(messages),new DoublePunctuationRule(messages),new GenericUnpairedBracketsRule(messages),new HunspellNoSuggestionRule(messages,this),new LongSentenceRule(messages),new UppercaseSentenceStartRule(messages,this),new MultipleWhitespaceRule(messages,this),new SentenceWhitespaceRule(messages),new WordRepeatBeginningRule(messages,this),new PostReformPortugueseCompoundRule(messages),new PortugueseReplaceRule(messages),new PortugueseWordRepeatRule(messages,this),new PortugueseWrongWordInContextRule(messages))
display.getMetrics(mDisplayMetrics)
module != null
GroovyBundle.message("groovy.configure.facet.question.text")
primitiveToWrappers.put(wrapperType,primitiveType)
{8,9}
tearDownOnShutdown.setSelected(false)
readdirCacheBuilder.maximumSize(maxStats)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; 
getTestVector().getNumNondefaultElements()
assertThat(emptyScannable.scan(Scannable.Attr.LARGE_BUFFERED)).isEqualTo(0L)
synchronized (this) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
sr.makeNextStartId()
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
wNoExecution.getSelection()
new NumberFormatException("No value for parameter named '" + name + "'.")
selenium.isVisible("link=Control Panel")
onRotationLockChanged()
copy1DRangeFrom(0,mType.getCount(),i)
ONE_MINUS_DST_ALPA(7)
selenium.isVisible("link=Control Panel")
maxCallCount=10
mBiometricUnlock.stopAndShowBackup()
IBinder.FIRST_CALL_TRANSACTION + 64
settings.getChangeBeforeFilter()
selenium.isVisible("link=Control Panel")
poolTimeoutMillis < 0
new Rect(left,top,bottom,right)
assertNotNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
logger.info("Aliasing common strings")
jabberStatusToPresenceStatus(o1,parentProvider)
platformVersion < MNC
wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())
getDelegate().getSupportedCipherSuites()
src[srcIdx]
isGreaterOrEqual(platformVersion,MNC)
f.exists()
ArrayIndexOutOfBoundsException e
getFailedExecutionException()
getRequiredDate(singletonMap("date","2017-04-03"),list)
LOG.info("Looking for service: " + service + ". Current token is "+ token)
Int4 v
traceInfo.get(key)
number=1
componentClasses != null
@NonNull
Thread.sleep(5000)
_logHandle.invoke(sb,request)
config.getInt("modulus")
assertEquals(itemsNumber.intValue(),myItems.length)
getVFile(name,true)
CompilerDirectives.inInterpreter()
assertThat(registration.getScopes()).containsOnly("openid","profile","email","address","phone")
mapConfig.getTotalBackupCount()
Boolean.valueOf(context.getInitParameter(VALIDATE))
Build.VERSION.SDK_INT >= 14
mScrollView.restoreDefaultFocus()
(mPrivateFlags & IS_ROOT_NAMESPACE) != 0
args != null & args.length == 2
maxEntries == -1
LOGGER.lifecycle(msg.apply())
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
project.getId()
checkPojoMetaClass()
c.content().readBytes(CONTENT_LENGTH)
getClientConfig().getAddressList()
LOG.error("Async Kafka commit failed.",cause)
result.getSqlType()
ViewFileSystemTestSetup.configWithViewfsScheme()
HistoryRecord r=(HistoryRecord)it.next(); 
pk.getColumnName()
rhs == null
(filterMap.getDispatcherMapping() & FilterMap.REQUEST) > 0
Long.valueOf(val)
public @Nullable Attachment getAttachment(AttachmentId attachmentId){   SQLiteDatabase database=databaseHelper.getReadableDatabase();   Cursor cursor=null;   try {     cursor=database.query(TABLE_NAME,PROJECTION,PART_ID_WHERE,attachmentId.toStrings(),null,null,null);     if (cursor != null && cursor.moveToFirst())     return getAttachment(cursor);  else     return null;   }   finally {     if (cursor != null)     cursor.close();   } } 
type.getConstructor()
greaterThan(0L)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
SC_FILE_EXTENSION_EXCEPTION=1001
return mDisappearingDuration; 
rdi != null
code.length() == 0
SamplingProfiler.newThreadGroupTheadSet(group)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).description(message)
builder.timeValueField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",8)
DataStream<OUT>
file.toString()
Thread.sleep(5000)
log.warn("\"FocusKiller\" library not found or there were problems loading it.",t)
planRouteContext.getSnappedMode().getSmallIconDark()
@NonNull String bluetoothAddress
DumpUtils.checkDumpPermission(mContext,TAG,pw)
anchorView.getWindowToken()
Simple.of(type)
OrderByComparator<T>
assetTagLocalService.checkTagsWithProperties(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
timeout=60_000L
log.warn("Problem in JSR223 script ",e)
instruction.getHatLiteral()
editor.selectNextTab()
new MqttFixedHeader(SUBACK,false,AT_LEAST_ONCE,false,0)
payload.writeBytesLenenc((byte[])each)
perc(.10,3)
result.expectedMessageCount(3)
EPS_THRESHOLD=1e-5f
securityMode != SecurityMode.None
new FileAttribute("python_language_level_persistence",1)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
getParser().parse(args)
IndexReader oldReader; 
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
model.replaceWhiteSpace(textRange,newWhiteSpace)
myCredentialsMap.containsKey(scope) || quietMode
selenium.isVisible("link=Control Panel")
rec.isValidLineInSource(pastViolation.getLine())
getMockEndpoint("mock:test.after.1").expectedMinimumMessageCount(10)
@Override public JavaExecSpec setIgnoreExitValue(boolean ignoreExitValue){   super.setIgnoreExitValue(ignoreExitValue);   return this; } 
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,1,Integer.MAX_VALUE)
builder.getNotification()
loaded.getLoaded().getConstructor()
LOGGER.debug("Could not find DropTargetDropEvent class",e)
mListener.onInputUpdated(inputId)
61L + 122L
private JLabel errorLabel; 
new IllegalArgumentException("Field is not supported")
ctClass.getDeclaredMethod("paintBackground",paintBackgroundParams)
Preconditions.checkNotNull(mBlockIdsOnTiers)
visibility != View.VISIBLE
url.toDecodedString()
Assert.assertEquals(2,definitions.size())
block == null
responseHeaderRegex == null
issue.getRuleKey().rule()
query.length()
executeRollbackScript(rollbackScript)
preAuthorizedToken != null
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
e.getMessage()
new BindException(concept,"concept")
final StringBuffer buf=new StringBuffer(); 
log.debug("Filtering key {} due to exception",k,e)
host_unkown
Disposer.dispose(timed)
parentPackage.equals(shortName)
format(arg,true)
DynamoDbConfigurationSource.class
copy.getGenericsTypes()
selenium.isVisible("link=Control Panel")
mFailedAttempts > MAX_FAILED_ATTEMPTS
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
FileTemplateManager.getInstance()
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor")
mPulseCallback.onPulseFinished()
playable.localFileAvailable()
cv.visitInsn(DUP)
near.remove(key)
lastPos != mTargetPos
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
cs.getMetaData()
action == KeyEvent.ACTION_UP
dirs[i].exists()
processEngineConfiguration.setEnableSafeBpmnXml(false)
verifyNothing(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
labels.slices()
BinaryFunction<T>
request.getServletPath()
getI18NString(key,Locale.getDefault())
PortletLocalServiceUtil.getPortletById(portletId)
bop.getBindingInput()
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; 
new Error("already exists: " + topic)
biomeList[biome.biomeID].typeList.toArray()
new CommandFormatException("Parsed request isn't available.")
mBiometricUnlock.stopAndShowBackup()
SCRIM_BEHIND_ALPHA_KEYGUARD=0.55f
Boolean.valueOf(attrValue)
assertSame(Locale.GERMANY,format1.getLocale())
ev.mStateSamples.length < NS
timeout=8000
selenium.isVisible("link=Control Panel")
mesh.getNumVertices() / 2
_fragmentEntryLocalService.deleteFragmentEntry(entryId)
threadCount=100
s.equals(s2)
loaded.getLoaded().getConstructor()
(read=channel.read(byteBuffer)) > 0
new IOException(sm.getString("iib.requestheadertoolarge.error"))
!mPreferredHost.equals("localhost")
LOG.warn("No SessionScavenger set, using defaults")
onNoteBlockTextClickListener != null
new Dimension(3000,GRID_SIZE)
FluxPeekHelper<T>
telephony.getCdmaEriTextForSubscriber(subId)
p.speedAlarm()
uri.getAssetName().toString()
((EventFactHandle)((ObjectVariableContextEntry)context).left).getStartTimestamp()
getMediaFileMimeType(imageFile,false)
ParseException pe
FastMath.max(origin,num.doubleValue())
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
listAdapter.notifyDataSetInvalidated()
mQsContainer.getX()
durableSubscriptions.get(key)
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,0)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
(application.change().upgrades(deployment.version()) || application.change().upgrades(deployment.applicationVersion()))
element.getStringValue()
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equals(type)
mDeviceOwner.getProfileOwnerName(i)
ReferenceCountUtil.safeRelease(holder)
parameters.substring(x + 1)
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button); 
GridCacheEntry<UUID,String>
RedisRule.bindToPort(6379)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
List<String>
fluentSetters()
delegate.open(filename,idType,highId,maxId)
super.getThickness() + 4
void execute() throws Exception ; 
DiagnosticFactory0.create(WARNING)
log.warn("Problem in JSR223 script ",e)
StringBuffer message=new StringBuffer(); 
Slog.wtfStack(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true)
getNodeAddresses(node)
rs.last()
mImm.hideStatusIcon(mToken)
ASTNode context
JournalArticleLocalServiceUtil.searchCount(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"general","","",null,null,status,null,true)
TextUtils.isEmpty(addresses)
XmlUtils.readIntAttribute(parser,ATTR_SDK_VERSION)
protected XmlElementDescriptorImpl createElementDescriptor(final XmlTag tag){   return new RelaxedNsXmlElementDescriptor(tag); } 
selenium.isVisible("link=Control Panel")
public DerivedBuilder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
IQ.Type.error == packet.getType()
mContext.startActivity(intent)
layer.setLayerPaint(paint)
Messages.getString("Spoon.Dialog.PromptSave.Message")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
parts.length < 1
now == currentPage
selenium.isVisible("link=Control Panel")
cSet.setConcept(this)
parcel.readCharSequence()
mp.getValue()
"Unknown or Unsupported Option '" + value + "'"
viewable=false
new IllegalStateException()
powerBase=60
new SelectOneSearchWidget(RuntimeEnvironment.application,formEntryPrompt)
SecondActivity.class
ps.pkg.mOverlayTarget != null
bukkit.getNote()
add(food(4),SARDINE,CAKE,_23_CAKE,SLICE_OF_CAKE,CHOCOLATEY_MILK,BAKED_POTATO)
mAdapter.getCount() == 0
tracesFile.mkdirs()
((GroovyObject)receiver).getMetaClass() != metaClass
PortletLocalServiceUtil.getPortletById(portletId)
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
is.setAmount(amount)
Integer.valueOf(2)
this.mTitle.compareTo(another.mTitle)
Boolean ignored
spellParser.isFinished()
getDataSource()
configInstance.getIntProperty(namespace + "eurekaServer.connectTimeout",5000)
stopWatch.taken() < 100
List<ConformanceConfig>
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Throwable getExceptionThrown(){   return exceptionThrown; } 
config.getInt("modulus")
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mHorizontals == null
floatBuffer.clear()
audioSink.toString()
((BCECPrivateKey)privKey).getS()
strokePaint.getTypeface()
cc.toPhoneString()
testMissingJarReferences(_netBeansJars,_NETBEANS_XML_FILE_NAME)
from + 11
new MccEntry(230,"cz",2,"Europe/Prague")
checkNotNull(jsonText,"Json should not be null")
selenium.isVisible("link=Control Panel")
when(rs.wasNull()).thenReturn(false)
Preconditions.checkNotNull(mBlockIdsOnTiers)
archiver.createArchive(project,archive)
id=12
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD))
Configuration.getInt(PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS)
ApplicationManager.getApplication().invokeLater(this::stopDumb,ModalityState.current())
Thread.sleep(10)
i <= MAX_AUDIO_PORTS
config().getInt(BASE_PATH + "tolerance")
three.setCoordinateIndex(LEAF)
new FileHyperlinkRawData("spec/personSpec.js",22,-1,3,s.length())
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
assertNotSame(-1,"Cannot find text '" + element + "' in file "+ path)
portletDataContext.setDataStrategy(portletDataContext.getDataStrategy())
LOG.info(e)
Slog.wtf(TAG,sb.toString())
new WorldPoint(3013,3181,0)
logger.info("license [{}] - expired",license.uid())
mWindowManager.removeView(mContainer)
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,DOUBLE,VARCHAR)
mPowerManager.isScreenOn()
attachmentArray.getString(1)
className.getClassName()
performDexOpt(packageName,instructionSet,true)
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
new Paint(Paint.ANTI_ALIAS_FLAG)
Math.abs(loss)
width - originY
case build: 
NetworkUtils.checkConnection(this)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
param.setResult(new FileNotFoundException("XPrivacy"))
assumeFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
methodRedefinitionResolver.hashCode()
LOGGER.error("Following side pane could not be found: " + componentName,e)
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true)
prettyPrintFileName(file,true)
platformVersion < MNC
protected abstract FBTree getTreeByKey(FBTree.Key key); 
mState != STATE_FINISHED
IllegalArgumentException e
result.ocFile.getMimetype()
selenium.isVisible("link=Control Panel")
Algorithms.isEmpty(ref)
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
tomcat.addServlet(ctx,"myServlet",new HelloWorld())
TestUtils.randomByte() + 127
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(new ForwardingLoggerInterceptor(memoryDatabase)).appendParameterBinder(Pipe.Binder.install(Forwarder.class))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
ApplicationMode.toHumanString(osmandSettings.APPLICATION_MODE.get())
POSITVE_Y(2)
c.getPath() == null
Integer.toString(flags,16)
1.08f * t
setWindowingMode(windowingMode,false,true,false)
super(project,labeler); 
Localization.menuTitle("Bibtex key patterns")
oldConfig.densityDpi != newConfig.densityDpi
entry.getType() != MarketEntryType.Platform
Mono.currentContext()
testConsumerConfig()
balloon.getShadowBorderSize()
" firstActiveTime=" + lastActiveTime
builder.appendColumns("4dlu, pref")
Throwable ex
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
newDefaultSubIdObj.equals(mDefaultSubId)
getNodeForElement(element,false)
assertTrue(mDisabled.hasFocus())
SUBCMD_TRIGGER_CHANNEL + " <channelUID> [<event>]"
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
evaluation.evalTimeSeries(predicted,actual)
r.ensureActivityConfigurationLocked(0,false)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
Thread.sleep(75)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)
mViewAbove.setCurrentItem(2,animate)
holder == null
UserHandle.getCallingUserId()
_typeSettingsProperties.toSortedString()
items[16]
"declaringClass".equals(propName)
MILLISECONDS.toNanos(20)
this.targetValidator.validateValue(beanType,propertyName,groups)
mMncStr == null
new StackManager(stackRoot,commonServices,osFamily,true,metaInfoDao,actionMetadata,stackDao)
logger.error("An exception occurred while parsing a date : '{}'",e.getMessage())
fingerId == 0
mValues[7]
diff <= 750
mBackdrop.animate().alpha(0f)
page != Page.ARCHIVE
mTileState
args.length < 1
LOGGER.error("no property for " + type + ", "+ format)
Exception e
info.crashInfo.stackTrace.length() > 10000
@Override @NotNull public FrameworkSupportConfigurableBase createConfigurable(final @NotNull FrameworkSupportModel model){   return new FrameworkSupportConfigurableBase(this,model,getVersions(),getVersionLabelText()); } 
mHandler.removeCallbacks(pae)
Boolean.valueOf(attrValue)
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
new IOException(sm.getString("TODO"))
_isNegInf(text)
WordPress.getCurrentBlog().getRemoteBlogId()
selectedPos < lastPos
resolver.acquireContentProviderClient(uri)
2 << 27
field.set(instanceRef,value)
e.getPresentation().setVisible(false)
Long.valueOf(timeout)
CANCELLED(130)
new Point(bounds.x + bounds.width,0)
objectCache.put(parent,objects)
/**   * Visits the specified value result.  * @param valueResult the value result  * @return the result of the visit  */ TVisit visitValueResult(ValueResultData valueResult); 
selenium.isVisible("link=Control Panel")
new IOException(msg)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
Float.parseFloat(position.getChildByName("Y").getText())
getMockEndpoint("mock:test.after.1").expectedMinimumMessageCount(10)
mapper.seAttributePrefix("ROLE_")
config.swapBones()
type.getCanonicalText()
timer.scheduleAtFixedRate(timerTask,period,period)
final Error e
isAvailable(status)
settings.readLPw(null)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
deltaY > 0
assertModel(MODEL).query("select state, count(*) as c from zips group by state order by state").limit(2)
err != 0
writeRepeatedBool(id,val)
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
mDrawer != null
FileUtils.setPermissions(fstr.getFD(),0660,SYSTEM_UID,PACKAGE_INFO_GID)
readOwners.size()
mContext.getString(R.string.branded_monitoring_description_app_personal)
user.getCompanyId()
Boolean.parseBoolean(ac)
loaded.getLoaded().getConstructor()
new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,trimmed)),SaveService.getFileEncoding("UTF-8")),true)
1024 * 1024 * 1024
annotation.getContainingFile() != annotationOwner.getContainingFile()
mState.isAlive()
checkPojoMetaClass()
writer.value(null)
mRemote.transact(START_ACTIVITY_TRANSACTION,data,reply,0)
getSsl(ClientAuth.NEED,"password","src/test/resources/test.jks")
AssetVocabularyUtil.findByG_N(groupId,vocabulary.getName())
logger.info("Recording function information")
anyAreClear(state,FLAG_SHOULD_RESUME_READS)
DLFileEntryMetadataLocalServiceUtil.getFileEntryMetadataByFileVersionId(dlFileVersion.getFileVersionId())
entry.getClass()
mAttributes.getFlags()
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name,map.size())
type.getConstructor()
args.length == 0
selenium.isVisible("link=Control Panel")
mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
new SonarException(String.format("Project [%s] doesn't exist on server",projectKey))
lineArgs[3]
new VariableInformation(10,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
viewFlow.getWidth()
MAX_INDEX_NAME_BYTES=100
selenium.isVisible("link=Control Panel")
valueFormatter != null
(ObjectDeserializer)value
mSyncStatus.get(i)
ENABLE_AGGREGATED_IN_MEMORY_STATS=true
new ByteSizeValue(50,ByteSizeUnit.MB)
create(config)
blog.getRemoteBlogId()
Number.class
m.getSize()
JavaType accessingClass
DBG=true
new DescribeInstances(awsConfig).execute(endpoint)
PixelFormat.formatHasAlpha(mRequestedFormat)
from >= to
verify(mWifiService,never()).stopLocalOnlyHotspot(anyString())
pc.getPlugin().equals(plugin)
verify(mWifiService).stopLocalOnlyHotspot()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
JSONValue.parse(value)
selenium.isVisible("link=Control Panel")
public Object clone(); 
? super View
scheduleRemoveStartingWindow(wtoken)
i >= 0
Color.rgb888ToColor(color,colorInt)
findTypeFromRef(expression)
mapper.getTypeFactory().uncheckedSimpleType(InspectContainerResponse.class)
return 7; 
assertNotNull(message + ": expected should not be null",value)
new RendezvousAffinityFunction()
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help)
!scriptsToUpdate.add(n)
new ViewPagerAdapter(this,getIntent().hasExtra(TOKEN_MANUAL_SHOW))
rows.get(0).key.key.equals(startKey)
final Object firstLineKey=lines.firstKey(); 
topActivity != null
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     final ProgressWindow progressWindow=new ProgressWindow(false,null);     progressWindow.setTitle("Looking for TODOs...");     progressWindow.setText("Please wait...");     final Runnable process=new Runnable(){       public void run(){         if (myAllTodos == null)         return;         ApplicationManager.getApplication().runReadAction(new Runnable(){           public void run(){             myAllTodos.rebuildCache();             myCurrentFileTodos.rebuildCache();           }         } );         ApplicationManager.getApplication().invokeLater(new Runnable(){           public void run(){             myAllTodos.updateTree();             myCurrentFileTodos.updateTree();           }         } ,ModalityState.NON_MMODAL);       }     } ;     Thread thread=new Thread(new Runnable(){       public void run(){         ProgressManager.getInstance().runProcess(process,progressWindow);       }     } ,"Todo finder");     thread.start();   } } )
cursor.getString(COLUMN_NAME)
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
myProjectView.isSortByType(myPaneId)
FBUtilities.getBroadcastAddress()
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest")
return mDisappearingDuration; 
startExpression != null
selenium.isVisible("link=Control Panel")
VERSION=41
((Number)s.first()).intValue()
file.contains("http://")
saveJSONArray(json,filename)
target.getParentFile().exists()
getDataSource()
mUserPaddingStart > 0
GenericObjectContainer parent
connection.pexpire(key,millisecondsTimestamp)
modItems == null
assumeFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
mPowerManager.isScreenOn()
LOG.error("Value selected for the metric should be a number: " + context)
mPulseCallback.onPulseFinished()
organization.toEscapedModel()
Integer.valueOf(taskIdStr)
application.getApplicationContext()
WebSockets.sendPingBlocking(applicationData,webSocketChannel)
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
ConfigureUtil.configure(closure,this)
SimpleHandler.getInstance().post(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } )
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static JWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
timeout=3000
@NonNull
mHomeStack == null
mapper.writerWithType(planType)
data.remaining()
meta.isUsingAuthentication()
new LightweightThread(null,this)
state != null
!ResultSetUtils.isServerSideFiltering(controller) && !controller.isHasMoreData()
assertTrue(found)
getDelegate().getSupportedCipherSuites()
input.getString(action)
Collectors.toMap(Entry::getKey,Entry::getValue)
((JetPostfixExpression)element).getOperationSign()
new StepMeta(log,"SelectValues",stepName,svm)
dw != mBackgroundHeight
@Specialization protected Object fromLong(long value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
ps.pkg.mOverlayTarget != null
type.getConstructor()
new SpannedString(first,false)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mEncoder.swithToHardEncoder()
@PATCH
!version.equals("1.2") && !version.equals("2.0")
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
new RuntimeException()
modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)
Integer.valueOf(leftStr)
mService.oneTouchPlay(getCallbackWrapper(callback))
typeTreeStruct.embedded(false)
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0)
TestSuiteEnvironment.getServerAddress()
script_params.addParameter(myConfig.getParams())
mapServiceContext.hasRegisteredListener(mapName)
c.deactivate()
searchBack.postDelayed(new Runnable(){   @Override public void run(){     searchBack.setImageDrawable(ContextCompat.getDrawable(SearchActivity.this,R.drawable.ic_arrow_back_padded));   } } ,600)
new Paint(Paint.ANTI_ALIAS_FLAG)
view.getStylesheets().add(AbstractDialogView.class.getResource("Main.css").toExternalForm())
ResponseImpl description(String description); 
scheduleRemoveStartingWindow(wtoken)
dockedBounds.bottom + adjustment
ContainerUtil.newTroveSet("intellij.platform.commercial","intellij.idea.ultimate.resources","intellij.platform.commercial.verifier","intellij.diagram","intellij.diagram.impl","intellij.uml")
addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)
mService.getWifiServiceMessenger()
packet.getAttribute("from").split("/")
m.isTablePerHierarchy()
service.asBinder().isBinderAlive()
JspUtil.makeXmlJavaIdentifier(varName)
c < 18
layer.setInput(input)
range.getFrom()
(dispatcherMapping & REQUEST) > 0
checkPojoMetaClass()
i < 10
column.getName()
JiveGlobals.getPropertyEncryptor().encrypt(propValue)
new TreeMap<>()
singleLanguageProfile.getName()
Long.valueOf(args[2])
weekRange.roll(Calendar.DATE,6)
Randomness.shuffle(builders)
new Button("cancel",new StringResourceModel("cancel",(Component)null,null)){   public void onSubmit(){     doReturn();   } } 
MeasureSpec.makeMeasureSpec(MeasureSpec.EXACTLY,myHeight)
tempPinnedTaskBounds != null
vel < mFlingGestureMinDistPx
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
selenium.isVisible("link=Control Panel")
new StringLengthValidator(1)
i > speedBumpIndex
IllegalArgumentException.class
if (addThem) {   for (int i=0; i < this.getCount(); i++)   if (!mListAppSelected.contains(this.getItem(i)))   mListAppSelected.add(this.getItem(i)); }  else mListAppSelected.clear(); 
type.resolveMember(name,location,direction,resolveContext)
synchronized (mAccounts) {   writeStatusLocked(); } 
old + 17
si.id == id
new GridBagConstraints(0,1,1,1,1.4,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,0),0,0)
dest.writeParcelableArray(remoteInputs,flags)
fieldType.storeTermVectors()
return false; 
verify(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
ArrayList<UsageInfo>
resources.getDimension(R.dimen.close_handle_height)
new ObjectMapper().reader(IspResponse.class)
buffer.nextOneRow(changeColumns)
Mono.currentContext()
am.getClass().getDeclaredField("mContext")
from >= to
child.jni_YGNodeSetOwner(child.mNativePointer,0)
primaryIndexes.size() > indexes.size()
primaryServer.getClass()
LoopContextStepRetrieval retrievalToAdapt
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
_TestUtil.randomUnicodeString(random,fixedBytesLength)
A args
Long.valueOf(val)
analysis.primaryKeyLiterals().size() > 1
header.getX()
query.field("relyOnPrevCycle").equal(true)
@Override protected FBTree getTreeByKey(FBTree.Key key){   return key != null ? myLibrary.getLibraryTree(key) : myLibrary.getRootTree(); } 
mGpsListener != null
getDelegate().getSupportedCipherSuites()
Byte.valueOf(param.getValue())
assertEquals(response.getStatusCode(),302)
filename.endsWith(".jpg")
unfinishedVerificationHere()
message.getContact()
GroovyJavaNonSecurityTestsSuite.suite()
times(2)
Exception e
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
mNetd.setDnsServersForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
codeFormatter.processText(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true))
mWasActivatedOnDown || !mNeedsDimming
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Builder<T,B>
MockReset.before()
policy_empty == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
entry.notification.clone()
(Class<? extends TruffleObject>)returnClass
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
mConferenceById.containsKey(callId)
mProviderRequest.reportLocation && !mDisableGps
logger.info("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
pluginClasspathUrl.getFile()
null != Configuration.getResource(dataSourceName)
StampFactory.declared(type.getComponentType())
mMat[6]
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
Collection<DataSet>
UfsUtils.loadUfs(mFileSystem,new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
submitToExecutor()
compression.compressor == null
String prefix
a.getInt(R.styleable.CollapsingToolbarLayout_scrimVisibleHeightTrigger,-1)
data != null
connectedHeaders.setAcceptVersion("1.1")
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,prevDeviceState,newDeviceState)
dataSourceContainer.getDriver().getName()
new MalformedException("Unused message placeholder: " + phName,objLitNode)
total=total / partCount
evaluate("value = read_config('foo', 'bar')").lookup("value")
AttributeCache.instance().get(packageName,realTheme,styleable.Window)
asList(4L)
new HashSet<Class<?>>()
N > 0
memoryReservation.getAndAdd(bytes)
queryDefinition.getOrderByComparator()
telephony.getNetworkTypeForSubscriber(subId)
name.substring(0,6)
diff <= 750
hostConfig.getCpuPeriod()
popupWindow.setWidth(menuWidth)
A args
containerLog.error(sm.getString("dataSourceRealm.getRoles.exception",username))
fingerId == 0
Collectors.groupingBy(OrderRoot::getFile)
Calendar.getInstance(JSON.defaultLocale)
obj.getName()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
colDesc.getType()
COOKIE_SYNC_MANAGER=true
d1.isTimeOut()
this(null,null,null,false); 
GLMTest.residualDevianceTest(model) + 1e-2
return false; 
classOrVariableName.matches(allowedClassName)
oldConfig.densityDpi != newConfig.densityDpi
target.isAuthorized("essentials.world." + toPlayer.getWorld().getName())
getJmxUrl(name,rmiRegistryPort,rmiServerPort)
mState.isAlive()
SCAN_STATUS_PARTIAL=0
DEFAULT_ROW_FLUSH_BOUNDARY=80000
group.getAvatar() != null
delegate.writeEmptyElement(prefix,namespaceURI,localName)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
button.setPadding(10,5,10,5)
in.readShortx()
categoryMap.get(category.getParentId())
TelephonyManager.getDefault().getPhoneType()
delaySoFar > mReEnableDelayMillis
new VectorDrawableAnimatorRT(this)
new GridQueryPortableFieldsIterator(res.iterator(),cctx,cctx.keepPortable())
fileAnnotation.setRevisions(revisions)
this.getDrawnBoundingBoxE6().getLatitudeSpanE6()
connection.subscribe(jedisPubSub,patterns)
duration.getMinutes()
rep.getStepAttributeString(id_jobentry,"success_condition")
selenium.isVisible("link=Control Panel")
"Unable to get queryfields for SQL: " + Const.CR + sql
ap.getSsid()
Multimap<Feature<?>,Feature<?>>
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Simple.of(Runtime.NoneType.class)
assertEquals(10,definitions.size())
assertEquals(0,sink.getModified().size())
mapConfig.getTotalBackupCount()
assertEquals("<?xml version=\"1.0\"?>\r\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"+ "    <modelVersion>4.0.0</modelVersion>\r\n"+ "    <groupId>test</groupId>\r\n"+ "    <artifactId>project</artifactId>\r\n"+ "    <version>1</version>\r\n"+ "    <dependencies>\r\n"+ "        <dependency>\r\n"+ "            <groupId>group</groupId>\r\n"+ "            <artifactId>artifact</artifactId>\r\n"+ "            <version>version</version>\r\n"+ "        </dependency>\r\n"+ "    </dependencies>\r\n"+ "</project>",VfsUtil.loadText(myProjectPom))
lineArgs[1]
TestTextureArray app=new TestTextureArray(); 
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
CharSequence message
project.getId()
triggerProto.getAfterEndOfWidow()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,commentFragment).commit()
Exception e
expandableView.getActualHeight()
ENABLE_SQLITE_LOG=true
expression.getParent()
PackageManager.SIGNATURE_MATCH != pm.checkSignatures(authUid,targetUid)
probe.getIrradianceMap() == null
mGpsListener != null
exchange.getPartitioningScheme().isReplicateNulls()
Exception e
sleepAtLeastMillis(1)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
item.getMedia().getId() == id
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .run()
CompileJSR223TestElements.class
PlatformTestUtil.startPerformanceTest("VF.getPath() performance failed",3000,new ThrowableRunnable(){   @Override public void run(){     for (int i=0; i < 1000000; ++i) {       file.getPath();     }   } } )
Double.parseDouble(args[1])
ClientBase.class
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new IndexWriter("index",ANALYZER,false)
new PBEKeySpec(secretKey.toCharArray(),char2byte(salt),65536,256)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
structuralLock.isLocked()
e.getStateChange() == ItemEvent.SELECTED
ONE_MINUS_DST_ALPA(7)
IllegalStateException ise
getJSDocTypeWithBraces(operation)
this.typeDescriptorCache.put(pd,td)
postJob.getClass()
BufferUtils.newByteBuffer(fileSize)
Long.valueOf(nfcid2,16)
(Double)array[this.index]
Values.stringValue(stringValue(offset))
AbstractMethodError e
OverridingMethodsSearch.search(method,method.getUseScope(),true)
selenium.isVisible("link=Control Panel")
defaultListenerAccess != null
getMyApplication().getSettings().SHOW_IMAGES
config.getMaxElementsInMemory()
policyFlags & SCAN_REQUIRE_KNOWN
new File(FilenameUtils.getBaseName(file) + "_dex2jar.jar")
setupDockerConfiguration(configurationBuilder,envs,commandShell)
completionContext.offset >= end
AbilityRegistryProxy.setAsRecoverable(itemStack)
(parentRestricted && !restricted) || (!parentAsked && asked)
DUPLICATE_OPS_TOLERANCE=5
ScriptingUtil.exec(null,portletObjects,language,script)
new String(temp)
new FakeCommitsInfo(fakeCommits,base,resultRef)
TransMeta.addStep(1,deletedStep)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
Assert.assertEquals(118L,ownerCapsuleNew.getFreeNetUsage())
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
showPoint != null
cacheConfig.isPopulateCache()
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
DvcsUtil.guessRepositoryForFile(project,getRepositoryManager(project),HgVcs.getInstance(project),DvcsUtil.getSelectedFile(project),HgProjectSettings.getInstance(project).getRecentRootPath())
in.readVInt()
new Dimension(700,600)
zeroState[1][1]=0.25F
hasFocus()
childLeftTuple.reAddLeft()
JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
Throwable t
DEBUG=true
recordSetVersion1.getVersion()
!finished
analyzedSentence.getTokens()
new ImmutableInstruction3rc(Opcode.INVOKE_DIRECT_RANGE,instruction.getRegisterCount(),instruction.getStartRegister(),instruction.getReference())
l.getInt() != null
processNonPersistent=true
outboundRequest("localhost",port,httpRequest)
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,30_000)
IOException ex
component.setUnderlined(object.get("obfuscated").getAsBoolean())
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
output.flush()
_connector.getResponses("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
LOGGER.debug("Could not execute paste",ex)
IBackupManagerService svc=mService; 
dest.writeParcelableArray(remoteInputs,flags)
Period.years(lExpr.getIntervalYear())
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","my-app")
assertEquals(countDownLatch.getCount(),3L)
DEFAULT_WIDTH=0x008000000
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
Generics.newHashMap()
new LayerView(this,0xff00ff00)
clearFromMember.start()
tests.add(objectExpressionType.getGenericsTypes()[0].getType())
selenium.isVisible("link=Control Panel")
poList[1]
Text val=new Text(); 
logger.info("license [{}] - invalid",license.uid())
!COMMENTS.contains(type2) && BLOCKS.contains(parentType) && !(node1.getTreeNext() instanceof PsiErrorElement)
Log.w(TAG,"Session failed to close due to remote exception",e)
SyncEngine.cancelSyncAccountTasks(syncAccount.getSyncAccountId())
TupleDomain.none()
removeGzipFromETag(etag)
units <= 0
type.equals(SyncConstants.TYPE_FILE)
"Second position set to " + pos1 + " ("+ region.getArea()+ ")."
List<ActivityManager.RecentTaskInfo>
params[10]
Thread.sleep(1000)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
InstanceCreationUtils.newInstance(view.getContext(),entry.getValue(),VIEW_DELEGATE_CONSTRUCTOR_SIGNATURE,null)
params.getSimulatePlatformVersion()
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
ctx.alloc().heapBuffer()
isPathClassLoaderName(classloaderName)
state.value == rotationLocked
subscriptionManager.getOnSubscribeFunc(new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){   } } ,new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){     lastNotification.get().accept(o);   } } )
LOG.error(e)
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
LOG.error(e)
logger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
Set<Renderer>
public static BuildParameters addBuildParameterGitSource(BuildParametersBuilder builder,String gitUrl){   return builder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource().build(); } 
Collection<String>
TextComponent.toLegacyText(message)
fraction * (nextValue - prevValue)
Localization.lang("Tools")
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
groupType == null
lp.onResolveLayoutDirection(layoutDirection)
factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)
bundleBinaryPath.getParent()
weekRange.roll(Calendar.DATE,6)
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
transaction.commit()
DEBUG=true
@NonNull String bluetoothAddress
c.deactivate()
times(2)
concLvl < 2
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
/**   * Creates an empty struct with the given location.   */ public Info createEmpty(Location loc){   return SkylarkInfo.createSchemaless(this,ImmutableMap.of(),loc); } 
containerName == null
entry.getKey().get(12,String.class)
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
new Duration(2,SECONDS)
c.getAddMessageStatement()
vCard.getTextTrim()
Throwable t2
SystemTable.setLocalHostId(hostId)
sep == null
row.slider.setProgress(newProgress)
String channel
? extends Exception
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
Integer.valueOf(taskIdStr)
StringUtil.equals(packageName,filter)
-1772260513
param.setResult(xparam.getThrowable())
selectedFile != null
binding.getKey().getTypeLiteral().getType()
Assertions.expectThrows(EmptyStackException.class,() -> stack.pop())
reader.getString(reader.readSmallUleb128())
final GenericObjectContainer parent
_viewFinder.setFlashMode(this._torchMode)
Integer.valueOf(taskIdStr)
logger.error("Table spec retrieval failed, couldn't read file: " + sourceFile)
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
verify(tsService,Mockito.timeout(5000)).save(deviceId,expected)
mPositionAnimator.isRunning()
win.isDrawnLw()
chunkLength != C.LENGTH_UNBOUNDED
parent.setCoordinateIndex(0)
loaded.getLoaded().getConstructor()
assertThat(props).hasSize(5)
mAttributes.getFlags()
dic.buildRouterChain(invokers)
stream.myStorage == this
Double rate
Integer.toHexString(quality)
(JobResponse)response
pmmlScorecard.isUseReasonCodes()
HELSINKY{   @Override public ServiceNowProducer get(  ServiceNowEndpoint endpoint) throws Exception {     return new HelsinkiServiceNowProducer(endpoint);   } } 
mHandler.postDelayed(pae,timeout)
entry.getCheckName().equals(checkAlias)
user.getUserId()
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
/**   * @param arg  * @return  */ Target convert(Source arg); 
Thread.sleep(5000)
mTfs.free(mTfs.open(path))
gatt.periodicAdvertisingEnable(this.advertiserId,enable)
TestPackage.foo(a,1,"1","!")
defaultListenerAccess != null
DBG=true
r1
page.getSizeInBytes()
fileAccess.updateFile(new Runnable(){   public void run(){     cache.close();   } } )
_typeSettingsProperties.toString()
AdviceWithTasks.removeByToString(route,toString,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
Set<Long>
Double.max(dgg / gg,0.0)
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
CharSequence message
callExpression != null
comboBox == myInputComboBox
mPowerManager.isScreenOn()
mMat[9]
mUserManagerHelper.getAllUsersExcludesSystemUser()
System.nanoTime()
mHandler.removeCallbacks(pae)
(Integer)src
new AssertionError("Should not be called")
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static FactoryOperations getStaticFactory(SQLDialect dialect){   return DEFAULT_INSTANCES[dialect.ordinal()]; } 
new String(bytes)
network.successors(producedNode)
new TwoDimTable("Coefficients","glm coefficients",names,new String[]{"Coefficients"},colTypes,colFormats,"names")
colors.getResourceId(i,0)
elementType == null
propertiesFile.equals(myResourceBundle.getDefaultPropertiesFile().getVirtualFile())
String canonicalPath
Iterables.find(getPlayers(),new Predicate<ProxiedPlayer>(){   @Override public boolean apply(  ProxiedPlayer input){     return (input == null) ? false : input.getName().toLowerCase().contains(partialName.toLowerCase());   } } )
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
validator.warning("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
CoerceFailedException.simple(pathRelativeToProjectRoot,object,getOutputClass())
popupWindow.setWidth(menuWidth)
disableForUser(what,token,pkg,mCurrentUserId)
30 * 60 * 1000
GridCacheProjection<UUID,String>
Util.convertDpToPixel(dataSet.getBarBorderWidth())
lock.isLocked()
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
me.getComponent() == myCurrentComponent
CLOB_LENGTH=99999999
Map<Object,RealmObject>
Boolean.valueOf(attrValue)
return mAppearingDuration; 
return false; 
Cloud.class
descrTextView.setVisibility(color)
OverrideImplementUtil.getMethodSignaturesToImplement(aClass)
builder.length() == 0
this.mVelocityX
this.notifyDataSetChanged()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
serialVersionUID=6784839055053605375L
sampleFormat != null
name="java:/queue/myAwesomeQueue"
centerButton(mButtonNeutral)
(byte)0xff
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).description(message)
dir.getPath()
mGesturesPopup != null
selenium.isVisible("link=Control Panel")
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
position < -1f || position > 1f ? 0 : 1f - (scale - 1f)
expectedType.equals(schema.getField(field).getType())
mRCStack.remove(rcse)
info.crashInfo.stackTrace.length() > 10000
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
DefaultCacheKeysFactory.getEntityId(cacheKey)
mState.isAlive()
new StatsLogEventWrapper(tagId,6)
this.evaluator.prepareLeftObject(handle)
collection.addOnScrollListener(onScrollListener)
Long.valueOf(id)
field.createField(fieldType.indexedToReadable(indexedValue),0.0f)
s.tryAcquire(4,1,TimeUnit.SECONDS)
LOG.error("Couldn't upload logs for " + containerId + ". Skipping this container.")
epochNum=5
IOUtils.toString(stencilsetStream)
RegionsRegistryConverter.class
sampleFactory.getConstructor()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
containerName.endsWith("set")
f.exists()
new ColorUIResource(0xFF5370)
BIG_ENDIAN=0x78562312
timeUnit.toSeconds(timeToLive)
logger.error("{}",builder.toString())
stompConnection.receive(1000)
size=32
initialCapacity < capacity
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
mService.setUidPolicy(UID_A,POLICY_NONE)
parentGroupId == 0
DEBUG=true
realm.assertThread()
functionFactory.exp(iX)
new File(mantleThemeCss)
accessLevel1 == accessLevel2
keyCode == KeyEvent.KEYCODE_BACK
151 + (USE_OLD_HISTORY ? 1000 : 0)
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Math.max(tmp.getMaximumFractionDigits(),6)
ServiceLoader.load(WorkerFactory.class)
mListener.onInputUpdated(inputId)
GRADIENT_SCRIM_ALPHA=0.70f
log.error("Couldn't get font " + fontName)
waitLatch.await(25,TimeUnit.MILLISECONDS)
new IntentStarter(ctx,TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA)
jobsLogs.operationsLogGetter()
StringBuffer buffer=new StringBuffer("{ "); 
display.getMetrics(dm)
(currentCon != null) && (currentCon.getMode() == Conversation.MODE_MULTI) && (!alwaysNotify)
delayMs < 0
Integer id
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
fragmentEntryPersistence.filterCountByG_FCI(groupId,fragmentCollectionId)
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
Location location=app.getLocationProvider().getLastKnownLocation(); 
checkPojoMetaClass()
val == null
response.setStatus(400)
comparator.compare(value,answer) < 0
LocalFileSystem.getInstance().findFileByIoFile(new File(path1))
NB_CACHED_PARAMS=20
loaded.getLoaded().getConstructor()
mTfs.createFile(new TachyonURI("/root/testFile1"))
intent.resolveTypeIfNeeded(getContentResolver())
type.getConstructor()
buildData.getBuildURL()
new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
mAccount.hasSpamFolder()
result.whenCompleteAsync((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
defaultListenerAccess != null
chargeUAh > 0
com.android.internal.util.DumpUtils.checkDumpPermission(mAm.mContext,TAG,pw)
Thread.sleep(1000)
mMenu.getVisibleItems()
e.getMessage()
new GridConcurrentHashSet<>(entries.size(),U.capacity(entries.size()),1)
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
mDeviceProvisionedController.isDeviceProvisioned()
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .run()
telephony.getCdmaEriIconModeForSubscriber(subId)
accountService.withdrawBitstampFunds(Currency.BTC,new BigDecimal(1).movePointLeft(4),"1PxYUsgKdw75sdLmM7HYP2p74LEq3mxM6L")
selenium.isVisible("link=Control Panel")
IBackupManagerService svc=mService; 
argCount > paramCount
b.get()
fingerId == 0
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
Log_OC.wtf(TAG,"Server check tried with OperationService unbound!")
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
event.isCanceled()
synchronized (this) {   mgr=managersCache.get(clz);   if (mgr != null)   return (T)mgr;   try {     Method method=clz.getDeclaredMethod("newInstance",KylinConfig.class);     method.setAccessible(true);     mgr=method.invoke(null,this);   }  catch (  Exception e) {     throw new RuntimeException(e);   }   managersCache.put(clz,mgr); } 
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"))
log.error("Error parsing command line: " + e.getMessage())
diffs.isEmpty()
testData.numExamples()
start > offset
asyncContext.continueAsyncTraceObject()
currentFragment=FRAGMENT_LOGIN
Stream.of("CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
text.length() != 0
PFLAG3_ASSIST_BLOCKED=0x100
mAppliedTemporaryAutoBrightnessAdjustment=true
a.getDimensionPixelOffset(attr,0)
FILES[i]
LOG.error("Skipping invalid VCS root: " + root)
queryType != null
name.length() > 0
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
service.getFullName()
buildConfigurables()
new CompositeException(e,t)
serializer.serializeForInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
ir.mHandler != null
createFromResourceStream(res,value,is,srcName)
Utility.isConnected(context)
size=5000
headerName.startsWith("proxy") || headerName.equals("keep-alive")
LAST_VERSION=486
stack.peekFirst()
LOG.error("Process %s exited with error code %d",buckPyProcess,exitCode)
FastMath.max(origin,num.floatValue())
logger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
m.isVersioned()
r != null
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),true)
fields.put(PERMISSIONS,permissions)
File.createTempFile("push-attachment","tmp")
StringUtils.escapeForHtml(text,true)
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
folder.toEscapedModel()
ApplicationPidFileWriter.class
is("/home/source")
log.error("Error opening session file " + file.getAbsolutePath())
near.remove(key)
FBUtilities.getLocalAddress()
controller.getState() != ServiceController.State.UP
Thread.sleep(20)
distanceToView(focused) > 0
EMERGENCY_ASSISTANCE_ENABLED=false
columnController.createColumns()
ValueGeometry.get(bytes)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
type.getConstructor()
mPulseCallback.onPulseFinished()
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted)
props.getProperty(SAVE_IDLE_TIME,FALSE)
lightsOut()
peopleListFromJSON(jsonArray,localTableBlogId,false,false)
service.getAllGtasksFromListId(DEFAULT_LIST,false)
return true; 
time < 10
deltaY < 0
return filename; 
selenium.isVisible("link=Control Panel")
minY + minY
buildData.getUserContentRelativePath()
apnContext.getWaitngApns()
Namespace.CURRENT.toString()
zipInspector.assertFileExists("assets/secondary-program-dex-jars/metadata.txt")
child1.setBytes(100)
getHeight()
checkPojoMetaClass()
CommonBundle.getErrorTitle()
defaultListenerAccess != null
mOneShot=true
odi.release()
PortalInstancesWebUpgrade.class
entry.get() == null
Middle middle2=new Middle(); 
new MaterializingOperator(operatorContext,sourceType)
um.getUsers()
WeakReference[]
HashMap<String,FilterBuilder>
executorService.scheduleAtFixedRate(fileWatcherRunnable,0,30,TimeUnit.SECONDS)
mat2.isEqual(mat1)
Exception e
getVal(path,false)
startServer(getExportFolder())
_typeSettingsProperties.toSortedString()
aClass.getContainingClass()
getAssertNoDeletesDirectory(newDirectory())
issuerBuilder.build()
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) != PackageManager.PERMISSION_GRANTED
adapter.unregisterDataSetObserver(mObserver)
allowPrivate.isNull()
"Can't have more than 32767 vertices per batch: " + maxTriangles
LOG.info(" job " + job.getName() + " completed ")
topActivity != null
NoopChatHandlerProvider.class
Long.valueOf(args[1])
bucket.exists()
attributes != null
logger.info(String.format("encoded %s as %s",obj,str))
assertEvaluate(buildFile).lookup("txts")
Long.valueOf(attrValue)
Wait.waitFor(new Wait.Condition(){   @Override public boolean isSatisified() throws Exception {     return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;   } } ,60000)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
NATCommand.check(externalAddress,InetAddress.getByName(ipv6Str))
@NotNull
FunctionTypesKt.isExactFunctionOrExtensionFunctionType(valueParameterOrReceiver.getOriginal().getType())
i <= 'Z'
getAllAncestors()
_typeSettingsProperties.toString()
mediaVideoItem.getHeight() * 2
KeyValueBinding attributeBinding
/**   * Transforms the given object, and returns the transformed value.  * @param original The object to transform.  * @return The transformed object.  */ R transform(I original); 
selenium.isVisible("link=Control Panel")
/**   * @return the root {@link PkgControl} object loaded.  */ private PkgControl getRoot(){   return stack.peek(); } 
par == null
!match && compareCompat
progress.dismiss()
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(555,TimeUnit.SECONDS)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
Mockito.anyString()
fluidIDs.containsKey(fluid.getName())
indexer.getSummary(result,themeDisplay.getLocale(),snippet,portletURL)
updaterOrigina.getStateViewArray().dup()
m.getSize()
resolved.asSnapshot()
dest.writeLong(mSubId)
Integer.valueOf(contentLength)
out.writeFloat(mProgress)
lastIme == null
OsmandPreference<Boolean>
resolver.acquireContentProviderClient(uri)
item != txId
DatabaseDescriptor.getListenAddress().getHostName()
timeMillis - MILLIS_IN
__logger.error("Unable to set 'this.bundle.install' " + " for the bundle " + bundle.getSymbolicName(),t)
updatable=false
getDefaultLanguage()
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
mStackScroller.getChildAtPosition(x,y)
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
fragment.getView() == null
redisson.getMap("123",StringCodec.INSTANCE)
mAdapter != null
mAuthorities.get(i)
mNavigationBarView.getPaddingStart()
videoStream != null
new SemanticException(TYPE_MISMATCH,node,e.getMessage())
_schedulerEngine instanceof SchedulerEngineClusterManager
selenium.isVisible("link=Control Panel")
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1)
(title != null && title.length() > 0) && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(ALPHA") == -1) && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(BETA") == -1)&& (!title.matches("Example\\d+"))&& (!name.startsWith("org.apache.jmeter.examples."))
DEBUG=true
newEmbeddedDatabaseBuilder(path)
eventFunc.equals("conference_add_member")
GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))
buildeSurrogatePrincipalElectionStrategyr.toString()
LOG.isDebugEnabled() && getDefaultState(component,name,stateClass) != null
-1042273998
cannedReplies != null
cacheFb.setMaxElementsInMemory(5)
T
BufferUtil.zeroBuffer(16)
a.getDimensionPixelOffset(attr,0)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
range.getStartOffset()
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
lock.isLocked()
telephony.getLteOnCdmaModeForSubscriber(subId)
addStringLocalization(lang,lang,name)
false || mSpew
parts.length < 1
!mIsRecentsShown || mIsPipFocusedInRecent
NSNumber.numberWithLong(val)
Optional.of(caCertificatesFile)
rteCl.writableBytes()
e.toString()
sdk.isPresent()
new UnsupportedTemporalUnitException("This method should not be used for any fields the DateBuilder or TimeBuilder can't handle")
checkValidNanoOfDayWithOffset(nanoOfDay,secondOffset)
assertEquals(0,tabGenerator.getInitialValue())
bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())
createPermissionsXmlAsset(new JndiPermission("*","lookup"))
rsMaxRows > 0
encodeMapKey(value)
new ProcessBuilder("/system/bin/logcat","-v","time","-b","events","-b","system","-b","main","-b","crash","-t",String.valueOf(lines))
cancelHardwareAnimations(false)
LOG.debug("removing shm " + shm)
((FloatValue)input).getValue().floatValue()
randomFrom("_lang1","_lang2",null)
mBitmapState.mBitmap.hasAlpha()
assertThat(response).isEqualToIgnoringCase("Woop woop. yay\n")
PsiFile file=null; 
intent.setData(uri)
loaded.getLoaded().getConstructor()
new ClassPathResource("word2vecserialization/google_news_30.bin.gz").getFile()
mTargetSdk >= O
friendlyAttributes.get(name)
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))
selenium.isVisible("link=Control Panel")
log.error(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
onCompletions != null
selenium.isVisible("link=Control Panel")
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
itemCache.addKey(item.id,item)
Long.valueOf(val)
selenium.isVisible("link=Control Panel")
cursor.getLong(1)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
accountHandle.getComponentName().toString()
CtreportTestReport.class
new DeadCodeEliminationPhase(OPTIONAL)
!mySpaceBeforeParentheses
showRecentApps(true)
part.getContentType().toLowerCase()
new NameAlias(tableNameAlias)
tagData.getValue(TagData.NAME).length() == 0
DEFAULT_MOVE_COST=100
Thread.sleep(5000)
Integer.valueOf(bottomStr)
Object edge
config != null
MAX_ACTION_BUTTONS=2
new EnterSelectionDialog(shell,props,dbNames,"Select the database","Select the partitioned database to import from")
Navigation.checkNavigation(Navigation.NOTES)
DBG=true
myPreferredFocusedComponent instanceof JButton
file.toURL()
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
(ResourceAdapterDeploymentService)controller.getService()
internalCluster().getInstance(SystemCollectSource.class)
route.getDomain()
AddFriendsActivitiesPortlet.class
log.warn("Error extracting callable results",e)
assertCompletionVariants(myProjectPom,"test","org.apache.maven.plugins","org.codehaus.mojo")
setNumber(String.valueOf(integerPart))
method.getName()
new WorkerConnector(connName,connector,ctx,lifecycleListener)
outboundRequest("localhost",port,httpRequest)
DeprecationLogger.nagUserWithDeprecatedBuildInvocationFeature(deprecation,String.format("This %s",suffix))
new long[1]
mMncStr == null
parts.length >= 2
selenium.isVisible("link=Control Panel")
new SinglePeriodTimeline(durationUs,!isLive)
clients.entrySet()
new Long(getShortValue(workingMemory,object))
mPulseCallback.onPulseFinished()
map.tryPut(key,value,8,TimeUnit.SECONDS)
KeyHelper.generateRegistrationId()
new File(EXPORT_DIR).mkdir()
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
mncStr.isEmpty()
historyRoot.exists()
HIDDEN
one.setCoordinateIndex(LEAF)
this.thrown.equals("File must not be null")
value + value + MINIMUM_BACKLIGHT
JDBCUtils.safeGetLong(dbResult,"pid")
lType == null && rType == null
HashMap<String,Account[]>
type.equals("")
HeaderBuilder.this
position > getItemCount()
display.getMetrics(dm)
Assert.assertFalse(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
DBG=true
new Exception()
GlobalSearchScope.projectScope(getProject())
entryString.substring(i + 1)
XContentType.JSON.restContentType()
GL11.glGetFloat(pname,params)
IgniteCheckedException e
new LinkedFileViewModel(linkedFile,entry,databaseContext,taskExecutor,dialogService)
Math.round(internalPower[in] / totalPowerContained * totalPowerConsumed)
from >= to
newRemoteAddr != null
PATH.getAbsolutePath()
sendMessage(CMD_STOP_AP)
headers.setValue("Vary")
return EOF_BLOCK_ID; 
new Info("basic/types").cppTypes("signed","unsigned","char","short","int","long","bool","float","double")
klass.getDeclaredFields(false,declaredFields)
buf.get()
tokens.length + 1
new DateMathParser(formatDateTimeFormatter,TimeUnit.MILLISECONDS)
sampler.getFilename()
/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 0; 
mContext.startActivity(shortcutIntent)
Integer.valueOf(attrValue)
fields.contains(name)
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,true)
synchronized (mAccounts) {   writeStatusLocked(); } 
client != null & client.autofillClientIsFillUiShowing()
uuid.getMostSignificantBits()
mProgressListener != null
destinationMap.removeAll(destination)
modelCache.put(cacheKey,model)
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
Settings.Global.getInt(mContext.getContentResolver(),SETTING_ENABLE_SCORER,1)
context == null
ON_TOP
dest.writeLong(mSubId)
mPwCollection.getGroupedPwPairsSortedByRank()
Thread.sleep(5000)
query.length()
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
winAnimator.prepareSurfaceLocked(recoveringMemory)
dest.writeLong(mSubId)
mf.filter(popup.getMenu(),false)
new IllegalStateException("unable to find any unassigned shards to explain [" + request + "]")
mItemFilterListener != null
getSelectedColorRes()
mDownView != null
new IllegalArgumentException(e.getMessage())
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
clampScreenBrightness(mLastUserSetScreenBrightness)
ctx.cache().internalCache(cacheName)
db.delete(TABLE_NAME,null,null)
applicationContext.destroy()
Assert.assertEquals(122L,assetCapsuleNew.getNetUsage())
old.equals(dexedJar)
log.error("Could not set transaction isolation: {}@{}",isolation,System.identityHashCode(dsc))
hasFlag(FLAG_UP)
log.error("Unsupported {} : {} for serviceId : {}",OAuthConstants.REDIRECT_URI,redirectUri,serviceId)
item.qualifies(itemType)
imageView.setImageBitmap(null)
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid)
compound.getCompoundTag("tile_pos")
mAttributes.getFlags()
DelimitedRecordHiveMapper.class
TypeMissMatchException e
logger.warn("Couldn't get interpreter editor setting")
csUseGlobalSearch.getSelection()
{port,ioe.toString(),ioe,pid}
Table table=Table.open(tableName); 
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
@Autowired RoutingService routingService; 
klass.getDeclaredMethods(false,declaredMethods)
chatTabbedPane.addTab(currentChatPanel.getDefaultContact().getDisplayName(),new ImageIcon(Constants.getStatusIcon(currentContactStatus)),currentChatPanel)
handler.doProcess()
Slog.e(TAG,"Invalid wallpaper data")
wms.getGeoServer().getSettings()
BitmapUtils.isImage(mFile)
new DeadCodeEliminationPhase(OPTIONAL)
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
view.getCompoundDrawables()
parent instanceof AppWidgetHostView
holder == null
dockedBounds.right + adjustment
new TextPaint(Paint.ANTI_ALIAS_FLAG)
checkManageUsersPermission("query user")
agentUri.getPath()
log.info("Failed to retrieve instances from Eureka")
mNextWakeFromIdle != null
GitBlit.self().processCommitMessage(repositoryName,text)
!mAwake
Boolean.valueOf(resizeableStr)
!mIsRecentsShown || mIsPipFocusedInRecent
/**   * Bluetooth GATT interface callbacks  */ private final IBluetoothGattServerCallbackExt mBluetoothGattServerCallback=new IBluetoothGattServerCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onServerRegistered(  int status,  int serverIf){     if (DBG)     Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf); synchronized (mServerIfLock) {       if (mCallback != null) {         mServerIf=serverIf;         mServerIfLock.notify();       }  else {         Log.e(TAG,"onServerRegistered: mCallback is null");       }     }   }   /**   * Server connection state changed  * @hide  */   @Override public void onServerConnectionState(  int status,  int serverIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onServerConnectionState() - status=" + status + " serverIf="+ serverIf+ " device="+ address);     try {       mCallback.onConnectionStateChange(mAdapter.getRemoteDevice(address),status,connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Service has been added  * @hide  */   @Override public void onServiceAdded(  int status,  BluetoothGattService service){     if (DBG)     Log.d(TAG,"onServiceAdded() - handle=" + service.getInstanceId() + " uuid="+ service.getUuid()+ " status="+ status);     if (mPendingService == null)     return;     BluetoothGattService tmp=mPendingService;     mPendingService=null;     tmp.setInstanceId(service.getInstanceId());     List<BluetoothGattCharacteristic> temp_chars=tmp.getCharacteristics();     List<BluetoothGattCharacteristic> svc_chars=service.getCharacteristics();     for (int i=0; i < svc_chars.size(); i++) {       BluetoothGattCharacteristic temp_char=temp_chars.get(i);       BluetoothGattCharacteristic svc_char=svc_chars.get(i);       temp_char.setInstanceId(svc_char.getInstanceId());       List<BluetoothGattDescriptor> temp_descs=temp_char.getDescriptors();       List<BluetoothGattDescriptor> svc_descs=svc_char.getDescriptors();       for (int j=0; j < svc_descs.size(); j++) {         temp_descs.get(j).setInstanceId(svc_descs.get(j).getInstanceId());       }     }     mServices.add(tmp);     try {       mCallback.onServiceAdded((int)status,tmp);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic read request.  * @hide  */   @Override public void onCharacteristicReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicReadRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicReadRequest(device,transId,offset,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor read request.  * @hide  */   @Override public void onDescriptorReadRequest(  String address,  int transId,  int offset,  boolean isLong,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicReadRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorReadRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorReadRequest(device,transId,offset,descriptor);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client characteristic write request.  * @hide  */   @Override public void onCharacteristicWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattCharacteristic characteristic=getCharacteristicByHandle(handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicWriteRequest() no char for handle " + handle);       return;     }     try {       mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote client descriptor write request.  * @hide  */   @Override public void onDescriptorWriteRequest(  String address,  int transId,  int offset,  int length,  boolean isPrep,  boolean needRsp,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorWriteRequest() - handle=" + handle);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     BluetoothGattDescriptor descriptor=getDescriptorByHandle(handle);     if (descriptor == null) {       Log.w(TAG,"onDescriptorWriteRequest() no desc for handle " + handle);       return;     }     try {       mCallback.onDescriptorWriteRequest(device,transId,descriptor,isPrep,needRsp,offset,value);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Execute pending writes.  * @hide  */   @Override public void onExecuteWrite(  String address,  int transId,  boolean execWrite){     if (DBG)     Log.d(TAG,"onExecuteWrite() - " + "device=" + address + ", transId="+ transId+ "execWrite="+ execWrite);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onExecuteWrite(device,transId,execWrite);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * A notification/indication has been sent.  * @hide  */   @Override public void onNotificationSent(  String address,  int status){     if (VDBG)     Log.d(TAG,"onNotificationSent() - " + "device=" + address + ", status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onNotificationSent(device,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The MTU for a connection has changed  * @hide  */   @Override public void onMtuChanged(  String address,  int mtu){     if (DBG)     Log.d(TAG,"onMtuChanged() - " + "device=" + address + ", mtu="+ mtu);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onMtuChanged(device,mtu);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was updated  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyUpdate(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * The PHY for a connection was read  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - " + "device=" + address + ", txPHy="+ txPhy+ ", rxPHy="+ rxPhy);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onPhyRead(device,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     BluetoothDevice device=mAdapter.getRemoteDevice(address);     if (device == null)     return;     try {       mCallback.onConnectionUpdated(device,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception: " + ex);     }   } } ; 
Iterables.getLast(cluster.getNodes()).getStatus().setUnavailable()
!showOnKeyguard
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=500
(exception ? throwable instanceof RuntimeException : throwable == null)
rightTuple.setStagePrevious(rightTuple)
1024 * 1024
super(message); 
if (mCheckUnusedThrows) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),"javadoc.classInfo","@throws",tag.getArg1());   } } 
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
duration <= 0
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
CommitId
mDrawable != null
e.getCommandResult().getErrorMessage().equals("ns not found")
sharedOptsCount.contains(thread)
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
DataStream<OUT>
war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),"web.xml")
/**   * set the tag of this item  * @param object  * @return  */ public T withTag(Object object){   this.mTag=object;   return (T)this; } 
context == null
referenceDatabase.getObjectQuotingStrategy()
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
(lo + hi) >> 1
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
cf.getCompressionType() == null
from > to
Simple.of(SkylarkList.class)
selenium.isVisible("link=Control Panel")
folderName=LARGE
this.photoLabel
value.setScale(1,RoundingMode.HALF_EVEN).toString()
rowKeyColumnIO.writeColumnWith(buffer,0,length,recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
mHeadsUpNotificationView.clear()
MacMessages.showYesNoDialog(message,title,YES_BUTTON,NO_BUTTON,SwingUtilities.getWindowAncestor(parent))
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,account.getId(),paymentMethodId)
l.setAltitude(alt)
COUNT=2000
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
mApplicationObject == null
pos == -1
KeyWord link=new KeyWord(); 
place == null
Environment.getCurrent().isReloadEnabled()
!userInfo.canHaveProfile()
printf(StatementGenerator.generateStringLiteral(node))
new QueryBuilder.Options(getIdentifierQuoteString(),true,false,false)
assertPhoneNumberEqual("123123","0123123",false)
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
moduleProperties.setProperty(FAB_MODULE_NAME,model.getDescription())
activityNdx < topActivityNdx
LOG.assertTrue(file != null)
server.getPlayer(name)
mResourceData[i] != null
new Paint(Paint.ANTI_ALIAS_FLAG)
structure.getDocument()
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
Boolean.valueOf(attrValue)
cached.get(walCacheLock)
DBUtils.removeDownloadLabel(info.galleryBase.gid)
log.warn("Double activation of SQL context")
CacheData<AllTypes>
client.getBulkReply()
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false)
id=15871
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,fromNode,direction)
selenium.isVisible("link=Control Panel")
telephony.getLteOnCdmaModeForSubscriber(subId)
type.equals(number.getClass())
filterTypes.size()
selenium.isVisible("link=Control Panel")
Exception e
engine.execute(cypher).toString()
LOGGER.debug("Could not execute open URL",ex)
Long.valueOf(attrValue)
_addTestVariant("small.hd","uuid1",200,101)
InetAddress.getLocalHost()
commit.getAuthorIdent()
IOException e
selenium.isVisible("link=Control Panel")
_bc.proxPen(_beta)
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
offset + n
myNodeComparator.compare(node,node1) > 0
Integer.valueOf(nextArgRequired())
selenium.isVisible("link=Control Panel")
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false)
Objects.hash(expressions)
getMeasuredHeight()
new SystemVibrator()
selenium.isVisible("link=Control Panel")
assertComputationDurationAround(340000L)
tempBitmap != null
m.getSize()
wpdb.savePost(post,59073674)
accountHandle.getComponentName().toString()
/**   * Returns first child <b>element</b> with given name or <code>null</code> if no such children exist.  */ public Node getFirstChildElement(String elementName){   if (childNodes == null) {     return null;   }   for (int i=0, childNodesSize=childNodes.size(); i < childNodesSize; i++) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
meta.getEncoding()
Spacing.createSpacing(0,1,0,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE)
this.comparator
a.willChangeTransformationMatrix()
IOUtils.toString(classpathUrl)
context.getPackageName()
config.setProperty(Context.CONTEXT_CONFIG_DATA_DRIVEN_NODES,snm.getConfig())
(NotificationAction)null
insertRowData=null
serialVersionUID=1636640410
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
c == 10
renderManager.render(tpf)
new char[128]
injectFieldSuppressWarnings(annotationNode.up().up(),fieldDecl)
removed.isEmpty()
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),e)
waitForInterrupt(pin,mode,-1)
new StringBuilder(246)
assertThat(list.isInternal()).isFalse()
JDBCUtils.safeGetString(resultSet,"ROLENAME")
Integer.valueOf(taskIdStr)
pinScrollBy(hdelta,vdelta,true,0)
s.charAt(1)
RESULT_TIMEOUT=1500
logger.warn("Cannot play sound ({})",e.getMessage())
selenium.isVisible("link=Control Panel")
type.equals(number.getClass())
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
checkPojoMetaClass()
mAttachInfo == null
new DefaultTaskClassValidatorExtractor(new ClasspathPropertyAnnotationHandler())
containerKeyName=columnName
result.getAttack() == null
mFirstNotificationMillis=-rateLimitMillis
mHotspotBounds.set(left,top,bottom,right)
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
addEnergy(1)
depthErrorXYZ("modelZ")
c == '\\'
WindowedValue.valueInEmptyWindows(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
return 1; 
StringBuffer sb=new StringBuffer(); 
configElements[1]
return mChangingDisappearingDuration; 
mp.getValue()
pY + pWidth
DIARY_QUEST_GROUP_ID=275
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
TURN_DEGREE_MIN=45
handleException(exception)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
allocator.getFlowController().prepareAction(input,activations)
getActivePreferenceStore()
swipeVertical
accountCapsule.getFreeAssetNetUsage(tokenID)
new QueryException("Error in preloading targets. %s",e.getMessage())
ImmutableList.of()
new PrestoException(INVALID_CAST_ARGUMENT,e)
Slog.wtf(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
((NodeDescriptor)node1.getUserObject()).getElement() == null
new ImmutableShardRouting(indexName,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
type == BSON.B_GENERAL
RequestListener<String,GlideDrawable>
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
!(application.change().downgrades(deployment.version()) || application.change().downgrades(deployment.applicationVersion()))
selenium.isVisible("link=Control Panel")
workingMemory.getObject(handle)
mMime.toLowerCase().startsWith("video/")
DEBUG=true
new MockQueryExecution(1)
assertTrue(mDisabled.hasFocus())
project == null
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
DEBUG=true
assertEquals(5,scannedBeanCount)
MSG_LOGIN_RESPONSE=0x5000
sourceWidth > 0
CLOCK_DAEMON.scheduleAtFixedRate(timerTask,period,period)
public static BlockEE alchemySquare; 
cmdbAppItem != null
WebSettings.setTextSize(WebSettings.TextSize.LARGEST)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
new LayerView(this,0xff00ff00)
masters.containsKey(nodeId)
parsedResult.getSqlType()
fragmentCollectionPersistence.filterFindByGroupId(groupId)
@SmallTest
HSTRETCH_DURATION=0.4f
temporaryFolder.newFolder()
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
List<DescriptorDigest>
TelephonyManager.getDefault().getPhoneType()
builder.getNotification()
result.getReceipt().getEnergyTotal()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6324_e,client.field_6313_p)
!_remote && !_allowed.contains(path) && (!from.equals("localhost") && !from.startsWith("127.") && from.indexOf(":1") < 0 || !to.equals("localhost") && !to.startsWith("127.0.0.") && to.indexOf(":1") < 0)
selenium.isVisible("link=Control Panel")
logger.info(String.format("close (%s)",reason))
superMenu.add(menuItem)
eq(Expressions.constant(constant))
dl.info("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
parser.parse(GroovyElementTypes.CONSTRUCTOR_BLOCK,builder)
application.getApplicationContext()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
enableRefreshTime=false
Query[]
getResources().getDrawable(R.drawable.ic_gesture_white_24dp,null)
request.getRequestURI()
new IllegalArgumentException("Could not inspect meta data for database type.  You have to supply it explicitly.")
new LiferayRepository(repositoryId)
event.fromDisplayDensityChange
new AccountCapsule(toAddress,null,AccountType.Normal)
ReviewChangesActivity.Companion.startForResult(this,view,requestModel,getPresenter().getRepoId(),getPresenter().getLogin(),pullRequest.getNumber(),isAuthor)
FluxPeekHelper<T>
offset == 0
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
from >= to
info.crashInfo.stackTrace.length() > 10000
new Paint(Paint.ANTI_ALIAS_FLAG)
mDataAuthorities == null
inputFuture.cancel(mayInterruptIfRunning)
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名")
ex.getMessage()
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
Map<Integer,Object>
@Mock private HidProfile mHidProfile; 
return 1; 
15 * 60 * 1000
playerData.getCurrenciesList()
structuralLock.isLocked()
tfp != null
0 == CheckUtils.parseFloat(text,type)
MapActivity activity=(MapActivity)fragment.getActivity(); 
log.info("BouncyCastle not registered, using the default JCE provider")
sqle.getErrorCode()
this.children.add(body)
key == null
dest.writeLong(mSubId)
Assert.assertEquals(editor.getMarkersQuantity(ERROR_OVERVIEW),13)
ifcg.addr == null
parts.get(1)
dynamicType.getConstructor()
jfe.getTotalCounters()
logger.info(String.format("writing packet %s",packet))
new OverflowPanelViewHelper(mContext)
sha3(ephemeralKey.getPubKeyPoint().getEncoded(false),1,32)
TIMESTAMP_READ_METHOD.invoke(object,connection)
mSmallestWidthDp > 600
Log_OC.e(TAG,"onPause() start")
new Random(System.nanoTime())
mEntries[which]
Drawable.scaleFromDensity(sourcePadding.right,sourceDensity,targetDensity,false)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())
createHandlerResult(tokenCredential,this.principalFactory.createPrincipal(uid),null)
stepIdleStateLocked("s:shell")
!oldCfm.isThriftIncompatible()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
psiClass != null
new FairAffinityFunction()
mock.expectedBodiesReceived("Hello World 3")
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,1)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
popupWindow.setWidth(menuWidth)
core.getOpenCount()
DeploymentDescription.getDeployDeploymentOperation(locale)
LOG.error("Cannot close the writer for {}",recordPathTemp)
assertEquals(12,beanCount)
application.getApplicationContext()
groupField.createField(group.groupValue.utf8ToString(),0.0f)
page.getSizeInBytes()
MultiMap.createSmart()
Messages.showErrorDialog(getMainPanel(),IdeBundle.message("error.list.of.plugins.was.not.loaded"),IdeBundle.message("title.plugins"))
planRouteContext.getSnappedMode().getSmallIconDark()
!powerManager.isDeviceIdleMode()
FlowManager.getWritableDatabase(getTable())
sbn.getId()
TimeoutUtil.sleep(sleptAlready ? 10 : delay)
generatePomXML(kfs,gav)
return false; 
QuotaCache.this.namespaceQuotaCache.contains(ns)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
mAuthorities.get(i)
61L + 122L
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
action == KeyEvent.ACTION_UP
edge.setType(EdgeDirection.DIRECTED)
greaterThan(0L)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,true)
new TanhDerivative(x,y,z,n)
winAnimator.mSurfaceController == null
hour != 0
mHandler.removeCallbacks(pae)
status.getCreationTimeMs()
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingUrl",value))
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
logger.error("InterruptedException during playing a notification sound")
CLOCK_DAEMON.scheduleAtFixedRate(timerTask,period,period)
e.getMessage().equals("fields stored in the db can't have . in them")
name.equals("getSimOperator")
assertNotNull(message.getPayload() instanceof Collection<?>)
getResources().getString(R.string.upgrade_import_no_file_found)
Slog.e(TAG,"Unable to bind FLP Geofence proxy.")
beansXml.createAlternatives()
logger.warn(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
connections.contains(manager)
Object node
data.getCrc32().equals(Long.toString(newCrc32))
BigDecimal.valueOf(0.2)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
toolWindow.activate(null)
children.removeAll(children)
/**   * Received messages count.   */ private final LongAdder rcvdMsgsCnt=new LongAdder(); 
contentLength > 0
sourceContact != null
/**   * The resource.   */ private T mResource; 
getTelecomService().hasVoiceMailNumber(accountHandle)
DEBUG_ADD_REMOVE=false
incomingEdges.containsKey(source)
mMatchMode=numOfMatchesPerFilter
setFloatingLabel(mode)
testClass.getName()
new OneRun(43.733802,7.413433,43.739662,7.424355,2225,105)
i=1
sTextLayoutBuilder.textDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING)
Float.valueOf(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
q.pop()
Boolean.valueOf(notification.getFieldValue("isNewAlert"))
service.asBinder().isBinderAlive()
shadowSize == 0
timeUnit == null
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
new OAuth2RefreshToken("refresh-token",this.accessToken.getIssuedAt(),this.accessToken.getExpiresAt())
globalExecutionStats.getSplits()
i.next()
public void setMaxFrameSize(long maxFrameSize) throws ConnectionError {   if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.maxFrameSize=(int)maxFrameSize; } 
new byte[17]
FileUtils.deleteDirectory(root)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false)
assertArrayEquals(arr2,view.getBinaryByteArray(0,0))
origin.realComponent().doubleValue() >= other
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
s.length() - 2
type.getConstructor()
FilterResult::isFiltered
return mDisappearingDuration; 
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
setEnabled(false)
type.getConstructor()
mSearchFab.setScaleX(1.0f)
new ServerSparseDoubleRow(rowId,startCol,endCol)
r1.getName()
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
qux.getConstructor()
duration - SystemClock.uptimeMillis() - bedtime
log.info("Committed all active tasks {} and standby tasks {} in {}ms",taskManager.activeTaskIds(),taskManager.standbyTaskIds(),timerStartedMs - now)
cell.recon != null
focusedStack.getTaskCount() == 0
String.format("DEF_SYSTEM_FONT_SIZE: %.2f",DEF_SYSTEM_FONT_SIZE,dpi)
this.cusolverDnDsyevd.invoke(solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
-10
assertEquals(7,resultList.size())
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
mResourceData[i] != null
logger.warn("Cannot play line-in ({})",e.getMessage())
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
timeout < 0
telephony.isOffhook()
new IllegalStateException()
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
getName()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
/**   * Represents black  */ BLACK('0',0x01)
selenium.isVisible("link=Control Panel")
(mOomMinFreeHigh[5] * 7) / 8
this(0,null); 
Assert.assertEquals("after evaluation of: " + code,actualString,expected)
dist > maxDist
Nd4j.randn(order,shape).divi(FastMath.sqrt(2.0 / (fanIn + fanOut)))
!mPhones.contains(phone)
DEBUG=true
RemovePortletTest.class
SAMPLE_RATE_HZ_MAX=48000
log.warn("Not supported by dialect",ignore.getMessage())
now.plusDays(3).toDateMidnight()
e.getPresentation().setVisible(false)
assertEquals(expectedPlan,actualPlan)
ap.getSsid()
formatStrutsConfigXML(fileName,content)
new IntPreference("overlay_transparency",200,true)
callback.onSuccess(paragraphText,context)
LOG.warn(ex.getLocalizedMessage(),ex)
selenium.isVisible("link=Control Panel")
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
end < textLength
this.setProperty(FILENAME,newTimeout)
maskArray != null
blog.getRemoteBlogId()
setEnabledFunctions(null,false,false)
CompilationAlarm.trackCompilationPeriod(initialOptions)
@NonNull String bluetoothAddress
getConfig().getBoolean(ENABLED,false)
Long.valueOf(args[ai])
currentType != globalType
List<String>
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
urlString.indexOf("/monitoring")
listAdapter.notifyDataSetInvalidated()
message.isDiscussion()
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
LOG.error("Skipping invalid VCS root: " + root)
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Cool this annotation!")
/**   * {@inheritDoc}  */ public Object next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
foundTargetWs && winAnim.getShown()
Map<String,Object>
length > 18
ZONE2_SOURCE_INTERETRADIO(120)
accountHandle.getComponentName().toString()
T parent
selenium.isVisible("link=Control Panel")
peekServiceForUserLocked(userId)
Simple.of(Tuple.class)
near.remove(key)
StringBuffer buffer=new StringBuffer("("); 
Exception cause
routes.BufferResource()
Dagger_AutoFactoryProcessorComponent.builder()
autoClear
warningBytes > limitBytes
FileUtilRt.loadFile(new File(getBasePath() + File.separator + getTestDir()+ File.separator+ getTestName(true)+ "."+ ext))
out.read(compressed,0,chunkSize)
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
selenium.isVisible("link=Control Panel")
kompiler.getDeclaredMethod("exec",PrintStream.class,String[].class)
STATUS.isStatusDefault(mStatus)
4 + (parameterTypes.length * 2)
new AnalyzedToken(word,currTag,lemma)
!dataChanged || isDirectChildHeaderOrFooter(focusedChild)
mValues[7]
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),DANCE)
mContext.startActivity(intent)
assertThat(new XooPlugin().getExtensions()).hasSize(14)
final GenericObjectContainer parent
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
this.findPreference(PREFERENCE_CATEGORY_ADVANCED).setIcon(appearance)
new PathResourceManager(tmpDir,10485760)
ByteArray.fromLong(assetId)
note1.id()
selenium.isVisible("link=Control Panel")
e != null
c1.getName()
RuntimeException e
mService.disableEphemeralNetwork(SSID)
keyCode == KeyEvent.KEYCODE_SEARCH
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true)
ServiceAnnouncingChatHandlerProvider.class
LOG.error(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
ConfiguredTargetValue.key(label,hostConfiguration)
name.equals(Context.CLIPBOARD_SERVICE)
new Intent()
public TokenStream create(Reader input){   return new EdgeNGramTokenizer(input,side,minGramSize,maxGramSize); } 
maximumGridSize=768
content.toHtml()
rats.setConfig(editConfig.getText())
assertEquals(10,databases.size())
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
selenium.isVisible("link=Control Panel")
nameTextField.getText()
this(url,null,null,false); 
stall_till_cloudsize(1)
checkResources(apps[i])
new S3DataSegmentMover(mockS3Client)
target.getName()
file.getCanonicalPath()
food(4)
recall()
Set<String>
connection.prepareStatement(getUsersSQL)
Slog.wtf(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,fromX,y,0)
LOG.warn(e.getMessage())
indexStats.getPrimaries().getMerge().getCurrent()
mIconBase.clone().icon((String)mIcons.get(i))
context == null
{6,30,54,74,102}
entry.getKey()
List<ActivityManager.RecentTaskInfo>
IllegalArgumentException.class
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").format(clazz.getName(),IGlobalExtension.class.getName())
LOG.debug("Failed to reconfigure vim keymap.\n" + e)
public class RetryFailure extends Error {   private static final String MESSAGE="Test failed despite retries";   public RetryFailure(  Throwable cause){     super(MESSAGE,cause);   } } 
createHalf(buffer.length(),init,workspace)
new IllegalArgumentException("Expected a proto but was: " + body.mimeType())
fingerId == 0
myTypeChecker.checkExpressionIsAssignableToType(lOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null)
returnTypeElement == null
it.setJavaDocComment("Super extra cool this annotation!!!")
new InvalidValuesArgumentException("Wrong header information type: " + fieldsFromHeader)
assertEquals(1208,trackPoints.size())
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
value.toLowerCase().contains(constraintLowerCase)
!mFolderName.equals(mAccount.getInboxFolderName())
mState != STATE_FINISHED
List<CommitId>
mMat[9]
ArrayList<>
Helper.interpretSizeSource(jaxbElement.getLength(),jaxbElement.getPrecision(),jaxbElement.getScale())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION)
dpToPx(4f)
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
blog.getRemoteBlogId()
val == null
tracesFile.mkdirs()
Integer minIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
si.deliveryCount > 0
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
{0,750L}
mapReader.isBasemap()
getStubOrPsiChild(PyElementTypes.TARGET_EXPRESSION)
unfinishedVerificationHere()
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
clusterService != null
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
lhs.getScore()
new ObjectMapper().reader(Map.class)
type.getConstructor()
selenium.isVisible("link=Control Panel")
3
Thread.sleep(100)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(100)
fuel >> 16
System.getProperty("tests.coverage")
signalParamHash(IS95_CONST_IR_SIGNAL_TONE,TAPIAMSSCDMA_SIGNAL_PITCH_UNKNOWN,IS95_CONST_IR_SIG_TONE_ABB_RE)
Throwable e
subProtocol != null
stack.mStackId != DOCKED_STACK_ID
public class XpathRegressionJavadocVariableTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"6:9: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS" + "/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
Applications.class
saveStatusLabel != null
info.getGroupIdLevel1()
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
dynamicType.getLoaded().getConstructor()
return false; 
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
paramType.getName()
Throwable e
mainFile.getRunfilesPathString()
serverSocket == null
enum_("enum")
delegate.tokenize(token,regex)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
CONNECTION_TIMEOUT_SECONDS=30
next.getLabels().columns()
type.getConstructor()
telecomManager != null
pos + toFind.length() < limit
new Interval(startTime,endTime)
Locale.getDefault().getISO3Language()
temp_descs.get(i)
selenium.isVisible("link=Control Panel")
_typeSettingsProperties.toSortedString()
type.getConstructor()
getProperties().requestCachingEnabled()
templateToEdit.isBuiltin()
Integer.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
from("direct:c").delay(500)
showScopeSettings(xpe)
x < maxX
input.slices()
db.getQueryFields(sql,param,info)
headers.getMessageType()
statistics.addGetTimeNano(System.nanoTime() - start)
return true; 
d < 0.02f
mUserPaddingStart >= 0
localLOGV || true
mSelectPhotoView.getSelectFiles().size() > 0
service.cancelMissedCallsNotification()
Thread.sleep(5000)
tok[2]
t.equals(type)
logger.warn("gave up waiting for query reply from device {}",m_address)
GRADIENT_SCRIM_ALPHA=0.70f
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Super extra cool this annotation!!!")
new DigestOutputStream(mBase64OutputSttream,digest)
loaded.getLoaded().getConstructor()
JavaConversions.asIterable(logManager.allLogs())
dialog.hide()
new SimpleAttributeDefinition("ha",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,false)
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mSyncStatus.get(i)
this == group.mInternalConnection
excludesPattern == null
writeRepeatedSFixed64(id,val)
enableRefreshTime=false
Mono.currentContext()
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
"Surface(native-token=" + mSurface + ")"
Boolean.valueOf(attrValue)
warningBytes > limitBytes
selenium.isVisible("link=Control Panel")
/**   * Indicates that all Facebook users are able to see posts made by the application.  */ Everyone(NativeProtocol.AUDIENCE_EVERYONE)
Long.valueOf(val)
displayContent.getDockedStackLocked()
plugin.authorizePayment(account.getId(),directPaymentId,account.getPaymentMethodId(),amount,currency,properties,callContext)
client.getVertx().setTimer(1,id -> checkExpired())
Slog.e(TAG,"Hardware Activity-Recognition not supported.")
Simple.of(Runtime.NoneType.class)
telephony.isRadioOn()
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true)
!mAccountStore.hasAccessToken()
TIMEOUT_SECONDS=5
Actor actor
constructors.length > 0
new StringBuilder(561)
getActivePreferenceStore()
Slog.e(TAG,"Invalid wallpaper data")
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
configuredScriptEngineNames == null
com.android.internal.util.DumpUtils.checkDumpPermission(mAm.mContext,TAG,pw)
assetUri.getAssetName().toString()
new UnsupportedOperationException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies")
node.getNodeName()
connectPanDeviceNative(objectPath,"nap","panu")
LOG.warn("touchbar-server isn't running, skip nst loading")
mAdapter != null
log.error("Couldn't find style: " + styleId)
into.get(i)
Files.delete(file.toPath())
mNetAttributes[type].mLastState == state
column.length > -1
order.getSide().equals("buy")
range.getStartOffset()
getService().animateCollapse()
getSonicCacheDirPath()
new Paint(Paint.ANTI_ALIAS_FLAG)
fraction * (nextValue - prevValue)
error.toString()
@Override public final DivideBy orExists(Select<?> select){   return or(exists(select)); } 
file == null
stmt.newBoundStatement()
logger.error("Cannot parse " + str + " using 0 minutes")
log.info("BouncyCastle not registered, using the default JCE provider")
size=500
file.getLocalFile()
mNextNonWakeupDeliveryTime > nowELAPSED
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true)
parsedResult.getSqlType()
m.muli(beta1)
store.setConfigPath(usersFile)
qryCfg != null
Theme.fromJSON(object)
request.getServletPath()
literalValue.getElementList().size() > 1
annotationHolder.createErrorAnnotation(expression,"Cannot resolve target pattern")
getIEuiccController().getEid(mCardId)
event.getTime() > currentPlayTime
"".equals(callRingtone.canPlayType("audio/mpeg;"))
m.getSize()
hz1.getLifecycleService().terminate()
uncompressedProto.length < 1700000
Arrays.asList(mvn,"org.apache.maven.plugins:maven-archetype-plugin:2.2:generate",property("interactiveMode","false"),property("archetypeGroupId",archetype.groupId),property("archetypeArtifactId",archetype.artifactId),property("archetypeVersion",archetype.version),property("groupId",groupId),property("artifactId",artifactId),property("version",version),property("package",packageName))
input.floatValue() == value.floatValue()
sectionStartToken.word()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
resourceTableStream.read(tableBytes,0,(int)alignedSize)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post,mIsPage)
Optional.of(((IndicesRequest)message).indices())
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
Arrays.binarySearch(vipAddresses,key.getName()) > 0
Iterable<Arg>
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId,lastFrameNumber)
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,false)
!ResultSetUtils.isServerSideFiltering(controller) && !controller.isHasMoreData()
method.getName()
mPPS != null & mSPS != null
SVID_SHIFT_WIDTH=7
new ArrayList<>()
new Paint()
OutOfCapacityError e
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER)
Math.min(1,amount)
telephony.isRinging()
response.setStopThread(true)
si.deliveryCount > 0
selenium.isVisible("link=Control Panel")
this.photoLabel
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
DataBufferUtils.read(channel,this.bufferFactory,4)
media.getMediaType() == MediaType.AUDIO
reader.numDocs()
oldConfig.densityDpi != newConfig.densityDpi
curLocation != null
IllegalArgumentException e
mObsoleteAgents.remove(info)
getParents(directory,owner).first(dir -> Comparing.equal(element,dir))
Localization.lang("Quality")
getCluster().getDescription().getPrimaries()
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
n <= k
spoon.addChefGraph(jobMeta)
audioSink.toString()
id=15864
value.toLowerCase().contains(constraintLowerCase)
CLOSE_TIMEOUT=300
Log.wtf(TAG,e.getMessage(),e)
resolver.stop()
widthMode != MeasureSpec.EXACTLY
generator.generateX509Certificate(signedByKeyPair.getPrivate())
shouldPause.and(this::shouldPauseOnTargetNodeJobsCounter)
new AnalyzedToken(word,currTag,lemma)
LOG.warn(title + "; " + message)
visitNode(node,context)
assertEquals(input.getFieldCount(),3)
new IllegalStateException("unable to find any shards to explain [" + request + "] in the routing table")
Util.convertDpToPixel(dataSet.getBarBorderWidth())
super.close()
ApplicationManager.getApplication().getMessageBus().connect()
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     if (!Disposer.isDisposed(myUi)) {       myUi.setDataPack(dataPack);       myProject.getMessageBus().syncPublisher(VcsLogDataHolder.REFRESH_COMPLETED).refresh(dataPack);     }   } } )
i < totalTo
endpointA.expectedBodiesReceived("A blue car!","A blue car, again!")
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
i < 50
cache.removeAll()
Log.wtf(mTag,"Adjusting remote volume without a controller!")
redeliveryDelay > maximumRedeliveryDelay
Exception e
mService.setUidPolicy(UID_A,POLICY_NONE)
String.class
LOGGER.debug(e.getMessage())
CharSequence message
DEBUG=true
protocolProvider.getProtocolName()
mInner.end()
Looper.getMainLooper()
selenium.isVisible("link=Control Panel")
constraintCache.getObject(monitor,schema,null)
addView(mNotificationHeader)
mHandler.removeCallbacks(pae)
width - originY
selenium.isVisible("link=Control Panel")
new Paint(Paint.ANTI_ALIAS_FLAG)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
Thread.sleep(5000)
reactiveType == null
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(4)
T t
new ObjectMapper().reader(Map.class)
graphVersion.incNodeVersion()
(registerCount & 0xFFFFFF00) == 0
artifactResolver.resolve(artifact,unresolved,localRepository)
verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0c,0x02,0x06,0x00,0x00,0x00,0x02,0x0d,0x0a,0x02,0x00,0x00,0x6f,0x4e}))))
DELAY=6000000
myEditor.getComponent()
private void _compareManifestFiles(File expected,File actual) throws Exception {   Manifest expectedManifest=new Manifest(new FileInputStream(expected));   Manifest actualManifest=new Manifest(new FileInputStream(actual));   Attributes expectedAttributes=expectedManifest.getMainAttributes();   Attributes actualAttributes=actualManifest.getMainAttributes();   for (  Object name : expectedAttributes.keySet()) {     if (_ignoredAttributes.contains(String.valueOf(name))) {       continue;     }     String expectedValue=(String)expectedAttributes.get(name);     String actualValue=(String)actualAttributes.get(name);     Assert.assertEquals(expectedValue,actualValue);   } } 
internalCluster().getInstance(BlobIndicesService.class)
correlationID != null
connection.pexpire(key,millisecondsTimestamp)
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())
message.addHeader("Message-ID",cursor.getString(12))
@NonNull
case 4: 
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
isGreaterOrEqual(platformVersion,MNC)
Log_OC.wtf(TAG,"Incorrect action sent " + intent.getAction())
config.getOrcMaxBufferSize()
selenium.isVisible("link=Control Panel")
a.willChangeTransformationMatrix()
product.encodePrettily()
str.toLowerCase()
AbstractBootstrap<ServerBootstrap,Channel>
logger.info("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
new ShowArticleOnTouchListener("feature_articles/about.html",getActivity(),name)
stall_till_cloudsize(1)
typeSettingsProperties.toSortedString()
TimeUnit.SECONDS.toMillis(3)
f * w * h
mService.removePasspointConfiguration(fqdn)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
_paginator.flatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
data != null
mService.removeNetwork(netId,mContext.getOpPackageName())
logger.debug("{}: Blocks waiting to be proceed: lastBlock.number: [{}]",blocks.get(blocks.size() - 1).getNumber(),name)
link.next(ACTIVE_STATE,CLOSED_STATE)
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
TimeUnit.MILLISECONDS.toMillis(10)
mMncStr == null
mGpsListener != null
nativeDraw(canvas,color,extras,true)
U extends Identifier
this.convertSceneToLocalCoordinates(pCoordinates,Entity.VERTICES_LOCAL_TO_SCENE_TMP)
_request == null
addr.intValue()
items[19]
synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
new IndexWriter(dir,new WhitespaceAnalyzer())
matrix != null
mProfileCursor.getCount() == 0
_constructor.newInstance(0,1,StringPool.BLANK,StringPool.BLANK,StringPool.BLANK)
public class ParseTest extends BaseParseTestCase {   public void test1() throws Throwable {     myFixture.testHighlighting("test1.regexp");   }   public void test2() throws Throwable {     myFixture.testHighlighting("test2.regexp");   }   public void test3() throws Throwable {     myFixture.testHighlighting("test3.regexp");   }   public void test4() throws Throwable {     myFixture.testHighlighting("test4.regexp");   } } 
lines[i].length() > cutWidth
RECENT_SKETCHES_MAX_SIZE=5
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
(line=reader.readLine()) != null
c.deactivate()
origin < other
Assert.assertNotNull("Test output points to null",input.size() > 1)
distanceToView(focused) > 0
new ArrayList<Wallet>(4)
LOG.error("Couldn't run process with PTY",t,logContent)
TestEmployeeTable.class.getCanonicalName()
from("direct:b").delay(500)
mQuietEnable
HybridDecryptFactory.class
logger.isWarnEnabled()
configureRemote(fork)
name.equals("getSimOperatorName")
mask.isColumnVector()
invoke(args.first(),(args=args.rest()).first(),args.rest())
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
5 * 1000
mCurrentPage != newPageIndex
@Alive protected Value deltaValue; 
InputProcessor[]
specWidthMode == MeasureSpec.EXACTLY
size=1f
fieldAnnotationListField != null
loadScriptByName(scriptName)
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
!SSID_PATTERN.matcher(ssid).matches()
loaded.getLoaded().getConstructor()
assetDisplayPageEntry.getLayoutId()
fragmentEntryPersistence.filterFindByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
assertLeftRightCategory(8,category2a)
PortalWebResourcesUtil.getPathLastModified(uri,theme.getTimestamp())
mNetAttributes[type].mLastState == state
Optional.of(authorizedPeers)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
selenium.isVisible("link=Control Panel")
getConnection(url)
true || DEBUG_WALLPAPER
Long.valueOf(args[ai])
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage",ioe)
new SpannedString(new CustomSpannable(first),false)
gl2.glGetShaderiv(program,GL2ES2.GL_INFO_LOG_LENGTH,val,0)
ViewConfiguration.getDoubleTapTimeout()
{26,29}
is.read(data)
"Error resetting interface " + mInterfaceName + ", :"+ e
Thread.currentThread().getId()
getObjectMapper().reader(clazz)
telephony.isOffhook()
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
new IllegalArgumentException()
Locale.getDefault().toString()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
args.length == 0
PyExpressionStatement dict=elementGenerator.createFromText(LanguageLevel.forElement(expression),PyExpressionStatement.class,"{" + stringBuilder.toString() + "}"); 
new Tailer(new File(s),new LogTailerListener(),1000,false)
patientExitObs != null
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
assertThat(System.currentTimeMillis() - startTime).isBetween(500L,600L)
implemetationMethodDescriptors.build()
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory()
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out2p)
a.getFloat(attr,0)
dfa == null
syncOperation.delay == 0
processDefinition.getTenantId() == null
mAttachInfo == null
parser.getBoolean(KEY_SEND_TRON_LOG,true)
removeFlagForThreadsFromCache(account,ids,flag)
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true)
Throwable t
testClass.getName()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET)
LOG.error("Cache flusher failed for entry " + fqe)
event.getTime() > currentPlayTime
Object node
mFocusStack.remove(fse)
accountHandle.getComponentName().toString()
observable.timeout(waitTime,timeUnit).toBlockingObservable()
Assert.assertEquals(0,map.size())
selenium.isVisible("link=Site Name")
fluentSetters()
assertEquals(10,definitions.size())
mncStr.isEmpty()
compressedProto.length < 340000
mDark == dark
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
sendResourcesChangedBroadcast(true,false,pkgList,uidArray,null)
hashSymbols.keySet()
Assert.assertEquals(7,resources.size())
sampleFactory.getConstructor()
result1.getMatches()
loaded.getLoaded().getConstructor()
Float.valueOf(encoding.substring(equalsPos + 1))
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)
new ModelNode(10)
IdIndexer indexer
startPoint != null
assertFalse(voyageReport.has("onboardCargos"))
!isTopLeftVisible
assertEquals(1,historyService.createHistoricActivityInstanceQuery().finished().list().size())
AbstractMethodError e
return true; 
ServiceContextThreadLocal.popServiceContext()
broadcasterFactoryClassName != null
mAnswer.setBackgroundDrawable(null)
this.messageService.fluxPreAuthorizeBeanFindById(2L).contextStart(withAdmin)
mv.visitAnnotation(Type.getDescriptor(NotNull.class),true)
15 * 60 * 1000L
fraction * (nextValue - prevValue)
user.getCompanyId()
assertPhoneNumberEqual("123123","0123123",false)
file == null
dataSource.setMaxConnLifetimeMillis(Long.parseLong(getConnectionAge()))
AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true,true)
crPluggableScmMaterial.getFilterIgnore()
RecentsActivity.EVENT_BUS_PRIORITY + 1
logger.error("Field sorting failed!")
StreamError se
new SAXException(e.getMessage())
showStatusChangedInChat=true
logger.error("Error while matching regex [" + matched + "] for string ["+ matcher+ "] "+ pse.getMessage())
providers.size() >= 0
contains(connection.getRedisClient().getAddr())
assertEquals(0.0,biaOp.currentResult().doubleValue())
verify(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
filePath.toFile()
Calendar.getInstance(JSON.defaultLocale)
Log.d(TAG,"Incoming Result")
Throwable e
DEBUG=true
props.getProperty("exporter")
line.startsWith(StringPool.TAB + "public class ") || line.startsWith(StringPool.TAB + "public enum")
markerFile.delete()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
user.getHome()
Thread.sleep(1000)
mClearPaint.setColor(0xff00ff00)
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())
innerClass.addConstructor(PUBLIC_SYNTHETIC,new Parameter[0],null,null)
mContext.sendStickyBroadcast(mStorageLowIntent)
mExpandedDialog != null
selenium.isVisible("link=Control Panel")
mono.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
logger.warn("Cannot handle command ({})",e.getMessage())
invoke(args)
CompilationAlarm.trackCompilationPeriod(initialOptions)
new Paint(Paint.ANTI_ALIAS_FLAG)
t.add(R.id.frame,new SampleListFragment())
guiResource.getImageSlaveMedium()
id=15863
IOException ex
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
account.getExternalKey()
/**   * Reads next record from input  */ public Object read() throws Exception {   return input[index++]; } 
new JobMeta((space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,null)
i.getTouchIconUrl() != null
new ValueComparator(sortOrderAscending,type)
logger.warn("{} failed to send failure [{}] while failing shard [{}]",channelThrowable,t,request.shardRouting.shardId(),request.shardRouting)
request.getRelaxLocality() == false
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
JavaModuleType.getModuleType().modifySettingsStep(settingsStep,moduleBuilder)
new NullPointerException("permission cannot be null or empty")
new StandardTypeConverter()
mDisplayContent.getSplitScreenPrimaryStack()
_connector.getResponses("GET /foo HTTP/1.0\n\n")
(Constructor)chooseMethod("<init>",constructors,arguments,true)
return false; 
return true; 
AccessException ex
responseString(p)
IllegalArgumentException.class
synchronized (mAccounts) {   writeStatisticsLocked(); } 
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
loaded.getLoaded().getConstructor()
WHEELER(1)
appWindowToken == null
DownloaderIndexFromGoogleCode.getIndexFiles(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
return Long_TYPE; 
new Location(resource)
"Error: Access with origin " + referrer + " denied."
selenium.isVisible("link=Control Panel")
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).otherwise(exceptionHandler)
assertEquals(expectedPlan,actualPlan)
Exception e
String.class
localNodeData.dcLocalAddress.toString()
loaded.getLoaded().getConstructor()
random.randomValues().nextTextArray()
StampFactory.declared(type.getComponentType())
page.getSizeInBytes()
selenium.isVisible("link=Control Panel")
value.readSignedInteger(offset,size)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)
canonicalURLParts.length > 0
Integer.toString(contentLength)
telephony.getForbiddenPlmns(subId,appType)
Math.sqr(x[i] * y[i])
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
checkManageUsersPermission("setupRestrictedProfile")
now > deadline
values.size()
a.getInt(R.styleable.BootstrapButton_android_layout_width,0)
resources.getDimension(R.dimen.close_handle_height)
new ArrayList<>()
Collections.sort(backends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
pathParts[2] != null
getLogger().error("Unknown classloader: " + loader.getClass().getName())
"Missing " + gradlePropertiesExists
InputType.convolutional(height,width,channels)
Thread.sleep(5000)
(visibility & VISIBILITY_MASK) == VISIBLE
countNewlines(fragment) + 1
addView(mNotificationHeader)
Assert.assertNull(ex.getCause())
loaded.getLoaded().getConstructor()
new Message("XML_STREAM_EXC",LOG)
kbArticle.setPriority(priority)
xfrm.getExt().getCx()
loaded.getLoaded().getConstructor()
client.getLocalPlayer().getInteracting().getName().equals(FISHING_SPOT)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())
Queue<String>
pkgs.get(i)
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
(shape != LINES) && (shape != TRIANGLES)
replyMsg.toString().getContentLength()
i < inputStream.getGroupingFields().getKeysCount()
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
mBatteryStatus=BATTERY_STATUS_FULL
new Paint()
!myDetachIsDefault
behindFraction * mScrimBehindAlphaKeyguard
myStartupManager.registerPostStartupActivity(new Runnable(){   public void run(){     runnable.run();   } } )
getActionBar()
Thread.sleep(10)
new CompositeException(e,t)
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
output.contains("BUILD FAILED") || output.contains("FAILURE: Build failed with an exception.")
new SimpleMongoDbFactory(mongo(),getDatabaseName(),creadentials)
FileNotFoundException ex
pk.getColumnName()
from > to
Math.min(o.outWidth / targetWidth,o.outHeight / targetHeight)
mHidProfile.isProfileReady()
regularColumns.values()
toolchainType != null
PreferenceManager.instantPictureUploadEnabled(context)
TestDummy t
in.readVInt()
volume.getMtpReserveSpace() * 1024 * 1024
Files.delete(file.toPath())
origin > other
loaded.getLoaded().getConstructor()
mSyncStatus.get(i)
LOGGER.debug("Could not attach file",ex)
assertEquals("throughput",65.680144,model.getThroughput(),0.0000001)
valueType.isIntegerNumber()
mHandler == null
client.login(email,password,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
selenium.isVisible("link=Control Panel")
ParseException e
internalCluster().getInstance(SystemCollectSource.class)
new RemoveFileOperation(PATH_TO_DELETE,false,account,MainApp.getAppContext())
new IllegalAccessError("read-only")
new Paint(Paint.ANTI_ALIAS_FLAG)
new TextPaint()
!useLayoutWithDefault() && (!hasValidSelection || mLastSelected != checkedPos)
assertEquals(response.getResponseBody().length(),3876)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy)
assertEquals(builder.size(),2)
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).blogPostings(Collectors.toList())
Number.class.isAssignableFrom(c)
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
logger.error(evt.getReason())
resultSetView.getControl()
d.isObjectVisibleImpl(tag,val,zoom,type,nightMode)
mContext.startActivity(intent)
new TimeProfiler(LOG).start("Load previous line hashes of: " + fileKey)
delayMs < 0
Color.fromRGB(0x3B511A)
PreferenceManager.instantPictureUploadEnabled(this)
buffer.writeInt(INT32_BYTE_SIZE)
deadline < now
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
seconds * 1000
counter >= max
popupWindow.setWidth(menuWidth)
PFLAG3_FITTING_SYSTEM_WINDOWS
Log.e(TAG,"read property failed, e:" + e)
setImageDrawable(icon)
Assert.assertTrue(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
client.getWebSocket()
metadata.getFaces()
ResponseImpl example(String type,Object example); 
a.willChangeTransformationMatrix()
new IllegalStateException("pAssetBasePath must end with '/' or be lenght zero.")
new ToolbarActionBar(actionBar)
total=total / partCount
IBackupManagerService svc=mService; 
origin.realComponent().doubleValue() >= other
Arrays.asList(createBlock(0),createBlock(1),createBlock(2),createBlock(3),createBlock(4),createBlock(5))
max() > 32
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
logger.info(String.format("emitting packet with ack id %d",ids))
addDaysAndCheckForCompletion(6,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE,NextEvent.INVOICE)
Collections.emptyList()
expectedClockTime - 500
logger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
new IndexResponse(shardId,"type","id" + i,randomInt(),createdResponse)
mService.removeNetwork(netId)
private final ThreadPoolExecutor compileQueue; 
getCompletePredicate()
test("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
Assert.assertEquals(122L,ownerCapsuleNew.getNetUsage())
assertEquals(1,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
mHandler.removeCallbacks(pae)
localFileSystem.findFileByPath(keyMapsPath)
AndroidApkBuilder.execute(item.mySdkPath,resPackagePath,item.getClassesDexPath(),item.getSourceRoots(),externalLibPaths,item.getNativeLibsFolders(),finalPath,unsigned)
loaded.getLoaded().getConstructor()
Thread.sleep(5000)
mSyncStatus.get(i)
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))
selenium.isVisible("link=Control Panel")
mSyncStatus.get(i)
new ThingUID(WEMO_INSIGHT_TYPE_UID,device.getDetails().getSerialNumber())
L.log(Level.WARNING,"Audio clip {0} uses an external .resS file that doesn't exist!")
return false; 
clientPortAddress != null
configuration.getSupertypeSerializer()
e.printStackTrace()
cc.toPhoneString()
menuItem.getComponentCount()
index <= 5
xStreamConfigurators.equals(xStreamConfigurators)
LabelSchemaDescriptor descriptor
@NonNull
disableBluetoothContactSharing
!thread.isOutgoing()
mPrefWriteAnswers
log.debug("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
blog.getRemoteBlogId()
cursor.getString(COLUMN_NAME)
new ConcurrentHashMap<String,Object>(64)
private Integer version; 
new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)
sm.getString("contextConfig.fixDocBase")
Timber.e("Creating SAVING_DIALOG")
res - _bias
mWidth - glowWidth
inform == null
prefs.getLong(ACRA.PREF_LAST_VERSION_NR,0)
myBaseVersion=20
xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(554)
telephony.isOffhook()
offset > 32768
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_class_name"))
dataFormatModel.setLabel(row.get("description"))
height < 0
fraction * (nextValue - prevValue)
getGravity(gravity)
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER)
data.hasTestPassed()
new S_Command("00FE30",20.0)
/**   * The upper value in the range.  * @return the upper value in the range  */ Comparable getTo(); 
items[i].getValue()
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
IllegalArgumentException e
new Avg()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION)
rsWrap.getMobFileCacheAccessCount()
selenium.isVisible("link=Control Panel")
metadata.getFaces()
getApprovalParameters()
TextSecureCommunicationFactory.createManager(context)
mRotation != RotationUtils.getExactRotation(mContext)
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
public Integer getId(){   return id; } 
renderingAsyncTask.execute()
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
enabled=false
nodeEngine.getPartitionService()
impl._handler_method.toString()
expr.and(right)
queue.notify()
w1.getGradient(target,(label - 1))
LanguageExtensionPoint<CompletionContributor>
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getGroupId(),classNameId,assetTagName)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
"ppc64".equals(arch) || "ppc64le".equals(arch)
args.length != 3
context.getPackageName()
assertEquals(write.getCodec().toString(),SNAPPY_CODEC)
msg.obj == mSmHandlerObj
readSync.notify()
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
mAppToken.hasContentToDisplay()
msg.getHistoryRef().getHistoryId()
myConfiguration.copy()
traces.set(null)
_log.error(ioe,ioe)
Thread.sleep(5000)
Integer.parseInt(args.get(2))
new RuntimeException("should execute connector.connect() first")
arr.size(oi) != 1
InternalDecorator.this.computeActive()
assertEquals(10,definitions.size())
mAuthorities.get(i)
CONNECTION_TIMEOUT=20000
properties.contains(STRING_RECENT_SEARCHES)
e.toString()
userRecord.mClientRecords != null
sampleFactory.getConstructor()
new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
dockedBounds.top - adjustment
new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(SessionState state) -> {   if (state == SessionState.SESSION_VALID) {     s.release();   } } )
FileInputStream input=new FileInputStream(file); 
@Override public Content detach(){   throw ImmutableElement.immutableError(this); } 
senders == SendersEnum.both
CONSTELLATION_TYPE_SHIFT_WIDTH=3
new ObjectMapper().reader(DiskBalancerWorkItem.class)
selenium.isVisible("link=Control Panel")
DescriptorRenderer.TEXT.renderType(getActualParameterType(descriptor))
mBoundServices.isEmpty()
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + 1) + "}")
log.warn("No slayer task for {} in the Task database",taskName)
p.getSize()
myLocalResolve && localProcessor.processingEncounteredAnyTypeAccess()
mOuterRadius * 1.0f
BuildAndDecodeTest.class
a.getInt(attr,0)
IllegalArgumentException e
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
new SystemVibrator()
private final Executor eventExecutor; 
uris.keySet()
type.getConstructor()
0 != mNetworkCapabilities
unfinishedVerificationHere()
new Setting<>("repositories.s3.secret_key",CLOUD_S3.SECRET_SETTING,Function.identity(),Property.NodeScope)
client.get().uri("/").exchange().expectStatus().isOk().expectBody()
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
Log.info("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
platform != null
pubnub.unsubscribePresence(channel)
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)
mBottomLeftStrip=drawable
height
16 * 1024
rewrite != null
sep < 0
fileIds == null
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:10500}")
Assert.assertEquals(4,latch.getCount())
vector.getValue(0)
view.setCallback(listener.callback)
maxSize > (used / 1024 / 1024)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new PartialEscapeAnalysisPhase(null,runtime(),null,assumptions,false)
noClasses.get() && !Utils.IS_TEST_MODE
request.mConnectionID != null
parser.getText()
mPerformanceMap.get(userId)
engine.execute(query).toString()
timeout=30000
selenium.isVisible("link=Control Panel")
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState)
log.warn("Not found",e)
child.getMeasuredHeight()
case 3: 
BlockingQueue<BodyChunk>
returnJClassRef.dotclass()
attributes != null
assertThat(o.takeNext()).isNull()
value == null
externalDependency.resolve()
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
new WSSecHeader(actor,mustUnderstand)
dst.remaining()
resolver.acquireContentProviderClient(uri)
note == null
output.flush()
times(3)
Exception e
proxyHTTPPort.getText()
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.keywords"),portletModel.getPortletId())
mLastBatteryLevel != mHealthInfo.batteryLevel
new TrustException("ENCRYPTED_KEY_ERROR",LOG,e)
new ElasticsearchIllegalStateException()
uuid.replace("-","").substring(0,8)
createAggregator(aggregationBuilder,fieldType,indexSearcher)
level >= 100
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
IntList list
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
imeWin.getDisplayFrameLw()
mHorizontals == null
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()))
new RuntimeException(e)
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)
!sDisplayAnswer || getConfigForCurrentCard().getBoolean("replayq")
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
multipleTopologyChangeWorker()
selenium.isVisible("link=Control Panel")
input.getInfoStepDefinitions()
ReactiveHelper.scheduleLast(runnable,"Multicast next step")
getFirstPeriodIndexInSource(sourceIndex)
AuditManagerImpl.class
document.addKeyword("size",dlFileEntry.getSize())
System.arraycopy(points,0,temp,0,lineCount)
origin.realComponent().doubleValue() < other
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
_typeSettingsProperties.toSortedString()
Trans == TRANSPOSE
LOG.error(e.getMessage())
shard.idCache().onCached(readerCache.sizeInBytes())
mock.setResultWaitTime(3000)
close.setVisibility(removable ? VISIBLE : GONE)
interpreterSetting.getName()
replace(searchStr,0,searchStr,replacement,true)
mResourceData[i] != null
data.remaining()
new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage)
result == null
key.isInstance(key)
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(primary)
new File(EXPORT_DIR).mkdir()
mGpsListener != null
Expression.eq("searchable",format)
true || mSpew
getMergedOverrideConfiguration()
atlasFile.path()
longValue() & 0xFF
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao,null,false)
is(false)
new Field(name,DateField.dateToString(value),true,true,true)
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,0)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
Simple.of(SkylarkList.class)
fluentSetters()
mFormLoaderTask.getStatus()
return raf; 
OCDirId > 0
Helpers.exec(j4p,"setProfileFeatures(java.lang.String, java.lang.String, java.util.List)",id,strings)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
DiagnosticFactory2<PsiElement,CallableMemberDescriptor,DeclarationDescriptor>
mSeekBar.setProgress(mLastProgress > -1 ? mLastProgress : mOriginalStreamVolume)
Map<Object,RealmObject>
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
@Nullable
Assert.assertEquals(45,classes.size())
HashSet<>
lower != null
Element.F64(mRS)
l.maxComputers(lic.maxCpus())
qp.getExclusiveMaximum()
Math.min(mXAxis.mAxisMinimum,pos.y)
logger.info("started [{}] instances with [{}] stage=prod tag")
result == JOptionPane.NO_OPTION
externalEditCheckInterval_.hasElapsed()
IndexReader.open(benchmark.getRunData().getDirectory(),true)
CompletableFuture<Boolean>
mLayerType == LAYER_TYPE_SOFTWARE
TitanGraphTransaction g
mUserPaddingEnd > 0
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
PrintAttributes.enforceValidColorMode(currentMode)
r.scheduleConfigurationChanged(taskConfig,false)
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,razberryLimit)
am.getRecentTasksForUser(MAX_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE,UserHandle.USER_CURRENT)
DomAnchorImpl<DomElement>
mSettingsButton != null
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
executionStats.getSplits()
batteryService.isBatteryLow()
unhintedMessage.getMessageId()
selenium.isVisible("link=Control Panel")
Slog.wtf(TAG,sb.toString())
Exception e
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
new IllegalArgumentException()
cache()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
JSInjectionController.getInjectionText(value)
font != null
maxLength > 0
selConnection > 0
commentsListView.setSelection(0)
resources.getDimension(R.dimen.close_handle_height)
sizeNeeded >= items.length
selenium.isVisible("link=Control Panel")
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0
is("/home/source")
minor >= TCN_RECOMMENDED_MIN
KeyType
customer.getUuidId()
fileService.getLocalResource(getResourcePath(versionedBundleName))
/**   * Create the  {@link RxBleClientMock} instance using the configured values.  */ public RxBleDeviceMock build(){   if (this.rssi == -1)   throw new IllegalStateException("Rssi is required. DeviceBuilder#rssi should be called.");   if (this.deviceMacAddress == null)   throw new IllegalStateException("DeviceMacAddress required." + " DeviceBuilder#deviceMacAddress should be called.");   if (this.scanRecord == null)   throw new IllegalStateException("ScanRecord required. DeviceBuilder#scanRecord should be called.");   RxBleDeviceMock rxBleDeviceMock=new RxBleDeviceMock(deviceName,deviceMacAddress,scanRecord,rssi,rxBleDeviceServices,characteristicNotificationSources);   for (  BluetoothGattService service : rxBleDeviceServices.getBluetoothGattServices()) {     rxBleDeviceMock.addAdvertisedUUID(service.getUuid());   }   return rxBleDeviceMock; } 
service.asBinder().isBinderAlive()
Exception e
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage))
selenium.isVisible("link=Control Panel")
IndexReader newReader; 
logger.warn("There is no alarm running on {}",getUDN())
mySubstitutor.isValid()
{2,3}
Timber.e("Creating PROGRESS_DIALOG")
getService().animateCollapse()
mAuthorities.get(i)
mc.theWorld.getScoreboard().func_96509_i(player.name)
byteBuffer == null
super.dispatchTouchEvent(ev)
VMRuntime.is64BitAbi(getPreferredInstructionSet())
"Error resetting interface " + mInterfaceName + ", :"+ e
part.getDataLocation()
Observable.concat(_getCachedData(),_getFreshData())
mInfo != null
return true; 
return true; 
win.isAnimatingLw() && appWindow && showWhenLocked
getStorage().getCode(codeAddress)
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")
DEBUG_FOCUS=true
MetricsLogger.count(getContext(),DEMO_SESSION_DURATION,sessionDuration)
mWasActivatedOnDown || !mNeedsDimming
instruction.getHatLiteral()
SamplingProfiler.newThreadGroupTheadSet(group)
!mInInitialized
public Object getUri(){   return uri; } 
SIZE_V1=25
this.mWidth != this.mBaseWidth && this.mHeight != this.mBaseHeight
metadataDao.saveItem(metadata)
SLTestSlowPath01BuiltinFactory.getInstance()
mAppToken.hasContentToDisplay()
error
getAllAncestors()
loaded.getLoaded().getConstructor()
assertEquals(4,outs.size())
assertThat(response.content()).contains("\"Compute Engine Database Connection\":","\"Compute Engine State\":","\"Compute Engine Tasks\":","\"Elasticsearch\":","\"State\":\"GREEN\"","\"Elasticsearch State\"")
new RuntimeException()
cursor.getString(COLUMN_NAME)
{1,0,0,0,0,0,1,0,0,0}
new Dimension(550,300)
logger.debug(String.format("Submitting %s metric for metric emission pool",metric.getName()))
Slog.wtf(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
rhs == null
JavaSdkImpl.getMockJdk15("java 1.5")
Prefs.getBoolean(mContext,Prefs.Key.QS_DATA_SAVER_DIALOG_SHOWN,false)
BackgroundTask.run(() -> renderPage(page))
MOD_NUM=100
randomIntBetween(1,50)
randomLong()
LOG.warn("Failed to add Connection id={}, clientId={} due to {}",info.getConnectionId(),clientId,e)
myNodeComparator.compare(node,node1) > 0
final PsiReferenceExpression expression=(PsiReferenceExpression)location; 
type.getConstructor()
count <= 0
LOGGER.error("Following side pane could not be found: " + componentName,e)
sp[Z] < zbuffer[offset + x]
public static TutorialFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
cache.remove(this)
Slog.wtf(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
new ProtoFile("waffles.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
floatVal(doc)
titleTextField.getText()
transform(f -> f.map(new Elapsed<>()))
convert31YToMeters(xB,xA)
return false; 
_typeSettingsProperties.toSortedString()
modulePath.split(File.pathSeparator)[1]
clientConfig.property(ClientProperties.READ_TIMEOUT,1000)
new MediaFormat(MimeTypes.APPLICATION_ID3,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,null)
postfix.startsWith("id")
!toBeContained.initialized
bottomLeft.addView(DatabaseBrowserView.VIEW_ID)
blockChainSummary.size() == 1
jobLoader.findJobEntriesWithDescription(JobMeta.STRING_SPECIAL)
tracesFile.mkdirs()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
wrapper == null
stage.compareTo(currentStage) > 0
WATCHDOG_TIMEOUT_MILLIS=5000
mandatory
o.getClass().getSimpleName().equals("SegmentCoreReaders")
selenium.isVisible("link=Control Panel")
region == null
post.addParameter(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
mAppToken.hasContentToDisplay()
old + 33
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
_mockSettingsFactory.getServerSettings("com.liferay.portal")
step()
rootNode instanceof DBNDatabaseNode
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,63)
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
new AutoValue_RegistrationResponse(sidecarRegistrationConfiguration,configurationOverride,actions,assignments)
new IndexWriter(dir1,new StandardAnalyzer(),true)
StringUtil.endsWithChar(testDataPath,File.separatorChar)
new IndexWriter(dir,new StandardAnalyzer(),true)
Boolean.valueOf(resizeableStr)
/**   * Gets the value of the val property.  * @return possible object is {@link String }  */ public Strin getVal(){   return val; } 
focused == null
decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf2)))
IllegalArgumentException.class
DEFAULT_LABEL_MIPMAP=true
tableCache.getObject(monitor,this,childName,PostgreTableReal.class)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
args[0].length() == 51
StackHelper.isCraftingEquivalent(reqStk,invStk,true)
pathWrapper.setPoints(points)
LOCAL_OPTION.getOpt()
mapper.getTypeFactory().uncheckedSimpleType(InspectExecResponse.class)
isRunsOutsidePortal(absolutePath)
mPowerManager.isScreenOn()
TokenSet.create(PyTokenTypes.STRING_LITERAL)
list.getFirst()
new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
field.precision != null
Mockito.any()
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false)
blog.getRemoteBlogId()
field.getFieldInfo()
getParents(directory,owner).first(dir -> Comparing.equal(element,dir.getVirtualFile()))
responseString(p)
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
Reflection.methodHandle(bigArrayField.getType(),"sizeOf",null)
SelectTimeZonePacificStandardTimeTest.class
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_class_name"))
resolved instanceof PsiMember && becomesInaccessible(((PsiMember)resolved))
addContactButton.setPressedImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
BLOCK_INTENSITY_FACTOR=1.25f
selenium.isVisible("link=Control Panel")
new StreamWriterExecOutputHandle(outputStream)
Mockito.any()
mVibratorService.vibratePattern(new long[]{0},0,new Binder())
new String(bs3.toByteArray())
ZKMetadataProvider.getRealtimeTableConfig(propertyStore,tableName)
element.isNamespace()
m[M03]
new IOException(msg,ioe)
contract.getNewContrect()
i > speedBumpIndex
sum > 0
Matchers.<Map.Entry<String,String>>contains(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
LOG.assertTrue(matcher2.matches())
@SqlUpdate
return context; 
filter.setPageSize(3)
json.toString(1)
proc.setProcState < ActivityManager.PROCESS_STATE_HOME
ch.write(new LogEvent(null,-1,file.getAbsolutePath(),line))
LLVMArgNodeGen.create(1)
policyFlags & SCAN_NEW_INSTALL
fraction * (nextValue - prevValue)
LOG.info("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
Trans == TRANSPOSE
saveAttachmentTo(directory)
future.syncUninterruptibly()
logger.error("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
stopGrid(0)
U extends Identifier
e.getMessage()
(T)filteredItems
mBackgroundBitmap == null
ViewWebContentAssignedToMyRolesUpdateDueDateTest.class
logger.info("[v] Secure sync completed")
asyncContext.continueAsyncTraceObject()
ssl.has(CommonAttributes.CIPHER_SUITE)
mOuterRadius * 1.0f
e.getMessage()
limitOrder.getTradableAmount()
service.setEventService(domainEventNotifier)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
DataStream<OUT>
Preconditions.checkNotNull(mPinnedInodes)
new RuntimeException("namespace invalid for classCommandName: " + classCommandName)
this.totalBytesWritten+=bytesWritten
return false; 
keyRowMeta.getString(one)
logger.info("Creating extern file for exports")
line.endsWith("warning")
log.error(notJava6.getMessage() + " .. trying RI.")
error == null
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null)
ImmutableList.of(result)
getActiveFgCall().getPhone().sendDtmf(c)
server0.getStoreRepository().getLocalStore(storeName)
mMncStr == null
intent.resolveTypeIfNeeded(getContentResolver())
expectedValue.equals(oldValue)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
(Boolean)request.getAttribute("aui:form:useNamespace")
i < 10
endBounds.width()
MESSAGES.pathEntryNotFound(path)
serviceDataUuid == null
return true; 
ServerToClientMessage.instantiateMessage(makeChanges)
log.warn("jmeterthread.startearlier=true (see jmeter.properties)")
LOG.error("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
size() >= this.capacity
shuffleWithInexistingUuids(project1.uuid(),project3.uuid())
mWriteOwners != null
VersionNumber.parse(playVersion).getMinor()
t.equals(type)
config != Config.ARGB_8888
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
case 7: 
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
mSyncStatus.get(i)
Exception e
super(pDuration,pFromValueA,pFromValueB,pModiferListener); 
request.mConnectionID != null
style[j] instanceof ImageSpan
FULLFILLMENT_GROUP
!mProcessesReady
_typeSettingsProperties.toSortedString()
Context.getEncounterService().createEncounter(encounter)
if (DBG) log("returning Locked NetworkInfo"); 
ConstantNode.forConstant(newMethod.getEncoding(),tool.getMetaAccess(),graph())
undoBarHideListener.onUndoBarHide(mUndoToken == null)
addon.markDirty()
getUserStateLocked(callingUid)
mPowerManager.isScreenOn()
conf.getSearchBaseURL()
entity.func_189777_di() != ZombieType.NORMAL
store.invalidate()
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
service.getDomain().getName()
@Path(PATH_NODE_INDEX_ID)
logger.warning("Unable to load image using DDS loader!")
setImageDrawable(icon)
logger.warn("Cannot play track ({})",e.getMessage())
getJSDocTypeWithBraces(cm,var)
private String location; 
public abstract class AbstractHikariConfig implements HikariConfigMBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty("hikaricp.configurationFile");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn("The connectionCustomizerClassName property has been deprecated and may be removed in a future release");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn("The connectionCustomizer property has been deprecated and may be removed in a future release");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException("connectionTimeout cannot be less than 1000ms");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException("validationTimeout cannot be less than 1000ms");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException("driverClassName specified class '" + driverClassName + "' could not be loaded",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException("idleTimeout cannot be negative");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn("The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.MetricRegistry");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException("maxPoolSize cannot be less than 1");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException("minimumIdle cannot be negative");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn("connectionCustomizationClass specified class '" + connectionCustomizerClassName + "' could not be loaded",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error("when specifying driverClassName, jdbcUrl must also be specified");       throw new IllegalStateException("when specifying driverClassName, jdbcUrl must also be specified");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error("both driverClassName and dataSourceClassName are specified, one or the other should be used");       throw new IllegalStateException("both driverClassName and dataSourceClassName are specified, one or the other should be used");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error("one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified");       throw new IllegalArgumentException("one of either dataSource or dataSourceClassName must be specified");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn("both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName="HikariPool-" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn("validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout.");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error("maxLifetime cannot be negative.");       throw new IllegalArgumentException("maxLifetime cannot be negative.");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn("maxLifetime is less than 30000ms, using default {}ms.",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn("idleTimeout is less than 10000ms, using default {}ms.",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn("idleTimeout is greater than maxLifetime, setting to maxLifetime.");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn("leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms.");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug("HikariCP pool {} configuration:",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if ("dataSourceProperties".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty("password","<masked>");           value=dsProps;         }         value=(prop.contains("password") ? "<masked>" : value);         LOGGER.debug((prop + "................................................").substring(0,32) + (value != null ? value : ""));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException("Exception copying HikariConfig state: " + e.getMessage(),e);         }       }     }   } } 
new StringBuilder(167)
tessellator.tessellatePolygon(false,mode == CLOSE,normalMode == NORMAL_MODE_AUTO)
StatusBarIconController.getTint(tintArea,mMobileActivity,tint)
node.getLifecycleService().terminate()
waitUntilElement(feedbackText,"Feedback message should be present").is().present()
Utility.isConnected(context)
(Long)resultList
loaded.getLoaded().getConstructor()
centerButton(mButtonNeutral)
sublistsProperty.get().parallelStream()
createFromResourceStreamThemed(res,value,is,srcName,null,theme)
out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)
isGreaterOrEqual(platformVersion,MNC)
ts.getJobId() == jobid
condition.isEmpty()
commandExecutor.evalReadAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,true)
NFIUnsatisfiedLinkError ex
cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)
mSmallBatteryDevice ? 3 : 30
tracesFile.mkdirs()
assertEquals(1,responseBody.get("bucket_count"))
BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)
public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
groupsFile.getPath()
status.isDirectory()
return myEvaluateActionHandler; 
new ArrayList<>()
compressed.capacity()
super.beginPass(n)
mFlags.containsKey("debug")
isGreaterOrEqual(platformVersion,MNC)
dist < bestdist
rowKeyColumnIO.writeColumnWith(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
"mvn:" + DEFAULT_COORDINATES + "/"
_log.error(ioe,ioe)
val == null
StorageProxy.cas(keyspace(),columnFamily(),key,clusteringPrefix,expected,updates,options.getConsistency(),options.getSerialConsistency())
AbstractPollingScheduler.class
DB_VERSION=1
Element.F64(mRS)
OrderEntry orderEntry
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)
IndexReader.open(dir,true)
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
UIUtil.getParentOfType(JComboBox.class,c) != null
new String[11]
String newKeys=""; 
PostgreTable.class
IOException e
ListDataSource.bounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
mBiometricUnlock.stopAndShowBackup()
tileBox.getMapDensity()
new MapProducerCapabilities(false,false,false,true)
getService().animateCollapse()
cursor.getString(COLUMN_VALUE)
stack.get(stack.size() - 3).longValue()
mMncStr == null
response.set(ROLLED_BACK)
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,false,false)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
asList(DERBY,CUBRID,FIREBIRD,ORACLE,SQLSERVER,SQLITE)
GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)
service.getDataStore().getContainers()
LOG.error(e)
counter >= max
createConfig()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
HttpEntity.class.equals(parameterType)
TelephonyManager.getDefault().getPhoneType()
selenium.isVisible("link=Control Panel")
nextOption()
doesAddToastWindowRequireToken(attrs.packageName,callingUid,attachedWindow)
lp.onResolveLayoutDirection(layoutDirection)
expandableView.getActualHeight()
getterVisibility=Visibility.ANY
clusterService().localNode().name()
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
selenium.isVisible("link=Control Panel")
Slog.wtf(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
c.getLiquid().amount < c.getCapacity()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
file != null
clipItem.getText()
new RoutingControlAction(this,newPath,false,callback)
new HostAddress(domain,port)
Map<String,String>
scheduleRemoveStartingWindow(wtoken)
event.getY()
mBatteryStatus=BATTERY_STATUS_FULL
UsbManager.containsFunction(persisted,UsbManager.USB_FUNCTION_MTP)
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
GoPsiImplUtil.findBaseTypeFromRef(methodType.getTypeReferenceExpression())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").append("#")
mAnswer.setBackgroundDrawable(null)
" firstActiveTime=" + lastActiveTime
result.getReceipt().getEnergyUsageTotal()
temporaryFolder.getRoot()
viewHolder.getItemViewType() == TYPE_EDIT
adminService.createInstance(containerName,sshPort,rmiServerPort,rmiRegistryPort,null,jvmOptsBuilder.toString(),collectionAsString(features),featuresUrls)
adviced.getConstructor()
this.stringMatcherCache.size() == CACHE_TURNOFF_THRESHOLD
capacity > 1 << 30
equalTo("cookieManagerShared")
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
DEFAULT_VERIFY_ENABLE=true
new IllegalArgumentException("Advertising can't be both connectable and scannable")
executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
Objects.equals(builtInVersion,configuredVersion)
(flags & Const.FLAG_FLOAT) == 0x0
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data2,mock(BindingResult.class))
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
_parms._sample_rate < 1
logger.warn("using stable discover node UUIDs with seed: [{}]",seed)
policyFlags & SCAN_NEW_INSTALL
attribute.getMetaAttribute().isReadOnly()
LOG.error("writeToDisk == true but configFilename == null")
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
@NotNull
sourceWidth > 0
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,false)
julLogger.info("Hello world")
oldFreeSpace > 0
-1
feedForward()
mRvc == null
deployOneTaskProcess()
Thread.sleep(5000)
new RoutingControlAction(this,newPath,false,callback)
mount("/ticket",TicketPage.class,"r","h","f")
curComp.equals(cur)
flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter,ex)))
logger.info("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
from("direct:start").transform(body().append(" World")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to("mock:foo").delay(500)
SocialRequestsWebUpgrade.class
SingleServerInventoryProvider.class
new ServletException("non-HTTP request or response")
ctx.sendDownstream(e)
ConcurrentHashMap<VoiceRouter.VoiceMessageListener,Void>
capturedWildcardType.getUpperBound()
subscribers[i].queue.isEmpty()
logger.debug("AtmosphereResource {} is resuming",uuid())
readIdentifierWithSchema()
ev.getY() < mQsContainer.getBottom()
ThemeUtils.fontColor()
mPerformanceMap.get(userId)
cudnnSetConvolution2dDescriptor(cudnnContext.convDesc,pad[0],pad[1],strides[0],strides[1],1,1,CUDNN_CROSS_CORRELATION)
logger.getLogger().warn("Failover took:" + (end - start) / 1000000 + "ms")
qux.getConstructor()
((StringLiteral)literal).getSlice()
GridCacheProxyImpl metaCache=getFieldValue(fs,"meta","metaCache"); 
partitionKey.getType().toString()
StorableField[]
Double rate
position == -1
new IncrementalIndexSegment(rtIndex)
"Unknown id: " + mCurMethodId
getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).collect(Collectors.toList())
getTestGridName(nodeCount() + servers + i)
Arrays.asList("Image","ProgressBar","ScrollView","Horizontal ScrollView","Dropdown Picker","Dialog Picker","Switch","Text","TouchableBounce","TouchableHighlight","TouchableOpacity","TouchableWithoutFeedback","Toolbar","TextInput","View","WebView","ScrollView Item (same id used for all items)")
publishProgress(progress,max)
LOGGER.debug("Could not execute markEntries",ex)
r.curApp != null
getCustomArgumentResolvers()
Pair<Match,PsiElement>
-30.0f
JvmDeclarationOriginKt.OtherOrigin(aClass,descriptor)
Map<IdeFrame,GestureListener>
BeanMapper.mapList(books,Book.class,BookDto.class)
new java.util.Date()
assumeFalse("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
selenium.isVisible("link=Control Panel")
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
sharedOptsCount.contains(thread)
mFilesAll.indexOf(file)
incomingMessage.getMessagePayloadByte(0)
productVersion.startsWith("9") || productVersion.startsWith("10")
XmppStringUtils.parseBareAddress(user)
externalViewRecordVersion <= lastKnownZkVersion
assertEquals(avDegree,2.0)
wifiConfig.isValid()
super.onPause()
mVectorState == null && mVectorState.mVPathRenderer == null
assertThat(pod).hasId(expectedId)
DEFAULT_PORT=5432
new LayerView(this,0xff00ff00)
(Integer)array[this.index]
entries == null
columnTypes[column] == INT
sharedElements.remove(localName)
mStackScroller.getChildAtPosition(x,y)
standalone=true
new ObjectMapper().reader(Map.class)
mInner.end()
parameters.getFlashMode() == null
outLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
latch.await(100,TimeUnit.MILLISECONDS)
((GroovyObject)receiver).getMetaClass() != metaClass
QueryBuilder.quote(autoIncrementDefinition.columnName)
!shouldUsePool(bis)
fragmentEntryPersistence.filterCountByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
selenium.isVisible("link=Control Panel")
is("/home/source")
LOG.debug("Failed to install vim keymap.\n" + e)
OrderedMap.class
hits.length()
mapActivity.getMapActions()
(mViewFlags & ENABLED_MASK) != ENABLED
node.put("persons",persons)
type.equals("document_library")
FieldAccess.forField(delegateField).getter()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
Long.valueOf(timeString)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
tJvmGcDetailed.getJvmGcNewCount()
message + END
new Random(System.currentTimeMillis())
encoderLayerSizes == null
paramType.getName()
new RastriginFunctionModel(100,conf)
externalCacheDir.getPath()
line.startsWith("//") || line.startsWith("--") || line.startsWith("#")|| line.startsWith("REM")|| line.startsWith("/*")
final String subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo).toString(); 
format == DecodeFormat.ALWAYS_ARGB_8888
URL.encode(content)
mHandler.removeCallbacks(pae)
adapter.item(R.string.layer_recordings).selected(SHOW_RECORDINGS.get() ? 1 : 0).icons(R.drawable.ic_action_audio_dark,R.drawable.ic_action_audio_light).listen(listener).position(6)
Integer.valueOf(this.getOptional("kylin.restclient.connection.default-max-per-route","20"))
Locale.getDefault().toString()
new BooleanPreference("map_vector_data",false,true)
op == ASSIGN
new int[8571]
l.removeSensor(sensor) == 0
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=true
new IndexWriter(indexDir,ANALYZER,!add)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
_connector.getResponses("METHOD /f" + ooo + " HTTP/1.0\n\n")
mSrc.onTouchEvent(e)
MapsForgeTileSource.createFromFile(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
index.getName()
db.activityDao().getNullableByKey(dbSession,activityKey)
r.getUri().toString()
i.hasNext()
input.getPath()
xam.getStudentNumber()
odi.release()
Exception e
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
profileManager.loadSettingsProfile(settings)
/**   * Callback that is invoked <em>before</em> each test method has been invoked.  * @param context the current test extension context  */ void beforeEach(TestExtensionContext context) throws Throwable ; 
myRegisteredPasses == null
PortalUtil.getClassNameId(rendererFactory.getClassName())
!mAwake
Slog.wtf(TAG,sb.toString())
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) != PackageManager.PERMISSION_GRANTED
super.onResolveLayoutDirection(layoutDirection)
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
getTestName(true)
(a & 0xe0) == 0xb0
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
(RepositoryImpl)ethereum.getRepository()
elementType == null
getExitCode() != 0
assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)
StringUtil.isNotEmpty(name)
onDetachedFromWindow()
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
requestFilters.isEmpty()
mBuffer.remaining() > toRead
Object[]
lastFailureException instanceof ConnectException
cctx.toCacheObject(updated0)
properties.containsKey(protocol + ".extended")
scheduleRemoveStartingWindow(wtoken)
e.getMessage()
fb.capacity()
String.format("/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])",name,user.getName(),user.getPassword(),String.join(",",user.getRoles()))
Object key
Object node
modulePath.split(File.pathSeparator)[1]
mValues[7]
xml.openElement(IQ.QUERY_ELEMENT)
mWasActivatedOnDown || !mNeedsDimming
Object getValueAsString(String dimension); 
DBG=true
!group.isActive()
order.getInstructions()
return mRxTimeMillis; 
loaded.getLoaded().getConstructor()
selenium.isVisible("link=Control Panel")
dir.exists()
(Byte)array[this.index]
request.getUserPrincipal()
cs[0].set0(r,_createFrame.real_range * rng.nextDouble())
participantAddresses.get(1)
logMinimal(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
ts.getJobId() == jobid
-612878558
fluentSetters()
MUCAdmin iq=new MUCAdmin(); 
i=0
events == null
tracesFile.mkdirs()
_log.error(ioe,ioe)
set(object,value.intValue())
Number.class.isAssignableFrom(c)
LOGGER.trace(exception.apply().toString())
mDarkIntensity == DARK_INTENSITY_NOT_SET
routine != null
LOG.fatal("Could not append. Requesting close of wal",e)
location == null
new Builder().setDuration(3000).setTextColor(android.R.color.holo_blue_bright)
mouse().alt().clickAt(1,1)
checkPojoMetaClass()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
node == null
deltaY < 0
tag.getObjectId()
TYPEAHEAD_LOG.warn(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
Object changeList
return true; 
counter <= max
ACTIVATION_FAILED
id > EVENT_CODE_BY_ID.length
e.printStackTrace()
gl.marginWidth=0
new Paint()
showRecentApps(true)
FluxPeekHelper<T>
/**   * {@inheritDoc}   */ @Override public Object clone(){   MapProperty prop=(MapProperty)super.clone();   prop.value=cloneMap();   return prop; } 
mf.getColumnName()
context.var("long")
/**   * Use this merge bean post processor for collection member removal tasks that should take place before the persistence layer is initialized. This would include removing class transformers for load time weaving, and the like. See {@link org.broadleafcommerce.common.extensibility.context.merge.AbstractRemoveBeanPostProcessor} for usage information.  * @see org.broadleafcommerce.common.extensibility.context.merge.AbstractRemoveBeanPostProcessor  * @author Jeff Fischer  */ public class EarlyStageRemoveBeanPostProcessor extends AbstractMergeBeanPostProcessor implements PriorityOrdered {   protected int order=Integer.MIN_VALUE;   /**   * This is the priority order for this post processor and will determine when this processor is run in relation to other priority ordered processors (e.g.  {@link org.springframework.context.annotation.CommonAnnotationBeanPostProcessor}) The default value if Integer.MIN_VALUE.  */   @Override public int getOrder(){     return order;   }   /**   * This is the priority order for this post processor and will determine when this processor is run in relation to other priority ordered processors (e.g.  {@link org.springframework.context.annotation.CommonAnnotationBeanPostProcessor}) The default value if Integer.MIN_VALUE.  * @param order the priority ordering  */   public void setOrder(  int order){     this.order=order;   } } 
mBlockStream.remaining()
Util.killAsync(ffmpegLoadLibraryAsyncTask) && Util.killAsync(ffmpegExecuteAsyncTask)
this == group.mInternalConnection
viewOutlineAlpha=0f
StringSchemaKey key
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
getTimeout()
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default")
PortalPermissionUtil.contains(getPermissionChecker(),ActionKeys.ADD_COMMUNITY)
checkManageUsersPermission("getting profiles related to user " + userId)
private void checkGroupHasCapacity(SchedulerGroup groupContext) throws OutOfCapacityError {   if (groupContext.numPending() >= maxPendingPerGroup && groupContext.totalReservedThreads() >= resourceManager.getTableThreadsHardLimit()) {     throw new OutOfCapacityError(String.format("SchedulerGroup %s is out of capacity. numPending: %d, maxPending: %d, reservedThreads: %d threadsHardLimit: %d",groupContext.name(),groupContext.numPending(),maxPendingPerGroup,groupContext.totalReservedThreads(),resourceManager.getTableThreadsHardLimit()));   } } 
mConferenceById.containsKey(callId)
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this)
immediate=false
((EventFactHandle)((ObjectVariableContextEntry)context).left).getStartTimestamp()
new JedisClusterCommand<Set<String>>(connectionHandler,timeout,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } 
globalDisplay_.openWindow(result_.getOutputFile())
drawable != mBackgroundDrawable
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK
RequestContextImpl[]
getViewAtRelativeIndex(0)
ONE_MINUS_DST_ALPA(7)
getIsTypeCheckCallable(type)
PrivacyManager.getSettingBool(-mAppInfo.getUid(),PrivacyManager.cSettingOnDemand,true,false)
sendMessage(CMD_STOP_AP)
checkResultByFile(filePath,psiFile,false)
platformVersion < MNC
i < position + totalAddedItems
getFailedExecutionException()
type.getConstructor()
tracesFile.mkdirs()
mapper.seAttributePrefix("ROLE_")
focused == null
logger.debug("Requsting URL {}",url)
event.getX()
Assert.notNull(this.key,"A Key is required so CasAuthenticationProvider can identify tokens it previously authenticated")
parentQuerySpec.limit()
channel.getIdWithoutGroup()
createHandlerResult(c,principalFactory.createPrincipal(username,attributes),null)
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",BIGINT)
exitCode != 0
logger.info("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
orderUsingCustomerPayment && !cartHasTemporaryCreditCard
Object edge
new GeocodeFarmGeocoder(null,0)
new WorldPoint(2912,3433,0)
Thread.sleep(5000)
DEBUG=true
addToSet(mInvisibleTrackedIds,id)
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); 
CharSequence message
UIMODE_SERVICE.equals(name)
mAttributes.getFlags()
LOG.warn(e)
ctx.sendDownstream(e)
MessageNotifier.updateNotification(context,masterSecret,true,true,reminderCount + 1)
host.getHostText()
keyFrameMeta.timestamps[i] > ts
SortedMap<String,T>
mEditText.getCompoundPaddingTop()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).description(message)
fileIds == null
CRASH_AT_SIZE=5_000
mQsContainer.getLayoutParams()
mediaItemsNotUploaded < sNotificationData.currentMediaItem
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
selenium.isVisible("link=Control Panel")
DKV.put(chunkKey(_nchunks++),c,fs)
DISMISS_TO_VIEW_RATIO_LIMIT=.8
gen.setHead(true)
mResourceData[i] != null
putValues(types,AmenityType.SHOP,"fuel","car_wash","car_repair","car")
selenium.isVisible("link=Control Panel")
uri.getAssetName().toString()
ATLAS_MAP_ENTRY_FIELD_COUNT=4
vb.getData().clear()
DEBUG=true
mergeRefUpdate.forceUpdate()
mTfs.getFile(fileId)
assertEquals(expectedPlan,actualPlan)
structuralLock.isLocked()
gatherDisableActionsLocked(userId)
FastMath.max(origin,num.doubleValue())
NestedSetBuilder.stableOrder()
fraction * (nextValue - prevValue)
project.getExtensions().add("idea",ideaModel)
cors.isEnabled()
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).description(message)
!mIsRecentsShown || !mIsPipFocusedInRecent
"Stream " + importer
visibility != View.VISIBLE
r.get(10)
SmartEnterProcessors.INSTANCE.forKey(language)
config.getMaxElementsInMemory()
Integer.valueOf(topStr)
flds.length()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
WeakReference<Object>
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))
Arrays.asList("groovy","org.codehaus.groovy","groovyjarjarantlr","groovyjarjarasm","groovyjarjarcommonscli","org.apache.tools.ant")
Integer.toString(minutes)
type.createDataFormat(routeContext)
IndexOutOfBoundsException e
(_branch == jumpTouchData._branch) && (_branchNumber == jumpTouchData._branchNumber)
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
Thread.sleep(5000)
Throwable t
assertEquals(2,props.getDisabledPlugins().length,2)
!isPartialUpdate
MUST_COMPLETE(true,true,false)
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
size == 1
spellParser.isFinished()
AppLog.e(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
selenium.isVisible("link=Control Panel")
mMncStr == null
testClass.getName()
this.appView.setInitialScale(100)
BonusPackHelper.requestStringFromUrl(mUserAgent)
doCast(returnType)
Q.row(j).add(delta_qj.scale(lRate))
mFlexItem.setAlignSelf(AlignItems.STRETCH)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
DBG=false
world.setBlockMetadataWithNotify(x,y,z,targetID,targetMeta)
startupManager.registerPostStartupActivity(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
return name; 
policyFlags & SCAN_REQUIRE_KNOWN
RouteInfo r; 
T value2
typeSettingsProperties.toString()
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
dest.writeLong(mSubId)
selenium.isVisible("link=Control Panel")
defaultShift > Block.blocksList.length
bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())
59L + 118L
view.getCurrentMode()
ai.uid <= Process.FIRST_APPLICATION_UID
Math.max(values().length - 1,value)
newNode.getNodeId()
new CompoundShelfFileProcesor("shelf")
apnContext.getWaitngApns()
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ErrorUnzip.Label",realFilenameSource,e.getMessage()))
setPin(file,false)
settings.getChangeBeforeFilter()
mFile.getPath()
return CTR; 
LOG.warn("Couldn't collect changes between " + oldRevision + " and "+ newRevision,e)
assertTrue(storer().shouldProcess(curi1))
new LeftTuple(f1)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
context.isOnlyCount()
queryStrings.append(name)
Collection<Element>
logger.debug("Propose response {} from {}",msg.payload,msg.from)
dynamicType.getLoaded().getConstructor()
backUpDirs.length <= 1
mFailedMediaIds.add(attrs.getValue("data-wpid"))
assertClusterSize(2,data2,data3)
zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName(),req.getCore().getName())
mFocusStack.remove(fse)
dest.writeLong(txPower)
CONFIG_DEFAULT_VERSION.getPath()
logger.info("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0
mLayoutParams.height >= 0
result.set(0,new InetSocketAddress("idontexist",80))
fragment.getEndOffset()
Assert.assertEquals(500,counter)
containsInAnyOrder(proc("dbms.listConfig","(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, value :: STRING?, dynamic :: BOOLEAN?)","List the currently active config of Neo4j.","DBMS"),proc("db.constraints","() :: (description :: STRING?)","List all constraints in the database.","READ"),proc("db.indexes","() :: (description :: STRING?, indexName :: STRING?, tokenNames :: LIST? OF STRING?, properties :: " + "LIST? OF STRING?, state :: STRING?, type :: STRING?, progress :: FLOAT?, provider :: MAP?, id :: INTEGER?, " + "failureMessage :: STRING?)","List all indexes in the database.","READ"),proc("db.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\")).","READ"),proc("db.awaitIndexes","(timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\")).","READ"),proc("db.resampleIndex","(index :: STRING?) :: VOID","Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\")).","READ"),proc("db.resampleOutdatedIndexes","() :: VOID","Schedule resampling of all outdated indexes.","READ"),proc("db.propertyKeys","() :: (propertyKey :: STRING?)","List all property keys in the database.","READ"),proc("db.labels","() :: (label :: STRING?)","List all labels in the database.","READ"),proc("db.schema","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? " + "OF " + "RELATIONSHIP?)","Show the schema of the data.","READ"),proc("db.schema.visualization","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)","Visualize the schema of the data. Replaces db.schema.","READ"),proc("db.schema.nodeTypeProperties","() :: (nodeType :: STRING?, nodeLabels :: LIST? OF STRING?, propertyName :: STRING?, " + "propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the nodes in tabular form.","READ"),proc("db.schema.relTypeProperties","() :: (relType :: STRING?, " + "propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the relationships in tabular form.","READ"),proc("db.relationshipTypes","() :: (relationshipType :: " + "STRING?)","List all relationship types in the database.","READ"),proc("dbms.procedures","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?, mode :: STRING?)","List all procedures in the DBMS.","DBMS"),proc("dbms.functions","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?)","List all user functions in the DBMS.","DBMS"),proc("dbms.components","() :: (name :: STRING?, versions :: LIST? OF" + " STRING?, edition :: STRING?)","List DBMS components and their versions.","DBMS"),proc("dbms.queryJmx","(query :: STRING?) :: (name :: STRING?, " + "description :: STRING?, attributes :: MAP?)","Query JMX management data by domain and name." + " For instance, \"org.neo4j:*\"","DBMS"),proc("db.createLabel","(newLabel :: STRING?) :: VOID","Create a label","WRITE"),proc("db.createProperty","(newProperty :: STRING?) :: VOID","Create a Property","WRITE"),proc("db.createRelationshipType","(newRelationshipType :: STRING?) :: VOID","Create a RelationshipType","WRITE"),proc("db.index.explicit.searchNodes","(indexName :: STRING?, query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit index. Replaces `START n=node:nodes('key:foo*')`","READ"),proc("db.index.explicit.seekNodes","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit index. Replaces `START n=node:nodes(key = 'A')`","READ"),proc("db.index.explicit.searchRelationships","(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index. Replaces `START r=relationship:relIndex('key:foo*')`","READ"),proc("db.index.explicit.auto.searchNodes","(query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit automatic index. Replaces `START n=node:node_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekNodes","(key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit automatic index. Replaces `START n=node:node_auto_index(key = 'A')`","READ"),proc("db.index.explicit.auto.searchRelationships","(query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit automatic index. Replaces `START r=relationship:relationship_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekRelationships","(key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)","Get relationship from explicit automatic index. Replaces `START r=relationship:relationship_auto_index(key = 'A')`","READ"),proc("db.index.explicit.addNode","(indexName :: STRING?, node :: NODE?, key :: STRING?, value :: ANY?) :: (success :: BOOLEAN?)","Add a node to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.addRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, key :: STRING?, value :: ANY?) :: " + "(success :: BOOLEAN?)","Add a relationship to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.removeNode","(indexName :: STRING?, node :: NODE?, key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) " + ":: (success :: BOOLEAN?)","Remove a node from an explicit index with an optional key","WRITE"),proc("db.index.explicit.removeRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, " + "key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) :: (success :: BOOLEAN?)","Remove a relationship from an explicit index with an optional key","WRITE"),proc("db.index.explicit.drop","(indexName :: STRING?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Remove an explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forNodes","(indexName :: STRING?, config = {} :: MAP?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a node explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forRelationships","(indexName :: STRING?, config = {} :: MAP?) :: " + "(type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a relationship explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.existsForNodes","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a node explicit index exists","READ"),proc("db.index.explicit.existsForRelationships","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a relationship explicit index exists","READ"),proc("db.index.explicit.list","() :: (type :: STRING?, name :: STRING?, config :: MAP?)","List all explicit indexes - YIELD type,name,config","READ"),proc("db.index.explicit.seekRelationships","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (relationship :: RELATIONSHIP?)","Get relationship from explicit index. Replaces `START r=relationship:relIndex(key = 'A')`","READ"),proc("db.index.explicit.searchRelationshipsBetween","(indexName :: STRING?, in :: NODE?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in' and ending at 'out'.","READ"),proc("db.index.explicit.searchRelationshipsIn","(indexName :: STRING?, in :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in'.","READ"),proc("db.index.explicit.searchRelationshipsOut","(indexName :: STRING?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, ending at the node 'out'.","READ"),proc("dbms.clearQueryCaches","() :: (value :: STRING?)","Clears all query caches.","DBMS"),proc("db.createIndex","(index :: STRING?, providerName :: STRING?) :: (index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a schema index with specified index provider (for example: CALL db.createIndex(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.createUniquePropertyConstraint","(index :: STRING?, providerName :: STRING?) :: " + "(index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a unique property constraint with index backed by specified index provider " + "(for example: CALL db.createUniquePropertyConstraint(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.index.fulltext.awaitEventuallyConsistentIndexRefresh","() :: VOID","Wait for the updates from recently committed transactions to be applied to any eventually-consistent fulltext indexes.","READ"),proc("db.index.fulltext.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Similar to db.awaitIndex(index, timeout), except instead of an index pattern, the index is specified by name. " + "The name can be quoted by backticks, if necessary.","READ"),proc("db.index.fulltext.createNodeIndex","(indexName :: STRING?, labels :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, " + "config = {} :: MAP?) :: VOID",startsWith("Create a node fulltext index for the given labels and properties."),"SCHEMA"),proc("db.index.fulltext.createRelationshipIndex","(indexName :: STRING?, relationshipTypes :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, config = {} :: MAP?) :: VOID",startsWith("Create a relationship fulltext index for the given relationship types and properties."),"SCHEMA"),proc("db.index.fulltext.drop","(indexName :: STRING?) :: VOID","Drop the specified index.","SCHEMA"),proc("db.index.fulltext.listAvailableAnalyzers","() :: (analyzer :: STRING?, description :: STRING?)","List the available analyzers that the fulltext indexes can be configured with.","READ"),proc("db.index.fulltext.queryNodes","(indexName :: STRING?, queryString :: STRING?) :: (node :: NODE?, score :: FLOAT?)","Query the given fulltext index. Returns the matching nodes and their lucene query score, ordered by score.","READ"),proc("db.index.fulltext.queryRelationships","(indexName :: STRING?, queryString :: STRING?) :: (relationship :: RELATIONSHIP?, " + "score :: FLOAT?)","Query the given fulltext index. Returns the matching relationships and their lucene query score, ordered by " + "score.","READ"),proc("db.stats.retrieve","(section :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve statistical data about the current database.","READ"),proc("db.stats.retrieveAllAnonymized","(graphToken :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve all available statistical data about the current database, in an anonymized form.","READ"))
new ObjectMapper().reader(DiskBalancerWorkStatus.class)
mApplicationObject == null
typeSettingsProperties.toString()
new InvalidPluginRequest("No artifacts in maven layout found for plugin id" + pluginId)
LOG.info("Getting asynchronous method stub from channel")
consoles.waitUntilJdtLsStarted()
specModel.getProps()
LOG.error("Failed to get file text from file " + fileName,e)
selenium.isVisible("link=Control Panel")
a.getColor(R.styleable.WeekView_dayNameLength,mDayNameLength)
!isUnique
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
connectionManager.read(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
database instanceof SybaseASADatabase
user.getTeleport()
selenium.isVisible("link=Control Panel")
display.getMetrics(dm)
spellParser.isFinished()
1024 * 1024 * 1024
DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
Thread.sleep(5000)
info.crashInfo.stackTrace.length() > 10000
uri.indexOf("http://") == -1
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon",ioe)
result.put(toPresentationForm(node),attributes)
view != null
file.getFileName()
times(2)
platformVersion < MNC
selectedPos < lastPos
selenium.isVisible("link=Control Panel")
computeHorizontalScrollRange()
EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)
r.toRuleString(true)
boosted - base < config.boostThreshold()
TelephonyManager.getDefault().getPhoneType()
SharingEntryActionKey::getBitwiseVaue
JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
type.equals("")
new IOException(se)
private Stream getStream(int streamId,boolean unknownIsError) throws ConnectionError {   Integer key=Integer.valueOf(streamId);   Stream result=streams.get(key);   if (result == null && unknownIsError) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR);   }   return result; } 
Thread.sleep(5000)
connection.remote().nextStreamId()
30 * 60 * 1000
Parser.xmlParser()
/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Long autoCommitInterval; 
ImmutableSet.of(UNUSED_VARIABLE,UNUSED_PARAMETER,ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE,VARIABLE_WITH_REDUNDANT_INITIALIZER,UNUSED_FUNCTION_LITERAL,USELESS_CAST)
scores.getAlgorithmName()
networkOperator != null
new SkylarkTest()
paragraphNote.getId().equals(this.getId())
(mViewFlags & ENABLED_MASK) != ENABLED
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
GL20.glGetVertexAttrib(index,pname,params)
getEffectiveCleartextTrafficPermitted()
ArrayList<Integer>
(pkg.applicationInfo.flags & ApplicationInfo.FLAG_HAS_CODE) != 0
!list.append(pi)
whitePoint=5.0f
msg.getText()
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
from.getRegistryName()
mRvc == null
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent)
Object value
initOpenSSLConfCmdCipher("CipherString",ENABLED_CIPHER)
new ByteBuddy().subclass(Foo.class).method(isDeclaredBy(Foo.class)).intercept(FixedValue.value("Hello World!")).method(named("foo")).intercept(FixedValue.value("Hello Foo!")).method(named("foo").and(takesArguments(1))).intercept(FixedValue.value("...")).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
callVideoButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
ev.mStateSamples.length < NS
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
new NTCredentials(proxyUser,proxyPass,localHost,PROXY_DOMAIN)
printf(StatementGenerator.generateStringLiteral(node))
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
mLastBatteryLevel != mHealthInfo.batteryLevel
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)
size(i) == 1
latch.await(1,TimeUnit.MINUTES)
annotationHelper.printError(element,"%s annotated element should have only one constructor")
selenium.isVisible("link=Control Panel")
app.isDispatchThread()
PrintAttributes.enforceValidColorMode(currentMode)
be.hasField(BibtexFields.MARKED)
DEBUG=true
String where
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
ttl > 0
getter.getContainingClass().findMethodsByName(suggestedName,true).length == 0
WordPress.getCurrentBlog().getRemoteBlogId()
defaultCometSupport(useServlet30Async)
new KerasModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
m.getClass()
new Textifier(){   @Override public void visitMethodEnd(){     System.out.println(cr.getClassName() + ":" + methodName+ methodDesc);     for (    Object line : getText()) {       System.out.print(line);     }     System.out.println();     System.out.println();     super.visitMethodEnd();   } } 
(NON_DOUBLE_LONG & in) == 0
myBook.addUid(uid)
onPackageAppeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",entityID)
StagedModel stagedModel
String text
new Origin(origin,nativeGetUsageForOrigin(origin),nativeGetQuotaForOrigin(origin))
openConnection(true)
target.isVector()
/**   * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.  * @param self          the proxy instance.  * @param thisMethod    the overridden method declared in the superclass or interface.  * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.  * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.  * @return              the resulting value of the method invocation.  * @throws Exception    if the method invocation fails.  */ Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Exception ; 
public class BuildOperationFiringBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private final BuildOperationExecutor buildOperationExecutor;   private final RoleAwareBuildCacheService delegate;   public BuildOperationFiringBuildCacheServiceDecorator(  BuildOperationExecutor buildOperationExecutor,  RoleAwareBuildCacheService delegate){     this.buildOperationExecutor=buildOperationExecutor;     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  final BuildCacheKey key,  final BuildCacheEntryReader reader) throws BuildCacheException {     return super.load(key,new BuildOperationFiringBuildCacheEntryReader(reader,key));   }   @Override public void store(  final BuildCacheKey key,  final BuildCacheEntryWriter writer) throws BuildCacheException {     super.store(key,new BuildOperationFiringBuildCacheEntryWriter(writer,key));   } private class BuildOperationFiringBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryReader(    BuildCacheEntryReader delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void readFrom(    final InputStream input) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Loading entry " + key + " from "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.readFrom(input);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } private class BuildOperationFiringBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryWriter(    BuildCacheEntryWriter delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void writeTo(    final OutputStream output) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Storing entry " + key + " in "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.writeTo(output);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } } 
mRemote.transact(REVOKE_URI_PERMISSION_TRANSACTION,data,reply,0)
factory.getEmbdeddedServletContainer()
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
mMncStr == null
Arrays.asList("NameNode RPC","NN Connection Load","NameNode GC count","NameNode GC time")
Slog.e(TAG,"Unable to bind FLP Geofence proxy.")
buildData.getMasterHostname()
logger.debug("NODE {}: App version requested but version is unknown",this.getNodeId())
logger.error("failed to create index [{}]",indexMetaData.index(),e)
mConnector.execute("volume","format",vol.id)
req.getContentLength()
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
outLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
hasFocus()
GATEWAY_TIMEOUT=50
fraction * (nextValue - prevValue)
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold
mConferenceById.containsKey(callId)
selenium.isVisible("link=Control Panel")
sm.getString("apr.write.error",Integer.valueOf(-written),Long.valueOf(socket))
request.getSoFar() == 0
um.getUsers()
win.isDrawnLw()
sep < 0
findCodecForFormat(false,format)
result.getReceipt().getEnergyTotal()
mOneShot=true
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
@Override public final DivideBy and(Condition c){   condition.addConditions(c);   return this; } 
byteBuffer == null
serversByLoad.lastKey()
new IndexWriter(dir,analyzer,true)
rs.last()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
currentResponse.getAuthentication() != null
accounts.length > 0
mContext.startActivity(intent)
FunctionTypesKt.isFunctionType(calleeType)
cache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
Exception e
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
expectQueryToFail("UserWith:Colon",ldapUserPassword,INVALID_CREDENTIALS_ERROR)
DEBUG=true
ColorResources.getColor("tableGrid")
Formatter.getInstance().getNoneIndent()
public SELF setStandardOutput(OutputStream outputStream){   operationParamsBuilder.setStdout(outputStream);   return getThis(); } 
currentTransform.getOutputs()
PrintAttributes.enforceValidColorMode(currentMode)
"Can't have more than 32767 vertices per batch: " + maxTriangles
new TwoColorsIcon(12,((MyInfo)infos.get(1)).myColor,((MyInfo)infos.get(0)).myColor)
loaded.getLoaded().getConstructor()
new StringBuilder(URL)
mSite.getSpaceAvailable()
loadAnimator(fragment,transition,true,transitionStyle)
longSize >= 530
Executors.newFixedThreadPool(DEFAULT_MAX_CONNECTIONS)
textDelimiterLeading.getSelection()
data.synonymForSchema.findTableOrView(data.session,data.synonymFor) != null
isBuiltin
days >= 2
assertEquals("throughput",94.155883322,model.getThroughput(),0.00000001)
getBinaryTupledSet()
c >= 0x7F
getIntent().getExtras().getInt(EXTRA_PERSON_ID)
Integer.valueOf(bottomStr)
winAnimator.prepareSurfaceLocked(recoveringMemory)
new Tag(line,column,text,on)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
methodName.equals("scan")
LOGGER.warn("{} - Thread starvation or clock leap detected (housekeeper delta={}).",clockSource.elapsedDisplayString(previous,now),poolName)
changeInfo.getNewParametersSignature((JetCallableDefinitionUsage<PsiElement>)this)
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
SHOW_FQ_TYPE_NAMES=true
cnt=1
node1.checkTreeTypeAwareEqualsSilent(node2)
"".equals(format)
greaterThan(0L)
Map<Integer,Object>
a.getInt(attr,0)
HashMap<String,String>
((JavaLibrary)exported).getTransitiveClasspaths()
mHandler == null
assertEquals("incorrect number of elements",19,nodeInfo.length())
this.numberOfMessages=3000
IOException e
TestUtils.getService("test")
nextPos != mBoundPos
fileSystem.move(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
runOTIafterNTI=true
typeSettingsProperties.toSortedString()
internalTransaction.getReceiveAddress()
TelephonyManager.getDefault().getPhoneType()
new MockNode(settings,false,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
TfsShell.convertMsToDate(files[2].getCreationTimeMs())
new ExecutionEnvironment(new MockProfile(),myProject,null)
selenium.isVisible("link=Control Panel")
SpringBootWebSecurityConfiguration.class
Exception e
pkgs.get(i)
(Short)array[this.index]
concatRef.isEightBits=false
mObsoleteAgents.remove(info)
selenium.isVisible("link=Control Panel")
perthread.setSelected(true)
b == null
private void _runTearDown() throws PoshiRunnerException {   try {     _runClassCommandName(_testClassName + "#tear-down");   }  catch (  Exception e) {     throw e;   }  finally {     LoggerUtil.stopLogger();     SeleniumUtil.stopSelenium();   } } 
System.getProperty(propName)
cancelHardwareAnimations(false)
log.debug("Can not authenticate " + ac.getUsername() + " due to "+ e.toString())
createFileFromText(name,language,text,true,false)
IllegalArgumentException e
createRenderScript(false)
ig0.context().query().dynamicTableCreate(SCHEMA_NAME,getEntity(),TMPL_NAME,true)
dest.writeLong(mTxPower)
mPm.getUserBadgedDrawableForDensity(icon,new UserHandle(userId),null,0)
clientCodeChallenge == null
IndexReader.open(dir,true)
StreamOut.transferSSTables(session,ssTableReaders,ranges)
Long.valueOf(name)
ap.getSsid()
subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
m.getClass()
new Paint(Paint.ANTI_ALIAS_FLAG)
entry.notification.clone()
optionsMenuHelper.item(R.string.settings_activity).icons(R.drawable.ic_action_settings_light,R.drawable.ic_action_settings_dark)
views.html.search.noresults.render(currentUser(),q,searchResult)
IndexReader r=IndexReader.open(d); 
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
copy1DRangeFrom(0,mType.getCount(),i)
Integer.valueOf(bottomStr)
service.setEventService(domainEventNotifier)
-30.0f
ReferenceCountUtil.safeRelease(holder)
LocationManager.GPS_PROVIDER.equals(name) || LocationManager.NETWORK_PROVIDER.equals(name)
public Object getOpenSslContext(){   return openSslContext; } 
SocialNetworkingServiceUpgrade.class
day=10
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
ZLColorOptionEntry option
in.getDepth() < outerDepth
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
loaded.getLoaded().getConstructor()
externalCacheDir == null
account.getExternalKey()
versionNumber < BUKKIT_VERSION
new ObjectMapper().reader(DiskBalancerWorkItem.class)
mp.getValue()
holder == null
m.getModifiers()
new FileResource(tarFile)
e.getTag(OSMTagKey.TUNNEL) != null
intersection.size()
IndexReader reader=getOnlySegmentReader(IndexReader.open(dir)); 
new IndexWriter(d,new StandardAnalyzer(),true)
args[0]
cfs.getMemtableThroughputInMB() * 1024 * 1024
klass.getDeclaredFields(false,declaredFields)
TelephonyManager.getDefault().getPhoneType()
l < Integer.MIN_VALUE + 1 && l > Integer.MAX_VALUE
@Parameter(names="-usedefaultlisteners",description="Whether to use the default listeners") public Boolean useDefaultListeners=Boolean.TRUE; 
buildPages.getTypes()
Integer.valueOf(row.getValue(partitionCol).toString())
currentBuilder.getRoot()
new WorldPoint(2799,3074,0)
rowsRet <= 0
Assert.assertEquals(5,latch.getCount())
overlay.getTimestampFrom() >= sample.getTimestamp()
a.getDimensionPixelOffset(attr,0)
funType.toString()
containsBox.setSelected(true)
Class.forName(injectorSourceClassName)
!mParams.isZoomSupported() && !mParams.isSmoothZoomSupported()
indexStats.getPrimaries().getMerge().getCurrent()
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver)
new ModLoaderModContainer(bmClazz,canonicalPath)
id=27
new Insets(6,0,0,0)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
Log.e(TAG,"Prepare done")
mHomeStack == null
client.getBulkReply()
4 * width * height
topNProjector.doFinish()
new Span(Style.of(Style.Color.GREY),"> IDLE")
return PRESENCE_HB_INTERVAL; 
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200))
childLeftTuple.reAddRight()
AL_KARID(180.0,30,13105,new WorldPoint(3299,3194,0))
new V(1,new BooleanSetting(true))
db.checkTableExists(tablename)
Log.w(TAG,"setSubtitleAnchor in MediaPlayer")
collector.getRangeCountersToBeDisplayed(range)
IllegalStateException e
ir.mHandler != null
StringBuffer sb=new StringBuffer(); 
createStatement()
errors.addAllErrors(errors)
artifactResolver.resolve(request)
"top: new NRT point (version=" + version + ") is older than current (version="+ version+ "); skipping"
IBackupManagerService svc=mService; 
BuildData buildData=getBuildData(); 
ev.mTimeSamples.length < NT
stat.st_mode.get()
sshClient.connect(sshHost)
PyByteLiteralInspection.class
f.close(false)
@Override public ModelMojoWriter getMojo(){   return new Word2VecMojoWriter(this); } 
Timber.e(e,"Argument %s is incorrect",playColorString,e.getMessage())
tableHasData("SyncDLObject")
service.handlePinMmi(dialString)
getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)
new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)
r1.getName()
opSetIm.addMessageListener(messageSourceService)
dockedBounds.right + adjustment
telephony.isRinging()
ph.setTimeStamps()
EqualityComparer<T>
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
sliceInput.length()
DiagnosticFactory2.create(ERROR,DECLARATION_SIGNATURE)
KEY_LENGTH=20
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
m.isTablePerHierarchy()
SmsHeader.toByteArray(header).length + 1
HttpUtil.removePathParamters(uri)
limitOrder.getTradableAmount()
!startPositioningLocked(win,true,startX,startY)
parent.getOverriddenJoinColumn(propertyName)
available=true
s.setAutoCommitDelay(2)
intent.resolveTypeIfNeeded(getContentResolver())
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,21,getLayoutLog())
mIconId >= 0
new EnterSelectionDialog(shell,props,files,"Files read","Files read:")
metadata.getColumnName(columnNumber)
Integer.valueOf(topStr)
Map<Integer,UdpMessageTypeEnum>
specWidthMode == MeasureSpec.EXACTLY
ep.getClass()
sanitizedName(name)
4 * 5
mAccessibilityController.isTouchExplorationEnabled()
new LayerView(this,0xff0000ff)
"false".equals(showRelationships)
ImageUtilities.createBufferedImage(capture.getNextFrame())
implemetationMethodDescriptors.build()
new RuntimeException(e)
new AssertionError()
JDBCUtils.safeGetString(dbResult,"time")
Matrix.multiplyMM(m,0,mTmp,0,matrix.getDoubleValues(),0)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
builder.appendColumns("4dlu, pref")
shardDao.insertShard(shard,tableId,null,0,0,0)
lock.isLocked()
Iterables.getLast(cluster.getNodes()).getStatus().setUnavailable()
is(false)
StringBuffer resultPath=new StringBuffer(DefaultGroovyMethods.join(config.getClasspath(),File.pathSeparator)); 
g.setClip(offX,y,width - offX,height)
Integer.valueOf(attrValue)
editor.selectNextTab()
a.willChangeTransformationMatrix()
hasCollapsibleActionView()
out.getVersion().after(Version.V_5_4_0_UNRELEASED)
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Class.forName(className.replace('/','.'))
logger.error("Configuration for influxdb not yet loaded or broken.")
WordPress.getCurrentBlog().getRemoteBlogId()
webRequest.getNativeRequest(HttpServletResponse.class)
ComputationGraph.class
hasNextChange()
new DefaultPaymentMethod(input)
upd != null
config.getMaxElementsInMemory()
nestedBuilder.nestedTypes("FormSuccessPageSettings")
from > to
decompiler.addJScriptConditionalComment(ts.getString())
JspDocumentParser.class
selenium.isVisible("link=Control Panel")
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
!type.isInterface()
createHalf(buffer.length(),init,workspace)
super.onResolveLayoutDirection(layoutDirection)
Log.wtf(TAG,"This will become an error",ex)
Object[]
StringBuffer sb=new StringBuffer(); 
new Insets(6,0,0,0)
new InTransformReader(reader,Collections.singletonMap("{http://bar}test","test2"),null,false)
applyCurrentState()
Metric<Integer>
new TextPaint(Paint.ANTI_ALIAS_FLAG)
s.elapsedTime(TimeUnit.NANOSECONDS)
Multiset<String>
@Nullable
new File(sdkPath)
IOConverter.toInputStream(s)
HashMap<String,Operator<? extends Serializable>>
InputMethodManager.getInstance(mTargetActivity)
case 6: 
block != null
position < 0 && position >= list.size()
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName())
new Vector3f().interpolate(point1,point2,0.5f)
refDeafult != null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
request.getInputStream()
assertEquals(0.7130653858184814,score,1e-4)
Trans == TRANSPOSE
attributes.getFlags()
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
name.equals(yamlKeyValue.getKeyText())
flipZ=1
parameters1.size()
lock.isLocked()
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
WebSettings.setTextSize(WebSettings.TextSize.SMALLER)
getTtsVoiceUsed()
AvroKey<GenericRecord>
private final Resource resource; 
selenium.isVisible("link=Control Panel")
workDir.getCanonicalPath()
connectionTimeout / 2
CharArrayUtil.indexOf(whiteSpace,pattern,0) >= 0
DEBUG=true
Boolean success
Localization.menuTitle("Find unlinked files")
resolver.stop()
DEBUG=true
VDBG=true
final Prototype testedPrototype
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
context == null
hotDrinkDelay=500
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
selenium.isVisible("link=Control Panel")
mStartActivity.task == null
Environment.getRootDirectory()
attributes != null
getTestName(true)
timeout < 0
clearRefreshableViews()
entries == null
simpleRecyclerViewAdapter.insertLast("rand added item")
mStackSupervisor.mAppVisibilitiesChangedSinceLastPause
Thread.sleep(5000)
connect(monitor,null,null,false,false)
Character.isJavaIdentifierPart(c)
removeViewsInLayout(--index,1)
current > 0
sstable.markCompacted()
singleBccRecipientFromAccount
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).otherwise(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
parameters == null
ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_OBJECT,parser::getTokenLocation)
logMinimal(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
-1
telephony.getLteOnCdmaModeForSubscriber(subId)
uncompressedProto.length < 1000000
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
myPromptHooksExtensionFile == null
/**   * Default implementation of FtpClientFactory.  * @author iwein  */ public class DefaultFtpClientFactory implements FTPClientFactory {   private static final Log logger=LogFactory.getLog(FtpClientFactory.class);   private static final String DEFAULT_REMOTE_WORKING_DIRECTORY="/";   private FTPClientConfig config;   private String username;   private String host;   private int port=FTP.DEFAULT_PORT;   private String password;   private String remoteWorkingDirectory=DEFAULT_REMOTE_WORKING_DIRECTORY;   private int clientMode=FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE;   public void setConfig(  FTPClientConfig config){     Assert.notNull(config);     this.config=config;   }   public void setHost(  String host){     Assert.hasText(host);     this.host=host;   }   public void setPort(  int port){     Assert.isTrue(port > 0,"Port number should be > 0");     this.port=port;   }   public void setUsername(  String user){     Assert.hasText(user,"'user' should be a nonempty string");     this.username=user;   }   public void setPassword(  String pass){     Assert.notNull(pass,"password should not be null");     this.password=pass;   }   public void setRemoteWorkingDirectory(  String remoteWorkingDirectory){     Assert.notNull(remoteWorkingDirectory,"remote directory should not be null");     this.remoteWorkingDirectory=remoteWorkingDirectory.replaceAll("^$","/");   }   /**   * Set client mode for example <code>FTPClient.ACTIVE_LOCAL_CONNECTION_MODE</code> (default) Only local modes are supported.  */   public void setClientMode(  int clientMode){     this.clientMode=clientMode;   }   public FTPClient getClient() throws SocketException, IOException {     FTPClient client=new FTPClient();     client.configure(config);     if (!StringUtils.hasText(username)) {       throw new MessagingException("username is required");     }     client.connect(host,port);     setClientMode(client);     if (!FTPReply.isPositiveCompletion(client.getReplyCode())) {       throw new MessagingException("Connecting to server [" + host + ":"+ port+ "] failed, please check the connection");     }     if (logger.isDebugEnabled()) {       logger.debug("Connected to server [" + host + ":"+ port+ "]");     }     if (!client.login(username,password)) {       throw new MessagingException("Login failed. Please check the username and password.");     }     if (logger.isDebugEnabled()) {       logger.debug("login successful");     }     client.setFileType(FTP.BINARY_FILE_TYPE);     if (!remoteWorkingDirectory.equals(client.printWorkingDirectory()) && !client.changeWorkingDirectory(remoteWorkingDirectory)) {       throw new MessagingException("Could not change directory to '" + remoteWorkingDirectory + "'. Please check the path.");     }     if (logger.isDebugEnabled()) {       logger.debug("working directory is: " + client.printWorkingDirectory());     }     return client;   }   /**   * Sets the mode of the connection. Only local modes are supported.  */   private void setClientMode(  FTPClient client){ switch (clientMode) { case FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE:       client.enterLocalActiveMode();     break; case FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE:   client.enterLocalPassiveMode(); break; default : break; } } } 
MySitesWebUpgrade.class
tempBitmap != null
selenium.isVisible("link=Control Panel")
new IfNode(currentGraph.unique(new IsNullNode(object)),successor,deopt,0,graphId)
new Bottom()
page.getSizeInBytes()
next == null
Thread.sleep(5000)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
ch == '&'
checkPojoMetaClass()
Assert.assertEquals(1,intValue)
!Objects.equals(e.getNewRange(),e.getOldRange())
Exception e
logger.error("couldn't execute commandLine '" + commandLine + "'",e)
UPUPDATING
vel < mFlingGestureMinDistPx
c.getDeclaredMethods()
BlogsEntryLocalServiceUtil.updateEntry(_entry.getUserId(),_entry.getEntryId(),_entry.getTitle(),_entry.getSubtitle(),_entry.getDescription(),_entry.getContent(),1,1,2012,12,00,true,true,new String[0],null,serviceContext)
Internal.prefixKeyWithSalt(key)
IllegalStateException.class
this == NtiOnly
processor.getOrCreateManifest(archive)
Database.builder()
JSONValue.parse(isr)
Float.valueOf(param.getValue())
temp.reAddRight()
mService.oneTouchPlay(getCallbackWrapper(callback))
conn.getResponseCode() == 201
AlluxioWorker.class
poiCategory != null
DEBUG=true
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
context == null
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
View divider=new View(mContext); 
!currentCondition.toString().trim().equals(condition.trim())
current > 0
type.getConstructor()
NullPointerException.class
selenium.isVisible("link=Control Panel")
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
event.getY()
container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
waitForJobExecutorToProcessAllJobs(3000,500)
new JSONObject()
callNode.call(frame,arguments)
fraction * (nextValue - prevValue)
curOffset=1
node.getBeginColumn()
MessagingException me
mPathParameterMap != null
LOG.error(e)
a.getInt(attr,0)
MonitoringPortletImpl.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
List<String>
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).contains(offset)
mEnginesHelper.isEngineEnabled(engine)
interceptors.addFirst(newAInterceptor(a))
new MaxNParallelTestClassProcessor(testTask.getMaxParallelForks(),reforkingProcessorFactory,actorFactor)
profile.getActiveRules()
distanceToView(focused) > 0
getCurrentTab().handleDiscourseCopy()
action == KeyEvent.ACTION_UP
toPreCompute.size()
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
in.markReaderIndex().readChar()
Assert.assertEquals(2,renderedDDMFormFieldsMap.size())
doThrow(exception).when(fs).move(any(File.class),any(File.class))
Log_OC.wtf(TAG,"Unexpected intent " + intent.toString())
idx + 1
HashMap<String,Operator<? extends Serializable>>
settings.setWorkersEnabled(true)
JSONValue.parse(isr)
mHorizontals == null
preparedStatement.setCharacterStream(paramIndex,tmpReader)
mMncStr == null
myEditor.getScrollingModel().getVisibleArea()
log.info("{}: Requesting {} transactions for dep resolution",needToRequest.size())
selenium.isVisible("link=Control Panel")
resources.getDimension(R.dimen.close_handle_height)
types.get(channel)
mAlpha == 0
addTypes.remove("subway_region")
mFixedExecutionService.shutdown()
vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager())
backupFile(w,false)
i < 1250
elementsToDelete == null
LoopContextStepRetrieval retrievalToAdapt
builder.nullField(Fields.SUM)
!shuttingDown
actionUrl.getActionType() == ActionUrl.DELETED
sTestCaseCounter == 1
x < 7
new TextSelection(queryStartOffset + pos.position,1)
final TestActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
mAppToken.hasContentToDisplay()
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
LayoutHelper.getGBC(2,10,1,1.0D,0,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2))
mSeekBar.setProgress(mLastAudibleStreamVolume)
RemoteException ignored
selenium.isVisible("link=Control Panel")
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
packetSize=480
WordPress.getCurrentBlog().getRemoteBlogId()
setMargins(view.findViewById(R.id.studyoptions_mainframe),LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,4f,0,4f,4f)
rest.getEndpointUrlEmail()
pw.println(ps.getInstantApp(user.id))
getSongProgressMillis() > 2000
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameClass.run();   } } 
mapper.getJsonFactory()
service.getCharacteristic(charUuid.getUuid())
origin <= other
logger.error("Error connecting to Plex",e)
_typeSettingsProperties.toString()
adapterCount < MAX_VISIBLE
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
selenium.isVisible("link=Control Panel")
Thread.sleep(5000)
escape=jp.getIntValue() != 0
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true)
assertThat(measures.get("files")).isEqualTo(2)
Thread.sleep(5000)
selenium.isVisible("link=Control Panel")
offset > 0
new DexBackedMethodReference(dexFile,MethodIndex)
callGasWord.longValue()
metric.getKey().toLowerCase()
readStayAwakeConditions()
codeItem.getIndex()
case o: 
pk.getColumnName()
mDateView.setTypeface(Typeface.SANS_SERIF)
JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
scannedUnit.excludeUnlistedClasses()
testClass.getName()
Exception e
createOrcWriterOptions(sourceOi,conf,cacheWriter,allocSize)
selenium.isVisible("link=Control Panel")
windowIndex > currentTimeline.getWindowCount()
directContext.timers().deleteTimer(eow,TimeDomain.EVENT_TIME)
JDBCUtils.safeGetString(dbResult,"SOURCESCHEMA")
iceBox.isSelected()
new ObjectMapper().reader(IspResponse.class)
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onThreadPoolAdd","onContextStop")
session.getMachineIdentifier().equals(config.getMachineIdentifier())
bdtemp.floatValue()
ImmutableList.of(sourcesAsStrings)
settings.getDateBeforeFilter()
CodeStyleSettingsManager.getSettings(myProject).LINE_COMMENT_AT_FIRST_COLUMN
getRequiredString(singletonMap("string",42),list)
attacher.addRefreshableView(view,null,refreshListener,false)
cCurrentVersion=465
LOGGER.error("no property for " + type + ", "+ format)
Boolean.valueOf(attrValue)
type.getConstructor()
fpId <= 0
new Requirement(Skill.FARMING,68)
configList.size() == 0
selenium.isVisible("link=Control Panel")
response.sendError(statusCode)
new int[143]
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
patientExitObs != null
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
endPos < paraEnd
commonRegisterProblem(message," not support this syntax. Raise with no arguments can only be used in an except block",len,node,null)
this.registry.getValue().addXAResourceRecovery(recovery)
((Scorecard)serializable).isUseReasonCodes()
new Paint(Paint.ANTI_ALIAS_FLAG)
concurrency < (shift<<=1)
_connector.getResponses("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
1234567890 * 2
WEB_SYNC_MANAGER=false
logCommand.setFollowCopies(true)
sendMessage(CMD_STOP_AP)
new JavaRecursiveElementWalkingVisitor(){   @Override public void visitDocComment(  PsiDocComment comment){   }   @Override public void visitJspFile(  JspFile file){   }   @Override public void visitMethod(  PsiMethod method){     final PsiModifierList modifierList=method.getModifierList();     if (modifierList.hasModifierProperty(PsiModifier.NATIVE)) {       problems.add(manager.createProblemDescriptor(modifierList,"Native methods aren't allowed in App Engine application",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));     }     super.visitMethod(method);   }   @Override public void visitNewExpression(  PsiNewExpression expression){     final PsiJavaCodeReferenceElement classReference=expression.getClassReference();     if (classReference != null) {       final PsiElement resolved=classReference.resolve();       if (resolved instanceof PsiClass) {         final String qualifiedName=((PsiClass)resolved).getQualifiedName();         if (qualifiedName != null && sdkManager.isMethodInBlacklist(qualifiedName,"new")) {           final String message="App Engine application should not create new instances of '" + qualifiedName + "' class";           problems.add(manager.createProblemDescriptor(classReference,message,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));         }       }     }     super.visitNewExpression(expression);   }   @Override public void visitMethodCallExpression(  PsiMethodCallExpression expression){     final PsiReferenceExpression methodExpression=expression.getMethodExpression();     final PsiElement element=methodExpression.resolve();     if (element instanceof PsiMethod) {       final PsiMethod method=(PsiMethod)element;       if (method.getModifierList().hasModifierProperty(PsiModifier.NATIVE)) {         problems.add(manager.createProblemDescriptor(methodExpression,"App Engine application should not call native methods",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));       }  else {         final PsiClass psiClass=method.getContainingClass();         if (psiClass != null) {           final String qualifiedName=psiClass.getQualifiedName();           final String methodName=method.getName();           if (qualifiedName != null && sdkManager.isMethodInBlacklist(qualifiedName,methodName)) {             final String message="AppEngine application should not call '" + StringUtil.getShortName(qualifiedName) + "."+ methodName+ "' method";             problems.add(manager.createProblemDescriptor(methodExpression,message,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));           }         }       }     }     super.visitMethodCallExpression(expression);   }   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     final PsiElement resolved=reference.resolve();     if (resolved instanceof PsiClass) {       final PsiFile psiFile=resolved.getContainingFile();       if (psiFile != null) {         final VirtualFile virtualFile=psiFile.getVirtualFile();         if (virtualFile != null && !fileIndex.isInSource(virtualFile)) {           final List<OrderEntry> list=fileIndex.getOrderEntriesForFile(virtualFile);           for (          OrderEntry entry : list) {             if (entry instanceof JdkOrderEntry) {               final String className=((PsiClass)resolved).getQualifiedName();               if (className != null && !sdkManager.isClassInWhiteList(className)) {                 problems.add(manager.createProblemDescriptor(reference,"Class '" + className + "' is not included in App Engine JRE White List",LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));               }             }           }         }       }     }     super.visitReferenceElement(reference);   } } 
mView.post(mAnimationStarter)
interceptor.intercept(invocation)
saveAll(tableCollection,modelSaver.getWritableDatabase())
mValues[7]
mBondState.setBondState(address.toUpperCase(),state)
this.values
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
log.warn("Problem in JSR223 script " + e,e)
mv.visitParameterAnnotation(0,Type.getDescriptor(Nullable.class),true)
sharedOptsCount.contains(thread)
params.get(key)
expect(IDENTIFIER,"Expecting qualified name",TokenSet.create(DOT,AS_KEYWORD))
rulesJars.include(excludedJar)
commandExecutor.evalReadAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
Log_OC.wtf(TAG,"Trying to send a NULL OCFile")
window.onBackwardSliceLoaded(bottomSortKey)
m.getClass()
exclusiveConsumer2.receive(100)
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,notification.toString())
delegate.toJson(new Envelope<>(value))
component.setSelectedItem(selected)
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
file.getNameWithoutExtension()
mJobs.get(i)
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
mAppToken.hasContentToDisplay()
Q.row(j).add(delta_qj.scale(lRate))
mThumbPosition <= getThumbScrollRange() / 2
presence.getTo()
TelephonyManager.getDefault().getPhoneType()
tiHops.setText(STRING_CLUSTERS)
PaginationTestUtil.of(10,1)
new StringBundler(13)
!mTextServicesManager.isSpellCheckerEnabled()
this.thrown.equals("File must not be null")
assertThat(o.takeNext()).isNull()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
Throwable t
world.getBlockMaterial(x,y,z).isLiquid()
Boolean.valueOf(attrValue)
context.getPackageName()
factory.getEmbdeddedServletContainer()
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
new AffineTransform(mTextScaleX,mTextSkewX,0,0,1,0)
longSize >= 530
getHeight()
ClientComponent.class
cfStandardTable != null
info.getLine1NumberForSubscriber(subId)
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
Statistics statistics
lock.isLocked()
t.type.tsym.getQualifiedName()
mStartActivity.task == null
value.isNull()
IOException expected
userComponents.valueAt(i)
protocolProvider.getProtocolName()
Integer maxFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
4 * Bytes.SIZEOF_BOOLEAN
Integer.valueOf(taskIdStr)
new Paint(Paint.ANTI_ALIAS_FLAG)
JettyWebSocketClient.WS_URI.getName()
Exception e
LOG.error("Detected JMX protocol is null for clusterName = " + clusterName + ", componentName = "+ componentName)
origin.realComponent().doubleValue() <= other
selenium.isVisible("link=Control Panel")
@Specialization protected Object fromShort(short value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
driverFile.getLocalFile()
logMinimal(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
factory.getDestination(getEndpointInfo("foo","bar","http://localhost:9001"))
AvailablePortFinder.getNextAvailable()
Thread.sleep(2000)
idle++
assertNotNull(message.getPayload() instanceof Collection<?>)
selenium.waitForElementPresent("//iframe[contains(@title,'Rich Text Editor')]")
request.params()
expectQueryToFail("UserWith:Colon",ldapUserPassword,INVALID_CREDENTIALS_ERROR)
public Fix build(){   return new SuggestedFix(fixes,importsToAdd,importsToRemove); } 
typeLength == 0
LOGGER.debug("Could not perform drage and drop",ioex)
types.length >= Tuple.MAX_ARITY
"true".equals(mode)
setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true)
ActivityManagerNative.getDefault().updateConfiguration(config)
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
Integer.valueOf(leftStr)
i >= 0
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
assertEquals(provider.fetchCount,is(1))
this.cusolverDnDsyevd.invoke(solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
fullIdeArtifact.getVersion()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
BufferUtil.zeroBuffer(16)
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).contextStart(withUser)
assertEquals("List size",2,retList.size())
getView() == null
getContext()
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
StringBuffer buffer=new StringBuffer(); 
getInInterceptors()
fingerId == 0
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
logger.info("[v] Secure sync completed")
logger.error("Plugin class " + pluginClass)
timeout / 100
onDetachedFromWindow()
mAuthorities.get(i)
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)
if (VDBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
parent != root
Slog.wtf(TAG,sb.toString())
project.getExtensions().add("idea",ideaModel)
LOG.error("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
((OverriderUsageInfo)usage).getElement()
readStayAwakeConditions()
mVerticalScrollBarMode == SCROLLBAR_ALWAYSOFF
context.getComment()
copyFileEntryMetadata(dlFileVersion.getCompanyId(),dlFileVersion.getFileEntryTypeId(),fileEntryId,newDlFileVersion.getFileVersionId(),dlFileVersion.getFileVersionId(),serviceContext)
JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING
1l << 36
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
awaitPartitionMapExchange()
getTimeout()
element.getNodeName()
wlZipFilename.getText()
ArtifactCompileScope.createScopeWithArtifacts(moduleScope,Collections.singletonList(myArtifact))
new Random(System.currentTimeMillis())
String.format("User [%s] already exists",username)
final LongAdder qrys=new LongAdder(); 
XMLInputFactory.newFactory()
LARGE_SIZE=20
event.getTime() <= currentPlayTime
StorageUtils.getIndividualCacheDirectory(context)
selenium.isVisible("link=Control Panel")
mHandler.obtainMessage(MSG_FINISHED,status,0,currentPackage)
addEnergy(1)
selenium.isVisible("link=Control Panel")
enums.maxId()
staticLibrary == null
new CrypticClue("In a town where thieves steal from stalls, search for some drawers in the upstairs of a house near the bank.","Guard",new WorldPoint(2611,3324,1),"Kill any Guard located around East Ardougne for a medium key. Then search the drawers in the upstairs hallway of Jerico's house, which is the house with pigeon cages located south of the northern East Ardougne bank.")
checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
partitionId > 0
ArrayList<Library>
assertTrue(f.exists())
realm.assertThread()
callbackList.getRegisteredCallbackCookie(i)
MethodHandles.insertArguments(ci.handle,ci.handle.type().parameterCount() - 2,true,false)
Exception e
hook(new XMediaRecorder("setOutputFile",XRestriction.cMedia,new String[]{"RECORD_AUDIO","RECORD_VIDEO"}),"android.media.MediaRecorder",false)
_log.error(ioe,ioe)
version.onOrBefore(Version.V_1_0_0_Beta2)
new OutputStreamWriter(output)
externalCacheDir.getPath()
position.setEmpty()
mHandler.removeCallbacks(pae)
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,0.07948414889955241,DeepLearningModel.DeepLearningParameters.Activation.Rectifier)
userRecord.mClientRecords != null
logger.warn("Writing large partition {}/{}:{} ({}) to sstable {}",metadata.ksName,metadata.cfName,keyString,rowSize,FBUtilities.prettyPrintMemory(rowSize),getFilename())
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
new SimpleDateFormat("dd-MMM-yyyy")
new CrypticClue("Search for a crate in a building in Hemenster.",CRATE_356,new WorldPoint(2636,3454,0),"House north of the Fishing Contest quest area. West of Grandpa Jack.")
origin >= other
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
checkManageUsersPermission("getting profiles related to user " + userId)
targetWidth <= 0
newline(1)
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
logger.debug("Using override port of %d on client %s",clientName)
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
selenium.isVisible("link=Control Panel")
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
new LeftTuple(f0)
DataStream<OUT>
concatRef.isEightBits=false
LinkedHashMap<String,Object>
mGpsListener != null
ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
mMncStr == null
IWorkbenchPartSite.class
field.createField(fieldType.indexedToReadable((String)sortValue),0.0f)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE)
HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
holder.setVisible(getLoadFailViewId(),visible)
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
lp.onResolveLayoutDirection(layoutDirection)
si.id == id
javacWarning(message,null)
Loader.getResource(TEST_AUTOCONFIG_FILE,classLoader)
durableSubscriptions.get(key)
LinkedHashMap<String,Object>
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
src.getLocation()
WEB_SYNC_MANAGER=true
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
OPTION=29
parser.parse(INFO_OPTIONS,args,false)
off >= buf.length
mUserManagerHelper.getAllUsersExcludesSystemUser()
Boolean.valueOf(attrValue)
LOG.isDebugEnabled()
Exception.class
super.onDetachedFromWindow()
autoCommit != conn.getAutoCommit()
c.deactivate()
mUserPaddingStart > 0
new NullSafeComparator<>(comparator,false)
!myCards.add(card)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
mHandler.removeCallbacks(pae)
this.getDrawnBoundingBoxE6().getLongitudeSpanE6()
config().getSoLinger() > 0
catalog.getStyleByName(info.getName())
mail.getClass().getName()
new QueryException("Error in preloading targets. %s: %s",e.getClass(),e.getMessage())
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
storeField(field,true,pexp,objectExpressionType,visitor,receiver.getData())
mSharedElementNames.size()
loaded.getLoaded().getConstructor()
0 != mNetworkCapabilities
loaded.getLoaded().getConstructor()
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
from >= to
@Override public ResponseImpl description(String description){   this.setDescription(description);   return this; } 
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static Object get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
list.isPrivate()
pendingInactive.retainAll(inactive.values())
sentence.getTokens()
/**   * Returns an immutable  {@link Message} based on the fields that set in this builder.   */ public abstract T build(); 
from > to
ImportClassAndFunFix.createFactory()
attribute.getDefinition().getAttributeMarshaller()
token != null
message + END
mappers.mapper().searchAnalyzer()
StringBuffer buf=new StringBuffer(name.length() + parameters.length * 10); 
ItemSelectorWebUpgrade.class
new DeoptimizeNode(node.action(),node.reason())
mThumbPosition <= getThumbScrollRange() / 2
showRecentApps(true)
mContext.sendBroadcast(intent)
Internal.prefixKeyWithSalt(key)
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
new RoutingControlAction(this,newPath,false,callback)
((FillLayout)parentLayout).marginHeight=5
Boolean.valueOf(attrValue)
activity.createTimeListPreference(settings.LIVE_MONITORING_INTERVAL,SECONDS,MINUTES,1,R.string.live_monitoring_interval,R.string.live_monitoring_interval_descr)
return false; 
mock.expectedMessageCount(2)
Thread.sleep(100)
ignite.cache(CACHE_NAME)
path.charAt(i) == PERIOD
onRotationLockChanged()
drawable != null
selenium.isVisible("link=Control Panel")
fragmentServletDefinitions.put(servletName,entry.getValue())
stepsNumber=0
builder.breakToFill(" ")
lookupService.lookupPrincipalByGroupName(user)
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
mBitmapState.mBitmap.hasAlpha()
benchmark.expectAround("Throughput to index issues",throughputPerSecond,5116,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
new MccEntry(204,"nl",2,"Europe/Amsterdam")
new ProxyClassLoader()
writeString(writer,String.valueOf(reader.getDouble()),fieldName)
FilteringClassLoader rootClassLoader=classLoaderFactory.createFilteringClassLoader(classLoader,rootSpec); 
selenium.isVisible("link=Control Panel")
new LayerView(this,0xff00ff00)
tableHasData(newTableName)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
editor.commit()
cursor.getPosition()
synchronized (mAccounts) {   writeStatusLocked(); } 
new GroupDialog(frame,panel,null)
getRedeliverDelay()
type.getConstructor()
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
JSLinterUtil.validateInterpreterAndPackage(collectedInfo.getProject(),TsLintDescriptor.PACKAGE_NAME,collectedInfo.getState())
e.printStackTrace()
RandomDocumentPicks.randomIngestDocument(random())
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
str.startsWith(exampleName) && !str.endsWith("-sources.jar") && !str.endsWith("-tests.jar")
"Executing SQL script from " + script
formatTime(scanWifiLockOnTime / 1000)
mActiveStreamType == -1
createCurrentSeverities()
new LwjglPreferences(name)
myIpnbPanels.size() > myInitialSelection
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
isTestOnBorrow()
EnumDict<String>
EPS_THRESHOLD=1e-5f
mp.getValue()
@NotNull
new IllegalArgumentException("Not implemented")
dynamicType.getLoaded().getConstructor()
log.warn("Can't set auto-commit state: " + e.getMessage())
new Window(window,begin,end)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
StreamError se
VMDebug.attachAgent(library)
newHeight + BORDER_THICKNESS
Exception e1
Entity::propertVisibility
popup.requestFocus()
connection.getContentLengthLong()
super.onResume()
viewHolder.getItemViewType() == TYPE_EDIT
exists
final String userToken=r.getString("user_token"); 
Modifier.isPrivate(outerClassField.getModifiers())
getKeyFromGrant(alias)
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
getMergedOverrideConfiguration()
ClassFileVersion.forCurrentJavaVersion()
resultList.first()
new StringBuilder(254)
selenium.isVisible("link=Control Panel")
INDENT_BRAKE_FROM_CASE
logger.warn("Cannot play playlist ({})",e.getMessage())
IccUtils.gsmBcdByteToInt((byte)0x8c)
Table.isMetaTable(tableName)
a.getFloat(attr,0)
Assert.assertEquals(122L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
Exception ex
ver.isPreRelease()
highlighterStart < end
mFs.mkdirs(new Path(path),null)
x instanceof ISeq
appInfo.metaData.getString(key)
amp*=0.3
answer != null
MessageOutput.Factory<GelfOutput>
LOGGER.warning(e.toString())
TreeClassChooserFactory.getInstance(project).createProjectScopeChooser(title)
VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP_MR1
toolItem.getControl()
loaded.getLoaded().getConstructor()
new BindException(concept,"concept")
cf.getCompressionType() == null
qux.getConstructor()
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,analyzer,true)
Long.valueOf(name)
Utils.writeFile(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
mCameraUser.submitRequest(request,false)
e.getMessage()
new StringBuilder(709)
mHorizontals == null
ScanResult.is24GHz(frequency)
strat.getLevelSize(0) > 0
fingerId == 0
scores.getAlgorithmName()
Exception exception
/**   * Our event dispatcher.  */ private MediaDispatcher mediaDispatcher=new MediaDispatcher(); 
selenium.isVisible("link=Control Panel")
sep < 0
alertDialogBuilder.setPositiveButton(resources.getString(R.string.title_deny),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=true;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),true);     latch.countDown();   } } )
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
method.getGenericReturnType().getTypeName()
platformVersion < MNC
mKeyguardController.isKeyguardLocked()
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
logger.trace("new cluster state [{}] after waiting for master election to fail shard [{}]",shardRoutingEntry.getShardRouting().shardId(),state.prettyPrint(),shardRoutingEntry)
setNumber(String.valueOf(integerPart))
mAlpha == 0
Integer minFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
Integer.valueOf(v)
assertSame(conf,(Configuration)serializeDeserialize(conf))
continueUpdateBounds(RECENTS_STACK_ID)
rdi != null
newRemoteAddr != null
public Throwable getCause(){   return reason; } 
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
pm.performDexOpt(pkg,null,false)
LOG.error("src link in the context java doc window does not attached")
fingerId == 0
version != 0
option.getType()
x2 - x2
result.length < list.size()
new AnalyzedToken(word,currTag,lemma)
LoginWebUpgrade.class
logger.info("File descriptor is: " + fd)
Set<UidRange>
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
mInner.end()
typeDeclaration.isNovel()
ActorSDK.sharedActor().style.getDefaultBackgrouds()[1]
underlying.next(num)
modelNode.has(LOCAL)
RELAX_TIMING ? 1000 : 100
mapper.getTypeFactory().uncheckedSimpleType(Statistics.class)
event.getTime() > currentPlayTime
StatusBarIconController.getTint(mTintArea,mWifiActivity,mIconTint)
Resources.getResource(NATIVE_STARTER_CXX_SOURCE)
out.write(this.connectionAddress.getPort())
mHandler.postDelayed(pae,timeout)
MethodSpec.methodBuilder("getDatabaseName").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addStatement("return $S",databaseName)
name="email_index"
listeners != null
isEnabled()
defaults.put(PREVIEW_PANEL_HEIGHT,200)
Assert.assertEquals(2,definitions.size())
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
tracesFile.mkdirs()
synchronized (this) {   updateDisplayLocked(); } 
mDisplayContent.getSplitScreenPrimaryStack()
result.ocFile.getMimetype()
Trans == TRANSPOSE
position.getFixTime().compareTo(lastPosition.getFixTime()) > 0
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.getDefaultInstance())
world.setBlock(i,j,k,blockId,meta,1)
UI_TIMEOUT=2500
builder().experimentalAnalysisTestingImprovements(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(false)
exclusions.isEmpty()
mLastBatteryLevel != mHealthInfo.batteryLevel
mActivities.remove(r)
serialVersionUID=953707622
expression.getThen()
getFragmentManager().beginTransaction().add(R.id.content_frame,fragment,CATEGORY_TAG)
LOG.error("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
rootPortletId.equals(PortletKeys.WIKI_DISPLAY)
onRotationLockChanged()
textOffset > document.getTextLength()
new AffineTransform(mTextScaleX,mTextSkewX,0,0,1,0)
selenium.isVisible("link=Control Panel")
CharSequence message
mHandler.removeCallbacks(pae)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
RESULT_TIMEOUT=1500
new DroolsParserException(e.getCause())
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
pool != null & pool.getDataSource().getClass().isAssignableFrom(iface)
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
ImmutableSortedSet<SourcePath>
e.getMessage()
mWm.freezeRotation()
context.getPackageName()
telephony.getVoiceMessageCountForSubscriber(subId)
telephony.getDataNetworkTypeForSubscriber(subId)
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
Thread.sleep(100)
this.removeFirst()
mNwService.setInterfaceConfig(mInterfaceName,ifcg)
selenium.isVisible("link=Control Panel")
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
case 9: 
((BCECPrivateKey)privKey).getS()
gatherDisableActionsLocked(userId)
bar.setResultWaitTime(1000)
return context; 
upload1.getUploadEndTimestamp() == 0
serialVersionUID=943944089
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
indexLock.readLock()
stat == null
logExitAPICall(log,transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames)
mAttributes.getFlags()
patternLen == 0
primaryServer.getClass()
getTestName(false)
user.getRoles()
e.getMessage()
-latDegrees
ai.uid <= Process.FIRST_APPLICATION_UID
si.deliveryCount > 0
i - sizeDifference > 0
assertFalse(Modifier.isFinal(modifiers))
qux.getConstructor()
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""))
logger.warn("Cannot handle control command ({})",e.getMessage())
max=2
Color.red(endColor)
expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR
List<PyRequirement>
XMLOutputFactory.newFactory()
model.getModelName()
new StringBuilder()
newNode.getNodeId()
project == null
(parentRestricted && !restricted) || (!parentAsked && asked) || !clear
a.getDimensionPixelOffset(attr,0)
1l << rem
getValue(activity.getExtraData(),"title",kbArticle.getTitle())
props2.size() == 1
container.isReadyToRun() && !model.isUpdateInProgress()
_log.error(ioe,ioe)
mLteSignalStrength > 63
new NullPointerException("the ast is null")
binaryResultsDirectory.getAsFile().get()
GrailsDataBinder.createBinder(map,instance.getClass().getName(),request)
index < myIntermediateCalls.size()
private final View view; 
Env.valueOf(env)
selenium.isVisible("link=Control Panel")
resources.getDimension(R.dimen.close_handle_height)
status().isMovedTemporarily()
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
IBackupManagerService svc=mService; 
Dependencies dependencies
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
i <= 'Z'
-1
mCollapsibleHeight > 0
@Overide
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
MavenBuild.create(new File("projects/struts-1.3.9-diet/pom.xml")).setCleanPackageSonarGoals()
Observable.timer(0,1,TimeUnit.SECONDS)
liquid.canonical().getRenderingIcon() != null
this.currentNode
anyInt()
new BehaviorSubjectSearchEmitterFragment()
format.getShape() == JsonFormat.Shape.STRING
resource.terminate(input.getId(),extractorId)
selenium.isVisible("link=Control Panel")
manager.beginTransaction().remove(fragment).commit()
state.addNullness(true,x)
executeMethodAndCovertExceptions(httpPatch)
allowedAudiences.contains(providedAudiences)
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"")
FileUtil.isAbsolute(workingDirectory)
Long value=list.get(i); 
verify(collector)
ColorResources.getColor("menuDisabledForeground")
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
algo.equals(alloc.algo)
(float)getMax() / 5
showNotifications.isNull()
disabledIf.get()
new ProgressDialog(getActivity())
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
op.getResultAsObject()
selenium.isVisible("link=Control Panel")
logger.info("[v] Unsecure sync completed")
items[33]
"Refreshing storefiles of region " + regionToFlush + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
ALIAS.addOperationParameterDescription(resources,"infinispan.container",op)
Maps.newHashMap()
public class PublicKeyJwsSignatureVerifier implements JwsSignatureValidator {   private PublicKey key;   private AlgorithmParameterSpec signatureSpec;   public PublicKeyJwsSignatureVerifier(  PublicKey key){     this(key,null);   }   public PublicKeyJwsSignatureVerifier(  PublicKey key,  AlgorithmParameterSpec spec){     this.key=key;     this.signatureSpec=spec;   }   @Override public boolean verify(  JwtHeaders headers,  String unsignedText,  byte[] signature){     try {       return CryptoUtils.verifySignature(unsignedText.getBytes("UTF-8"),signature,key,Algorithm.toJavaName(headers.getAlgorithm()),signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
logger.info("attaching ack callback to event")
{abiList}
fragmentManager.beginTransaction().add(containerId,tabsFragment)
applyCurrentState()
Integer.parseInt(setting)
host1.getAddress()
child.resetResolvedLayoutDirection()
selenium.isVisible("link=Control Panel")
ChannelBuffers.buffer(length)
LOG.error(msg)
getSupportActionBar().setDisplayHomeAsUpEnabled(true)
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
mCurrentVrService == null
StringBuffer sb=new StringBuffer(100); 
Exception exception
request.paramAsStrings("tags")
getTestName(false)
mWPAndroidGlueCode.setContent(title.toString(),null)
Collection<GridDrStateTransfer>
appearance.getFont(attr)
Settings.Global.getInt(mContext.getContentResolver(),SETTING_ENABLE_SCORER,1)
mHomeStack == null
return prefix2; 
lock.isLocked()
new Paint(Paint.ANTI_ALIAS_FLAG)
getCutoffText(LAST_PLAYED_CUTOFF,context)
size.width < myBalloon.getSize().width
!documentsToCommit.isEmpty()
AndroidExcludedRefs.createAndroidDefaults()
new DefaultBuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())
selenium.isVisible("link=Control Panel")
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
t.isFreeformTask()
firstPos != mTargetPos
invocation.addAttachmentsIfAbsent(context)
CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
verifyAttributes(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
assertEvaluate(buildFile).lookup("txts")
Log.d(TAG,"Incoming Result")
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
start.set(Calendar.DAY_OF_MONTH,startMonth)
node1.checkTreeTypeAwareEqualsSilent(node2)
new BooleanPreference("show_view_angle",false,true,true)
61L + 122L
"[1.9.4]".equals(mcVersionString) || "[1.9,1.9.4]".equals(mcVersionString)
intent.resolveTypeIfNeeded(getContentResolver())
header.getX()
new NeuralNetConfiguration.Builder().featureMapSize(20,20)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
logger.debug("Retreiveing door data")
location.getWorld()
WEB_SYNC_MANAGER=true
new DisappearAnimationUtils(context,125,1.2f,0.8f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
merc.getDescription()
mFile.getPath()
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
doMethod("GET","/books/" + bookId,null)
WebPageDetail wd
animation.setDuration(300l)
formatTilesDefsXML(fileName,content)
mDataSetObserver != null
name.length() > 0
getTypeDescription(exceptionType)
CRASH_AT_SIZE=5_000
j == BinaryMapAddressReaderAdapter.POSTCODES_TYPE
!userInfo.canHaveProfile()
context == null
internalAddChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
telephony.isRinging()
LOGGER.debug("Error during XML parsing",e2)
List<T>
public static TitledBorder createTitledBorderSimpleWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),15,1,new Insets(3,0,6,0)); } 
OrderItemAdjustmentImpl other=(OrderItemAdjustmentImpl)obj; 
slot_name_value_pair(context,fchg)
httpRequest.getSession().setAttribute(HttpSessionIntegrationFilter.ACEGI_SECURITY_AUTHENTICATION_KEY,null)
topPanel.addView(mCustomTitleView,lp)
application.getApplicationContext()
Slog.wtf(TAG,sb.toString())
lightSpecular[lightCount][2]
mAuthorities.get(i)
sep < 0
JavaScriptClassContributor.getItemsByNameStatic(name,pattern,project,includeNonProjectItems)
@ConditionalOnEnablednHealthIndicator("diskspace")
mOuterRadius * 1.0f
_parms._export_native_model_prefix != null
globalExecutionStats.getSplits()
getService().animateCollapse()
jRestriction.put("used",mUsed)
DistinguishedNameParser dnParser=new DistinguishedNameParser(cert.getSubjectX500Principal()); 
!DescriptorUtils.isTopLevelDeclaration(descriptor) || !(descriptor instanceof FunctionDescriptor)
securityMode != SecurityMode.None
cacheFb.setMaxElementsInMemory(5)
Simple.of(value.getClass())
cfg.setBindIp(identity)
theClass.getConstructor(new Class[0])
JBUI.Borders.empty(10,0)
LOG.error("Failed to look for classes in " + jarFileName + ": "+ ioEx)
resp.addHeader("Access-Control-Allow-Headers",headers)
MAX_RETRIES_ON_ASSOCIATION_REJECT=4
new SpannedString(first,false)
callNode.call(frame,getIndirectCallTarget(getContext(),function),arguments)
from >= to
eps(otherArr)
mContext.startActivity(shortcutIntent)
scheduleRemoveStartingWindow(wtoken)
String model
progress != null
httpResponseCode == 204
i <= 'Z'
FRAME_STATS_COUNT=14
readPermission.intern()
serviceDataUuid == null
value < count
Throwable t
msbFragmentEntry.getFragmentEntryId()
uri.getAssetName().toString()
LOG.info("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
Assert.assertEquals(122L,ownerCapsuleNew.getNetUsage())
JACKSON_16
request.mConnectionID != null
new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis())
Boolean.valueOf(attrValue)
log.warn("Problem in JSR223 script ",e)
cause instanceof KBTemplateContentException || cause instanceof KBTemplateTitleException || cause instanceof NoSuchTemplateException|| super.isSessionErrorException(cause)
params.getSimulatePlatformVersion()
mMncStr == null
new Paint(Paint.ANTI_ALIAS_FLAG)
mDrawBitmap == null
type == VertexDataType.VertexBufferObject
LensPositionSelectors.back()
v.toNumericVec()
mUserManager.isUserRunning(userHandle)
200000 * 4 * 3
applicationStatistics.incrUpdateUserTimes()
Integer.valueOf(getOptional("kylin.engine.spark.min-partition","1"))
appearance.getString(attr)
mMessageReference.flag != null
log.warn("Exception while processing message: " + e,e)
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public String getBindHostKey(){   return mBindHostKey; } 
JobQueueUtils.getExecutableQueueName(jobClientNodeGroup)
IndexReader reader=IndexReader.open(dir); 
map.get(beanName).getClass()
Applications.class
shadowSize == 0
case 11: 
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
assertFalse(dr.isFailure())
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
type.createBlockBuilder(new BlockBuilderStatus(),100)
set(object,value.intValue())
filterNotTypes.size()
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
e.printStackTrace()
JDBCUtils.safeGetLong(dbResult,"PROCESS")
getContext().registerReceiver(mReceiver,filter)
appWindowToken == null
config.enterpriseConfig != null
NamedList<Object>
assertFalse("reuse-address",networkConfig.isReuseAddress())
case WIKI: 
selenium.isVisible("link=Control Panel")
pathEditor.reload(sdk != null ? sdkModificator : null)
mapper.getTypeFactory().uncheckedSimpleType(Event.class)
((ResolvedJavaType)obj).getName()
assertEquals(expectedPlan,actualPlan)
computator.getContentRectMinusAxesMargins()
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
o instanceof Xid
sessionTrackingModes.contains(SessionTrackingMode.COOKIE) || sessionTrackingModes.contains(SessionTrackingMode.URL)
TYPE_ATSC_M_H=0x00030200
this.getInputStream()
!getBoldStatus(elements[0])
new GenericItem("Test"){   @Override public List<Class<? extends State>> getAcceptedDataTypes(){     return null;   }   @Override public List<Class<? extends Command>> getAcceptedCommandTypes(){     return null;   } } 
AbstractRanking.refreshMinMax(this,graph)
Thread.sleep(1000)
statistics.addRemoveTimeNano(System.nanoTime() - start)
returnElement == null
ZooKeeperServer.class
entry.getValue().getLastAccessed() > expireTime
doTestWrapMethod(false)
mHandler.postDelayed(pae,timeout)
mm.tryLock(key,4,TimeUnit.SECONDS)
InputMethodManager.getInstance(instance)
assertEquals(strangeVocab.getIndex(),3)
_isPosInf(text)
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
typeAddrPair.getTypeReferenceField().toString()
i > 1000
ImmutableList.of()
dynamicType.getLoaded().getConstructor()
atLeast(1)
OnSubscribeGroupBy<Long,T>
getHeight()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent)
timeout=30000
if (sIsSELinuxEnforced) {   if (packageName == null) {     sServiceAppDataFile=new ZygoteService();   }  else   if (packageName.equals("android")) {     sServiceAppDataFile=BinderService.getService(BinderService.TARGET_APP);   }  else {     sServiceAppDataFile=new DirectAccessService();   } }  else {   sServiceAppDataFile=new DirectAccessService(); } 
JDBCUtils.safeGetLong(dbResult,"pid")
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
previousStepPartitioningMeta.isPartitioned()
periodUnit == 'n'
tnCount=100
Element.F64(mRS)
future.syncUninterruptibly()
Integer.valueOf(attrValue)
UIUtils.getFontHeight(group) * 10
client.onChannelDisconnect()
context.getSystemService(Context.WINDOW_SERVICE)
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_GIF,showCamera)
assertNotNull(trie.get("tee:bar"))
r.lock()
1 + 2
procs.getBoolean("NULLABLE")
Integer.valueOf(leftStr)
TelephonyManager.getDefault().getPhoneType()
return false; 
t.type.tsym.getQualifiedName()
log.warn("Problem in JSR223 script ",e)
"Invalid version for inner update [isNew=" + entry.isStartVersion() + ", entry="+ this+ ", newVer="+ newVer+ ']'
info.getName()
mHandler.removeCallbacks(pae)
new Paint()
Long.valueOf(deadline)
Set<Long>
pos == 0
changeName.equals("changeWithNestedTags") || changeName.equals("sampleChange")
defaultListenerAccess != null
topPanel.addView(mCustomTitleView,lp)
format.getDisplayName()
panel.getTabIndex() == 0
Log.e(t,"Unable to obtain BouncyCastle provider! Decryption may fail!")
convert31YToMeters(xB,xA)
" firstActiveTime=" + lastActiveTime
topActivity != null
context.getBeanNamesForType(type,false,true)
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
log.error("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
config != Config.ARGB_8888
kylinConfig.setProperty(KYLIN_JOB_JAR,path)
protected JavaCompile createTaskCompile(File wsdlFile,File tmpDir,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Compile",wsdlFile);   JavaCompile javaCompile=GradleUtil.addTask(_project,taskName,JavaCompile.class);   javaCompile.setClasspath(getConfiguration());   File tmpBinDir=new File(tmpDir,"bin");   javaCompile.setDestinationDir(tmpBinDir);   javaCompile.setSource(generateTask.getOutputs());   return javaCompile; } 
scheduler.scheduleWithFixedDelay(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
cache.flush()
mPowerManager.isScreenOn()
inLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
Math.min(desired,height)
tfoi.setSpecifyFormat(wSpecifyFormat.getSelection())
DEFAULT_VIBRATION=1000L
app.invokeLater(() -> Messages.showErrorDialog(text,title))
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(0)
LOG.trace("Could not get value for property[" + field.getQualifiedFieldName() + "] for product id["+ product.getId()+ "]",e)
source.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
InputProcessor[]
addTest(17,18,0.0f)
processEngineConfiguration.getCommandExecutorTxRequiresNew()
wsSession == null
Component.isNestedTree(component)
dlFileEntryType.getName()
assertThat(t).isNotEqualTo(e)
HashMap<String,ASTNode>
Iterable<Arg>
LOGGER.lifecycle(msg.apply())
driverPropertySource.getProperties()
getDoubleValue(key,0.0)
mTask.icon != null
bo.write(0x0b)
StringBuffer error=new StringBuffer("GroovyServlet Error: "); 
getSonicCacheDirPath()
@Input(InputType.Association) LoopBeginNode loopBegin; 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mSeekBar.setProgress(0)
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
mValues[7]
Log.wtf(TAG,e.getMessage(),e)
false || mSpew
quoineTicker.getLastPrice24h()
BuildRule libraryRule=AndroidLibraryBuilder.createBuilder(buildTarget).addSrc(src).build(graphBuilder); 
_classPathReferences.contains(file)
-Long.valueOf(count1).compareTo(Long.valueOf(count2))
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
dynamicType.getLoaded().getConstructor()
new Prepared(instrumentations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),finding)
property.getGetter().value()
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
mNotificationsUtilsWrapper.mapJsonToFormattablbeContent(headerArray.getJSONObject(i))
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
Schedulers.newThread()
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).expectError(IllegalStateException.class)
currentTestStartTime.startedAt()
mSearch.isManualSearch() && mAccount.allowRemoteSearch()
mUserStates.get(i)
compressedSliceInput.length()
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(1L)).contextStart(withUser)
getTaskWriterCount(session) > 1
idAnnotation != null
this.counterpart.split("/")
ValueNode firstMethodConstantNode=ConstantNode.forConstant(firstMethodConstant,metaAccess,graph); 
typeDeclaration.isNovel()
in.readInt()
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.basic.enabled=false","security.user.password=password")
!type.isAnonymousClass() && !type.isInterface()
String text
new Handler(){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
iconSize * DisplayMetrics.DENSITY_MEDIUM > availableHeight
/**   * An action to create an implementation of  {@link ExecutingTransformer} that support Java 9 modules.  */ protected enum InheritanceAction implements PrivilegedAction<Factory> {/**   * The singleton instance.  */ INSTANCE; @Override @SuppressFBWarnings(value="REC_CATCH_EXCEPTION",justification="Exception should not be rethrown but trigger a fallback") public Factory run(){   try {     return new Factory.ForJava9CapableVm(new ByteBuddy().subclass(ExecutingTransformer.class).name(ExecutingTransformer.class.getName() + "$ByteBuddy$ModuleSupport").method(named("transform").and(takesArgument(0,JavaType.MODULE.load()))).intercept(MethodCall.invoke(ExecutingTransformer.class.getDeclaredMethod("transform",Object.class,String.class,Class.class,ProtectionDomain.class,byte[].class)).onSuper().withAllArguments()).make().load(ExecutingTransformer.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER_PERSISTENT.with(ExecutingTransformer.class.getProtectionDomain())).getLoaded().getDeclaredConstructor(ByteBuddy.class,TypeLocator.class,TypeStrategy.class,LocationStrategy.class,Listener.class,NativeMethodStrategy.class,InitializationStrategy.class,BootstrapInjectionStrategy.class,DescriptionStrategy.class,RawMatcher.class,Transformation.class));   }  catch (  Exception ignored) {     return Factory.ForLegacyVm.INSTANCE;   } } @Override public String toString(){   return "AgentBuilder.Default.ExecutingTransformer.InheritanceAction." + name(); } } 
input.getName().toLowerCase().contains(partialName.toLowerCase())
hits.length()
mController.getMaxConnectionState(device)
SCRIM_BEHIND_ALPHA_KEYGUARD=0.55f
((BigDecimal)getConfig().get(INTERVAL)) != null
CharSequence message
PostgreSQLConnector.class
connection.getContentLengthLong()
mContext.checkCallingOrSelfPermission(PERMISSION)
timestamp - base_time > Const.MAX_TIMESPAN
notify()
LinkedHashSet<String>
new TextPaint(Paint.ANTI_ALIAS_FLAG)
jniGetLocalAnchorA(addr,tmp)
index >= widgets.length
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
verifyPosition(decoder,binary("79790020940A035985708053908307060104900402788950301217070401538F0003E8210D0A"))
mPtr != 0l
superClasses.length == 1
revWalk.release()
Integer.valueOf(2)
i < 1000
childLeftTuple.reAddLeft()
new UnsupportedOperationException()
buffer.getSize()
ifcg.addr == null
loaded.getLoaded().getConstructor()
new ConcurrentMapCache()
doTest(false)
temp.reAddRight()
Files.exists(start)
TopLevelBuildData topLevelBuildData=getBuildData(); 
new DefaultConfiguration(connectionProvider,null,null,null,null,null,null,null,null,null,dialect,settings,null)
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
getInputs().file(new Callable<FileCollection>(){   public FileCollection call() throws Exception {     IvyPublicationInternal publicationInternal=getPublicationInternal();     return publicationInternal == null ? null : publicationInternal.getPublishableFiles();   } } )
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
_log.info("Skipping parameter with key " + key + " because of invalid value "+ kvp[1],e)
mLteSignalStrength > 63
loaded.getLoaded().getConstructor()
_appendables == null
tracesFile.mkdirs()
assertEquals(actualTables,expectedTables)
IOException e
fluentSetters()
evaluate("value = read_config('foo', 'bar', 'baz')").lookup("value")
myMaxRowCount=20
selenium.isVisible("link=Control Panel")
T
mVertical ? "true" : "false"
mExpandedDialog != null
client.completion(buf,buf,cursor)
return 621; 
endFunction("delete_column_statistics_by_table: ",ret != false)
offset(100000.0)
new FtrlDelta(false,alpha)
StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName())
!lowByte.equals("")
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
imageUrl.length() >= MAX_FILE_NAME_LENGTH
myPriorityRange.contains(element.getTextRange())
this(file,NCSA_FORMAT); 
i > 0
createReactive(config)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
cfs.clearUnsafe()
MethodCallUtils.isCallToMethod(expression,"java.util.Formatter",null,"format",null) || MethodCallUtils.isCallToMethod(expression,"java.io.Writer",null,"append",null) || MethodCallUtils.isCallToMethod(expression,"com.google.common.base.Preconditions",null,"checkNotNull",null)
display.getMetrics(mDisplayMetrics)
sm.getString("standardContext.stoppingContext")
@Overide
mBondState.setBondState(address.toUpperCase(),state)
!justBootedUp
JMSDestination.class
logger.error("Error while matching regex [" + matcher + "] for string ["+ matched+ "] "+ pse.getMessage())
request.getServletPath()
callbackList.getRegisteredCallbackCookie(i)
id.getHash()
MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())
result.ocFile.getMimetype()
childrenExpanded ? mDividerHeight : mChildPadding
lock.isLocked()
con.getClass().getName()
Throwable e
collectCount < lim
policyFlags & SCAN_NEW_INSTALL
labelCursor != null
getActivity().findViewById(R.id.detail_title) != null
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
selenium.isVisible("link=Control Panel")
indexSpec.setMaxLeafRecords(100)
RCFileMergeMapper.jobClose(outputPath,noName,job,console)
mCurrentReactContext.runOnJSQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
Arrays.asList(Visualizer.class,ConfigElement.class,Assertion.class,Timer.class,PreProcessor.class,PostProcessor.class)
selenium.isVisible("link=Control Panel")
mEase4.setTextColor(mNextTimeTextRecomColor)
found != r
dlFileShortcut.getFolderId()
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"cpuinfo",pw)
mHeight <= 0
logger.error("Failed to execute lifecycle policy [{}] for index [{}]",policyName,idxMeta.getIndex().getName(),policyName)
batteryVp >= full
frag.element("status")
logger.isWarnEnabled()
LOG.warn(title + "; " + message)
internalCluster().getInstance(BlobIndicesService.class)
text.startsWith("Compilation completed successfully")
verifyNothing(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
assertEquals(expectedPlan,actualPlan)
message.getMessageId().getDataLocator()
logger.debug("Invalid Atmosphere Version {}",javascriptVersion)
parser.hasNext(4)
logger.error("Configuration for influxdb not yet loaded or broken.")
IBackupManagerService svc=mService; 
report(n,MISPLACED_ANNOTATION)
builder.length() == 0
tag1.getText()
realm.assertThread()
LOGGER.warn("Found legacy attribute value [{}] which will be converted to [{}] as part of a service multifactor authentication policy." + "The definition SHOULD manually be upgraded to the new supported syntax",valueToConvert,RegisteredServiceMultifactorPolicy.FailureModes.UNDEFINED,"misagh")
targetType.getConstructor()
((MapType)toCheck).getKeysType()
securityMode != SecurityMode.None
ticket.notify()
mTextColor.getColorForState(ds.drawableState,0)
LLVMMetadataNode m2
verify(instrumentation,times(2)).isRetransformClassesSupported()
sNotificationData.currentPostItem >= sNotificationData.totalPostItems
a.getInt(attr,0)
mObsoleteAgents.remove(info)
Files.createDirectory(destPath)
(visibility & VISIBILITY_MASK) == VISIBLE
queue.size() < 100000
mTrustListeners.get(i)
mCollapsingTextHelper.setExpandedTextGravity(gravity)
deltaY > 0
ArraysUtil.merge(nodes1,nodes2)
newroot.length == 1
getData() ^ 0x8
new StringBuilder()
currencyPair.counter.getCurrencyCode().toString()
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
mock.expectedMessageCount(2)
mConnector.executeForList("volume","list")
DEFAULT_BG_LOW_JOB_COUNT=2
setVerticalAlignment(BOTTOM)
DEFAULT_ALLOW_SPILLING=false
platformVersion < MNC
new IllegalArgumentException(ERROR_UPDATE_REMOTE_NAME_MISSING)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
LocalFileSystem.getInstance().findFileByPath(filePath)
ONE_MINUS_DST_ALPA(7)
Slog.e(TAG,"FLP HAL not supported")
writeln(serverInfo + columnEnd)
id=15859
mGpsListener != null
(System.currentTimeMillis() - startTime) < 10
log.warn("Problem in JSR223 script ",e)
case 2: 
anchorView.getWindowToken()
writer.write(getReferenceIndex(instruction))
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
localPlayer.getWorldLocation().distanceTo(trapLocation) <= 1
localLOGV || false
command.getNewName()
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
assertEquals(3,sqlStatements.size())
logger.debug(getName() + " has been started")
ConfigPropertyVetoExceoption ex
position > lastPos
ZLibrary.Instance()
newState.score()
log.debug("Error while closing command context",exception)
LOG.info("{} failed to start",processRef)
buf.readInt()
resultMetaData.getColumnName(i)
doNothing().when(safeOutputStreamConsumer).stdOutput(anyString())
origin < other
res >= mLen
Log_OC.wtf(TAG,"Unexpected intent " + intent.toString())
mNavigationBarView.getPaddingStart()
ret.size()
getCompletePredicate()
oldVersion=7
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
mBluetoothService.notifyIncomingA2dpConnection(address,false)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRole"))
assertEquals(actual,expected)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
sampler.getFileField()
new FairAffinityFunction()
sep < 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
log.error("Error parsing command line: " + e.getMessage())
lock != null
shuffleWithInexistingUuids(project1.uuid(),project3.uuid())
c == interfaceClass
reportMatcher(new InstanceOf(clazz)).<T>returnNull()
pm.performDexOpt(pkg,null,false)
response.getContentCount()
!basicFieldMetadata.getForcePopulateChildProperties()
private final RulesProfileWrapper qProfile; 
LOGGER.lifecycle(msg.apply())
analysis.getType(expression)
header.getX()
assertEquals(9,batchExecutionAssistant.processedCount())
container.getTimeFormat().equals(TimeFormat.DATE)
mPowerManager.isScreenOn()
AuthUI.getInstance().silentSignIn(this,getSelectedProviders()).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     if (task.isSuccessful()) {       startSignedInActivity(null);     }  else {       showSnackbar(R.string.sign_in_failed);     }   } } )
file.getNameWithoutExtension()
invoiceDao.create(invoice,1,context)
peekServiceForUserLocked(userId)
mContext.startActivity(cantAddAccount)
new WitnessService(appT)
return 1; 
mResourceData[i] != null
handleIncomingUser(Binder.getCallingPid(),callingUid,userId,type == ActivityManager.INTENT_SENDER_BROADCAST,true,"getIntentSender",null)
suggestion.getTooltip() != null
params.getSimulatePlatformVersion()
binary.getName()
day <= 23
sendGetBlockHeaders(syncManager.getGapBlock().getHash(),FORK_COVER_BATCH_SIZE,1,true)
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
parent instanceof AppWidgetHostView
dbStat.setLong(1,sessionType.getPid())
new DeoptimizeNode(deoptAction,deoptReason)
mappers.mapper().searchAnalyzer()
disableForUser(what,token,pkg,mCurrentUserId)
chatButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
logger.debug("Creating bloom filter for {} elements and spec {}",numElements,spec)
join("when() requires an argument which has to be 'a method call on a mock'.","For example:","    when(mock.getArticles()).thenReturn(articles);","","Also, this error might show up because:","1. you stub either of: final/private/equals()/hashCode() methods.","   Those methods *cannot* be stubbed/verified.","2. inside when() you don't call method on mock but on some other object.")
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
data[1] > 3
DateUtils.parseDate(source,iso8601Patterns)
logger.info(String.format("decoded %s as %s",str,p))
mService.getProfiles(UserHandle.myUserId(),true)
Bytes.toBytesBinary(tableNameOrRegionName)
myModule.getProject()
target.getDestination()
_persistedScheduler.getJobNames(groupName)
new LeftTuple(new DefaultFactHandle(1,"cheese"))
walk.release()
logger.warn("Cannot update the group coordinator ({})",e.getMessage())
this.tvShows.addAll(tvShows)
new GroupTest(false)
v1 & 0xc0
null != m_parallel
target == null
version.toString()
MAX_DIMEN_FOR_ROUNDING=1080
assertEquals(7,LambdaOperations.values().length)
proxy == null
id.errorIfMissing()
featuresMask != null
super.notifyListenersAboutAddedElement(element)
selenium.isVisible("link=Control Panel")
dist > maxDist
Integer.valueOf(stackIdStr)
rows[1].getLock().writeLock().lock()
templatesToAddressList(engine,replyTo,model)
new Rect(left,top,bottom,right)
i=0
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
mFinishing && mSupportHardware
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required")
manager.beginTransaction().remove(fragment).commit()
platformVersion < MNC
getNewValue()
"Expanded " + before + " to "+ replace
version < 6.0
sep < 0
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
out.writeLong(sampleCount)
NoopChatHandlerProvider.class
Throwable t3
public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } 
selenium.isVisible("link=Control Panel")
collector.awaitFinish(2000)
System.currentTimeMillis()
log.warn(msg,t)
return false; 
conn.setSourceDecoration(srcDec)
message.getExpiresInSeconds() * 1000
rendererMap.put(info.target,info.renderer)
log.warn("Problem in JSR223 script " + e,e)
mHandler.removeCallbacks(pae)
greaterThan(0L)
StateManagementUtils.createEndForkedExecutionMojoBinding()
invocations >= 8
getService().animateCollapse()
"+" + localNumberImprecise.substring(0,difference) + number
_invokerFilterHelper.destroy()
Exception exception
selenium.isVisible("link=Control Panel")
mBiometricUnlock.stopAndShowBackup()
selenium.isVisible("link=Control Panel")
return lastPath; 
Thread.currentThread().isInterrupted()
mDuration >= 0
defaultListenerAccess != null
buffer.putInt(0x1)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
!mDreamsEnabledByDefaultConfig
frequencyKhz < 30000
WebSettings.setTextSize(WebSettings.TextSize.LARGEST)
GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))
polyLats.length - 1
Localization.menuTitle("Look up document identifier")
context.restartRequired()
expected == double.class
new RowMutation(KSNAME,ByteBufferUtil.bytes(key))
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end)
ex.getLocalizedMessage().equals("no source files")
mContext.getPackageManager().getApplicationInfo(sbn.getPackageName(),0)
selenium.isVisible("link=Control Panel")
flds.length()
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
ImmutableSet<ImplemetationMethodDescriptor>
/**   * Telnet port.  */ private String port="5000"; 
b.setSubject(TEST_SUBJECT).setSentDate(SENT_DATE).setHideTimeZone(false)
type == TRIANGLES
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
CommonBundle.getErrorTitle()
prefs.getBoolean(ACRA.PREF_DISABLE_ACRA,true)
ActorSDK.sharedActor().style.getTextPrimaryColor()
checkPojoMetaClass()
iconSize * DisplayMetrics.DENSITY_LOW > availableHeight
Integer.valueOf(taskIdStr)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
Map<String,EnvironmentIdExtractor>
dest.writeLong(mSubId)
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,myLastSelectedArtifact,false)
b == null
scriptBuilderFactory.script(settings.getDsl(),"build").fileComment("This generated file contains a sample Kotlin library project to get you started.").plugin("Apply the Kotlin JVM plugin to add support for Kotlin on the JVM","org.jetbrains.kotlin.jvm",kotlinVersion).compileDependency("Use the Kotlin standard library","org.jetbrains.kotlin:kotlin-stdlib")
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(2L)).contextStart(withAdmin)
fileMeasures.get(1)
expression.getThen()
Thread.sleep(5000)
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
getClass().getName()
superClass == Object.class
Rank.getInstance()
queryIndex == 0
XmlErrorMessages.message("cannot.resolve.symbol")
getConfig().getBoolean(SPIDER_POST_FORM,false)
selenium.isVisible("link=Control Panel")
{4,5,5,11,6,5,7,5,11,11}
CameraAccessException e
bb.get() == EQUALS_BYTE
schedulerConfig.equals(BOUNDED_FCFS_ALGORITHM)
type.getConstructor()
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName)
is(2)
JvmDeclarationOriginKt.OtherOrigin(element)
_("")
e.getMessage()
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,true)
pur.getFile(dirId.getId())
type.getConstructor()
!query.isCatchup()
toArrayHelper(1)
Throwable ex
report(n,MISPLACED_ANNOTATION)
String.format("'%s'",targetPlatform.getName(),input.getDisplayName())
categories.size() > 0
rootNode instanceof DBNDatabaseNode
maxNamesLen - opt.length() + 2
calendar.roll(Calendar.DATE,2)
mThumbPosition <= getThumbScrollRange() / 2
tableCache.getObject(monitor,this,name,DB2View.class)
LOG.error("Cannot create writer for app " + this.applicationId + ". Skip log upload this time. ")
IllegalAccessError.class
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
Collection<DelayedEntry>
AbstractBootstrap<ServerBootstrap,ServerChannel>
loaded.getLoaded().getConstructor()
Log_OC.wtf(TAG,"initFragments() called with invalid NULLs!")
clampScreenBrightness(mLastUserSetScreenBrightness)
selenium.isVisible("link=Control Panel")
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitide()
Boolean.parseBoolean(value)
selenium.isVisible("link=Control Panel")
mUserPaddingEnd >= 0
Localization.lang("Check integrity")
Slog.wtf(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
new CountDownLatch(0)
enabled=false
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
completion.otherwise(ex -> handler.handle(exchange,ex))
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
mMatchMode=numOfMatchesPerFilter
matcher.matches()
mBottomLeftStrip=drawable
getDatabase().updateWithOnConflict(table,values,whereClause,whereArgs,SQLiteDatabase.CONFLICT_FAIL)
urlString.indexOf("/monitoring")
new PoolBagEntry(null,pool)
fireCallPeerChangeEvent(CallPeerChangeEvent.CALL_PEER_STATE_CHANGE,oldState,newState)
mGpsListener != null
new HashSet<>()
selenium.isVisible("link=Control Panel")
new Paint(Paint.ANTI_ALIAS_FLAG)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
VERSION=8
Integer.valueOf(st.nextToken())
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]))
result=60
this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)
out.write(bytes,0,len)
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=false
data != null
LOG.error("Failed to get file text from file " + fileName,e)
!isAllSized()
selenium.isVisible("link=Control Panel")
new StringBuilder(709)
new NeuralNetConfiguration.Builder().featureMapSize(20,20)
returnJClassRef.dotclass()
tracesFile.mkdirs()
telephony.isRadioOn()
selenium.isVisible("link=Control Panel")
mPackageUsage.write()
size=50000
StringBuffer targetUrl=new StringBuffer(); 
Set<UidRange>
new RendezvousAffinityFunction()
distance / MILES_KILOMETRES_RATIO
if (mIsOverride) {   if (sb.charAt(sb.length() - 1) == ';') {     sb.deleteCharAt(sb.length() - 1);     sb.append(" !important;");   }  else {     Timber.d("AnkiFont.getCSS() - unable to set a font attribute important while override is set.");   } } 
defaultListenerAccess != null
new UncheckedIOException(e.getMessage(),e)
getAddedCount()
mBoundServices.isEmpty()
telephony.getLteOnCdmaModeForSubscriber(subId)
testSame("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
T
@SuppressWarnings("unused") private final Object strongReference; 
selenium.isVisible("link=Control Panel")
mAdapter == null
a.length >= count()
keyCode == KeyEvent.KEYCODE_SEARCH
new Paint(Paint.ANTI_ALIAS_FLAG)
getLogger().error("Unknown classloader [IAE]: " + e.getMessage())
tool.getShortName().equals(shortName)
new int[3008]
Looper.getMainLooper()
getTypeDescription(exceptionType)
WordPress.getCurrentBlog().getRemoteBlogId()
XBeanBrokerService broker=null; 
ListDataSource.bounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
new PageException("不支持该SQL转换为分页查询!")
mAms.mWaitForNetworkTimeoutMs=100
showNotifications.isNull()
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
curLocation != null
_buf.position() - start
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   @Override public void run(){     postUiTask.run(roots);   } } ,ModalityState.stateForComponent(getRootPane()))
mNumOps.getOpsAdded() >= opsAllowed
in.markReaderIndex().readChar()
appInfo.targetSdkVersion >= O
mPulseCallback.onPulseFinished()
recursiveUFSDeletes.remove(ancestor)
Slog.e(TAG,"Failed to build intent for " + packageName)
assertThat(cluster).host(2).comesUpWithin(20,SECONDS)
comment.lastIndexOf(']')
DEFAULT_TIMEOUT_MILLIS=100
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
CommandLineTransformer.transform("-i","-np","-v","-J-Xmx1g","-J-Xms1m","\"c:\\path to\\русский каталог\"")
domElement.getXmlTag() != null
selectionChildIndices[j] == i
mStackScroller.getChildAtPosition(x,y)
token.equals("?") && !prevToken.equals("!") && !prevToken.equals("\u00a0")
localVideoEnabled && !audioManager.isSpeakerphoneOn() && !audioManager.isBluetoothScoOn()
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
sExecutorService.shutdown()
out.writeDouble((Float)obj)
assertEquals(expectedPlan,actualPlan)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
flags_=0
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
latch.await(100,TimeUnit.SECONDS)
numTouched == 1
cache.localPeek(key,ONHEAP)
mPowerManager.isScreenOn()
mock.expectedMessageCount(3)
movementComponent.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
selectedFileTemp != null
CACHE_MANAGER.addCache(storageCache)
ys.at8(row)
new ChunkedUploadRemoteFileOperation(mContext,mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict(),timeStamp)
createFromResourceStream(res,value,is,srcName)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
finish()
new UdpConnector(localUdpPort,address,port)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
attributes.getFlags()
application.getApplicationContext()
_log.error(ioe,ioe)
rs.getString(columnName)
new IncorrectOperationException()
isGreaterOrEqual(platformVersion,MNC)
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
Thread.sleep(500)
logoutPost != null
handler.add(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
!mIsRecentsShown || !mIsPipFocusedInRecent
StringBuilder b=new StringBuilder("ProcessInstance "); 
new TreeMap<>()
answer == 1
newName.equals(code[i].getPrettyName())
type.getConstructor()
selenium.isVisible("link=Control Panel")
createHalf(buffer.length(),init,workspace)
battery.addPower(MjAPI.MJ)
assertEquals("The bus id should be changed",bus.getId(),"test")
backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
chainHeight != 0
private final CircularClipper mClipper; 
i < 10000
selenium.isVisible("link=Control Panel")
Integer.valueOf(leftStr)
existing.getState()
table.getParameters()
Object edge
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
resolver.start()
super.getAttributeAsInt(FOUNDATION_ATTR_NAME)
in.getDepth() < outerDepth
new KafkaComponent()
install.getAbsolutePath()
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
movementComponent.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
group.isCommunity()
mMncStr == null
UnitBitSet.MAX_CHARS_IN_WORD >= letters.length()
Assert.assertNotNull(semaphore.acquire(3,TimeUnit.SECONDS))
Throwable e
issuerBuilder.build()
ProxyHelper.createProxy(endpoint,ISay.class)
new Error(me)
Collections.sort(backends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
Integer.valueOf(nextArgRequired())
V
display.getMetrics(mDisplayMetrics)
internalCluster().startNodesAsync(2)
substitutor.substitute(parameters[i].getType())
memberRequestPersistence.update(memberRequest)
NameTable.getObjCType(var.getType())
TelephonyManager.getDefault().getPhoneType()
contentType != null
KeyValue<String,Long>
inLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
mWorkerId + BASE_FILE_NUMBER
receiverUserId != mCurrentUserId
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
Long id
packageNames.length == 1
annotations == null
transform(matrix,source,width,height,false,recycle)
case 4: 
assertEquals(q.toString(),"[]")
mock.expectedBodiesReceived("Hello World 2")
TelephonyManager.getDefault().getPhoneType()
scopes.stream()
logger.warn("running policy with current-step[" + currentStep.getKey() + "]")
data != null
LOG.error("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
script.getInstructions()
heatpumpValues[65]
assertTrue(model.getUniqueItems())
command <= 0x0F
coreThreads.asString()
mWasActivatedOnDown || !mNeedsDimming
shortSizeDp > 600
Thread.sleep(5000)
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
mDataAuthorities == null
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcOperations namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
SamlAdapterTestStrategy.uploadSP("http://localhost:8081/auth",keycloakRule)
new Paint()
animation == mHeaderOutAnimation
TimeValue.timeValueMillis(2)
new Intent(ACTION_FAST_TRACK)
(new OpenEphyraCorpus()).commandLine()
String modSource
dest.writeLong(mSubId)
new FormAttachment(wWildcardField,margin)
new IllegalArgumentException(String.format(ERROR_BRANCH_LIST_UNSUPPORTED_LIST_MODE,listMode))
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
this.mPointerID != TouchEvent.INVALID_POINTER_ID
isNavBarVirtKey && !down
new IndexWriter(tmpDir,new WhitespaceAnalyzer(),true)
view.isLaidOut()
trade.getPrice()
request.getContentLength()
tw.release()
Iterable<SkyKey>
Arrays.asList("txt","text","json","xml","atom","rss","png","jpe","jpeg","jpg","gif","wbmp","bmp")
endpoint.toString()
clone.setClassNameId(getClassNameId())
StringBuffer sb=new StringBuffer(); 
PollsServiceUpgrade.class
parent instanceof PsiReturnStatement
private final Action reloadAction; 
any()
dest.writeLong(mSubId)
JobQueueUtils.getExecutableQueueName(jobClientNodeGroup)
randomFrom("allocate","rollover","replicas","forcemerge","shrink")
Class.forName(proxiedDriver)
annotation.authenticationType()
frustumNear
_sharingEntryService.addSharingEntry(user.getUserId(),classNameId,classPK,themeDisplay.getScopeGroupId(),shareable,sharingEntryPermissionDisplayActionKey.getSharingEntryActionKeys(),expirationDate,serviceContext)
region != null
Name.guess(name)
oldConfig.densityDpi != newConfig.densityDpi
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,true)
major < 3
resp.addHeader("Access-Control-Allow-Headers",headers)
oldConfig.densityDpi != newConfig.densityDpi
T extends Capability
packet.getAttribute("from").split("/")
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THREADS))
paintFooterLine.setColor(FOOTER_COLOR)
mSrc.getParent()
View divider=new View(mContext); 
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws IOException {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
mService.addOrUpdatePasspointConfiguration(config)
nextY < 0
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
cookies.columnMap()
bookmarksFolderFinder.findBF_BE_ByG_F(groupId,folderId,queryDefinition)
tw.release()
mPackageUsage.write()
mPowerManager.isScreenOn()
font.drawMultiLine(batch,results,20,300)
super.onResolveLayoutDirection(layoutDirection)
new ScriptC_errorCalculator(mRS,resources,R.raw.errorcalculator)
TStatement extends PsiStatement
mListener.setConnectionId(0)
t.getVolume()
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
ps == null
dest.writeLong(mSubId)
assertRestrictBackgroundOff()
loadedLibraries.get(libnameversion)
assertClusterSize(2,nodes[0])
@XmlElement protected Object value; 
addTest(AB_NEW_LOGIN_NO_GOOGLE,new int[]{1,1},new int[]{1,0},new String[]{"old-welcome","new-welcome"})
i <= Integer.MAX_VALUE
UserHandle.getCallingUserId()
(device=1 << i) <= AudioSystem.DEVICE_OUT_DEFAULT
method.getName()
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
paramEntry.getKey()
message.getFormattedFields()
type.getDescriptor()
attributeModel != null
@Specialization protected Object escapingGlobal(LLVMGlobal escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMSharedGlobalVariable(escapingValue); } 
twitter1.getRetweeterIds(18594701629l,-1)
stack.peekFirst()
success
tree == null
Mono.currentContext()
mService.addOrUpdateNetwork(config)
DiagnosticFactory2<KtProperty,EffectiveVisibility,EffectiveVisibility>
header.getX()
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,account.getId(),paymentMethodId)
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) == null
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
FastMath.max(origin,num.doubleValue())
userId <= 0
inUtc
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
prev.hasMultipleInstances()
input.doubleValue() == value.doubleValue()
Long.valueOf(attrValue)
@Override public Value emitBitScanForward(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   append(new SPARCBitManipulationOp(BSF,result,asAllocatable(operand),this));   return result; } 
peekServiceForUserLocked(userId)
Log_OC.wtf(TAG,"Trying to open a NULL OCFile")
PersistentTask<Params>
new SslContextBuilder(true)
getPackage(pname)
FBUtilities.getBroadcastAddress()
!userInfo.canHaveProfile()
sExecutorService.shutdown()
RuntimeInfrastructure.class
processor.open(w,request)
loadAnimator(fragment,transition,true,transitionStyle)
height - 2
thread.sleep(10)
media.getMediaType() == MediaType.AUDIO
String.format("route weight: %.6f (CH) vs. %.6f (no CH) (diff = %.6f)",chWeight,noChWeight,(chWeight - noChWeight))
!portletId.startsWith(PortletKeys.WIKI_DISPLAY)
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
Setting.listSetting("searchguard.audit.config.http_endpoints",Lists.newArrayList("localhost:9200"),Function.identity(),Property.NodeScope,Property.Filtered)
GnomeEngineeringManager manager=new GnomeEngineeringManager(); 
new TileSourceManager.TileSourceTemplate(dir.getName(),url)
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).arguments(parameters.getVariables())
dest.writeLong(txPower)
DLFileEntryTypeFinderUtil.findByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
ps.createRelationship(rel)
new Location(target2.getWorld(),x,y,z)
@PATCH
settings.readLPw(null)
writer.getSourceFile(1)
storeDirList.length > (numBackups + 1)
LOG.info(e)
settings.readLPw(null)
str.chomp_bang19(context)
HdmiCec.getTypeFromAddress(i)
duration(0,15,18900,0)
moveInputMethodWindowsIfNeededLocked(false)
STUB_VERSION=37
getPreviousWindowIndex()
c1.getName()
Integer.valueOf(quantifier)
indexData.clear()
mPackageUsage.write()
mAudioQuality=AUDIO_QUALITY_AMR_WB
WebSocketEventListener.class.cast(l).onMessage(event)
bLocations[0].getNames()
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
HashMap<FrameworkType,FrameworkSupportNode>
line > 0L
logger.info("license [{}] - valid",license.uid())
pyClass.getClassName()
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
private static class TestException extends Exception {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
mWM.isKeyguardSecure()
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
ScanResult.is24GHz(frequency)
player.isAuthorized("essentials.world." + user.getWorld().getName())
_freemarkerEngineConfiguration.getResourceModificationCheck()
l.setAltitude(alt)
new HttpParameter("retweets",enableDeviceNotification)
{abiList}
a.getTranslation()
_buildTemplateWithGradle("panel-app","panel-dependency-management","--dependency-management-enabled","true")
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
selenium.isVisible("link=Control Panel")
instance2.getLifecycleService().terminate()
Utilities.isMac()
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),any())
sentencePartToEndOfError.length() - lastLineBreakPos
Objects.isNull(value)
new Entry[0xff]
id=15805
NFIUnsatisfiedLinkError ex
getPlayerPosition().z
e.getMessage()
public UrlMapping getReverseMapping(final String controller,final String action,Map params){   if (params == null)   params=Collections.EMPTY_MAP;   UrlMapping mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,action,params.keySet()));   if (mapping == null) {     mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,null,DEFAULT_ACTION_PARAMS));     if (mapping == null) {       return (UrlMapping)mappingsLookup.get(new UrlMappingKey(null,null,DEFAULT_CONTROLLER_PARAMS));     }   }   return mapping; } 
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
typeSettingsProperties.toString()
new ResourceContactPhoto(R.drawable.ic_profile_default)
mView.post(mAnimationStarter)
ON_TOP
baseURI != null
aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
UIMODE_SERVICE.equals(name)
sharedElements.remove(localName)
gatt.enableAdverisingSet(this.advertiserId,enable,timeout)
(i - blockStart) > 1
new StringBuilder()
a.getFloat(attr,0)
sqlRouteResult.getSqlParsedResult().getSqlType()
DynamicCounter.increment(filterName,"fail",filter.filterType())
dynamicServletRequest.getParameterValues(name)
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
assertThat(set.contains("123")).isFalse()
graphModel.getGraph().getEdgeCount()
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
logName()
new RedissonSession(id)
isPut(request)
assertFalse(user.isGeoEnabled())
ACRA.log.e(LOG_TAG,"Error while converting " + key.name() + " to JSON.",e)
service.getCharacteristic(charUuid.getUuid())
logger.warn("Cannot paly favorite ({})",e.getMessage())
logger.error("Could not commit session",t1)
new Paint(Paint.ANTI_ALIAS_FLAG)
counter >= max
TelephonyManager.getDefault().getPhoneType()
dao.merge((WidgetLayoutEntity)anyObject())
reporterCtl.setVoidCallable()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
scheduleRemoveStartingWindow(wtoken)
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
contains(connection.getRedisClient().getAddr())
Thread.sleep(100)
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).expectError(IllegalStateException.class)
ImmutableList.of("/bin/bash","-c","python signer.py $APK key.properties > $OUT")
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
token != null
q1 instanceof AndQueryNode
value + value + MINIMUM_BACKLIGHT
makeSnapshots(endpoints)
new IllegalArgumentException()
MapUtil.getBoolean(parameterMap,_IMPORT_BLOGS_DATA,_enableImport.getDefaultState())
mService.getWifiServiceMessenger()
NUM_DOCS_PER_TYPE=400
new TemporalParseException("Wrong header information type: " + fieldsFromHeader)
moveInputMethodWindowsIfNeededLocked(false)
new RuntimeException()
Slog.e(TAG,"Hardware Activity-Recognition not supported.")
id=15855
is(5)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy)
log != null
numIndexDims == 1
getActivePreferenceStore()
presentation.setEnabled(false)
ArrayList<Class<?>>
endPos < paraEnd
mPlayer.getCurrentPosition() * 1000
typeSettingsProperties.toSortedString()
Long.valueOf(args[ai])
entry.isInTrashImplicitly()
body.getData()
level <= RF_STATUS_FULL_SIGNAL
return true; 
element.getNodeName()
stream1.getId()
new IOException(e.getMessage())
ChannelBufferHolders.catchAllBuffer()
node.getLifecycleService().terminate()
DiagnosticType.warning("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
loaded.getLoaded().getConstructor()
Validator.isNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
getPackages()
mMapView.postInvalidate(frameLeft - 2,frameTop - 2,frameRight + 2,frameBottom + 2)
LOG.error("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
(child.mViewFlags & VISIBILITY_MASK) != GONE
mRvc == null
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
new Paint(Paint.ANTI_ALIAS_FLAG)
return true; 
Assert.assertEquals(2,definitions.size())
config.isConfigurationSection("socialspy-commands")
U.warn(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
_buildTemplateWithGradle("soy-portlet","soy-dependency-management","--dependency-management-enabled","true")
logger.error("InfluxDB is not yet connected")
mf.getColumnName()
protected Jar createTaskJar(File wsdlFile,Task compileTask,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME,wsdlFile);   Jar jar=GradleUtil.addTask(_project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (isIncludeSource()) {     jar.from(generateTask.getOutputs());   }   jar.setDestinationDir(getDestinationDir());   String wsdlName=FileUtil.stripExtension(wsdlFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
cacheSkipStore.removeAll()
marshallerCache().context().preloader().syncFuture().listenAsync(new CI1<IgniteInternalFuture<?>>(){   @Override public void apply(  IgniteInternalFuture<?> f){     ctx.marshallerContext().onMarshallerCacheReady(ctx);   } } )
case INODE_REFRENCE: 
this.getScanId()
DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
5 * 60 * 10000
mode.getInflater()
assertEquals(9,md.references().size())
error("Unable to connect due to unrecognised server certificate")
invalidate()
target.getDestination()
selenium.isVisible("link=Control Panel")
getWidth()
mGesturesPopup != null
addFileType("WEBP",FILE_TYPE_WBMP,"image/webp")
tx.unsafeBitcoinSerialize()
PageCommentsWebUpgrade.class
name == null
@ConditionalOnEnablednHealthIndicator("solr")
incomingDir.exists()
getPropertyAsBoolean(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED,false)
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
Integer.valueOf(leftStr)
id=15852
--remainingReleaseCount == 0
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
DBG=true
offsetHandler.enter()
Math.abs(endAngle - startAngle) >= 360
nextPos != mBoundPos
proxyClassName.equalsIgnoreCase(otherClassName)
new GroupTest(false)
new GridTestUserResource()
createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE)
candidate.getArgumentMaping()
new EntryCustomizationDialog2(JabRefFrame.this)
i < 1025
m22 != 0
previousScroll == scrollY
parts.size() % 2 != 0
inner.innerSetException(new TimeoutException())
1
userContext.getContentResolver()
modelName + "." + signatureEntry.getKey()+ "."+ outputEntry.getKey()
mNextWakeFromIdle != null
readStayAwakeConditions()
new WordToSentenceProcessor<IN>()
selenium.isVisible("link=Control Panel")
Optional.of(target)
new SyncDateFormat[3]
promise.setFailure(new ClosedChannelException())
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
recyclerView.indexOfChild(view)
pgl.loadFragmentShader(vertFilename)
TCN_RECOMMENDED_PV=27
mySubstitutor.isValid()
RESULT_TIMEOUT=1500
Calendar.getInstance(JSON.defaultLocale)
filterNotTypes.size()
type.getConstructor()
createSequence(crs,(Point)data.get(i))
Simple.of(Integer.class)
new SSHClient(getHadoopCliHostname(),getHadoopCliUsername(),getHadoopCliPassword(),null)
service.getDomain().getName()
cacheController.get(internalTenantContext.getTenantRecordId())
sender.waitForClose(500)
lValue.getType()
TestPackage.foo("")
postAgg.getName().equals(topNMetricName)
accountHandle.getComponentName().toString()
start.set(Calendar.DAY_OF_MONTH,startMonth)
return true; 
LOG.isDebugEnabled()
mPlayer.getCurrentPosition() * 1000
2 < buf.length - count
log.debug(exception.getMessage())
174 != errors.size()
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
maxRecents > 0
Entry<Url,Channel>
id=21
policyFlags & SCAN_REQUIRE_KNOWN
public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new ObjectMapper().reader(Map.class)
mHorizontals == null
m.put(InputStream.class,is)
mConnector.execute("volume","format",vol.id)
selenium.isVisible("link=Control Panel")
existing.getProgramParameters()
"Unknown or Unsupported Option '" + value + "'"
new NameValuePair[5]
-1
mAppToken.hasContentToDisplay()
case 16: 
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
CHAIN_CONTRUCTION
policy != null
jfe.getTotalCounters()
parseLibraryFileChunk(jar,libDescription,zip)
messageRecord.isEndSessin()
addWarn(msg,e)
Exception e
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
mapContainer.getMapConfig().getMaxIdleSeconds() * 1000
android.provider.Downloads.Impl.isStatusCompleted(statusCode)
selenium.isVisible("link=Control Panel")
mConferenceById.containsKey(callId)
JiveGlobals.getBooleanProperty("xmpp.socket.directBuffer",false)
childParams.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
this.repositories.add(repository)
LOG.error("Unable to read HTTP response content",e)
MINOR_VERSION=4
processor.open(w,request)
assertNull("Should find entry",getThreadCacheEntry(LOCAL_HOST))
log.warn("Can't set transaction isolation level",e)
isAllowedBySettingsLocked(p.getName(),UserHandle.getUid(mCurrentUserId,0))
logger.trace("[monitor] rescheduling check for [{}]. last access time is [{}]",lastSeenAccessTime)
new LocalComponentDependencyMetadata(componentId,selector,clientConfiguration,attributes,dependencyConstraint.getAttributes(),null,Collections.<IvyArtifactName>emptyList(),Collections.<ExcludeMetadata>emptyList(),false,false,true,true,dependencyConstraint.getReason())
@Override public final DivideBy on(String sql,Object... bindings){   and(sql,bindings);   return this; } 
getInstalledCode("queueTest")
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1)
child.resetResolvedLayoutDirection()
testPool.getListeningExecutorService()
DEFAULT_ADDRESS_BBOX_RADIUS * 10
mSite.getSpaceAvailable()
mSelectResponse != null & mSelectResponse.length > 0
AlluxioWorker.class
tracesFile.mkdirs()
in.readObject()
Assert.assertTrue("Was not expecting this output " + acc,System.currentTimeMillis() - now < 5000)
DEBUG=true
sep < 0
new Field(_name,columns.getString(4),null,_class.getName(),_class.getSimpleName(),_type)
@Override public Value emitBitCount(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IPOPCNT,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LPOPCNT,result,asAllocatable(value)));   }   return result; } 
Color.fromRGB(0x51301A)
assertEquals(0,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
dest.writeLong(mSubId)
websocketComponent.setMaxThreads(11)
assertEquals("Invalid content-length",13,outputMessage.getHeaders().getContentLength())
myLocalResolve && localProcessor.processingEncounteredAnyTypeAccess()
TreeMap<String,Object>
new ProcessBuilder(startScript,mMesosAddress,"-w")
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,WALL_17050,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPS_29993,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,ROCKY_HANDHOLDS_26400,ROCKY_HANDHOLDS_26401,ROCKY_HANDHOLDS_26402,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,LOOSE_RAILING,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,ORNATE_RAILING,ORNATE_RAILING_17000,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,BROKEN_FENCE_2618,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990,TUNNEL_30959,HOLE_30966,OBSTACLE,OBSTACLE_30767,OBSTACLE_30964,OBSTACLE_30962,LOOSE_RAILING_2186,LITTLE_BOULDER)
InspectionsConfigTreeTable.getAdditionalShiftIfMac()
type.getConstructor()
LOG.warn(ex.getLocalizedMessage(),ex)
pairs != null
TestType_Table.nativeBoolean.isNull()
selenium.isVisible("link=Control Panel")
nextTokenIsFast(b,IDENTIFIER)
rootElement.findElementAt(startOffset)
selenium.isVisible("link=Control Panel")
mDataSetObserver != null
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
new ClusterRule(getClass())
UIUtil.createImage(rect.width,rect.height,BufferedImage.TYPE_INT_RGB)
getEffectiveCleartextTrafficPermitted()
((TextMessage)replyMsg).getText().getContentLength()
second.get(i)
saveJSONArray(json,filename)
asList(ASE,CUBRID,DB2,DERBY,FIREBIRD,H2,MYSQL,ORACLE,SQLSERVER,SQLITE,SYBASE)
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
myAlignmentProvider.addPair(myNode,childNode,true)
var.isClosureSharedVariable()
InputMethodManager.getInstance(instance)
Arrays.asList(MimeTypes.VIDEO_MP4,MimeTypes.VIDEO_WEBM,MimeTypes.VIDEO_H263,MimeTypes.VIDEO_MPEG,MimeTypes.AUDIO_MP4,MimeTypes.AUDIO_MPEG)
mValues[7]
globalExecutionStats.getSplits()
this.registrations.get(handler)
drawer.setDrawerListener(toggle)
private final DefaultChannelPipeline pipeline; 
Class.forName(name)
disableForUser(what,token,pkg,mCurrentUserId)
assertNotNull(savepointPath,"Failed to trigger savepoint")
new MapProducerCapabilities(false,false,false,true)
mBackdrop.animate().alpha(0f)
new FontComboBox(false,true)
readStayAwakeConditions()
new BindException(concept,"concept")
UIMODE_SERVICE.equals(name)
set(object,value.intValue())
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
expected == int.class
new String(buffer,0,len)
paramType.getName()
Key<String>
apnContext.getWaitngApns()
public Integer getBuffer(){   return this.buffer; } 
Thread.sleep(200L)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Error err
checkPojoMetaClass()
log.info("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
sdk.isPresent()
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",false,featuresConfig.isLegacyOrderBy())
mHandler.removeCallbacks(pae)
pathGroup.paths.get(i)
ChaosMonkey.class
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
assertEquals(0.7222222222222222,mm.auc_obj()._auc,1e-8)
mResourceData[i] != null
type.getCanonicalText()
pluginManager.isExecuted()
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
instance.managementService.unregister()
Long.valueOf(attrValue)
"Stream " + importer
consumer.consume(new PlainTextFileType(),new ExactFileNameMatcher(".gitignore"))
messageVerifier.verifyMessage(responseHeaders,requestCtx.getUriInfo().getAbsolutePath().getPath(),requestCtx.getMethod())
private final Clock clock; 
i < 1000
private final JWindow myWindow; 
URLUtils.currentUrlEqual(uriBuilder.build().toASCIIString())
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
from >= to
type.getConstructor()
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
PATH.getAbsolutePath()
certGen.addExtension(X509Extension.subjectKeyIdentifier,true,new SubjectKeyIdentifierStructure(pubKey))
((GroovyObject)receiver).getMetaClass() != metaClass
log.warn("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
selenium.isVisible("link=Control Panel")
Exception e
m.getSize()
new XContentTypeOptionsHeaderWriter()
public class RegExpParseTest extends BaseParseTestCase2 {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
childLeftTuple.reAddLeft()
GridTestUtils.waitForCondition(new GridAbsPredicate(){   @Override public boolean apply(){     return backupQueue(ignite(1)).isEmpty();   } } ,3000)
trade.getTotal()
!isValid
new NullPointerException("'font' cannot be null.")
getMockEndpoint("mock:event").expectedMessageCount(5)
lock.isLocked()
repository.loadForRequest(url,null)
this.transactionsRepository.removeTransaction(this.xidTransactionID)
new Paint(Paint.ANTI_ALIAS_FLAG)
DumpUtils.checkDumpPermission(mContext,TAG,fout)
mCurrentVrService == null
Calendar.getInstance(JSON.defaultLocale)
getMergedOverrideConfiguration()
x + 1 > size
ClassHelper.make(type.getName())
new IndexWriter(directory,ANALYZER,true)
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
arguments[2]
keyPhysType.comparer()
4 * displayMetrics.density
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
InputType.recurrent(convNIn)
grantRuntimePermissionsLPw(contactsPackage,ACCOUNTS_PERMISSIONS,userId)
sr.makeNextStartId()
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
PluginServices.getTagDataService().getTag(tag.tag,TagData.ID,TagData.MEMBER_COUNT)
HttpConnectionUtil.getSoTimeoutClient(timeout)
mRenderNode.isPivotExplicitlySet()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
Object[]
1l
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
Thread.sleep(2000)
new DefaultPlexusContainer(null,null,null,classWorld)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
assertEvaluate(buildFile).lookup("txts")
StringBuffer ret=new StringBuffer(internalName.length()); 
HttpConnectionUtil.getSoTimeoutClient(timeout)
DiagnosticType.warning("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
getConversionByClass(value.getClass(),logicalType)
updateViewsVisibility(mIconifiedByDefault)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE
TIME_SCALE=1000
edge.setType(edgeDefault)
assertClusterSize(2,nodes[0])
tree.getClientArea()
Color.fromRGB(0xC354CD)
new RelativeCoordinatesProvider(hRef,vRef,hDelta,vDelta)
defaultListenerAccess != null
!ufsSyncChecker.isDirectoryInSync(parentUri)
mImm.getInputMethodList()
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
LOG.error("PriviledgedActionException as:" + this + " cause:"+ cause)
msbFragmentCollection.getFragmentCollectionId()
invalidate()
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel())
return false; 
onPackageDisappeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
new Paint(Paint.ANTI_ALIAS_FLAG)
sSwipeMinDistance=150
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(64)
worldRenderer.getChunkProvider().addRegionEntity(spawnZoneEntity,1)
StringBuffer buffer=new StringBuffer(); 
Boolean.valueOf(attrValue)
template.setQueue(this.queue.getName())
reply.getJMSCorrelationID()
case 8: 
metadata.getFaces()
assertEquals(2000,timeout)
fLines.add(st.nextToken())
StringBuffer sb=new StringBuffer(); 
container.isReadyToRun() && !model.isUpdateInProgress()
SCROLL_BAR_SIZE=4
event.getTime() <= currentPlayTime
callerApp == null
mask.size()
node1.checkTreeEqualsSilent(node1)
root != null
restrictedFilters.load(is)
ArrayList<UsageInfo>
win.isAnimatingLw() && appWindow && showWhenLocked
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
StatusBarIconController.getTint(mTintArea,mWifiActivity,mIconTint)
_typeSettingsProperties.toString()
@Override public String doBackgroundCall(){   mTraktClient.setAuthentication(mUsername,mPassword);   return mTraktClient.accountService().test().status; } 
StringBuffer ret
RedisRunner.startDefaultRedisServerInstance()
type.getConstructor()
this.traceHandlers.add(traceHandler)
mMncStr == null
new EndlessRecyclerOnScrollListener(){   @Override public void onLoadMore(  final int currentPage){     footerAdapter.clear();     footerAdapter.add(new ProgressItem().withEnabled(false));     Handler handler=new Handler();     handler.postDelayed(new Runnable(){       @Override public void run(){         footerAdapter.clear();         for (int i=1; i < 16; i++) {           fastItemAdapter.add(fastItemAdapter.getAdapterItemCount(),new SampleItem().withName("Item " + i + " Page "+ currentPage));         }       }     } ,2000);   } } 
String[]
StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName())
service.asBinder().isBinderAlive()
wordDetector.getEndOffset()
insertOrder("ds1")
validateFriendlyURL(group.getGroupId(),group.getCompanyId(),group.getClassNameId(),group.getClassPK(),friendlyURL)
expression.indexOf("${") >= 0
lights.shadowMap != null
return 64; 
Exception e
app.getSettings().SHOW_TRAFFIC_WARNINGS.get()
new SafeTextModel(Mode.none)
SearchWebUpgrade.class
client.execute_cql3_query(query,key,Compression.NONE,state.settings.command.consistencyLevel)
mSyncStatus.get(i)
mPulseCallback.onPulseFinished()
mWM.isKeyguardSecure()
change.isIsReplaced()
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
DISPLAY_TASKS_PORTRAIT + 2
StateManagementUtils.createClearForkedExecutionMojoBinding()
AsyncIOWriterAdapter.class
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
dest.writeParcelableArray(remoteInputs,flags)
assertEquals(row.getField(0),3L)
new Location(target2.getWorld(),x,y,z)
messenger.requestSms(res)
permissions+=1
lastPos != mTargetPos
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
tileBox.getMapDensity()
customer.getUuidId()
type.getConstructor()
selectedFile != null
loaded.getLoaded().getConstructor()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
buf.getShort(buf.readerIndex() + 2)
position.setEmpty()
tomcat.addServlet(ctx,"myServlet",new HelloWorld())
setVisibilityBasedOnFlag(mBtnPrev,flags,RemoteControlClient.FLAG_KEY_MEDIA_PLAY | RemoteControlClient.FLAG_KEY_MEDIA_PAUSE | RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE| RemoteControlClient.FLAG_KEY_MEDIA_STOP)
IllegalStateException e
assertFalse(jmsTemplate.isPubSubDomain())
adaptTestForTrain(_output._names,null,_output._domains,frame,_parms.missingColumnsType(),true)
!root.isDownloads()
metadata.getFaces()
found != r
Log.wtf(TAG,"This will become an error",ex)
cluster.shutdown()
GL.glBindTextureEXT(target,texture)
System.arraycopy(orig,0,target,0,160)
Locale.getDefault().toString()
new PriorityTieredBrokerSelectorStrategy(0,1)
Log_OC.e(TAG,"Canceling all syncs for " + MainApp.getAuthority())
selenium.isVisible("link=Control Panel")
LOG.info(exc)
auxString.substring(0,auxString2.lastIndexOf(","))
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
transGraph.getLastMove()
args.length != 2
log.info(message)
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
checkManageUsersPermission("getting profiles related to user " + userId)
StringBuffer buffer=new StringBuffer("("); 
format.getShape() == JsonFormat.Shape.STRING
key.endsWith("authmechanismproperties")
Log_OC.e(TAG,"onCreateView")
timeout < 0
archivePath.toString()
!file.isInLocalFileSystem()
from >= to
properties.itemType >= ItemViewProperties.ID_NOT_IN_ACTIONBAR
commands_.vcsRevertFiles()
Thread.sleep(5000)
name.endsWith(".mxml") && !name.startsWith("TestApp.")
ContainerUtil.getLastItem(expressions)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
tableHasData(newTableName)
args.length > 7
poList[1]
d.setHotspot(x,y)
context.formatSeparator()
onDetachedFromWindows()
len >= 10
stmts == null
StringBuffer buffer=null; 
return 18; 
jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)
deployOneTaskProcess()
Integer.toHexString(quality)
load(key,true)
parent.setCoordinateIndex(0)
soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)
blog.getRemoteBlogId()
selenium.isVisible("link=Control Panel")
size=1000
queryBuilder.appendQuoted(columnAliases[i].getAliasName())
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
getFragmentManager()
GlobalSearchScope.projectScope(getProject())
batteryService.isBatteryLow()
weekRange.roll(Calendar.DATE,6)
InputStream.class
t instanceof VirtualMachineError
Environment.getRootDirectory()
(inGC - timeInGC) * 100
mRS.nMeshGetIndices(mID,idxIDs,primitives,vtxCount)
ConnectorSplitManager.class
batteryVp >= medium
Trans == TRANSPOSE
TranslatingCompilerFilesMonitor.getInstance().scanSourceContent(myProject,roots,roots.size())
selenium.isVisible("link=Control Panel")
fraction * (nextValue - prevValue)
bulkInsertableMap.get(persistentObjectClass)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
pToX - pToY
(XBeanBrokerService)context.getBean("broker")
buffer.rewind().forward((int)n).getFixString((int)str_len)
selenium.isVisible("link=Control Panel")
imageView.setImageBitmap(null)
mockRequest.setHeader("Authorization","bearer " + TGT_ID)
Integer minFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
blog.getRemoteBlogId()
mAttacher.getDrawMatrix()
log.error("Query failed to validate : '{}'",executionInput.getQuery())
LogFactory.getLogger().info("Could not find table or view " + tempTable.getName() + " for column "+ column.getName())
source.toString()
sharedElements.remove(localName)
{ENDPOINT_DISPLAY_ITEMS,DISPLAY_ITEM_BIT_CLOCK,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
fieldDeser.getPropertyValue(currentObject)
CharSequence message
scrollWebElementIntoView(webDriver,webElement)
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123L)
RandomStringUtils.random(50)
Integer.valueOf(taskIdStr)
recommendedVersion.equals(seenVersion)
new LowerCaseFilter(matchVersion,source)
FileType.of(".so")
super.getDataEncodingWithDefault(DEFAULT_HTTP_ENCODING)
symbolUsageValidator.validateCall(resultingCall.getResultingDescriptor(),trace,byKeyword)
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true)
serviceDataUuid == null
returnSecurityError
mService.setUidPolicy(UID_A,POLICY_NONE)
checkPojoMetaClass()
sendMessage(CMD_STOP_AP)
LOGGER.debug("Could not perform drage and drop",nfe)
originalLayout.getIconImageId()
id=19904
V
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
new VertexBuffer(this,PGL.ARRAY_BUFFER,3,PGL.SIZEOF_FLOAT)
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
outLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
QueryLogger.builder(cluster())
logger.debug("Removing: {}",r)
(srcOffset % VECTOR_SIZE) == (destOffset % VECTOR_SIZE)
getSrcPath("checks/javadoc/Input_01.java")
session.setMaxInactiveInterval(getMaxInactiveInterval())
/**   * Returns the next pseudorandom  {@link ArrayValue} of period elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of period elements.  */ private ArrayValue nextPeriodArray(){   return Values.durationArray(nextPeriodArrayRaw(minArray(),maxArray())); } 
resolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
selenium.isVisible("link=Control Panel")
getDelegate().getSupportedCipherSuites()
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
accountApi.setEmailNotificationsForAccount(accountId,invoiceEmailJsonWithNotifications,requestOptions)
owners.add(Receiver.<String>make(clazzGT.getType()))
materialScrollBar.setIndicator(new CustomIndicator(this),true)
Integer.valueOf(taskIdStr)
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
mSeekBar.setProgress(mVolumeBeforeMute)
selenium.isVisible("link=Control Panel")
rm.getPrecision(i)
selenium.isVisible("link=Control Panel")
strategy.getJavaIdentifier(parameter)
mEditText.getCompoundPaddingTop()
public File sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
res >= mLen
new FunctionIntrinsic(){   @NotNull @Override public JsExpression apply(  @Nullable JsExpression receiver,  @NotNull List<JsExpression> arguments,  @NotNull TranslationContext context){     return new JsInvocation(new JsNameRef("substring",receiver),arguments);   } } 
BuildRule resultRule=binaryBuilder.build(graphBuilder,filesystem,targetGraph); 
registryCache.putIfAbsent(channel.getName(),registry)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public CharSequence getViewIdResourceName(){   return mViewIdResourceName; } 
commit()
Class.forName(className)
Math.min(leftLen,rightLen)
mHeartbeat != null
IOException e
nodeString()
mResourceData[i] != null
baseAt(i).getFile().getPath()
(count + numSkipped + skipInterval) > df
@Nullable
FUNC_CODE_DEBUG_LOC_AGAIN
new PojoMessageHandlerAsyncString(pojo,m,session,params,indexString,false,indexSession,indexBoolean)
scale(3000)
file.lastModified()
mContext.startActivity(intent)
mHotspotBounds.set(left,top,bottom,right)
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
NativeLibraryHelper.Handle.create(scanFile)
wNoExecution.getSelection()
uid > 0
/**   * This is  {@link GroovySurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.3.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class GroovySurrogateRegisteredServiceAccessStrategy extends BaseSurrogateextendsRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-3998531629984937388L;   private String groovyScript;   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> principalAttributes){     if (isSurrogateAuthenticationSession(principalAttributes)) {       try {         final Object[] args={principal,principalAttributes,LOGGER};         final Resource resource=ResourceUtils.getResourceFrom(this.groovyScript);         return ScriptingUtils.executeGroovyScript(resource,args,Boolean.class);       }  catch (      final Exception e) {         LOGGER.error(e.getMessage(),e);       }       return false;     }     return super.doPrincipalAttributesAllowServiceAccess(principal,principalAttributes);   } } 
GtkPreferredJComboboxRendererInspection.class
VERSION=41
TestSuite testSuite=new TestSuite(testClass); 
assertProtonResourceLimits(0.8,0.77,new ContentClusterBuilder().protonMemoryLimit(0.77).getXml())
-1
type.getConstructor()
exchange.getPartitioningScheme().isReplicateNulls()
selenium.isVisible("link=Control Panel")
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
queueAccess.get(queueAccess.size() - 1) != selectedItem.getId()
requestHeader.mConnectionID != null
isSite()
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(primary)
popupWindow.setWidth(menuWidth)
changeAffiliationByOwner(jids,"admin")
extensionManager.getProxy()
option.getType()
jarURL.toURI().getPath()
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
_buildTemplateWithGradle("content-targeting-report","report-dependency-management","--dependency-management-enabled","true")
Control.getSingleton().getExtensionLoader().addonFilesAdded()
checkCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS)
status().isPermanentRedirect()
audioTrackUtil.getPlaybackHeadPosition()
this.isDefaultAutoCommit()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
FLING_VEL_THRESHOLD=250
syncOperation.delay == 0
if (VDBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
m.getClass()
callback.onUploadFailure()
IFrameWebUpgrade.class
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
name.equals("Devices")
PApplet.split(properties.getStringAttribute("points"))
lastException != null
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target2.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
imageViewShadow.setImageResource(R.drawable.shadow)
postApply(p.getLayer(),p.getParamName(),paramView,gradView)
Integer.valueOf(stackIdStr)
proposedBackground=BACKGROUND_COLOR
DEFAULT_WIDTH=0x008000000
new OverflowPanelViewHelper(mContext)
MimetypeIconUtil.getFileTypeIconId(null,mFile.getName())
session.users().getUserByServiceAccountClient(client)
jarURL.toURI().getPath()
oldConfig.densityDpi != newConfig.densityDpi
String.valueOf(0xFFL)
pos.getBlockY() - height - 1 < 0
contact.getName()
partProps.size()
mRvc == null
gasPrice.length > HASH_LENGTH
READ_ITEM_DELAY=100
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false)
toHeapData(key)
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,true)
mRecyclerView.scrollBy(hScroll,vScroll)
new InternalOutputBuffer(res)
activity == null
copticDate.monthOfYear()
contentType.equals(PresContentClient.CONTENT_TYPE)
gatt.enableAdverisingSet(this.advertiserId,enable,timeout)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
table != null
getKeyFromGrant(alias)
new GSPSitemeshPage(true)
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
Loader.getResource(__dftMimeMap.getClass(),resourceName)
position < size()
subCursor.getInt(COLUMN_ATTENDEE_ID_NAMESPACE)
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),true,Variance.IN_VARIANCE,Name.identifier("P" + j),j)
entry != null
ams.mContext.createPackageContext(appInfo.packageName,0)
isLockscreenPublicMode(mCurrentUserId)
FileUtil.isAbsolute(workingDirectory)
sleep < 0
FISHING_ROD(346,1,32)
diff <= leeway + 1
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,null))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
queryParams != null
selenium.isVisible("link=Control Panel")
tagName.equals(TAG_FORWARDING_INTENT_FILTERS)
manager.beginTransaction().remove(fragment).commit()
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
localNodeData.dcLocalAddress.toString()
size > _STORAGE_SIZE_DENOMINATOR
msg.containsKey(SECURITY_PROCESSED) || isGET(msg)
new ZuulException(errorMsg,causeMsg)
!autoConnect
mService.reconnect()
loaded.getLoaded().getConstructor()
manager.beginTransaction().remove(fragment).commit()
DEBUG_OBB=true
Integer.valueOf(taskIdStr)
note == null
configuration.numEvents*=1000
telephony.isRinging()
display.getMetrics(dm)
random.nextInt(currentSize + 1) == 0
-8f
majorVersion <= MSSQL_SERVER_VERSIONS.MSSQL2008
!mStatus.showStatusLines()
workDir.getCanonicalPath()
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
name="java:jboss/mail"
Collections.sort(runningJobs,njec)
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
new ShardRouting(index,shardId,currentNodeId,null,null,primary,state,version,null,true)
field.getRawType()
data.batchBuffer.add(r)
RenderUtil.loadResources(resources)
clipItem.getText()
Expression.eq("searchable",format)
resolver.acquireContentProviderClient(uri)
getWorkDirectory()
folder.isInTrashImplicitly()
Object aValue
myCardModel.getAnswerAlign()
type.getConstructor()
displayContent.getDockedStackLocked()
new IllegalStateException("Could not access Field '" + classField.getName() + "'")
oldestNode == null
response.sendError(statusCode)
selenium.isVisible("link=Control Panel")
dropdownItem.setHref(getPortletURL())
SiteNavigationLanguageWebUpgrade.class
lhs.getScore()
@Nullable
policy != null
Value emitBitCount(Value operand); 
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
currentPropertyJoinColumnOverride != null
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
StringBuffer buffer=new StringBuffer(); 
tableHasData(newTableName)
file.renameTo(newFile)
capacity > 1 << 30
myCache1.get("myKey1").getValue()
newDto(RecipeDto.class).withLocation(DEFAULT_DOCKER_IMAGE)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
selenium.isVisible("link=Control Panel")
exception.equals(StringPool.OPEN_CURLY_BRACE)
roundDist == 500
temp.reAddLeft()
platformVersion < MNC
_excludeFilePathMatchers.add(_fileSystem.getPathMatcher(excludeSyntax.getValue() + ":" + excludePattern))
StringBuffer ret
ColorResources.getColor("primaryControlColor")
addView(mTitleLayout,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT))
type.getConstructor()
logger.debug("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
next != null
StringBuffer sb=new StringBuffer(); 
selenium.isVisible("link=Control Panel")
OverridingMethodsSearch.search(method,method.getUseScope(),false)
selenium.isVisible("link=Control Panel")
originalLanguage != null
sendKeyUp()
logger.getLogger().warn("Failover took:" + (end - start) / 1000000 + "ms")
parentPackageInTree != null
System.currentTimeMillis() - lastTimeGPSLocationFixed
CalciteTests.createMockSystemSchema(druidSchema,walker)
"Interrupted when attempting to close writer for end point: " + ep
new Notification(notification)
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
((Scorecard)serializable).isUseReasonCodes()
ast.createQueryTranslator(hql,hql,Collections.EMPTY_MAP,sessionFactory())
sr.makeNextStartId()
actionName.startsWith("android.net.netmon.lingerExpired") || actionName.startsWith("com.android.server.sip.SipWakeupTimer") || actionName.startsWith("com.android.internal.telephony.data-reconnect")
scanner.acceptResult(fqn)
mPerformanceMap.get(userId)
@Override public ZuulMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
this instanceof ScatterData
order=1
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategy()
user.isOwner()
Long.valueOf(strings[i])
mState == StatusBarState.SHADE_LOCKED
scrollLoadingMoreToDefault()
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],user,new BindException(user,"user"))
@Specialization protected Object fromFloat(float value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
regUser * userWeight * trusteeFactorValue* trusteeFactorValue
copy1DRangeFrom(0,mType.getCount(),i)
setComplete(length)
Exception e
origin.realComponent().doubleValue() > other
new SafariWebDriverImpl(projectDir,portalURL)
logger.trace("An error occurred while executing a command: ",e)
final LabelProvider mainLabelProvider=(LabelProvider)viewer.getLabelProvider(); 
GL20.glGetActiveAttrib(program,index,256,typeTmp)
outputBufferProcessors=5
log.debug("text : {}",text)
mCursor.deactivate()
name.equals("Devices")
creationDateField != null
showNotifications.isNull()
computeHorizontalScrollRange()
errorRowMeta.size()
VERSION=6
e.getSuppressed()[0]
socket.isOutputShutdown()
IndexReader r; 
parameter.getSimpleName()
msbFragmentEntry.getFragmentEntryId()
Math.min(clientCount,1)
onPackageAppeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
LOG.info("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
sublistsIndices.keySet().parallelStream()
new IndexWriter(directory,new SimpleAnalyzer(),true)
locationNode.text()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
m.getParameters()
new ThingUID(WEMO_INSIGHT_TYPE_UID,device.getDetails().getSerialNumber())
evaluate("pkg = package_name()").lookup("pkg")
new ModelNode().set(25000)
Assert.assertNull(request.getContentType())
new LightweightThread(null,this)
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
new StatusBarIconView(getContext(),null)
channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)
dest.writeList(userIds)
log.debug(message,exception)
? extends Exception
Thread.sleep(5000)
ccfg0.setWriteBehindFlushFrequency(5000)
new IllegalArgumentException()
concatRef.isEightBits=false
List<ValueParameterDescriptor>
Settings.Secure.putStringForUser(cr,ownerInfo,"",userId)
getUserStateLocked(callingUid)
ColorResources.getColor("tabTitle")
event.setHandled(false)
SCAN_STATUS_PARTIAL=0
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button); 
findCodecForFormat(false,format)
new ShowcaseViewBuilder(activity)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(1,Duration.ofMillis(100),Duration.ofMillis(2000),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 1/1").hasCause(exception))
mViewModel.onNewsCardShown(item)
itemView.getScaleX()
savedInstanceState.containsKey(STATE_FILTERED_ITEMS)
theClass != MetadataGeneratingExpandoMetaClass.class
this.getSocket()
readStayAwakeConditions()
file == null
metadata.getPropertyIterator()
new IllegalArgumentException("cannot use driverClassName and dataSourceClassName together.")
resTarget.withFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
media.getMediaType() == MediaType.AUDIO
super.dialog.setMinimumSize(545,356)
AWAKE_INTERVAL_DEFAULT_MS=5000
defaultDDLFilename()
MoreTypes.asTypeElement(processingEnv.getTypeUtils(),e.getTypeMirror())
contains="doCachedTypeCachedOffset"
pos + toFind.length() < limit
HornetQAutoConfiguration.class
movementComponent.collider.setInterpolationWorldTransform(new Transform(new Matrix4f(new Quat4f(0,0,0,1),newPos,1.0f)))
assertLeftRightCategory(6,category2c)
testClass.getName()
exportReturnCodes(exporter)
n.intValue()
_replaceTranslationCommand.replaceTranslation(file.toPath())
res - _bias
pv.setBackground(getResources().getDrawable(R.drawable.list_bg_selector))
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
offset <= text.length()
selenium.isVisible("link=Control Panel")
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithNonCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
checkPojoMetaClass()
groupIndex.size()
PushImageCmdExec.class
logger.info("attempting reconnect")
streamTokenizer.ttype == StreamTokenizer.TT_WORD
myRootHandler == null
clazz.getSuperclass()
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavaDoc()
stepIdleStateLocked("s:shell")
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     associatedTask.setUpdated(new Date());     activateTask(associatedTask,true,false);   } } )
changeAffiliationByOwner(jids,"owner")
@Override public Object create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
IllegalArgumentException e
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
collectAndCheckHighlighting(checkWarnings,checkInfos,checkWeakWarnings)
GithubApiUtil.getGitHost()
type == TokenTypes.CLASS_DEF
l.equals("<pre>")
loaded.getLoaded().getConstructor()
copy1DRangeFrom(0,mType.getCount(),i)
compile.minus(provided)
message.getMessageId().setDataLocator(sequenceId)
Thread.sleep(200)
modIcon.getOriginalWidth()
RunnableFuture<?>
lock.lock()
LOG.error("Too many MultiFetch errors, falling back to Fetch only.")
mHorizontals == null
StatList.getCraftStats(itemstack.getItem())
64 * 1024 * 0124
assertEquals(expectedPlan,actualPlan)
future1.get(1,TimeUnit.SECONDS)
this.targetValidator.validateValue(beanType,propertyName,groups)
val == null && fetch(obj.getClass(),Cnd.where(mf.getName(),"=",val)) == null
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)
/**   * {@inheritDoc}  */ @Override public AtmosphereResource addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource<?, ?> r");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn("Too many resource. Forcing resume of {} ",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn("failed to resume resource {} ",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } 
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,false,false)
projectMeasures.get(1)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
isEmpty(aggregate.getPrincipals())
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
isAvailable(status)
view.getZoom()
proportional
new Handler(){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
caches.get(i)
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
filename.startsWith(ext)
db.activityDao().getNullableByKey(dbSession,activityKey)
targetConfig.useDynamicConfigurations()
case 3: 
new Handler(){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
Exception ex
new ModelNode().set(600000)
mono.otherwise(ex -> Mono.error(getReadError(bodyParameter,ex)))
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,50)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.8f,FOLDER_NAVIGATION)
side.toString()
source.isInternal()
fragmentEntryPersistence.filterCountByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
InvokerHelper.getMetaClass(obj.getClass()) == mc
checkPojoMetaClass()
sourceWidth > 0
Latkes.getStaticPath()
routes.ExtractorsResource().list(input.getId())
new HazeNode(context,readOnlyGBufferConfig,hazeIntermediateConfig,aLabel)
resourceList == null
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
leftTuple.setStagePrevious(leftTuple)
cfg.setMetricsUpdateFrequency(30_000)
createCondition.isPrivate()
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
Simple.of(SkylarkList.class)
/**   * The failure that occurred.  */ Exception getFailure(); 
CONSTELLATION_TYPE_SHIFT_WIDTH=3
assertEquals("to",14,sr.getToInt())
Object value
mExpandedChild.getHeight() == mHeadsUpChild.getHeight()
stopwatch.elapsedMillis()
ir.mHandler != null
Long.valueOf(delay)
dateFormatter.format(value)
mCurrIconRow != null & mCurrIconRow.isVisible()
getUseEquals()
DataStream<OUT>
account.getPendingEmailChange()
Thread.sleep(5000)
serverSocket == null
e.getMessage()
_certHosts.isEmpty()
status != 0
value.isNull()
keyRowMeta.getString(two)
dynamicType.getConstructor()
{0,750L}
(res == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
LegacyLifecycle lifecycle=(LegacyLifecycle)it.next(); 
getLastNonConfigurationInstance()
builder.length() == 0
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid())
logger.error("Could not find original user Authentication object!")
o instanceof TermQuery
for (SampleStream sampleStream : sampleStreams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
HashMap<String,ASTNode>
!javaSource
isNotNull(url)
new SystemVibrator()
new AnnotationNode()
setRestitution(objectId,mass)
twoNewMessages.await(60,TimeUnit.SECONDS)
card.init(i)
SystemInfo.isMac ? 5 : 7
user.getCompanyId()
layoutPageTemplateLocalService.updateLayoutPageTemplate(pageTemplateId,name,layoutPageTemplateFragments,serviceContext)
Collection self
mVibratorService.vibrate(2000,new Binder())
Long.valueOf(attrValue)
new IntRangeValidator(1,true,true)
new GridCacheQueryReadEvent<>(cctx.localNode(),"SQL query entry read.",EVT_CACHE_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SQL,cctx.namex(),qry.queryClassName(),qry.clause(),null,null,qryInfo.arguments(),qry.subjectId(),taskName,key,val,null,null)
Results.ok()
assertTrue(mDisabled.hasFocus())
ThemeEnforcement.obtainStyledAttributes(context,attrs,R.styleable.TabLayout,defStyleAttr,R.style.Widget_Design_TabLayout)
Object event
DEBUG_STARTING_WINDOW=false
loaded.getLoaded().getConstructor()
currenType != Type.INT
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty
Class.forName(name)
Long.valueOf(nfcid2,16)
getImportGroupId()
c.deactivate()
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
WordPress.getCurrentBlog().getRemoteBlogId()
setColor(backgroundColor)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
selenium.isVisible("link=Control Panel")
mHorizontals == null
HtmlUtil.escapeURL(_href)
calendar.set(Calendar.YEAR,2200)
internalCluster().getInstance(ClusterService.class)
logger.info("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
!visible
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
decodeAttribute(nameAttribute.getValue(),charset)
this.policy.setMaxTextMessageSize(anno.maxBinaryMessageSize())
new MockResponse().setBody("A").setSocketPolicy(SHUTDOWN_INPUT_AT_END)
new Paint(Paint.ANTI_ALIAS_FLAG)
((MasterSlaveDataSource)dataSource).getAllDataSources()
RuntimeVersion.isAtLeast12()
dest.writeLong(mSubId)
event.getChild()
callTimeoutMillis=3000
smppClient.reconnect()
player.sendMessage(new TextComponentString("Not an air block @" + placePos))
dw != mBackgroundHeight
System.getProperty(Tokens.FAUNUS_HOME)
name.equals(blacklistName)
myProject.isDisposed()
tracesFile.mkdirs()
pmmlScorecard.isUseReasonCodes()
NFIUnsatisfiedLinkError ex
thrown.equals(UserCodeException.class)
fileCollectionSnapshotter.registerSerializers(serializerRegistry)
row("p_comment",null,1.0,0.0,null,null,null)
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),false)
return areaHeight; 
mService.subscribe(clientId,subscribeConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,false,callback,clientId))
Thread.sleep(100)
mockRegionInfo.isMetaRegion()
RngElementDescriptor.this.getDependencies()
data != null
userRecord.mClientRecords != null
action == KeyEvent.ACTION_UP
new UdpConnector(localUdpPort,remoteAddress,hostPort)
private final CircularClipper mClipper; 
element.getNodeName()
blockchain.isBlockExist(hash)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
Log_OC.wtf(TAG,"\t account is NULL")
mInner.end()
TestPackage.foo("")
queryProcessor.curJobRunning.get() == 0
startingWindow != null
resolution.apply(initializationStrategy,classFileLocator,typeStrategy,byteBuddy,methodNameTransformer,bootstrapInjectionStrategy,accessControlContext,listener)
keycode == KeyEvent.KEYCODE_HEADSETHOOK
SamplingProfiler.newThreadGroupTheadSet(group)
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
course.getLessons()
namespaceDescriptor.getQualifiedName()
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
getNetworkPolicies()
r.getUri().toString()
maxInactiveInterval * 1000
Locale.getDefault().toString()
server0.getStoreRepository().getLocalStore(storeName)
elapsed > config.getConnectionTimeout()
mSharedElementNames.size()
newEmbeddedDatabaseBuilder(path)
DEFAULT_BG_LOW_JOB_COUNT=2
operations.remove(query,metadata.getCollectionName())
header.getX()
v.getCreationTime() + timeToLive > now
getAllprojects()
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build)
this::handle
measured.setPara(source,bufStart,bufEnd,textDir)
size * 1.75f
chain.resolveUrlPath(resourceUrlPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
new WeekViewEvent(event.getId(),event.getName(),startTime,event.getEndTime())
container.getVersion()
return mChangingAppearingDuration; 
Trans == TRANSPOSE
url.isEmpty()
FILE_TYPE_STOREDIRECT=1
((SoapFault)ex).getSubCode() != null
AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()
TimeUtils.nanoTime()
mMatchMode=numOfMatchesPerFilter
OverrideResolver.generateOverridesInFunctionGroup(methodName,null,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
constr.gridy=1
telephony.getCdmaEriIconIndexForSubscriber(subId)
oldFlagged=Boolean.parseBoolean(value)
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
Builder<T,B>
selenium.isVisible("link=Control Panel")
isCancelled0(result)
native_get_videoeditor_export_profile(vidCodec)
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end)
remaining > 0
context.report(ISSUE,context.getLocation(node),"Don't call sleep. Use MockTimer instead.")
mHandler.removeCallbacks(pae)
@Overide
return true; 
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
c.setDisplayName(nickName)
ArrayList<Language>
klass.getDeclaredMethods(false,declaredMethods)
new NotificationCompat.Builder(context)
mSeekBar.setProgress(0)
ActorSDK.sharedActor().style.getTextPrimaryColor()
new LinkedHashSet<String>(64)
5 * 60 * 100
functionFactory.lossMSLE(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
LOG.info("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
this.col=col
SECOND_FLOOR != null
targetInfo != null
/**   * Adds a query to the scheduler priority queue. This call always succeeds or throws exception if the queues are out of capacity. This will never block for resources to become available.  * @param query query to add to the list of waiters  * @throws OutOfCapacityError if the internal query queues are full  */ void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityError ; 
tagName.equals("uses-permission-sdk-m")
JsAstUtils.fqnWithoutSideEffects(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
dpToPx(4f)
Map<Object,RealmObject>
um.getUsers()
SCAN_STATUS_COMPLETE=1
RCTCamera.getInstance().setTorchMode(_cameraType,flashMode)
logger.warn("Cannot clear queue ({})",e.getMessage())
sendKeyDown(keycode)
types.get(id)
text.equals(((TextButton)button).getText())
expected == char.class
map.set(key,"value",1,TimeUnit.SECONDS)
((TextMessage)replyMsg).getText().getContentLength()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
new OperationSetTypingNotificationsGibberishImpl(this)
new String(byteArrayOutputStream.toByteArray())
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET)
toArrayHelper(1)
JournalArticleLocalServiceUtil.search(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"general","","",null,null,status,null,false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
mThumbnail.copy(Config.HARDWARE,true)
metrics.getExecutionTimePercentile(90)
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true)
AsyncResult<Boolean>
pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)
child.reset()
LOG.info("Looking for service: " + service + ". Current token is "+ token)
customReportContent != null
docDeleted == false
/**   * @throws Exception  * @see org.springframework.batch.item.ItemReader#read()  */ public Object read() throws Exception {   recordFinished=false;   while (!recordFinished) {     process((FieldSet)super.read());   }   log.info("Mapped: " + order);   Object result=order;   order=null;   return result; } 
applyCurrentState()
reader.getString(reader.readSmallUleb128())
Bytes.toBytesBinary(tableNameOrRegionName)
precision=1E6
new Rect(left,top,bottom,right)
assertNotNull(trie.get("tee:bar"))
returnElement == null
new StringBundler(5)
content.contains("&")
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
mHorizontals == null
selenium.isVisible("link=Control Panel")
stack.peekFirst()
defaultListenerAccess != null
Simple.of(type)
Exception e
fluentSetters()
container.getDataSource()
loaded.getLoaded().getConstructor()
Validator.isNull(entry.getUrlTitle())
!root.isDownloads()
log.info("Setting account {} to AUTO_PAY_OFF because of default payment method deletion")
buttons.size() > 3
observable.timeout(waitTime,timeUnit).toBlockingObservable()
CACHE.findOrInsert(classLoader,new TypeCache.SimpleKey(type,additionalInterfaces),new Callable<Class<?>>(){   @Override public Class<?> call() throws Exception {     return new ByteBuddy().with(new NamingStrategy.SuffixingRandom("SpockMock")).ignore(none()).subclass(type).implement(additionalInterfaces).implement(ISpockMockObject.class).method(any()).intercept(MethodDelegation.withDefaultConfiguration().withBinders(Morph.Binder.install(ByteBuddyInvoker.class)).to(ByteBuddyInterceptorAdapter.class)).transform(Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)).implement(ByteBuddyInterceptorAdapter.InterceptorAccess.class).intercept(FieldAccessor.ofField("$spock_interceptor")).defineField("$spock_interceptor",IProxyBasedMockInterceptor.class,Visibility.PRIVATE).make().load(classLoader).getLoaded();   } } ,type)
(byte)205
inetAddresses == null
order=30
service.getAllGtasksFromListId(listId,false)
Throwable e
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_STRING,myLanguageLevel.isPy3K())
super.doDestroyProcess()
1l << 36 - 1
cache.remove(key,true)
Math.max(titleRight,subtitleRight)
Exception e
new BindException(concept,"concept")
view != null
mService.addOrUpdatePasspointConfiguration(config)
forced == null || con.getListener().isForceDefault()
poList[1]
mAlpha == 0
stsClient.setKeySize(192)
tw.release()
Rule.DEFAULT_WEIGHT * 1.2
requestParameters == null
foregroundBetweenScanPeriod=p
"access-control/default is missing operations: " + accessControl
matcher.group(1)
result.getCanonicalPath()
(DataProvider)dataProvider
TimeValue.timeValueMillis(randomIntBetween(1,5) * aggHistogramInterval)
mDataAuthorities == null
public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
command <= 0x0F
checkpoint(false,true)
JSParameterTableModel.createDefaultValueCellFragment("",createFakeClass())
new Paint(Paint.ANTI_ALIAS_FLAG)
getAnonID() != null
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
onRotationLockChanged()
@Parameters(name="{0}") public static List<String> getList() throws PoshiRunnerException {   List<String> classCommandNames=new ArrayList<>();   String testName=PropsValues.TEST_NAME;   if (testName.contains("#")) {     classCommandNames.add(testName);   }  else {     String className=testName;     Element rootElement=PoshiRunnerContext.getTestcaseRootElement(className);     List<Element> commandElements=rootElement.elements("command");     for (    Element commandElement : commandElements) {       classCommandNames.add(className + "#" + commandElement.attributeValue("name"));     }   }   return classCommandNames; } 
requestModels.entrySet()
onRotationLockChanged()
Boolean.valueOf(this.getOptional("kylin.query.security.table-acl-enabled","true"))
Math.max(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
Observable.just(activityFeedButton,currentUserButton,filterExpandMoreButton,filterTextView,loginButton)
clickListener_OnClickListener == null
service.getDomain().getName()
to("bar")
preserve.toString()
mContext.startActivity(intent)
mPowerManager.isScreenOn()
NTP_TIMEOUT=5000
resultEndpoint.expectedBodiesReceived("one","three")
noStructuresDLFileEntryMetadatas.size()
mRvc == null
ClassNotFoundException e
c.set(IDAUTHORITY_WAIT_MS,10)
commState.putBoolean(sys)
"DROP INDEX " + PATTERN_ITEM_INDEX_SHORT
GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))
target == null
logger.debug("Apollo bootstrap config is enabled for context {}",context,PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED)
i < 32767
private KeyValueBinding attributeBinding; 
new IncorrectOperationException()
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
ColorResources.getColor("inactiveTextColor")
rootDir.mkdirs()
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
conversation.findMessageWithRemoteId(remoteMsgId,counterpart) != null
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
TelephonyManager.getDefault().getPhoneType()
dest.writeParcelableArray(remoteInputs,flags)
tickTupleInterval == 0
getActiveFgCall().getPhone().sendDtmf(c)
a.getTypeByte()
liferayFileEntry.isInTrash()
dir.mkdir()
mEntries[which]
killPackageProcessesLocked(name,appId,userId,-100,callerWillRestart,false,doit,evenPersistent,name == null ? ("force stop user " + userId) : ("force stop " + name))
message.addHeader("Message-ID",cursor.getString(12))
selenium.isVisible("link=Control Panel")
getWidth()
flags_=0
new PackageConfig()
OrderUtils.getOrder(((DecoratingProxy)obj).getDecoratedClass())
GitHandlerUtil.doSynchronously(h,GitBundle.getString("rebasing.title"),h.printableCommandLine())
LAYERS=10
mDuration >= 0
log.error(notJava6.getMessage() + " .. trying RI.")
data.needsTransformation()
_parms._sample_rate < 1
Object node
StringBuffer xml=new StringBuffer(); 
intsScratch.values[0]=docId
JetTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
params.remove(key)
JournalTestUtil.updateArticle(article,"Content: Enterprise. Open Source. For Life.",article.getContent())
m.getClass()
LOG.warn("Failed to get mount information: {}",e.getMessage())
sendMessage(CMD_STOP_AP)
ENABLE_COPY_OPTIMIZATIONS=false
_configurationPair.getKey()
input.getPath()
Double rate
p.getLabel()
(currentTimeNanos - previousTimeNanos) > SPANS[index + 1]
CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider<XmlNSDescriptorImpl>(){   @Override public Result<XmlNSDescriptorImpl> compute(){     return Result.create(doCreateDescriptor(kind),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);   } } )
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null)
DumbService.getInstance(getProject()).runReadActionInSmartMode(() -> actionManager.tryToExecute(mainMenuAction,fakeMainMenuMouseEvent,null,ActionPlaces.MAIN_MENU,true))
IllegalArgumentException e
RandomStringUtils.random(255)
i=1000
TAP_TIMEOUT=200
Thread.sleep(1000)
HDR_TYPE_DATA=0x00
getFragmentManager()
position.offset(mLeft,mRight)
new TextPaint()
new IllegalStateException()
Integer.valueOf(stackIdStr)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
container.getVersion().toString()
meta.getColumnName(i)
Assert.assertEquals(interop.getDoubleField(),copy.getDoubleField())
private void feedOtherPlayers(final Server server,final CommandSender sender,final String name) throws NotEnoughArgumentsException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     try {       feedPlayer(sender,matchPlayer);     }  catch (    QuietAbortException e) {     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
TOUCHEVENT_POOL.recylePoolItem(this)
info.getDeviceIdForPhone(slotId)
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,1)
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
32 * 1024 * 1024
Class[]
supressLeadingZeroElements == false
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
stat.st_size.get()
new IndexWriter(dir,new WhitespaceAnalyzer())
out.writeInt(data[0])
selenium.isVisible("link=Control Panel")
isPathClassLoaderName(classloaderName)
dynamicType.getLoaded().getConstructor()
(ElasticSearchException)t
syncDLFileVersionDiffPersistence.fetchByS_S_D(fileEntryId,sourceFileVersionId,destinationFileVersionId)
arr[0]
myStartX=startY
new RuntimeException(e)
mThemeStore.getThemeByThemeId(themeId)
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
displayContent.getDockedStackLocked()
arr.size(oi) != 1
ctx.getOuterContext()
-25
@Self Object currentStatement
Boolean.valueOf(getOptional("kylin.query.enable-dynamic-column","false"))
loaded.getLoaded().getConstructor()
m.isTablePerHierarchy()
isDistinct(child)
wf.setVersion(1)
WaitUtils.waitForPageToLoad(driver)
log.error(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
new IllegalStateException("cannot set max pool size to a value less than the current max value(=" + i + ")")
telephony.getCdmaEriIconModeForSubscriber(subId)
!rootScanned
name="java:/TransactionManager"
new Backgrounding()
myPopup.cancel()
delegates.size() > 1
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)
traceOn
strings.length == 5
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
sku.getName()
latch.startLatch.await(200,TimeUnit.MILLISECONDS)
blog.getRemoteBlogId()
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class)
Math.min(desired,height)
assertFalse(model.getUniqueItems())
KotlinToJVMBytecodeCompiler.INSTANCE.analyzeAndGenerate(environment,configuration)
a.getDimensionPixelOffset(attr,0)
bitArray.skipBits(4)
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)
new RuntimeException(e)
public SELF withCancellationToken(CancellationToken cancellationToken){   operationParamsBuilder.setCancellationToken(Preconditions.checkNotNull(cancellationToken));   return getThis(); } 
ensureExpectedToken(parser.nextToken(),XContentParser.Token.VALUE_NUMBER,parser::getTokenLocation)
row.setBackground(getResources().getDrawable(R.drawable.list_highlight_bg))
projectMeasures.get(0)
mPowerManager.isScreenOn()
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
new IllegalArgumentException()
XmppStringUtils.parseBareAddress(from)
createRecord(value,expiryTime)
(prop.getModifiers() & ACC_FINAL) != 0
DBException e
conversation.getContactJid().split("/")
i < maxIndex - match.length()
fileIds == null
performDexOpt(packageName,instructionSet,true)
!getBoldStatus(elements[1])
method.getName().equals(writeMethodToUse.getName()) && !method.equals(writeMethodToUse) && !method.isBridge()
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()
!returnValue
sendCommand(CLIENT_LIST)
log.info(sm.getString("contextConfig.role.runas",runAs))
cache.invoke(entry.getKey(),this)
is(4)
mValues[7]
ownedRanges.size()
Slog.e(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
stmt.executeQuery(sqlQuery)
peekServiceForUserLocked(userId)
nowELAPSED < minTime
AttributeCache.instance().get(packageName,realTheme,styleable.Window)
parsedResult.getSqlType()
configureSwipeToRefresh(savedInstanceState,view)
node == null
hour != 0
_typeSettingsProperties.toSortedString()
pvtKeyStore == null
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
log.warn("Hooking new default : onOperatorError")
Packet packet
boundary.startsWith("\"")
getTimeout()
new EditText(getDialogContext(true))
assertCompletionVariants(myProjectPom,"jar","pom","war","ejb","ejb-client","ear","bundle")
partialUri.toString()
w / 2
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
serviceDataUuid == null
fingerId == 0
400L * FileUtils.ONE_MB
new AsyncTask<Object,Object,Long>(){   @Override protected Long doInBackground(  Object... objects){     return DatabaseHelper.getInstance(context).getHostCount(rule.info.applicationInfo.uid,false);   }   @Override protected void onPostExecute(  Long hosts){     rule.hosts=hosts;     notifyDataSetChanged();   } } .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
that.timestamp.isEqual(timestamp) && that.windows.size() == windows.size()
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges))
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate")
IBackupManagerService svc=mService; 
checkPojoMetaClass()
VOLUME_CHUNK_SHIFT=24
Column column
populateTrendingUi()
StringBuilder sb=new StringBuilder(64); 
beanDefinition.isAbstract()
mCursor.deactivate()
displayList != null
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
power > POWER_REQ
type.equalsIgnoreCase("integer")
getOriginalAmount().min(remainingAmount)
context.var("double")
args[0].trim().length() < 3
getWebElement(webDriver,locator)
logger.error("{}",builder.toString())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append("#")
image.pixelWidth != width
service.getKioskList().getAvailableKisoks()
AdviceWithTasks.afterByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
USE_DISPLAY_LIST_PROPERTIES=true
setValue(key,PSS_AVERAGE,(long)(((val * (double)count) + (avgUss * (double)inCount)) / (count + inCount)))
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))
flyway.info().all()[2]
System.nanoTime()
file.length() >= Integer.MAX_VALUE
mScreenBright=false
COOKIE_SYNC_MANAGER=false
selenium.isVisible("link=Control Panel")
private FBTree myCurrentTree; 
Number.class
mGpsListener != null
blog.getRemoteBlogId()
Response.ok()
element instanceof PsiField
DESCRIPTION_PATTERN.matcher(error)
responseClass == Void.class
witnessCapsule.getAddress()
player.playSound(soundLocation,soundArg,(float)minimumVolume,(float)pitch)
TimeUnit.MILLISECONDS.toMillis(10)
TrashWebUpgrade.class
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)
rowKeyColumnIO.writeColumnWith(buffer,0,length,recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
next.handle(request).map(responseProcessor)
existingFile.refresh(false,toWatchRecursively)
new GLBufferPool()
type == TRIANGLES
getNotificationInterface().getHintsFromListener(mWrapper)
new IndexWriter(dir,new StandardAnalyzer(),true)
{abiList}
args.getInt(KEY_GID,-1)
stack.get(stack.size() - 3).longValue()
moduleRegistry.getModule("gradle-test-kit").getClasspath()
mRedrawClip.isEmpty()
assertEquals(130,panel.getPreferredSize().width)
lock.isLocked()
new FormAttachment(wWildcardField,margin)
" firstActiveTime=" + lastActiveTime
mHorizontals == null
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
host.getHostText()
logger.debug("Trying to map {} to {}",t,path)
PyElement resolved=(PyElement)cref.resolve(); 
type.getConstructor()
offset > mValue.length
Log.warn("The given state from the response: " + billToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
INDEX_VERSION=16
VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)
location.getAccuracy() < precision
(lo + hi) >> 1
mContext.sendBroadcast(intent)
Integer.valueOf(stackIdStr)
srcCharset=StandardCharsets.UTF_8
new BuildRuleParams(params.getBuildTarget(),() -> ImmutableSortedSet.<BuildRule>naturalOrder().addAll(swiftCompileRules).addAll(implicitSwiftCompileRules).addAll(cxxDeps.getDeps(ruleFinder)).addAll(preprocessor.getDeps(ruleFinder)).build(),ImmutableSortedSet::of,ImmutableSortedSet.of(),params.getProjectFilesystem())
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,false,false)
connectionManager.read(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
settingOptional.get().getName()
myNameField.getComponent()
new Paint(Paint.ANTI_ALIAS_FLAG)
new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)))
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
LOG.error(e)
configuration.getPluginArtifactRepositories()
assertEquals(3,executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
logger.info("Calimero library version {}",Settings.getLibraryVersion())
new IndexWriter(dir,new WhitespaceAnalyzer())
centralDirOffset >= eocdOffset
group.isStagingGroup()
recipientIds[i].equals("-1")
loaded.getLoaded().getConstructor()
mock.expectedMessageCount(1)
loaded.getLoaded().getConstructor()
Boolean.valueOf(attrValue)
selenium.isVisible("link=Control Panel")
Integer.valueOf(tupleValue)
result.put(toPresentationForm(node),attributes)
Collection<Integer>
new Paint(Paint.ANTI_ALIAS_FLAG)
byteBuffer == null
is(true)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
compensationRange.inRange(compensation)
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
randomFrom("allocate","forcemerge","delete","replicas","shrink")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new Rect(left,top,bottom,right)
typeSettingsProperties.toSortedString()
INITIAL_LAUNCH_IDLE_TIMEOUT=7500
distanceToView(focused) > 0
prefs.getLong(ACRA.PREF_LAST_VERSION_NR,0)
mShowcaseRect.left == cx - dw / 2
Aria.download(this).getDownloadList()
TypeEvalContext.fast()
LOGGER.info("Invoking authentication post processor [{}]")
resource.getPath()
getFastAdapter().notifyAdapterItemInserted(position)
Objects.isNull(value)
file.getAbsoluteFile()
topMembersGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
old + 20
!mUserVisibleHint && isVisibleToUser && mState < STARTED
new LocationVariableResolver(_mockResourceManager,_mockSettingsFactory)
this.myHashMap.containsKey(o)
bar.expectedMinimumMessageCount(1)
mPlayer.getCurrentPosition() * 1000
@Override public Value emitAddress(StackSlotValue address){   Variable result=newVariable(LIRKind.value(target().wordKind));   append(new StackLoadAddressOp(result,address));   return result; } 
alertEventHandler != null
registrar.checkExisting(metric)
c.deactivate()
mActionView.getHeight()
si.id == id
Color.fromRGB(0x1E1B1B)
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
expiresOn.getTime()
new EntitlementUserApiException(ErrorCode.ENT_INVALID_REQUESTED_DATE,requestedDate.toString())
second.get(i)
isHoverable()
!_calledSetTotal
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().getEpochSecond()
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
mVerticalScrollBarMode == SCROLLBAR_ALWAYSOFF
BigInteger.valueOf(2)
log.error(throwable,"Query %s failed",queryId)
getConfiguration()
DefaultAtmosphereRequest request
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
binary.getName()
Looper.getMainLooper()
selenium.isVisible("link=Control Panel")
CMISFileEntry.class
_buildTemplateWithGradle("portlet","portlet-dependency-management","--dependency-management-enabled","true")
BackgroundTask.run(() -> renderPage(initialPage))
new InternalTestCluster(randomLong(),2,2,cluster2Name,cluster2SettingsSource,0,false,false,CHILD_JVM_ID,SECOND_CLUSTER_NODE_PREFIX)
new AssertionError("Lib files not found.")
rangedRegion.getProximityUuid()
((SuperColumn)c).cloneMeShallow()
regUser * userWeight * trusteeFactorValue* trusteeFactorValue
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).blogPostings(Collectors.toList())
executeRunnableDismissingKeyguard(runnable,null,false,true)
getMapNearCacheManager(dataMember)
battery.addPower(Math.min(power,battery.getCapacity() - battery.getStored()))
updatePaints(g.getColor(),g.isShowCurrentTrack(),routePoints,settings,tileBox)
selenium.isVisible("link=Control Panel")
new IndexWriter(rd,new WhitespaceAnalyzer(),true)
{4,5,5,11,6,5,7,5,11,11}
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"isAppInactive",null)
this.field_92017_k
collection.add(3l)
getDatabaseCatalog() != null
fr.delete()
UseItemCaptureMessage.newBuilder().setEncounterId(this.getEncounterId()).setSpawnPointGuid(this.getSpawnPointId())
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
scheduleRemoveStartingWindow(wtoken)
new Object[lines.size()][18]
ModalityState.any()
getCanonicalText()
realm.assertThread()
mAms.mWaitForNetworkTimeoutMs=100
timeLeft >= 0
Thread.sleep(1000)
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
insertItemStacked(inventory,stack,false)
logger.error("Plugin class " + pluginClass)
@UriPath(label="producer",defaultValue="true")
info.crashInfo.stackTrace.length() > 10000
renderer != null
i=0
mActiveStreamType == -1
link.bone.getInitialRot()
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true)
c == Byte.class
JSONUtilities.safePut(options,"guessCellValueTypes",true)
socket.setSoTimeout(300)
queuedChunk.provider.loadChunk(queuedChunk.x,queuedChunk.z)
selenium.isVisible("link=Control Panel")
DEBUG=true
IoUtils.safeClose(delegate)
loaded.getLoaded().getConstructor()
it.setJavaDocComment("Super extra cool this annotation!!!")
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
status().isPermanentRedirect()
message.getMessage().getExpiresInSeconds() * 1000
selenium.isVisible("link=Control Panel")
TypeResolver.resolve(channelTypeUID)
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
mData.hashCode()
Integer.valueOf(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
modelActionsGroup.add(new CommitUsingExecutorAction(executor))
nextTokenIsFast(b,IDENTIFIER)
log.error("Unsupported {} : {} for serviceId : {}",OAuthConstants.REDIRECT_URI,redirectUri,serviceId)
buddyIter.next().getKey()
public Integer getFileId(){   return fileId; } 
selenium.isVisible("link=Control Panel")
IndexReader.open(userindex,true)
startHours == 8
!mService.mLockTaskController.checkLockedTask(tr)
Integer.valueOf(time.split(":")[0])
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
info.getGroupIdLevel1()
new LayerView(this,0xff0000ff)
temporaryFolder.getRoot()
e1.getPointerCount()
sep < 0
1l << 36
TestPropsValues.getUserId()
timeout=8000
Integer.valueOf(stackIdStr)
primaryServer.getClass()
mNavigationBarView.isQuickScrubEnabled()
columnController.createColumns()
log.debug("Filtering key {} due to exception",k,e)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(13)
renderer != null
new LFWDataFetcher(imageHeight,imageWidth)
new UnsupportedOperationException()
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.",ioe)
fluentSetters()
ams.mContext.createPackageContext(appInfo.packageName,0)
new int[684]
MAX_DIMEN_FOR_ROUNDING=1080
randomIntBetween(1,10000)
log.warn("Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].")
e.getMessage()
logger.error("{}",general)
(child.mViewFlags & VISIBILITY_MASK) != GONE
response != null
checkBoxView.setBackgroundResource(R.drawable.btn_check)
LOG.info("Ganglia server component is not live")
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
CanaryLog.d(leakInfo)
dyn.remove("delays")
Native.getStringEncoding(classes[i])
Exception e
mHandler.removeCallbacks(pae)
IllegalArgumentException ex
ArrayList<UsageInfo>
mapper.seAttributePrefix("ROLE_")
slice.getAddress()
address.getHostName()
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
selenium.isVisible("link=Control Panel")
s != null
current > 0
new IndexWriter(ramDir,new WhitespaceAnalyzer(),false)
path.getName(Locale.ENGLISH)
new IndexWriter(indexStore,new SimpleAnalyzer(),true)
row("p_comment",null,1.0,0.0,null,null,null)
Type.getType(stubInternalName)
WPWebViewActivity.openUrlByUsingMainWPCOMCredentials(context,url)
new CacheLoaderException("Failed to remove object: " + key,e)
sampleFactory.getConstructor()
(bytes[bytes.length - 1] & outputValueMask) == STATUS_SWITCHING_ON
Object message
mActiveAgents.valueAt(i)
_log.error(ioe,ioe)
loaded.getLoaded().getConstructor()
{abiList}
selenium.isVisible("link=Control Panel")
!mDownloadXtraDataPending
cookieValue.isNull()
file == null
assertEquals(10,events.size())
logger.error("Field sorting failed, couldn't find table spec: " + model.getSimpleName())
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1,UserHandle.USER_CURRENT)
public static ArrayValue durationArray(DurationValue[] values){   return new DurationArray(values); } 
PendingIntent.getBroadcast(mContext,0,ACTION_NULL,PendingIntent.FLAG_UPDATE_CURRENT)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
formatTime(scanWifiLockOnTime / 1000)
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",true))
DataStream<OUT>
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
maxWidth == 0
thenStore.storeChanged | elseStore.storeChanged
@JsonProperty("id") Integer id
intent.setData(uri)
loaded.getLoaded().getConstructor()
Object item=provider.read(); 
sX != 0
enumDeclaration.getChildNodes().get(2)
subscriptionSender.setContextAttributes("[$CONTENT_URL$]",contentURL,false)
this.clss=clss
result == null
userRecord.mClientRecords != null
y == 0
@NonNull
new HashMap(50)
iteration=0
elements != null
subject.isEmpty()
getLogger().warn("\n\tDEPRECATION: The POM for the artifact '" + artifact.getDependencyConflictId() + "' was invalid or not found on any repositories.\n"+ "\tThis may not be supported by future versions of Maven and should be corrected as soon as possible.\n"+ "\tError given: "+ e.getMessage()+ "\n")
Object name
equalTo(1)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
ddmStructureService.deleteStructure(ddmStructure.getStructureId())
myCell.getStream()
_lifecycle.equals(PortletRequest.RESOURCE_PHASE)
processInstance.getId()
ClassLoader.class.getMethod("findLibrary",new Class[]{String.class})
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
shell.setSize(653,678)
mService.setUidPolicy(UID_A,POLICY_NONE)
level >= 100
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
mEnginesHelper.isEngineEnabled(engine)
CANCEL_TIMEOUT_LIMIT=300
writeBufferBlocking(true)
SSTableMetadata.createCollector()
blog.getRemoteBlogId()
Java6Assertions.assertThat(mountedSubComponents).isEqualTo(subComponents)
UIUtils.setBackground(mSliderLayout,mSliderBackgroundColorRes)
selenium.isVisible("link=Control Panel")
getNextClusterID()
selenium.isVisible("link=Control Panel")
mAuthStatusText=failedStatusText
Log_OC.wtf(TAG,"Trying to send a NULL OCFile")
mService.disconnect(mContext.getOpPackageName())
entry.notification.clone()
loaded.getLoaded().getConstructor()
in.readObject()
HazelcastInstanceFactory.terminateAll()
SOURCE.deref()
IllegalStateException.class
Exception e
selenium.isVisible("link=Control Panel")
Long.valueOf(value)
websocketComponent.setMaxThreads(11)
final Trie foundWhitelist=trie.findNode(FocusString.create("def")); 
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
coverageDataManager.addCoverageSuite(myConfiguration.getName(),new DefaultCoverageFileProvider(coverageFileName),myConfiguration.getPatterns(),lastCoverageTime,myConfiguration.getSuiteToMergeWith(),myConfiguration.getCoverageRunner(),myConfiguration.isTrackPerTestCoverage() && !myConfiguration.isSampling())
assertEquals(0,view.getEnqueueCount())
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
laf.getName()
myProject != null
graph.getEdges()
bytes.write('\n')
CvsVfsUtil.findFileByIoFile(targetFile)
new RunResult<T>()
view.setTextColor(0xFFDADADA)
Number.class
new LanczosState(L,clusters,DistributedLanczosSolver.getInitialVector(L))
HistoryRecord r=(HistoryRecord)it.next(); 
position - 1 > 0
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(64)
myParameterNameField.getComponent()
AtmosphereResponse.create()
is("/home/source")
T
GeneralRouterProfile p; 
fluentSetters()
position.setEmpty()
services.size() == 0
NSString value=(NSString)nsDictionary.get(convertKey(key)); 
mRedrawClip.isEmpty()
ClusterNode node=rmtNodes.get(nodeId); 
javaVersion < 9
jsonObject.getLong(KEY_DATE_ADDED)
loader.startInternal()
(short)4
assertEquals(serdeC.getCodec().toString(),CodecFactory.fromString(codec).toString())
new Paint()
WebSocket conn
T extends Capability
columnDefinition.getContentValuesStatement()
wordDetector.getEndOffset()
!mWindow.getSharedElementsUseOverlay()
d.getPage()
id=19909
logger.info("Normalizing")
onRotationLockChanged()
type.getSimpleName()
/**   * Logs <code>load()</code>, <code>store()</code> and <code>close()</code> methods and exceptions.  */ public class LoggingBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private static final Logger LOGGER=LoggerFactory.getLogger(LoggingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   public LoggingBuildCacheServiceDecorator(  RoleAwareBuildCacheService delegate){     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     try {       LOGGER.debug("Loading entry {} from {} build cache",key,getRole());       return super.load(key,reader);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not load entry {} from {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     try {       LOGGER.debug("Storing entry {} in {} build cache",key,getRole());       super.store(key,writer);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not store entry {} in {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void close() throws IOException {     LOGGER.debug("Closing {} build cache",getRole());     super.close();   } } 
ExamplesUtils.classLoader().getResource(HIBERNATE_DFLT_CFG)
um.isUserUnlocked()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
icer_cc.toClass()
statusBar.setRedraw(true)
new GroupTest(true)
fileSystem.move(outputFile,archivedOutputFile(1))
ticket.notify()
Integer.toString(contentLength)
selenium.isVisible("link=Control Panel")
onEvaluateInputViewShown()
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
OpenSparkInterpreter(true)
SYNC_OK=0x0
matchAxisFilter != 0
isCreated()
host1.getAddress()
new IndexWriter(dir,analyzer,true)
TelephonyManager.getDefault().getPhoneType()
Class<Input>
new Paint()
parentGroupId == 0
props.getBoolean("enable.quota.limiting",false)
logger.error("cs-change-async-action-callback. current-step:" + currentStep.getKey())
2 * 60 * 1000
myNameSuggestionsField.getComponent()
assertThat(test.scan(Scannable.Attr.LARGE_BUFFERED)).isEqualTo(0L)
realm.assertThread()
cn.length() == 0
StubElement fileStub=getStub(); 
@InSequence(5)
selenium.isVisible("link=Control Panel")
e.getPresentation().setEnabled(enabled(project,log,details))
DISPLAY_TASKS_PORTRAIT=8
KeyValue<String,Long>
packed[j]
log.warn("Null primary key column for '" + object.getName() + "'")
packageNames.length == 1
selenium.isVisible("link=Control Panel")
HashMap<Integer,RealmObject>
/**   * Current size of all enqueued blocks in bytes.   */ private final LongAdder curSize=new LongAdder(); 
Thread.sleep(100)
String... args
getChunk(pos)
LocalFileSystem.getInstance().findFileByPath(filePath)
headers.getMessageType()
JDBCUtils.safeGetString(dbResult,"id")
isEmptyOrSpaces(s)
mPointRealContainerLl.getChildAt(i).setEnabled(i == newCurrentPoint)
ar.cause()
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
is(3)
TAuthor_LAST_NAME()
!dataChanged || isDirectChildHeaderOrFooter(focusedChild)
!mAwake
System.currentTimeMillis()
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
executionStats.getSplits()
Boolean.valueOf(attrValue)
parser.getText()
originStorageUsage - originStorageUsage
selenium.isVisible("link=Control Panel")
LOG.error(ex,"Distributed build step failed.")
getPosition(identifier)
isMarked(node)
entry.notification.clone()
TelephonyManager.getDefault().getPhoneType()
tryUsingRI(m)
assertEquals(1695,res.getWeight(1,2),5)
synchronized (mAccounts) {   writeStatusLocked(); } 
reg.useEnglishNames() != osmandSettings.USE_ENGLISH_NAMES.get()
selenium.isVisible("link=Control Panel")
expiresOn.getTime()
s.count()
type.getConstructor()
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
!w.mAppFreezing && w.mLayoutSeq == mLayoutSeq
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
new WrappedEpoxyModelClickListener(this,listener_OnClickListener)
type.endsWith(type)
Exception e
public class PushOrPullPreventingBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private static final Logger LOGGER=LoggerFactory.getLogger(PushOrPullPreventingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final boolean pushDisabled;   private final boolean pullDisabled;   public PushOrPullPreventingBuildCacheServiceDecorator(  boolean pushDisabled,  boolean pullDisabled,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.pushDisabled=pushDisabled;     this.pullDisabled=pullDisabled;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (pullDisabled) {       LOGGER.debug("Not loading entry {} because pulling from {} build cache is disabled for the build",key,getRole());       return false;     }     return super.load(key,reader);   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (pushDisabled) {       LOGGER.debug("Not storing entry {} because pushing to {} build cache is disabled for the build",key,getRole());     }  else {       super.store(key,writer);     }   } } 
(QMMObject)items[i].getData()
lhs.getScore()
"unable to parse " + abstractOption
file.getPath()
classOrVariableName.matches(allowedClassName)
SkuTranslationImpl.class
new RuntimeException("Missing type parameter.")
(byte)0xdf
new PrestoException(HIVE_FILESYSTEM_ERROR,e)
TimeUnit.SECONDS.toNanos(timeoutSeconds)
new LeftTuple(new DefaultFactHandle(2,"cheese"))
mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS_FULL) != PackageManager.PERMISSION_GRANTED || mContext.checkCallingPermission(Manifest.permission.INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
maxSize > (used / total)
Assert.fail()
printTypeWithoutBounds(out,type)
returnTypeCache == null
final SimulatedTrackball mSimulatedTrackball; 
factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)
new FileOutputStream(tempFile,false)
" firstActiveTime=" + lastActiveTime
disableForUser(what,token,pkg,mCurrentUserId)
Foundation.NSLog("[debug] " + tag + ": "+ message)
volume.getType() == VolumeInfo.TYPE_PUBLIC
uris.keySet()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
this.ctx.getApplicationContext()
blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
LookupElementBuilder.create(referencedName)
IBackupManagerService svc=mService; 
new Integer(0)
new LightweightThread(null,new SuspendableRunnable(){   @Override public void run() throws SuspendExecution {     dut.myMethod();   } } )
Long.valueOf(attrValue)
type.getConstructor()
rs.last()
type != null
sourceSet.getRuntimeClasspathConfigurationName()
reduceConfigWidthSize(sw,Surface.ROTATION_90,density,unrotDw,unrotDh)
config.getMaxElementsInMemory()
session.sessions().createUserSession(adminRealm,admin,"admin",null,"form",false)
UserHandle.getCallingUserId()
file.getAbsoluteFile()
selenium.isVisible("link=Control Panel")
assertEquals(helper.getRelationshipIndexes().length,1)
TestPackage.foo("",10,new Function1<Integer,Unit>(){   public Unit invoke(  Integer n){     System.out.println(n);   } } )
Assert.assertEquals(6033531930L,trace.getReceipt().getEnergyFee())
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly))
selenium.isVisible("link=Control Panel")
someConfiguredTargetEvaluated || anyConfiguredTargetDeleted || !dirtiedConfiguredTargetKeys.isEmpty()|| !largestTopLevelKeySetCheckedForConflicts.containsAll(newKeys)
return false; 
uri.toASCIIString()
config.enabled() && config.showInfobox()
computator.getContentRectMinusAxesMargins()
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
peekServiceForUserLocked(userId)
isNavBarVirtKey && !down
context.getPackageName()
mDisplayContent.getSplitScreenPrimaryStack()
IndexReader reader=IndexReader.open(dir); 
mPulseCallback.onPulseFinished()
buf.putInt(utf.length)
lp.width != panelWidth
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
mContext.startActivity(cantAddAccount)
selenium.isVisible("link=Control Panel")
focusedTopActivity != null
fileName.startsWith("/")
executeDraw()
assertEquals(expectedPlan,actualPlan)
classResolver.resolveClass(type)
new int[433092]
SimpleHandler.getInstance().post(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } )
@Overide
new ObjectMapper().reader(Map.class)
canvas.clipPath(mRenderPath,Region.Op.REPLACE)
m.getCurrentJobWaitTime()
DEBUG=true
engine.execute(query).toString()
(Integer)src
DEBUG=true
Table table=Table.open(tableName); 
new Argument().setIndex(0)
set(object,value.intValue())
next.handle(request).map(responseProcessor)
searchFacet != null
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
PermissionUtils.isLocationPermissionGranted(this)
getRecentsButton()
filePath == null
FastMath.max(origin,num.doubleValue())
new AndroidFiles(this.getService().getAssets())
parser.getBoolean(KEY_ADJUST_BRIGHTNESS_DISABLED,false)
new JBSplitter("antConfigurations.splitter",03f)
any()
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
messenger.signUp(name,null,false)
!verbDoesMatchPersonAndNumber(tokens[posEr - 1],tokens[posEr + plus1],"3","SIN") && !nextButOneIsModal(tokens,posEr) && !"äußerst".equals(finiteVerb.getToken())
viewable=false
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
-1
restrictToField=p.get("termSourceField")
interpreterSetting.getName()
mMncStr == null
super.setup()
new IllegalStateException("Unexpected number of values for entry:" + entryValues)
metrics.entrySet().stream().filter(e -> e.getKey().startsWith("DIRECTORY")).count() > 50
getBeanClass(factoryClassName).getMethods()
AUTOCLOSE_NEVER=0
-leading
interceptor.intercept(invocation)
UserHandle.getCallingUserId()
checkManageUsersPermission("setupRestrictedProfile")
new int[0]
new Paint(Paint.ANTI_ALIAS_FLAG)
Iterables.find(reportReader.readComponentMeasures(component.getRef()),new Predicate<BatchReport.Measure>(){   @Override public boolean apply(  @Nonnull BatchReport.Measure input){     return input.getMetricKey().equals(metric.getKey());   } } )
Math.min(filterExplanations.get(i).getValue(),minFactor)
getString(R.string.known_issue_wrong_base_directory)
mContext.sendBroadcast(intent)
new CacheConfiguration()
fileChooser.setSelectedFile(defaultSelection)
longSize >= 800
ks.getKieClasspathContainer()
mPulseCallback.onPulseFinished()
i < arguments.length
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withUser)
@Nested private final TestReports reports; 
actionWithAccount=user
ShutdownOperations.addOperation(new Runnable(){   public void run(){     clear();   } } )
setEnabledFunctions(mDefaultFunctions,false)
headers.getMessageType()
2.0f * zFar * rangeReciprocal
localAddList.clear()
event.getY()
timezoneFlags == TZ_FLAG_INCLUDE_DST_IN_TZ
{NOTIFY_INIT,NOTIFY_CONNECT,NOTIFY_ABANDON,SLOW_QUERY_NOTIFICATION,FAILED_QUERY_NOTIFICATION,SUSPECT_ABANDONED_NOTIFICATION,SUSPECT_RETURNED_NOTIFICATION}
displayContent.getDockedStackLocked()
getFailedExecutionException()
verifyResourcedModel(role,verifiableResourcedModel.getTableName(),verifiableResourcedModel.getModelName(),verifiableResourcedModel.getPrimaryKeyColumnName())
mHandler.postDelayed(pae,timeout)
is(true)
assertComputationDurationAround(340000L)
value[clu][col] * mults[col]
loader.isLoading()
deadline < now
values.size()
executeDraw()
item != null
selenium.isVisible("link=Control Panel")
store.setConfigPath(usersFile)
loaded.getLoaded().getConstructor()
ImmutableList.of()
success
DUMP_TIMEOUT_MS=20000
TokenSet.create(INTEGER_LITERAL,LONG_LITERAL,FLOAT_LITERAL,CHARACTER_LITERAL,STRING_LITERAL,RAW_STRING_LITERAL,NAMESPACE_KEYWORD,AS_KEYWORD,TYPE_KEYWORD,CLASS_KEYWORD,THIS_KEYWORD,VAL_KEYWORD,VAR_KEYWORD,FUN_KEYWORD,EXTENSION_KEYWORD,FOR_KEYWORD,NULL_KEYWORD,TYPEOF_KEYWORD,NEW_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,IS_KEYWORD,THROW_KEYWORD,RETURN_KEYWORD,BREAK_KEYWORD,CONTINUE_KEYWORD,OBJECT_KEYWORD,IF_KEYWORD,TRY_KEYWORD,ELSE_KEYWORD,WHILE_KEYWORD,DO_KEYWORD,MATCH_KEYWORD,RBRACKET,RBRACE,RPAR,PLUSPLUS,MINUSMINUS,MUL,PLUS,MINUS,EXCL,DIV,PERC,LTEQ,EQEQEQ,ARROW,DOUBLE_ARROW,EXCLEQEQEQ,EQEQ,EXCLEQ,ANDAND,OROR,SAFE_ACCESS,ELVIS,QUEST,SEMICOLON,RANGE,EQ,MULTEQ,DIVEQ,PERCEQ,PLUSEQ,MINUSEQ,NOT_IN,NOT_IS,HASH,EOL_OR_SEMICOLON)
new Paint(Paint.ANTI_ALIAS_FLAG)
Blocks.dirt.func_149739_a()
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
candidate.getArgumentMaping()
selenium.isVisible("link=Control Panel")
new OneRun(43.733802,7.413433,43.739662,7.424355,2225,105)
LOGGER.debug("Could not perform drage and drop",nfe)
JournalContentSearchWebUpgrade.class
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
addView(root,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
childLeftTuple.reAddRight()
getEffectiveCleartextTrafficPermitted()
Arrays.asList(new Dependency("org.grails","grails-docs",grailsVersion,true),new Dependency("com.lowagie","itext","2.0.8",true))
selenium.isVisible("link=Control Panel")
requestData.setText("")
focused == null
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
this.child(i)
lock.isLocked()
LOG.warn("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
Schedulers.computation()
Sets.newHashSet()
greaterThan(0L)
ONE_MINUS_DST_ALPA(7)
Log.error(e)
secondsElapsedRemaining > 0
case UNKNOWN: 
System.currentTimeMillis()
urlConnection.getContentLength()
uri.getPath()
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
mDataAuthorities == null
mRefreshView.getTop() < 0
AudioFormat.isEncodingLinearPcm(mAudioFormat)
String.format("Could not convert URL %s to URI",resourceUrl,e)
assertTrue(mDisabled.hasFocus())
HashMap<String,String>
langTool.check(paraText,false,JLanguageTool.ParagraphHandling.ONLYPARA)
module != null
xml.append(' ').append(adaptiveSimulcast)
JOINER.join("java_binary(","    name = '%s',","    srcs = glob([ 'com/example/generated/*.java' ]),","    main_class = 'com.example.generated.Main',","%s",")")
myVcsManager.hasExplicitMapping(filePath)
this(type,0); 
InvokerHelper.getMetaClass(obj.getClass()) == mc
mQuietEnable
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod()
runLayoutListener()
innerClass.addConstructor(PUBLIC_SYNTHETIC,new Parameter[0],null,null)
response.getStatus() < 400
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)
asList(DERBY,CUBRID,ORACLE,SQLSERVER,SQLITE)
private final SSTableScanner scanner; 
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
telephony.getForbiddenPlmns(subId,appType)
tracesFile.mkdirs()
Log_OC.wtf(TAG,"Unexpected intent " + intent.toString())
origin > other
drawable.getMinimumHeight()
"Requeuing shutdown because rootScanned: " + rootScanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
buildData.getWorkspaceDir()
ev.getAction() == MotionEvent.ACTION_DOWN
s3dir + ".dir"
List.class
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
@Override public Value emitBitScanForward(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   append(new AMD64BitManipulationOp(BSF,result,asAllocatable(value)));   return result; } 
formatTime(fullWifiLockOnTime / 1000)
assertThat(project.getMeasureIntValue("directories")).isEqualTo(3)
value instanceof Integer
Messages.getString(key,param1,param2)
Preconditions.checkArgument(root.isAbsolute())
Integer.valueOf(taskIdStr)
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
bindingMatch.toString()
disableForUser(what,token,pkg,mCurrentUserId)
Log_OC.e(TAG,"onSaveInstanceState()")
selenium.isVisible("link=Control Panel")
checkPojoMetaClass()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
cs[0].set0(r,_createFrame.real_range * rng.nextDouble())
cursor != consumer.get()
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
DEBUG_DRAG=true
/**   * Get a copy of geometry object. Geometry object is mutable. The returned object is therefore copied before returning.  * @return a copy of the geometry object  */ public Object getGeometry(){   if (geometry == null) {     try {       geometry=JTSUtils.ewkb2geometry(bytes,getDimensionSystem());     }  catch (    RuntimeException ex) {       throw DbException.convert(ex);     }   }   return ((Geometry)geometry).copy(); } 
JsonUt8Writer.string(buffer,strings[i])
Boolean.getBoolean(getDefaultStr(key))
selenium.isVisible("link=Control Panel")
logger.error("Could not commit session",t1)
onEvaluateInputViewShown()
assertEquals(result,Optional.of("abc"))
-balloon.getShadowBorderSize()
getAction().name()
synchronized (mAccounts) {   writeStatusLocked(); } 
weekRange.roll(Calendar.DATE,6)
new LFWLoader(imgDim,imageTransform,normalizeValue,useSubset).getRecordReader(numExamples,batchSize,imgDim,numLabels,labelGenerator,train,splitTrainTest,rng)
mNetworkInfo.getDetailedState() != networkInfo.getDetailedState()
getBinaryTupledSet()
mPulseCallback.onPulseFinished()
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
minZ != 0f && maxZ != 0f
StringBuffer buffer=new StringBuffer(); 
logger.info("license [{}] - valid",license.uid())
selenium.isVisible("link=Control Panel")
mListener.onInputUpdated(inputId)
buffer.getInt8()
c == Double.class
returnElement.createReadableBlock(readableBlock)
CharSequence message
parameter.getSimpleName()
localMessage == null
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection)
Strings.dup('C',52)
callExpression != null
Preconditions.checkNotNull(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
entry.getName().startsWith(resourcePath)
resultTabs.getItemCount() - 2
additionalProperties.remove(DATE_FORMAT)
grid(0).jcache(null)
IllegalStateException.class
ColorResources.getColor("tabTitleHighlight")
curComp.equals(cur)
samlServletDeployment(SalesPostAutodetectServlet.DEPLOYMENT_NAME,SendUsernameServlet.class)
_fragmentCollectionLocalService.deleteFragmentCollection(entryId)
StringBuffer buffer=null; 
topActivity != null
bitstampAuthenticated.getBitcoinDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
GridCacheAdapter<K,V>
private JsExprStmt mapExprStmt(Node node) throws JsParserException {   JsExpression expr=mapExpression(node.getFirstChild());   return expr.makeStmt(); } 
paused.set(false)
item == null
columns.size() == 1
offset(100.0)
ufsDeleter.delete(alluxioUriToDel,delInode)
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
resultEndpoint.expectedBodiesReceived("one","three")
-1l
LUMBRIDGE_HOME_TELEPORT=1
private final LinkMode linkMode; 
code.startLine("/* JADX WARNING: ").add(warn.getWarn())
active=true
-120
new AlertDialog.Builder(this,mThemeId)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
mService.mDisplayContents.get(i)
color.toLowerCase()
builder.createStructureViewModel()
attributes.getFlags()
lexerEngine.equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
isSupportsAlterColumnName()
klass.getDeclaredFields(false,declaredFields)
referenceStepMeta != null
scopeOwner != null
is(false)
mHidProfile.isProfileReady()
private TextView mAlarmStatusCollapsed; 
sendSigInt(myProcessUid)
assertThat(list.params()).hasSize(4)
checkPojoMetaClass()
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureHeight,this.mTextureWidth,this.mRotated)
sbn.getId()
session.save(model)
file(path).isDirectory()
Throwable e
user == null
mAttributes.getFlags()
type.restContentType()
qp.getExclusiveMinimum()
Context.newBuilder("java").setOption("java.AllowClassLoading","true")
!isAutomaticallyAdded()
logger.error("Channel error",cause)
conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY,Constants.DEFAULT_TFS_PERMISSIONS_UMASK)
meta.isUsingAuthentication()
mFlexItem.setAlignSelf(AlignSelf.AUTO)
LOGGER.error(msg.apply())
zoomScale(im,w,h)
USE_MACOSX_CALAYERS=false
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
TYPE_ATSC_M_H=0x00030200
getPolicy().getMaxBinaryMessageBufferSize()
new IndexWriter(dir,new WhitespaceAnalyzer())
List<IItem>
Thread.sleep(100)
@NonNull String bluetoothAddress
appendOrderByComparator(sb,"CalendarResource.",orderByComparator)
NullPointerException.class
mHwSession.getConfigFlag(flag,(int result,boolean value) -> {   halResult.value=result;   flagState.value=value; } )
new PerfBenchmarkDriver(perfBenchmarkDriverConf)
superClass == Object.class
StringUtils.isEmpty(formKey)
TransactionException e
String conf=nodeEnvironment.configFile().toString(); 
CompletableFuture<Boolean>
bookmarksFolderFinder.countBF_BE_ByG_F(groupId,folderId,queryDefinition)
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_CHROME_DRIVER_EXECUTABLE
pToX - pToY
"thing".equals(uri.getScheme()) == false
buildData.getWorkspaceDir()
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
interceptors.addFirst(newAInterceptor(a))
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
new QueuedThreadPool(3)
url.startsWith("http://") || url.startsWith("https://")
mSelectResponse != null & mSelectResponse.length > 0
8 - (digits - length)
CharSequence message
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
new FileNotFoundException()
pubSubDomain=true
EntityMapper.class
get(0,0,0,0,255,0,0.4f)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
disableForUser(what,token,pkg,mCurrentUserId)
auxString.lastIndexOf(",")
MicroblogsServiceUpgrade.class
data != null
sentencePartToEndOfError.length() - lastLineBreakPos
assertEquals(serdeC.getCodec().toString(),CodecFactory.xzCodec(i).toString())
LOG.error(e)
element instanceof ZLTextWord
LOG.isDebugEnabled()
inOrder.verify(mockAwareService).subscribe(eq(clientId),eq(subscribeConfig),any())
tw.release()
selenium.isVisible("link=Control Panel")
public static final JPQLTemplates DEFAULT=new BatooTemplates(); 
!delegate.exists(file)
LOG.trace("Terminating gRPC server")
status.isDirectory()
new AnnotationTransactionAttributeSource()
textChangeObservable.debounce(400,TimeUnit.MILLISECONDS,Schedulers.io())
dirs[i].isDirectory()
ZipSecurity.isValidZipEntryName(clsName)
mHandler.postDelayed(pae,timeout)
/**   * called by handle  */ public static Object coerceToString(Object o){   return o.toString(); } 
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
Assert.assertFalse(permissionChecker.isOmniadmin())
BeanPropertiesUtil.getObject(model,_keyProperty)
mAttributes.getFlags()
if (mCheckUnusedThrows) {   processImport(aAST); } 
indexOutURI.getPath()
CvsVfsUtil.findFileByIoFile(targetFile)
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
ApplicationManager.getApplication().getMessageBus().connect(ExternalSystemShortcutsManager.this).subscribe(KeymapManagerListener.TOPIC,myKeyMapListener)
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
i < 500
new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId))
logger.info(sb.toString())
ATLAS_MAP_ENTRY_FIELD_COUNT=4
TT
public SELF setColorOutput(boolean colorOutput){   operationParamsBuilder.setColorOutput(colorOutput);   return getThis(); } 
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)
new CommandFormatException("ModelNode request is incomplete",e)
pathParts[0] != null
LOG.error("Failed to get files from " + baseDirectory.getAbsolutePath())
AppLog.v(T.NOTIFS,"GCM Error: " + errorId)
jobExecutionContextClass.getMethod("setResult")
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
ParamUtil.getLong(actionRequest,"privateLayoutSetPrototypeId",privateLayoutSet.getLayoutSetPrototypeId())
new SettingsValidators.InclusiveIntegerRangeValidator(0,99)
A args
value.toLowerCase().contains(constraintLowerCase)
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
sendMessage(CMD_STOP_AP)
fragmentCollectionPersistence.filterCountByGroupId(groupId)
List<SourceFile>
logger.info("attaching ack callback to event")
graph.getNewNodes(mark)
ps.createRelationship(rel)
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
new L2Vertex(null,"",-1)
MAX_LOW_POWER_STATS_SIZE=512
WordPress.getCurrentBlog().getRemoteBlogId()
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
promises.addFirst(promise)
!userInfo.canHaveProfile()
synchronized (this) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
SCHEDULED_EXECUTOR_POOL_SIZE=2
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle
config(" ",0)
IOException e
log.debug("Error connecting to node {}",node,e)
new FileHyperlinkRawData("C:/Users/User/AppData/Roaming/npm/node_modules/karma-commonjs/client/commonjs_bridge.js",21,-1,3,s.length())
mExpandedDialog != null
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxPriorityQueueLength,priority,conf,server)
void headersEnd(int streamId) throws ConnectionError ; 
"Received communication message while stopping (will ignore) [nodeId=" + nodeId + ", msg="+ cacheMsg+ ']'
fluentSetters()
connection.getFields(transMeta.environmentSubstitute(wBaseDN.getText()),null)
UriBuilder.fromResource(StreamAlertResource.class).build()
new StackManager(new File(stacksCycle1),null,osFamily,true,metaInfoDao,actionMetadata,stackDao)
clipItem.getText()
List<File>
showNotifications.isNull()
Thread.sleep(2000)
eventDispatcher.loadCompleted(loadable.dataSpec,loadable.type,elapsedRealtimeMs,loadDurationMs,loadable.bytesLoaded())
context.getLong("hdfs.callTimeout",10000L)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).otherwiseIfEmpty(EMPTY_FORM_DATA)
lastPos != mTargetPos
" firstActiveTime=" + lastActiveTime
return false; 
log.severe("Error executing SQL " + statement)
artifact.getRootRelativePath()
mDataAuthorities == null
evaluate("pkg = package_name()").lookup("pkg")
RESOURCES_UNAVAILABLE_OR_UNSPECIFIED=44
mScreenBrightnessDarkConfig > mScreenBrightnessDimConfig
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())
new AffineTransform(mTextScaleX,mTextSkewX,0,0,1,0)
annotation.names()
mSettingsButton != null
encoder.writeString(event.getMessage())
state == SocketState.CLOSED
Object value
position < firstPos
PlatformDependent.getByte(index)
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
RuntimeException e
AbstractMethodError e
String.join("\n","pending changes to 'foo/bar/baz.xml'","pending changes to 'spam/ham/eggs.c'")
features.isKeyOrdered=false
mState == STATE_UNINITIALIZED
Platform.isAix()
button == MouseEvent.RELEASE
selenium.isVisible("link=Control Panel")
details.put(fileName,Long.toString(timestamp))
loaded.getLoaded().getConstructor()
driverFile.getLocalFile()
getValueController().updateSelectionValue(editedValue)
_typeSettingsProperties.toString()
Iterable<SkyKey>
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER
new IndexWriter(indexStoreA,new StandardAnalyzer(),true)
gen.addLoadImmediate(Register.R0,1234567890)
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory()
getPlayerPosition().z
getService().animateCollapse()
multipleTopologyChangeWorker()
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
getWidth()
mWindowManager.removeView(mContainer)
skipDoc >= doc
log.debug(e1.getMessage(),e1)
new ExecutorCompletionService<ProjectSegment>(executoru)
temporaryFolder.getRoot()
assertEquals(expectedPlan,actualPlan)
Flux.create(camelSink::set)
new CountryListLoadTask(mListener,null,null)
3L * 60 * 1000
await().atMost(5,TimeUnit.SECONDS)
searcher.get().getIndexReader()
trade.getTotal()
log.warn("Unrecognized Oracle client version at " + oraHome)
sentBytesCnt.intValue()
currentEditor.getScrollingModel()
Matrix.setIdentityM(mMatrixNight,0)
assertNull(store.getId())
ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
queryIdsSnapshot.remove(deadQuery)
types.get(channel)
maxAlongDimension.isRowVector()
Reflection.methodHandle(bigArrayField.getType(),"sizeOf",null)
registrar.checkExisting(metric)
!ElementsParser.isAlphaNumeric(ch2)
closeCode < 1001
new ServerSparseDoubleRow(rowId,startCol,endCol)
preResourcesElementDesc.getStoreFactory()
currentDateTime.minusSeconds(this.skewAllowance)
!withChildren
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
addError("URL [" + url + "] is not of type file")
XmppStringUtils.parseBareAddress(address)
Boolean.valueOf(getBoolean(value))
context.getAssets().addAssetPath(WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir)
assetDisplayPageEntry.getLayoutId()
a.getBoolean(R.styleable.View_fadeScrollbars,false)
targetClassLoader == null
selenium.isVisible("link=Control Panel")
e.getMessage()
message.getMessage().getExpiresInSeconds() * 1000
Extensions.getExtensions(MODULE_CONFIGURABLES)
!plugin.isEnabled()
Character.isUnicodeIdentifierPart(ch)
8 + 4
mGpsListener != null
is("/home/source")
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
-10f
GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))
klass.getDeclaredMethods(false,declaredMethods)
notifyManager()
log.error("Code expired : {}",code)
mMccMncs != null
getPath(renderRequest)
route.getDomain()
mBiometricUnlock.stopAndShowBackup()
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
treePrev.getTextLength() == 0
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver)
d.setAutoMirrored(true)
Exception e
IllegalArgumentException e
mService.addOrUpdateNetwork(config)
assertEquals(0,cursorList.cacheSize())
shortSizeDp > 600
mNwService.getInterfaceConfig(mInterfaceName)
Log_OC.wtf(TAG,"Incorrect action sent " + intent.getAction())
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentIoFile)
set(object,value.intValue())
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
this.evaluator.prepareLeftObject(handle)
r - scrollY
RemoteException ignored
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
assertThat(context.getExtensions()).hasSize(46)
from > to
mGpsListener != null
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,21,getLayoutLog())
InputHelper.capitalizeFirstLetter(manufacturer)
display.equals(taskRect)
c.getName().equals(ECLIPSE_PARSER_CLASS_NAME)
fragmentServletDefinitions.put(servletName,entry.getValue())
idleConnectionTimeout - nettyResponseFuture.getLastTouch()
public static BuildParameters addBuildParameterStiStrategy(BuildParametersBuilder builder,String image){   return builder.withNewStrategy().withType("STI").withNewStiStrategy().withImage(image).endStiStrategy().endStrategy().build(); } 
assertFalse(bulkResponse.hasFailures())
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
details.put(CONFIG_HASH_KEY,currentConfigHash)
mBiometricUnlock.stopAndShowBackup()
selenium.isVisible("link=Control Panel")
firstPos != mTargetPos
animateHeader()
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
grantRuntimePermissions(globalSearchPickerPackage,MICROPHONE_PERMISSIONS,true,userId)
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()))
rightTuple.setStagePrevious(rightTuple)
logger.error(e)
System.nanoTime()
DEFAULT_HEAP_LIMIT_CAP=500
machine.getConfig().getLimits().getRam() * 1024 * 1024
recipe.hasKey("energy",6)
amount.precision()
createArtifact("b","1.0-SNAPSHOT")
queryIdsSnapshot.remove(deadQuery)
WordPress.getCurrentBlog().getRemoteBlogId()
statesByName.put(name,state)
timeout=10000
assertEquals(12,definitions.size())
new RemoteViews(mBuilder.mContext.getPackageName(),R.layout.notification_material_media_action)
gen.generateParser()
indexSettings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
mAccessibilityController.isTouchExplorationEnabled()
setProgress((int)progress,true)
payload.intPayload[2]
count=0
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
userModelFile != null
app.getSQLiteAPI().getOrCreateDatabase(DB_NAME,true)
Thread.sleep(5000)
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)
(XBeanBrokerService)context.getBean(name)
nextOption()
setExpectedMessageCount(messageCount)
" firstActiveTime=" + lastActiveTime
e.getCacheHits()
_log.error(ioe,ioe)
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).expectComplete()
type.getConstructor()
{4,5,5,11,6,5,7,5,11,11}
incomingMessage.getMessagePayloadByte(0)
request.mConnectionID != null
customization.getPaletteAnchor()
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK
private final StringBuffer tmpSb=new StringBuffer(); 
Boolean.valueOf(getOptional("kylin.htrace.trace-every-query","false"))
private FilteringClassLoader getSystemFilteringClassLoader(DefaultClassLoaderFactory defaultClassLoaderFactory,boolean java9compatible){   FilteringClassLoader.Spec filterSpec=new FilteringClassLoader.Spec();   if (java9compatible) {     filterSpec.allowPackage("com.sun.tools");   }   return defaultClassLoaderFactory.createFilteringClassLoader(getSystemClassLoader(),filterSpec); } 
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
GroovyJavaSecurityTestsSuite.suite()
scheme.equals("tel")
mBoundServices.isEmpty()
canPerformRequestOverConnection(mAccessibilityViewId)
timer.isActive()
size * 1.75f
account.getExternalKey()
cs[i].at0(row)
isVideoScalingModeSupported(mode)
InitialFactImpl.class
consumer.verifySignatureWith(jws)
supressTrailingZeroElements == false
mWidth - edgeWidth
saveCrendentialsInSmartLock()
readOwners.size()
AnnotatedElementUtils.getAnnotationAttributes(method,annotationType)
sshClient.connect(sshHost)
config.isConfigurationSection("socialspy-commands")
onDetachedFromWindow()
SessionErrors.add(actionRequest,e.getClass().getName())
found.size() == 1
ti > 0
handleDnsConfigurationChange(networkType)
item.exists()
secConn != null
a.getDimensionPixelOffset(attr,0)
c.getDeclaredConstructors()
new IndexWriter(directory,autoCommit,ANALYZER,true)
headerName.startsWith("proxy") || headerName.equals("keep-alive")
element.getChildByName("properties")
mValues[7]
new int[95]
LOG.error("Could not parse syslog message. Not further handling.",e)
getService().hasPrimaryClip()
mWasActivatedOnDown || !mNeedsDimming
w.mAttachedHidden || !w.isReadyForDisplay()
replayStart=ISODateTimeFormat.dateTimeParser().parseDateTime(replayTimeIso)
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
1
!usingDrawingCache
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
result.getState() != Promise.State.PENDING
dest.writeLong(mSubId)
ddmStructureService.fetchStructure(groupId,ddmStructureKey)
getPreferences().setProperty(key,value)
drawGeometry(g)
new AMQPProducer(configuration,metricRegistry)
new ReformatCodeProcessor(context.getProject(),context.getFile(),xmlTag.getTextRange(),true)
tree == null
return maxPreferredOffsetToUse; 
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
typeLength == 0
super.nodeSettings(nodeOrdinal)
i <= 10
tag_values.getIdAsync("web03")
taskOutput.getState().isDone()
holder == null
loaded.getLoaded().getConstructor()
VoiceInteractionManagerService.this
PVP_BBOUNTY_HUNTER_INFO(WidgetID.PVP_GROUP_ID,WidgetID.Pvp.BOUNTY_HUNTER_INFO)
buildJSLoaderModulesServlet()
flexItem.getMarginEnd()
URI != null
owner == null
mUserManager.getUsers()
new Paint()
aClass.isInterface() || aClass.isAnnotationType()
endpoint.getCurrentThreadsBusy() > limit
new EclipseSettingsWriter(getLog()).write(projectBaseDir,outputDir,executedProject)
new ByteBuddy().subclass(Baz.class).method(named("foo")).intercept(MethodDelegation.to(new Qux())).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
fulfillmentGroupItemWrapper.wrapDetails(fgi,request)
anyInt()
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
StepVerifier.create(Mono.just(0).then(Mono.just(1)).then(Mono.just(2))).expectNext(2).expectComplete()
longSize >= 800
IllegalArgumentException e
mPowerManager.isScreenOn()
showBadnessTrace("It was not meant to be","A serious problem happened during startup. Please report:\n" + "http://github.com/processing/processing/issues/new",e,true)
new IncorrectOperationException()
this.ctx.getApplicationContext()
ArrayList<Destination>
s.onError(new NullPointerException("The future produced a null value"))
task.getTimerStart() != null
UrlUtils.isSpecialUrl(currentTab.getUrl())
context.formatSeparator()
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,FALSE)
storedOverlayInfos.get(i)
mapper.getJsonFactory()
mPlayer.getCurrentPosition() * 1000
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]))
new RuntimeException("namespace invalid for namespaceClassName: " + namespaceClassName)
HDR_TYPE_NAK=0x01
Messages.getString("Spoon.Dialog.SaveChangedFile.Message")
new LayerView(this,0xff00ff00)
new IndexWriter(dir,new SimpleAnalyzer(),true)
runGradle(1,"error","clean","flywayMigrate")
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
SkylarkDict<K,V>
fraction * (nextValue - prevValue)
ExoPlayerFactory.newSimpleInstance(host,trackSelector,new DefaultLoadControl(),drmSessionManager)
fixes != null
assertEquals(2000,timeout)
mSupportsSpeed ? 1 : 0
Boolean.valueOf(this.getOptional("kylin.query.security.table-acl-enabled","true"))
logger.info("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
currentUser.observable()
log.error("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
mediaChunks.get(1).getFirstSampleIndex() == sampleQueue.getReadIndex()
center.getY()
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
iteration == 0
/**   * The tested prototype instance  */ private final Prototype testedPrototype; 
PersistentTask<Params>
selenium.isVisible("link=Control Panel")
parentGroupId == 0
executeRunnableDismissingKeyguard(runnable,null,false,true)
Manager.this.readyState == ReadyState.OPEN
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
runUTRunner(testDir.getPath(),testFile.getPath())
ZonePlannerMapDataServer.instance.loadChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
c.deactivate()
file.flush()
new DefaultConfiguration(new DataSourceConnectionProvider(datasource),null,null,null,null,null,null,null,null,null,dialect,settings,null)
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
tracesFile.mkdirs()
etp.setText(s)
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
si.targetPermissionUid >= 0
request.getRequestURI()
y == 0
m != null
getActivePreferenceStore()
new CamelNodeState(endpoint.getSingletonId(),System.getProperty("karaf.name"))
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
Key[]
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU)
Response.ok()
getLogger().info("Scanning for extensions: " + mavenProject)
layout.setRefreshingLabel(label)
!c.moveToFirst()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
mConferenceById.containsKey(callId)
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),internalCallContext,invoiceConfig)
logger.debug("Received MyQ  JSON: {}",dataString)
instructionForm.getId()
session.prepare(sql,true,false)
new SslConnection(bufferPool,getExecutor(),endPoint,engine)
from > to
sanitaryName.equals(c.getPrettyName())
log.debug("PID contains identifier with no assigning authority")
actionBuilder.setStdout(BuildEventStreamProtos.File.newBuilder().setName("stderr").setUri(pathConverter.apply(stderr)).build())
new PackageConfig()
a.getFloat(attr,0)
instructions.setPeoplePropertyToValue("enabled_new_editor",true)
getKeyFromGrant(alias)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
Slog.e(TAG,"Unable to bind ActivityRecognitionProxy.")
log.info("Error registering servlet with jmx " + this)
@Nullable
i <= MAX_AUDIO_PORTS
StreamUtil.copy(inputStream,out,remaining)
getRight() + getPaddingRight()
new MaxCandidatesCondition(10)
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase)
cnt=1
final TestActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
DiagnosticType.warning("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
getAttributes(link)
new DefaultAsyncHttpClient()
pw.println(ps.getInstantApp(user.id))
baseLanguage == StdLanguages.HTML
Thread.sleep(5000)
Set<UidRange>
c.toArray()
file.isHidden()
p3.isTerminated() == false
private final FixedNode node; 
!isDirectPickup(block,blockDamageModifierComponent) && !inventoryManager.giveItem(event.getInstigator(),item)
!isSeekable()
SystemProperties.getInt("ro.cdma.timetoradiorestart",20000)
scheduleRemoveStartingWindow(wtoken)
useExpires.setSelected(false)
this.restTemplate.postForObject(webhookUrl,message,Void.class)
Integer.valueOf(stackIdStr)
moduleBuilder.addSourceRoot(SOURCE_PATH)
mHeader.performClick()
counter >= max
targetType.getConstructor()
isDeprecated(constructor)
loaded.getLoaded().getConstructor()
inMessage.getExchange().getInMessage()
selenium.isVisible("link=Control Panel")
JavaSmartCompletionContributor.processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){   public void consume(  final PsiType type){     addExpectedType(result,type,identifierCopy);   } } )
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
new Paint(Paint.ANTI_ALIAS_FLAG)
DLFileEntryTypeFinderUtil.countByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
getRandom()
c.getLiquid().amount != 0
type.getConstructor()
input.isSpecifyFormat()
mAuthorities.get(i)
realm.assertThread()
meta.getReferenceStepName()
MAX_IMAGE_DIMEN=1280
Class.forName(line)
ALPHA
obj.getAcceptableTokens()
Set<Long>
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
httpResponseCode == 204
resource == null && resource.length() == 0
properties.contains(STRING_RECENT_SEARCHES)
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
for (Object eachToSelect : currentElements) {   if (!currentElements.contains(eachToSelect)) {     runSelection=true;     break;   } } 
type == Object.class
stringToSearch != null
loaded.getLoaded().getConstructor()
anchorView.getWindowToken()
ts.getJobId() == jobid
returnJClassRef.dotclass()
host.getAddress()
sm.getString("introspection.classLoadFailed")
activeFrom.getTime()
adminClient.describeConsumerGroup(APP_ID + testNo)
client.pods()
mTfs.delete(mTfs.open(new TachyonURI(dirPath)))
i <= 0
s1.isUnsubscribed()
params.keySet()
selenium.isVisible("link=Control Panel")
startBounds.width()
DiagnosticGroups.registerGroup("functionParams",FunctionTypeBuilder.OPTIONAL_ARG_AT_END)
new RuntimeException("should execute connector.connect() first")
verifyNothing(decoder,text("359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"))
Simple.of(Tuple.class)
dest.writeLong(mSubId)
mAccountHeader != null
DEBUG=true
parsedResult.getSqlType()
blockRoot.getToken().getType() == Token.LEFT_CURLY_BRACE
IccUtils.gsmBcdByteToInt((byte)0x8c)
capOpSet != null
statusBar.setRedraw(true)
new Vector3f().interpolate(point1,point2,0.5f)
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
errorMessage.endsWith(" is deprecated")
ds.getFeatureMatrix()
"streams:" + filter
log.info("BouncyCastle not registered, using the default JCE provider")
JBUI.Borders.empty(10,0)
FileSystemUtils.exists(paths)
assertEquals(0,beanInfo.getOperations().length)
Log.wtf(mTag,"Adjusting remote volume without a controller!")
decoder.readOutbound()
@Override public void setting(int identifier,long value) throws ConnectionError {   remoteSettings.set(identifier,value); } 
newBase.isEmpty()
cf.getCompressionType() == null
selenium.isVisible("link=Control Panel")
telephony.isOffhook()
fragmentEntryPersistence.filterFindByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
reducerCount=5
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,startNode,relDirection)
mToolbar.setTitle(title)
curArticle.getResourcePrimKey()
onDetachedFromWindows()
Watcher<Route>
request.mConnectionID != null
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=2
message.getType() == Message.TYPE_FILE
XMLInputFactory::newFactory
null == file
lastFilterIndex == -1
Realm.getColumnIndices()
LOG.error("Can not get java doc HTML text from autocomplete context menu in editor")
UserHandle.getCallingUserId()
e.getMessage()
LOGGER.debug(msg.apply())
status != 0
clusterGlobalLock.readLock()
mock.expectedMessageCount(1)
appInfo.metaData.getString(key)
Math.max(1 << (pulseCount - 1),64)
wagonManager.getArtifact(artifact,repo,null,false)
serviceDataUuid == null
parent.getChild(iconfile)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
mConnector.execute("volume","format",vol.id)
type.getConstructor()
Exception e
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
mMncStr == null
Assert.assertEquals(122L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
mImm.hideStatusIcon(mToken)
DataRow row=dataTree.findOne(new KeySearchRow(key.hashCode(),key,0)); 
mLatestResult.isSslRecoverableException()
public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
JournalContentWebUpgrade.class
MIN_PORT_DEFAULT_VALUE=5000
new Paint()
mbMessage.isDiscussion()
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
typeArg != null && TypeConversionUtil.erasure(typeArg).equalsToText(CommonClassNames.JAVA_LANG_OBJECT)
new PluginInfo("_plugin","_plugin_desc","_plugin_version","_plugin_class",Collections.emptyList(),false,false)
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
Long.valueOf(dateStr)
Environment.getRootDirectory()
/**   */ public class S3SnapshotRestoreOverHttpsTest extends S3SnapshotRestoreAbstractTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","https");     return settings.build();   } } 
TypeEvalContext.fast()
!MediaFile.isVideoFileType(type.fileType)
args.length == 0
!uri.getScheme().equals(scheme)
this.isDefaultAutoCommit()
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
attributes.getFlags()
StatBuckets.prettyUptime(secs)
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
public void set(int parameterId,long value) throws ConnectionError {   if (log.isDebugEnabled()) {     log.debug(sm.getString("connectionSettings.debug",Integer.toString(parameterId),Long.toString(value)));   } switch (parameterId) { case 1:     setHeaderTableSize(value);   break; case 2: setEnablePush(value); break; case 3: setMaxConcurrentStreams(value); break; case 4: setInitialWindowSize(value); break; case 5: setMaxFrameSize(value); break; case 6: setMaxHeaderListSize(value); break; default : log.warn(sm.getString("connectionSettings.unknown",Integer.toString(parameterId),Long.toString(value))); } } 
getSelectedColor(ctx)
settings.readLPw(null)
keyCnt=100
keymapManager == null
assertSizeEventually(COUNT,map)
uid > 0
stack.get(stack.size() - 3).longValue()
StringBuffer txt=new StringBuffer(); 
RecipeRegistryProxy.addRecipe(ItemStackUtils.clone(LINGERING_POTION_POISON_LONG,3),ItemStackUtils.clone(SPLASH_POTION_POISON_LONG,3),REAGENT_SPIDER_EYE)
getTestName(true)
Delete_dialogLayout.findViewById(R.id.ll_location)
ent.getValue().intValue()
!BuildCraftCore.DEVELOPER_MODE
panel.attachTo(viewPort,guiViewPort,overlayView)
indexNameExpressionResolver().concreteIndices(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
stmt.executeQuery(sqlCommand)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
calendar.getTimeZone().getDSTSavings()
assertLeftRightCategory(6,category1c)
uri.getSchemeSpecificPart()
new FallbackKeySettings(_settings,_fallbackPaths)
Object data
selenium.isVisible("link=Control Panel")
buffer.setFlags(C.BUFFER_FLAG_DECODE_ONLY)
input.getPath()
giveFieldBinding(s)
logger.debug("Requsting URL {}",url)
lock.isLocked()
TelephonyManager.getDefault().getPhoneType()
getTelecomService().hasVoiceMailNumber(accountHandle)
mAuthorities.get(i)
builder.timeValueField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
childrenExpanded ? mDividerHeight : mChildPadding
selenium.isVisible("link=Control Panel")
publishedEndpointUrl != null
scores.getAlgorithmName()
t instanceof EntityExistsException
new RandomIndexWriter(random,dir)
InetAddress.getLoopbackAddress()
playable.localFileAvailable()
GL20.glUniformMatrix3(location,transpose,value)
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
waitForClose(50000)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,loadedMethodType))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
loaded.getLoaded().getConstructor()
columnTypes[column] == INT
DataFormat.PAYLOAD == message.get(DataFormat.class)
StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))
striped.get(key).readLock()
DBFactoryUtil.setDB(getDBType())
annotationHelper.printError(element,"%s annotated element should have an empty constructor")
Preferences.setLong(ActFmPreferenceService.PREF_USER_ID,0)
String result=""; 
selenium.isVisible("link=Control Panel")
localizedTextUtil.clearDefaultResourceBundles()
new TextPaint(Paint.ANTI_ALIAS_FLAG)
assertThat(measures.get("files")).isEqualTo(2)
!allowTrailingSlash && value.endsWith("/")
loadingResult.getPackageRoots()
Thread.sleep(5000)
TextView frame
mProviderRequest.reportLocation && !mDisableGps
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
findAvailablePort(1000,10000)
!_parms._intercept
LocalFileSystem.getInstance().findFileByPath(filePath)
binary.getName()
selectedPageLabel_.removeAttribute("selected")
animation == mHeaderOutAnimation
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
!Arrays.equals(delta,pending.delta)
context.addStep(prepareStep,NewOperationContext.Stage.MODEL)
new ServerPartition(partitionKey,rowType)
assertEvaluate(buildFile).lookup("txts")
Trans == TRANSPOSE
ScanResult.is24GHz(frequency)
selenium.isVisible("link=Control Panel")
mWindowManager.getDefaultDisplay().getMetrics(metrics)
latch.countDown()
StateManagementUtils.createEndForkedExecutionMojoBinding()
edge.getUpNode()
mHandler.removeCallbacks(pae)
info.getName()
return ingressStreamId; 
TelephonyManager.getDefault().getPhoneType()
shouldPause.and(this::shouldPauseOnTargetNodeJobsCounter)
type.getConstructor()
analysis.getType(windowFunction)
new Window(window,begin,end)
si.intent == null
MeasureSpec.makeMeasureSpec(MeasureSpec.EXACTLY,myHeight)
new NativeAllocationRegistry(nativeGetNativeFinalizer(),nativeSize)
mpi > -135
buf.openElement("conference")
maxDistance=20
!mIsRecentsShown || !mIsPipFocusedInRecent
LOG.info("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
messenger.sendCode(res)
makeName(verb,dimensionPrefix,parentName,binaryType,target)
request.mConnectionID != null
FloatBuffer target
context.getRuntime().newString(ERR_INSECURE_SET_INST_VAR)
typeSettingsProperties.toSortedString()
viewable=true
assertThat(System.currentTimeMillis() - start).isGreaterThan(2000)
logger.info("reading file from {}, repairedAt = {}",session.peer,repairedAt)
"Got ACTION_DEVICE_CHANGED from unexpected device: " + mGBDevice
arrayContaining("foofoobar","foofoo")
eventsDone.remove(event)
new StringBuilder()
n.getNodeData().x()
i >= graphs.size()
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
hgraph.getMutualDegree(n)
recommendArrayListByUser.size() > 0
block == null
ConstantNode.forInt(load.displacement(),graph)
System.arraycopy(points[0],0,startPoints,0,pointsNumber)
getTestName(false)
tw.release()
IBackupManagerService svc=mService; 
Color.fromRGB(0xEB8844)
assertEquals(12,md.references().size())
GridHadoopTestUtils.jsonToMap(restCfg)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0)
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
LOG.error(e,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
pyClass.getQualifiedName()
mapActivity.getMapActions()
mView.post(mAnimationStarter)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
FRAME_STATS_COUNT=14
new int[296]
buffer.getInt8()
mPolicy != null
mWm.addAppToken(0,null,0,0,0,false,false)
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true)
checkNotNull(resource,"Resource should not be null")
cnt=0
new Paint(Paint.ANTI_ALIAS_FLAG)
new AlertDialog(P.mContext)
loaded.getLoaded().getConstructor()
getSelectedColor(ctx)
none()
responseHeaderRegex == null
public static TitledBorder createTitledBorderBoldWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),0,1,new Insets(5,0,10,0)); } 
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Boolean.getBoolean("java.awt.headless")
promise.setSuccess()
setZrtpEncryptionToDescription(mediaType,description,null)
XMLRPCClient.parseXMLRPCResponse(is)
assertEquals(43.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
selenium.isVisible("link=Control Panel")
@Override public Value emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new SPARCArrayEqualsOp(this,kind,result,load(array1),load(array2),asAllocatable(length)));   return result; } 
Long.valueOf(value)
public static ArrayValue dateTimeArray(ZonedDateTime[] values){   return new DateTimeArray(values); } 
DiagnosticFactory0.create(WARNING)
Assert.assertEquals(transitions.size(),3)
e.getMessage()
static public final PowIn fastSlow=pow2In; 
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
XContentType.fromRestContentType(values[0])
canvas.clipRect(0,0,tabWidth,tabHeight)
err != 0
FileUtil.findFirstThatExist(home + "/build.txt",home + "/Resources/build.txt",home + "/community/build.txt")
fill
LanguageLevel.forElement(element).isPy3K()
new JAXWSHttpSpiTransportFactory(bus,context)
selenium.isVisible("link=Control Panel")
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
PsiTypesUtil.isDenotableType(psiType,interfaceMethod)
Throwable ex
layerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
fluentSetters()
SVID_SHIFT_WIDTH=7
curComp.equals(cur)
Maps.newHashMap()
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
swapEnabled
StorageService.instance.initClient()
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
tracesFile.mkdirs()
ProblemDescriptor descriptor
Collection<Fragment>
StudyUtils.getPatternFile(taskFile,oldName)
XmppStringUtils.parseBareAddress(userJID)
IndexReader.open(userindex,true)
assertEquals(2,atl.size())
assertSame(Locale.GERMANY,format1.getLocale())
origin.realComponent().doubleValue() >= other
System.lineSeparator()
reviewer.putExtra("deckFilename",deckFilename)
Assert.assertNotNull(text)
131 + (USE_OLD_HISTORY ? 1000 : 0)
!match && compareCompat
_freemarkerEngineConfiguration.getResourceModificationCheck()
entry.getValue().getManagementInterfaceMinorVersion()
Integer.valueOf(_ANALYTICS_GATEWAY_PORT)
CORRELATION=10
CodeStyleSettingsManager manager
mWm.addAppToken(0,null,0,0,0,false,false)
interval < 0
sa.getInt(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED)
NettyAsyncHttpProvider.class
new Paint(Paint.ANTI_ALIAS_FLAG)
log.isWarnEnabled()
createHalf(buffer.length(),init)
log.error("Wrong client secret for service {}",service)
previousAttribute.compareTo(attribute)
getObjectMapper().reader(clazz)
new CompoundShelfFileProcesor(streamProviders,configPath)
blueprintLibraryAchievement=new Achievement("achievement.blueprintLibrary","blueprintLibraryAchievement",15,2,BuildCraftBuilders.libraryBlock,builderAchievement).registerStat()
item.getType() == DownloadActivityType.NORMAL_FILE
"thing".equals(uri.getScheme()) == false
queryProcessor.curJobRunning.get() == 0
i=1
plan != null
Parser.xmlParser()
Mockito.verify(mRMClient).start()
containerLats.length - 2
loaded.getLoaded().getConstructor()
SampleCacheApplication.class
FileTemplateManager.getInstance()
policy_empty == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
info.getSubscriberIdForSubscriber(subId)
gs._mb.makeModelMetrics(GLRMModel.this,adaptedFr)
getters.length >= 0
task.stack != tr.stack
type.getConstructor()
stateChangedLatch.await(1,TimeUnit.SECONDS)
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
m.execute()
mKey.equals(other.mKey)
responseBodyRegex == null
LifecycleListener listener
System.currentTimeMillis()
maxRows > 0
loaded.getLoaded().getConstructor()
(previousLine.endsWith(" =") || previousLine.endsWith(" ->")) && line.endsWith(StringPool.OPEN_PARENTHESIS)
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
fingerId == 0
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureWidth,this.mTextureHeight,this.mRotated)
ENABLE_AGGREGATED_IN_MEMORY_STATS=true
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564
previousDataInputs == null
telephony.isRadioOn()
tok[2]
new StringBuilder(730)
wordStart == index
KafkaEightDruidModule.class
if (DEBUG_VOL) {   Log.d(TAG,"onSetA2dpSinkConnectionState btDevice=" + btDevice + "state="+ state); } 
Duration.between(created,Instant.now()).toMillis() * 1000
sizeNeeded >= items.length
CollectionUtils.filter(upSaleProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((UpSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
id=15848
assertEquals(129,blockHashesMessage.getBlockHashes().size())
return true; 
nextOption()
redisson.<Integer>getBucket("executed2")
new PatreonRealm()
app.isDispatchThread()
MAX_ITEMS=1000
mService.enableNetwork(netId,attemptConnect)
!isChecked
e.nextElement()
Integer.valueOf(displayIdStr)
StringBuffer sb=new StringBuffer("["); 
message.size()
list.get(3).dist=2274
addDaysAndCheckForCompletion(5,NextEvent.PAYMENT_ERROR)
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
new Paint(Paint.ANTI_ALIAS_FLAG)
ctx.getOuterContext()
UserHandle.getCallingUserId()
CodeSigning.hasValidSignature(context.getProcessExecutor(),bundleBinaryPath)
mEnterTransformation.printShortString(pw)
event.getX()
t3.getSize()
blockManager.processReport(registration,reports[r].getStorage(),storageContainerList,context,r == (reports.length - 1))
AppLog.v(T.NOTIFS,"GCM Error: " + errorId)
type.toUpperCase(ENGLISH)
assertThat(metrics).hasSize(152)
Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB
mbRootMessage.getMessageId()
Key<Integer>
@NotNull DfaMemoryStateImpl createClosureState(); 
ViewCompat.getScaleX(itemView)
JMeterUtils.getPropDefault(ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_PREFIX + ReportGeneratorConfiguration.KEY_DELIMITER + "statistic_window",200000)
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
hasPermission(permission)
note2.id()
filename.startsWith(ext)
DECK_VERSION=64
identifier.toString()
this.setTouchAreaBindingEnabled(true)
!pageInfo.isELIgnored() && reader.matches("#{")
isFetchActive=false
platformVersion < MNC
mBottomLeftStrip=mContext.getResources().getDrawable(resId)
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
LocalFileSystem.getInstance().findFileByPath(filePath)
Nd4j.rand(200,200,max,min,Nd4j.getRandom())
LOG.error("Cannot resolve the host name for " + regionAddress + " because of "+ e)
!tableLayoutHandle.getPartitions().isPresent()
super.getLikeProvider(path)
allowCredentials=false
"Unknown id: " + mCurMethodId
"Unknown or Unsupported Option '" + value + "'"
attribute.equals("\\Spam")
Integer.valueOf(stackIdStr)
logger.error("Configuration for influxdb not yet loaded or broken.")
mService.subscribe(clientId,subscribeConfig,new WifiAwareDiscoverySessionCallbackProxy(this,looper,false,callback,clientId))
Slog.e(TAG,"Unable to bind ActivityRecognitionProxy.")
runtimeDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
!readThrough || skipVals || (key != null && !cctx.affinity().backupsByKey(key,topVer).contains(cctx.localNode()))
new BindException(concept,"concept")
subProperties.put(subName,value)
GL11.glGetTexParameter(target,pname,params)
finish()
mRingingCallState != other.mRingingCallState
this.setTouchAreaBindingEnabled(true)
ArraysUtil.merge(nodes1,nodes2)
hasClassAnnotations()
3 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=10
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
klass.getDeclaredFields(false,declaredFields)
new StatisticsUnit(unitNumber,myKeys)
JspUtil.makeXmlJavaIdentifier(varName)
mock.message(0).arrives().between(7,9)
case 9: 
printTypeWithoutBounds(out,type)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
vespaPortBase + 91
user.getCompanyId()
graphVersion.incNodeVersion()
mLabelView != null
mMediaRouter.addCallback(MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY,mMediaRouterCallback)
Long.valueOf(attrValue)
m.getSize()
oldConfig.densityDpi != newConfig.densityDpi
getTimeout()
BUTTON_QUIESCENT_ALPHA=0.6f
new SoftReference(result)
out.dialect.supportsWindowFunctions() && !RexOver.containsOver(project.getProjects(),null)
bindServiceAsUser(serviceIntent,conn,BIND_AUTO_CREATE | BIND_NOT_FOREGROUND,UserHandle.CURRENT)
executor.scheduleWithFixedDelay(this,period,period,unit)
StringBuffer result=new StringBuffer(); 
JournalWebUpgrade.class
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.title"),portletModel.getPortletId())
Boolean.valueOf(attrValue)
mMncStr == null
buff.remaining()
new CSVFilter(lines)
s.count()
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
new CompositeException(e,t)
ASHMEM_SIZE=256
new BehaviorSubjectSearchEmitterFragment()
extensionManager.getProxy()
mContext.sendBroadcast(intent)
GroovyJavaNonSecurityTestsSuite.suite()
selenium.isVisible("link=Control Panel")
Thread.sleep(5000)
getProperties().requestCachingEnabled()
Integer.valueOf(attrValue)
callTimeoutMs=5000
lp.onResolveLayoutDirection(layoutDirection)
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
updateSubtree(parentNode)
ticket.notify()
exchange.getProtocol().equals("https")
contentType.getCharSet()
gzipHandler.setMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
Foundation.NSLog("[error] " + tag + ": "+ message)
Exception e
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
prefs.getBoolean(AUTO_START,true)
Objects.deepEquals(mServiceDataUuid,other.mServiceDataUuid)
!userInfo.canHaveProfile()
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
side.toString()
mCurrentVrService == null
!addressStreet1Present
myLeftIndex == 1
mAppToken.hasContentToDisplay()
assertNotSame(-1,"Cannot find text '" + element + "' in file "+ path)
commandExecutor.writeAsync(getName(),RedisCommands.DEL_OBJECTS,getName(),getTimeoutSetName())
ClassFileVersion.forCurrentJavaVersion()
data + END
specBuilder.setDigests(KeyProperties.DIGEST_NONE,KeyProperties.DIGEST_MD5,KeyProperties.DIGEST_SHA1,KeyProperties.DIGEST_SHA224,KeyProperties.DIGEST_SHA256,KeyProperties.DIGEST_SHA384,KeyProperties.DIGEST_SHA512)
field.tokenStreamValue()
public DerivedBuilder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
IBackupManagerService svc=mService; 
getDeltaRequest().execute(this)
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
mAppToken.hasContentToDisplay()
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
new ScoreIterationListener(1)
loaded.getConstructor()
ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
log.debug("Error while closing command context",exception)
container.getTimeFormat().equals(TimeFormat.DATE)
data == null
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0)
Optional.of(resourceManagementScheduler)
loaded.getLoaded().getConstructor()
logger.info(String.format("will wait %dms before reconnect attempt",delay))
new IOException("TEST")
activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient).length > _taskInfo._params.maxActivePredictors
attachment.getDataUri() == null
conn.getResponseCode() == 302
colors.getResourceId(i,0)
loaded.getLoaded().getConstructor()
DEBUG_DRAG=true
List<MutableLongValue>
LOGGER.debug(e.getMessage(),e)
mHandler.removeCallbacks(pae)
VectorizationContext.isStringFamily(outputType)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers2.kt")
POLL_PERIOD=100L
!mAwake
WordPress.getCurrentBlog().getRemoteBlogId()
primaryServer.getClass()
selenium.isVisible("link=Control Panel")
canvasAWT != null && canvasNEWT != null
number.length()
bucket.exists()
valueFormatter != null
StringUtil.compareVersionNumbers(version,OS_VERSION)
sourceEdgeTextData.getText().isEmpty()
exp instanceof ConnectTransportException
randomInt()
LOG.trace("Should have transformed " + managedClassName + " but didn't")
typeSettingsProperties.toString()
isEmpty(s)
url.addArgument(selectName,value)
setDeploymentStack(contextValue)
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
synchronized (mAccounts) {   writeStatusLocked(); } 
XMLInputFactory.newFactory()
addDaysAndCheckForCompletion(1)
del("*:*")
JNIExceptionHandlerReturnNullWord.class
!mMetaDb.isOpen()
typeDeclaration.isNovel()
Lists.newArrayList('*','[',']','(',')',',','+')
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
new UserDao(dbTester.myBatis(),system2)
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
new IntRangeValidator(1)
upnpService != null
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),sessionProxyCallback.capture())
selenium.isVisible("link=Control Panel")
DumpUtils.checkDumpPermission(mContext,TAG,pw_)
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
websocketComponent.setMaxThreads(11)
new ByteSizeValue(50,ByteSizeUnit.MB)
path.indexOf(Constants.JAR_EXT)
mGpsListener != null
resolveName(resolvedName.toString(),nestedParameter,exchange).map(arg -> {   if ("".equals(arg) && namedValueInfo.defaultValue != null) {     arg=resolveStringValue(namedValueInfo.defaultValue);   }   arg=applyConversion(arg,namedValueInfo,parameter,bindingContext,exchange);   handleResolvedValue(arg,namedValueInfo.name,parameter,model,exchange);   return arg; } ).otherwiseIfEmpty(getDefaultValue(namedValueInfo,parameter,bindingContext,model,exchange))
assertQ("test date statistics values",req,"//long[@name='count'][.='2']","//long[@name='missing'][.='1']","//date[@name='min'][.='1970-01-02T10:17:36Z']","//date[@name='max'][.='1970-01-12T10:20:54Z']","//date[@name='sum'][.='1970-01-13T20:38:30Z']","//date[@name='mean'][.='1970-01-07T10:19:15Z']")
req.startAsync()
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,true)
getSelectedColor(ctx)
Log_OC.wtf(TAG,"Server check tried with OperationService unbound!")
a.getFloat(attr,0)
version.equals(VERSION_1_4)
name == null
it.next().hasFinished()
status.getCode().ordinal()
block.getZ() + 1.5
@Deprecated protected static <T extends Contract>T deploy(Class<T> type,Web3j web3j,TransactionManager transactionManager,BigInteger gasPrice,BigInteger gasLimit,String binary,String encodedConstructor,BigInteger value) throws IOException, TransactionException {   return deploy(type,web3j,transactionManager,new StaticGasProvider(gasPrice,gasLimit),binary,encodedConstructor,value); } 
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
Thread.sleep(5000)
Internal.prefixKeyWithSalt(key)
focusable.canTakeAccessibilityFocusFromHover()
loaded.getLoaded().getConstructor()
logger.info("Remove try/catch/finally")
telephony.getLteOnCdmaModeForSubscriber(subId)
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(implRef)).description(message)
Log_OC.wtf(TAG,"Trying to share a NULL OCFile")
callback.onUploadFailure()
imageViewShadow.setImageResource(R.drawable.shadow)
minElevation=0
IndexReader reader=IndexReader.open(dir); 
(status & 0x00040000) > 0
sceneCam.getLeft()
ServerUtilities.unregister(this,FirebaseInstanceId.getInstance().getToken(),accountId)
typeSettingsProperties.toString()
requestModels.entrySet()
editText.setText(task.getValue(property))
previousStepPartitioningMeta.isPartitioned()
assertParses("scan class path",CommandLineOptions::isScanClasspath,"--scan-class-path","-a","--all")
selectionChildIndices[j] == i
EndpointReferenceUtils.getAddress(ref)
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE)
mPathParameterMap != null
textView.getTop()
i.getTouchIconUrl() != null
assertNotNull(message.getPayload() instanceof Collection<?>)
ObjectHelper.isEmpty(configuration.getClusterService())
field.getType()
node.getBeginColumn()
query.length()
mIsAnimating.get() & mTargetZoomLevel.get() >= maxZoomLevel
public static BuildParameters addBuildParameterOutput(BuildParametersBuilder builder,String imageTag){   return builder.withNewOutput().withTag(imageTag).endOutput().build(); } 
new int[143]
XMLInputFactory.newFactory()
new PushInfo(0,TimeUnit.MILLISECONDS,pushHeaders,false)
(ChameleonElement)element
type.getConstructor()
toHeapData(key)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.2f,FOLDER_NAVIGATION)
socialActivityFinder.countByRelationType(userId,type)
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper)
message.getDownloadable().getStatus() == Downloadable.STATUS_DELETED
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_SECOND),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),AccountType.Normal,300L)
checkLocationAccess(uid,packageName,allowedResolutionLevel)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
mValues[7]
new SslContextBuilder(false)
ReplacementsImpl.class.getDeclaredMethod("makeGraph",rjm,rjm,SnippetInliningPolicy.class)
POSITVE_Y(2)
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null,null)
factory.getDestination(getEndpointInfo("sna","foo2","https://localhost:9003"))
@Test public void testSimplePutTake() throws OutOfCapacityError {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   assertEquals(groupFactory.numCalls.get(),2);   SchedulerQueryContext r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupTwo); } 
Calendar.getInstance(JSON.defaultLocale)
inUtc
mapper.getJsonFactory()
holder.createInfoAnnotation(element,composeTooltipString(descriptor,deprecated))
myNotNullParams.size() > 0
placeInfo == null
Assert.assertEquals(122L,assetCapsuleNew.getNetUsage())
GetterUtil.get(request.getParameter(param),locale,defaultValue)
JavaType accessingClass
zoom2d=200000
planDetailJson.getProductName()
allowPrivate.isNull()
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message))
raw.getParameters()
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
type.getConstructor()
mAppToken.hasContentToDisplay()
revWalk.release()
getDefaultSystemHandlerActvityPackageLPr(deviceProvisionIntent,userId)
logger.warn("Favorite '{}' not found",favorite)
origin < other
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
endFunction("write_column_statistics: ",ret != false)
new String(responseData)
AppLog.e(T.EDITOR,message)
factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
new ArgumentsPanel(JMeterUtils.getResString("backend_listener_paramtable"))
singleType != null
typeSettingsProperties.toSortedString()
existing.getProgramParameters()
NetworkParameters.testNet()
doTest()
new FsInfo(0,pathInfo)
HashSet<DeclarationDescriptor>
new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)
container.getNeighborTile(from) instanceof IRedstoneEngineReceiver
mValues[7]
ktAFile.getName()
GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))
IllegalAccessError.class
mDisplayContent.mDividerControllerLocked.getWidthAdjustment()
ChangesUtil.getBeforePath(change)
writeRepeatedFixed64(id,val)
origin >= other
NetworkParameters.testNet()
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
Int3 v
BED(99)
testerAnnotation.getClass()
jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(immediateCleanup)
wErrorTab.setControl(wErrorComp)
types.get(channel)
util.getDataTestDir(table)
System.currentTimeMillis() + (sessionInactiveInterval + 60) * 1000
mDrawable.getIntrinsicHeight()
boundary != null
matcher.isMatching(firstCandidate.right.attributes,secondCandidate.right.attributes)
mService.setWifiApConfiguration(wifiConfig)
token != null
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisibile)
resultEndpoint.setMinimumResultWaitTime(1000)
put.writeToWAL()
OCCLUSION_INTENS=0.1f
mWorkerId + BASE_FILE_NUMBER
factory.createDataSource(p)
context.getInputTypeInfo()
!file.isFile()
XContentType.fromRestContentType(template.substring(2,endOfContentName))
null != Configuration.getResource(dataSourceName)
Slog.wtf(TAG,"Unknown restriction: " + restriction)
Simple.of(SkylarkDict.class)
Thread.sleep(5000)
grammar.getTokenNames()
a.getFloat(attr,0)
new IndexWriter(indexStore,new StandardAnalyzer(),true)
stack.mStackId != DOCKED_STACK_ID
TagsAssetLocalServiceUtil.updateAsset(userId,article.getGroupId(),className,article.getResourcePrimKey(),categoriesEntries,tagsEntries,null,null,null,null,ContentTypes.TEXT_HTML,article.getTitle(),null,null,null,0,0,null,false)
synchronized (mLostBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } 
a.getFloat(attr,0)
(char)127
JDBCUtils.safeGetString(resultSet,"ROLENAME")
mDataAuthorities == null
ParseUtils.parseHumidity(S300TH_DATA_1)
getIntent().getStringArrayExtra(EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING)
writer.writeStartDocument(encoding)
BrowseCap.isMacintoshDesktop()
pathEditor.reload(sdk != null ? sdkModificator : null)
-10
new CrypticClue("Search the crates in the Barbarian Village helmet shop.",NULL_10627,new WorldPoint(3073,3430,0),"Peska's Helmet Shop in Barbarian Village.")
mMncStr == null
body.addBefore(target,afterAnchor)
new Ticker.Builder().currencyPair(pair).ask(kcTick.getBuy())
controller.getState() != ServiceController.State.UP
document.addKeyword(name,valueString)
previousSelection + 1
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisibile)
mMatchMode=numOfMatchesPerFilter
editor.waitCursorPosition(23,5)
graphModel.getDirectedGraph()
64 * 2
HashMap<String,Object>
addProperty(firstNode,"band","The Clash")
new ParentObserver(actualObserver)
Thread.sleep(5000)
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
failed(x)
width > 0
isBigDecCategory(typeRe)
mMat[6]
IBackupManagerService svc=mService; 
cause.getMessage().startsWith("Different HTTP Scheme or Host Redirect detected on")
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
DLFileEntryTypeFinderUtil.countByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},StringPool.BLANK,true)
assertEquals(10,cms.getMaxThreadCount())
dest.writeLong(mSubId)
thread.sleep(10)
1000L * FILE_BYTES
return localVertices; 
mAttachInfo == null
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
SampleObservables.numberStrings2()
V
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
private final VersionDetails versionDetails; 
mouseEvent.getModifiers()
groupMetaCache.get(userName)
new ArrayList<>()
referenceDatabase.setObjectQuotingStrategy(originalStrategy)
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(2L)).contextStart(withAdmin)
new AnAction(){   @Override public void actionPerformed(  AnActionEvent e){     if (myResultsPreviewTable != null && myContent.getSelectedIndex() == RESULTS_PREVIEW_TAB_INDEX) {       navigateToSelectedUsage(myResultsPreviewTable);     }   } } .registerCustomShortcutSet(CommonShortcuts.getEditSource(),comboBox)
mDisplay.getMetrics(mDisplayMetrics)
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
context.startRoute("consumer")
rightExpression == null
InheritableThreadLocal<HttpServletResponse>
ignite.log().error("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
new LocatedBlock(b,locations,startOffset,isCorrupt,cachedLocations)
Thread.sleep(5000)
/**   * {@inheritDoc}  */ @Override public Object clone(){   IntegerProperty prop=(IntegerProperty)super.clone();   prop.value=value;   return prop; } 
Bukkit.getOfflinePlayers()
_log.error(ioe,ioe)
invoke(args.first(),args.rest())
mReactInstanceManager.onResume(this)
new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR)
retryPolicy.onReadTimeout(rcl,rte.received,rte.blockFor,rte.dataPresent,queryRetries)
Long.valueOf(val)
mSrc.getParent()
mContext.getString(R.string.branded_monitoring_description_app_personal)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
learnRate * 0.95f
Collection<GridDrStateTransfer>
((MapActivity)getActivity()).getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_action_search_dark)
addTest(12,13,180.0f)
new InetSocketAddress(configuration.getRestListenUri().getPort())
public static ArrayValue localDateTimeArray(LocalDateTime[] values){   return new LocalDateTimeArray(values); } 
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)))
paramNames != null
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN)
rv.length == 4
entry.getField(BibEntry.KEY_FIELD)
from > to
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN)
gradHidden3[nodeIndex]
selenium.isVisible("link=Control Panel")
compactionStarted.getAndSet(true)
ch.pipeline().addLast(handler)
registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false)
selenium.isVisible("link=Control Panel")
TypeEvalContext.fast()
setImageDrawable(icon)
Map<String,AstyanaxOrderedKeyColumnValueStore>
ExportEventsAction.class
selenium.isVisible("link=Control Panel")
Long.valueOf(nfcid2,16)
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),true,true,null,null,createdBy,reason,comment)
result.getInfo()
Byte.valueOf(value.toString())
assertTrue(predicate.apply(pickleEvent))
foldersSize.y > sashSize.y / 2
IBackupManagerService svc=mService; 
!mIsRecentsShown || !mIsPipFocusedInRecent
LOG.info("Failed to read expected SASL data transfer protection " + "handshake from client at " + peer.getRemoteAddressString() + ". Perhaps the client is running an older version of Hadoop "+ "which does not support SASL data transfer protection")
Pattern.compile(keys[i])
selenium.isVisible("link=Control Panel")
new Environment()
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
word=START_WORD
lhs.getScore()
type == Object.class
new ModelNode().set(240000)
FileTemplateManager.getDefaultInstance()
DeprecationLogger.nagUser("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
COLORDRAWABLE_DIMENSION=1
mCaCerts != null || mCaCerts.length > 0
range.to < getFirstLirInstructionId(block)
mService.addOrUpdateNetwork(config)
T deployTask=createDeployTask(publication.getPomFile(),mavenRepositoryLocator,artifactRepository); 
shouldSkipByFamilyName(familyName)
m.isCacheValue()
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent)
((PsiManagerImpl)manager).getFileManager().findCachedViewProvider(file)
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message))
rootsIndex.findAllParentDescriptors(file,null,myContext)
dockedBounds.top - adjustment
context.formatSeparator()
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0
maxSize(new Fixed(width))
atLeast(1)
getList().getComments().size() > 0
mockResultSet.getDouble(1)
serversByLoad.lastKey()
InvokerHelper.setProperty(parent,"layout",answer)
type.getConstructor()
Integer.valueOf(rightStr)
id=45
private File selectedFileTemp; 
StateManagementUtils.createEndForkedExecutionMojoBinding()
Integer.valueOf(rightStr)
attribute.split("\\.")
public class XpathRegressionOuterTypeNumberTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOuterTypeNumber.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"1:1: " + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
resources.getDimension(R.dimen.close_handle_height)
getInputs().file(new Callable<FileCollection>(){   public FileCollection call() throws Exception {     IvyPublicationInternal publicationInternal=getPublicationInternal();     return publicationInternal == null ? null : publicationInternal.getPublishableFiles();   } } )
endpoint.expectedMessageCount(1)
mAppOpsManager.checkOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
host1.getAddress()
Boolean.valueOf(getOptional("kylin.query.enable-dict-enumerator","false"))
new J7StatsListener(ss)
type.getConstructor()
historicState(item,timestamp)
UnifiedDiffWriter.write(patches,writer,"\n",patchTransitExtensions)
mService.setEnableAutoJoinWhenAssociated(enabled)
@NotNull final Match match
selenium.isVisible("link=Control Panel")
case USER_ID_CONFIRMED: 
findDelegate(name)
args[0]
mPostKeyguardExitAnimation.hasEnded()
lp.onResolveLayoutDirection(layoutDirection)
mUserManagerHelper.getAllUsersExcludesSystemUser()
docBase.toLowerCase(Locale.ENGLISH)
public <A>S innerJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).innerJoin((Expr<?>)entity);   return self; } 
greaterThan(0L)
PrintAttributes.enforceValidColorMode(currentMode)
request.addHeader(h.getKey(),h.getValue())
document.getRootTag() != null
now > deadline
getPlayer(server,args,0)
partitionContainer.getRecordStore(name)
response.set(ROLLED_BACK)
executableType.getType().getBoxedType()
clusterService().localNode().name()
typeName.equals(java.util.Collection.class.getName()) || typeName.equals(java.util.Set.class.getName())
Float.valueOf(strings[i])
CellNames.compositeDense(SuperColumns.scName(name))
logger.warn("Cannot handle stop command ({})",e.getMessage())
LOG.info("Cannot get the live nodes: {}",e.getMessage())
!list.append(pi)
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMilis(request.getStartTime())
popupWindow.setWidth(menuWidth)
@NotNull
Thread.sleep(5000)
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarsResourcePath=findWebJarResourcePath(requestPath);   if (webJarsResourcePath != null) {     return chain.resolveResource(exchange,webJarsResourcePath,locations);   }  else {     return Mono.empty();   } } ))
given().content(bytes).when().post("/file")
MeasureSpec.makeMeasureSpec(MeasureSpec.EXACTLY,myHeight)
"Surface(native-token=" + mSurface + ")"
createRenderScript(false)
@Override public MavenModule dependsOn(Map<String,?> attributes,Module module){   backingModule.dependsOn(attributes,module);   return t(); } 
PApplet.split(transform)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)
Exception failure=lastException; 
loadAnimator(fragment,transition,true,transitionStyle)
sortedModules.stream()
buttonOrder.setPrefSize(200,30)
scrollWebElementIntoView(webDriver,webElement)
MessagingService.instance().addCallback(handler,message,destination,message.getTimeout())
getLogger().error("Row {} not found in {}, transferring to not found",new Object[]{rowId,tableName})
name == null
i == j
user.getCompanyId()
selenium.isVisible("link=Control Panel")
selenium.isVisible("link=Control Panel")
new StepMeta(log,fromstepid,fromstepname,(StepMetaInterface)tii)
VERSION=41
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingFile",filename))
immediate=false
selenium.isVisible("link=Control Panel")
metadata.getFaces()
matcher.group(12)
log.debug("PID contains identifier with no assigning authority")
appInfo.uid == XRestriction.cUidAndroid ? expert : false
COUNT_DATABASE.put(key,val)
buildJSLoaderModulesServlet()
b.setMessage(getString(R.string.local_osm_changes_upload_all_confirm))
resolveMethod(exception)
selenium.isVisible("link=Control Panel")
BuildData buildData=getBuildData(); 
Thread.sleep(5000)
eventJournalConfig.getMapName()
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=4
pkgs.get(i)
selenium.isVisible("link=Control Panel")
!KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME)
new ResultSetIterator(rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
!dynamicState.changingBlobs.isEmpty()
Message.throwInternalError()
log.debug("Error connecting to node {}",node,e)
System.out.println("")
getStepIOMeta().getTargetStreams()
getAsText(get(instant))
new PrintStream(bos)
GlobalSearchScope.projectScope(getProject())
selenium.isVisible("link=Control Panel")
toHeapData(key)
ruleContext.ruleError("Xcode version must be specified to use an Apple CROSSTOOL")
KeycloakHttpServerAuthenticationMechanismFactory.class
LOG.warn(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
tableHasData(oldTableName)
checkPojoMetaClass()
mPulseCallback.onPulseFinished()
!aClass.isInterface()
fireTableDataChanged()
engine.execute(query).toString()
service.asBinder().isBinderAlive()
return false; 
!mIsRecentsShown || mIsPipFocusedInRecent
mHandler.removeCallbacks(pae)
typTypeStr != null
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",GOOG_BASE_CLASS_ERROR)
mPowerManager.isScreenOn()
page.getSizeInBytes()
expression.length() - 2
!enabled
cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)
new SystemVibrator()
uuid.getMostSignificantBits() & 0x0000FFFF00000000L
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/QualifiedSuperMembers.kt")
xml.openElement(IQ.QUERY_ELEMENT)
cache1.remove(1)
telephony.getLteOnCdmaModeForSubscriber(subId)
selenium.isVisible("link=Control Panel")
buf.readBytes(length)
trimmedLine.endsWith(delimiter)
viewable=true
new PropertyDescriptor.Builder().name("Receive Message Wait Time").description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.").expressionLanguageSupported(false).required(false)
TelephonyManager.getDefault().getPhoneType()
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
loaded.getLoaded().getConstructor()
val == null
IndexReader r=IndexReader.open(dir); 
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
UnmodifiableIterable<T>
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute()
fluentSetters()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
retriever.captureFrame()
logger.debug("Invalid Account Credentials")
VERSION=8
onDetachedFromWindows()
maxZoom=17
client.filter(basicAuthentication("rob","rob")).get().uri("/").exchange().expectStatus().isOk().expectHeader().valueMatches(HttpHeaders.CACHE_CONTROL,".+").expectBody()
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
2 * 26 * 3600* 1000l
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
Integer.toHexString(quality)
if (DBG) {   Log.d(LOG_TAG,"hasBgCall: " + hasBgCall + "sameChannel:"+ sameChannel); } 
new BooleanPreference("auto_zoom_map",false,true)
element == null
Map<String,Counter>
!match && compareCompat
memoryMap.getInt("mappedWithJournal")
getLocationEnabled()
appWidth > mHeaderMinWidth
in.readStringNull(8)
CharSequence viewIdResName
RECORD_LENGTH=10
Localization.menuTitle("Open SPIRES entry")
DEBUG_OBB=true
_connector.getResponses("GET /foo?status=206 HTTP/1.0\n\n")
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
Object[]
1 / 5
row == null
SSLParametersImpl.getDefaultTrustManager()
qp.getUniqueItems()
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2)
cfstore.getSSTables()
ctx.nextOutboundMessageBuffer()
super.onResolveLayoutDirection(layoutDirection)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
GlobalSearchScope.projectScope(getProject())
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
WebSettings.setTextSize(WebSettings.TextSize.SMALLER)
Double.toString(d)
case abort: 
seenServiceNames.contains(serviceName)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod.run();   } } 
Integer.parseInt(sid[0])
isBigDecCategory(typeRe)
Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN)
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
JDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
LocalFileSystem.getInstance().findFileByPath(libPath)
SuperColumns.startOf(del.predicate.getSlice_range().finish)
buf.clear()
StartupManager.getInstance(module.getProject()).registerPostStartupActivity(new DumbAwareRunnable(){   public void run(){     ApplicationManager.getApplication().runWriteAction(new Runnable(){       public void run(){         onModuleInitialized(module);       }     } );   } } )
new ProgressDialog(getActivity())
counter >= max
((Composite)item.getControl()).layout()
a.getTypeByte()
_("Error while setting serial port parameters: {0} {1} {2} {3}")
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
dataFilter != null
(child.mViewFlags & VISIBILITY_MASK) != GONE
result.getReceipt().getEnergyTotal()
uri.toString().equalsIgnoreCase(future.getURI().toString())
mTfs.getFile(fileId)
node == null
engine.execute(query).toString()
maxSize > (used / total)
transportRoutingHelper.getRoutes()
new ArgumentsPanel(JMeterUtils.getResString("paramtable"))
parsedResult.getSqlType()
CacheData<NullTypes>
viewPort.setClearEnabled(true)
attribute.getDefinition().getAttributeMarshaller()
row.setBackground(getResources().getDrawable(R.drawable.comment_pending_bg_selector))
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).finallyDo(() -> isFormSubmitting.onNext(false))
getTelecomService().silenceRinger()
pOtherShape instanceof RectangularShape
classNode.getMethod("validate",new Parameter[0])
String.format("%s:%s:%s:%s",getModuleGroup(),getModuleVersion(),getModuleName(),configuration)
StringBuffer buffer=new StringBuffer("{ "); 
new NodeStats(discoveryNode,0L,null,null,null,null,null,null,null,null,null,null,null,null)
private SimpleLimitExceptionHandler exceptionHandler; 
printf(") at %p (",Word.fromObject(exception).rawValue(),exceptionPc.rawValue())
field.tokenStreamValue()
options.get(option).actionPerformed(null)
builder.timeValueField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
defaultFloat=1f
capacity > 1 << 30
SocketUtils.findAvailableTcpPort(40000)
setDeletionSystemEventClassNames(DDMStructure.class.getName(),DDMTemplate.class.getName(),JournalArticle.class.getName(),JournalFeed.class.getName())
/**   * {@link Builder#postfixWith(Tree,String)}   */ public static Fix postfixWith(Tree node,String postfix){   return builder().postfixWith(node,postfix).build(); } 
forward.closeNow()
getService().animateCollapse()
Math.abs(mLastModified * 1000 - time) >= 86400000
meterRegistry.summaryBuilder(METRIC_NAME_USAGE).tags(poolName,METRIC_CATEGORY)
configurations.create(Dependency.ARCHIVES_CONFIGURATION)
localImageSize != null
battery.addPower(Math.min(target,battery.getCapacity() - battery.getStored()))
RuntimeException e
position.offset(mLeft,mRight)
type.getSimpleName()
imageView.setBackgroundDrawable(drawable)
!lan
Long.valueOf(job.findExtraInfoBackward(BatchConstants.LOOKUP_EXT_SNAPSHOT_SRC_RECORD_CNT_PFX + tableName,"-1"))
Log_OC.wtf(TAG,"onAccountChanged was called with NULL account associated!")
startingWindow != null
new InMemorySessionManager("",1)
e instanceof DuplicateLockException
selection != ""
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
e.toString()
LOGGER.error("no property for " + type + ", "+ format)
mService.stopLocalOnlyHotspot()
mFacetCategoryMap.get(packageName)
Boolean.valueOf(attrValue)
stack.peekFirst()
m.getName().startsWith("test") && Modifier.isPublic(m.getModifiers())
channel.write(res)
CythonLanguageDialect._isDisabledFor(node)
create.isPrivate()
lockForRegularUsage()
new DatagramDnsQuery(addr,null,1)
not(isStatic())
packet.getTo().split("/")
lock.isLocked()
selenium.isVisible("link=Control Panel")
Log_OC.e(TAG,"Initializing Fragments in onAccountChanged..")
mAuthorities.get(i)
content().copy()
super.createItem(item)
aliases.get(i)
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Long.valueOf(value)
registerUsageCallback(networkType,subscriberId,thresholdBytes,null)
filterParameterName.indexOf('.')
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
display.getMetrics(dm)
log.warn("Could not annotate via server! Trying to annotate locally...",t)
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
tag.getLocalName()
response.set(ROLLED_BACK)
Object result=order; 
OpenSparkInterpreter(true)
(Byte)array[this.index]
ARCHIEVE
type.getConstructor()
mMncStr == null
c < 'Z'
Thread.sleep(5000)
listener.iterationDone(mln,iterationCount)
bufferedBytes >= maxBufferedBytes
cursorMove=1
Math.round(internalPower[in] / totalPowerContained * totalPowerConsumed)
mAudioSource.buildConfig(mDesiredSamplingRate,mDesiredChannelMask,mDesiredFormat,null)
((ExecutorService)executor).isShutdown()
directoryDelegate.renameRepositoryDirectory(dir)
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
StringBuffer msg=new StringBuffer(methodName); 
logger_.info("No column family to repair for keyspace " + tableName)
incomingMessage.getMessagePayloadByte(0)
Name.guess(name)
clazz.getClassName()
row - 2
InsertFinalStep<R>
engine.execute(cypher).toString()
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
executing != null
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
URISyntaxException ignored
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(id)
jobExecutionContextClass.getMethod("setResult")
getVal(path,false)
res - _bias
this(true,5,5,5,10); 
log.warn("Could not annotate via server! Trying to annotate locally...",t)
Element.F64(mRS)
FileUtils.deleteDirectory(store.directory())
settings.readLPw(null)
log.warn("Reset to factory defaults : onErrorDropped")
checkManageUsersPermission("query user")
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
mAttributes.getFlags()
ImmutableSortedSet.of("p","br","li","dt","dd","td","hr","img","tr","th","td")
width < 0
new IllegalStateException()
IBackupManagerService svc=mService; 
-1
typeSettingsProperties.toString()
validateTree()
pyClass.findClassAttribute(PyNames.DUNDER_METACLASS,true)
elementClass != null
token.equals("!") && !prevToken.equals("?") && !prevToken.equals("\u00a0")
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
type.getConstructor()
in.getVersion().after(Version.V_5_4_0_UNRELEASED)
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamSpace()
i=0
price.getAmount().equals(BigDecimal.ZERO)
toBeRemovedKeys.clear()
sampleFactory.getConstructor()
mSearchInput.setFocusable(focusable)
private String location; 
selenium.isVisible("link=Control Panel")
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
ErrorWrapperEmbeddedServletContainerFactory.class
Log_OC.wtf(TAG,"Server check tried with OperationService unbound!")
(NestedForm)form
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
args.length == 0
DiagnosticFactory1<JetElement,DeclarationDescriptor>
filterParameterName.indexOf('.')
world.add("capsule",5f,2.125f,5f)
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
intent.setData(uri)
new AudioMediaDeviceSession(this,session)
selenium.isVisible("link=Control Panel")
dest.writeLong(txPower)
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
new CopyableValueComparator(sortOrderAscending,type)
_keep_cross_validation_models=false
gen.addLoadImmediate(Register.R0,1234567890)
webView.evaluateJavaScript(injectJavaScript)
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
exchange.getPartitioningScheme().isReplicateNulls()
new URLClassLoader(new URL[]{myStdlib})
metaData.getData(SaveActions.META_KEY) == null
loaded.getLoaded().getConstructor()
checkLocationAccess(uid,packageName,allowedResolutionLevel)
AbstractAppleNativeTargetBuildRule buildRule
stat.st_mtim.tv_nsec.get()
vals.length != _sparseLen
dynamicType.getLoaded().getConstructor()
NestedSetBuilder.stableOrder()
hongbaoContent == null
sentence.substring(8,24)
lastPos != mTargetPos
assertEquals(1,calendar.get(Calendar.MONTH))
getSingleModelLoader()
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
dynamicType.getLoaded().getConstructor()
mWindowManager.getDefaultDisplay().getMetrics(metrics)
portlet.getPortletId()
getSrcPath("checks/javadoc/Input_03.java")
cs.newDrawable(context.getResources())
logger.debug("Illegal argument in chart: {}",e)
id=15869
states.length == 14
new RuntimeException()
service.getDomain().getName()
executeMethodAndCovertExceptions(httpPost)
new IndexShardRoutingTable.Builder(new ShardId(indexName,0),false)
typeSettingsProperties.toString()
mMncStr == null
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
lock.isLocked()
attributes.getDimension(R.styleable.ArcProgress_arc_angle,default_arc_angle)
requestHeader.mConnectionID != null
selenium.isVisible("link=Control Panel")
DecimalType.class
UIUtil.createImage(renderer,size.width,size.height,BufferedImage.TYPE_INT_RGB)
mp.getValue()
cursor.getString(COLUMN_VALUE)
latbottom >= o.getLocation().getLatitude()
ArrayUtil.contains(functionName,PyNames.AITER,PyNames.ANEXT,PyNames.AENTER,PyNames.AEXIT)
prop.getParamName()
data.split("\\s*,\\s*")
LOGGER.debug("Could not perform drage and drop",ioex)
variableIdentifier instanceof PsiVariable
localLOGV || false
mMncStr == null
statistics.addRemoveTimeNano(System.nanoTime() - start)
file == null
typeSettingsProperties.toString()
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,21,getLayoutLog())
logger.debug(e.getMessage())
colors.getResourceId(i,0)
mQsContainer.getLayoutParams()
mNwService.getInterfaceConfig(mInterfaceName)
mService.oneTouchPlay(getCallbackWrapper(callback))
mLocalDirtyRect.setEmpty()
StepVerifier.create(source.flux().bufferWhen(open,o -> close)).then(() -> {   source.assertSubscribers();   open.assertSubscribers();   close.assertSubscribers();   open.next(1); } ).then(() -> {   open.assertSubscribers();   close.assertSubscribers();   source.complete(); } ).expectNextMatches(List::isEmpty).expectComplete()
pos == -1
DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
tl.set(mPaint,mText,start,end,dir,directions,hasTabs,tabStops)
findCodecForFormat(false,format)
builder.put(columnHandle,0L)
str.isEmpty()
type.getConstructor()
LOGGER.debug("Could not execute cut",ex)
1
data != null
new ShardStats(shardRouting,new ShardPath(false,shardPath,shardPath,new ShardId(index,0)),shardCommonStats,null)
this.bukkitName.isEmpty()
DeprecationLogger.nagUser("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
capacity > 1 << 30
new RuntimeException()
StringBuffer buffer=new StringBuffer(sericeCounterName.toString()); 
Boolean useGrouping=(Boolean)properties.get(NumberFormatSample.PROP_USE_GROUPING); 
response.optJSONObject("discussion")
klass.getDeclaredFields(false,declaredFields)
Simple.of(Boolean.class)
Sets.difference(liveQueries,queryIdsSnapshot)
indexY < pointsIndex
4 * width * height
compressed.capacity()
new RuntimeException("Invalid Column Reference: " + grpbyExpr.dump())
new PrestoException(INVALID_CAST_ARGUMENT,e)
pdf.getName()
done
new IllegalStateException("'targetCacheManager' is required")
app.getSettings().AVOID_MOTORWAY.get()
GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)
getAsShortText(get(instant))
myNamedElements == null
config.enterpriseConfig != null
s.elapsedTime(TimeUnit.NANOSECONDS)
lastRequestTime + publicKeyCacheTtl > currentTime
new VariableInformation(10,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
isShortcutProxyActivity(targetIntent)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read())
return 3; 
request.getServletContext()
MavenProjectsManager.getInstance(myProject).doInitComponent(true)
endPos < paraEnd
id.provider.info != null
message.getMessage().getExpiresInSeconds() * 1000
mWM.removeView(mView)
selenium.isVisible("link=Control Panel")
generateRandomStringArray(20,20,false,true)
manager.setExact(AlarmManager.RTC_WAKEUP,alarmTime,pi)
getLastChildElement(tabBarParent)
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("ADH-DES-CBC3-SHA",KeyExchange.EDH,Authentication.aNULL,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA")
mGsmPhone.mSST.isConcurrentVoiceAndData()
DBG=false
m.getSize()
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
mValues[7]
countNewlines(headerFragment) + 2
CollectionUtils.filter(crossSaleProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((CrossSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
parser.getText()
new Alarm(Alarm.ThreadToUse.SWING_THREAD)
"adjustedPath=" + path
ZKMetadataProvider.getRealtimeTableConfig(propertyStore,tableName)
config.getProperty(jailName.toLowerCase()) == null
InsertFinalStep<R>
pctx.evaluateActionQueue(workingMemory)
mBluetoothHeadset.startScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
mStackScroller.getChildAtPosition(x,y)
TrustManagerFactory.getDefaultAlgorithm()
keyPattern.getDefaultValue() == null
BUTTON_QUIESCENT_ALPHA=0.6f
Thread.sleep(1000)
"Error resetting interface " + mInterfaceName + ", :"+ e
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
refresh()
IgniteCheckedException e
overrideAllAssetCategoryIds != null
StringBuffer ret
NamingException e
mService.setUidPolicy(UID_A,POLICY_NONE)
uncompressedProto.length < 2550000
get(context,R.string.pref_navigation,true)
POSITVE_X(0)
notificationManager.notify(NOTIFICATION_ID,id,notification)
sceneRoot.setTag(com.android.internal.R.id.scene_layoutid_cache,scenes)
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
new RuntimeException(e)
logger.error("{}",builder.toString())
Object fullfillmentMethod
mBluetoothLock.readLock().lock()
_log.error(pe)
dist > maxDist
new ConcurrentHashMap<String,JsonDeserializer<Object>>(16,0.75f,4)
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
synchronized (this) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
ImmutableSet.Builder<ImplemetationMethodDescriptor>
logger.info(name)
selenium.isVisible("link=Control Panel")
addContactButton.setRolloverImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
applicationContext.destroy()
log.warn("Problem in JSR223 script ",e)
hour != 0
type.getConstructor()
requestFilters != null
creating || !mRtHandlingPositionUpdates
pm.performDexOpt(pkg,null,false)
mFinishing && mSupportHardware
Intent.ACTION_SEND.equals(action) || "android.intent.action.SEND_MULTIPLE".equals(action)
highlighter.getTargetArea() != HighlighterTargetArea.LINES_IN_RANGE
out.writeObject(duration)
mWindowManager.getDefaultDisplay().getMetrics(metrics)
selenium.isVisible("link=Control Panel")
ObjectUtils.chooseNotNull(findLaf(lookAndFeelInfo.getClassName()),lookAndFeelInfo)
Preconditions.checkNotNull(mBlockIdsOnTiers)
i < size
@Override public Object call() throws Exception {   if (distribution.getBaseName() == null || distribution.getBaseName().equals("")) {     throw new GradleException("Distribution baseName must not be null or empty! Check your configuration of the distribution plugin.");   }   return distribution.getBaseName(); } 
new ArrayList<>()
mkdirs()
id=13
isConnectedToCluster()
mCurrentPage != newPageIndex
type.getConstructor()
openSession.close()
XmppStringUtils.parseBareAddress(key)
right < chartCalculator.mContentRect.left
testClass.getMethod(SUITE_METHODNAME,new Class[0])
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
ArrayList<UsageInfo>
showNotifications.isNull()
display.getMetrics(dm)
logger.error("Table spec retrieval failed, couldn't read file: " + sourceFile)
new Paint(Paint.ANTI_ALIAS_FLAG)
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true)
attrib.isPosition()
Localization.lang("View")
mService.getWifiServiceMessenger(mContext.getOpPackageName())
page.getSizeInBytes()
assertClusterSize(2,data2,data3)
firstPos != mTargetPos
clientState.getKeyspace()
-25
zoom < 15
setEternal(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
getIntProperty("tachyon.master.web.threads",5)
StatsLog.write(StatsLog.ANR_OCCURRED,app.uid,app.processName,activity == null ? "unknown" : activity.shortComponentName,annotation)
text.equals(((TextButton)button).getText())
Preconditions.checkNotNull(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
SortedMap<Integer,Integer>
setServiceForegroundInnerLocked(r,callingUid,notification,0)
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
LibraryTableEditor.editLibraryTable(getProjectLibrariesProvider())
schemeSpecificParts != null
native_get_videoeditor_export_profile(vidCodec)
checkPojoMetaClass()
Slog.e(TAG,"FLP HAL not supported")
measureRun(0,0,target,mLen,false,fmi)
new IllegalArgumentException("Advertising can't be both connectable and scannable")
!mService.mLockTaskController.checkLockedTask(tr)
cc.isLazy()
logger.warn("Cannot update channel for group member ({})",e.getMessage())
selenium.isVisible("link=Control Panel")
new IndexWriter(dir,new StandardAnalyzer())
Exception exception
mDeviceOwner != null
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))
BlockMasterClient.class
Log.w(TAG,"Skipped " + skippedFrames + " frames!  "+ "The application may be doing too much work on its main thread.")
startingPosition > limit
/**   * {@link Builder#swap(Tree,Tree)}   */ public static Fix swap(Tree node1,Tree node2){   return builder().swap(node1,node2).build(); } 
collectJSVariables(clazz,candidates,false,false,true,true)
hostsInPool.decrementAndGet()
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
Integer.valueOf(attrValue)
@Tes
Slog.wtf(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
MessageExtractor.getTextFromPart(this)
state.value == rotationLocked
disableForUser(what,token,pkg,mCurrentUserId)
Numeric.encodeQuantity(filterId)
StorageUtils.getIndividualCacheDirectory(context)
Integer.valueOf(optionsHelper.getOptionValue(OPTION_PERIOD))
collectionRecords != null
startExpression != null
String.format("%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",nf(counter),updateCounter,nf(sortedNodes.getSize()),nf(nodeContractor.getAddedShortcutsCount()),nf(nodeContractor.getDijkstraCount()),getTimesAsString(),(long)meanDegree,nodeContractor.getPrepareAlgoMemoryUsage(),Helper.getMemInfo())
doTest("class UserProfile:\n" + "    pass\n" + "\n"+ "#noinspection PyUnusedLocal\n"+ "def foo(sender):\n"+ "    pass","Py:CLASS_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:DEDENT","Py:END_OF_LINE_COMMENT","Py:LINE_BREAK","Py:DEF_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:LPAR","Py:IDENTIFIER","Py:RPAR","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK")
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
myCustomRootProvider != null
new IndexWriter(dir,new WhitespaceAnalyzer(),true)
executor.submit(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
DeprecationLogger.nagUser("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
selenium.isVisible("link=Control Panel")
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
DexFile.getDexOptNeeded(path,isa,compilerFilter,newProfile)
HttpParameter.CACHE_ID.getParameterFrom(req) == null
convert(BigInteger.class,defaultValue,defaultValue)
this.decoder.decode(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; 
mValues[7]
new FileDumper(output.toAbsolutePath().toString(),e1.getClassType(),summaryDumper,collectingDumper.getTypeUsageInformation(),options,illegalIdentifierDump)
mRenderNode.isPivotExplicitlySet()
mViewModel.onNewsCardShown(item)
in.getDepth() < outerDepth
ON_TOP
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
getCurrentRequestId()
-1
runAndVerifyStatusSorted("! root" + File.separator + "target"+ File.separator+ "source","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s1.txt","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s2.txt","D root" + File.separator + "source","D root" + File.separator + "source"+ File.separator+ "s1.txt","D root" + File.separator + "source"+ File.separator+ "s2.txt")
checkManageUsersPermission("getting profiles related to user " + userId)
i=0
ServletUtil.prepareParameters(p,true,false,false,false)
mContext.sendBroadcast(intent)
file.toString()
new EnterSelectionDialog(shell,props,files,Messages.getString("XMLInputDialog.FilesReadSelection.DialogTitle"),Messages.getString("XMLInputDialog.FilesReadSelection.DialogMessage"))
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).putter()
firstSlash == 0
mGoogleApiConnectionTask.setException(new ConnectException(result.toString()))
Boolean.valueOf(attrValue)
mySide1.select(titles)
tome != null
new StackManager(stackRoot,commonServices,osFamily,true,metaInfoDao,actionMetadata,stackDao)
new Random(System.currentTimeMillis())
offset > mValue.length
nextRow >= lastRow
origin > other
capacity > 1 << 30
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
appWindowToken == null
logger.info(String.format("will wait %dms before reconnect attempt",delay))
typeConverter.convertTo(XMLStreamReader.class,stream)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
IOUtils.toString(stencilsetStream)
con.commit()
env.getAdminContext() != null
public class BackupManagerService implements IBackupManagerService {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
logger.warn("failed engine [{}]",reason,failure)
queryMixin.leftJoin(target,alias)
Double.parseDouble(data[metadata.indexOf(name)])
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar")
args.putLong(ProgressScene.KEY_PAGE,result2.page)
verify(mWifiService).stopLocalOnlyHotspot()
Math.abs(e1.getY() - e2.getY()) > SWIPE_MAX_OFF_PATH
Slog.e(TAG,"Adding signing keyset " + Long.toString(id) + " to "+ name)
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
from >= to
speed < 4
/**   * @author yole  */ public class CoverageProjectViewClassNodeDecorator extends AbstractCoverageProvejctViewNodeDecorator {   public CoverageProjectViewClassNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager dataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=dataManager.getCurrentSuitesBundle();     final Project project=element.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     if (element instanceof PsiClass) {       final String qName=((PsiClass)element).getQualifiedName();       if (qName != null) {         appendCoverageInfo(cellRenderer,javaCovAnnotator.getClassCoverageInformationString(qName,dataManager));       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager coverageDataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=coverageDataManager.getCurrentSuitesBundle();     final Project project=node.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }  else     if (value instanceof PackageElement) {       PackageElement packageElement=(PackageElement)value;       final String coverageString=javaCovAnnotator.getPackageCoverageInformationString(packageElement.getPackage(),packageElement.getModule(),coverageDataManager);       data.setLocationString(coverageString);     }     if (element instanceof PsiClass) {       final GlobalSearchScope searchScope=currentSuite.getSearchScope(project);       final VirtualFile vFile=PsiUtilCore.getVirtualFile(element);       if (vFile != null && searchScope.contains(vFile)) {         final String qName=((PsiClass)element).getQualifiedName();         if (qName != null) {           data.setLocationString(javaCovAnnotator.getClassCoverageInformationString(qName,coverageDataManager));         }       }     }   }   @Nullable private static JavaCoverageAnnotator getCovAnnotator(  final CoverageSuitesBundle currentSuite,  Project project){     if (currentSuite != null) {       final CoverageAnnotator coverageAnnotator=currentSuite.getAnnotator(project);       if (coverageAnnotator instanceof JavaCoverageAnnotator) {         return (JavaCoverageAnnotator)coverageAnnotator;       }     }     return null;   } } 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
Utils.isZkAuthenticationConfiguredStormServer(topoConf)
mAttributes.getFlags()
action == KeyEvent.ACTION_UP
new File(fileName)
private Exception exception; 
type.getConstructor()
new File(themeCss)
packet.setError(PacketError.Condition.not_authorized)
GuiUtils.invokeLaterIfNeeded(() -> new VcsPushDialog(myProject,preselectedRepositories,GitBranchUtil.getCurrentRepository(myProject)).show(),modality)
type == Sensor.TYPE_AMBIENT_TEMPERATURE
new IllegalArgumentException("Advertising can't be both connectable and scannable")
isCreated()
dockedBounds.left - adjustment
new IndexWriter(dir,analyzer)
ControllerStatusReportingTask.class.getField(fieldName)
StringBuffer buf=new StringBuffer(); 
SPACE_BEFORE_COLON_IN_FOREACH=false
"com.google.android.gms".equals(mPackageName)
sqlRouteResult.getSqlParsedResult().getSqlType()
deltaoNext.mmul(Nd4j.diag(wOO))
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
Key.class.getCanonicalName()
mock.message(0).outBody(String.class)
/**   * 秋季（第三季度）   */ ANTUMN(3)
DefaultManagementAgent.class
article.put(Article.ARTICLE_SYNC_TO_CLIENT,false)
intention.processIntention(element)
a.getDimensionPixelOffset(attr,0)
ColorResources.getColor("inactiveTextColor")
ts.getJobId() == jobid
Class<Input>
value + value + MINIMUM_BACKLIGHT
FilenameUtils.getPath(destination)
configuration.getMemoryMode() == CacheMemoryMode.OFFHEAP_TIERED
mWM.removeView(mView)
MAX_TOOLTIP_SHOWN_COUNT=3
StringBuffer sb=new StringBuffer(); 
packageNames.length == 1
TYPE_20(ACCURATE,CONTROLLED,null,LONGRANGE)
!mStatus.showStatusLines()
((Context)entry.value).unbind(name.getSuffix(1))
generateRandomStringArray(20,10,false,true)
mAppToken.hasContentToDisplay()
new ServerSparseIntRow(rowId,startCol,endCol)
mPowerManager.isScreenOn()
setting.attach(this)
typeSettingsProperties.toString()
selenium.isVisible("link=Control Panel")
someBatchInterval * 3
method.getDeclaringClass().equals(XAConnection.class)
((BCECPrivateKey)privKey).getS()
bitoff + nbits < 32
fireTypingNotificationsEvent(sourceContact,STATE_STOPPED)
csUseGlobalSearch.setSelection(store.getBoolean(SQLPreferenceConstants.FOLDING_ENABLED))
mapper.getTypeFactory().uncheckedSimpleType(Statistics.class)
builder.append("#")
Assert.assertEquals(0L,args.getAllowCreationOfContracts())
assertEquals(3,ti.nrOfInvocations)
new IllegalStateException()
dynamicType.getConstructor()
method.invoke(target,args)
PyQualifiedName.fromComponents(name)
telephony.getCdmaEriIconIndexForSubscriber(subId)
processResult.getStdout()
m.muli(beta1)
Preconditions.checkNotNull(blockWorker)
myPriorityRange.contains(info)
methodNameMaps.containsKey(parentThing)
selenium.isVisible("link=Control Panel")
new FairAffinityFunction()
parsedResult.getSqlType()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,5)
valueMono.otherwiseIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
asList(CUBRID,DERBY,FIREBIRD,ORACLE,SQLITE,SQLSERVER,SYBASE)
TelephonyManager.getDefault().getPhoneType()
IOException e
mockResultSet.getDouble(1)
(Constructor)chooseMethod("<init>",constructors,arguments,true)
assertDurationAround(startedAtDate - firstLogDate,45000)
VDBG=true
LOG.info("Heart rate: " + heartRate,Toast.LENGTH_LONG,GB.INFO)
KotlinFacetSettingsProvider.Companion.getInstance(module.getProject()).getSettings(module)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
new Invoke(opcode,kind,new Value[argumentCount],target,returnType,into)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
retriever.captureFrame()
state != BluetoothA2dp.STATE_PLAYING
ev.mDataSamples.length < ND
status().isPermanentRedirect()
sourceSet.getClasses()
mPostKeyguardExitAnimation.hasEnded()
Sets.<Integer>newHashSet()
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf")
realIndex < columns.size()
originalLayout.getIconImageId()
addInactiveSubscription(key,info)
executeMethodAndCovertExceptions(httpPatch)
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
order=1
Math.max(tmp.getMaximumFractionDigits(),6)
@NotNull
LookupElementFactory.getInstance().createLookupElement(element,referencedName)
sleepAtLeastMillis(1)
MainApp.getAccountType()
content.getOutputStream()
b0.divide(b1)
getActivePreferenceStore()
getOrCreateContainer().unlock(dataKey,caller,threadId)
AnnotatedElementUtils.getAnnotationAttributes(controllerType,annotType)
sUseRenderThread=true
newNode.makeNonIndexable()
