logger.fine("Aliasing common strings")
parameter.name()
mapper.writeValueAsBytes(segment)
taskDao.findByUserId(2L,new Sort(Direction.ASC,"id"))
!r1
buildPages.getTypesWithoutHash()
0 - originX
partitionContainer.getExistingRecordStore(name)
i < 3
logger.info("defineClass pluginClass:{} cl:{}",className,classLoader)
assertEquals(Service.State.FAILED,service.state())
(offset >= start && offset <= start + len) || (end >= start && end <= start + len) || (offset <= start && end >= start + len)
FileUtil.compactPath(path,'/')
!serialNumber.equals(null)
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
targetDescription.getDeclaredValueClassName()
(BasicFontMetrics)c.newInstance()
preMap.size()
nioGroup.shutdownGracefully(0,10,TimeUnit.SECONDS)
logger.warn("Configuration for influxdb not yet loaded or broken.")
-Float.parseFloat(position.getChildByName("Y").getText())
final ProtocolCommand cmd
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
ArrayList<>
items[23]
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
!unsafeBuffers.contains(buffer,true)
e.toString()
tokens.getText()
Short.parseShort(value.toString())
cache.putRecord(key,record)
maxRelError=1e-3
registry.bind("params",params)
factory.getEmbeddedServletContainer()
assertEquals("[]",q.toString())
new TableException(String.format("Unable to generate a string representation of the serializer snapshot of '%s' " + "describing the class '%s' for the ANY type.",serializer.getClass().getName(),clazz.toString()),e)
assertClusterSizeEventually(2,data2,data3)
c.getPath() == null && getPath() != null
StringBuilder pattern=new StringBuilder(this.prefix); 
doInvoke(args)
mTfs.delete(mTfs.open(new TachyonURI(filePath)),true)
E edge
MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA)
promise.isDone() || future.isCancelled()
assertEquals(9,tokens.size())
isDoubleA && isIntB
queueLength.asString()
Preconditions.checkNotNull(hostname,"hostname")
CompletableFuture<Void>
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
frustum.update(invProjectionView)
ids.getIDs().length > 50
DataStreamSink<OUT>
buffer.getUint8()
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
engine.execute(query).dumpToString()
Object[]
TestUtils.randomByte() + 128
checkNoPlanNodeMatches(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
LinkedHashMap<String,Operator<? extends Serializable>>
IOUtils.closeQuietly(is)
findDelegateForNewObject(name)
EnumValidator.create(Target.class,true,false)
LOG.warn("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
realPointerIndex >= AndroidInput.NUM_TOUCHES
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
null != rootCause && rootCause.getCause() != null
mapConfig.getBackupCount()
assertEquals("Unable to read 1 bytes, got 0",ex.getCause().getMessage())
stateHolder.reloadDatapoints()
timeout=60_000L
expiresOn.getTime()
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
graphModel.getGraph().getNodeCount()
return true; 
dic.buildRouterChain()
elements != null && elements.size() > i
token.substring(0,p).trim().toLowerCase(Locale.US)
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
LOG.warn("Unable to delete {} because listInternal returns null",path)
LoopContextStateRetrieval retrievalToAdapt
FiltersTopComponent.findInstance().getUiModel().getSelectedRoot()
graphModel.getUndirectedGraphVisible()
!hasNextChunk()
LOCAL_OPTION.getLongOpt()
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
repo.setRecoveryInterval(1000,TimeUnit.MILLISECONDS)
element.getLocalName()
initialCapacity > 1 << 30
assertEquals(2,scheduler.getQueueManager().getQueues().size())
new StringBuilder(740)
address.getHostAddress()
-1
buffer.writeBytes(content,content.readerIndex(),content.readableBytes())
new CommandLineException("Failed to execute operation.",e)
edge.setDirection(edgeDefault)
WebSocketEventListener.class.cast(l).onHandshake(event)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
id=10865
OptionalIdentifiedDefinition<RoutesDefinition>
pId + BASE_FILE_NUMBER
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
compositeBuffer(Integer.MAX_VALUE)
uri.toString().equals(future.getURI().toString())
parser.parse(INFO_OPTIONS,args,true)
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
i < 100
person.getPersonVoidReason()
Bytes.toBytes(tableOrRegionName)
"Segment initialized with too large address: " + offHeapAddress + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR
assertEquals(11,events.size())
initialCapacity <= capacity
engine.execute(query).dumpToString()
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ Broadcaster removeAtmosphereResource(AtmosphereResource resource); 
new InetSocketAddress("localhost",6333)
new IOException(msg,e)
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractAclCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
getTokenDisplayNames()
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat())
Context.getAdministrationService().saveGlobalProperty(propToUpdate)
lock.unlock()
new PriorityTieredBrokerSelectorStrategy(0,1)
ProtobufUtil.createSnapshotDesc(snapshot)
yAmount != 0
legacyValue.isDefined()
Color.fromRGB(0xF0F0F0)
type.toLowerCase(ENGLISH)
registry.bind("eventBus",new EventBus())
new DropTableEvent(tbl,success,deleteData,this)
region.getRegionHeight()
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,false)
graphModel.isMixed()
client.getVertx().setTimer(1000,id -> checkExpired())
super.doCreateDataFormat(camelContext)
public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
client.getStatusCodeReply()
logger.trace("Mapped {} to {}",t,e.getValue())
renderUpdate(errorChannel,results)
BaseBulletTest.init()
return ctx; 
raw.getOutParameters()
mock.expectedMinimumMessageCount(1)
Thread.sleep(800)
Exception ex
this.reader.comparator.compare(reader.blockIndex.blockKeys[b],0,reader.blockIndex.blockKeys[b].length,key,offset,length)
assertEquals(6,config.getMapConfigs().size())
private final ExecutionHandler executionHandler; 
server.getState()
Time.currentTimeMillis()
LOG.trace("Trying to open resource [{}] as a class path resource using the classloader [{}].",resource,this.getClass().getClassLoader())
r.getUri().getPath()
ImmutableList<String>
new AutoValue_RegistrationResponse(configuration,configurationOverride,actions,assignments)
this.addUnsafeEnchantments(stack.getEnchantments())
GatherGetterAndSetterProperties.update(compiler,externs,root)
DataStreamSink<OUT>
out.writeData(function)
new PoolBagEntry(null,0,TestElf.getPool(ds))
factory.getEmbeddedServletContainer()
Assert.assertEquals(1202,details.get(2).getAbsolutePosition())
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags)
locations.isDefined()
Ordered.HIGHEST_PRECEDENCE + 20
address.getHost()
maxActiveSessions == null && servletContainerService != null
engine.execute(query).dumpToString()
new MaterializingOperator(operatorContext,sourceTypes)
public class TimesNewRoman extends BasicFontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } 
4 * Constants.KB
NettyCometSupport.class
assertEquals(303,t.request().get().getStatus())
TransactionMetadata::setInactive
log.debug(throwable,"Query %s failed",queryId)
new JSONOrderedObject()
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)
String requestRequiredAcks
latch.awaitFirst()
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
new StringBuilder(1024)
new LocalizedXStreams(classLoader,runtimeOptions.getConverters())
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null,null)
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",true))
timeout=90000
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
invoke(agentInfoList,payload,DEFAULT_FUTURE_TIMEOUT)
CommonUtils.sleepMs(200)
log.debug("Metric=[%s] has no StatsD type mapping",statsDMetric)
i < 3
JsonObject.createObjectMapper().getFactory()
Assert.assertFalse(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
node1.isEquivalentTo(node1)
id=10800
new StringBuilder(245)
case FORWARD: 
node.getLifecycleService().shutdown()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
4 >= buf.length - count
assertPlanEquals(expectedPlan,actualPlan)
LOG.info("Unable to parse HTTP response content",e)
Assert.assertNotNull(s)
this.uncollectedPointCreator
ImmutableSortedMap<Integer,Integer>
-0.5f
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
Bytes.toString(tableName)
log.info(error,cause)
Foundation.log("[error] " + tag + ": "+ message)
comparePartitionOwnership(true,localMember,partition)
hz1.getLifecycleService().shutdown()
target.directory("zk" + id + "data",true)
endTracksTo("main")
LOG.warn("Cannot access storage directory " + rootPath)
request.getServletPath()
file.flushAndForce()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
primitiveType == GL10.GL_POINTS
id=50
currentMode == MODE_PULL_DOWN_TO_REFRESH
Callable<Long>
id=24
equalTo(5)
clearFromMember.join()
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,403)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
new Exception("Apparent connection leak detected")
sectionStartTagToken.word()
"Searching class for device type " + deviceType
retry.attempt()
DATABASE_TYPE_MSSQL.equals(databaseType)
in.readFully(serCondition)
currentPosition < input.size() && (next=this.input.get(currentPosition++)) != null
Foundation.log("[error] " + tag + ": "+ message)
factory.getOrCreateProxyByName(packet.name)
items[24]
@Override public Long call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
Throwable exception
assertPlanEquals(expectedPlan,actualPlan)
content().duplicate()
zController.enqueue(doRequestStop())
Exception ex
/**   */ class SctpClientPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
getRequestParameters()
23 * ClassSize.REFERENCE
actor.addCaptureListener(listener)
potentialResponse != null
times + BASE_FILE_NUMBER
var.setValueType(guessType(value))
javaClass.addNestedType().setPackagePrivate()
type.toLowerCase(ENGLISH)
injectionConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,context,managedReferenceFactoryValue)
elementName=options.get(ELEMENT_NAME)
Preconditions.checkNotNull(object,"object")
id=10862
context.var("double",2)
b.getTypeByte()
new DefaultRouteContext(first.getBuilder().getProcessBuilder().getContext(),route,null,list)
ImmutableSet.of("reportUnknownTypes","analyzerChecks")
LOG.debug("Requesting paths for query services failed.",throwable)
row("p_comment",null,7.0,0.0,null,null,null)
StatBuckets.prettyUptimeStr(secs)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
TEST_UTIL.waitUntilAllRegionsAssigned(tableName)
new HashSet<RecordReplicationInfo>()
MAX_ITEMS=100
minPriority == null ? 1 : minPriority
routes.InputTypesResource()
error.expectedMinimumMessageCount(1)
assertSizeEventually(COUNT,map,180)
(new Path(testBucket.getParent(),".test.inprogress")).getPath()
otherWriter.write(line)
GL20.glUniform1iv(location,toIntBuffer(v,offset,count))
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
partitionKey.getType().getName()
Assert.assertEquals(0,fastJsonConfig.getFeatures().length)
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
client.get(path,MIMETYPE_PROTOBUF)
(a & 0xe0) == 0xc0
setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
SCHEMA(35,false)
Sets.newLinkedHashSet()
activeFrom == null
new BufferedImage(region.width,region.height,page.getType())
endsWith("/home/source")
edgeColumn.getIndex()
Map<String,Object>
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","No data returned")
when(rs.wasNull()).thenReturn(true)
engine.execute(query).dumpToString()
assertEquals(1,failures.size())
assertResultsPresentInDataResponse(url,asyncJob.getId(),timerJob.getId())
el.classNames()
return true; 
mLocalWorkerAddress.getDataPort()
LinkedHashMap<String,Operator<? extends Serializable>>
entry.getValue().accessibleNodeLabels
CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
configure(COMPONENT,"cxf-jaxb")
Object[]
Thread.sleep(500)
@ConditionalOnEnabledHealthIndicator("mail")
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
new ScheduledJob(job,jobName,delay,period)
tfs.createFile(new TachyonURI("/root/testFile1"))
fileInfo.getUfsPath()
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
e.toString()
assertEquals(9,tokens.size())
properties.length > 4
mLocalWorkerAddress.getDataPort()
events == null && this.calDavLoader != null
N node
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPythonTarget {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
(a & 0xe0) == 0xc0
new BindException(newConcept,"concept")
Bytes.toBytes(tableNameOrRegionName)
JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid",id)
p == null || t < -1
new CsvFilter("")
t.getDeclaredConstructors()
nodeData.getAttributes() != null
!isAllFiles()
uri.getRawPath()
registry.bind("groovyShellFactory",groovyShellFactory)
new IOException("Mocked failed close!")
resource.removeExtractor(input.getId(),extractorId)
(long)y & 0xFFFFFFFFL
assertFalse(model.getUniqueItems())
return worldVertices; 
securityDomain != null && !securityDomain.isEmpty()
id=16502
i % dictionarySize
new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
new PercentType(percent)
e.toString()
retVal.setProperty(p.getKey(),p.getValue())
GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))
mock.expectedBodiesReceivedInAnyOrder("Hello World 3")
counter + 1
logger.trace("Adding PropertySource: " + source + " in group: "+ basename)
host.getHost()
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
new CsvFilter(columns)
HMSHANDLERATTEMPTS("hive.hmshandler.retry.attempts",10,"The number of times to retry a HMSHandler call if there were a connection error.")
logger.error(message,ex)
id=19906
Ints.min(startedSplits.get(),splits)
StringUtils.isEmpty(finalFormKey)
lookup=Resources.REQUEST_QUEUE
lockForRescale()
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
!plugin.isEnabled()
LOG.error(getName() + " caught: ",e)
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
minIdle < 0 || minIdle > maxPoolSize
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertTrue(jmsTemplate.isPubSubDomain())
Foundation.log("[info] " + tag + ": "+ message)
GL.glBindTexture(target,texture)
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
minSize(new Fixed(width),new Fixed(height))
@InputMagicNumberIntMethodAnnotation(value=-45)
expectedCountsForADoc(weights,e4Update,ind)
ctx.sendUpstream(e)
logger.error("table: {} column: {}, failed convert type {} to {}",tableName,columnName,value,sqlType)
mockRegionInfo.isMetaTable()
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } ,executionService.getInternalExecutor())
compressedProto.length < 390200
(uptime - days) * 24
lastPosition <= positionCount
DiagnosticType.error("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(543)
!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
new MD5Renderer(model,false,true)
deploymentUnit.getParent() != null
lock.unlock()
type.equalsIgnoreCase("integer") || type.equalsIgnoreCase("int")
new IllegalStateException("Result is already complete: failed")
camera.setMatrices()
"Stream " + importerName
tupleInfo != null && tupleInfo.getMessageId() != null
count == 0 && position == buffer.length
ASYNC_PRODUCER_THREAD.getStackTrace()
map.lock(key,1,TimeUnit.SECONDS)
JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
aliases.size() > 1
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
this.dataCoding
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
resource.removeExtractor(input.getId(),extractorId)
in.readFully(serCondition)
id=16509
response.getStatus().getCode() / 100
Integer autoCommitInterval
batteryVp > full
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
context.var("long",2)
mock.expectedMinimumMessageCount(2)
rackIdToNodes.getOrDefault(rid,Collections.emptyList())
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
initialCapacity > 1 << 30
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
url.toServiceStringWithoutResolving()
getPath("checks/javadoc/Input_03.java")
(byte)0xe2
LOG.debug("Ignoring duplicate journal entry with SN {} when next SN is {}",newSN,mNextSequenceNumberToRead)
ImmutableList.of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"),new ArithmeticPostAggregator("a4","quotient",ImmutableList.of(new FieldAccessPostAggregator(null,"a1"),new ConstantPostAggregator(null,0.25))))
StringBuilder result
new Interval(startTime,endTime,ISOChronology.getInstanceUTC())
ssl.hasDefined(CommonAttributes.PROTOCOL)
!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
assertPlanEquals(expectedPlan,actualPlan)
new StringBuilder(1024)
a.getBoolean(R.styleable.DragSortListView_use_default_controller,true)
Preconditions.checkNotNull(manager,"manager")
new SkinRenderer(context,"start.ftl")
mock.expectedMinimumMessageCount(10)
GatherGetterAndSetterProperties.update(compiler,externs,root)
LOG.debug("Processing changes for pool " + poolName + ": "+ pools.get(poolName))
op.getResultAsObject(false)
LOG.warn("Ignoring duplicate class " + className)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
id=29
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n",expectedPath)
Type.LONG_TYPE.equals(typeInStack) || Type.DOUBLE_TYPE.equals(typeInStack)
serverSocket.setReuseAddress(true)
type.getDataFormat(routeContext)
legacyValue.isDefined()
ObjectConverter.toBool(scriptValue)
new ProcessBuilder(startScript,mMesosAddress)
buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)
setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
PropertyValuesAnimationAdapter<T>
PositiveDurationValidator.class
mapper.writeValueAsBytes(segment)
context.var("double",2)
buffer.nextValue(null,i,info.type,info.meta)
assertEquals(2,visitor.getTables().size())
gran.next(input)
new IllegalStateException()
className.lastIndexOf("org.openmrs.")
10 * 1024 * 1024
Exception t
raw.getOutParameters()
registry.bind("params",params)
connector.getFilterChain()
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
getSession(true)
LinkedHashMap<String,LinkedHashMap<String,ASTNode>>
this.aliasToCTEs.containsKey(tabIdName)
LOG.info("Table {} is disabled, give up reopening its regions",tableName)
incomingMessage.setTransactionCanceled(true)
getConnectTimeout()
LOG.debug("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
LOG.error(result.getDescription(),t)
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",60,SECONDS)
10 * 1024 * 1024
bindingGroup.hasDefined(PORT_OFFSET)
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null || System.getProperty("com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames") != null
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
getIntProperty("tachyon.master.web.threads",9)
latch.await(5,TimeUnit.MINUTES)
WebSocketEventListener.class.cast(l).onHandshake(event)
CommonUtils.randomAlphaNumString(random.nextInt(10))
/**   * Line number filter.   */ private CsvFilter lineFilter; 
EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)
Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"))
i >= stripeStats.size()
_availCPU + amount
MongoConnection.getInstance().connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false",null)
n.doubleValue()
return this; 
region.getRegionHeight()
public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
logger.debug("NODE {}: Retry timout: Advancing",node.getNodeId())
@Override public Response schema(Property property){   this.setSchema(property);   return this; } 
DiagnosticGroups.registerGroup("oldCheckTypes",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS,DiagnosticGroups.GLOBAL_THIS)
memoryReservation.addAndGet(bytes)
Float.parseFloat(encoding.substring(equalsPos + 1))
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
log.debug("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
analysis.getTypeWithCoercions(aggregate)
@Path(PATH_RELATIONSHIP_INDEX_ID)
new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)
Exception t3
this.posColumn=column
initialCapacity > 1 << 30
N node
EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)
new CommandLineException("Parsed request isn't available.")
resultEndpoint.expectedMinimumMessageCount(2)
System.currentTimeMillis()
parts.length > 1
setColors(color)
defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
RestartStrategies.fixedDelayRestart(1,0)
response.get(ROLLED_BACK)
wsdlLocation != null && wsdlLocation.length() > 0
Response headers(Map<String,Property> headers); 
modulePath.split(File.pathSeparator)[0]
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
response.addHeader(WWW_AUTHENTICATE,value)
ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)
factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000)
retry.attempt()
i < nodeCount
ConfigUtils.absoluteStormLocalDir(stormConf)
Preconditions.checkNotNull(blockWorker,"blockWorker")
assertPlanEquals(expectedPlan,actualPlan)
BeanMapper.mapList(books,BookDto.class)
registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false,runtimeOnlyFlags)
!mTFS.exists(turi)
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
jsonArray.toString(1)
n.longValue()
System.nanoTime()
node1.isEquivalentToTyped(node2)
!isDistinct(child)
node.getLifecycleService().shutdown()
host.getHost()
handoffExecutor != null
logger.trace("Trying to map {} to {}",t,path)
TupleDomain.all()
initialCapacity > 1 << 30
transactionalMap.set(key,value)
(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
cache.remove(r)
mm.tryLock(key,10,TimeUnit.SECONDS)
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,REAL,DOUBLE,VARCHAR)
public Builder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
mock.expectedMinimumMessageCount(2)
Long.parseLong(args[2])
assertEquals(6358481l,received.get(0)[1])
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getWrappedEngine().release(decrement)
engine.execute(query).dumpToString()
List<String>
localInputFuture.cancel(mayInterruptIfRunning)
url.getServiceKey()
info.getRegionNameAsString()
ran.nextInt(250)
new FieldFrame(currentFrame,isStaticInnerType,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)
IntrospectionSupport.setProperties(config,componentProperties)
/**   * SSH port.  */ private Integer port=2000; 
dbCol.findOne(filter)
new GetExecutionVariableInstancesCmd(executionId,variableNames,true,locale,withLocalizationFallback)
mock.expectedMinimumMessageCount(1)
Files.deleteIfExists(file.toPath())
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)
ImmutableList.of(new Identifier("a"),new Identifier("b"))
mock.expectedMinimumMessageCount(3)
DefaultManagementMBeanAssembler.class
this.thrown.expectMessage("File must not be null")
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
wrappedBuffer(Integer.MAX_VALUE,byteBuffer)
logger.debug("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new RuntimeIOException("No input file provided (use -parseFile)",e)
Arrays.asList("ErrorResponse","Response","Int","Int32","Int64","Int64","Float","Double","Bool","Void","String","Character","AnyObject","Any","Error","URL","class","Class","break","as","associativity","deinit","case","dynamicType","convenience","enum","continue","false","dynamic","extension","default","is","didSet","func","do","nil","final","import","else","self","get","init","fallthrough","Self","infix","internal","for","super","inout","let","if","true","lazy","operator","in","COLUMN","left","private","return","FILE","mutating","protocol","switch","FUNCTION","none","public","where","LINE","nonmutating","static","while","optional","struct","override","subscript","postfix","typealias","precedence","var","prefix","Protocol","required","right","set","Type","unowned","weak","Data")
"ppc64".equals(arch) || "ppc64le".equals(arch) || "aarch64".equals(arch)
processEngineConfiguration.getCommandExecutor()
registry.bind("dummy",new ReactiveStreamsTestService("from-registry"))
annotations == null || annotations.isEmpty()
LinkedHashMap<String,Operator<? extends Serializable>>
JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath,e.getMessage())
field.getType()
new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId),e)
new BufferedImage(region.width,region.height,page.getType())
4 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
program.getUuid()
!BlockStoreContext.INSTANCE.hasLocalWorker()
incomingMessage.getMessagePayloadByte(1)
new IndexSizeExceededException("%s",getOutOfRowsReason())
compressedProto.length < 391000
Thread.sleep(2000)
registry.bind("params",params)
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"")
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
bytesToString(data).split("&",-1)
data.position()
!list.isEmpty()
request.getServletPath()
callTimeout=10000
initialCapacity > 1 << 30
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
layout.setReleaseLabel(label)
getMockEndpoint("mock:line").expectedMinimumMessageCount(0)
partitionKey.getType().getName()
/**   * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages. If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter "?newerThan=3516″ to ensure that you do not get duplicate copies of messages already on your page.  */ private Long newerThan=-1L; 
Integer.parseInt(options.getMaxKeys())
from("direct:a").delay(5000)
latch.awaitFirst()
handoffExecutor != null
id=47
chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))
!uuid.equals(NULL)
size=100
callback.done(false)
offset >= 0
sctpChannelClass.getMethod("open")
dumpErrorCountThreshold=2
Long.parseLong(timeout)
actor.addListener(listener)
initialCapacity > 1 << 30
value.longLongValue()
new WebApplicationException(e,serverError(e))
log.error("Error while closing command context",exception)
edge.setDirection(EdgeDirection.UNDIRECTED)
manager != null && manager.server != null
GatherGetterAndSetterProperties.update(compiler,externs,root)
assertTrue(model.getUniqueItems())
this.getNotEmptyWaitThreadCount()
version.getUpdate().getAsInt() >= 151
factory.getEmbeddedServletContainer()
WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
TypeMirror maybeWildcardType
Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
"maxHeaderSize must be a positive integer: " + maxHeaderSize
exchange.getResponse().setComplete()
bLocations[0].getHosts()
assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal("city","cityname"));   assertEquals(3,valuesNotNullCity.size()); } ,30)
i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]
Map<String,Long>
conf.getRestBaseURL()
getEndpoint().getConfig().getIndexType()
twitter1.getRetweeterIds(1021608606934822912L,-1)
times + BASE_FILE_NUMBER
LOG.warn("I/O error when running rpc",e)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
region.getRegionHeight()
i < 10000
this.createError != null
return true; 
log.debug(throwable,"Query %s failed",queryId)
bestState.score()
b.getBroadcasterConfig().applyFilters(r,t)
new StringBuilder(246)
AlluxioWorker.class
Optional<RemoteInterfaceType>
COUNT_DATABASE.put(key,newVal)
rs.getMetaData()
routerChain.notifyFullInvokers(invokers,getUrl())
id=10809
new GenerationException("Couldn't parse type: " + typeDefinition,e)
Ints.min(completedSplits.get(),startedSplits.get(),splits)
className.lastIndexOf("org.openmrs.")
!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()&& edge.isDirected()
new ProcessBuilder(java,vmArguments,"-cp",h2jar.getAbsolutePath(),Server.class.getName(),"-tcp","-ifNotExists","-baseDir",tempDir.resolve("database-in-time-zone").toString())
line.substring(0,p).trim().toLowerCase(Locale.US)
getLog().warn("register druid-driver mbean error",ex)
LOGGER.debug("no property for " + type + ", "+ format)
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
new Duration(30,SECONDS)
RuntimeException.class
assertEquals(fc2,fc)
filters={XSSHtmlFilter.class}
mLocalAlluxioClusterResource.get().getWorker()
indexOutURI.toString()
r.getUri().getPath()
new DatagramDnsQuery(null,addr,1)
node.getLifecycleService().shutdown()
GL.glPolygonOffset(factor,units)
props.setProperty(JdbcConnectionParams.PROPERTY_URL,saveUrl)
arguments == null || class_gd == null
relations.replace(oldName,newTable) == null
ctx.sendUpstream(e)
new ClosureCodeRemoval(compiler)
providerConfig.setTimeout(5000)
LOG.error("Error while deserializing payload",e)
element.getLocalName()
logger.trace("Session destroyed")
source != null && !source.isEmpty()
ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}",numFields)
text.contentEquals(((TextButton)button).getText())
titleTable.getPrefWidth()
getPreferences().put(key,value)
file.getAbsolutePath()
ElementsParser.isAlphaNumeric(ch2)
c.content().readSlice(CONTENT_LENGTH)
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
Arrays.asList("bool","qint32","qint64","float","double")
Exception e
GL11.glGetTexParameterfv(target,pname,params)
returnValue
/**   * The tested prototype instance  */ private final P testedPrototype; 
Thread.sleep(100)
"Using bind address: " + bindAddress
Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)
Validate.notEmpty(name,"Cookie name must not be empty")
BufferUtils.newUnsafeByteBuffer(fileSize)
config.getClass().getName()
Throwable e
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
super.endPass(n)
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"),new RuntimePermission("accessClassInPackage.com.sun.jndi.url.ldap"))
memoryMap.getInt("mappedWithJournal",-1)
zoneId.equals("+00:00") || zoneId.equals("-00:00")
pieces.length <= tagColumn
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
mpline.substring(0,p).trim().toLowerCase(Locale.US)
Collections.sort(scheduledJobs,njec)
new IllegalArgumentException("ClassInfo's name should be non-null")
computeAntiJoin(inputStatistics,inputStatistics,x,unknown)
Expression.eq("searchable",searchable)
new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
reg.bind(LDAP_CONN_NAME,getWiredConnection(ldapServer))
config.getMapConfig(mapName).setTimeToLiveSeconds(10)
assertEquals(403,te.getStatusCode())
mBlockRemovalService.shutdown()
!config.isAutoRead()
DataStreamSink<OUT>
requestContext.getUri().getRawPath()
HeadArraySchema schema=new HeadArraySchema(); 
queueView.get().getExcerpt(index.longValue())
initialCapacity > 1 << 30
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
p.getParent()
test("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
field.getType()
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
getCurrCapacityUsed()
"Excluding secondary region " + bestRegionReplica + " - trying to find a different region to refresh files."
1
LOCAL_OPTION.getLongOpt()
shouldBackup=true
DataStreamSink<OUT>
AnnotatedElementUtils.hasAnnotation(type,Validated.class)
logger.trace("rapidRefreshFutureEnd stopping")
createNextExchange(processor,nextExchange)
doubleValue != 0
columnType.equalsIgnoreCase("date") || columnType.equalsIgnoreCase("timestamp")
endpoint.expectedMinimumMessageCount(1)
allDefinitions != null && composed.getInterfaces() != null
DirectMessage.createDirectMessageList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)
Long.parseLong(args[2])
for (AnnotationInstance annotation : excludeClassAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException("ExcludeClassInterceptors not applied to method: " + target);   } } 
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
ChannelOption<Boolean>
logger.trace("Received MyQ  JSON: {}",dataString)
i % 2
msg.getType() == Message.Type.error || msg.getBody() == null
asyncContext.currentAsyncTraceObject()
path.getPath()
id=16507
cache.put(new Element(key,element))
tfs.getFile(fileId)
@UriParam
E
streamCachingStrategy.setSpoolThreshold(1L)
logger.trace("rapidRefreshFutureEnd stopping")
ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.563
gran.next(input)
new Version(0,1,0)
logger.error("Invalid Atmosphere Version {}",javascriptVersion)
new UnsupportedOperationException(getClass().getName())
Mockito.verify(mRMClient).stop()
!fields.contains(name)
new UnsupportedOperationException("PLAIN doesn't support wrap or unwrap operation")
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
graphModel.getUndirectedGraphVisible()
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
ApacheAsyncHttpProvider.class
doInvoke(args)
AdviceWithTasks.beforeByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
Thread.sleep(800)
dstPath.toString()
attribute.getDefinition().getMarshaller()
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
new LocalTachyonClusterResource(Constants.GB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
return facebookProperties; 
target != null && !target.isEmpty()
Exception e
WeakSafeReadWriteLock strongReference
/**   * Checkstyle frame model.   */ private final transient MainFrameModel model=new MainFrameModel(); 
UrlUtils.getHeartbeat(getUrl())
GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))
LOG.error("clear parameter error",ex)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())
MAX_LENGTH=200
EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>
partition.getParameters()
Gdx.files.internal(fileName).pathWithoutExtension()
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Integer.parseInt(quantifier)
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-xml-","websocket-servlet-")
from("direct:start").aggregator().header("id").batchTimeout(500L)
timeout=1000
graphStack.push(lockingTx)
buffer.readableBytes() < 8
json.length() - 1
renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
deserialze(parser,type,fieldName,0)
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
assertEquals(avDegree,1.0)
times + BASE_FILE_NUMBER
headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(),entry.getValue(),camelExchange)
g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,"''")
OptionalIdentifiedDefinition<Type>
bulkInsertableMap.get(persistentObjectClass)
new HttpParameter("retweets",retweets)
c.getName()
converter.tryConvertTo(leftValue.getClass(),rightValue)
i=2
CompletableFuture<Void>
Status.createStatuseList(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
List<String>
tileElement.getChildByName("properties")
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage")
retry.attempt()
getTupledSet()
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } )
checkNoPlanNodeMatches(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
jsonHotRestartState != null
(BlockParentHandler)getParent()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(0)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)
delegate.requireChild(element)
@Path(PATH_RELATIONSHIP_INDEX_ID)
ManifestUtils.getOrCreateManifest(archive)
WebServicesTestUtils.checkStringEqual("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
(short)0655
GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))
E edge
resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional("org.hibernate.search.orm"),RuntimePackageDependency.required("org.hibernate"),RuntimePackageDependency.optional("org.hibernate.envers"))
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar","java.time.LocalDateTime")
statistics.addPutTimeNanos(System.nanoTime() - start)
n.longValue()
String.format("/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])",name,user.getName(),String.join(",",user.getRoles()))
log.debug("Performing lookup: %s --> %s",ips,retVal)
new IllegalArgumentException("profession and name can not be null")
new StringBuilder(1024)
ALIASES.addOperationParameterDescription(resources,"infinispan.container",op)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
new StringBuilder(259)
Preconditions.checkNotNull(pinnedInodes)
serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN
BatchServerInventoryViewProvider.class
public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
assertTrue(dr.isFailure())
new Path(testBucket.getParent(),".test-2.inprogress").getPath()
ctx.sendUpstream(e)
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
ChronicleEngineEndpoint endpoint
new BroadcastAction(message)
synchronized (mBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } 
InetAddress.getByName("0.0.0.0")
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
responseFilters.isEmpty()
StatBuckets.prettyUptimeStr(secs)
destination.getValue()
serverService.getOutgoingInterceptors()
logger.trace("myq ReturnCode: {}",returnCode)
new File(value).toPath()
LOG.error("clear parameter error",ex)
Thread.sleep(500)
t.replace(R.id.frame,new SampleListFragment())
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
d.setDefaultEncoding(servletContainer.getDefaultEncoding())
!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals("bind")
1 <= user.getListedCount()
hz1.getLifecycleService().shutdown()
mFileLength - mPos >= mBlockSize
id=10856
(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())
new Tag(text,line,this)
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
processEngineConfiguration.getExpressionManager() == null && applicationContext != null
1
public class XpathRegressionFallThroughTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
parameters.getPositions().get(1)
LOG.warn("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
/**   * The root package controller.   */ private ImportControl root; 
containedToken.endPosition()
response.get(ROLLED_BACK)
LOG.warn("Failed to look for classes in " + jarFileName + ": "+ ioEx)
CAPACITY=6000L
conceptAnswer.getAnswerConcept()
9f / 10f
DUPLICATE_OPS_TOLERANCE=10
new StringTypeHandler()
Throwable exception
((StringLiteral)literal).getValue()
localY2 * cos
System.nanoTime()
new UnsupportedOperationException("PLAIN doesn't support wrap or unwrap operation")
Object.class
super(pipeline,null,HEAD_NAME,true,true); 
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)
util.getDataTestDirOnTestFS(table)
retVal.setProperty(p.getKey(),p.getValue())
jedis.sadd(getSetKey(task),request.getUrl()) == 0
connection.psubscribe(jedisPubSub,patterns)
Mockito.any(ProducerRecord.class)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
collisionPoints.get(0)
assertPlanEquals(expectedPlan,actualPlan)
AtmosphereRequest.newInstance()
routes.InputTypesResource()
queueLength.asString()
stopwatch.elapsed(MILLISECONDS)
zkWorker2.getWorker()
numMessages=200
StatBuckets.prettyUptimeStr(secs)
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
columnType.equalsIgnoreCase("double") || columnType.equalsIgnoreCase("float")
new DynamicAwareEntry(uri,originalUri,properties,lenient)
ar2.cause()
private final DynamicTransformerRegistry dynamicTransformerRegistry; 
GL20.glUniform2iv(location,v)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
id=19907
inner.deletedRelationships()
new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "+ "Remove the extension or add a type parameter to it.")
ErrorPageFilter.class
new byte[10]
calendar.getTimeZone().getRawOffset()
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,value,channel,t)
"GET".equalsIgnoreCase(httpMethod)
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
Glue optionalGlue
touchEventPool.freeAll(touchEvents)
newHighlyAvailableDatabaseBuilder(path)
complete()
stationItemName != null && openSprinkler != null
UIPasteboard.getGeneralPasteboard()
exchange.getResponse().setComplete()
logger.debug("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
endsWith("/home/source")
new StringBuilder(238)
count < 17
context.var("double",2)
TimeUnit.SECONDS.toMillis(timeoutSeconds)
Color.fromRGB(0xB3312C)
response.get(ROLLED_BACK)
concurrent(driver,dataSource,30)
uncollectedPointCreator.createUnCollectedPoint(timestamp)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)
serverEnvironment != null
status.isDir()
!Boolean.parseBoolean(ac)
Duration.seconds(200)
LOG.trace("Finding components in url: {}",url)
serverSocket == null || !serverSocket.isBound()
generator.generate(signedByKeyPair.getPrivate())
ModuleReflectionUtils::isCheckstyleTreeWalkerCheck
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
initialCapacity > 1 << 30
new InputStreamReader(localStream,StandardCharsets.UTF_8)
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
LOG.trace("No binding to service interface as @Body,@Header,@ExchangeProperty not detected. Using BeanInvocation as message body when calling proxy method: {}",method)
resource.terminate(input.getId(),extractorId)
Throwable e
defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
Map.class
isDirect=false
IOHelper.getCharsetName(exchange,useDefault)
LOG.debug("Terminating gRPC server")
new byte[17]
_committedTo != lastCompletedOffset
ImmutableList<Number>
ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)
methodsToImplement(type,methods)
r.destination != null && !r.destination.isEmpty()
LOG.error("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
watch.taken()
assertEquals(input.getFieldCount(),4)
id=21
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-websocket-")
new UnsafeBasedStringCharProvider(unsafe,stringValueFieldOffset,str)
getter.getType()
1
ImmutableList<String>
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)
options.removeUnusedVars || options.removeUnusedLocalVars
testSame(js)
Long newerThan
R resource
entry.getKey().getServerName()
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractAclCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
i < 100
context.revertRestartRequired()
statistics.addGetTimeNanos(System.nanoTime() - start)
(Long)123L
overrideDeploymentConfig || (loginConfig == null)
id=14
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
value.equals(values[i])
CompletableFuture<Void>
"Using bind address: " + bindAddress
holder.addCallback(callback)
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
request.getParams() != null && !request.getParams().isEmpty()
E edge
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)
LOG.warn("register druid-driver mbean error",ex)
footerRow != null
assertResultExchange(result.getExchanges().get(0),true)
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json",true))
logger.debug("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
planNode.getPlanNodeCpuTime()
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
state.isTerminalState()
Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)
new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
type=100
args.length < 2
calendar.get(HOUR_OF_DAY)
rImpl.getRequest()
1
page.getLogicalSizeInBytes()
CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
status().isFound()
this.categoryWithApiModel=category
assertEquals("[]",q.toString())
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new PruneRedundantProjections())
e.getMessage()
minPriority == null ? 0 : minPriority
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
@ConditionalOnEnabledHealthIndicator("solr")
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ Broadcaster addAtmosphereResource(AtmosphereResource resource); 
getConnectTimeout()
item.getName().equals(name)
items[26]
System.nanoTime()
stat.st_mode.intValue()
TypeScriptJqueryClientCodegen.class
mapper.getFactory()
assertMockEndpointsSatisfied()
mAllowUndeclaredRTE=aFlag
barrier.await(2,TimeUnit.SECONDS)
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
@QueryParam("interval")
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000)
SyslogTcpTransport.class
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
target == null || target.getNumFields() < this.mappings.size() + 1
new PulsarComponent(context)
id=10850
new DatagramDnsQuery(null,addr,1)
CassandraRecordSetProvider.class
logger.warn("{} {}",errorCode,message)
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
"Content-Type".equalsIgnoreCase(name)
obj.getRequiredTokens()
LOG.info("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
response.get(ROLLED_BACK)
statistics.addPutTimeNanos(System.nanoTime() - start)
annotations.remove(node)
new CreateTableAsSelect(temporaryTableName,(Query)statement,false,tablePropertyOverrides,true,Optional.of(generateStorageColumnAliases((Query)statement,controlConfiguration,context)),Optional.empty())
encounter.getObsAtTopLevel(true)
node1.isEquivalentToTyped(node2)
Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
qp.isUniqueItems()
REAL_DRIVER.quit()
delay=5000
ImmutableList<SourceFile>
key == null
timeout=10000
inStream.remaining()
ImportAutoConfigurationWithItemsTwo.class
LOG.warn("Could not parse syslog message. Not further handling.",e)
children == null
assertEquals(4,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())
connection.hlen(key)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",true))
mockRegionInfo.isMetaTable()
sizeModeClass.equals("ProportionalSizeMode")
Thread.sleep(3000)
Map<String,Object>
i < Integer.MAX_VALUE
Assert.assertEquals(1455,details.get(6).getAbsolutePosition())
new ResourceProfile(Double.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,managedMemoryPerSlotMB,Collections.emptyMap())
file.name().endsWith(".etc1")
mock.expectedBodiesReceivedInAnyOrder("B+END","A+END")
request.getContentType().startsWith("application/x-www-form-urlencoded")
UnderFileSystem.get(tmpFolder,ufsConf)
WebUiResource.class
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!",new Throwable())
Set<Object>
editor.apply()
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
id=10867
new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1)+ "]")
i < 200
i < repeatCount
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString())
complete()
Arrays.<Class<?>>asList(org.nd4j.linalg.api.ops.DynamicCustomOp.class,org.nd4j.linalg.api.ops.NoOp.class,org.nd4j.linalg.api.ops.custom.BarnesEdgeForces.class,org.nd4j.linalg.api.ops.custom.BarnesHutGains.class,org.nd4j.linalg.api.ops.custom.BarnesHutSymmetrize.class,org.nd4j.linalg.api.ops.custom.SpTreeCell.class,org.nd4j.linalg.api.ops.custom.Flatten.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAdd.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAddGrad.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAddOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastCopyOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastGradientArgs.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMulOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastEqualTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastNotEqual.class,org.nd4j.linalg.api.ops.impl.controlflow.If.class,org.nd4j.linalg.api.ops.impl.controlflow.IfDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.Select.class,org.nd4j.linalg.api.ops.impl.controlflow.Where.class,org.nd4j.linalg.api.ops.impl.controlflow.WhereNumpy.class,org.nd4j.linalg.api.ops.impl.controlflow.While.class,org.nd4j.linalg.api.ops.impl.controlflow.WhileDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Enter.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Exit.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.LoopCond.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Merge.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.NextIteration.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.StopGradient.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Switch.class,org.nd4j.linalg.api.ops.impl.grid.FreeGridOp.class,org.nd4j.linalg.api.ops.impl.image.CropAndResize.class,org.nd4j.linalg.api.ops.impl.image.ExtractImagePatches.class,org.nd4j.linalg.api.ops.impl.image.NonMaxSuppression.class,org.nd4j.linalg.api.ops.impl.image.ResizeBilinear.class,org.nd4j.linalg.api.ops.impl.image.ResizeNearestNeighbor.class,org.nd4j.linalg.api.ops.impl.indexaccum.FirstIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.LastIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMin.class,org.nd4j.linalg.api.ops.impl.layers.ExternalErrorsFunction.class,org.nd4j.linalg.api.ops.impl.layers.Linear.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNorm.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNormDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Col2Im.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv1D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DTF.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthToSpace.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthwiseConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2col.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2colBp.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalization.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalizationDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SpaceToDepth.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2d.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2dDerivative.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.GRUCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMBlockCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMLayer.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRU.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRUCell.class,org.nd4j.linalg.api.ops.impl.loss.AbsoluteDifferenceLoss.class,org.nd4j.linalg.api.ops.impl.loss.CosineDistanceLoss.class,org.nd4j.linalg.api.ops.impl.loss.HingeLoss.class,org.nd4j.linalg.api.ops.impl.loss.HuberLoss.class,org.nd4j.linalg.api.ops.impl.loss.L2Loss.class,org.nd4j.linalg.api.ops.impl.loss.LogLoss.class,org.nd4j.linalg.api.ops.impl.loss.LogPoissonLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanPairwiseSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.SigmoidCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyWithLogitsLoss.class,org.nd4j.linalg.api.ops.impl.loss.SparseSoftmaxCrossEntropyLossWithLogits.class,org.nd4j.linalg.api.ops.impl.loss.WeightedCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.bp.AbsoluteDifferenceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.CosineDistanceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HingeLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HuberLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogPoissonLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanPairwiseSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SigmoidCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyWithLogitsLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SparseSoftmaxCrossEntropyLossWithLogitsBp.class,org.nd4j.linalg.api.ops.impl.meta.InvertedPredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PostulateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.ReduceMetaOp.class,org.nd4j.linalg.api.ops.impl.nlp.CbowRound.class,org.nd4j.linalg.api.ops.impl.nlp.SkipGramRound.class,org.nd4j.linalg.api.ops.impl.reduce.HashCode.class,org.nd4j.linalg.api.ops.impl.reduce.Mmul.class,org.nd4j.linalg.api.ops.impl.reduce.MmulBp.class,org.nd4j.linalg.api.ops.impl.reduce.Moments.class,org.nd4j.linalg.api.ops.impl.reduce.NormalizeMoments.class,org.nd4j.linalg.api.ops.impl.reduce.SufficientStatistics.class,org.nd4j.linalg.api.ops.impl.reduce.TensorMmul.class,org.nd4j.linalg.api.ops.impl.reduce.ZeroFraction.class,org.nd4j.linalg.api.ops.impl.reduce.bool.All.class,org.nd4j.linalg.api.ops.impl.reduce.bool.Any.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumSumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.DotBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MeanBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MinBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm1Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm2Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.NormMaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.ProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SquaredNormBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.StandardDeviationBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.VarianceBp.class,org.nd4j.linalg.api.ops.impl.reduce.custom.BatchMmul.class,org.nd4j.linalg.api.ops.impl.reduce.custom.LogSumExp.class,org.nd4j.linalg.api.ops.impl.reduce.floating.AMean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Bias.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Entropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.LogEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Mean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm1.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm2.class,org.nd4j.linalg.api.ops.impl.reduce.floating.NormMax.class,org.nd4j.linalg.api.ops.impl.reduce.floating.ShannonEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.SquaredNorm.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountNonZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.MatchCondition.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMax.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMin.class,org.nd4j.linalg.api.ops.impl.reduce.same.ASum.class,org.nd4j.linalg.api.ops.impl.reduce.same.Max.class,org.nd4j.linalg.api.ops.impl.reduce.same.Min.class,org.nd4j.linalg.api.ops.impl.reduce.same.Prod.class,org.nd4j.linalg.api.ops.impl.reduce.same.Sum.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineSimilarity.class,org.nd4j.linalg.api.ops.impl.reduce3.Dot.class,org.nd4j.linalg.api.ops.impl.reduce3.EqualsWithEps.class,org.nd4j.linalg.api.ops.impl.reduce3.EuclideanDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.HammingDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.JaccardDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.ManhattanDistance.class,org.nd4j.linalg.api.ops.impl.scalar.LeakyReLU.class,org.nd4j.linalg.api.ops.impl.scalar.LogX.class,org.nd4j.linalg.api.ops.impl.scalar.Pow.class,org.nd4j.linalg.api.ops.impl.scalar.PowDerivative.class,org.nd4j.linalg.api.ops.impl.scalar.RectifiedLinear.class,org.nd4j.linalg.api.ops.impl.scalar.Relu6.class,org.nd4j.linalg.api.ops.impl.scalar.ReplaceNans.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarAdd.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarFMod.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMax.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMin.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMultiplication.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarRemainder.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSet.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.Step.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarAnd.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEps.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNot.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNotEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarOr.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarSetValue.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarXor.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterDiv.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMax.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMin.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMul.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdUpdate.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterUpdate.class,org.nd4j.linalg.api.ops.impl.shape.ApplyGradientDescent.class,org.nd4j.linalg.api.ops.impl.shape.Broadcast.class,org.nd4j.linalg.api.ops.impl.shape.BroadcastDynamicShape.class,org.nd4j.linalg.api.ops.impl.shape.Concat.class,org.nd4j.linalg.api.ops.impl.shape.ConfusionMatrix.class,org.nd4j.linalg.api.ops.impl.shape.Cross.class,org.nd4j.linalg.api.ops.impl.shape.Diag.class,org.nd4j.linalg.api.ops.impl.shape.DiagPart.class,org.nd4j.linalg.api.ops.impl.shape.ExpandDims.class,org.nd4j.linalg.api.ops.impl.shape.Eye.class,org.nd4j.linalg.api.ops.impl.shape.Gather.class,org.nd4j.linalg.api.ops.impl.shape.GatherNd.class,org.nd4j.linalg.api.ops.impl.shape.Linspace.class,org.nd4j.linalg.api.ops.impl.shape.MergeAvg.class,org.nd4j.linalg.api.ops.impl.shape.MergeMax.class,org.nd4j.linalg.api.ops.impl.shape.MergeSum.class,org.nd4j.linalg.api.ops.impl.shape.MeshGrid.class,org.nd4j.linalg.api.ops.impl.shape.OneHot.class,org.nd4j.linalg.api.ops.impl.shape.OnesLike.class,org.nd4j.linalg.api.ops.impl.shape.ParallelStack.class,org.nd4j.linalg.api.ops.impl.shape.Permute.class,org.nd4j.linalg.api.ops.impl.shape.Rank.class,org.nd4j.linalg.api.ops.impl.shape.ReductionShape.class,org.nd4j.linalg.api.ops.impl.shape.Repeat.class,org.nd4j.linalg.api.ops.impl.shape.Reshape.class,org.nd4j.linalg.api.ops.impl.shape.SequenceMask.class,org.nd4j.linalg.api.ops.impl.shape.Shape.class,org.nd4j.linalg.api.ops.impl.shape.ShapeN.class,org.nd4j.linalg.api.ops.impl.shape.Size.class,org.nd4j.linalg.api.ops.impl.shape.SizeAt.class,org.nd4j.linalg.api.ops.impl.shape.Slice.class,org.nd4j.linalg.api.ops.impl.shape.Split.class,org.nd4j.linalg.api.ops.impl.shape.SplitV.class,org.nd4j.linalg.api.ops.impl.shape.Squeeze.class,org.nd4j.linalg.api.ops.impl.shape.Stack.class,org.nd4j.linalg.api.ops.impl.shape.StridedSlice.class,org.nd4j.linalg.api.ops.impl.shape.Tile.class,org.nd4j.linalg.api.ops.impl.shape.Transpose.class,org.nd4j.linalg.api.ops.impl.shape.Unstack.class,org.nd4j.linalg.api.ops.impl.shape.ZerosLike.class,org.nd4j.linalg.api.ops.impl.shape.bp.ConcatBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.SliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.StridedSliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.TileBp.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArray.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayConcat.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayGather.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayRead.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayScatter.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySize.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySplit.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayWrite.class,org.nd4j.linalg.api.ops.impl.summarystats.StandardDeviation.class,org.nd4j.linalg.api.ops.impl.summarystats.Variance.class,org.nd4j.linalg.api.ops.impl.transforms.Angle.class,org.nd4j.linalg.api.ops.impl.transforms.Assert.class,org.nd4j.linalg.api.ops.impl.transforms.BinCount.class,org.nd4j.linalg.api.ops.impl.transforms.CheckNumerics.class,org.nd4j.linalg.api.ops.impl.transforms.Cholesky.class,org.nd4j.linalg.api.ops.impl.transforms.Constant.class,org.nd4j.linalg.api.ops.impl.transforms.Histogram.class,org.nd4j.linalg.api.ops.impl.transforms.HistogramFixedWidth.class,org.nd4j.linalg.api.ops.impl.transforms.IdentityN.class,org.nd4j.linalg.api.ops.impl.transforms.MaxOut.class,org.nd4j.linalg.api.ops.impl.transforms.NthElement.class,org.nd4j.linalg.api.ops.impl.transforms.Pad.class,org.nd4j.linalg.api.ops.impl.transforms.ReluLayer.class,org.nd4j.linalg.api.ops.impl.transforms.any.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.any.IsMax.class,org.nd4j.linalg.api.ops.impl.transforms.bool.BooleanNot.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsFinite.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.transforms.bool.MatchConditionTransform.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNorm.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByValue.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndReplace.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndSet.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.Eps.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMax.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMin.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldNotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ATan2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.custom.BatchToSpace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Choose.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumSum.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Dilation2D.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicPartition.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicStitch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.EqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxArgs.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxVars.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Fill.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InTopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InvertPermutation.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNonDecreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNumericTensor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsStrictlyIncreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNorm.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ListDiff.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogMatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogSoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalAnd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalNot.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalOr.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalXor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiagPart.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixInverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixSetDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Max.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Min.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MirrorPad.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.NotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ParallelConcat.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Pow.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Reverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseSequence.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseV2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SpaceToBatch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Standardize.class,org.nd4j.linalg.api.ops.impl.transforms.custom.StandardizeBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Svd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.TopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Trace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Unique.class,org.nd4j.linalg.api.ops.impl.transforms.custom.UniqueWithCounts.class,org.nd4j.linalg.api.ops.impl.transforms.custom.XwPlusB.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Zeta.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.dtype.Cast.class,org.nd4j.linalg.api.ops.impl.transforms.floating.RSqrt.class,org.nd4j.linalg.api.ops.impl.transforms.floating.Sqrt.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.CubeDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.DynamicPartitionBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.ELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.GradientBackwardsMarker.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardSigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LeakyReLUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LogSoftMaxDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RationalTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RectifiedTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.Relu6Derivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftSignDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftmaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.TanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryMinimalRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.RelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.Set.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.AddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.Axpy.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.CopyOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.DivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MergeAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.ModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAtan2Op.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldMulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.PowPairwise.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RealDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RemainderOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SquaredDifferenceOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.TruncateDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.AddBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.DivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorModBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.MulBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RSubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SquaredDifferenceBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.And.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Not.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Or.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Xor.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMax.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMin.class,org.nd4j.linalg.api.ops.impl.transforms.same.Abs.class,org.nd4j.linalg.api.ops.impl.transforms.same.Ceil.class,org.nd4j.linalg.api.ops.impl.transforms.same.Cube.class,org.nd4j.linalg.api.ops.impl.transforms.same.Floor.class,org.nd4j.linalg.api.ops.impl.transforms.same.Identity.class,org.nd4j.linalg.api.ops.impl.transforms.same.Max.class,org.nd4j.linalg.api.ops.impl.transforms.same.Min.class,org.nd4j.linalg.api.ops.impl.transforms.same.Negative.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldIdentity.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldReverse.class,org.nd4j.linalg.api.ops.impl.transforms.same.OneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.same.Reciprocal.class,org.nd4j.linalg.api.ops.impl.transforms.same.Round.class,org.nd4j.linalg.api.ops.impl.transforms.same.Sign.class,org.nd4j.linalg.api.ops.impl.transforms.same.Square.class,org.nd4j.linalg.api.ops.impl.transforms.same.TimesOneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSqrtN.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSqrtNBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erf.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erfc.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Exp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Expm1.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log1p.class,org.nd4j.linalg.api.ops.impl.transforms.strict.LogSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RationalTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RectifiedTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Rint.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SetRange.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftPlus.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftSign.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Stabilize.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Swish.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SwishDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanhDerivative.class,org.nd4j.linalg.api.ops.persistence.RestoreV2.class,org.nd4j.linalg.api.ops.persistence.SaveV2.class,org.nd4j.linalg.api.ops.random.compat.RandomStandardNormal.class,org.nd4j.linalg.api.ops.random.custom.DistributionUniform.class,org.nd4j.linalg.api.ops.random.custom.RandomBernoulli.class,org.nd4j.linalg.api.ops.random.custom.RandomExponential.class,org.nd4j.linalg.api.ops.random.custom.RandomNormal.class,org.nd4j.linalg.api.ops.random.impl.AlphaDropOut.class,org.nd4j.linalg.api.ops.random.impl.BernoulliDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistributionEx.class,org.nd4j.linalg.api.ops.random.impl.Choice.class,org.nd4j.linalg.api.ops.random.impl.DropOut.class,org.nd4j.linalg.api.ops.random.impl.DropOutInverted.class,org.nd4j.linalg.api.ops.random.impl.GaussianDistribution.class,org.nd4j.linalg.api.ops.random.impl.Linspace.class,org.nd4j.linalg.api.ops.random.impl.LogNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.ProbablisticMerge.class,org.nd4j.linalg.api.ops.random.impl.Range.class,org.nd4j.linalg.api.ops.random.impl.TruncatedNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.UniformDistribution.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.RShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CyclicShiftBits.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CyclicRShiftBits.class)
this.registry.getValue().removeXAResourceRecovery(recovery)
UriBuilder.fromResource(StreamAlertResource.class).build(streamid)
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
getBoolean(ASYNC_CLIENT + "acceptAnyCertificate",false)
ExprEval.ofLong(null)
Utils.isZkAuthenticationConfiguredTopology(topoConf)
StatBuckets.prettyUptimeStr(secs)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
Thread.sleep(100)
resetTimeInSeconds * 1000L
retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
this.contextRunner.withUserConfiguration(JwtDecoderConfiguration.class)
assertPlanEquals(expectedPlan,actualPlan)
return closeNotifyTimeoutMillis; 
fields[i] >= 0 && in2 != null
return false; 
Thread.sleep(3000)
GL.glGenTextures(n,toBuffer(textures,offset),0)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
0 - originX
statistics.addRemoveTimeNanos(System.nanoTime() - start)
connection.pexpireAt(key,millisecondsTimestamp)
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
logger.debug("Error connecting to Plex",e)
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,403)
newNode.makeNonIndexableRecursive()
eq(false)
endsWith("/home/source")
setMinHeight(minHeight)
clusterProperties.getMaxRedirects()
checkArgument(partitionColumns.size() == values.size(),"Partition value count does not match the partition column count")
log.error("PID contains identifier with no assigning authority")
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName(),e)
lowByte.equals("")
uri.toString().equals(future.getURI().toString())
toJSON(entry.getValue(),config)
config.getOrcStreamBufferSize()
getTupledSet()
JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
traces.remove()
Long.parseLong(args[1])
LOG.debug("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
-1
!key.equals(PropertyKey.ZOOKEEPER_ENABLED)
filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))
LOG.debug("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
bulkInsertableMap.containsKey(persistentObjectClass)
System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN
wrappersToPrimitives.put(wrapperType,primitiveType)
Exception e
systemId.length()
ZWaveSwitchAllCommandClass.class
targetCondn == null || (nodeCondn.size() != targetCondn.size())
headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
256L << zoomLevel
Exception t
NullPointerException.class
request.getDueDate()
DEFAULT_MAX_UNION_SIZE=30
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
assertTrue(user.isGeoEnabled())
Thread.sleep(1500)
SingleMapBlock.class
edge.setDirection(EdgeDirection.DIRECTED)
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER","ACTUATOR")
TimeUnit.SECONDS.toMillis(4)
SOURCE_PATH.deref()
MBeanInfoAssembler.class
config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
initialCapacity > 1 << 30
new Duration(30,SECONDS)
assertFalse(model.getUniqueItems())
ps.saveRelationship(rel)
ar2.cause()
graphHeight / 2
@InputIntMethodAnnotation(42)
clearFromMember.join()
message.getFilteredFields()
getter.getType()
new DynamicAwareEntry("https4://localhost/test",null,null,null)
MoreObjects.toStringHelper(this).add("user",getUser()).add("timeZoneKey",timeZoneKey).add("locale",locale).add("startTime",startTime).add("properties",propertyValues)
connectionTimeout / 4
logger.finest("Optimized Selector: " + selector.getClass().getName())
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)
config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
group.id()
Protocol.read(inputStream)
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
Assert.assertEquals(3,visitor.getConditions().size())
Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
config.getIdleConnectionInPoolTimeoutInMs()
view.getClusteredLayerDegree(absNode)
Preconditions.checkNotNull(blockWorker,"blockWorker")
logger.debug("Error connecting to Plex",e)
DataStreamSink<OUT>
readBytes > 0
b.getTypeByte()
field.getType()
endpoint.setDataSource(target)
logger.fine("Computing Control Flow Graph")
getConnectTimeout()
GL15.glGetBufferParameteriv(target,pname,params)
public void testWithDFS() throws Exception {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
TimeUtils.millis()
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
getConfiguration().getOrCreateConnectionFactory()
Short.parseShort(value.toString())
PartitionColumnsSeparator.class
GL.glDeleteTextures(n,textures,Memory.getPosition(textures))
logger.trace("AtmosphereResource {} is resuming",uuid())
map.put(i,emp,0L,SECONDS,14L,SECONDS)
new DynamicAwareEntry("https://localhost:443/test",null,null,null)
args == null || args.length == 0
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
getMockEndpoint("mock:" + i).expectedMessageCount(200)
req.startAsync(req,res)
statistics.addGetTimeNanos(System.nanoTime() - start)
Exception e
getRegistry().bind("myTable",ht)
new RequestManager(testTimer,3000)
node.hasDefined(Constants.ALIAS)
level < RF_STATUS_FULL_SIGNAL
id=14239
assertEquals(512f,i,20f)
new CsvFilter(lines)
UndertowWebServer.class
Throwable exception
createService(apiKey,apiSecret,callback,defaultScope,responseType,null,userAgent,httpClientConfig,httpClient)
runAllTasks()
new StringBuilder(638)
Throwable e
64 * 1024
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)
lookup="java:/topic/myAwesomeTopic"
option.getJavaType()
/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 2; 
initial(randToUse)
assertPlanEquals(expectedPlan,actualPlan)
Map<String,Object>
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])
Assert.assertEquals(getNotAllowedExceptionMessage("hello"),e.getCause().getMessage())
contact.getWorldManifold()
MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)
testModules("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
new ArrayList<Object>(literalList.size())
ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
mock.expectedFileExists("target/failed/error/bye.txt")
@UriPath
LOG.warn("Failed to get next entry from " + jarFileName + ": "+ ioEx)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
assertPlanEquals(expectedPlan,actualPlan)
new GatherGetterAndSetterProperties(compiler)
getParser().parse(argsToUse)
@Override public Response schema(Property property){   throw new RuntimeException("Not implemented"); } 
StringBuilder retval=new StringBuilder(); 
ImmutableList.copyOf(sourcesAsStrings)
id=20
maxActiveSessions == null && servletContainerService != null
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
ticket.notifyAll()
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
superClass == Object.class || superClass == null
new IllegalStateException("Unexpected rule: " + ruleStr)
ImmutableMap<String,String>
Object getBean() throws NoBeanAvailableException ; 
layout.setReleaseLabel(label)
ProtobufUtil.createSnapshotDesc(snapshot)
methodName.startsWith("save") || methodName.startsWith("create") || methodName.startsWith("update")
attribute.getDefinition().getMarshaller()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
pixmap.getHeight() - yHotspot - 1
showTooltip == null || showTooltip.targetActor == null
isTestOnReturn()
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
i < 3
mDownView != null && mDownView instanceof ContextualUndoView
return false; 
webSocketProcessor.close(webSocket,1000)
setMode(RIGHT)
value.longLongValue()
trimmedLine.contains(delimiter)
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","No data returned")
checkArgument(!"/".equals(resourcePath),"%s is the classpath root",resourcePath)
Error|ClassNotFoundException
listener.onStatus(new StatusJSONImpl(json))
new StringBuilder(50)
id=36
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
idGenerator.generateUuid()
Integer.parseInt(st.nextToken())
type == REPARTITION
EnglishUdLas=88.72648417258083
cSet.setConceptSet(this)
size * 1.8f
Throwable e
HashMap.class
Assert.fail(String.format("Expected file %s being deleted but it was not.",filePath))
MathUtils.PI * (this.width * this.height) / 4
id=20
lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
id=27
Generics.newTreeMap()
items[20]
(color & 0x00FFFFFF) | (alpha << 24)
options.setLanguageOut(LanguageMode.ECMASCRIPT5)
SOURCE_PATH.deref()
role.description().orNull()
typeSerializer.getDeserializedType()
internalExecutor.submit(futureTask)
containedToken.beginPosition()
logger.fine("Expanding Jquery Aliases")
id=19904
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
node1.isEquivalentTo(node2)
value.toBigInteger()
getOriginUrl()
new IllegalStateException("Result is already complete: failed")
exportStatusCounts(exporter)
enabled=true
file.getAbsolutePath()
!regex.equals(lastRegex) || p == null
(DetailAST)child
snapshot.getCount()
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRole"),e.getCause().getMessage())
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
assertClusterSizeEventually(2,nodes[0])
in.readData()
KEY_LENGTH=64
AbstractStoreHandler<DelayedEntry>
public static XQueryBuilder xquery(File file,String characterSet) throws IOException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
pId + BASE_FILE_NUMBER
targetClass != null && field != null
metastore.getHost()
new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId),e)
return false; 
StatBuckets.prettyUptimeStr(secs)
new Path(bucketPath,"test-" + i + '-'+ j).getPath()
super.mySetupMutualAuthServerIsValidClientException(cause)
synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
DataStreamSink<OUT>
memoryReservation.addAndGet(bytes)
id=10848
public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
!compactionStarted.getAndSet(true)
"http".equals(protocol) || "ws".equals(protocol)
Throwable e
putBytes(v)
pubSubDomain=false
Assert.assertEquals("Invalid selection end",279,selector.getSelectionEnd())
cache.flushAndForce()
assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
times + BASE_FILE_NUMBER
hz1.getLifecycleService().shutdown()
scanFeatures(getCamelKarafFeatureUrl(),"xml-specs-api","camel-core","camel-spring","camel-" + feature)
config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)
entry.getValue().health().transformDeferred(this.timeoutCompose)
request.getContextPath()
DEFAULT_NUMBER_OF_READ_BUFFERS=256
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
E edge
assertEquals("Unable to open ''.",iter.next().getMessage())
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
new GetExecutionVariableInstancesCmd(executionId,variableNames,true)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
new UnsupportedOperationException(getClass().getName())
oldestNode == null || oldestNode.getLastSent() == null
cursor.getCurrentValueEndPosition()
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
endsWith("/home/source")
JsonObject.createObjectMapper().getFactory()
GatherGetterAndSetterProperties.update(compiler,externs,root)
chooser.showOpenDialog(null)
principalCookieName != null && httpRequest.getCookies() != null
count < 0
req.getSession().getMaxInactiveInterval() * 1000L
id=16510
WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
final ColumnFamilyDescriptor hcd=htd.getColumnFamily(familyName); 
Long.parseLong(args[2])
jsonHotRestartState != null
stopTimeNs - requestStartTimeNs
new MidPartLongRange(mPos,endPos)
DiagnosticType.error("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
this(parameters,new StringBuilder(),true); 
IR.constNode(IR.name(shortName),googRequireNode)
typeTmp.get(1)
QuartzHelper.class
typesArray.length != row.productArity()
!Arrays.equals(oldVal,val)
GL20.glGetUniformfv(program,location,params)
Never
(byte)0xe2
version == null || version.equals("")
status.isDir()
config.getStrategyImpl()
synchronized (references) {   if (transformed != null) {     if (transformed instanceof List) {       @SuppressWarnings("unchecked") List<T> casted=(List<T>)transformed;       return casted;     }  else {       throw new InitializationTypeConflictException(transformed.getClass());     }   }  else {     return data;   } } 
connector.setPort(9080)
selector.select(10)
nearCache.invalidate(key)
engine.execute(query).dumpToString()
XMLInputFactory.newInstance()
Math.max(1000L,connectionTimeout)
t.getCause()
assertPlanEquals(expectedPlan,actualPlan)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",10)
!consumer.endpoint.isAutoAck()
assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)
GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))
config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
otherWriter.write(line)
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
mock.message(0).body(String.class)
ImmutableSet<ImplementationMethodDescriptor>
assertEquals(1,helper.getRelationshipIndexes().length)
typeName != null
new ResultSetIterator(conn,rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
this.transactionsRepository.getTransaction(this.xidTransactionID)
k++
propertiesComponent == null || propertiesComponent.isDefaultCreated()
beans.add(bean)
this.thrown.expect(IllegalStateException.class)
modulePath.split(File.pathSeparator)[0]
assertEquals(response.getStatusCode(),200)
UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)
System.nanoTime()
getClusterMap().set(buildAttributeName(name),value)
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
from("direct:start").aggregator().header("id").batchTimeout(500L)
request.getPathInfo()
GL20.glUniform3fv(location,v)
96.0f / 160
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
new FilterConfiguration(filterClass,filterParams)
assertRemoveSubsystemResources(servicesB)
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
@Message(id=14151,value="Could not find view %s for EJB %s") IllegalStateException viewNotFound(String viewClass,String ejbName); 
id=10847
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR)
theClass.getConstructor()
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandler {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
mTfs.delete(mTfs.open(new TachyonURI(dirPath)),true)
LOGGER.error("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
E edge
TEST_UTIL.getAdmin()
result.expectedMinimumMessageCount(1)
Exception ex
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123)
return this; 
? extends T
i=1
id=10836
id=18
ScanFilterAndProjectOperator.class
times + BASE_FILE_NUMBER
new MetaTableLocator().waitMetaRegionLocation(watcher,10000)
parameter.name()
Context.getProviderService().getAllProviderAttributeTypes(true)
DiagnosticType.warning("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
ArrayNodeBaseTest<LazyHeadArrayNode>
s.setMaxVersions(region.getStores().values().iterator().next().getScanInfo().getMaxVersions())
FileSystem.getLocal(conf).delete(localScratchDir,true)
(new Path(testBucket.getParent(),".test.inprogress")).getPath()
registry.bind("curator",client)
result.expectedMinimumMessageCount(1)
@Override public Response example(String type,Object example){   throw new RuntimeException("Not implemented"); } 
Long.parseLong(args[1])
j.getConfiguration().get("pig.job.converted.fetch","").equals("") && j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
out.writeData(function)
TestSuiteEnvironment.getServerAddressNode1()
(strLine=br.readLine()) != null && !strLine.isEmpty()
when(rs.wasNull()).thenReturn(true)
target == null || target.getNumFields() < this.mappings.size() + 1
privObj.getObjectName().equals("masking_acid_no_masking") || privObj.getObjectName().startsWith("masking_acid_no_masking_n")
Throwable e
ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? "main" : consoleSlot)
t.getDeclaredConstructors()
put.getWriteToWAL()
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
notifierFuture.cancel(false)
exportStatusCounts(exporter)
/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(200,"your grammars contain a circular dependency and cannot be sorted into a valid build order",ErrorSeverity.ERROR)
mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder
CopyOnWriteArrayList<EntryListener<?,?>>
found=false
RT.count(s)
runPartialSorter(sorter,NUM_RECORDS,25)
14 * Bytes.SIZEOF_LONG
event.get(factory.getName())
public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
Time.currentTimeMillis()
calendar.set(Calendar.YEAR,2030)
Thread.sleep(1500)
GL20.glUniform1iv(location,v)
"Using bind address: " + bindAddress
List<TaggedWord>
"unable to parse " + optionStr
id=9
t.replace(R.id.frame,new SampleListFragment())
LOG.warn("Failed to look for classes in " + jarFileName + ": "+ ioEx)
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
newHighlyAvailableDatabaseBuilder(path)
CacheManagerCheck.class
redeliveryDelayResult > maximumRedeliveryDelay
getData() ^ 0x7
nameTextField.getText()
ch.unsafe().flush()
logger.fine("Remove try/catch/finally")
ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)
Color.fromRGB(0xC354CD)
order.getDosingInstructions()
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
AvailablePortFinder.getNextAvailable(3000)
handshakeFuture == null
handles[count]
flushIntervalSecs == 0
tokens.getText()
localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
javaClass.addNestedType().setPackagePrivate()
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
DataStreamSink<OUT>
graphModel.getDirectedGraphVisible()
T exception
new ArrayList<>(1)
initialCapacity > 1 << 30
Thread.sleep(401)
s.elapsed(TimeUnit.NANOSECONDS)
bigEndian.order()
Preconditions.checkNotNull(worker,"worker")
Size.kilobytes(16)
UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()
mLocalAlluxioClusterResource.get().getWorker()
endPosition.getPosition() <= logfileoffset
GL.glDrawArrays(mode,first,count)
testProviderConfig()
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEYVALUE_ENABLED,"true")
ran.nextInt(250)
Exception t2
System.currentTimeMillis()
getTupledSet()
graphModel.getUndirectedGraphVisible()
new StringBuilder(1024)
Exception e
valueClass(NullWritable.class)
ImmutableList.copyOf(result)
LinkageError ex
assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions("-Xlint:-processing","-implicit:none")
ChronicleEngineEndpoint.class
lookupLink(parseName(name))
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
numTouched >= 1
app.getAudio().newAudioRecoder(44100,true)
id=10832
mTestStream.getFlushedBytes()
QuotaCache.this.namespaceQuotaCache.containsKey(ns)
this.nameDefinitionMultimap.remove(name,def)
TABLE_FINISH
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)
AbstractBootstrap<ServerBootstrap,ServerChannel>
fLines.addElement(st.nextToken())
channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))
content.contains(expected)
Arrays.asList("/css/**","/js/**","/images/**","/webjars/**","/**/favicon.ico")
!Values.UPGRADE.equalsIgnoreCase(connection)
GL.glGenTextures(n,textures,Memory.getPosition(textures))
assertThat(response).isEqualTo("Ok.\n")
this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
items[16]
i <= getATN().maxTokenType
!paused.get()
GatherGetterAndSetterProperties.update(compiler,externs,root)
public Builder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
log.err("Could not annotate via server! Trying to annotate locally...",t)
MetricRegistry localRegistry
columnType.equalsIgnoreCase("string") || columnType.toLowerCase().startsWith("char") || columnType.toLowerCase().startsWith("varchar")
Iterable<T>
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
paused.set(true)
GatherGetterAndSetterProperties.gather(compiler,mainRoot)
authManager.refresh(conf,new HBasePolicyProvider())
(short)0600
id=15
!this.mrwork.getHadoopSupportsSplittable()
((Number)s.first()).longValue()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
getRegistry().bind("myTable",ht)
sb.append(nc)
lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
LOG.info("Unable to read HTTP response content",e)
Exception.class
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString())
offset * 6
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
bucketerContext.update(context.timestamp(),context.currentWatermark(),currentProcessingTime)
new Box2DTestCollection()
assertTrue("reuse-address",networkConfig.isReuseAddress())
config.trustStoreLocation == null
getLock(target)
node1.isEquivalentToTyped(node2)
values[i] == value
sizeNeeded > items.length
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
getRegistry().bind("myFilter",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )
i=0
(t instanceof MetaException) && t.getMessage().matches("(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*") && !t.getMessage().contains("java.sql.SQLIntegrityConstraintViolationException")
info.getRegionNameAsString()
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable,false)
getConcept() != null && getConcept().getName() != null
fMethodDescriptions.putIfAbsent(method,description)
Preconditions.checkNotNull(manager,"manager")
future.isDone()
restEnableGzip=true
getConcept() != null && getConcept().getDescription() != null
Thread.sleep(50)
servletPath.equals("/") || servletPath.equals("/*")
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
metaData.getColumnLabel(1)
info.getRegionNameAsString()
idleTimeout < 30000 && idleTimeout != 0
5 * Bytes.SIZEOF_BOOLEAN
getClientConnectionManager()
exportAttributes && attributeModel != null
executor.execute(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
line.toString(charset)
public Object getBean() throws NoBeanAvailableException {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
pId + BASE_FILE_NUMBER
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
IllegalStateException nsee
db.createIndex(new BasicDBObject(FIELD_UPDATED_AT,1).append(FIELD_UNCOMMITTED_ENTRIES,1).append(FIELD_WRITTEN_MESSAGES_1M,1),new BasicDBObject("name","compound_0"))
args.length > 1 && args[1] instanceof String
TypeUtils.getKoltinConstructor(constructors,paramNames)
new ImportControl(pkg,regex)
new IllegalArgumentException("the ast is null")
getRequestMethod != null
heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask
config.getMaxQueryMemoryPerNode().toBytes() <= maxMemory.toBytes()
getCamelContext().getTypeConverter().convertTo(int.class,timeout)
IS_EMPTY + 1
executor.execute(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
ppiY / 2.54f
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
edge.setDirection(edgeDefault)
new DynamicAwareEntry("https://localhost:8443/test",null,null,null)
new ServletException("non-HTTP request or response",e)
data.position()
node.getLifecycleService().shutdown()
conf.getRestBaseURL()
assertMockEndpointsSatisfied(30,TimeUnit.SECONDS)
index > maxHeadersLength - headersLength
type.getDataFormat(routeContext)
l.onResume(request,response)
conceptToValidate.getUuid()
mTestStream.getFlushedBytes()
new LwjglPreferences(name,".prefs/")
REAL_DRIVER.quit()
DEFAULT_MAX_QUERIES=4
engine.execute(cypher).dumpToString()
GatherGetterAndSetterProperties.update(compiler,externs,root)
new DatabaseFormatterPostgres()
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractAclCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
"Deleting existing file: " + target
bigEndian.order()
assertEquals(1234,deserialized.getOwnedEntryMemoryCost())
new RunnableAdapter<T>(task)
LOG.error(getName() + " caught: ",e)
assertEquals(response.getStatusCode(),200)
logger.trace("myq ReturnCode: {}",returnCode)
!rootRescanned
assertEquals(avDegree,0.5)
registrar.checkExisting(added)
TimeUtils.millis()
timeout=30000
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","two","three")
lock.lock(10000,TimeUnit.MILLISECONDS)
logger.debug("Receive queue TAKE: Length={}",recvQueue.size())
2 < statuses.size()
logger.trace("Creating Object {}",count.getAndIncrement())
logger.fine("Computing Control Flow Graph")
ufsPath.toString()
ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())
LOG.error("Halting process: ShellBolt died.",exception)
DEFAULT_MAX=4096
DataStreamSink<OUT>
Integer.parseInt(sessionTTL)
!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
new UnsupportedOperationException(getClass().getName())
Integer.parseInt(quantifier)
buffer.remaining()
createOrcWriterOptions(oi,conf,cacheWriter,allocSize)
!Objects.isNull(value)
!file.getName().startsWith("branched-")
nodeEngine.getSharedService(LockService.SERVICE_NAME)
log.debug(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
field.getType()
c.writeAndFlush("[you] " + msg + '\n')
Integer.toString(types.size())
resource.getUser(req,AUTHORIZER_NAME,user,"",null)
logger.fine("Expanding Jquery Aliases")
i <= getATN().maxTokenType
includedGroup == null
mapper.writeValueAsBytes(segment)
public Long getNewerThan(){   return newerThan; } 
new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask,0.7f)
block.useSourceInfoIfMissingFromForTree(exprRoot)
page=DATABASE_TABLES_AND_USER
Status.createStatuseList(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
model.calculateBoundingBox(bbox)
order.isCurrent() || order.isFuture()
public LocalQueryRunner printPlan(){   printPlan=true;   return this; } 
assertEquals(5,lm.getFields().size())
expectedCountsForADoc(weights,e4Update,ind)
Long.parseLong(args[1])
type.getName()
connections.get(target)
System.currentTimeMillis()
encounter.getObsAtTopLevel(true)
raw.getOutParameters()
public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new SslContextBuilder(false)
@QueryParam("createdTimeInterval")
commandLineArguments.isLocal() || commandLineArguments.isDebug()
Throwable cause
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
Assert.assertEquals(new InetSocketAddress("RemoteMaster3",defaultPort),masterAddress)
connectionManager.markOwnerConnectionAsClosed()
new SslContextBuilder(true)
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
connection.hlen(key)
page.getLogicalSizeInBytes()
container.getAttributeModel().getEdgeTable()
Thread.sleep(2000)
ArrayUtils.subarray(args,3,args.length)
localCache.put(name,cacheEntry)
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket","crap")
"Excluding secondary region " + bestRegionReplica + " - trying to find a different region to refresh files."
getTablename().getName()
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
InetAddress.getByName("127.0.0.1")
Throwable e
EgoBuilder.class
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
amq.getConfiguration().getOrCreateConnectionFactory()
id=10864
ImmutableList<String>
content.contains(expected)
object == null
new MalformedException("Unrecognized message placeholder referenced: " + phName,node)
logger.debug("Error connecting to Plex",e)
e.toString()
response.getStatus().getCode() / 100
new CommandLineException(result.toString())
historicState(item,timestamp,serviceName)
Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
actor.addCaptureListener(listener)
times + BASE_FILE_NUMBER
log.debug("Error while closing command context",exception)
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address))
getTupledSet()
worldVertices.length != localVertices.length
latch.await(25,TimeUnit.SECONDS)
c > ic
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)")
basicInvocation.potentialResponse != null
ImmutableList<PairedStats>
jniGetLocalAnchorB(addr,tmp)
config.getClientNumThreads()
connectionManager.markOwnerConnectionAsClosed()
mock.expectedBodiesReceivedInAnyOrder("Hello World 3")
converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
CompletableFuture<Void>
removeQuotes(timestring.trim())
/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } 
GL20.glUniformMatrix4fv(location,transpose,value)
mFs.mkdirs(new Path(path))
methodName.startsWith("save") || methodName.startsWith("create") || methodName.startsWith("update")
endTracksTo("main")
methodName.equalsIgnoreCase("scan")
out.writeBytes(mask)
messageHandler.responder()
getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)
ChannelBuffers.wrappedBuffer(bytes,0,length)
rsMeta.getColumnLabel(i + 1)
assertEquals(11,lm.getFields().size())
factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)
sizeNeeded > items.length
app.configuration().getString("timezone","")
assertEquals(counter.get(),0)
Integer.parseInt(options.getMaxKeys())
LOG.warn("delete failed: {}",e.getMessage())
i <= maxIndex
prop.getParamValue()
taken > 150
out.writeFloat((Float)obj)
LOG.warn("Promotion of block " + blockId + " failed.")
simple.getToSentDate()
(ObjectSerializer)value
entry.getValue().health().transformDeferred(this.timeoutCompose)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
id=10869
Gson.class
actor.addCaptureListener(listener)
Thread.sleep(500)
end + " End Message Interceptor"
CompletableFuture<Void>
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
event.isResuming() || event.isCancelled()
dimensionsSpec.getDimensionNames()
hashSymbols.values()
id=22
getter.getType()
System.currentTimeMillis()
id=10997
OpenmrsProfileWithoutMissingModule.class
this(maxFrameLength,lengthFieldOffset,lengthFieldLength,lengthAdjustment,initialBytesToStrip,false); 
Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
event.isCancelled()
lookup="java:/ConnectionFactory"
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "weight".equals(key)|| "label".equals(key)
mTfs.setPin(mTfs.open(path),true)
Assert.assertEquals(0,stringNumber)
callTimeout=5000
!"true".equalsIgnoreCase(value)
GL11.glTexParameterfv(target,pname,params)
new UnsupportedOperationException(getClass().getName())
BlobStoreUtils.class
mock.message(0).arrives().between(6,9)
builder200.build()
getConnectTimeout()
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.",e)
id=3
log.error("Error while closing command context",exception)
Throwable exception
(int)timeoutMs / 1000
uncompressedProto.length < 1800000
amq.getConfiguration().getOrCreateConnectionFactory()
new Neo4jGraph(database.graph,false)
targetDirectory.file("unwritable")
incomingMessage.setTransactionCanceled(true)
assertClusterSizeEventually(2,nodes[0])
Status.createStatuseList(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
writtenIntermediatePhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()
player.playSound(location,soundArg,(float)minimumVolume,(float)pitch)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
deployOneTaskTestProcess()
content().duplicate()
"Requeuing shutdown because rootScanned: " + rootRescanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
PORT_2=8180
getPath("checks/javadoc/Input_01.java")
LOG.fatal("Cannot run ThriftServer",e)
registry.bind("blogService",new BlogService())
a.length > count()
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
new S_Command("00FE30",1,20.0)
Engineer manager=new GnomeEngineeringManager(); 
getConnectTimeout()
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
parameterIsPrimitiveOrNullable(func,i)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ CONVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
log.rollWriter(true)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
10 * 1024 * 1024
Thread.sleep(300)
cache.remove(r)
GL20.glUniform1fv(location,v)
request.getPathInfo()
mMountTable.resolve(getPath(dir)).toString()
4 * Constants.KB
DEFAULT_RM_ACL_ENABLE=true
Arrays.asList("Java","CSharp","Python2","Python3","Node","Cpp")
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js","webgl.js")
logger.debug("gave up waiting for query reply from device {}",m_address)
id=10861
90
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
id=19911
modulePath.split(File.pathSeparator)[0]
LOG.warn("OpenTracing: Failed to capture tracing data",t)
ImmutableSet<ImplementationMethodDescriptor>
entry.getHeader().getEventLength() * 6
Thread.sleep(2000)
exchange.getIn()
this.transactionsRepository.getTransaction(this.xidTransactionID)
decoder.readInbound()
isTop() || isUnknown() || objs == null && typeVar == null
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
4 * Bytes.SIZEOF_LONG
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
longValue != 0
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertEquals(12,events.size())
id=10834
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
Throwable t
GraphDatabaseSetting<Long>
!status.isDir()
LOG.error("Cache flusher failed for entry " + fqe,ex)
size * 1.8f
collisionPoints.get(0)
framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)
names[0]
"" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE
MockReset.after()
methodName.equalsIgnoreCase("scan")
mm.tryLock(key,10,TimeUnit.SECONDS)
assertClusterSizeEventually(2,data2,data3)
conf.getRestBaseURL()
1 / 5f
sizeNeeded > items.length
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)
props.getProperty("exporter","com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter")
GatherGetterAndSetterProperties.update(compiler,externs,root)
t3.getSort()
initialCapacity > 1 << 30
localAddress != null && getParent() == null
holder.addCallback(callback)
LOAD_FACTOR=0.75f
public class XpathRegressionImportControlTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlOne.xml"));     final String[] expectedViolation={"3:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlTwo.xml"));     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlFour.xml"));     final String[] expectedViolation={"4:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT[./DOT[@text='Scanner']]");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
CompletableFuture<Void>
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
mListView.getListChildAt(index)
1
LinkedHashMap<String,ASTNode>
mRecomputeLauncherService.shutdown()
NUM_TOUCHES=20
uncompressedProto.length < 2570000
target.setField(0,edge)
defaultMaxRowsInMemory=75000
"Stream " + importerName
node1.isEquivalentToTyped(node2)
request.getPathInfo()
status.getLastModificationTimeMs()
return 0; 
new IllegalArgumentException("Command not found in spout message: " + shellMsg)
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,String.class)
in.readData()
assertThat(response).isEqualTo("Woop woop. yay\n")
Throwable exception
item.annotationType()
test("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
mock.expectedMinimumMessageCount(3)
id=44
bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
new EnumValidator<Mode>(Mode.class,false,true)
new RuntimeException("Error during multilang processing",e)
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
expirationTime == Long.MAX_VALUE || expirationTime < 0
checkArgument(child.parent == null,"Cannot add already-owned child node.\nChild: %s\nExisting parent: %s\nNew parent: %s",child,parent,this)
mjCtx.getOldMapJoin() == null || setReducer
"wrong partition, expected: " + getPartitionId() + " but found:"+ partitionId
handlers.length == 0 || handlers[0] == null
MANAGEMENT_API_MICRO_VERSION=1
websocketComponent.setMaxThreads(20)
Reflection.methodHandle(type,"sizeOf")
bindingGroup.get(PORT_OFFSET).asInt() > 0
new RuntimeException("error initializing deserializer: " + deserializer.getClass().getName(),e)
this.loggerContext
new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
log.info(error,cause)
System.currentTimeMillis()
RCFileMergeMapper.jobClose(outputPath,success,job,console)
request.getPathInfo()
ReactiveHelper.schedule(runnable,"Multicast next step")
LOG.warn("PriviledgedActionException as:" + this + " cause:"+ cause)
new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)
s.toString().toLowerCase()
option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
LOG.warn("Async Kafka commit failed.",cause)
ImmutableList<SuggestedFix>
ParseUtils.parseS300THHumidity(S300TH_DATA_1)
mjCtx.getOldMapJoin() == null || setReducer
GL11.glGetIntegerv(pname,params)
Maps.newTreeMap()
DatabaseDescriptor.getListenAddress().getHostAddress()
clientConfig.property(ClientProperties.READ_TIMEOUT,2000)
setComplete(mLength)
mock.expectedMessageCount(4)
msg.nextOffset()
initialCapacity > 1 << 30
attribute.getDefinition().getMarshaller()
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
new IncrementalIndexSegment(rtIndex,null)
new Duration(30,SECONDS)
config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)
processor.open(w2,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
activeFrom.getTime()
part.getPartitionPath()
JavaConversions.asJavaIterable(logManager.allLogs())
"Using bind address: " + bindAddress
getClientConfig().getAddresses()
new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null,null)
scanFeatures(getKarafFeatureUrl(),"jetty")
assertOpenEventually(countDownLatch,300)
classResolver.resolveMandatoryClass(type)
sliceInput.getRetainedSize()
cs.getNString(columnIndex)
logger.warn("",ex)
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),delete,true)
GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))
Color.fromRGB(0x253192)
static public final PowOut fastSlow=pow2Out; 
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT,true)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRole"),e.getCause().getMessage())
getTokenDisplayNames()
LOG.warn("OpenTracing: Failed to capture tracing data",t)
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
mockRegionInfo.isMetaTable()
Assert.assertEquals(values,expected)
LOG.debug("Ignoring duplicate journal entry with SN {} when next SN is {}",newSN,mNextSequenceNumberToRead)
@ConditionalOnEnabledHealthIndicator("diskspace")
!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
T deserialize(byte[] b); 
prefSize(new Fixed(width),new Fixed(height))
timeout=1800000
7 * Bytes.SIZEOF_LONG
assertFalse(CompressionTest.testCompression("SNAPPY"))
clusterProperties.getMaxRedirects()
AsyncResult<Inet4Address>
visitor.visitTypeLiteral(this)
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
checkArgument(keyGroupRange.contains(keyGroup),"%s does not contain key group %s",keyGroupRange,keyGroup)
strategiesBuilder::customMessageReader
setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
props.getProperty(propName)
event.get(factory.getName())
connection.psubscribe(jedisPubSub,patterns)
file.getAbsolutePath()
getEndpoint().getConfig().getIndexType()
@ConditionalOnEnabledHealthIndicator("rabbit")
new StringBuilder(256)
DiagnosticType.warning("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
j++
ReactiveHelper.scheduleSync(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
waitLatch.await(1000,TimeUnit.MILLISECONDS)
a.length > count()
return true; 
bar.setResultWaitTime(3500)
twitter.getDailyTrends()
SOURCE_PATH.deref()
(Integer)strategy.getOrNull("test",third)
@ConditionalOnEnabledHealthIndicator("diskspace")
edge.setDirection(EdgeDirection.DIRECTED)
Thread.sleep(200)
StringUtils.subString(url,"weburi-",".json",true)
url3 != null
bigEndian.order()
contentType != null && charset == null
!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
end + " End Message Interceptor"
LOG.debug("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
id=13107
public class XpathRegressionNestedForDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
getResponse("GET","/books/" + bookId,null)
executor.scheduleAtFixedRate(this,period,period,unit)
uiAclHandler.permit(reqContext,op,topoConf)
tabAlias.equalsIgnoreCase(tableAlias)
id=13
new ObjectTagging(new ArrayList<Tag>())
CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
latch.await(600,TimeUnit.SECONDS)
Double.isNaN(rate) || Double.isInfinite(rate)
_committedTo != lastCompletedOffset
Long.parseLong(args[2])
ChannelBuffers.wrappedBuffer(request.getByteData())
OptionalIdentifiedDefinition<FromDefinition>
annotations.remove(node)
dictionary.put(words[0],words[2])
StringBuilder sb=new StringBuilder(); 
512 * 1024 * 1024
edgeColumn.getIndex()
logger.fine("Renamed " + instancesRenamed + " instances of "+ propsRenamed+ " properties.")
propResource.get(BOOT_TIME).asBoolean(false)
input.mark(bufferSize)
out.writeBytes(mask)
mMountTable.resolve(getPath(next)).toString()
Assert.assertEquals(9300,Utils.calculateHeapSize(10000))
cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)
logger.finest("Optimized Selector: " + selector.getClass().getName())
mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
mock.expectedMinimumMessageCount(2)
System.nanoTime()
Class.forName(name,false,getClass().getClassLoader())
new UnsupportedOperationException(getClass().getName())
from("direct:a").delay(2000)
i > 0
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
log.info(message,exception)
this.assignmentManager.isRegionInTransition(regionInfo) != null
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
configElements[0]
new Path(bucketPath,"test-" + i + '-'+ j).getPath()
mock.expectedMinimumMessageCount(2)
new ModelNode().set(60000L)
sizeModeClass.equals("ProportionalSizeMode")
text.contentEquals(((TextButton)button).getText())
timeout=1800000
body.toByteArray()
callTimeoutMs=10000
getJSDocType(operation)
LOG.warn("Could not parse syslog message. Not further handling.",e)
public Integer getPort(){   return this.port; } 
buffer.limit()
GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))
that.getPath() == null && getPath() != null
LOG.warn("Cannot create the SAXParser XMLReader, due to {}",ex.getMessage(),ex)
1
ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
logger.warn("InfluxDB is not yet connected")
getAnimation(id,false)
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
redeliveryDelayResult > maximumRedeliveryDelay
JsonObject.createObjectMapper().getFactory()
new AMQPProducer(metricRegistry,configuration,serverStatus)
p >= 0
endTracksTo("main")
LOG.info("Unable to parse HTTP response content",e)
logger.trace("Return Object {} now at size {}",b,count.getAndDecrement())
Object transformationResult=JsonPath.read(source,JSonPathExpression); 
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
analysis.getTypeWithCoercions(expression)
initialCapacity > 1 << 30
buffer.put(indices,offset,count)
yx*=ly
c.setLong("hbase.hregion.memstore.flush.size",25000)
LOG.warn("Unable to close socket selector")
System.arraycopy(value,0,chars,length,value.length)
visitStatement(node,context)
failure == null
request.getServletPath()
IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(),jpa,"timestamp",msg.getTimestamp())
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
indexFile.isFile()
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n",version,expectedPath)
args.length != 2
factory.terminateAll()
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,true)
context.var("long",2)
user.getSystemId() == null || user.getSystemId().equals("")
log.info(error,cause)
e.toString()
type.isInterface()
telegram.getTimestamp() > currentTime
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)
KeySequenceNumber.class
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING,true)
attribute.getDefinition().getMarshaller()
b.getMessage()
lights != null && lights.shadowMap != null
Lists.newArrayList(stream1,stream2)
Thread.sleep(500)
equal=true
@GET @Path("/{petId}") @ApiOperation(value="Find pet by ID",notes="Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message="Invalid ID supplied"),@ApiResponse(code=404,message="Pet not found")}) public Pet getPetById(@ApiParam(value="ID of pet that needs to be fetched",allowableValues="range[1,5]",required=true) @PathParam("petId") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,"Pet not found");   } } 
n.getNodeData().getLabel().toLowerCase().equals(str)
map.set(key,"value",5,TimeUnit.SECONDS)
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS)
id=2
ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
input.entrySet()
e.toString()
proxy == null || proxy != view.getAnimation()
super.getView(position,contextualUndoView.getContentView(),contextualUndoView)
idAnnotation != null && !method.isBridge()
new NagiosNscaStub(25669,"password")
assertThat(getField(graphite,"port")).isEqualTo(2003)
MockReset.after()
LOG.warn("register druid-driver mbean error",ex)
that.getPath() == null && getPath() != null
buffer.remaining()
getOrCreateContainer().forceUnlock(dataKey)
registry.bind("myManager",cacheManager)
id=10835
Exception t2
engine.execute(query).dumpToString()
position <= mSrcDragPos
(getSource().y() + getTarget().y()) / 3f
new RuntimeIOException("Error opening output file",e)
id=6
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
logger.trace("Invalid Account Credentials")
KeyManagerFactory.getDefaultAlgorithm()
request.getPathInfo()
simple.getToSentDate()
expirationTime == Long.MAX_VALUE || expirationTime < 0
new IndexOutOfBoundsException()
atlasFile.name()
entry.getValue().getManagementInterfaceMicroVersion()
0.0 == CheckUtils.parseFloat(text,type)
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
/**   * Represents black  */ BLACK('0',0x00)
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
calendar.set(Calendar.YEAR,2030)
progress.start(0.29f)
DEFAULT_OCTREE_WIDTH=50000
SecurityActions.getModuleClassLoader(module)
case PLAYER_JOIN: 
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription(),target.isInterface())
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
request.getPathInfo()
LogUtils.initializeDefaultTestConsoleLogger()
new Color(pixels[i],true)
path.lastIndexOf("/") <= 0
left.getFieldName().equalsIgnoreCase(right.getFieldName())
return true; 
new Argument().setIndex(1)
LOGGER.warn("Unable to process JSON",exception)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()
new DatagramDnsQuery(null,addr,1)
k < FILES
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
Assert.assertNotNull(ex.getCause())
newId >= max
LlapServlet.class
Context.getVisitService().getAllVisitTypes(true)
initial=100
Database.builder(database)
Thread.sleep(300)
scriptsToUpdate.add(n)
url.getServiceKey()
loadingSegments.get(segment.getIdentifier(),server.getTier())
public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
stat.st_mtim.tv_nsec.longValue()
DataStreamSink<OUT>
outputBatchSize=25
testOffset=4875454L
LinkedHashMap<String,Operator<? extends Serializable>>
runAllTasks()
addProperty(secondNode,"band","The Clash")
incomingEdges.containsKey(dest)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
/**   * Retrieves X.  * @return a value  */ public T1 getX(){   return null; } 
new CheckPermission().of("all").against("deploy").expect(true)
context.setDelayer(2000)
servletClass != null || filterClass != null
super.getView(position,contextualUndoView.getContentView(),contextualUndoView)
public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
!list.isEmpty()
plugin.isEnabled()
new PeepholeSubstituteAlternateSyntax(true)
this(host,port,threadName,queueSize,timeout,sendBufferSize,DEFAULT_BUFFER_SIZE); 
toEventData(key)
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL
yamlFactory.createParser(input)
julLogger.severe("Hello world")
runTasks & 0x3F
newPacked[j]
BatchServerInventoryViewProvider.class
field.getType()
Bytes.toBytes(tableNameOrRegionName)
option.getJavaType()
servers == null || servers.isEmpty()
fields.getOrDefault("last_seen",0)
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","three")
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))
initialCapacity <= capacity
report(n,MISPLACED_ANNOTATION,"@abstract","constructors cannot be abstract")
Color.fromRGB(0x1E1B1B)
value.length() <= 9
ImmutableList.of(sourceNode)
lock.tryLock(30,TimeUnit.SECONDS)
1
node1.isEquivalentTo(node2)
Long.parseLong(args[1])
historicState(item,timestamp,serviceName)
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
new StringLengthValidator(1,true,true)
incomingMessage.getMessagePayloadByte(0)
WebSocketEventListener.class.cast(l).onClose(event)
buffer.indexOf(partToMatch,indexOf + replacement.length())
tJvmGcDetailed.getJvmGcNewTime()
request.getDueDate()
srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
Response schema(Property property); 
graphModel.getGraph().getNodeCount()
ImmutableList.copyOf(listeners)
postAgg.getName().equalsIgnoreCase(metricName)
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.")
person.getPersonVoidReason()
beansXml.getOrCreateAlternatives()
this(true,false); 
new SimpleProxyPool(httpProxyList,false)
test("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
version == null || version.equals("")
JSError.make(getName(),-1,-1,ModuleLoader.MODULE_CONFLICT,getName())
Color.fromRGB(0x6689D3)
mShowsDialog
12 * ClassSize.REFERENCE
System.out.println(hostResult)
endTracksTo("main")
req.getPathInfo()
statistics.addGetTimeNanos(System.nanoTime() - start)
authentication.has(USERS)
id=10859
session == null
mBuffer.remaining() >= toRead
assertFalse(predicate.apply(pickleEvent))
heatpumpValues[66]
offset == 0 || millis % offset == 0
GenericUDFEnforceConstraint.class
initialCapacity > 1 << 30
ignoreUnknownFields=true
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
getTokenDisplayNames()
status.isDir()
LinkedHashMap<String,Operator<? extends Serializable>>
Generics.newTreeMap()
new DatabaseFormatterDb2()
new HashCollisionNode(edit,hash,count,array)
new StringBuilder(28)
children == null
Optional.absent()
pId + BASE_FILE_NUMBER
Class.forName(name,false,getClass().getClassLoader())
setColors(color)
cause.getCause()
System.nanoTime()
HiveRexUtil.simplify(rexBuilder,node)
this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
ctx.writeAndFlush("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
endTracksTo("main")
getDatabaseSchema() != null && getDatabaseSchema().length() > 0
new GdxRuntimeException("Error during Vorbis decoding.",e)
setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
min.x <= max.x
EnterpriseMapPublisherCreateCodec.decodeResponse(response).response
client.getState().setProxyCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally&& !"__proto__".equals(propertyName)
ChannelHandler handler=handler(); 
exportAttributes && attributeModel != null
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)
@UriParam(label="producer",defaultValue="true")
qp.isExclusiveMaximum()
mock.expectedBodiesReceivedInAnyOrder("Hello World 2")
from("direct:tap").delay(1000)
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
ClosedChannelException e
new GetExecutionVariableInstancesCmd(executionId,variableNames,true)
Thread.sleep(800)
processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
analysis.getTypeWithCoercions(windowFunction)
zController.enqueue(doRequestStop())
new StringBuilder(726)
urlToNotify.openConnection(proxyToUse)
interceptorParamTypes.length - 3
connections.get(target)
!getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)
setColors(color)
mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",true))
trimmedLine.contains(delimiter)
@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } 
/**   * The resource.   */ private R mResource; 
((ChannelProgressivePromise)promise).tryProgress(progress,-1)
target.addTaskAndWakeup(task)
ImmutableSet<Key<?>>
mBlockRemovalService.shutdown()
Exception e
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false,runtimeOnlyFlags)
newNode.makeNonIndexableRecursive()
this.getDefaultReadOnly()
value.toBigInteger()
c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
maxSize < (used / 1024 / 1024)
ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsResource("META-INF/batch-jobs/myJob.xml")
new RagManager()
!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
fireMessageReceived(ctx,message,e.getRemoteAddress())
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
conceptAnswer.getAnswerConcept()
1024 * 128
((ExecutorService)executor).isTerminated()
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
new StringBuilder(245)
DiagnosticType.error("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
statistics.addGetTimeNanos(System.nanoTime() - start)
id=10860
IOException.class
items[19]
logger.fine("Creating extern file for exports")
this == OTI_ONLY
ImmutableSet<ImplementationMethodDescriptor>
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
ComponentOption that=(ComponentOption)o; 
String key
t.report(n,UNUSED_PRIVATE_PROPERTY,propName)
sentencesFile != null
!byteBuf.readable()
GL20.glGetVertexAttribfv(index,pname,params)
id=13108
reg.bind("localhost:" + port,env)
targetCondn == null || (nodeCondn.size() != targetCondn.size())
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
log.error("PID contains identifier with no assigning authority")
topicRegistrations == null || topicRegistrations.isEmpty()
alluxioUriToLoad.getPath()
index >= n
cachedMemoryUsageBytes <= softMemoryLimitBytes
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
partId == null
prop.getParamValue()
cache5.setColors(red)
_availCPU + amount
intBuffer.clear()
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
DEFAULT_MAX_METHODS=100
ImmutableList<ManyValues>
Thread.sleep(200)
cache.putRecord(key,record)
!webSocket.resource().getAtmosphereResourceEvent().isSuspended()
Metric<Integer>
defaultCometSupport(defaultToBlocking)
lookup="java:comp/ds"
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of("deploy").against("deploy").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of("deploy").against("all").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of("all").against("deploy").expect(false).run();   } } 
mouseEvent.getModifiersEx()
from("direct:b").delay(1000)
row == null || row.size() == 0
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
manualClock.addTimeMs(1001)
view.getClusteredLayerDegree(absNode)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
getConnectTimeout()
new Color(0xbfbfbfff)
times + BASE_FILE_NUMBER
exchange.getPartitioningScheme().isReplicateNullsAndAny()
Long.parseLong(args[2])
!hasNextChunk()
headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
logger.trace("Received MyQ  JSON: {}",dataString)
layout.setReleaseLabel(label)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
getBatchId()
new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup,SQLParserFeature.StrictForWall)
idx[j] > 0
postAgg.getName().equalsIgnoreCase(topNMetricName)
Exception e
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
new DefaultPropertyNamePatternsMatcher(delimiters,"aaa","bbbb","ccccc")
resultEndpoint.setMinimumResultWaitTime(900)
new String(text.getBytes(),0,text.getLength())
512 * 1024 * 1024
System.nanoTime()
d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
TestSuiteEnvironment.getServerAddressNode1()
initialCapacity > 1 << 30
instance.managementService.destroy()
getPath("checks/javadoc/Input_02.java")
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
resource.terminate(input.getId(),extractorId)
N node
GatherGetterAndSetterProperties.gather(compiler,mainRoot)
mFileLength <= mBlockSize
TestSuiteEnvironment.getServerAddressNode1()
(System.currentTimeMillis() - lastAccessedTime.getTime()) >= timeout
latch.await(10000,TimeUnit.MILLISECONDS)
TEST_UTIL.getAdmin()
Preconditions.checkNotNull(path,"path")
logger.fine("Recording function information")
GL20.glUniformMatrix2fv(location,transpose,value)
statistics.addPutTimeNanos(System.nanoTime() - start)
args.length > 1 && args[1] instanceof String
timeout=1800000
log.warn("Annotation scanning mode loaded {} type converters. Its recommended to migrate to @Converter(loader = true) for fast type converter mode.",additional)
dirtyOutputBuffer() || currentPacket != null
CloudScanConfiguration.class
((Number)s.first()).doubleValue()
locator.getRegionLocation(regionName,true)
Preconditions.checkNotNull(worker,"worker")
size * 1.8f
ConcurrentHashMap<String,Channel>
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)
ImmutableSet.of("testStringRepresentation","testDataTypeValidationOnProperties")
mTestStream.getFlushedBytes()
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available),FormatUtils.getSizeFromBytes(quota - used - available))
Thread.sleep(500)
assertTrue(dr.isFailure())
item.annotationType()
registry.bind("myConf",new XmlConfiguration(getClass().getResource("/ehcache/ehcache-file-config.xml")))
return 405; 
log.debug("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
b.entrySet()
asList(4L)
Glue optionalGlue
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
Lists.newArrayListWithCapacity(resultMessages.size())
DEFAULT_SHUFFLE_PORT=13562
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null))
connection.remote().incrementAndGetNextStreamId()
RedisTemplate<Object,Object>
new Interval(startTime,endTime,ISOChronology.getInstanceUTC())
getPath("InputGenericWhitespaceEndsTheLine.java")
AcidUtils.getTableSnapshot(hive.getConf(),tbl)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
compressedProto.length < 380000
new ArrayList<>(3)
returnValue
file.name().endsWith(".etc1")
R resource
id=10
GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)
paramAttribute.split("\\.")
buf.discardReadBytes()
keySet.isEmpty()
this.categoryWithApiModel=category
T exception
context.getStreamCachingStrategy().getSpoolCipher()
o instanceof InternalAttribute
element.getLocalName()
level < RF_STATUS_LOW_SIGNAL
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
!hasNextChunk()
i > 0
calendar.getTimeZone().getRawOffset()
new StringBuilder(1024)
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
bundleContext.getBundle().getResource(uri)
Thread.sleep(2000)
-1
createRecord(value,now,expiryTime)
order.isCurrent() || order.isFuture()
"Invalid modules directory: " + bundlesDir
return true; 
GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))
new UnsupportedOperationException(getClass().getName())
(Source)value
request.getRemoteAddr()
ArrayBlockingQueue<BodyChunk>
jsonArray.toString(1)
assertPlanEquals(expectedPlan,actualPlan)
bufferSize < minAllocSize
bLocations[0].getHosts()
Generics.newTreeMap()
id=18
initialCapacity > 1 << 30
FilterModifWord.modifResult(result,forests)
analysis.getType(aggregate)
region.getReplicaId()
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
mapper.writeValueAsBytes(segment)
DirectMessage.createDirectMessageList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json"))
format(conf,true)
RetriesExhaustedException.class
put(TYPES,new MapTypeCaster(),Map.class)
new ServiceActivatorContextImpl(batchBuilder,serviceContainer)
Exception ignored
new Packet()
N node
uri.toString()
registry.bind("amazonSQSClient",clientMock)
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean","mock:result")
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",BASE_CLASS_ERROR)
endpoint.expectedMinimumMessageCount(1)
event.isCancelled()
E edge
globalExecutionStats.getStartedSplits()
nameTextField.getText()
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
clusterProperties.getMaxRedirects()
case BALD: 
super.hashCode()
Thread.sleep(2000)
Response description(String description); 
Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader())
new HazelcastInstance[nodeCount]
z.next_in[z.next_in_index++] != 0
Long.valueOf(p.getProperty(screenName + ".id"))
typeConverter.convertTo(XMLStreamReader.class,exchange,createNonXmlFilterReader(exchange,stream))
probeParentLoaderLast=false
~(1L << n)
Object value=nsDictionary.get(convertKey(key)); 
SetUtil.class
promise.setFailure(new ClosedChannelException())
Thread.sleep(500)
statistics.addGetTimeNanos(System.nanoTime() - start)
assertPlanEquals(expectedPlan,actualPlan)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
(Long)123L
new IllegalArgumentException("the ast is null")
3 >= buf.length - count
headRef()
map.tryPut(key,value,60,TimeUnit.SECONDS)
T exception
serializer.statementResult(mockExecutionResult(map("node",node[0],"rel",rel[0],"path",path,"map",map("n1",node[1],"r1",rel[1]))),false,ResultDataContent.rest)
TestUtils.randomByte() + 128
GL20.glUniformMatrix2fv(location,transpose,value)
@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
id=45
buffer.getUint8()
line.toString(charset)
status.isDir()
public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
holder.addCallback(callback)
attribute.getDefinition().getMarshaller()
Lists.newArrayList("timestamp")
new GetExecutionVariableInstancesCmd(executionId,variableNames,true,locale,withLocalizationFallback)
List<DelayedEntry>
hgraph.getTotalOutDegree(n)
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port),e)
singletonComponentInstance == null
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(false)
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName(),e)
type == VertexDataType.VertexBufferObject || Mesh.forceVBO
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
"Using bind address: " + bindAddress
assertContains(actualTables,expectedTables)
idAnnotation != null && !method.isBridge()
MAX_PRETTY_PRINTED_PROPERTIES=10
builder200.build()
config.getClass().getName()
FlatJoinFunction.class
path(14)
path.lastIndexOf("/") <= 0
MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)
GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))
new File(dex.getParentFile(),FilenameUtils.getBaseName(file) + "_dex2jar.jar")
webSocketProcessor.close(webSocket,1000)
id=8
queue.poll(15,TimeUnit.SECONDS)
Color.fromRGB(0x434343)
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IllegalArgumentException {   return JSON.writeValueAsString(object); } 
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",false,false,false)
assertEquals("There should be no files",0,files.length)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)
HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
log.error("Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s].",oldCommitMetadataFromDb,startMetadata)
logger.trace("attempting to login")
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
selectedFile != null && fileFilter != null
nameDefinitionMultimap.keySet()
new byte[14]
cSet.setConceptSet(this)
toEventData(key)
classResolver.resolveMandatoryClass(type)
emptyCheck.log(0,"msgKey")
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
r.getRequest(false)
c.getName()
authManager.refresh(conf,new HBasePolicyProvider())
getMockEndpoint("mock:test.after.1").expectedMessageCount(10)
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)
cookies.rowMap()
report(n,MISPLACED_ANNOTATION,"@abstract","static methods cannot be abstract")
configList == null || configList.size() == 0
outputFile.lastModified() <= grammarFile.lastModified()
Thread.sleep(1000)
outputBufferProcessors=3
super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,true,false); 
catalog.validateLanguageExpression(null,"simple",detail.getSimple())
GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)
!query.getDimensionSpec().preservesOrdering()
new SimpleDateFormat(format,JSON.defaultLocale)
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
initialCapacity > 1 << 30
item.annotationType()
new DataSize(40,Unit.MEGABYTE)
!mapServiceContext.hasRegisteredListener(mapName)
id=37
mock.expectedMinimumMessageCount(1)
N node
model != null && model.getSelectedLayout() != null
ch == '?' && JdbcConstants.POSTGRESQL.equals(dbType)
localY2 * cos
statistics.addRemoveTimeNanos(System.nanoTime() - start)
scaleX == 1
new ObjectRecordWithStats(key,value)
ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
i % dictionarySize
heartbeatTimeoutIntervalMs > 0L
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))
i == -1 || nsname.equals("/")
rs.getNString(columnName)
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF
BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
@InputMagicNumberIntMethodAnnotation(value=43)
GatherGetterAndSetterProperties.gather(compiler,externsRoot)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null))
times + BASE_FILE_NUMBER
index >= templateTypes.size()
estimatedLength < 0
timeMillis + MILLIS_IN
rSocketMessageHandler.serverResponder()
type.getConstructor(String.class)
DataStreamSink<OUT>
Status.createStatuseList(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
1
logger.debug("{} {}",errorCode,message)
"TcpIpConnectionManager configured with Non Blocking IO-threading model: " + inputThreadCount + " input threads and "+ outputThreadCount+ " output threads"
getClientConfig().getAddresses()
DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,JavaScopes.RUNTIME)
@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println("nodeCount = " + nodeCount);     System.out.println("operations = " + operations);     System.out.println("keyCount = " + keyCount);     Config config=new Config();     config.getReplicatedMapConfig("test").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName="test";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key="foo-" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println("---------------------");           System.out.println("key = " + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println("value[" + j + "] = "+ map.get(key)+ " , store version : "+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } 
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroupsIn(groups)
Map<String,Object>
items[27]
tempBlock.getPath()
edge.setDirection(edgeDefault)
proxyServer != null && !isSecure(uri)
HiveConf.setLongVar(jobConf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
FILES_BYTES * 1000.0
getMapNearCacheManager(nearCacheMember)
alluxioUriToLoad.getPath()
Files.deleteIfExists(dir.toPath())
endFunction("delete_column_statistics_by_table: ",ret != false,null)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
role.description().orNull()
ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
new IdentityHashMap<>()
contact.getWorldManifold()
LOG.warn("Cannot access storage directory " + rootPath,ex)
LOG.warn("OpenTracing: Failed to capture tracing data",t)
callTimeout=5000
scaleX == 1
person.getPersonVoidReason()
groupingSets.isEmpty()
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath","$jacocoData")
findDelegateForNewObject(name)
TIMEOUT_SECONDS=20
UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()
metric instanceof MetricsRate || metric instanceof MetricsString || metric instanceof MetricsHistogram|| metric instanceof ExactCounterMetric
Thread.sleep(130)
reg.bind(LDAP_CONN_NAME,getWiredConnection(ldapServer))
Primitive.longObjectMap(8)
retVal.setProperty(entry.getKey(),value)
inner.innerSetException((Throwable)result,true)
start.set(Calendar.DAY_OF_MONTH,startDay)
doInvoke(args.first(),(args=args.rest()).first(),args.rest())
request.getPathInfo()
gradHidden[nodeIndex]
System.identityHashCode(o)
relationship(19,c,"KNOWS",d)
addProperty(secondNode,"band","The Clash")
name != null && name.length() > 2
CommandUtils.convertMsToDate(files[2].getCreationTimeMs())
GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))
Assert.assertEquals(new InetSocketAddress(defaultHostname,20000),masterAddress)
route.setDelay(6000)
doTestPositive(301)
response.get(ROLLED_BACK)
size * 1.8f
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(1)
hash != 0
binder.bindConstant().annotatedWith(Names.named("tlsServicePort")).to(8291)
version == null || version.equals("")
file.getAbsolutePath()
public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } 
Calendar.getInstance(timeIsGivenInThisTimeZone)
checkArgument(prestoTypeParameters.size() == fieldTypes.size(),"Schema mismatch, metastore schema for row column %s has %s fields but parquet schema has %s fields",columnName,prestoTypeParameters.size(),fieldTypes.size())
new BranchedDataException("Unable to perform a mandatory sanity check due to an IO error.",e)
assertMockEndpointsSatisfied()
contentLength >= 0
implementationMethodDescriptors.build()
task.abort()
debug=true
f.getAttrs().getMTime()
log.infof("started ResourceAdapterService %s",context.getController().getName())
complete.expectedBodiesReceivedInAnyOrder("finish","stop","faulted","except")
messageHandler.responder()
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)
LOG.warn("Failed to delete path from UFS: {}",e.getMessage())
ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ,CLUSTER_CONFIG_ENTRY_READ)
id=5
@Nullable
factory.getEmbeddedServletContainer()
m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)
conf.getRestBaseURL()
TEST_UTIL.getAdmin()
assertEquals("val-2",mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE))
assertPlanEquals(expectedPlan,actualPlan)
lockForRescale()
len >= bits.length
id=10807
assertEquals(orig.getResponse(),expectedResponse)
TestSuiteEnvironment.getHttpAddress()
b.getAtmosphereResources().contains(r)
!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE
getConnectTimeout()
registry.bind("dummy",new ReactiveStreamsTestService("from-registry"))
mockRegionInfo.isMetaTable()
assertPlanEquals(expectedPlan,actualPlan)
config.getIdleConnectionTimeoutInMs() > 0 && requestTimeout != -1 && requestTimeout < config.getIdleConnectionTimeoutInMs()
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
resetTimeInSeconds * 1000L
javaBeanSerializer.getFieldValues(javaObject,json)
new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))
addKeys(externalClasses,DATE,"org.joda.time.LocalDate","java.time.LocalDate")
maxSize < (used / 1024 / 1024)
maxSize < (used / 1024 / 1024)
engine.execute(query).dumpToString()
uri.toString()
GL20.glGetShaderiv(shader,pname,params)
new File(value).toPath()
logger.trace("NODE {}: App version requested but version is unknown",this.getNodeId())
Outcome.noMatch("missing database driver " + driverClassName)
Float.parseFloat(encoding.substring(equalsPos + 1))
timeOut=240_000
that.getDomain() == null && getDomain() != null
titleTextField.getText()
JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,"Undecomposable expression")
setParams().xx()
obj.getRequiredTokens()
ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())
public Builder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
Protocol.read(inputStream)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
private final PropertyKey mPortKey; 
cached.get(key)
request.getPathInfo()
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
name != null && name.length() > 2
new OptiqSemanticException("Invalid Column Reference: " + grpbyExpr.dump())
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
IOUtils.toString(stencilsetStream,"utf-8")
((Number)s.first()).longValue()
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
Pattern.compile(CURRENT_DIR,Pattern.LITERAL)
logger.warn("InfluxDB is not yet connected")
new CancelJobSupervisorOperation(name,jobId)
GatherGetterAndSetterProperties.gather(compiler,externsRoot)
assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)
context.var("long",2)
LOG.error("Error while deserializing payload",e)
data + end
this.cli.jar("secure.groovy","data-jpa.groovy")
Thread.sleep(10000)
port >= 65536
free(path,true)
assertOpenEventually(countDownLatch)
adapter.getCustomArgumentResolvers()
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString(),funType.toString())
public Builder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } 
statistics.addGetTimeNanos(System.nanoTime() - start)
domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
latch.await(10000,TimeUnit.MILLISECONDS)
javaWriter.emitSingleLineComment("foo")
TimeUnit.SECONDS.toMillis(timeoutSeconds)
this.thrown.expectMessage("File must exist")
currentMode == MODE_PULL_DOWN_TO_REFRESH
getJSDocType(cp)
ExceptionUtils.getStackTrace(th)
public class XpathRegressionLeftCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
(JobFound)result
getConnectTimeout()
final ImportControl root=ImportControlLoader.load(new File(getPath("import-control_WithNewElement.xml")).toURI()); 
logger.trace("rapidRefreshFutureEnd stopping")
SpringBootVersion.class
gen.generateParser(false)
JavadocTagContinuationIndentationCheck.class
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
taken > 50
typeConverter.convertTo(XMLStreamReader.class,exchange,stream)
Integer.parseInt(st.nextToken())
getPreferences().save(fos,"")
queueLength.asString()
grammar.getTokenDisplayNames()
params.getInt("numPages",PageRankData.getNumberOfPages())
e.toString()
assertEquals(12,visitor.getConditions().size())
getConfiguration().getOrCreateConnectionFactory()
hz1.getLifecycleService().shutdown()
routeList == null || routeList.isEmpty()
ImmutableList<Stats>
put.getWriteToWAL()
resources.size() >= maxSuspendResource.get()
getTypeDeclaration(swaggerModel.getAdditionalProperties())
factory.getProxy(getClass().getClassLoader())
entry.getCreateStore()
"value".equals(key) || "weight".equals(key)
ImmutableMultiset<String>
inStream.remaining()
testClosureFunction("goog.isArray",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)
max=2000
name.toString()
zController.enqueue(doRequestStop())
new byte[12]
Bytes.toBytes(tableNameOrRegionName)
new SemanticException(TYPE_MISMATCH,node,"%s",e.getMessage())
webSocketConnection.getRemote().sendStringByFuture(s)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
HashMap.class
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING,true)
assertEquals(2,props.getDisabledPlugins().length)
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
GatherGetterAndSetterProperties.gather(compiler,mainRoot)
cause.getCause()
Throwable exception
mListView.getListChildAt(index)
Utilities.isMac() || Utilities.isUnix()
mTfs.free(mTfs.open(path),true)
incomingMessage.getMessagePayloadByte(1)
counter + 1
getHandledPredicate()
assertEquals(response.getStatusCode(),302)
mouseEvent.getModifiersEx()
Integer.parseInt(patchVersionString)
articleMgmtService.addArticle(article)
ImmutableMultimap<Feature<?>,Feature<?>>
logger.trace("NODE {}: App version requested but version is unknown",this.getNodeId())
8 * Constants.MB
LinkedHashMap<String,Operator<? extends Serializable>>
override.asString()
-121
logger.fine("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
BodyAvailabilityTest.class
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)
conf.getRestBaseURL()
id=16500
factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
instance2.getLifecycleService().shutdown()
factory.getEmbeddedServletContainer()
host.getHost()
@ConditionalOnEnabledHealthIndicator("jms")
new SimpleCanalConnector(address,username,password,destination)
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
component.setMaxThreads(20)
getRegistry().bind("myFilter",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )
TestSuiteEnvironment.getServerAddressNode1()
stopWatch.taken() < 1000
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,true,aggregationAnnotation.approximate(),factory)
processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
sendCommand(CLIENT,Keyword.SETNAME.raw,name)
LOG.error("XMLStreamReader {} not supporting Location",reader)
@Path(PATH_RELATIONSHIP_INDEX_ID)
getMockEndpoint("mock:" + i).expectedMessageCount(200)
registry.bind("eventBus",new EventBus())
calendar.getTimeZone().getRawOffset()
!(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
mock.expectedMinimumMessageCount(1)
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
cam.near=1f
statistics.addGetTimeNanos(System.nanoTime() - start)
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
Parameter.forConstructor(errorHandler,constructor)
id=30
new Path(testBucket.getParent(),".test-2.inprogress").getPath()
expectedCountsForADoc(weights,e4Update,ind)
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
logger.trace("attempting to login")
mock.expectedMinimumMessageCount(3)
status.isDir()
m.isReadBackupData()
(short)0777
twitter.getDailyTrends()
cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)
model.getCurrentResult() != null && graphModel != null
request.getContentType().startsWith("application/x-www-form-urlencoded")
GatherGetterAndSetterProperties.update(compiler,externs,root)
Long.valueOf(p.getProperty("numberid.id"))
timeout=120000
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
initialCapacity > 1 << 30
1
privObj.getObjectName().equals("masking_test_druid") || privObj.getObjectName().startsWith("masking_test_druid_n")
data.getBytes(response.getCharacterEncoding())
targetClass != null && field != null
CompletableFuture<Void>
AdviceWithTasks.removeByType(route,type,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
if (mAllowUndeclaredRTE) {   processImport(aAST); } 
status.getLastModificationTimeMs()
put.getWriteToWAL()
GatherGetterAndSetterProperties.gather(compiler,externsRoot)
N node
mFs.mkdirs(new Path(path))
tfs.getFile(fileId)
assertEquals(1,counter)
booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,"Experimental: Use dynamic schedule for grouped execution when possible",featuresConfig.isDynamicScheduleForGroupedExecutionEnabled(),false)
case PLAYER_QUIT: 
new BindException(newConcept,"concept")
zk.exists(znode,false) == null
log.error("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",30,SECONDS)
ret != null
statistics.addGetTimeNanos(System.nanoTime() - start)
/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractAclCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrp";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return "chgrp <group> <path>";   } } 
new UnsupportedOperationException(getClass().getName())
new IllegalStateException("Test IllegalStateException")
new ModelNode().set(10L)
new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null)
w.println(paddingText)
unkn_parts.addAll(Hive.get().getPartitions(tab))
DEFAULT_BLOCK_SIZE=100
configureAtmosphereInterceptor(scFacade)
return true; 
new IncrementalIndexSegment(rtIndex,null)
attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()
uncompressedProto.length < 1100000
i == -1 || nsname.equals("/")
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
user.getSystemId() == null || user.getSystemId().equals("")
alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)
((StringLiteral)literal).getValue()
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } 
heatpumpValues[66]
Assert.assertEquals(4,visitor.getConditions().size())
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)
this.thrown.expectMessage("File must not be null")
!isCancelled0(result)
engine.execute(query).dumpToString()
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class,false,false)
id=22
!condition.isEmpty()
getStreamNode(vertexID)
Thread.sleep(800)
pId + BASE_FILE_NUMBER
soLingerTime.toMilliseconds()
client.srandmember(key,count)
initialCapacity > 1 << 30
public Builder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
responseModels.entrySet()
LOG.info("Node " + path + " already exists and this is not a "+ "retry")
cache.remove(key)
new byte[20]
obj.getRequiredTokens()
(ChronicleEngineEndpoint)getEndpoint()
record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
XMLInputFactory.newInstance()
localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
sizeNeeded > items.length
nodeEngine.getSharedService(LockService.SERVICE_NAME)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
mPreferredHost.equals("localhost")
isHandshaking(clientResult) || isHandshaking(serverResult)
sanitizeName(name)
@Override public Response headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
-2
row("p_comment",null,7.0,0.0,null,null,null)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
createPermissionsXmlAsset(new JndiPermission("*","lookup"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"))
mock.expectedMessageCount(3)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
callTimeoutMillis=6000
log.trace("Failed to deploy!!",res2.cause())
Optional.fromNullable(resourceManagement.getStats())
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
conf.getRestBaseURL()
FileSystemMaster.class
logger.error("table: {} column: {}, failed convert type {} to {}",tableName,columnName,value,sqlType)
buffer.nextOneRow(changeColumns,true)
K key
ctx.nextInboundMessageBuffer()
mock.expectedMinimumMessageCount(2)
new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END)
asyncWriteFuture.cancel(false)
expression.length() - 1
routes.InputTypesResource()
!Objects.isNull(value)
Thread.sleep(4000)
tabAlias.equalsIgnoreCase(tableAlias)
new Packet(data,operation.getPartitionId())
logger.warn("InfluxDB is not yet connected")
getRedeliveryDelay()
LOG.warn("PriviledgedActionException as:" + this + " cause:"+ cause)
new EntryEvent(packet.getName(),null,(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
!importedClassIndex.isEmpty()
Assert.assertFalse(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
statistics.addPutTimeNanos(System.nanoTime() - start)
N node
new GdxRuntimeException("Failed to read Vorbis.",e)
!hasNextChunk()
this.vertices.containsKey(node) || this.chainedTasks.containsKey(node) || this.iterations.containsKey(node)
assertTrue(dr.isFailure())
deployOneTaskTestProcess()
logger.error("Error getting value for expression " + expressionField.getExpression() + " "+ e.getMessage(),e)
GL20.glGetActiveUniform(program,index,256,size,typeTmp)
dimensionsSpec.getDimensionNames()
getTupledSet()
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
qp.isExclusiveMaximum()
Integer.parseInt(quantifier)
from("direct:b").delay(4000)
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED)
new ModelNode(40)
/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, "Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ..."  */ @VisibleForTesting static class UnrecoverableS3OperationException extends IOException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format("%s (Path: %s)",cause,path),cause);   } } 
sendCommand(CLIENT,Keyword.LIST.raw)
Assert.notNull(artifactId,"ArtifactId must not be null")
factory.getOrCreateProxyByName(packet.name)
public class Arial extends BasicFontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
registry.bind("myConfigurer",configurer)
sendTo("bar")
RawTCPInput.class
IOException e
log.error("PID contains identifier with no assigning authority")
GL20.glUniform2fv(location,v)
THREADS_PER_CLIENT=4
new Thread(shutdownHandler)
ImmutableList.of(bang,qmark)
new StringBuilder(256)
size=10.0f
@Override protected Block getBlock(){   return blockBuilder; } 
boolean injvm() default true; 
BufferedReader is=IOUtils.readerFromString(languagePropertiesFile)
ch == '&' && JdbcConstants.POSTGRESQL.equals(dbType)
nodeEngine.getClusterService()
uncompressedProto.length < 2550000
Program.class
edgeData.getAttributes() != null
IOUtils.closeQuietly(is)
List<TaggedWord>
ArrayList<>
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
KeyColumnValueStoreTest.class
doInvoke(args.first(),(args=args.rest()).first(),args.rest())
N node
partId == null
1
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
new DatagramDnsQuery(null,addr,1)
Assert.assertEquals(20,as.getAllGlobalProperties().size())
addOrGetIndex(definition.getKey(),definition.getValue(),partitionStoreAdapter)
left.getRowLength()
1
logger.debug("Error connecting to Plex",e)
metricName.toString()
mPersistFileService.shutdown()
fileInfo.getUfsPath()
Color.fromRGB(0x7B2FBE)
CellUtil.estimatedHeapSizeOfWithoutTags(c)
MBeanInfoAssembler.class
this.thrown.expect(IllegalStateException.class)
saHooks != null && !saHooks.isEmpty()
"memberOf".equalsIgnoreCase(attribute.getId()) || "isMemberOf".equalsIgnoreCase(attribute.getId())
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
ImmutableList.copyOf(listeners)
Status.createStatuseList(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort())
!tmp.exists() || !tmp.isDirectory()
registry.bind("connectionFactoryMock",connectionFactoryMock)
response.get(ROLLED_BACK)
public class ArialBlack extends BasicFontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
new BinaryWebSocketFrame(finalFragment,rsv,payload)
in.readData()
stopwatch.elapsed(MILLISECONDS)
_emittedToOffset=e.startOffset
assertEquals(String.format("Expected %s results but got %s. Number of evicted entries: %s.",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())
return ctx; 
response == null || response.value == null
assertEquals(6358482l,received.get(0)[1])
assertEquals(counter.get(),0)
getConnectTimeout()
DirectMessage.createDirectMessageList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
keySet.isEmpty()
GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)
nodeEngine.getClusterService()
new InputStreamReader(localStream,StandardCharsets.UTF_8)
Throwable exception
logger.warn("Configuration for influxdb not yet loaded or broken.")
assertTrue(jmsTemplate.isPubSubDomain())
annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
clockSource.elapsedMillis(startTime)
new Histogram(1,10,100,1000,10 * 1000,100 * 1000)
new ClusterConfiguration(name,Collections.singleton(boundAt))
InternalAttribute attribute=(InternalAttribute)o; 
new UnsupportedOperationException(getClass().getName())
hashFunction.hashBytes(bigEndian)
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())
config.getStrategyImpl()
executor.execute(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
loadMetadataSuceeded=false
assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } )
GL20.glUniformMatrix4fv(location,transpose,value)
historicState(item,timestamp,serviceName)
Assert.notNull(patterns,"Patterns must not be null")
indexOutURI.toString()
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)
Assert.assertEquals(select.size(),0)
Object.class
EnumMap<K,? extends V>
columnType.equalsIgnoreCase("long") || columnType.equalsIgnoreCase("tinyint") || columnType.equalsIgnoreCase("smallint")|| columnType.equalsIgnoreCase("int")|| columnType.equalsIgnoreCase("bigint")
Outcome.noMatch("missing database driver " + driverClassName)
new ArrayList<>()
ufsPath.toString()
offset(5.0)
UIPasteboard.getGeneralPasteboard()
LOG.debug("Getting asynchronous method stub from channel")
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new ModelNode().set(600000L)
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws IOException {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=true
getTokenDisplayNames()
mapper.getFactory()
context.getStreamCachingStrategy().getSpoolCipher()
assertContains(actualTables,expectedTables)
logger.fine(sb.toString())
constructor.getParameterTypes()
mock.expectedMessageCount(2)
AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),1)
state.isTerminalState()
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
LOGGER.debug("no property for " + type + ", "+ format)
c * c
newHighlyAvailableDatabaseBuilder(path)
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName(),e.getMessage())
target.setField(1,val2)
getPath("checks/javadoc/Input_02.java")
ctx.sendUpstream(e)
client.get(path,MIMETYPE_XML)
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
new CacheCreateConfigOperation(config,false)
mTfs.mkdirs(new TachyonURI(dirPath),true)
DEFAULT_SHUFFLE_PORT=11000
isTouched(0.5f,1)
dataFormatModel.setDescription(row.get("description"))
rowsRet <= 0 || work.getLimit() == totalRows
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ ExtendedCell deepClone(); 
Context.getProviderService().getAllProviderAttributeTypes(true)
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)
methodsToImplement(type,methods)
assertClusterSizeEventually(2,nodes[0])
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
out.writeData(entry.getValue())
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)
log.debug("Performing lookup: %s --> %s",ips,retVal)
IllegalArgumentException.class
R
SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
entry.getValue().health().transformDeferred(this.timeoutCompose)
ReactiveHelper.schedule(runnable,"Multicast next step")
new Date(1)
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
log.trace("Failed to deploy!!",res2.cause())
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)
@Deprecated
entry.getCreateStore()
Sets.newLinkedHashSet()
LOG.warn("OpenTracing: Failed to capture tracing data",t)
results.expectedMessageCount(3)
preloadQueue.size == 0 || tasks.size() == 0
OfflineMetaRepair.class
new IllegalStateException("Comments are not consistent")
final P testedPrototype
current.getLabel().startsWith("nt") && !pre.getLabel().startsWith("nt") && !pre.getValue().equals(Predefine.TAG_BIGIN)
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
tFAgentStatMapper.map(agentStatBo)
request.getDueBefore()
ch.unsafe().flush()
interceptors.addLast(newAInterceptor(a))
ttl >= 0
promise.tryFailure(cause)
new RagManager()
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),11,FontStyle.Plain,true)
timeout=1800000
timePassed >= 10000
toEventData(key)
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)
Metric<Long>
keySet.isEmpty()
indexFile.isFile()
mMountTable.resolve(getPath(next)).toString()
id=28
Server server
initialCapacity > 1 << 30
this == NTI_ONLY
args.length == 2
LOG.info("Set the current default database as [{}] in the current default catalog [{}].",currentDatabaseName,currentCatalogName)
start.expectedMessageCount(7)
sr0.getValue().f2
Exception e
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
c.getSimpleName()
CliRealtimeExample.class
clazz.getInterfaces().length == 0
T exception
Status.createStatuseList(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)
customResourceLocator(url)
resultEndpoint.setResultWaitTime(5000)
i < 10000
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",false))
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,true)
mapper.getFactory()
new AuthenticationException("Error validating LDAP user",e)
new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(false)
statistics.addPutTimeNanos(System.nanoTime() - start)
new StringBuilder(246)
Exception t
executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
v.getCreationTime() + timeToLive < now
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
mock.setResultWaitTime(4000)
objectColumnCache.values()
options.needsTranspilationFrom(ES8)
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
items[15]
assertEquals(2,historyServer.getServices().size())
URIStatus::getLength
reg.bind("localhost:" + port,ctx)
LOG.info("Unable to unmarshall exception content",e)
!argumentCount.isValidCount(actualCount)
E edge
statistics.addGetTimeNanos(System.nanoTime() - start)
!it.next().hasFinished()
Runnable t=new RunAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); 
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)
typeConverter.convertTo(XMLStreamReader.class,exchange,stream)
subProperties.putIfAbsent(subName,value)
titleTable.getPrefWidth()
new IllegalStateException("Test IllegalStateException")
GatherGetterAndSetterProperties.gather(compiler,externsRoot)
getOrCreateContainer().forceUnlock(dataKey)
engine.execute(query).dumpToString()
to.getClass()
p.getParent()
@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
engine.execute(query).dumpToString()
getUrl().getMethodPositiveParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)
providers.size() > 0
logger.fine("Strip code")
stopwatch.elapsed(MILLISECONDS)
final P testedPrototype
c.getDomain() == null && getDomain() != null
msg.nextOffset()
i <= uri.length() - 2
getSessionTimeout().getSeconds()
assertEquals(504,cause.getStatusCode())
index < next
callTimeoutMillis=6000
Assert.assertEquals(4,providers.size())
before == after
n.getNodeData().getLabel().toLowerCase().equals(str)
tfs.createFile(new TachyonURI("/root/testFile1"))
request.getServletPath()
ApiConsumerHelper.findMethod(endpoint,this)
this.thrown.expectMessage("File must not be null")
Math.max(1000L,connectionTimeout)
lookup="org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3"
IOException.class
exportStatusCounts(exporter)
6 * (float)Math.cbrt(radius)
filters={XSSHtmlFilter.class}
(long)y & 0xFFFFFFFFL
logger.debug("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
this(type,1); 
grammar.getTokenDisplayNames()
docData.length() > 0 && docData.charAt(0) == 65279
new ClusterConfiguration("clusterName",initialHosts)
lookupService.lookupPrincipalByName(user)
EmitterProcessor.create(1,false)
await().atMost(20,TimeUnit.SECONDS)
i > 0
logger.debug("{} {}",errorCode,message)
mMountTable.resolve(getPath(dir)).toString()
private final ReloadAction reloadAction; 
imageUrl.length() > MAX_FILE_NAME_LENGTH
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } )
json.length() - 1
String.class
VERBOSE=false
Long.parseLong(args[2])
CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
LOG.warn(rootPath + "is not a directory")
Sets.difference(queryIdsSnapshot,liveQueries)
Exception t
id=7
CamelCloudServiceCallRoutesAutoConfiguration.class
scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,2,MILLISECONDS)
LOG.isDebugEnabled()
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,parallelism,subtaskIndex)
ObjectHelper.isNotEmpty(configuration.getClusterService())
DataStreamSink<OUT>
(getSource().x() + getTarget().x()) / 3f
LOG.debug("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
rs.getMetaData()
assertOpenEventually(latch)
System.currentTimeMillis() - start
option.getJavaType()
from("direct:start").transform(body().append(" World")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to("mock:foo").delay(1000)
1024 * 1024 * 15
i % dictionarySize
logger.debug("Error connecting to Plex",e)
constructors[TXN_REMOVE_ALL_BACKUP]
waitYieldLatch.await()
raw.getOutParameters()
nameDefinitionMultimap.keySet()
new byte[14]
Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
logger.fine("Moving functions + variable into deeper modules")
new Path(bucketPath,"part-" + i + '-'+ j).getPath()
dstPath.toString()
response.addHeader(WWW_AUTHENTICATE,value)
((VarcharType)type).getLengthSafe()
parent.getRegionNameAsString()
from("direct:a").delay(1000)
new TypeResolver(hasRelatedOfString)
AbstractBootstrap<ServerBootstrap,Channel>
new AnnotationNode(desc,true)
new ModelNode().set(240000L)
id=16501
assignedServers.add(holder)
NettyConnectionsPool.class
Sets.<Long>newHashSet()
Bytes.toBytes(tableOrRegionName)
System.currentTimeMillis()
showTooltip == null || showTooltip.targetActor == null
mapConfig.getBackupCount()
sourceNodeTextData != null
1
domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
GatherGetterAndSetterProperties.update(compiler,externs,root)
registry.bind("myConfigurer",configurer)
getCamelContext().getTypeConverter().convertTo(int.class,timeout)
Color.fromRGB(0x41CD34)
context.registerSubsystem(SUBSYSTEM_NAME,1,1)
readLock()
hz1.getLifecycleService().shutdown()
Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null))
c.writeAndFlush("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false,runtimeOnlyFlags)
buffers[i]
@ConditionalOnEnabledHealthIndicator("rabbit")
private static final HBaseConfiguration config=new HBaseConfiguration(); 
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
touchEventPool.freeAll(touchEvents)
new SourceMapParseException("Unexpected number of values for entry:" + entryValues)
statistics.addPutTimeNanos(System.nanoTime() - start)
CharSequence text
LinkedHashMap<String,ASTNode>
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws Exception {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
private ErrorPageFilter filter=new ErrorPageFilter(); 
cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)
JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.fullName(),parent.fullName(),parent.declaration.source.getName(),String.valueOf(parent.declaration.node.getLineno()))
GL20.glUniform2fv(location,v)
Map<String,Object>
edge.setDirection(type)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)
Foundation.log("[info] " + tag + ": "+ message)
BeanMapper.mapList(books,BookDto.class)
-100
Long.parseLong(args[2])
handler.isDifferent(existing)
container.getAttributeModel().getEdgeTable()
LOG.error("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
times + BASE_FILE_NUMBER
public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
out.writeBytes(mask)
assertThat(getField(graphite,"port")).isEqualTo(2003)
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
E edge
rs.getNString(columnName)
id=10849
controller != null && controller.getState() != ServiceController.State.UP
value.getType().getName()
AttributeUtils.getDefault().getMax(column,valuesArray)
i >= BY_DYE_DATA.length
Integer.parseInt(matcher.group(1))
Expression.eq("searchable",searchable)
msgType < values.length
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)
d.setMinorVersion(1)
Object[]
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
Gauge<Integer>
globalExecutionStats.getStartedSplits()
message + end
serverSocket.setReuseAddress(true)
dis.readFully(serializedData,0,length)
assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(2)
new Packet(data,operation.getPartitionId())
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(false)
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
CompletableFuture<Void>
util.getDataTestDirOnTestFS(table)
ShortBuffer target
websocketComponent.setMaxThreads(20)
invocation.addAttachments(context)
pti.getArity()
Assert.assertTrue("reload-required".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))
id=39
DiagnosticType.error("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
numConnections=20
jmsManager.removeTopicFromJNDI(name)
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.SAP,DatabaseDriver.TERADATA)
runOTIafterNTI=true
Gdx.files.internal(fileName).pathWithoutExtension()
Assert.assertEquals(21,as.getAllGlobalProperties().size())
field.getFieldName().equalsIgnoreCase(s)
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
@ConditionalOnEnabledHealthIndicator("db")
stats.facetFilter(standardFilters(range,filter))
public Builder setProxyPassword(String password){   this.proxyPassword=password;   return this; } 
Thread.sleep(2000)
Iterable<T>
findDelegateForNewObject(name)
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
julLogger.severe("Hello world")
hz1.getLifecycleService().shutdown()
rj.reduceProgress()
conf.setInt("hbase.hregion.memstore.block.multiplier",100)
row("p_comment",null,7.0,0.0,null,null,null)
assertPlanEquals(expectedPlan,actualPlan)
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
new RuntimeException("Error while creating the data flow plan for an iteration: The iteration end was not specified correctly.")
Time.currentTimeMillis()
Long.parseLong(args[2])
isTouched(0.5f,1)
timeout=120000
GL11.glGetIntegerv(pname,params)
mock.expectedBodiesReceivedInAnyOrder("B+END","A+END")
new CustomChangeException("Failed to insert one or more concept map types",be)
DataStreamSink<OUT>
logException(exception)
aggMap.size()
routes.UsersController.editUserForm(username)
new LwjglPreferences(name,".prefs/")
node1.isEquivalentToTyped(node2)
times + BASE_FILE_NUMBER
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10)
assertPlanEquals(expectedPlan,actualPlan)
!threads.isEmpty()
this == NTI_ONLY
log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
new Long(4)
footerRow != null
connection.zrevrangeByLex(key,max,min)
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
RetryHandlingBlockMasterClient.class
assignedServers.add(holder)
getConfig()
intBuffer.clear()
len >= 0
node.getLifecycleService().shutdown()
new LwjglPreferences(name,".prefs/")
(outputFolder + File.separator + apiFolder).replace("/",File.separator)
Threads.sleep(3000)
endpoint.getOrCreateConnectionFactory()
logger.info("defineClass pluginClass:{} cl:{}",className,classLoader)
startServer(testAddress)
transactionalMap.set(key,value)
prop.getParamValue()
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())
id=17
GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))
model.getName()
activeFrom == null
mock.expectedMinimumMessageCount(2)
analysis.getType(windowFunction)
context.revertRestartRequired()
req.getPathInfo()
new StringBuilder(740)
Object[]
contentType != null && charset == null
sizeModeClass.equals("ScaledSizeMode")
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","apache-el","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-xml-","websocket-servlet-")
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new UnsupportedOperationException(getClass().getName())
Throwable e
InetAddress.getLocalHost()
JsonRecordHiveMapper.class
LinkedHashSet<String>
BIG_ENOUGH_INT + 0.99999999
l.onResume(request,response)
id=10866
location.equals(BlockStoreLocation.anyTier())
WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
new RefProperty(modelName)
/**   * Returns messages older than the message ID specified as a numeric string. This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912, you could append "?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ private Long olderThan=-1L; 
Arrays.asList("Int","Float","Double","Bool","Void","String","Character","AnyObject")
bigEndian.order()
assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
getLog().warn("register druid-driver mbean error",ex)
logger.debug("Error connecting to Plex",e)
T1
assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)
registry.bind("myManager",cacheManager)
new String(bytes2,"UTF8")
hgraph.getTotalOutDegree(n)
field.getType()
bits2[1] == true
sendTo("direct:foo")
disables.contains(a.getName())
ImmutableList<ConformanceConfig>
gen.get().document("target/testdocs","testsection")
n.floatValue()
new HTable(TEST_UTIL.getConfiguration(),TABLE)
memoryReservation.addAndGet(bytes)
row2 * layerTileHeight
new StringBuilder(734)
1000.0 * FILES_BYTES
public class XpathRegressionJavadocVariableTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"6:9: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS" + "/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
connection.pexpireAt(key,millisecondsTimestamp)
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
Response example(String type,Object example); 
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
!isSdkLocationValid(sdkLocation)
private static class TestException extends RuntimeException {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
new IllegalStateException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
value.equals("")
timeout(10000)
-1
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","span","strike","strong","sub","sup","u","ul")
mapConfig.getBackupCount()
value()
LOG.warn("register druid-driver mbean error",ex)
statistics.addPutTimeNanos(System.nanoTime() - start)
new KafkaComponent(context)
executor.scheduleAtFixedRate(this,period,period,unit)
new AndroidFiles(this.getService().getAssets(),this.getService().getFilesDir().getAbsolutePath())
Assert.assertEquals("Wrong messages count: " + messages.size(),1,messages.size())
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")|| name.contains("cglib")
reg.getMeters(transformFilter(filter))
? extends T
util.getDataTestDirOnTestFS(table)
"streams:" + streamId
config.getClientNumThreads()
Long.parseLong(timeout)
report(n,MISPLACED_ANNOTATION,"@abstract","function with a non-empty body cannot be abstract")
!config.isAutoRead()
input.entrySet()
@Override public Response example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } 
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)
log.info(message,exception)
mf.filter(r,originalMessage,transformed.message())
incomingDir.mkdirs()
ImmutableSet<ImplementationMethodDescriptor>
queueLength.asString()
new InstrumentedTimingCollector(Metrics.defaultRegistry())
node.getLifecycleService().shutdown()
Assert.assertEquals("Recall outside target range",0.691,r,0.001)
KeyValueHolder<String,Processor>
val=2
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
assertEquals(70008,exchange.getIn().getBody().toString().length())
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n"+ "Checkstyle ends with 2 errors.%n",expectedPath)
flags.length == 1
field.getType()
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",LONG)
rImpl.getRequest()
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
new Histogram(1,10,100,1000,10 * 1000,100 * 1000)
version == null || version.equals("")
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","three")
Site.me().setRetryTimes(3).setSleepTime(1000)
edge.setDirection(edgeDefault)
getConnectTimeout()
ConcurrentHashMap<Object,AggregationStrategy>
mTestStream.getFlushedBytes()
ppiY / 2.54f
new PoolBagEntry(null,0,pool)
logger.trace("Session destroyed")
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
@Override
caught.isArrayPattern()
subtypeProps == null || subtypeProps.isEmpty()
inputProcessor.touchDragged(event.x,event.y,event.pointer)
@InputMagicNumberIntMethodAnnotation(42)
getJSDocType(cp)
findDelegateForNewObject(name)
i <= end
element.getLocalName()
new StringBuilder(253)
execution.getJobs().remove(jobEntity)
new JedisClusterCommand<Set<String>>(connectionHandler,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } 
tfs.getFile(fileId)
NoResolvedType noResolvedType=new NoResolvedType(this); 
new PriorityTieredBrokerSelectorStrategy(0,1)
clientConfig.property(ClientProperties.READ_TIMEOUT,2000)
((VarcharType)type).getLengthSafe()
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",true))
Status.createStatuseList(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
handlers.length == 0 || handlers[0] == null
pixmap.fillCircle(x,y,radius,color)
hz1.getLifecycleService().shutdown()
retry.attempt()
patientState.getState().getUuid()
rSocketMessageHandler.responder()
new IllegalStateException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
10 * 1
times + BASE_FILE_NUMBER
-100
getOriginUrl()
batteryVp > medium
GraphDatabaseSetting<Long>
return true; 
assertEquals(302,status.getStatusCode())
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",true))
in.readData()
TimeUtils.millis()
items[28]
reg.bind("localhost:" + port,ctx)
map.set(key,toStoreValue(value))
LOG.debug("Failed to send receipt of data to worker {} for request {}: {}.",mAddress,mReadRequest,e.getMessage())
matched && matcher.groupCount() > 0
LOG.debug("Consumer subtask {} is trying to discover new partitions ...",getRuntimeContext().getIndexOfThisSubtask())
region == null
agg.setBatchTimeout(2000L)
new DynamicAwareEntry("http4://localhost/test",null,null,null)
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
VERSION=1
ByteBuf line=buffer(64); 
statistics.addRemoveTimeNanos(System.nanoTime() - start)
DataStreamSink<OUT>
isTestOnReturn()
activeFrom == null
readLock()
factory.getEmbeddedServletContainer()
status != null
nameTextField.getText()
future.get(30,TimeUnit.SECONDS)
factory.getEmbeddedServletContainer()
pti.getArity()
@UriParam(label="producer",defaultValue="1") private String requestRequiredAcks="1"; 
new StringBuilder(194)
Throwable exception
getOrCreateConnectionFactory()
!ufsDeleter.delete(alluxioUriToDel,delInode)
message.getFilteredFields()
mock.expectedMessageCount(1)
CompletableFuture<Void>
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)
qs.equals("")
GL20.glUniform3iv(location,v)
min1 <= min2
!Values.UPGRADE.equalsIgnoreCase(connection)
!AtmosphereRequest.class.isAssignableFrom(request.getClass())
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(20000,200)
queueLength.asString()
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
assertEquals(ChronicleEngineMapEventType.REMOVE,mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))
Y1
location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
element.getLocalName()
new ChronicleEngineEndpoint(uri,this,configuration)
assertEquals(expected,actual)
/**   * <code>CONCAT_AGG</code> aggregate function.  */ public static final SqlListAggFunction LISTAGG=new SqlListAggFunction(); 
request.getPathInfo()
conf.getRestBaseURL()
nextRequest(newRequest,future)
sizeNeeded > items.length
req.getServletPath()
allowedIdentifiersCheckDigitsInts[i]
intbuf.get(0)
!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
Long.parseLong(args[1])
bits2[1]
SSL.getErrorString(stackError)
ExceptionUtils.firstOrSuppressed(e,collectedExceptions)
mStack.size() > 1
ServiceHelper.startService(answer)
war.setWebXML(SimpleWebTestCase.class.getPackage(),"web.xml")
log.debug(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()
AsteriskActionEnum.valueOf(action)
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
registry.bind("groovyShellFactory",groovyShellFactory)
IOUtils.toString(stencilsetStream,"utf-8")
initialCapacity > 1 << 30
executor.execute(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
logger.fine("Moving functions + variable into deeper modules")
logger.trace("Return Object {} now at size {}",b,count.getAndDecrement())
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group)
outputPath=args[1]
assertEquals(0,url.getPort())
LOG.error(getName() + " caught: ",e)
assertEquals(5,lm.getFields().size())
Throwable e
Latkes.getStaticServePath()
report(n,MISPLACED_ANNOTATION,"@abstract","only functions or methods can be abstract")
LOG.debug("Requesting TaskManager's path for query services failed.",throwable)
localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
MockReset.after()
globalExecutionStats.getStartedSplits()
first
ImmutableSet<ImplementationMethodDescriptor>
response == null || response.value == null
response.getResponseBody().equals("")
timeout=150000
log.debug("Metric=[%s] has no StatsD type mapping",statsDMetric)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
cr.session_timeout_ms != null && cr.session_timeout_ms != 0
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
super.doCreateDataFormat(camelContext)
conceptAnswer.getAnswerConcept()
contentType != null && charset == null
julLogger.severe("Hello world")
mock.expectedBodiesReceivedInAnyOrder("Hello World")
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
multiValueRow.get(0)
callerPrincipalCallback != null
NUMBER_OF_IDS_PER_THREAD=40000
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
objectColumnCache.values()
assertClusterSizeEventually(2,nodes[0])
arrayName=options.get(ARRAY_NAME)
routeController != null
ImmutableMap.of(storeName,mutations)
Void ignored
new String(bytes2,"UTF8")
body[0][0][1]
partSpec.size()
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
DiagnosticType.warning("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
a.length > count()
i < 100
final Integer firstLineKey=lines.firstKey(); 
Assert.assertEquals("Unexpected token type: methodStub",msg)
deployOneTaskTestProcess()
new SctpMessage(protocolIdentifier,streamIdentifier,unordered,msg.retain())
Preconditions.checkNotNull(timer,"timer")
factory.getEmbeddedServletContainer(initializers[0],initializers[1])
file.getAbsolutePath()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
hz.getCluster().getLocalMember().isLiteMember()
assertEquals(4,possibleOutcomes.size())
new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions2,keyPositions1,keyClasses,memoryManager,ioManager,this,availableMemory)
tfs.ls(Constants.PATH_SEPARATOR,true)
Exception t
final ImportControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
requestReceived.await(10,TimeUnit.SECONDS)
new ResultSetIterator(conn,generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
file.getFileNameOnly()
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
items[31]
logger.warn("InfluxDB is not yet connected")
uri.getPort() == -1 && request.getVirtualHost() != null
PathUtils.concatPath(dst,child)
item.annotationType()
superClass == Object.class || superClass == null
dbCollection.save(clusterEvent,WriteConcern.FSYNCED)
hz1.getLifecycleService().shutdown()
factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)
defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
grammar.getTokenDisplayNames()
eq(0L)
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
putBytes(v)
logger.trace("Requsting URL {}",url)
mock.expectedMinimumMessageCount(2)
Thread.sleep(200)
!taskOutput.getState().isDone()
registry.bind("amazonSQSClient",clientMock)
assertThat(response).isEqualTo("Woop woop. yay\n")
LOG.debug("Exception while fetching metrics.",e)
new IllegalStateException("Result is already complete: failed")
new StringBuilder(560)
Long.parseLong(args[2])
SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json",true))
FISHING_ROD(346,1,32)
assertPlanEquals(expectedPlan,actualPlan)
!exclude
lock.unlock()
info.getRegionNameAsString()
!isInTransform && !isUDTF && child.getChildCount() > 2
KeyManagerFactory.getDefaultAlgorithm()
executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
messageJournalEnabled=true
e.toString()
loadResourceAsURL(name,loader)
assertRemoveSubsystemResources(servicesB)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),false)
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!",excessWorkers)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
AtmosphereResourceImpl.class.cast(resource)
getter.getType()
objectMapper.reader(DataSegment.class)
new DirectDruidClient(warehouse,smileMapper,httpClient,server.getHost())
VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)
assertOpenEventually(latch)
value()
assertEquals(3L,countDownLatch.getCount())
broadcasterFactoryClassName != null && broadcasterFactory == null
NSNumber.numberWithLongLong(val)
CommonUtils.randomAlphaNumString(random.nextInt(10))
sr0.getValue().f2
TableNotFoundException e
assertPresent(GsonConverter.class)
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
@Override public Integer getValue(){   return getThreadCount(state); } 
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
maxInvocationCountObservedDuringWarmup * 2
rsWrap.getMobFileCacheMissCount()
JavaAssistUtils.toPinpointParameterType(parameterTypes)
20000 * 4 * 4
LOG.warn("Unable to close socket selector")
GL.glDeleteTextures(n,textures,Memory.getPosition(textures))
ImmutableList<PersistentLocalScope>
Exception e
namespaces.isDefined()
GL.glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
return false; 
nodeEngine.getSharedService(LockService.SERVICE_NAME)
node.actor.getY() <= high && !selectedNodes.contains(node,true)
internalExecutor.submit(futureTask)
null == batch || batch.isEmpty()
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",30,SECONDS)
statistics.addRemoveTimeNanos(System.nanoTime() - start)
clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0
ObjectStreamClass.lookup(clazz)
url.toServiceStringWithoutResolving()
deployments.get(deploymentName)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
ASYNC_PRODUCER_THREAD.getStackTrace()
setDiskPersistent(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
inflightRepository != null
uri == null || uri.equals("/")
assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)
new IllegalStateException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d(%3$s)",aFileName,lineNumber,line))
webSocketConnection.getRemote().sendStringByFuture(s)
Exception ex
pixmap.fillCircle(x,y,radius,color)
bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())
url3 != null
new NotifyBuilder(context).whenDone(2)
log.error("PID contains identifier with no assigning authority")
ChannelHandler handler=new ChannelHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; 
logger.fine("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
file.flushAndForce()
statistics.addPutTimeNanos(System.nanoTime() - start)
ResponseBody.create(new byte[0],MediaType.get("text/plain"))
SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),false)
reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
Thread.sleep(51)
GL20.glUniformMatrix3fv(location,transpose,value)
assertNotNull("Failed to trigger savepoint",savepointPath)
synchronized (c) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
responseFilters.isEmpty()
tfs.getFile(fileId)
error.expectedMinimumMessageCount(1)
callTimeoutMs=10000
registry.bind("firehoseClient",amazonKinesisFirehoseClient)
stage.compareTo(currentStage) < 0
factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)
e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive()
Bytes.toBytes(tableNameOrRegionName)
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
new UDFArgumentTypeException(1,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
failOrAccept(prevAccept,input,closure,t)
log.debug("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
sizeModeClass.equals("ScaledSizeMode")
modelNode.hasDefined(LOCAL)
ufsPath.toString()
request.getPathInfo()
printLine("Unable to connect due to unrecognised server certificate")
future.get(120,TimeUnit.SECONDS)
new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,"Expected %s to be a module body, or %s to be the global scope.",n,scope)
s != null && Boolean.parseBoolean(s)
field.getType()
writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
EXPLICIT_NO_UNSAFE_CAUSE != null
Foundation.log("[error] " + tag + ": "+ message)
new UnlockHandler(this)
assertEquals(4,possibleOutcomes.size())
new StringBuilder(638)
new UnsupportedOperationException(getClass().getName())
E edge
incomingDir.mkdirs()
ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))
getTupledSet()
getConnectTimeout()
session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
getRegistry().bind("hb",hb)
mapEntry.getValue().equals(source)
checkpointPath.toString()
getExpressionTypesFromInput(session,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")),new ConstantExpression(0),new ConstantExpression(2))
version > 1
setTimeToIdleSeconds(Long.valueOf((String)cacheSettings.get("timeToIdleSeconds")).longValue())
assertFalse(found)
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
timeoutMs < 1000
HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
currentModelTransform=renderable.modelTransform
!Objects.isNull(value)
id=19908
new PriorityTieredBrokerSelectorStrategy(1,1)
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new DeserializationException("Error reading field " + fieldNumber + " as "+ target.getClass().getName(),e)
mock.expectedMinimumMessageCount(10)
this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
System.nanoTime()
1
assertEquals(typeString,actual().toString())
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Preconditions.checkState(hasInstanceType(),"Expected a constructor; got %s",this)
@ConditionalOnEnabledHealthIndicator("jms")
toObject(dataValue)
Sets.<Long>newHashSet()
Thread.sleep(1000)
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public PropertyKey getBindHostKey(){   return mBindHostKey; } 
addProperty(secondNode,"band","The Clash")
routes.SessionsController.index("")
(ResourceAdapterXmlDeploymentService)controller.getService()
reg.getTimers(transformFilter(filter))
Arrays.asList("bash",command)
event.isTouchFocusCancel() || !calculatePositionAndValue(x,y)
processSelectedKeys()
assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,false,true)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
drawable != null
Throwable e
Exception e
new IllegalStateException("Result is already complete: succeeded")
uncompressedProto.length < 2560000
theClass.getConstructor()
@ConditionalOnEnabledHealthIndicator("mongo")
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())
OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING))
new String(bytes2,"UTF8")
BALD
m.isReadBackupData()
mapper.getFactory()
implementationMethodDescriptors.build()
Bytes.toBytes(tableNameOrRegionName)
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
taken > 150
new ModelNode(512)
logger.error("{} is already cancelled",impl.uuid())
DataStreamSink<OUT>
Throwable e
factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
factory.get(fResultClass,NO_ANNOTATIONS,retrofit)
Thread.sleep(100)
ImmutableSet.copyOf(modules)
Long.valueOf(p.getProperty("numberid.id"))
LOG.trace("The sequence id for {} is continuous, pass",entry)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)
logger.trace("Invalid Account Credentials")
Throwable e
LinkedHashMap<String,ASTNode>
testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
hz1.getLifecycleService().shutdown()
Site.me().setRetryTimes(3).setSleepTime(1000)
timeoutMs=1000
LOG.warn("Cannot access storage directory " + rootPath,ex)
font.draw(batch,results,20,300)
assertEquals(1234,localReplicatedMapStats.getOwnedEntryMemoryCost())
outputDirectory="."
N node
assertEquals("There should be no files",0,files.length)
adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)
row("p_comment",null,7.0,0.0,null,null,null)
privObj.getObjectName().equals("masking_test_view") || privObj.getObjectName().startsWith("masking_test_view_n")
i < nodeCount
Thread.sleep(2500)
id=21
propEditor != null && !type.isArray()
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
id=10853
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
PORT=6336
public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } 
_maxTransactionActive=1
inner.deletedRelationships()
new HttpClientCodec(4096,8192,true)
LOG.warn("Failed to get files from " + baseDirectory.getAbsolutePath())
n.floatValue()
tblObj.getPath()
LOG.info("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
LOG.warn("calculatedMaxSteps:{} for loadbalancer's stochastic walk is larger than " + "maxSteps:{}. Hence load balancing may not work well. Setting parameter " + "\"hbase.master.balancer.stochastic.runMaxSteps\" to true can overcome this issue."+ "(This config change does not require service restart)",calculatedMaxSteps,maxSteps)
Long.parseLong(args[1])
layout.setReleaseLabel(label)
? extends T
isTestOnReturn()
batteryVp > low
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
DEFAULT_ROW_FLUSH_BOUNDARY=75000
statistics.addRemoveTimeNanos(System.nanoTime() - start)
buildPages.getTypesWithoutHash()
location.add(deltaX / delta,deltaY / delta,deltaZ / delta)
Utilities.LOG14535.info("creating new paths " + System.identityHashCode(fsp2) + " for "+ dirName+ ", childSpec "+ unionPath+ ": tmpPath "+ fsp2.getTmpPath()+ ", task path "+ fsp2.getTaskOutputTempPath())
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
resultEndpoint.assertIsSatisfied()
k < FILES
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
new PrestoException(HIVE_FILESYSTEM_ERROR,"Failed to list directory: " + path,e)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED)
runtime.minus(provided)
userGroupMember.getUserGroupId()
invocation.addAttachments(context)
stores.containsKey(name)
public class XpathRegressionRequireThisTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"7:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,"age","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK" + "/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"9:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,"method1","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
ugi.checkTGTAndReloginFromKeytab()
setExpectedMessageCount(expected)
selectedFile != null && fileFilter != null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
executeConnectAsync=true
private CharSequence text; 
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
item.getName().equals(name)
o instanceof XidImpl
AbstractStoreHandler<DelayedEntry>
width - originX
ctx.write(msg,promise)
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new TagRewriteCell(clonedBaseCell,this.tags); } 
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
mapper.getFactory()
nodeEngine.getSharedService(LockService.SERVICE_NAME)
!sourceNodeTextData.getText().isEmpty()
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
Validate.notEmpty(name,"Cookie name must not be empty")
queryStrings.append(key)
FilteredBatchServerViewProvider.class
assertEquals(someName,actualPattern.pattern())
file.getFileNameOnly()
model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
Assert.assertEquals(1061,details.get(0).getAbsolutePosition())
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
beanFactory.getBeanNamesForType(CacheAspectSupport.class,false,false)
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
child.getProperties().isStreamPartitionedOn(partitioningRequirement)
new MainMenu(Gdx.app)
offset > 0
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null))
mIsMessageReady
Thread.sleep(100)
new RequestManager(testTimer,3000)
userId > 0
isStarted() || isStarting()
mm.tryLock(key,10,TimeUnit.SECONDS)
logger.fine("Remove try/catch/finally")
sections.get(section)
DEFAULT_MOVE_COST=7
visibleOnly=true
sendTo("bar")
new NetAddress(resolvedHost,-1,resolvedPort)
ctx.sendUpstream(e)
new ConnectorTableLayout(handle,Optional.empty(),TupleDomain.none(),Optional.empty(),Optional.empty(),ImmutableList.of())
node1.isEquivalentToTyped(node2)
logger.trace("Requsting URL {}",url)
context.createTaskContext().addPipelineContext(0,true,true,false)
context.var("double",2)
assertEquals(row.getField(0),3L)
this.logger.isDebugEnabled()
assertEquals(10,rows.size())
cache.putRecord(key,record)
MAX_CACHED_HBASE_INSTANCES=2001
System.arraycopy(src,0,this.bytes,0,SIZE)
model.calculateBoundingBox(bbox)
statistics.addGetTimeNanos(System.nanoTime() - start)
setBytes(index,data,0,length)
id=19910
value.equals("")
!sourceEdgeTextData.getText().isEmpty()
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title",ui.getDisplayName())
LOG.debug("Failed to send receipt of data to worker {} for request {}: {}.",mAddress,mReadRequest,e.getMessage())
EmbeddedServerPortFileWriter.class
reg.getHistograms(transformFilter(filter))
users.size() > 50
LOG.warn("Error invoking metrics timer",e)
processInstance.getProcessDefinitionId()
GatherGetterAndSetterProperties.update(compiler,externs,root)
ImplementationMethodDescriptor methodDescriptor
LOG.warn("delete failed: {}",e.getMessage())
i < repeatCount
nodeEngine.getSharedService(LockService.SERVICE_NAME)
IllegalArgumentException ise
Generics.newTreeMap()
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)
Throwable exception
"Stream " + importerName
bigEndian.order()
assertPlanEquals(expectedPlan,actualPlan)
registry.bind("curator",client)
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)
activeFrom == null
AtmosphereResourceEventListenerAdapter.class
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
child.getProperties().isStreamPartitionedOn(partitioningRequirement)
min1 <= min2
Assert.assertNotNull(ex.getCause())
20000 * 4 * 4
testWarning(LINE_JOINER.join("goog.require('a.c');","/** @suppress {extraRequire} */","goog.require('a.b')"),REQUIRES_NOT_SORTED)
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2)
statistics.addPutTimeNanos(System.nanoTime() - start)
allowedIdentifiersCheckDigitsInts[i]
ImmutableList<String>
cSet.getConceptSet()
Logger.getLogger(loggerName).getEffectiveLevel()
ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); 
promise.tryFailure(new ClosedChannelException())
logger.fine(name)
i >= 0
assertTrue(dr.isFailure())
LOG.error("Halting process: ShellBolt died.",exception)
promise.setFailure(new ClosedChannelException())
setop.getJavaName()
incomingMessage.getMessagePayloadByte(1)
fieldDeser.getPropertyValueDirect(currentObject)
request.getServletPath()
jmsTemplate.setPubSubDomain(true)
chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } 
id=16508
@DELETE
new InputStreamReader(fileObject.getInputStream(),"UTF-8")
(Short)args.get("damage")
UIPasteboard.getGeneralPasteboard()
entry.getUri()
new LazyHeadArrayNode(record,schema)
promise.tryFailure(cause)
dfa == null || dfa.states.isEmpty()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
prePassivates != null
flushIntervalSecs == 0
primitiveType != null || arrayComponentType != null
routes.SessionsController.index("")
expected.getType().equalsIgnoreCase(actual.getType().toString())
logger.trace("Requsting URL {}",url)
MathUtils.PI * (this.width * this.height) / 4
new SingleInetAddressDns()
assertMockEndpointsSatisfied()
assertEquals(8,LambdaOperations.values().length)
Logger.getLogger(loggerName).getEffectiveLevel()
assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
stateHolder.reloadDatapoints()
assertEquals(someName,actualPattern.pattern())
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
getJSDocType(operation)
initialCapacity > 1 << 30
10 * 1000
assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
List<String>
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
logError(lcurly,"lcurly",lcurlyPos,curlyIndent())
prev.getNextProp()
LOG.error(exception,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
-1
getOrCreateConnectionFactory()
return true; 
Void value
ExprEval.ofDouble(null)
E edge
analysis.getType(aggregate)
ObjectConverter.toBool(scriptValue)
chooser.showOpenDialog(null)
DataStreamSink<OUT>
mock.expectedBodiesReceivedInAnyOrder("c","b","a")
HeartbeatReelectionListener.class
HttpRequest.post("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
id=31
graph.getEdgesAndMetaEdges()
1000.0 * FILE_BYTES
int retries() default 2; 
id=11
address.getHost()
!mTFS.exists(turi)
assertEquals(1,beanInfo.getOperations().length)
conceptToValidate.getUuid()
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
report(n,MISPLACED_ANNOTATION,"@abstract","only functions or methods can be abstract")
activeFrom.getTime()
initialCapacity > 1 << 30
new ClusterConfiguration(initialConfig.getName(),initialConfig.getMemberURIs())
"maxHeaderSize must be a positive integer: " + maxHeaderSize
toShort(bytes,0,SIZEOF_SHORT)
index >= capacity()
id=16505
attribute.getDefinition().getMarshaller()
filter.setPageSize(1000)
buffer.getUint8()
z / vz
GL20.glUniform3iv(location,v)
compressedSliceInput.getRetainedSize()
ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? "main" : consoleSlot)
field.getType()
AtmosphereResponse.newInstance()
CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
collection(StreamImpl.class).update(match,modify,false,true)
assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
mock.expectedBodiesReceivedInAnyOrder("Hello World")
contentType != null && charset == null
event.getChangeColumns()
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
connector.getFilterChain()
n >= 0 && n < count(coll)
ufsPath.toString()
Long.parseLong(args[1])
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.user.password=password")
CharSequence text
intBuffer.clear()
beansXml.getOrCreateAlternatives()
public static ScaleTo $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
mHeartbeatExecutor != null
id=10998
Exception e
this.repositories.add(0,repository)
processEngineConfiguration.setEnableSafeBpmnXml(true)
NoopChatHandlerProvider.class
connection.zrevrangeByLex(key,max,min)
MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)
from("seda:a").delayer(1000)
row == null || row.size() == 0
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
ImmutableSet.Builder<ImplementationMethodDescriptor>
args.length < 2
LOG.warn("Storage directory " + rootPath + " does not exist")
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"),e.getCause().getMessage())
testModules("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
!isIgnoreUriScheme()
getOrCreateConnectionFactory()
steps <= 0
configMonitor.init(this,envProperties)
jniGetLocalAxisA(addr,tmp)
callTimeoutMillis=3000
new IllegalStateException(ex)
Validate.notEmpty(name,"Cookie name must not be empty")
stores.containsKey(name)
VertexAttribute.ColorUnpacked()
size=10.0f
new InputStreamReader(in,"UTF-8")
ChronicleEngineEndpoint endpoint=(ChronicleEngineEndpoint)getEndpoint(); 
this(true,16,arrayType); 
this.getNotEmptyWaitThreadCount()
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ indexUserDescription+ "]"
Maps.newTreeMap()
endsWith("/home/source")
LAYERS=5
DynamicAttributeRanking.refreshMinMax(this,graph)
assertPlanEquals(expectedPlan,actualPlan)
ImmutableList.copyOf(sourcesAsStrings)
Integer.parseInt(st.nextToken())
visitStatement(node,context)
? extends T
log.error("Error while closing command context",exception)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)
new TestResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
AlluxioLogServerProcess.class
!sourceEdgeTextData.getText().isEmpty()
LOG.debug("Getting synchronous method stub from channel")
logger.fine("Parsing Dep: " + filePath)
verify(collector,never())
column.createColumnObserver(false)
registry.bind("kinesisClient",amazonKinesisClient)
tx != null
filters={StringFilterAggregator.class}
HttpServletResponse.class.cast(response).sendError(501,"Websocket protocol not supported")
player.teleport(playerLocation,TeleportCause.COMMAND)
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName) || "Metadata".equals(subSectionName)
session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
getConnectTimeout()
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Exception getExceptionThrown(){   return exceptionThrown; } 
b.getMessage()
localInputFuture.cancel(mayInterruptIfRunning)
GL20.glGetVertexAttribiv(index,pname,params)
new ContinueProcessOperation(commandContext,execution,true)
typeSerializer.getDeserializedType()
times + BASE_FILE_NUMBER
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)
uri.getRawPath()
id=10870
Assert.assertEquals(3,propertyCategories.size())
codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
Latkes.getStaticServePath()
incomingMessage.getMessagePayloadByte(1)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
"Interrupted when attempting to close writer for end point: " + eldest
implementationMethodDescriptors.build()
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
response.get(ROLLED_BACK)
t != null && t.st == ST.LABEL
new FileInputStream(aProps)
assertEquals(2,props.getConfigPathPatterns().length)
nameTextField.getText()
payload.getBodySources() != null && payload.getBodySources().size() == 1
editor.apply()
absEdge.getTarget(view.getViewId())
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null,null)
logger.info("Illegal argument in chart: {}",e)
config.getIdleConnectionInPoolTimeoutInMs()
uncompressedProto.length < 2500000
entry.getName().equals(BOOT_INF_CLASSES)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
sizeNeeded > items.length
Bytes.toBytes(tableNameOrRegionName)
nodeManager.getWorkerNodes()
comparePartitionOwnership(false,localMember,partition)
new SpriteBatch(5460)
setColors(color)
logger.finest("Optimized Selector: " + selector.getClass().getName())
id=10871
connection.hlen(key)
NSNumber.numberWithLongLong(val)
jmsManager.removeQueueFromJNDI(queueName)
id=10874
ImmutableList<INPUT>
uiAclHandler.permit(reqContext,op,topoConf)
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
matcher.group(1)
target.addTaskAndWakeup(task)
response.get(ROLLED_BACK)
graphModel.isMixed()
ALIASES.addOperationParameterDescription(resources,"infinispan.container",op)
channel.disconnect()
left.getFieldName().equalsIgnoreCase(right.getFieldName())
res.sendError(501,"Websocket protocol not supported")
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)
DaggerAutoFactoryProcessorComponent.builder()
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)
wrapper.joinWithTimeout()
new StringBuilder(734)
getTokenDisplayNames()
sshd.stop(true)
ti >= 0
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
LOG.warn("Failed to find " + baseDirectory.getAbsolutePath())
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
log.error("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
"access-control/default is missing operations: " + defaults
id=4
Color.rgba8888ToColor(color,colorInt)
IOConverter.toString(out,null)
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
delegate.tokenize(token,regex,group)
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty&& !"__proto__".equals(propertyName)
i < 200
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,true,false,factory)
Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
KafkaEightFirehoseFactory.class
index > maxHeadersLength - headersLength
oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage,entry.cache)
Thread.sleep(10000)
ENDER_PORTAL_FRAME(120)
writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
setBytes(index,data,0,length)
converter.tryConvertTo(leftValue.getClass(),rightValue)
"Content-Type".equalsIgnoreCase(name)
promise.trySuccess(null)
toByteBuffer(index,length)
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
Exception ex
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
XMLInputFactory.newInstance()
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
new StringBuilder(729)
getLog().warn("register druid-driver mbean error",ex)
id=10830
bulkInsertableMap.containsKey(persistentObjectClass)
queueView.get().getExcerpt(index.longValue())
size * 1.8f
getUrl().getMethodPositiveParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)
sanitizeName(name)
new String(bytes2,"UTF8")
new Duration(30,SECONDS)
DynamicAttributeRanking.refreshMinMax(this,graph)
LOG.warn("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
runOTIafterNTI=false
activeFrom.getTime()
fragUtils.fragmentType()
CassandraSplitManager.class
computeAntiJoin(inputStatistics,inputStatistics,x,unknown)
new IllegalArgumentException("Cannot determine if commit is consistent")
bindingConfig != null && converterHandler != null
rs.getNString(columnIndex)
Integer.parseInt(sessionTTL)
LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort())
id=13106
patientState.getState().getUuid()
bytesRead == 0
getRedeliveryDelay()
uri.toString().equals(future.getURI().toString())
id=10831
ConnectionFactory connectionFactory
mock2.expectedMinimumMessageCount(2)
addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)
"Refreshing storefiles of region " + bestRegionReplica + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
/**   * {@inheritDoc}  */ @Override public Broadcaster removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),"removeAtmosphereResource(AtmosphereResource r)");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } 
path(14)
mock.expectedMinimumMessageCount(1)
eventJournalConfig.getCacheName()
obj.getRequiredTokens()
UnderFileSystem.get(tmpFolder,ufsConf)
N node
new GatherGetterAndSetterProperties(compiler)
logger.trace("Received MyQ  JSON: {}",dataString)
new byte[14]
GL20.glUniform3fv(location,v)
ImportAutoConfigurationWithItemsTwo.class
"Using bind address: " + bindAddress
BaseBulletTest.init()
configList == null || configList.size() == 0
route.setDelay(5000)
propResource.get(BOOT_TIME).asBoolean(false)
N node
checkNotNull(getPropDefFromClass(superType,pname),"getPropDefFromClass(%s, %s) returned null",superType,pname)
factory.terminateAll()
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"),new RuntimePermission("accessClassInPackage.com.sun.jndi.url.ldap"))
id=10845
wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())
Color.fromRGB(0xDECF2A)
assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)
statistics.addGetTimeNanos(System.nanoTime() - start)
factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)
getPreferences().save(fos,"")
model.getName()
req.getPathInfo()
SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
hashFunction.hashBytes(bigEndian)
z.next_in[z.next_in_index++] != 0
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12451.87,12451.87)
waitLatch.await()
HornetQEmbeddedConfigurationFactory.class
conf.getRestBaseURL()
applicationStatistics.incrListUserTimes()
Thread.sleep(3000)
getTypeDeclaration(swaggerModel.getAdditionalProperties())
putBytes(v)
mapper.getFactory()
logger.trace("myq securityToken: {}",securityToken)
"streams:" + streamId
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
sentences.size() > 0 && sentences.get(0).entityMentions() != null
items[32]
in.readUShortx()
loadModel(file)
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null || System.getProperty("com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames") != null
twitter1.checkUserListSubscription(id1.screenName,userList.getId(),id2.id)
engine.execute(query).dumpToString()
!c.isEncoded()
lockMode == InodeTree.LockMode.READ
flushStatements(true)
word=END_WORD
new IntRangeValidator(1,true,true)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
tblObj.getPath()
item < txId
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)
@ConditionalOnEnabledHealthIndicator("elasticsearch")
new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END)
mMethod.invoke(mContext,params)
paramAttribute.split("\\.")
new ClosedByInterruptException()
log.warn("Unexpected exception on closing transaction.  Cause: " + e)
assertTrue("reuse-address",networkConfig.isReuseAddress())
mPersistFileService.shutdown()
Long.parseLong(args[2])
message + end
selector.select(10)
LinkedHashMap<String,ASTNode>
new GeoLocation(array.getDouble(1),array.getDouble(0))
qp.isUniqueItems()
attributeMap.get(attributeName)
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
"Interrupted when attempting to close writer for end point: " + eldest
channel.disconnect()
new CommandLineException("The result couldn't be retrieved (perhaps the task was cancelled",e)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
(byte)0xe2
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
dataFormatModel.setDescription(row.get("description"))
registered.remove(objectName)
element.getLocalName()
tfs.ls(Constants.PATH_SEPARATOR,true)
System.currentTimeMillis()
ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
KBP_MINIMUM_SCORE=.456
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } ,executionService.getInternalExecutor())
resultEndpoint.assertIsSatisfied(10000)
declaredIntentionToWrite.getMode() == DIRECT_TO_TARGET_NEW_DIRECTORY
Subqueries.lt(0L,subquery)
codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Exception {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
return false; 
word=END_WORD
uncollectedPointCreator.createUnCollectedPoint(timestamp)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags)
arguments[1]
public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } 
assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(6)
Thread.currentThread().interrupted()
Thread.sleep(500L)
Throwable cause
pos < end
ImmutableList.copyOf(modules)
size * 1.8f
TupleDomain.all()
exchange.getPartitioningScheme().isReplicateNullsAndAny()
getPreferences().put(key,value)
file.getFileNameOnly()
request.getServletPath()
/**   * The tested prototype instance  */ private final P testedPrototype; 
from("direct:a").delay(2000)
toEventData(key)
System.currentTimeMillis() + 10000
factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)
mockRegionInfo.isMetaTable()
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
timeout=120000
VertexAttribute.ColorPacked()
LOG.warn("Failed to get files from " + baseDirectory.getAbsolutePath())
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage")
JSError.make(AbstractCompiler.READ_ERROR,getName(),e.getMessage())
new IllegalArgumentException("the annotation is null")
i < 3
MkdirsOptions.class
Thread.currentThread()
factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForNone"),e.getCause().getMessage())
new RuntimeException("Error when launching multilang subprocess",e)
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
new BindException(newConcept,"concept")
lookup="java:jboss/datasources/ExampleDS"
new CustomChangeException("Failed to insert one or more concept map types",be)
ticket.notifyAll()
(byte)0xe2
mock.expectedMinimumMessageCount(2)
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,true))
directoryUrl.getParameter(Constants.GROUP_KEY,"")
saveTaskDefinition(taskDefinition)
field.getType()
E edge
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
public Builder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
found.size() >= 1
KeyManagerFactory.getDefaultAlgorithm()
oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
ProcessorDefinition<ExpressionNode>
seenVertices.contains(endAncestor)
promise.trySuccess(null)
WeakSafeReadWriteLock strongReference
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
Thread.sleep(800)
o.toString().getBytes(response.getCharacterEncoding())
StatBuckets.prettyUptimeStr(secs)
@UriPath
dataSource.setInitExceptionThrow(false)
JavaAssistUtils.toPinpointParameterType(parameterTypes)
mail.getClass().getSimpleName()
assertFalse(CompressionTest.testCompression("SNAPPY"))
status.isDir()
assertThat(request.getBody().readUtf8()).isIn("<my-object><message>hello world</message><count>10</count></my-object>","<my-object><count>10</count><message>hello world</message></my-object>")
javaWriter.emitSingleLineComment("foo")
pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)
public Integer getPort(){   return this.port; } 
basicGraph.getShortestPath(root,t,false)
boolean multiValueResponse() default false; 
endsWith("/home/source")
req.getPathInfo()
item == null || item.getStatus() < 2
result.expectedMessageCount(1)
ImmutableList<String>
attribute.getDefinition().getMarshaller()
numKeys > 0
context != null && redirectUri == null
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
bc.getAsyncWriteService()
compressedSliceInput.getRetainedSize()
proxy.getHost()
getMockEndpoint("mock:start").expectedMinimumMessageCount(5)
value <= 0
return true; 
NullPointerException.class
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
submittedNode.get("values") == null
hashSymbols.values()
barrier.await(2,TimeUnit.SECONDS)
logger.debug("Error connecting to Plex",e)
isDirect=true
DiagnosticType.warning("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
log.debug("Received ping --> {}",payload)
waitForJobExecutorToProcessAllJobs(5000,500)
worker.clear()
rs.getNString(columnIndex)
LOG.debug("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
id=52
GL20.glUniform4iv(location,v)
System.nanoTime()
initialCapacity > 1 << 30
tfs.createFile(new TachyonURI("/root/testFile1"))
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
expectedCountsForADoc(weights,e4Update,ind)
activeFrom.getTime()
gauge.getValue() instanceof Number
maxSize < (used / total)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
logger.trace("myq securityToken: {}",securityToken)
Map<List<Object>,T>
LOG.debug("Creating short circuit input stream for block {} @ {}",blockId,address)
CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
Map.class
new StringLengthValidator(1,Integer.MAX_VALUE,true,false)
id=17
r != null
getTupledSet()
numThreads.get() >= MAX_THREADS
new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())
bean.getCollectionTime()
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
wrapper.joinWithTimeout()
parent.decrementPrioritizableForTree0(amt)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
wrappersToPrimitives.put(wrapperType,primitiveType)
delegate.requireChild(element)
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
jniGetLocalAnchorB(addr,tmp)
StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))
entry.getCheckName().equalsIgnoreCase(checkAlias)
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
new TaskStatusUpdateEvent(counters,progress,stats,true)
Arrays.asList("onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
id=16700
intBuffer.clear()
fileObject.hasExt("zip") || fileObject.hasExt("ZIP")
indexOutURI.toString()
ChannelBuffers.buffer(order(),length)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
id=19909
return false; 
logger.warn("",ex)
buildPages.getTypesWithoutHash()
jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(jndiName)
stopwatch.elapsed(MILLISECONDS)
this.thrown.expectMessage("File must exist")
id=10852
a.length > count()
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
new IllegalArgumentException("Could not lookup jndi name: " + namespaceStrippedJndiName + " in context: "+ jndiContext,ne)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)
Map<String,Object>
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
active=false
id=10808
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
return true; 
AstUtils.hasAtLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
details.setProperty(fileName,Long.toString(timestamp))
Arrays.toString(volumes.get())
mock(ExampleService.class)
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
LOG.error(result.getDescription(),e)
Optional<ImmutableZkWorker>
initialCapacity > 1 << 30
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
routes.BuffersResource()
LOG.error("DataNode is out of memory. Will retry in 30 seconds.",ie)
closedChannelException == null
context.revertReloadRequired()
notifier.getConfiguration().setPort(25669)
UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
DataTypes.TIME(3)
Validate.configurationDirectoryExists(controllerJavaHome,"controllerJavaHome must exist at " + controllerJavaHome)
buffer.getUint8()
cursor.shouldRetry()
markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
assertEquals(3L,countDownLatch.getCount())
newId >= max
new IOException("should execute connector.connect() first")
new ModelNode(40)
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
IOConverter.toString(out,null)
assertMockEndpointsSatisfied()
id=41
oldestInflightEntry == null
new InMemoryMessageRepository()
this.loggerContext
Object[]
catalog.validateLanguageExpression(null,"simple",detail.getSimple())
new ModelNode().set(1L)
keySet.isEmpty()
List<Data>
maxSize(new Fixed(width),new Fixed(height))
logger.fine("Recording function information")
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.CONTACT)
assertRemoveSubsystemResources(servicesB)
!isCancelled0(result)
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
ReferenceCountUtil.release(holder)
s == null && req != null
maxSize < (used / 1024 / 1024)
CharSequence text
(UndeclaredThrowableException)unwrapped
buffer.limit()
actor.addListener(listener)
new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)
type=200
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
graph.getEdgesAndMetaEdges()
LoopContextStateRetrieval retrievalToAdapt
expected.getType().equalsIgnoreCase(actual.getType().toString())
k < FILES
AtmosphereResourceLifecycleInterceptor.class
LOG.warn("OpenTracing: Failed to capture tracing data",t)
new SslContextBuilder(true)
new NodeHistogram(application,range,responseTimes)
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
len % (1024 * 1024) / 10000
sY != 0
fail("IllegalArgumentException is expected")
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
DiagnosticType.error("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
System.currentTimeMillis()
Preconditions.checkNotNull(manager,"manager")
view.getClusteredLayerDegree(absNode)
id=20
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.resourceLoader,this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
reportsE.appendChild(reportE)
logger.debug("{} {}",errorCode,message)
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
types.get(i)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
getLock(target)
id=16503
pm.runMigrationTasks(tasks,partitionId,replicaIndex,from)
masterAddress.split(":").length == 2
new StringBuilder(1024)
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",false))
(Double)x
incomingEdges.containsKey(dest)
reducerCount=1
setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.7,55.6)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
privObj.getObjectName().equals("masking_test_subq") || privObj.getObjectName().startsWith("masking_test_subq_n")
conn.getResponseCode() == 200
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false,runtimeOnlyFlags)
getSSLContext().getSocketFactory().createSocket(arg0,arg1,arg2,true)
response.get(ROLLED_BACK)
getTokenDisplayNames()
latch.await(20,SECONDS)
final Exception ignored
new StringBuilder(238)
ti >= 0
graphModel.getUndirectedGraphVisible()
cache.removeRecord(key)
LOGGER.error("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
id=19
IOUtils.closeQuietly(is)
view == null
instance.managementService.destroy()
!handle.parent().exists()
c.getDomain() == null && getDomain() != null
LOG.warn("Unable to close socket selector")
bean.getCollectionTime()
assertRemoveSubsystemResources(servicesB)
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
totalHistogram.getValueAtPercentile(95)
totalHistogram.getValueAtPercentile(95)
width - originX
mDir.getDirIndex()
serversByLoad.firstKey()
TreeSet<String>
connection.psubscribe(jedisPubSub,patterns)
in.readUShortx()
stats.getLastAccessTime() >= lastAccessTime
IllegalStateException.class
lastException != null && i < (flushRetriesNumber - 1)
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)|| (getStatus().getState() == OperationState.FINISHED)
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)
1
pool.drain()
Float.parseFloat(value.toString())
assertEquals(512f,i,20f)
CollectionUtils.isEmpty(elements)
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
assertEquals(row.getField(0),2L)
sanitizeName(name)
s.elapsed(TimeUnit.NANOSECONDS)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
IRON_GOLEM("VillagerGolem",IronGolem.class,99)
edge.setDirection(EdgeDirection.UNDIRECTED)
serverService.getOutgoingInterceptors()
new Server()
IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(),jpa,options)
logger.finest("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
new Duration(60,TimeUnit.SECONDS)
s.toString().toLowerCase()
existingOne != null
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)
n.getNodeData().getId().toLowerCase().equals(str)
ImmutableList<ObjectType>
cookies.rowMap()
soLingerTime.toMilliseconds()
headerHandled=true
elementClass != null && Modifier.isPublic(elementClass.getModifiers())
List<HostAddress>
getClusterMap().set(buildAttributeName(name),value)
IS_EMPTY + 1
ConditionalOnEnabledHealthIndicator.class
log.error("Error while closing command context",exception)
DEFAULT_CAPACITY=1000
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to timestamp with time zone: " + value.toStringUtf8(),e)
assertEquals(response.getResponseBody().length(),3873)
runPartialSorter(sorter,NUM_RECORDS,25)
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtParent.java")
printLine("Unable to connect due to unrecognised server certificate")
className.lastIndexOf("org.openmrs.")
GL11.glGetTexParameteriv(target,pname,params)
createPermissionsXmlAsset(new JndiPermission("*","lookup"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"))
new ArrayList<Data>(entries.size())
i < 3
UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)
bestState.score()
mTfs.mkdirs(path,true)
context.var("long",2)
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","two","three")
ObjectStreamClass.lookup(clazz)
id=23
new ModelNode().set(60000L)
sourceNodeTextData != null
assertTrue(dr.isFailure())
memoryReservation.addAndGet(bytes)
wizardModel.databaseConnection.contains("localhost") || wizardModel.databaseConnection.contains("127.0.0.1")
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
!webSocket.isOpen()
"Searching class for device type " + deviceType
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)
c.getSimpleName()
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false",null)
id=10857
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
16 * 60000
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
context.addStep(response,operation,new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)
setSunPosition(cal,latitude,longitude,sun)
objectMapper.reader(DataSegment.class)
IR.constNode(IR.name(shortName),googRequireNode)
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
Pattern.compile(foundAuthor,Pattern.LITERAL)
TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
executeJobExecutorForTime(10000,200)
protected BasicFontMetrics fontMetrics; 
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
node1.isEquivalentTo(node1)
graphVersion.incNodeAndEdgeVersion()
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static ImportControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
entry.getKey().getServerName()
file.toURL()
addProperty(secondNode,"band","The Clash")
sY != 0
mock.setMinimumResultWaitTime(1500)
LOG.warn("Ignoring duplicate class " + className)
ss.getAuthorizerV2().checkPrivileges(type,Arrays.asList(commandObj),null,null)
ssl.hasDefined(CommonAttributes.CA_CERTIFICATE_FILE)
StatBuckets.prettyUptimeStr(secs)
id=33
initialCapacity > 1 << 30
times + BASE_FILE_NUMBER
assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())
-1
new CreateTable(temporaryTableName,ImmutableList.of(new LikeClause(originalTableName,Optional.of(INCLUDING))),false,tablePropertyOverrides,Optional.empty())
LOG.warn("Cannot access storage directory " + rootPath)
@ConditionalOnEnabledHealthIndicator("mail")
beans.add(bean)
new DescribeInstances(awsConfig).execute()
assertEquals("Was: " + map + ", no-auto-index:"+ functionalTestHelper.removeAnyAutoIndex(map),1,functionalTestHelper.removeAnyAutoIndex(map).size())
statistics.addGetTimeNanos(System.nanoTime() - start)
TreeSet<String>
/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage("Unable to start module",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal("Unable to refresh the spring application context.  Root Cause was:",rootCause);       }  else {         log.fatal("Unable to refresh the spring application context. Unloading all modules,  Error was:",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace("Unable to shutdown module:" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),"Got an error while starting a mandatory module: " + e.getMessage() + ". Check the server logs for more information");       } catch (      Throwable t2) {         log.warn("caught another error: ",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } 
@ConditionalOnEnabledHealthIndicator("solr")
Object[]
FilteredBatchServerViewProvider.class
ps.saveRelationship(rel)
block.useSourceInfoIfMissingFromForTree(exprRoot)
shuttingDown
Exception ex
!((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
children == null
this.traceHandlers.remove(traceHandler)
Integer.valueOf(1)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
getClientConfig().getAddresses()
defaultCometSupport(defaultToBlocking)
listener.onStatus(new StatusJSONImpl(json))
LOG.error("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
valueClass(NullWritable.class)
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,"struct",className)
queueLength.asString()
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul","var")
ChronicleEngineEndpoint endpoint
ServletTestSuite testSuite=new ServletTestSuite(testClass); 
5 * 60 * 1000
Object[]
nameDefinitionMultimap.keys()
super.getFamilyCellMap()
i < 3
Exception t
assertEquals(Service.State.FAILED,service.state())
incomingMessage.getMessagePayloadByte(1)
context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)
Bytes.toBytes(regionname)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(streamid,id)
findState > 0
FlinkKafkaProducer011.class
delta < 11000
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))
Thread.sleep(1500)
titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
callTimeout=5000
if (mAllowUndeclaredRTE) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),"javadoc.classInfo","@throws",tag.getArg1());   } } 
E edge
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
b.entrySet()
entry.getValue().health().transformDeferred(this.timeoutCompose)
titleTextField.getText()
assertPlanEquals(expectedPlan,actualPlan)
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
services=9
logger.trace("Invalid Account Credentials")
return 8; 
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
sleepAtLeastMillis(1000)
src[i]
RemoteInterfaceType
"access-control/default is missing operations: " + defaults
cursor.getCurrentValueEndPosition()
req.getSession().getMaxInactiveInterval() * 1000L
node.getLifecycleService().shutdown()
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
Bukkit.getOperators()
maxSize < (used / total)
taskService.createTaskQuery().orderByExecutionId()
new StreamTaskException(exceptionMessage,e)
timeout=10000
new Font(edgeFontName,edgeFontStyle,edgeFontSize)
c.content().readSlice(CONTENT_LENGTH)
fieldDeser.getPropertyValueDirect(currentObject)
getPath("InputDefaultConfig.java")
systemId.length()
new GeoLocation(array.getDouble(1),array.getDouble(0))
file.getAbsolutePath()
queryIds.remove(deadQuery)
types.get(i)
new ClusterConfiguration("whatever","cluster://1","cluster://2")
@Override DiscardMessageOutput create(Stream stream,Configuration configuration); 
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
new StringBuilder(253)
WebSocketEventListener.class.cast(l).onClose(event)
row2 * layerTileHeight
logger.fine(name)
SOURCE_PATH.deref()
conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY)
Pattern.compile("(--?[a-zA-Z_]+)=(.*)",Pattern.DOTALL)
metaData.getColumnLabel(1)
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
Sets.<Long>newHashSet()
conceptAnswer.getAnswerConcept()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
DefaultAlluxioWorker.class
RadioKafkaInput.class
body.transferTo(position,target)
mMountTable.resolve(getPath(lastInode)).toString()
LOG.debug("Terminating gRPC server")
offset == 0 || millis % offset == 0
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertEquals(avDegree,1.0)
THREADS_PER_CLIENT=4
setop.getJavaName()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
DEFAULT_ROW_FLUSH_BOUNDARY=75000
LocalEjbReceiver.clone(resultCloner,exception)
target.addTaskAndWakeup(task)
logger.warn("Configuration for influxdb not yet loaded or broken.")
config(" ",1)
publisher.publishWanReplicationUpdateBackup(name,view)
cluster.getRexBuilder().makeCall(retType,calciteOp,childRexNodeLst)
logger.trace("myq securityToken: {}",securityToken)
new AutoValue_ModuleFiles(chunks,jsFiles,cssFiles)
registry.bind("amazonSQSClient",clientMock)
(Long)criteria.uniqueResult()
initialCapacity > 1 << 30
Long.valueOf(p.getProperty(screenName + ".id"))
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),null)
id=25
ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
new GdxRuntimeException("Failure reading Vorbis.",e)
new Tag(line,column,text,on,this)
lastUpdateTime2 >= lastUpdateTime
new StringBuilder(256)
converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)
new HiveS3Config().setS3AwsAccessKey("abc123").setS3AwsSecretKey("secret").setS3Endpoint("endpoint.example.com").setS3SignerType(PrestoS3SignerType.S3SignerType).setS3PathStyleAccess(true).setS3UseInstanceCredentials(false).setS3SslEnabled(false).setS3SseEnabled(true).setS3SseType(PrestoS3SseType.KMS).setS3SseKmsKeyId("KMS_KEY_ID").setS3EncryptionMaterialsProvider("EMP_CLASS").setS3KmsKeyId("KEY_ID").setS3MaxClientRetries(9).setS3MaxErrorRetries(8).setS3MaxBackoffTime(new Duration(4,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(20,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(8,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(4,TimeUnit.MINUTES)).setS3MultipartMinFileSize(new DataSize(32,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(15,Unit.MEGABYTE)).setS3MaxConnections(77).setS3StagingDirectory(new File("/s3-staging")).setPinS3ClientToCurrentRegion(true).setS3UserAgentPrefix("user-agent-prefix").setS3AclType(PrestoS3AclType.PUBLIC_READ).setSkipGlacierObjects(true)
!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
Double.parseDouble(value.toString())
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null || System.getProperty("com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames") != null
CompletableFuture<Void>
300 * Constants.SECOND_MS
stopwatch.elapsed(MILLISECONDS)
Math.max(1000L,connectionTimeout)
logger.debug("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
RestartStrategies.fixedDelayRestart(1,0)
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
DiagnosticType.warning("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
KBP_MINIMUM_SCORE=.453
optionsOverride.getLambdaRole()
closeCode <= 1001
public Builder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
RequestBody.create((byte[])bodyContents,mediaType)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
GL15.glGetBufferParameteriv(target,pname,params)
registry.bind("blogService",new BlogService())
logger.debug("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
new MalformedException("Unused message placeholder: " + phName,node)
serversByLoad.firstKey()
converter.tryConvertTo(rightValue.getClass(),leftValue)
new CommandLineException("ModelNode request is incomplete",e)
DeletionRetentionStrategyConfig.class
addr.isAnyLocalAddress() || addr.isLoopbackAddress()
AdviceWithTasks.afterByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
nodeManager.getWorkerNodes()
f.getAttrs().getMTime() * 1000L
bc.getAsyncWriteService()
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",60,SECONDS)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)
new DatagramDnsQuery(null,addr,1)
AuditEventFormatter messageFormatter
logger.info(getName() + " has been started")
factory.lookup(DefaultBroadcaster.class,id,true)
assertPlanEquals(expectedPlan,actualPlan)
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())
el.classNames()
request.getRelaxLocality() == true
EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)
waitForJobExecutorToProcessAllJobs(5000,500)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
r.getUri().getPath()
GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))
DIODE(356)
log.tracef("%s finished request %d",ManagementChannel.this,header.getBatchId())
items[17]
new IllegalStateException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
getter.getType()
otherWriter.write(line)
Multimap<JSType,JSError>
i <= maxIndex
public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
!active
excludesPattern == null || requestURI == null
1
executionStats.getStartedSplits()
proxy.getHost()
mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true)
DatabaseDescriptor.getListenAddress().getHostAddress()
CopyOnWriteArrayList<MessageListener<Object>>
headRef()
new IllegalStateException("File " + file.getPath() + " should not exist")
((Number)s.first()).floatValue()
loadTask instanceof LongTask
filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))
new SpdySessionStatus(2,"INTERNAL_ERROR")
compressedProto.length < 340000
/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws Exception {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } 
ImmutableList<Integer>
executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
ModuleIdentifier.fromString(moduleName)
graphHeight / 2
functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null
new StringBuilder(245)
StringUtils.isEmpty(finalFormKey)
logger.info(getName() + " has been started")
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
id=10839
DEFAULT_DATA_SIZE_PER_COLUMN=50
logger.trace("myq ReturnCode: {}",returnCode)
config.properties().get(REDIS_SHARED_POOL) != null
DeploymentDescription.getReplaceDeploymentOperation(locale)
targetDirectory.file("unwritable")
ctx.writeAndFlush("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
setUnknownLabels(collapsedUnary,mainLabel)
!(o instanceof Record)
new PeepholeSubstituteAlternateSyntax(false)
elapsed >= config.getConnectionTimeout()
assertPlanEquals(expectedPlan,actualPlan)
connection.local().createStream(toStreamId(i),false)
from("seda:foo").startupOrder(1).delay(500)
logger.finest("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
this.separator
_barrier.waitFor(nextSequence,1000,TimeUnit.MILLISECONDS)
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
getReduceValuesForReduceSinkNoMapAgg(parseInfo,destination,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
asyncResult.cause()
TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
contact.getWorldManifold()
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false,runtimeOnlyFlags)
Assert.fail("createDirectory was expected to fail with FileAlreadyExistsException")
VertexAttribute.ColorUnpacked()
fieldNameNode.getCharno()
dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0
endFunction("get_column_statistics_by_table: ",statsObj != null,null)
Thread.sleep(2000)
StringBuilder text
expiresOn.getTime()
LOG.warn("Unable to close socket selector")
node1.isEquivalentToTyped(node2)
GL20.glGetActiveAttrib(program,index,256,size,typeTmp)
LOGGER.debug("{} - Reset ({}) on connection {}",poolName,resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
systemId.length()
NIO_GROUP.shutdownGracefully(0,10,TimeUnit.SECONDS)
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)
stat.st_mtim.tv_nsec.longValue()
fLines.addElement(st.nextToken())
graph.getEdgesAndMetaEdges()
@UnrelatedTwo
AsyncHttpClientConfig.class
entityLabelProbVals.containsKey(label) && labelProbsForToken.get(label) < entityLabelProbVals.get(label)
userGroupMember.getUserGroupId()
id=42
new ModelNode().set(5000L)
primitiveType == GL10.GL_POINTS
abandonSegment(entry.getKey(),entry.getValue())
pId + BASE_FILE_NUMBER
ran.nextInt(250)
new StringBuilder(729)
assertEquals("Unable to read 2 bytes, got 0",ex.getCause().getMessage())
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,60_000)
1
version > 1
response.get(ROLLED_BACK)
row == null || row.size() == 0
LocalEjbReceiver.clone(resultCloner,exception)
period >= MINIMAL_POLL_PERIOD
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements")
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)
aggMap.size()
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
setMinHeight(minHeight)
List<TaggedWord>
value.getType().getName()
buffer.limit()
type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,"dict",className)
AbstractFilterRegistrationBean.class
new EnumValidator(ParticipantStatus.class,true,false)
c <= values.length()
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
ImmutableList<SourceFile>
c * c
IOException.class
mime == null || mime.value().length == 0
holder.addCallback(callback)
taken > 150
mError == null
new IncrementalIndexSegment(rtIndex,null)
sessionConf != null && sessionConf.get("tez.queue.name") != null
out.writeFloat((Float)obj)
new StringBuilder(256)
String.format(SCOPED_AUTHORIZE_URL,config.getApiKey(),formURLEncode(config.getCallback()),formURLEncode(config.getScope()))
findDelegateForNewObject(name)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
fullName.split("[/@]",3)
Assert.assertEquals(expected,result)
new CompilerException(sourcePath,e.line,e.getCause())
public class XpathRegressionRightCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={"8:9: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,"}",9)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"9:15: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,"}",15)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK" + "/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"5:72: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,"}",72)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.SAME.toString());     final String[] expectedViolation={"7:27: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,"}",27)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
TestUtils.randomByte() + 128
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
new IntRangeValidator(1,true)
checkpointPath.toString()
field.getFieldName().equalsIgnoreCase(s)
newId >= max
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
new StringBuilder(1024)
Cli.<Runnable>builder("presto")
rSocketMessageHandler.responder()
FILES_BYTES * 1000.0
sequenceFileVersion != SEQUENCE_FILE_VERSION
controller != null && controller.getState() != ServiceController.State.UP
framework.getBroadcasterFactory().lookup(a.broadcaster(),a.path(),true)
testModules("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
new ImportControl(stack.peek(),name,regex)
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
file.getFileNameOnly()
LOG.warn("SpaceReserver failed to free tier {} to {} bytes used: {}",tierAlias,reservedSpace,e.getMessage())
new BindException(newConcept,"concept")
K
adapter.getCustomArgumentResolvers()
Mockito.any(WorkerNetAddress.class)
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
(short)0777
logger.trace("Retreiveing door data")
public String getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
SecurityUtils.isAuthorizationEnabled(configuration)
IllegalStateException nsee
new StringBuilder(638)
processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())
BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
ctClass.toClass(clazz.getClassLoader(),null)
checkNotNull(sink,"The data sink must not be null.")
/**   */ class SctpServerPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn("Failed to accept a connection.",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to initialize an accepted socket.",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a partially accepted socket.",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a selector.",e); } } } } } 
fields.put(PERMISSIONS,perms)
waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)
maxSize(new Fixed(width),new Fixed(height))
setAttributeInternal(inodePath,false,opTimeMs,options)
ImmutableList.copyOf(interceptors)
id=10837
taskService.createTaskQuery().orderByExecutionId()
worker.clear()
PathUtils.concatPath(homeDir,YML_FILE_DIR)
modulePath.split(File.pathSeparator)[0]
JournalStateMachine.class
Configuration conf
cacheDirectory.mkdirs()
!content.readable()
securityDomain != null && !securityDomain.isEmpty()
new DefaultAsyncHttpClient(config)
this.context.getLogAggregationStatusForApps().add(finalReport)
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
System.nanoTime()
E edge
NodeUtil.getFunctionNameNode(fn)
assertTrue("reuse-address",networkConfig.isReuseAddress())
ufsPath.toString()
req.getServletPath()
dic.buildRouterChain()
setop.getIDLName()
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,false)
responseModels.entrySet()
createMessageConsumer(session,destinationName,messageSelector,false,null)
new Vector2(1,0)
processEngineConfiguration.getCommandExecutor()
conf.getRestBaseURL()
DefaultAlluxioWorker.class
dis.readFully(serializedData,0,length)
id=16
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null || System.getProperty("com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames") != null
request.getDueBefore()
Color.fromRGB(0x3B511A)
r.getUri().getPath()
n.doubleValue()
buildPages.getTypesWithoutHash()
Optional.fromNullable(resourceManagementScheduler)
postAgg.getName().equalsIgnoreCase(topNMetricName)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
entry.getUri()
t=b.getBroadcasterConfig().applyFilters(r,t)
new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)
mapper.getFactory()
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
RetryHandlingBlockMasterClient.class
proxy == null || proxy != view.getAnimation()
GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))
0 - originX
new IllegalStateException("Result is already complete: failed")
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
mTfs.unpin(mTfs.open(path))
dic.buildRouterChain()
BED(355)
plugin != null && plugin.canServeUri(uri,homeDir)
assertFalse(predicate.apply(pickleEvent))
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to date: " + value.toStringUtf8(),e)
pId + BASE_FILE_NUMBER
size=10
return 2; 
hz1.getLifecycleService().shutdown()
1
Context.getEncounterService().saveEncounter(encounter)
prefSize(new Fixed(width),new Fixed(height))
body.toByteArray()
pos < end
ps.setNString(i,parameter)
oldestNode == null || oldestNode.getLastSent() == null
this(parameters,new StringBuilder(),true); 
assertEquals(1000,timeout)
size=1000
new StringBuilder(238)
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
String requestRequiredAcks
assertEquals("ClassInfo's name should be non-null",ex.getCause().getMessage())
map.put(PASSWORD_KEY,password)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
region.getReplicaId()
CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
"Content-Type".equalsIgnoreCase(name)
factory.getEmbeddedServletContainer()
modulePath.split(File.pathSeparator)[0]
Assert.assertEquals(256,intValue)
batteryVp > high
bindingConfig != null && converterHandler != null
retVal.setProperty(entry.getKey(),value)
delta < 7000
this.transactionsRepository.getTransaction(this.xidTransactionID)
GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)
this.getNotEmptyWaitThreadCount()
LOG.warn("Ignoring duplicate class " + className)
System.nanoTime()
f.cancel(false)
asyncContext.currentAsyncTraceObject()
primitiveType != null || arrayComponentType != null
Bytes.toString(qualifierName,start,end)
LOGGER.error("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
Utils.isZkAuthenticationConfiguredTopology(topoConf)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
currentTime.get() / 1_000_000L
Optional.fromNullable(resourceManagementScheduler)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
logger.debug("gave up waiting for query reply from device {}",m_address)
Arrays.asList("cmd","ls","pwd")
dests.size() == 1 && joinTree.getNoOuterJoin()
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
request.charset == null
localCache.put(name,cacheEntry)
currentPath == null || currentPath.isEmpty()
Exception e
handler instanceof ChannelOutboundHandler
LOG.warn("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
factory.getEmbeddedServletContainer()
ImmutableList<ObjectType>
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
Files.deleteIfExists(dir.toPath())
publisher.publishWanReplicationUpdateBackup(name,view)
new byte[12]
String.class
this.transactionsRepository.getTransaction(this.xidTransactionID)
log.debug("Performing lookup: %s --> %s",nodeIds,retVal)
xtw.writeCData(customProperty.getSimpleValue())
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
new JGroupsFilter(bc)
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
CacheManagerCheck.class
new BulletTestCollection()
mock.expectedMessageCount(1)
new StringBuilder(238)
request.getServletPath()
map.lock(key,1,TimeUnit.SECONDS)
AtmosphereRequest request
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",queryableStateName,jobId)
in.readData()
ast != null && ast.atnState != null
channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))
logger.debug("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
logger.fine("Creating extern file for exports")
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
timeoutLatch.await(2500,TimeUnit.MILLISECONDS)
assertThat(context).getBeans(HandlerMapping.class).hasSize(5)
DataStreamSink<OUT>
id=17
SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
-1L
preloadQueue.size == 0 || tasks.size() == 0
getTokenDisplayNames()
serviceName == null || seenServiceNames.contains(serviceName)
routes.BuffersResource()
n.getNodeData().y()
getConnectTimeout()
bean.getCollectionTime()
jniGetLocalAxisA(addr,tmp)
lastUpdate.after(updated) || lastUpdate.equals(updated)
new Font(nodeFontName,nodeFontStyle,nodeFontSize)
value == null
(Long)criteria.uniqueResult()
resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
node.getLocalName()
builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)
serverService.getOutgoingInterceptors()
contentType != null && charset == null
GL20.glGetVertexAttribiv(index,pname,params)
System.identityHashCode(o)
Exception e
element.getLocalName()
HazelcastClient.newHazelcastClient(clientConfig)
websocketComponent.setMaxThreads(20)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
connection.remote().incrementAndGetNextStreamId()
this.thrown.expectMessage("File must not be null")
yamlFactory.createParser(input)
assertClusterSizeEventually(2,nodes[0])
"simple".equalsIgnoreCase(language) && expression.indexOf("${") >= 0
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalStateException cannotCloseTransactionContainerEntityManger(); 
id=14240
times + BASE_FILE_NUMBER
Exception e
endpointA.expectedBodiesReceivedInAnyOrder("A blue car!","A blue car, again!")
public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } 
calendar.getTimeZone().getRawOffset()
Assert.notNull(cache,"No cache with name '" + cacheName + "' found.")
UnsupportedOperationException.class
i=2
BroadcasterFactory.getDefault().lookup(mapping,true)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())
offset(5.0)
new MockQueryExecution(2)
GL20.glUniform2iv(location,v)
invocation.pendingResponse != null
Thread.sleep(200)
ExceptionUtils.getStackTrace(th)
@Override public Response description(String description){   this.setDescription(description);   return this; } 
context.getLogger().logAttributeWarning(address,MESSAGES.invalidJSFSlotValue(slot.asString()),SLOT_ATTRIBUTE_NAME)
callback.done(false)
serversByLoad.firstKey()
layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,218,Short.MAX_VALUE)
visitStatement(node,context)
reportsE.appendChild(reportE)
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true)
MESSAGES.failToReplicateAttribute(name,value.getClass().getCanonicalName())
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
source.getAddress()
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
response.get(ROLLED_BACK)
logger.debug("{} {}",errorCode,message)
totalBytesOnTiers.containsKey(tierAlias) && totalBytesOnTiers.get(tierAlias) > 0
initialCapacity > 1 << 30
AttributeUtils.getDefault().getMax(column,valuesArray)
new StringBuilder(560)
getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
failure == null
type.getName()
instance2.getLifecycleService().shutdown()
user.getSystemId() == null || user.getSystemId().equals("")
logger.trace("Received MyQ  JSON: {}",dataString)
generator.generate(signedByKeyPair.getPrivate())
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,true,false,factory)
assertFalse(jmsTemplate.isPubSubDomain())
modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)|| modifiers.branchContains(TokenTypes.LITERAL_STATIC)
tokens.getText()
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
RetryHandlingBlockMasterClient.class
(Integer)strategy.getOrNull(third)
Foundation.log("[debug] " + tag + ": "+ message)
Sets.<Long>newHashSet()
excludesPattern == null || requestURI == null
DirectMessage.createDirectMessageList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json"))
outputBatchSize=1000
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
JSError.make("my/js.js",-1,-1,ModuleLoader.MODULE_CONFLICT,"my/js.js")
testModules("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
conf.getRestBaseURL()
queryParams != null && !queryParams.isEmpty()
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; 
size=500
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
new HttpParameter("retweets",retweets)
processInstance.getProcessDefinitionId()
cache.flushAndForce()
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
doInvoke(args.first(),args.rest())
Preconditions.checkNotNull(fileSystemMaster,"fileSystemMaster")
secConn != null && secConn.size() > 0
Integer.parseInt(matcher.group(1))
engine.execute(query).dumpToString()
assertPlanEquals(expectedPlan,actualPlan)
toRemove[1]
Integer id=Integer.parseInt(reader.getAttributeValue(null,"id")); 
request.getContentType().startsWith("application/x-www-form-urlencoded")
TestUtils.randomByte() + 128
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
!mkdirs(mBaseDir)
{(byte)this.getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}
partition.getParameters()
Thread.sleep(2500)
simple.getToReceivedDate()
lineageInfo.getChildren()
ssl.hasDefined(CommonAttributes.PROTOCOL)
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(1000)
return true; 
disables.contains(a.getName())
Foundation.log("[info] " + tag + ": "+ message)
boundary.endsWith("\"")
logger.trace("NODE {}: App version requested but Version class not supported",this.getNodeId())
ImmutableList.copyOf(modules)
context.setDelayer(2000L)
requestContext.getUri().getRawPath()
getExecutorService("hz.initialization")
nodeEngine.getSharedService(LockService.SERVICE_NAME)
ServiceLoader.load(WorkerFactory.class,WorkerFactory.class.getClassLoader())
planNode.getPlanNodeScheduledTime()
createRecord(value,now,expiryTime)
util.getDataTestDirOnTestFS(table)
@Override public Integer getValue(){   return getThreadCount(state); } 
out.writeData(function)
graph.getEdgesAndMetaEdges()
setDiskPersistent(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
conf.getRestBaseURL()
-Float.parseFloat(position.getChildByName("Y").getText())
Integer.parseInt(sessionTTL)
builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)
!isTrivial()
javaWriter.emitSingleLineComment("foo")
bindingGroup.hasDefined(PORT_OFFSET)
MESSAGES.pathEntryNotFound(relativeTo)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)
nlDataOutNodes != null && nlDataOutNodes.getLength() > 0
id=79
metastore.getHost()
(short)0777
newPacked[j]
partSpec.size()
id=10851
Assert.assertEquals(getNotAllowedExceptionMessage("hello"),e.getCause().getMessage())
id=10843
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
assertEquals(1000,timeout)
status().isFound()
configList == null || configList.size() == 0
AsteriskActionEnum.valueOf(action)
processSelectedKeys()
COUNT_DATABASE.put(key,newVal)
Thread.sleep(4000)
optionsOverride.getLambdaRole()
Long.parseLong(timeout)
defaultCamelContext.removeRoute(id)
new IncrementalIndexSegment(index,null)
public CharSequence getText(){   return text; } 
id=26
is(5)
nodeEngine.getSharedService(LockService.SERVICE_NAME)
obj1.isLoose && obj2.isLoose
LOG.warn("Could not append. Requesting close of wal",e)
GL20.glUniform1iv(location,toIntBuffer(v,offset,count))
engine.execute(query).dumpToString()
latch.await(5,TimeUnit.MINUTES)
HornetQEmbeddedConfigurationFactory.class
latch.await(10000,TimeUnit.MILLISECONDS)
this.thrown.expect(IllegalStateException.class)
Integer.parseInt(st.nextToken())
TimeUnit.SECONDS.toMillis(5)
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to time: " + value.toStringUtf8(),e)
fieldNameNode.getCharno()
dis.readFully(serializedData,0,length)
hashFunction.newHasher().putBytes(bigEndian)
getBatchId()
Object[]
target.directory("zk" + id + "data",true)
javaWriter.emitSingleLineComment("foo")
new IOException("test exception")
count < 0
r != null
"Invalid modules directory: " + bundlesDir
getMockEndpoint("mock:event").expectedMessageCount(6)
!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)
k < FILES
request.getRemoteAddr()
assertThat("Unexpected error: \n" + cli.getErrorOutput(),cli.getErrorOutput().length(),equalTo(0))
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf","isMemberOf")
cache5.setColors(red)
id=18
new CommandLineException("Communication error",e)
new StringBuilder(120)
Call<RemoteCallResponseType>
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",DOUBLE)
ImmutableList<Symbol>
oldModel.getVendorExtensions().get("x-className") != null
level < RF_STATUS_MEDIUM_SIGNAL
FsDatasetImpl.LOG.warn("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
ownedEntryCount == nearCacheSize
timeout=120_000L
Thread.sleep(3000)
preserve.asString()
logger.warn("Failed to enumerate network interfaces",e)
parameter.name()
x instanceof ISeq || x instanceof IPersistentList
queueLength.asString()
rackIdToNodes.getOrDefault(rid,Collections.emptyList())
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)
statistics.addGetTimeNanos(System.nanoTime() - start)
CommonUtils.randomAlphaNumString(random.nextInt(10))
routeController != null
ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining("AutoFactory does not support generic types").in(file).onLine(21)
o instanceof MkdirsOptions
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
targetDescription.getDeclaredValueClassName()
Long.parseLong(timeout)
Double.parseDouble(value.toString())
new StringBuilder(245)
Column::getName
System.nanoTime()
(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
javaWriter.emitSingleLineComment("foo")
conceptAnswer.getAnswerConcept()
public static XQueryBuilder xquery(File file) throws IOException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
!Values.UPGRADE.equalsIgnoreCase(connection)
bundleContext.getBundle().getResource(uri)
Character.isWhitespace(origText.charAt(i))
assertPlanEquals(expectedPlan,actualPlan)
registrar.checkExisting(added)
mLineageStore.reportLostFile(fileId)
id=10996
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
return areaWidth; 
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
var.setValueType(guessType(value))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)
ServiceAnnouncingChatHandlerProvider.class
curTime == 0 || totalTime / curTime == curOps
supportSession=false
startOffset >= pages.size()
otherWriter.write(line)
!success
mock(ExampleService.class)
id=51
logger.trace("Session created")
c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
this.thrown.expectMessage("File must exist")
new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
assertMockEndpointsSatisfied()
Thread.sleep(5000)
returnValue
HIVE_PARTITION_OFFLINE(6,USER_ERROR)
out != null && out.getJmsMessage() != null
id=79
setUnknownLabels(collapsedUnary,mainLabel)
replicatedMapService.getReplicatedRecordStore(mapName,true)
ModuleIdentifier.fromString(moduleName)
websocketComponent.setMaxThreads(20)
@InputIntMethodAnnotation(value=43)
new StringBuilder(740)
message.contains("14807") || message.contains("14883") || message.contains("11340")
routes.BuffersResource()
new CustomChangeException("Failed to insert one or more concept map types",be)
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN,true)
new PoolBagEntry(null,0,pool)
conf.getRestBaseURL()
Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())
ParseUtils.parseS300THHumidity(S300TH_DATA_1)
return true; 
Map<String,Object>
rt == Boolean.TYPE && !(ret instanceof Boolean)
IOUtils.closeQuietly(is)
DiagnosticType.disabled("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
userGroupMember.getUserGroupId()
instance2.getLifecycleService().shutdown()
new ClusterConfiguration("whatever","cluster://1","cluster://2")
DefaultObjectNameFactory.class
testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
mpline == null || !mpline.contains(boundary)
new String(bytes2,"UTF8")
new IllegalStateException("Result is already complete: succeeded")
id=16506
lookupLink(parseName(name))
new VariableInformation(1,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
E edge
pId + BASE_FILE_NUMBER
tx != null
Exception e
getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource("beans.xml")
TimeUnit.SECONDS.toMillis(5)
manager != null && manager.server != null
LOG.debug("Failed to get mount information: {}",e.getMessage())
stat.st_size.longValue()
SimpleAttributeDefinitionBuilder.create("file",ModelType.OBJECT,false)
ServiceAnnouncingChatHandlerProvider.class
(Relationship)container
new IntRangeValidator(0,true,true)
ConditionalOnEnabledHealthIndicator.class
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes())
Math.max(clientCount,1)
id=16504
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)
GL.glPolygonOffset(factor,units)
await().atMost(20,TimeUnit.SECONDS)
bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())
factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
julLogger.severe("Hello world")
options != null && options.getChildCount() > 0
items[30]
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())
parent.incrementPrioritizableForTree0(amt,oldParent)
Character.toUpperCase(ch)
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
ReferenceCountUtil.release(holder)
initialCapacity > 1 << 30
Arrays.asList("bool","qint32","qint64","float","double")
mock.setMinimumResultWaitTime(1500)
logger.fine("Normalizing")
log.err("Could not annotate via server! Trying to annotate locally...",t)
assertEquals(fc2,fc)
Preconditions.checkNotNull(location,"location")
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
transform.setToRotation(new Vector3(1,0,1).nor(),rotAngle)
Validate.notEmpty(name,"Cookie name must not be empty")
request.getServletPath()
to.getClass()
javaBeanSerializer.getFieldValues(javaObject,json)
!sourceEdgeTextData.getText().isEmpty()
SecurityUtils.isAuthorizationEnabled(configuration)
table == null
Context.getEncounterService().saveEncounter(encounter)
MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)
ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER,STANFORD_DEPENDENCIES)
new EnumValidator<TransactionMode>(TransactionMode.class,true,true)
SocketUtils.findAvailableTcpPort(41000)
msg.getType() == Message.Type.error || msg.getBody() == null
getSslStoreProvider().getTrustStore()
assertPlanEquals(expectedPlan,actualPlan)
grammar.getTokenDisplayNames()
assertThat(response).isEqualTo("Ok.\n")
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
inflightRepository != null
!DruidDataSourceUtils.isRemoveAbandoned(datasource)
DynamicAttributeRanking.refreshMinMax(this,graph)
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx,false)
new BindException(newConcept,"concept")
GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))
privObj.getObjectName().equals("masking_test") || privObj.getObjectName().startsWith("masking_test_n")
value >> 8
hazelcastFactory.newHazelcastClient(newClientConfig())
userGroupMember.getUserGroupId()
getConnectTimeout()
private final StringBuilder tmpSb=new StringBuilder(); 
this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)
QUEUE_TRANSACTION_LOG_RECORD=44
assertThat(ds.getValidationInterval()).isEqualTo(3000L)
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while","type")
grammar.getTokenDisplayNames()
new Packet(data,0)
size=500
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
string.length() > 0
new WebApplicationException(e,serverError(e))
jarName.endsWith(".jar") || jarName.endsWith(".war")
id=10805
views.html.search.noresults.render(currentUser(),q,searchResult,null)
sorted_files.get(i).createReader(canUseDrop)
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"),e.getCause().getMessage())
details.setProperty(fileName,Long.toString(timestamp))
start.expectedMessageCount(7)
javaWriter.emitSingleLineComment("foo")
"Segment initialized with too large address: " + offHeapAddress + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
assertClusterSizeEventually(2,nodes[0])
getConnectTimeout()
Lists.newArrayListWithCapacity(resultMessages.size())
config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)
methodsToImplement(type,methods)
assertEquals(9,set.size())
new byte[18]
TimeUnit.SECONDS.toMillis(5)
StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))
List<String>
NETHER_WARTS(115)
(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
logger.fine("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
new byte[10]
model.getEnum().size() == 3
logger.trace("Session created")
!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null
response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)
index >= capacity()
id=35
PostgreSQLConnectorConfig.class
hz.getCluster().getLocalMember().isLiteMember()
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
CompletableFuture<Void>
world.add("capsule",5f,3f,5f)
new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName(),Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED,"true")
new StringBuilder(50)
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
id=43
GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)
i < repeatCount
RequestBody.create((String)bodyContents,mediaType)
Preconditions.checkNotNull(timer,"timer")
LOG.warn("Failed to find " + baseDirectory.getAbsolutePath())
ExecuteJobsRunnable.class
req.startAsync(req,res)
mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L
28 * ClassSize.REFERENCE
getOrCreateConnectionFactory()
from("direct:c").delay(1000)
fragUtils.fragmentType()
new IllegalStateException("Result is already complete: succeeded")
!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())
war.setWebXML(SimpleWebTestCase.class.getPackage(),"web.xml")
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
getPath("InputDefaultConfig.java")
request.getRemoteAddr()
latch.await(20,SECONDS)
ChannelBufferHolders.messageBuffer(queue)
10 * 1000000L
logger.trace("Invalid Account Credentials")
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",false,false,false)
GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))
GL11.glGetFloatv(pname,params)
HIVE_TABLE_OFFLINE(2,USER_ERROR)
propMember.getType()
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
LOG.error(getName() + " caught: ",e)
Cache.getTableName(type)
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
legacyValue.isDefined()
StatBuckets.prettyUptimeStr(secs)
vindex > Short.MAX_VALUE
return ctx; 
sizeNeeded > items.length
CellUtil.estimatedHeapSizeOfWithoutTags(cell)
new ModelNode().set(25000L)
new ModelNode().set(60000L)
getSessionTimeout().getSeconds()
logger.fine(sb.toString())
LOG.error(e.getMessage(),e)
request.getDueAfter()
connection.psubscribe(jedisPubSub,patterns)
DUE_DILIGENCE_MILLIS=100
UnderFileSystemUtils.deleteFileIfExists(mUfs,mTempCheckpointPath)
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new ValueAndTagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.value,this.tags);   }   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
GL20.glGetShaderiv(shader,pname,params)
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
context.start()
@ConditionalOnEnabledHealthIndicator("db")
exportStatusCounts(exporter)
pool != null && pool.getDataSource().getClass().isAssignableFrom(iface)
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null,null)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character","AnyObject")
curTime == 0 || totalTime / curTime == curOps
topicRegistrations == null || topicRegistrations.isEmpty()
mock.expectedMinimumMessageCount(10)
executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)
LOG.warn("Cannot resolve the host name for " + regionAddress + " because of "+ e)
InetAddress.getByName("localhost")
logger.debug("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
Color.fromRGB(0x287697)
serverService.getOutgoingInterceptors()
ModelVersion.create(2,0,0)
ugi.checkTGTAndReloginFromKeytab()
LinkedList<Object>
applicationStatistics.incrListUserTimes()
args.length < 2
assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
WALSplitter.moveAsideBadEditsFile(fs,edits)
this.healthMvcEndpointProperties.getMapping() != null && this.healthMvcEndpointProperties.getMapping().size() > 0
Context.getAdministrationService().saveGlobalProperty(propToUpdate)
attribute.getDefinition().getMarshaller()
GL20.glUniform4fv(location,v)
createRecord(value,now,expiryTime)
endsWith("/home/source")
asyncResult.cause()
progress.start(0.35f)
logger.trace("Retreiveing door data")
-29
LoadTask.class
src[i]
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new ChannelHandler(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } 
factory.get(mResultClass,NO_ANNOTATIONS,retrofit)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
mm.tryLock(key,10,TimeUnit.SECONDS)
public Builder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
decoder.readInbound()
1000 * 60
POLL_PERIOD=1000L
T extends Model
this == OTI_ONLY
GL20.glGetVertexAttribfv(index,pname,params)
AtmosphereRequest request
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
id=10868
table == null
in.readData()
logger.trace("myq securityToken: {}",securityToken)
Nd4j.getAffinityManager().getDeviceForCurrentThread()
private final PropertyKey mBindHostKey; 
return this; 
id=10855
AdviceWithTasks.removeByToString(route,toString,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
DateTimeZone.forID("Asia/Shanghai")
ImmutableList<TypedVar>
Thread.sleep(100)
!Iterables.isEmpty(batchServerInventoryView.getInventory()) && Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
1
attribute.getDefinition().getMarshaller()
b.length() - 2
transitiveClosure.setNumberOfPartitions(3)
(InvocationTargetException)unwrapped
registry.bind("firehoseClient",amazonKinesisFirehoseClient)
tileElement.getChildByName("properties")
messageHandler.serverResponder()
id=49
saveTask instanceof LongTask
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
DaggerAutoFactoryProcessorComponent.builder()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
request.getPathInfo()
MathUtils.random(width)
new StringBuilder(729)
Exception t
(BeanDefinitionRegistry)beanFactory
Math.abs(diff - maxAge) <= 2
new StringBuilder(50)
destination.getValue()
d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null)
SimpleAttributeDefinitionBuilder.create("max-inclusive",ModelType.BOOLEAN,true)
List<Double>
final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig=clusterConfigService.get(DeletionRetentionStrategyConfig.class); 
id=34
registry.bind("sessionStateListener",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )
private final PropertyKey mHostNameKey; 
new StringBuilder(560)
asList(8L)
timeMillis + MILLIS_IN
sExecutorService.shutdownNow()
testerAnnotation.annotationType()
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly),curlyLevel())
AsyncResult<Void>
initialCapacity > 1 << 30
!condition.isEmpty()
id=46
ResponseBody.create(new byte[0],MediaType.get("text/plain"))
registry.bind("sessionStateListener",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )
buffer.limit()
serversByLoad.firstKey()
assertEquals(4933401l,received.get(0)[1])
assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())
realIndex < columns.size() && columns.get(realIndex).getColumn() != null
FsDatasetImpl.LOG.warn("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
id=22
GL20.glUniform4iv(location,v)
mock.expectedMessageCount(1)
hotDrinkDelay=300
DiagnosticType.error("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
Preconditions.checkNotNull(uri,"uri")
public Builder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } 
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
nameDefinitionMultimap.keys()
assertMockEndpointsSatisfied()
NettyUtils.isDomainSocketSupported(dataSource)
new IllegalStateException("Result is already complete: succeeded")
1
20000 * 4 * 3
registry.bind("connectionFactoryMock",connectionFactoryMock)
ssl.hasDefined(CommonAttributes.CERTIFICATE_KEY_FILE)
assertPlanEquals(expectedPlan,actualPlan)
id=53
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
recordDefaults(HiveS3Config.class).setS3AwsAccessKey(null).setS3AwsSecretKey(null).setS3Endpoint(null).setS3SignerType(null).setS3PathStyleAccess(false).setS3UseInstanceCredentials(true).setS3SslEnabled(true).setS3SseEnabled(false).setS3SseType(PrestoS3SseType.S3).setS3SseKmsKeyId(null).setS3KmsKeyId(null).setS3EncryptionMaterialsProvider(null).setS3MaxClientRetries(5).setS3MaxErrorRetries(10).setS3MaxBackoffTime(new Duration(10,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(10,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(5,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(5,TimeUnit.SECONDS)).setS3MultipartMinFileSize(new DataSize(16,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(5,Unit.MEGABYTE)).setS3MaxConnections(500).setS3StagingDirectory(new File(StandardSystemProperty.JAVA_IO_TMPDIR.value())).setPinS3ClientToCurrentRegion(false).setS3UserAgentPrefix("").setS3AclType(PrestoS3AclType.PRIVATE).setSkipGlacierObjects(false)
getDatabaseCatalog() != null && getDatabaseCatalog().length() > 0
complete.expectedBodiesReceivedInAnyOrder("finish","stop","faulted","except")
initialCapacity > 1 << 30
entry != null && !DropboxUploadMode.force.equals(mode)
singletonComponentInstance == null
new Duration(30,SECONDS)
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
sizeNeeded > items.length
createRecord(value,now,expiryTime)
notifier.isIgnoreExchangeSendingEvents()
CommonUtils.randomAlphaNumString(random.nextInt(10))
atlasFile.name()
LOG.debug("Getting asynchronous method stub from channel")
this.thrown.expect(IllegalStateException.class)
logger.trace("Retreiveing door data")
Metric<Integer>
/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX="Check";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName="WARN";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append("] ").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(" [").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } 
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
this.thrown.expectMessage("File must exist")
System.nanoTime()
Long.parseLong(args[2])
TIMEOUT=40000L
mHeartbeatExecutor != null
order.getDosingInstructions()
VertexAttribute.ColorPacked()
AtmosphereResponse.newInstance()
isDoubleA && isIntB
cal.set(1900,0,1,hour,minute,second)
public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)
Message message
JedisException e
new StringBuilder(256)
monochrome=false
((Number)s.first()).doubleValue()
getClientConfig().getAddresses()
assertMockEndpointsSatisfied()
recursiveUFSDeletes.remove(ancestorPair)
id=32
setAttributeInternal(tempInodePath,false,opTimeMs,options)
assertEquals(avDegree,0.5)
assertPlanEquals(expectedPlan,actualPlan)
"Can't have more than 32767 vertices per batch: " + maxVertices
Character.toUpperCase(ch)
List<Item>
InputLaunchResponse.class
connection.psubscribe(jedisPubSub,patterns)
getRegistry().bind("hb",hb)
first=word.substring(0,3)
BufferUtils.newUnsafeByteBuffer(fileSize)
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
jmsManager.removeTopicFromJNDI(name)
N node
reg.getTimers(transformFilter(filter))
!success
new GZIPOutputStream(outputStream)
theirs=theirIterator.next()
id=19905
config.get(CONFIG_KEY_LOCK_READ_TIMEOUT)
"Can't have more than 32767 vertices per batch: " + maxVertices
width - originX
System.currentTimeMillis()
mViewAbove.setCurrentItem(0,animate)
DefaultAlluxioWorker.class
Thread.sleep(300)
VertexAttribute.ColorPacked()
location.equals(BlockStoreLocation.anyTier())
Exception e
Thread.sleep(100)
id=10838
new IllegalArgumentException("Command not found in bolt message: " + shellMsg)
10 * 1000000L
MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)
checkArgument(!"/".equals(resourcePath),"%s is the classpath root",resourcePath)
assertTrue(predicate.apply(pickleEvent))
Throwable ex
mapper.getFactory()
part.getPartitionPath()
engine.execute(query).dumpToString()
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),true)
ChannelBuffers.wrappedBuffer(request.getByteData())
hasMatch=false
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1
List<TaggedWord>
f.getAttrs().getMTime()
id=54
private T actor; 
error.expectedMinimumMessageCount(2)
new StringBuilder(726)
retries=1
Namespace.CURRENT.getUriString()
TimeUnit.SECONDS.toMillis(5)
assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(13,containsApplicationLog)
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
return EOF_DATA; 
method.invoke(checksum,ByteBuffer.allocate(1))
this.r != null && r != null
DefaultManagementMBeanAssembler.class
getCurrCapacityUsed()
realPointerIndex >= AndroidInput.NUM_TOUCHES
!regex.equals(lastRegex) || p == null
assertMockEndpointsSatisfied()
Tuple2.of(timeoutPattern4,12L)
ImmutableSet<String>
new FieldFrame(null,true,null)
customResourceLocator(url)
request.getRemoteAddr()
attribute.getDefinition().getMarshaller()
mMountTable.resolve(getPath(lastInode)).toString()
sanitizeName(name)
assertMockEndpointsSatisfied()
checkForMisplacedBindingAnnotations(method,errors) || !isValidMethod(injectableMethod,errors)
xtw.writeCData(customProperty.getSimpleValue())
inUseByte != Record.IN_USE.byteValue() && inUseByte != Record.NOT_IN_USE.byteValue()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
stat.st_ctim.tv_nsec.longValue()
out.writeInt(this.connectionAddress.getPort())
deployOneTaskTestProcess()
assertEquals(1,map.size())
executor.execute(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
GL20.glGetProgramiv(program,pname,params)
new byte[18]
alpha=0
object == null
!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
callTimeout=10000
statistics.addRemoveTimeNanos(System.nanoTime() - start)
n.getNodeData().y()
/**   * Telnet port.  */ private Integer port=5000; 
fireMessageReceived(ctx,completeMessage,e.getRemoteAddress())
pool.drain()
factory.getEmbeddedServletContainer()
map.set(keyValue.getKeyData(),value)
promise.tryFailure(new ClosedChannelException())
i=0
Object[]
Thread.sleep(500)
SystemPropertyUtil.getBoolean("io.netty.noJdkZlibDecoder",true)
engine.execute(query).dumpToString()
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
doInvoke(args.first(),args.rest())
connections.get(target)
E edge
getLog().warn("register druid-driver mbean error",ex)
/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     return sb.toString();   } } 
assertPresent(GsonConverter.class)
Class.forName(serializerConfigClassname,false,userCodeClassLoader)
sizeNeeded > items.length
reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)
@InputMagicNumberIntMethodAnnotation(-44)
newHighlyAvailableDatabaseBuilder(path)
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)
deployment.addServletContainerInitializer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
pairs != null && pairs.getKeyValues() != null
sizeNeeded > items.length
new InputStreamReader(is,"UTF-8")
Integer.parseInt(sessionTTL)
fMethodDescriptions.putIfAbsent(method,description)
Thread.sleep(200)
new StringBuilder(1024)
DEFAULT_HEAP_LIMIT_CAP=700
stopTimeNs - requestStartTimeNs
@ConditionalOnEnabledHealthIndicator("elasticsearch")
assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
items[22]
mockRegionInfo.isMetaTable()
new IndexOutOfBoundsException("negative offset:" + offset)
1
LOG.warn("Could not append. Requesting close of wal",e)
GatherGetterAndSetterProperties.update(compiler,externs,root)
new BindException(newConcept,"concept")
Bytes.toBytes(regionname)
assertEquals(5,set.size())
getCurrCapacityUsed()
case 2: 
r.destination != null && !r.destination.isEmpty()
System.currentTimeMillis() - start + 750
parent.incrementPrioritizableForTree0(amt,oldParent)
value.equals(values[i])
logException(exception)
Iterable<String>
contact.getWorldManifold()
new SetExchangePatternType(exchangePattern)
JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION,pair.type.toString())
GL11.glTexParameteriv(target,pname,params)
result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())
builder.put(columnHandle,0.0)
maxRowsPerFrame=5000
@Override public Response header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
super.setV(v)
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
drawable != null
setLowHighExpected(lowResults,highResults,expectedResults,MUC_TP,5965,5970,5965)
ChannelBuffers.wrappedBuffer(bytes,0,length)
file.toURL()
planNode.getPlanNodeCpuTime()
assertEquals(2,beanInfo.getAttributes().length)
connectors.put(connectorId,connector)
assertEquals(conf,(Configuration)serializeDeserialize(conf))
initialCapacity > 1 << 30
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())
connectPromise.tryFailure(t)
log.warn(e,"Graceful shutdown of task[%s] aborted with exception.",task.getId())
superClass == Object.class || superClass == null
request.getPathInfo()
index < mInUseLocks.length()
assertEquals(13,tokens.size())
i >= BY_WOOL_DATA.length
indexOutURI.toString()
logger.debug("gave up waiting for query reply from device {}",m_address)
logger.trace("Mapped {} to {}",t,e.getValue())
servers == null || servers.isEmpty()
private final ChannelPipeline pipeline; 
getTupledSet()
Response<RemoteCallResponseType>
log.debug("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
"Unsupported filesystem scheme found in the backup target url. Error Message: " + expMsg
1
logger.trace("Retreiveing door data")
RevisionVersion=3
factory.getEmbeddedServletContainer()
kryo.readObject(input,JobID.class)
pId + BASE_FILE_NUMBER
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
JsonRecordHiveMapper.class
variables.putAll(transientVariabes)
maxInvocationCountObservedDuringWarmup * 2
id=10846
e.getMessage()
callTimeoutMs=10000
GL20.glVertexAttribPointer(indx,size,type,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())
assertMockEndpointsSatisfied()
frameHandler.getClass() != FrameAggregator.class
List<Data>
nodeEngine.getSharedService(LockService.SERVICE_NAME)
public class CourierNew extends BasicFontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
new IllegalStateException("Result is already complete: succeeded")
LOG.warn("Unable to delete {} because listInternal returns null",path)
logger.fine("Parsing Dep: " + filePath)
!blocked.isDone()
id=16511
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
Exception ex
public Builder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
/**   * The resource.   */ private R mResource; 
read(buffer,0,(int)Math.min(buffer.length,len))
lc + lp
statistics.addPutTimeNanos(System.nanoTime() - start)
JsonNode::isNumber
InetAddress.getByName("127.0.0.1")
Integer.parseInt(parts[1],16)
assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
new NagiosNscaStub(25668,"secret")
printLine("Unable to connect due to unrecognised server certificate")
planNode.getPlanNodeScheduledTime()
"Requeuing shutdown because rootScanned: " + rootRescanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
GL11.glGetTexParameterfv(target,pname,params)
rsMeta.getColumnLabel(i + 1)
LOG.debug("EOL(end-of-line) defined for the CSV: {}",eol)
call.getStartTime()
testProviderConfig()
Integer.parseInt(tokens[3])
readBytes > 0
i > 0
PositiveDurationValidator.class
endFunction("delete_column_statistics_by_partition: ",ret != false,null)
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") DeploymentUnitProcessingException sessionTypeNotSpecified(String bean); 
tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS && tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND
subtypeProps == null || subtypeProps.isEmpty()
DataStreamSink<OUT>
filters={StringFilterAggregator.class}
defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary
Float[]
public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } 
Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); 
logger.warn("Failed to enumerate network interfaces",e)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
filters={StringFilterAggregator.class}
XMLInputFactory.newInstance()
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)
CellUtil.estimatedHeapSizeOfWithoutTags(cell)
logger.debug("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new ZipAggregationStrategy(true,true)
context.start()
verifyViewMethodsNotDeclaredFinal(sessionBeanClass,localBusinessInterfaces)
endpoint.getOrCreateConnectionFactory()
d.setMinorVersion(1)
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
stat.st_ctim.tv_nsec.longValue()
nodeEngine.getSharedService(LockService.SERVICE_NAME)
final ImportControl root=ImportControlLoader.load(new File(getPath("import-control_complete.xml")).toURI()); 
obj.getRequiredTokens()
registry.bind("params",params)
op.get("address").add("host",host)
E edge
assertThat(connector.getSoLingerTime()).isEqualTo(30000)
additionalProperties.put(DATE_FORMAT,defaultDateFormat)
messageHandler.responder()
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
assertOpenEventually(countDownLatch)
url != null
ChronicleEngineEndpoint.class
T exception
this.thrown.expectMessage("File must not be null")
failureDesc.contains("14807") || failureDesc.contains("14883") || failureDesc.contains("13456")|| failureDesc.contains("11340")
this.instanceManager != null && this.scheduler != null
(getSource().z() + getTarget().z()) / 3f
id=10840
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
font.draw(batch,results,20,300)
factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)
version > 1
this.logger.isDebugEnabled()
Throwable unexpectedException
AvailablePortFinder.getNextAvailable(4000)
r.getResponse().sendError(503,"Remotely closed")
R
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)
In.forValue(apiKeyAuthConfig.in().toValue())
LOG.error("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
failure == null
newCount <= reservoirSize
clusterService.getIndexerFailures(1,0)
task.abort()
parameter.name()
type.equalsIgnoreCase("boolean") || type.equalsIgnoreCase("bool")
private final DynamicTransformerRegistry dynamicTransformerRegistry; 
new RuntimeException("to length:" + to.length + " from length:"+ from.length)
item == null || item.getStatus() < 2
cacheDirectory.mkdirs()
stat.st_mode.intValue()
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i))&& warnedElements.add(overriderParameters.get(i))
ran.nextInt(250)
Thread.currentThread().interrupted()
new BasicSessionCredentials(accessKey,secretKey,sessionToken)
logger.info("Illegal argument in chart: {}",e)
LOG.warn("Failed to get next entry from " + jarFileName + ": "+ ioEx)
idleConnectionTimeout + nettyResponseFuture.getLastTouch()
target.addTaskAndWakeup(task)
unlockForRescale()
route.getOutputs() == null || route.getOutputs().isEmpty()
mDir.getDirIndex()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new StringBuilder(256)
new IllegalStateException("Result is already complete: failed")
@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
CellUtil.estimatedHeapSizeOfWithoutTags(c)
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)
hazelcastFactory.newHazelcastInstance(newConfig())
LOG.warn("Ignoring duplicate class " + className)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)
Throwable e
qp.isExclusiveMinimum()
intBuffer.clear()
FileSystemMaster.class
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage")
Thread.sleep(200)
cppFile.writeString(buffer.toString(),false,"UTF-8")
GL.glGenTextures(n,textures,Memory.getPosition(textures))
new ClassicTableTypeMapping()
bean.getCollectionTime()
INVISIBILITY(14,PotionEffectType.INVISIBILITY,1)
N node
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Exception exceptionThrown=null; 
E edge
new HashCollisionNode(edit,hash,count,array)
result.addUnsafeEnchantments(getEnchantments())
log.info(error,cause)
GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))
MAX_ITEMS=100
logger.finest("Optimized Selector: " + selector.getClass().getName())
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
final String clientSecret="your client secret"; 
CharSequence text
size * 1.8f
Captain captain=(Captain)beans.get(ROWING_BEAN); 
!this.transactional && this.referenceId == referenceId
hz1.getLifecycleService().shutdown()
@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
options.setLanguageOut(LanguageMode.ECMASCRIPT5)
SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
new Texture(file,format,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)
new RequestOptions(ResponseMode.GET_ALL,this.timeout,false,FILTER,Message.Flag.DONT_BUNDLE,Message.Flag.OOB)
new PropertiesLoader("classpath:/application.properties","classpath:/application.functional.properties","classpath:/application.functional-local.properties")
DataStreamSink<OUT>
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
sendCommand(CLIENT,Keyword.GETNAME.raw)
if (mAllowUndeclaredRTE) {   processPackage(aAST); } 
new SimpleDateFormat(format,Locale.US)
Integer.parseInt(patchVersionString)
Preconditions.checkNotNull(path,"path")
routes.BuffersResource()
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
Response header(String name,Property property); 
synchronized (this) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
prop.getParamValue()
TimeUnit.SECONDS.toMillis(5)
new DeleteOptions.Builder()
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING,true)
Float.parseFloat(value.toString())
Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())
this.traceHandlers.remove(traceHandler)
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
assertEquals("integer",model.getProperties().get(COUNT).getType())
IOConverter.toInputStream(s,null)
VertexAttribute.ColorPacked()
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxQueueLength,priority,conf,server)
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
graphVersion.incNodeAndEdgeVersion()
globalSecurityDomain != null && !globalSecurityDomain.isEmpty()
(short)0777
arguments == null || class_gd == null
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
QUEUE_TRANSACTION_LOG_RECORD=44
"Using bind address: " + bindAddress
ticket.notifyAll()
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString())
UIPasteboard.getGeneralPasteboard()
new IllegalArgumentException("the text is null")
simple.getFromReceivedDate()
"Refreshing storefiles of region " + bestRegionReplica + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
"Content-Type".equalsIgnoreCase(name)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
readUnlock()
FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)
config.setPort(25668)
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
registry.bind("myConf",new XmlConfiguration(getClass().getResource("/ehcache/ehcache-file-config.xml")))
/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; 
ServiceAnnouncingChatHandlerProvider.class
Throwable t
new ServletException("non-HTTP request or response",e)
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
new StoreFile(this.fs,linkFilePath,testConf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
QuotaCache.this.namespaceQuotaCache.containsKey(ns)
new ReadOnlyMapELResolver(beans)
ufsPath.toString()
ImplementationMethodDescriptor methodDescriptor
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
partitionContainer.getExistingRecordStore(name)
return this; 
Bytes.toBytes(tableNameOrRegionName)
ensureInChild(parent,FooImpl.class,Foo.class)
{@link ImportControl}
props.getProperty(propName)
"false".equals(showRelationships) || result.hasErrors()
StatBuckets.prettyUptimeStr(secs)
TestSuiteEnvironment.getServerAddressNode1()
message.getFilteredFields()
assertEquals(fc2,fc)
minIdle < 0 || minIdle > maxPoolSize
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
format(conf,false)
new MockQueryExecution(2)
public Builder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } 
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build,Collector.Characteristics.UNORDERED)
initialCapacity > 1 << 30
StringUtils.isEmpty(password)
log.debug("Received ping --> {}",payload)
KeyManagerFactory.getDefaultAlgorithm()
GL11.glTexParameterfv(target,pname,params)
DataStreamSink<OUT>
watch.taken()
new ConversionException("Expected a proto but was: " + body.mimeType())
LOG.error("Failed to shut down ActorSystem",t)
major == 1 && minor < 5
originalValue != null && !originalValue.equals("-1")
Thread.sleep(100)
N node
Function.class
new JCacheProducer(this,cacheConfiguration)
data + end
node.hasDefined(Constants.ALIAS)
List<Class<?>>
