logger.info("Aliasing common strings")
parameter.toString()
mapper.writeValueAsString(segment)
taskDao.findByUserId(1L,new Sort(Direction.ASC,"id"))
r1
buildPages.getTypes()
0 - originY
partitionContainer.getRecordStore(name)
i < 10
logger.debug("defineClass pluginClass:{} cl:{}",className,classLoader)
assertEquals(service.state(),Service.State.FAILED)
(offset >= start && offset <= start + len) || (end >= start && end <= start + len)
FileUtil.compactPath(path)
serialNumber.equals(null)
UserGroupInformation.getCurrentUser().reloginFromKeytab()
targetDescription.getClassName()
(FontMetrics)c.newInstance()
toPreCompute.size()
nioGroup.shutdownGracefully()
logger.error("Configuration for influxdb not yet loaded or broken.")
Float.parseFloat(position.getChildByName("Y").getText())
final Command cmd
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
LinkedList<>
items[24]
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
unsafeBuffers.contains(buffer,true)
e.getMessage()
tokens.toString()
Short.valueOf(value.toString())
cache.setRecord(key,record)
maxRelError=1e-4
registry.put("params",params)
factory.getEmbdeddedServletContainer()
assertEquals(q.toString(),"[]")
new TableException(String.format("Unable to generate a string representation of the serializer snapshot of '%s' " + "describing the class '%s' for the ANY type.",serializer.getClass().getName(),clazz.toString()))
assertClusterSize(2,data2,data3)
c.getPath() == null
StringBuffer pattern=new StringBuffer(this.prefix); 
invoke(args)
mTfs.delete(mTfs.open(new TachyonURI(filePath)))
Object edge
MapPutParameters.encodeSizeCost(NAME,BYTES_DATA,BYTES_DATA,THE_LONG,THE_LONG,THE_BOOLEAN)
promise.isDone()
assertEquals(12,tokens.size())
isDoubleA && isIntA
coreThreads.asString()
Preconditions.checkNotNull(hostname)
CompletableFuture<Boolean>
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
frustum.update(combined)
ids.getIDs().length > 90
DataStream<OUT>
buffer.getInt8()
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
engine.execute(query).toString()
InputProcessor[]
TestUtils.randomByte() + 127
checkPlanDoNotMatch(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
HashMap<String,Operator<? extends Serializable>>
IOUtils.closeQuitely(is)
findDelegate(name)
EnumValidator.create(Target.class,false,false)
LOG.error("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
realPointerIndex > AndroidInput.NUM_TOUCHES
REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
null != rootCause
mapConfig.getTotalBackupCount()
assertEquals(ex.getCause().getMessage(),"Unable to read 1 bytes, got 0")
stateHolder.reloadVariables()
timeout=10_000L
activeFrom.getTime()
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
graphModel.getGraph().getEdgeCount()
return false; 
dic.buildRouterChain(invokers)
elements.size() > i
token.substring(0,p).trim().toLowerCase()
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
LOG.error("Unable to delete {} because listInternal returns null",path)
LoopContextStepRetrieval retrievalToAdapt
FiltersTopComponent.findInstance().getUiModel().getSelectedQuery()
graphModel.getUndirectedGraph()
hasNextChunk()
LOCAL_OPTION.getOpt()
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS)
element.getNodeName()
capacity > 1 << 30
assertEquals(1,scheduler.getQueueManager().getQueues().size())
new StringBuilder(741)
address.getHostName()
1
buffer.writeBytes(content)
new CommandFormatException("Failed to execute operation.",e)
edge.setType(edgeDefault)
WebSocketEventListener.class.cast(l).onMessage(event)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
id=15865
OptionalIdentifiedType<RoutesDefinition>
mWorkerId + BASE_FILE_NUMBER
getPositionForView(switchView) < getHeaderViewsCount()
compositeBuffer()
uri.toString().equalsIgnoreCase(future.getURI().toString())
parser.parse(INFO_OPTIONS,args,false)
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
i < 10000
person.getVoidReason()
Bytes.toBytesBinary(tableOrRegionName)
"Segment initialized with too large address: " + address + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR
assertEquals(10,events.size())
initialCapacity < capacity
engine.execute(query).toString()
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ AtmosphereResource removeAtmosphereResource(AtmosphereResource resource); 
new InetSocketAddress("localhost",8888)
new IOException(msg)
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractACLCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
getTokenNames()
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat())
Context.getAdministrationService().saveGlobalProperty(coreProp)
lock.lock()
new PriorityTieredBrokerSelectorStrategy(1,1)
ProtobufUtil.createSnapshotDesc(reqSnapshot)
yAmount > 0
legacyModel.isDefined()
Color.fromRGB(0x1E1B1B)
type.toUpperCase(ENGLISH)
registry.put("eventBus",new EventBus())
new DropTableEvent(tbl,deleteData,success,this)
region.getRegionWidth()
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,true)
graphModel.isDirected()
client.getVertx().setTimer(1,id -> checkExpired())
super.createDataFormat(camelContext)
public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
client.getBulkReply()
logger.debug("Mapped {} to {}",t,e.getValue())
renderUpdate(out,results)
Bullet.init()
return context; 
raw.getParameters()
mock.expectedMessageCount(1)
Thread.sleep(500)
FileNotFoundException ex
this.reader.comparator.compare(reader.blockIndex.blockKeys[b],key)
assertEquals(8,config.getMapConfigs().size())
private final Executor eventExecutor; 
existing.getState()
System.currentTimeMillis()
LOG.trace("Trying to open resource [{}] as a class path resource using the classloader [{}].",this.getClass().getClassLoader())
r.getUri().toString()
List<String>
new AutoValue_RegistrationResponse(sidecarRegistrationConfiguration,configurationOverride,actions,assignments)
enchantments.putAll(stack.enchantments)
GatherGettersAndSetterProperties.update(compiler,externs,root)
DataStream<OUT>
out.writeObject(function)
new PoolBagEntry(null,TestElf.getPool(ds))
factory.getEmbdeddedServletContainer()
Assert.assertEquals(1203,details.get(2).getAbsolutePosition())
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false)
!locations.isDefined()
Ordered.HIGHEST_PRECEDENCE + 11
address.getHostText()
maxActiveSessions == null
engine.execute(query).toString()
new MaterializingOperator(operatorContext,sourceType)
public class TimesNewRoman extends FontMetrics { {     maxCharHeight=717;     widths[32]=250;     widths[33]=333;     widths[34]=408;     widths[35]=500;     widths[36]=500;     widths[37]=833;     widths[38]=777;     widths[39]=180;     widths[40]=333;     widths[41]=333;     widths[42]=500;     widths[43]=563;     widths[44]=250;     widths[45]=333;     widths[46]=250;     widths[47]=277;     widths[48]=500;     widths[49]=500;     widths[50]=500;     widths[51]=500;     widths[52]=500;     widths[53]=500;     widths[54]=500;     widths[55]=500;     widths[56]=500;     widths[57]=500;     widths[58]=277;     widths[59]=277;     widths[60]=563;     widths[61]=563;     widths[62]=563;     widths[63]=443;     widths[64]=920;     widths[65]=722;     widths[66]=666;     widths[67]=666;     widths[68]=722;     widths[69]=610;     widths[70]=556;     widths[71]=722;     widths[72]=722;     widths[73]=333;     widths[74]=389;     widths[75]=722;     widths[76]=610;     widths[77]=889;     widths[78]=722;     widths[79]=722;     widths[80]=556;     widths[81]=722;     widths[82]=666;     widths[83]=556;     widths[84]=610;     widths[85]=722;     widths[86]=722;     widths[87]=943;     widths[88]=722;     widths[89]=722;     widths[90]=610;     widths[91]=333;     widths[92]=277;     widths[93]=333;     widths[94]=469;     widths[95]=500;     widths[96]=333;     widths[97]=443;     widths[98]=500;     widths[99]=443;     widths[100]=500;     widths[101]=443;     widths[102]=333;     widths[103]=500;     widths[104]=500;     widths[105]=277;     widths[106]=277;     widths[107]=500;     widths[108]=277;     widths[109]=777;     widths[110]=500;     widths[111]=500;     widths[112]=500;     widths[113]=500;     widths[114]=333;     widths[115]=389;     widths[116]=277;     widths[117]=500;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=443;     widths[123]=479;     widths[124]=200;     widths[125]=479;     widths[126]=541;   } } 
8 * Constants.MB
BlockingIOCometSupport.class
assertEquals(302,t.request().get().getStatus())
TransactionMetadata::setInActive
log.error(throwable,"Query %s failed",queryId)
new JSONObject()
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)
Integer requestRequiredAcks
latch.countDownFirst()
getPositionForView(switchView) < getHeaderViewsCount()
new StringBuilder()
new LocalizedXStreams(classLoader)
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null)
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",true))
timeout=30000
processor.open(w,request)
invoke(agentInfoList,payload,DEFUALT_FUTURE_TIMEOUT)
CommonUtils.sleepMs(5)
log.error("Metric=[%s] has no StatsD type mapping",statsDMetric)
i < 10
JsonObject.createObjectMapper().getJsonFactory()
Assert.assertTrue(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
node1.checkTreeEqualsSilent(node1)
id=15800
new StringBuilder(246)
case NONE: 
node.getLifecycleService().terminate()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
4 < buf.length - count
assertEquals(expectedPlan,actualPlan)
LOG.error("Unable to parse HTTP response content",e)
Assert.assertNotNull(text)
this.uncollectedPointCreater
SortedMap<Integer,Integer>
0.5f
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
tableName.toString()
log.error(error,cause)
Foundation.NSLog("[error] " + tag + ": "+ message)
comparePartitionOwnership(false,localMember,partition)
hz1.getLifecycleService().terminate()
target.directory("zk" + id + "data")
endTrack("main")
LOG.info("Cannot access storage directory " + rootPath)
request.getRequestURI()
file.flush()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
primitiveType != GL10.GL_POINTS
id=52
mode == MODE_PULL_DOWN_TO_REFRESH
Callable<Integer>
id=26
equalTo(6)
clearFromMember.start()
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,401)
nodeEngine.getService(LockService.SERVICE_NAME)
new Exception()
sectionStartToken.word()
"Searching class for device type " + deviceAddress
retry.attemptRetry()
DATABASE_TYPE_MYSQL.equals(databaseType)
in.read(serCondition)
(next=this.input.get(currentPosition++)) != null
Foundation.NSLog("[error] " + tag + ": "+ message)
factory.getSemaphore(packet.name)
items[25]
@Override public Integer call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
Exception exception
assertEquals(expectedPlan,actualPlan)
content().copy()
zController.sendData(doRequestStop())
Throwable ex
/**   */ class SctpClientPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
getApprovalParameters()
22 * ClassSize.REFERENCE
targetActor.addCaptureListener(listener)
potentialResponse == null
mWorkerId + BASE_FILE_NUMBER
var.setValue(guessType(value))
javaClass.addNestedType().setPublic()
type.toUpperCase(ENGLISH)
injectionConfiguration.getSource().getResourceValue(serviceBuilder,context,managedReferenceFactoryValue)
encoding=options.get(ELEMENT_NAME)
Preconditions.checkNotNull(object)
id=15862
context.var("double")
a.getTypeByte()
new DefaultRouteContext(route,null,list)
ImmutableSet.of("reportUnknownTypes")
LOG.warn("Requesting paths for query services failed.",throwable)
row("p_comment",null,1.0,0.0,null,null,null)
StatBuckets.prettyUptime(secs)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval
TEST_UTIL.waitTableEnabled(tableName)
new HashSet<RecordReplicationInfo>(recordStore.size())
MAX_ITEMS=1000
minPriority == null ? 0 : minPriority
routes.InputsResource()
error.expectedMessageCount(1)
assertSizeEventually(COUNT,map)
(new Path(testBucket.getParent(),".test.inprogress")).toString()
writer.write(line)
GL20.glUniform1(location,toIntBuffer(v,offset,count))
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
partitionKey.getType().toString()
Assert.assertEquals(1,fastJsonConfig.getFeatures().length)
UserGroupInformation.getCurrentUser().reloginFromKeytab()
client.get(path)
(a & 0xe0) == 0xb0
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
SCHEMA(35,true)
Sets.newHashSet()
expiresOn == null
new BufferedImage(region.height,region.width,page.getType())
is("/home/source")
nodeColumn.getIndex()
Map<Integer,Object>
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","DbHits","No data returned")
when(rs.wasNull()).thenReturn(false)
engine.execute(query).toString()
assertEquals(failures.size(),1)
assertResultsPresentInDataResponse(url,timerJob.getId())
el.className()
return false; 
mLocalWorkerAddress.getRpcPort()
HashMap<String,Operator<? extends Serializable>>
entry.getValue().acccessibleNodeLabels
TfsShell.convertMsToDate(files[1].getCreationTimeMs())
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
configure(COMPONENT)
String[]
Thread.sleep(200)
@ConditionalOnEnablednHealthIndicator("mail")
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
new ScheduledJob(job,jobName,period)
mTfs.createFile(new TachyonURI("/root/testFile1"))
fileInfo.getPath()
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
log.info("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
e.getMessage()
assertEquals(12,tokens.size())
properties.length > 3
mLocalWorkerAddress.getRpcPort()
events == null
Object node
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPython3Target {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
(a & 0xe0) == 0xb0
new BindException(concept,"concept")
Bytes.toBytesBinary(tableNameOrRegionName)
JavaConversions.asMap(logManager.logsByTopicPartition())
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid")
p == null
new CSVFilter("")
c.getDeclaredConstructors()
nodeData.getAttributes() == null
isAllFiles()
uri.toASCIIString()
registry.put("groovyShellFactory",groovyShellFactory)
new RuntimeException("Mocked failed close!")
resource.terminate(input.getId(),extractorId)
(long)y & 0xFFFFFFFL
assertTrue(model.getUniqueItems())
return localVertices; 
securityDomain != null
id=15855
length % dictionarySize
new WordToSentenceProcessor<IN>()
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
new PercentType(precent)
e.getMessage()
retVal.put(p.getKey(),p.getValue())
GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))
mock.expectedBodiesReceived("Hello World 3")
counter + 2
logger.info("Adding PropertySource: " + source + " in group: "+ basename)
host.getHostText()
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
Calendar.getInstance(JSON.defaultLocale)
new CSVFilter(columns)
HMSHANDLERATTEMPTS("hive.hmshandler.retry.attempts",1,"The number of times to retry a HMSHandler call if there were a connection error.")
logger.error(message)
id=19905
Ints.min(startedSplits.get(),completedSplits.get(),splits)
StringUtils.isEmpty(formKey)
name=Resources.REQUEST_QUEUE
unlockForRegularUsage()
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
plugin.isEnabled()
LOG.info(getName() + " caught: ",e)
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
minIdle < 0
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertFalse(jmsTemplate.isPubSubDomain())
Foundation.NSLog("[info] " + tag + ": "+ message)
GL.glBindTextureEXT(target,texture)
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
minSize(new Fixed(width))
@InputIntMethodAnnotation(value=-45)
expectedCountsForADoc(weights,ind)
ctx.sendDownstream(e)
logger.error("table: {} column: {}, failed convert type {} to {}",columnName,value,sqlType)
mockRegionInfo.isMetaRegion()
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } )
compressedProto.length < 390000
(uptime - days) * 60
lastPosition < positionCount
DiagnosticType.warning("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))
xmlDocAnnotation.get(CoreAnnotations.TokensAnnotation.class).get(554)
!type.isAnonymousClass() && !type.isInterface()
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class)
new MD5Renderer(model,true)
deploymentUnit.getParent() == null
lock.lock()
type.equalsIgnoreCase("integer")
new IllegalStateException()
camera.setMatrices(app.getGraphics())
"Stream " + importer
tupleInfo.getMessageId() != null
position == buffer.length
ASYNC_CONSUMER_THREAD.getStackTrace()
map.lock(key,4,TimeUnit.SECONDS)
JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
aliases.size() > 0
cf.getCompressionType() == null
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
this.alphabet
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
resource.terminate(input.getId(),extractorId)
in.read(serCondition)
id=15862
response.getStatus().getCode() / 200
Long autoCommitInterval
batteryVp >= full
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
context.var("long")
mock.expectedMessageCount(2)
rackIdToNodes.get(rid)
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
capacity > 1 << 30
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
url.toServiceString()
getSrcPath("checks/javadoc/Input_03.java")
(byte)0xdf
LOG.info("Ignoring duplicate journal entry with SN {} when next SN is {}",newSN,mNextSequenceNumberToRead)
ImmutableList.<PostAggregator>of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"))
StringBuffer result
new Interval(startTime,endTime)
ssl.has(CommonAttributes.PROTOCOL)
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
assertEquals(expectedPlan,actualPlan)
new StringBuilder()
a.getBoolean(R.styleable.DragSortListView_use_default_controller,false)
Preconditions.checkNotNull(manager)
new ConsoleRenderer(context,"start.ftl")
mock.expectedMessageCount(10)
GatherGettersAndSetterProperties.update(compiler,externs,root)
LOG.info("Processing changes for pool " + poolName + ": "+ pools.get(poolName))
op.getResultAsObject()
LOG.error("Ignoring duplicate class " + className)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
id=31
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n")
Type.LONG_TYPE.equals(typeInStack)
serverSocket.setReuseAddress(false)
type.createDataFormat(routeContext)
legacyModel.isDefined()
ObjectConverter.toBoolean(scriptValue)
new ProcessBuilder(startScript,mMesosAddress,"-w")
buffer.rewind().forward((int)n).getFixString((int)str_len)
setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
AnimationAdapter<T>
PositiveIntegerValidator.class
mapper.writeValueAsString(segment)
context.var("double")
buffer.nextValue(info.type,info.meta)
assertEquals(4,visitor.getTables().size())
gran.next(timeStart)
new IllegalArgumentException()
className.indexOf("org.openmrs.")
32 * 1024 * 1024
Throwable t
raw.getParameters()
registry.put("params",params)
acceptor.getFilterChain()
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
getSession(false)
HashMap<String,HashMap<String,ASTNode>>
this.aliasToCTEs.containsKey(alias)
LOG.info("Table {} is disabled, give up reopening its regions")
incomingMessage.setTransActionCanceled(true)
getTimeout()
LOG.info("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
LOG.error(result.getDescription())
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",1,SECONDS)
32 * 1024 * 1024
bindingGroup.has(PORT_OFFSET)
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
getIntProperty("tachyon.master.web.threads",5)
latch.await(1,TimeUnit.MINUTES)
WebSocketEventListener.class.cast(l).onMessage(event)
CommonUtils.randomString(random.nextInt(10))
/**   * Line number filter.   */ private CSVFilter lineFilter; 
EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)
Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"),felix())
i > stripeStats.size()
_availMemory + amount
MongoConnection.getInstance().connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false")
n.intValue()
return r; 
-region.getRegionHeight()
public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
logger.debug("NODE {}: Retry timout: Advancing")
@Override public ResponseImpl schema(Property property){   this.setSchema(property);   return this; } 
DiagnosticGroups.registerGroup("oldCheckTypes",TypeValidator.ALL_DIAGNOSTICS,TypeCheck.ALL_DIAGNOSTICS)
memoryReservation.getAndAdd(bytes)
Float.valueOf(encoding.substring(equalsPos + 1))
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
log.error("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
analysis.getType(aggregate)
@Path(PATH_NODE_INDEX_ID)
new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)
Throwable t3
this.posColumn=posColumn
capacity > 1 << 30
Object node
EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)
new CommandFormatException("Parsed request isn't available.")
resultEndpoint.expectedMessageCount(2)
System.nanoTime()
parts.length > 0
setColor(color)
defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
RestartStrategies.fixedDelayRestart(3,0)
response.set(ROLLED_BACK)
wsdlLocation.length() > 0
ResponseImpl headers(Map<String,Property> headers); 
modulePath.split(File.pathSeparator)[1]
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)
response.setHeader(WWW_AUTHENTICATE,value)
ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,30_000)
retry.attemptRetry()
i < count
ConfigUtils.absoluteHealthCheckDir(stormConf)
Preconditions.checkNotNull(blockWorker)
assertEquals(expectedPlan,actualPlan)
BeanMapper.mapList(books,Book.class,BookDto.class)
registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT,ModClusterDisableContext.INSTANCE,disableContext,false)
mTFS.exists(turi)
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
json.toString(1)
n.intValue()
System.currentTimeMillis()
node1.checkTreeTypeAwareEqualsSilent(node2)
isDistinct(child)
node.getLifecycleService().terminate()
host.getHostText()
handoffExecutor == null
logger.debug("Trying to map {} to {}",t,path)
TupleDomain.none()
capacity > 1 << 30
transactionalMap.put(key,value)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
cache.remove(this)
mm.tryLock(key,4,TimeUnit.SECONDS)
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,DOUBLE,VARCHAR)
public DerivedBuilder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
mock.expectedMessageCount(2)
Long.valueOf(args[2])
assertEquals(6358481,received.get(0)[1])
mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getWrappedEngine().release()
engine.execute(query).toString()
Collection<String>
inputFuture.cancel(mayInterruptIfRunning)
url.getServiceInterface()
info.getRegionName()
ran.nextInt(500)
new FieldFrame(currentFrame,isStaticInnerType,type,type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken(TokenTypes.IDENT).getText() : null)
IntrospectionSupport.setProperties(config,componentProperties,null)
/**   * SSH port.  */ private String port="2000"; 
dbCol.findOne()
new GetExecutionVariableInstancesCmd(executionId,variableNames,false,locale,withLocalizationFallback)
mock.expectedMessageCount(1)
Files.delete(file.toPath())
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)
ImmutableList.of(new Identifier("a"))
mock.expectedMessageCount(3)
DefaultManagementAgent.class
this.thrown.equals("File must not be null")
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
wrappedBuffer(byteBuffer)
logger.warn("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new RuntimeIOException(e)
Arrays.asList("ErrorResponse","Response","Int","Int32","Int64","Int64","Float","Double","Bool","Void","String","Character","AnyObject","Any","Error","URL","class","Class","break","as","associativity","deinit","case","dynamicType","convenience","enum","continue","false","dynamic","extension","default","is","didSet","func","do","nil","final","import","else","self","get","init","fallthrough","Self","infix","internal","for","super","inout","let","if","true","lazy","operator","in","COLUMN","left","private","return","FILE","mutating","protocol","switch","FUNCTION","none","public","where","LINE","nonmutating","static","while","optional","struct","override","subscript","postfix","typealias","precedence","var","prefix","Protocol","required","right","set","Type","unowned","weak")
"ppc64".equals(arch) || "ppc64le".equals(arch)
processEngineConfiguration.getCommandExecutorTxRequiresNew()
registry.put("dummy",new ReactiveStreamsTestService("from-registry"))
annotations == null
HashMap<String,Operator<? extends Serializable>>
JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath)
field.getRawType()
new IOException(ExceptionMessage.BLOCK_NOT_LOCALLY_AVAILABLE.getMessage(mBlockId))
new BufferedImage(region.height,region.width,page.getType())
3 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
program.getProgramId()
BlockStoreContext.INSTANCE.hasLocalWorker()
incomingMessage.getMessagePayloadByte(0)
new IndexSizeExceededException(getOutOfRowsReason())
compressedProto.length < 390200
Thread.sleep(200)
registry.put("params",params)
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
new S3DataSegmentMover(mockS3Client)
bytesToString(data).split("&")
data.remaining()
list.isEmpty()
request.getRequestURI()
callTimeout=5000
capacity > 1 << 30
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
layout.setRefreshingLabel(label)
getMockEndpoint("mock:line").expectedMinimumMessageCount(1)
partitionKey.getType().toString()
/**   * Returns messages newer than the message ID specified as a numeric string. This should be used when polling for new messages. If you're looking at messages, and the most recent message returned is 3516, you can make a request with the parameter "?newerThan=3516″ to ensure that you do not get duplicate copies of messages already on your page.  */ private Integer newerThan=-1; 
Integer.valueOf(options.getMaxKeys())
from("direct:a").delay(3000)
latch.countDownFirst()
handoffExecutor == null
id=49
chain.filter(exchange).compose((call) -> filter(exchange,call))
uuid.equals(NULL)
size=500
callback.done(true)
offset > 0
sctpChannelClass.getMethod("open",null)
dumpErrorCountThreshold=3
Long.valueOf(timeout)
targetActor.addListener(listener)
capacity > 1 << 30
value.longValue()
new WebApplicationException(serverError(e))
log.debug("Error while closing command context",exception)
edge.setType(EdgeDirection.UNDIRECTED)
manager != null
GatherGettersAndSetterProperties.update(compiler,externs,root)
assertFalse(model.getUniqueItems())
this.getNotEmptyWaitThreadPeak()
version.getUpdate().getAsInt() >= 92
factory.getEmbdeddedServletContainer()
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())
ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
WildcardType maybeWildcardType
Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
"maxHeaderSize must be a positive integer: " + maxChunkSize
exchange.getResponse().writeWith(Mono.empty())
bLocations[0].getNames()
assertTrueAllTheTime(() -> {   assertTrue(map.containsKey(0));   Collection<Employee> valuesNullCity=map.values(predicateCityNull);   assertEquals(2,valuesNullCity.size());   Collection<Employee> valuesNotNullCity=map.values(Predicates.equal("city","cityname"));   assertEquals(3,valuesNotNullCity.size()); } ,5)
glyphPositions[i] - x <= x - glyphPositions[i - 1]
Map<String,Integer>
conf.getSearchBaseURL()
getEndpoint().getConfig().getIndexName()
twitter1.getRetweeterIds(18594701629l,-1)
mWorkerId + BASE_FILE_NUMBER
LOG.error("I/O error when running rpc",e)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
region.getRegionWidth()
i < 100
this.createError == null
return false; 
log.error(throwable,"Query %s failed",queryId)
newState.score()
b.getBroadcasterConfig().applyFilters(r,cachedMessages)
new StringBuilder(247)
AlluxioWorkerService.class
Optional<T>
COUNT_DATABASE.put(key,val)
cs.getMetaData()
routerChain.notifyFullInvokers(groupInvokers,getUrl())
id=15809
new GenerationException(e)
Ints.min(completedSplits.get(),splits)
className.indexOf("org.openmrs.")
!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()
new ProcessBuilder(java,vmArguments,"-cp",h2jar.getAbsolutePath(),Server.class.getName(),"-tcp","-baseDir",tempDir.resolve("database-in-time-zone").toString())
line.substring(0,p).trim().toLowerCase()
getLog().error("register druid-driver mbean error",ex)
LOGGER.error("no property for " + type + ", "+ format)
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
new Duration(2,SECONDS)
Exception.class
assertEquals(fc,fc2)
value={XSSHtmlFilter.class}
mLocalAlluxioClusterResource.get().getWorkerAddress()
indexOutURI.getPath()
r.getUri().toString()
new DatagramDnsQuery(addr,null,1)
node.getLifecycleService().terminate()
GL.glPolygonOffsetEXT(factor,units)
props.setProperty(JdbcConnectionParams.PROPERTY_URL,url)
arguments == null
relations.replace(oldName,newTable) != null
ctx.sendDownstream(e)
new GoogleCodeRemoval(compiler)
providerConfig.setTimeout(1000)
LOG.debug("Error while deserializing payload",e)
element.getNodeName()
logger.info("Session destroyed")
source != null
ssl.has(CommonAttributes.CA_REVOCATION_URL)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}")
text.equals(((TextButton)button).getText())
titleLabel.getPrefWidth()
getPreferences().setProperty(key,value)
file.getAbsoluteFile()
!ElementsParser.isAlphaNumeric(ch2)
c.content().readBytes(CONTENT_LENGTH)
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
Arrays.asList("bool","qint32","qint64")
IllegalArgumentException e
GL11.glGetTexParameter(target,pname,params)
!returnValue
/**   * The tested prototype instance  */ private final Prototype testedPrototype; 
Thread.sleep(50)
"Using bind address: " + publicAddress
Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)
Validate.notEmpty("Cookie name must not be empty")
BufferUtils.newByteBuffer(fileSize)
config.getClass().toString()
Exception e
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
super.beginPass(n)
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"))
memoryMap.getInt("mappedWithJournal")
zoneId.equals("+00:00") | zoneId.equals("-00:00")
pieces.length <= wordColumn
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
mpline.substring(0,p).trim().toLowerCase()
Collections.sort(runningJobs,njec)
new NullPointerException("ClassInfo's name should be non-null")
computeSemiJoin(inputStatistics,inputStatistics,x,unknown)
Expression.eq("searchable",format)
new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
reg.put(LDAP_CONN_NAME,getWiredConnection(ldapServer))
config.getMapConfig(mapName).setTimeToLiveSeconds(5)
assertEquals(401,te.getStatusCode())
mFixedExecutionService.shutdown()
config.isAutoRead()
DataStream<OUT>
requestContext.getUri().getPath()
TailArraySchema schema=new TailArraySchema(); 
queueView.get().get(index.longValue())
capacity > 1 << 30
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
child.getParent()
testSame("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
tableInfo.getType()
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
getCurrCapacity()
"Excluding secondary region " + regionToFlush + " - trying to find a different region to refresh files."
-1
LOCAL_OPTION.getOpt()
shouldBackup=false
DataStream<OUT>
AnnotatedElementUtils.isAnnotated(type,Validated.class)
logger.debug("rapidRefreshFutureEnd stopping")
createNextExchange(processor,exchange)
doubleValue == 0
columnType.equalsIgnoreCase("date")
endpoint.expectedMessageCount(1)
allDefinitions != null
DirectMessage.constructDirectMessages(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)
Long.valueOf(args[2])
for (AnnotationInstance annotation : excludeDefaultAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException("ExcludeClassInterceptors not applied to method: " + target);   } } 
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
ChannelOption<Integer>
logger.debug("Received MyQ  JSON: {}",dataString)
i / 2
msg.getType() == Message.Type.error
asyncContext.continueAsyncTraceObject()
path.toString()
id=15860
cache.put(new Element(key,element),true)
mTfs.getFile(fileId)
@UriPath
T
streamCachingStrategy.setSpoolThreshold(1l)
logger.debug("rapidRefreshFutureEnd stopping")
ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564
gran.next(timeStart)
new Version(1,0,0)
logger.debug("Invalid Atmosphere Version {}",javascriptVersion)
new UnsupportedOperationException()
Mockito.verify(mRMClient).start()
fields.contains(name)
new IllegalStateException("PLAIN supports neither integrity nor privacy")
processor.open(w,request)
graphModel.getUndirectedGraph()
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
NettyAsyncHttpProvider.class
invoke(args)
AdviceWithTasks.beforeByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
Thread.sleep(500)
dstPath.getPath()
attribute.getDefinition().getAttributeMarshaller()
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
return faceBookProperties; 
target != null
NumberFormatException nfe
Object strongReference
/**   * Checkstyle frame model.   */ private final transient CheckstyleFrameModel model=new CheckstyleFrameModel(); 
UrlUtils.getIdleTimeout(getUrl())
GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))
LOG.warn("clear parameter error",ex)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE)
MAX_LENGTH=100
EventPublishingService<ReplicationMessage,ReplicatedMessageListener>
table.getParameters()
Gdx.files.internal(fileName).nameWithoutExtension()
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
Integer.valueOf(quantifier)
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-jndi-","jetty-xml-","websocket-servlet-")
from("direct:start").aggregator().header("id").batchTimeout(2000L)
timeout=2000
graphStack.push(tx)
buffer.readableBytes() < 4
json.length() - 2
renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
deserialze(parser,type,fieldName,null,0,null)
processor.open(w,request)
assertEquals(avDegree,2.0)
mWorkerId + BASE_FILE_NUMBER
headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(),entry.getValue(),camelExchange)
g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)
OptionalIdentifiedType<Type>
bulkInsertableMap.get(entityClass)
new HttpParameter("retweets",enableDeviceNotification)
c.getSimpleName()
converter.convertTo(leftValue.getClass(),rightValue)
i=3
CompletableFuture<Boolean>
Status.constructStatuses(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
Collection<String>
element.getChildByName("properties")
LOG.warn("Failed to get TachyonStore stream, the block " + currentBlockId + " will not be in TachyonStorage",ioe)
retry.attemptRetry()
getBinaryTupledSet()
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } ,0,inputRects.size)
checkPlanDoNotMatch(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
hotRestartState != null
(ArrayInitHandler)getParent()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(1)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)
delegate.getChild(element)
@Path(PATH_NODE_INDEX_ID)
processor.getOrCreateManifest(archive)
WebServicesTestUtils.checkStringMatch("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
(short)655
GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))
Object edge
resourceRegistration.registerAdditionalRuntimePackages(RuntimePackageDependency.optional("org.hibernate.search.orm"),RuntimePackageDependency.required("org.hibernate"))
addKeys(externalClasses,DATE_TIME,"org.joda.time.DateTime","org.joda.time.ReadableDateTime","javax.xml.datatype.XMLGregorianCalendar")
statistics.addPutTimeNano(System.nanoTime() - start)
n.intValue()
String.format("/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])",name,user.getName(),user.getPassword(),String.join(",",user.getRoles()))
log.info("Performing lookup: %s --> %s",ips,retVal)
new NullPointerException("profession and name can not be null")
new StringBuilder()
ALIAS.addOperationParameterDescription(resources,"infinispan.container",op)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
new StringBuilder(247)
Preconditions.checkNotNull(mPinnedInodes)
serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN
SingleServerInventoryProvider.class
public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
assertFalse(dr.isFailure())
new Path(testBucket.getParent(),".test-2.inprogress").toString()
ctx.sendDownstream(e)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
ChronicleEngineEnpoint endpoint
new BroadcastAction(originalMessage)
synchronized (mLostBlocks) {   return ImmutableSet.copyOf(mLostBlocks); } 
InetAddress.getLocalHost()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
requestFilters.isEmpty()
StatBuckets.prettyUptime(secs)
dstPath.getValue()
serverService.getIncomingInterceptors()
logger.debug("myq ReturnCode: {}",returnCode)
new File(value).getPath()
LOG.warn("clear parameter error",ex)
Thread.sleep(200)
t.add(R.id.frame,new SampleListFragment())
UserGroupInformation.getCurrentUser().reloginFromKeytab()
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding())
!expr.isGetProp() || !expr.getLastChild().getString().equals("bind")
1 < user.getListedCount()
hz1.getLifecycleService().terminate()
mFileLength - mPos < mBlockSize
id=15856
(!client.isFailed()) && (!client.isGone())
new Tag(text,line)
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
applicationContext != null
-1
public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
parameters.getPositions().get(0)
LOG.error("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
/**   * The root package controller.   */ private PkgControl root; 
containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class)
response.set(ROLLED_BACK)
LOG.error("Failed to look for classes in " + jarFileName + ": "+ ioEx)
CAPACITY=500L
conceptAnswer.getConcept()
2f / 3f
DUPLICATE_OPS_TOLERANCE=5
new ClobTypeHandler()
Exception exception
((StringLiteral)literal).getSlice()
localX2 * cos
System.currentTimeMillis()
new IllegalStateException("PLAIN supports neither integrity nor privacy")
Map.class
super(pipeline,null,HEAD_NAME,false,true); 
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)
util.getDataTestDir(table)
retVal.put(p.getKey(),p.getValue())
jedis.sadd(getSetKey(task),request.getUrl()) > 0
connection.subscribe(jedisPubSub,patterns)
Mockito.any()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
collisionPoints.get(2)
assertEquals(expectedPlan,actualPlan)
DefaultAtmosphereRequest.newInstance()
routes.InputsResource()
coreThreads.asString()
stopwatch.elapsedMillis()
zkWorker.getWorker()
numMessages=1000
StatBuckets.prettyUptime(secs)
mock.expectedBodiesReceived("Hello World 2","Hello World 4")
columnType.equalsIgnoreCase("double")
new DynamicAwareEntry(uri,properties,lenient)
ar.cause()
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; 
GL20.glUniform2(location,v)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
id=19906
inner.deletedNodes()
new RuntimeException("Missing type parameter.")
ErrorWrapperEmbeddedServletContainerFactory.class
new byte[9]
calendar.getTimeZone().getDSTSavings()
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,channel,channel,t)
"GET".equals(httpMethod)
Calendar.getInstance(JSON.defaultLocale)
RuntimeGlue optionalGlue
touchEventPool.free(touchEvents)
newEmbeddedDatabaseBuilder(path)
testComplete()
stationItemName != null
UIPasteboard.getGeneral()
exchange.getResponse().writeWith(Mono.empty())
logger.warn("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
annotation == OriginalType.MAP
is("/home/source")
new StringBuilder(239)
count < 12
context.var("double")
TimeUnit.SECONDS.toNanos(timeoutSeconds)
Color.fromRGB(0xEB8844)
response.set(ROLLED_BACK)
concurrent(driver,dataSource,100)
uncollectedPointCreater.createUnCollectedPoint(timestamp)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)
serverEnvironment == null
status.isDirectory()
Boolean.parseBoolean(ac)
Duration.seconds(1)
LOG.info("Finding components in url: {}",url)
serverSocket == null
generator.generateX509Certificate(signedByKeyPair.getPrivate())
ModuleReflectionUtils::isCheckstyleCheck
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
capacity > 1 << 30
new InputStreamReader(bais,StandardCharsets.UTF_8)
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
LOG.trace("No binding to service interface as @Body,@Header,@ExchangeProperty not detected. Using BeanInvocation as message body when calling proxy method: {}")
resource.removeExtractor(input.getId(),extractorId)
Exception e
defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
Number.class
isDirect=true
IOHelper.getCharsetName(exchange)
LOG.trace("Terminating gRPC server")
new byte[16]
lastCompletedOffset != lastCompletedOffset
ImmutableList<String>
ssl.has(CommonAttributes.CA_REVOCATION_URL)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)
methodsToImplement(methods)
r.destination != null
LOG.warn("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
watch.stop()
assertEquals(input.getFieldCount(),3)
id=23
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-logging-juli-","tomcat-embed-websocket-")
new UnsafeBasedStringCharProvider(UNSAFE,stringValueFieldOffset,str)
getter.getRawReturnType()
-1
List<String>
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)
options.removeUnusedVars
testSame(js,js)
Integer newerThan
T resource
entry.getKey().getHostName()
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractACLCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
i < 50
context.restartRequired()
statistics.addGetTimeNano(System.nanoTime() - start)
(Long)123l
overrideDeploymentConfig
id=15
processor.open(w,request)
values.equals(values[i])
CompletableFuture<Boolean>
"Using bind address: " + publicAddress
currentlyProcessing.addCallback(callback)
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
request.getParams() != null
Object edge
REMOVALS_UPDATER.compareAndSet(this,nanos,duration)
LOG.error("register druid-driver mbean error",ex)
headerRow != null
assertResultExchange(result.getExchanges().get(0),false)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
SavedSearch.constructSavedSearches(get(getBaseURL() + "saved_searches.json",true))
logger.error("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
planNode.getPlanNodeScheduledTime()
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
state.isGloballyTerminalState()
Mockito.verify(mFileSystemMasterClient).rename(src,dst)
new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
type=200
args.length < 1
calendar.get(HOUR)
r.getRequest()
-1
page.getSizeInBytes()
TfsShell.convertMsToDate(files[2].getCreationTimeMs())
status().isMovedTemporarily()
this.categoryWithApiModel=categoryWithApiModel
assertEquals(q.toString(),"[]")
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new PruneUnreferencedOutputs())
badLine.getMessage()
minPriority == null ? 1 : minPriority
clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)
@ConditionalOnEnablednHealthIndicator("solr")
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ AtmosphereResource addAtmosphereResource(AtmosphereResource resource); 
getTimeout()
item.getName().matches(name)
items[27]
System.currentTimeMillis()
stat.st_mode.get()
TypeScriptNodeClientCodegen.class
mapper.getJsonFactory()
assertMockEndpointsSatisifed()
mCheckUnusedThrows=aFlag
barrier1.await(2,TimeUnit.SECONDS)
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
@PathParam("interval")
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
HttpTransport.class
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
target == null
new PulsarComponent()
id=15850
new DatagramDnsQuery(addr,null,1)
ConnectorRecordSetProvider.class
logger.debug("{} {}",errorCode,message)
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
"Content-Type".equals(name)
obj.getAcceptableTokens()
LOG.error("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
response.set(ROLLED_BACK)
statistics.addPutTimeNano(System.nanoTime() - start)
annotations.get(node)
new CreateTableAsSelect(temporaryTableName,(Query)statement,false,tablePropertiesOverride,true,Optional.of(generateStorageColumnAliases((Query)statement,controlConfiguration,context)),Optional.empty())
encounter.getObsAtTopLevel(false)
node1.checkTreeTypeAwareEqualsSilent(node2)
Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)
qp.getUniqueItems()
REAL_DRIVER.close()
delay=2
List<SourceFile>
name == null
timeout=5000
mBlockStream.remaining()
ImportAutoConfigurationWithItemsOne.class
LOG.error("Could not parse syslog message. Not further handling.",e)
attributes == null
assertEquals(5,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size())
connection.hdel(key)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",true))
mockRegionInfo.isMetaRegion()
colorModeClass.equals("ProportionalSizeMode")
Thread.sleep(2000)
Map<String,String>
i <= Integer.MAX_VALUE
Assert.assertEquals(1456,details.get(6).getAbsolutePosition())
new ResourceProfile(Double.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE,managedMemoryPerSlot,Collections.emptyMap())
file.name().contains(".etc1")
mock.expectedBodiesReceived("B+END","A+END")
request.getContentType().equals("application/x-www-form-urlencoded")
UnderFileSystem.get(tmpFolder)
WebAppResource.class
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!")
Set<String>
editor.commit()
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
id=15867
new IndexOutOfBoundsException()
i < 1000
i <= repeatCount
Calendar.getInstance(JSON.defaultLocale)
new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString())
testComplete()
Arrays.<Class<?>>asList(org.nd4j.linalg.api.ops.DynamicCustomOp.class,org.nd4j.linalg.api.ops.NoOp.class,org.nd4j.linalg.api.ops.custom.BarnesEdgeForces.class,org.nd4j.linalg.api.ops.custom.BarnesHutGains.class,org.nd4j.linalg.api.ops.custom.BarnesHutSymmetrize.class,org.nd4j.linalg.api.ops.custom.SpTreeCell.class,org.nd4j.linalg.api.ops.custom.Flatten.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAdd.class,org.nd4j.linalg.api.ops.impl.broadcast.BiasAddGrad.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastAddOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastCopyOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastGradientArgs.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMax.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMin.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastMulOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRDivOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastRSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastSubOp.class,org.nd4j.linalg.api.ops.impl.broadcast.BroadcastTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastEqualTo.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThan.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.broadcast.bool.BroadcastNotEqual.class,org.nd4j.linalg.api.ops.impl.controlflow.If.class,org.nd4j.linalg.api.ops.impl.controlflow.IfDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.Select.class,org.nd4j.linalg.api.ops.impl.controlflow.Where.class,org.nd4j.linalg.api.ops.impl.controlflow.WhereNumpy.class,org.nd4j.linalg.api.ops.impl.controlflow.While.class,org.nd4j.linalg.api.ops.impl.controlflow.WhileDerivative.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Enter.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Exit.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.LoopCond.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Merge.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.NextIteration.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.StopGradient.class,org.nd4j.linalg.api.ops.impl.controlflow.compat.Switch.class,org.nd4j.linalg.api.ops.impl.grid.FreeGridOp.class,org.nd4j.linalg.api.ops.impl.image.CropAndResize.class,org.nd4j.linalg.api.ops.impl.image.ExtractImagePatches.class,org.nd4j.linalg.api.ops.impl.image.NonMaxSuppression.class,org.nd4j.linalg.api.ops.impl.image.ResizeBilinear.class,org.nd4j.linalg.api.ops.impl.image.ResizeNearestNeighbor.class,org.nd4j.linalg.api.ops.impl.indexaccum.FirstIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IAMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.IMin.class,org.nd4j.linalg.api.ops.impl.indexaccum.LastIndex.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMax.class,org.nd4j.linalg.api.ops.impl.indexaccum.custom.ArgMin.class,org.nd4j.linalg.api.ops.impl.layers.ExternalErrorsFunction.class,org.nd4j.linalg.api.ops.impl.layers.Linear.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.AvgPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNorm.class,org.nd4j.linalg.api.ops.impl.layers.convolution.BatchNormDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Col2Im.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv1D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Conv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv2DTF.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DeConv3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthToSpace.class,org.nd4j.linalg.api.ops.impl.layers.convolution.DepthwiseConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2col.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Im2colBp.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalization.class,org.nd4j.linalg.api.ops.impl.layers.convolution.LocalResponseNormalizationDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.MaxPooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Pooling3DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2D.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SConv2DDerivative.class,org.nd4j.linalg.api.ops.impl.layers.convolution.SpaceToDepth.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2d.class,org.nd4j.linalg.api.ops.impl.layers.convolution.Upsampling2dDerivative.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.GRUCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMBlockCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMCell.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.LSTMLayer.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRU.class,org.nd4j.linalg.api.ops.impl.layers.recurrent.SRUCell.class,org.nd4j.linalg.api.ops.impl.loss.AbsoluteDifferenceLoss.class,org.nd4j.linalg.api.ops.impl.loss.CosineDistanceLoss.class,org.nd4j.linalg.api.ops.impl.loss.HingeLoss.class,org.nd4j.linalg.api.ops.impl.loss.HuberLoss.class,org.nd4j.linalg.api.ops.impl.loss.L2Loss.class,org.nd4j.linalg.api.ops.impl.loss.LogLoss.class,org.nd4j.linalg.api.ops.impl.loss.LogPoissonLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanPairwiseSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.MeanSquaredErrorLoss.class,org.nd4j.linalg.api.ops.impl.loss.SigmoidCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.SoftmaxCrossEntropyWithLogitsLoss.class,org.nd4j.linalg.api.ops.impl.loss.SparseSoftmaxCrossEntropyLossWithLogits.class,org.nd4j.linalg.api.ops.impl.loss.WeightedCrossEntropyLoss.class,org.nd4j.linalg.api.ops.impl.loss.bp.AbsoluteDifferenceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.CosineDistanceLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HingeLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.HuberLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.LogPoissonLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanPairwiseSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.MeanSquaredErrorLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SigmoidCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SoftmaxCrossEntropyWithLogitsLossBp.class,org.nd4j.linalg.api.ops.impl.loss.bp.SparseSoftmaxCrossEntropyLossWithLogitsBp.class,org.nd4j.linalg.api.ops.impl.meta.InvertedPredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PostulateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.PredicateMetaOp.class,org.nd4j.linalg.api.ops.impl.meta.ReduceMetaOp.class,org.nd4j.linalg.api.ops.impl.nlp.CbowRound.class,org.nd4j.linalg.api.ops.impl.nlp.SkipGramRound.class,org.nd4j.linalg.api.ops.impl.reduce.HashCode.class,org.nd4j.linalg.api.ops.impl.reduce.Mmul.class,org.nd4j.linalg.api.ops.impl.reduce.MmulBp.class,org.nd4j.linalg.api.ops.impl.reduce.Moments.class,org.nd4j.linalg.api.ops.impl.reduce.NormalizeMoments.class,org.nd4j.linalg.api.ops.impl.reduce.SufficientStatistics.class,org.nd4j.linalg.api.ops.impl.reduce.TensorMmul.class,org.nd4j.linalg.api.ops.impl.reduce.ZeroFraction.class,org.nd4j.linalg.api.ops.impl.reduce.bool.All.class,org.nd4j.linalg.api.ops.impl.reduce.bool.Any.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.reduce.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.CumSumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.DotBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MeanBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.MinBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm1Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.Norm2Bp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.NormMaxBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.ProdBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SquaredNormBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.StandardDeviationBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.SumBp.class,org.nd4j.linalg.api.ops.impl.reduce.bp.VarianceBp.class,org.nd4j.linalg.api.ops.impl.reduce.custom.BatchMmul.class,org.nd4j.linalg.api.ops.impl.reduce.custom.LogSumExp.class,org.nd4j.linalg.api.ops.impl.reduce.floating.AMean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Bias.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Entropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.LogEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Mean.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm1.class,org.nd4j.linalg.api.ops.impl.reduce.floating.Norm2.class,org.nd4j.linalg.api.ops.impl.reduce.floating.NormMax.class,org.nd4j.linalg.api.ops.impl.reduce.floating.ShannonEntropy.class,org.nd4j.linalg.api.ops.impl.reduce.floating.SquaredNorm.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountNonZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.CountZero.class,org.nd4j.linalg.api.ops.impl.reduce.longer.MatchCondition.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMax.class,org.nd4j.linalg.api.ops.impl.reduce.same.AMin.class,org.nd4j.linalg.api.ops.impl.reduce.same.ASum.class,org.nd4j.linalg.api.ops.impl.reduce.same.Max.class,org.nd4j.linalg.api.ops.impl.reduce.same.Min.class,org.nd4j.linalg.api.ops.impl.reduce.same.Prod.class,org.nd4j.linalg.api.ops.impl.reduce.same.Sum.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.CosineSimilarity.class,org.nd4j.linalg.api.ops.impl.reduce3.Dot.class,org.nd4j.linalg.api.ops.impl.reduce3.EqualsWithEps.class,org.nd4j.linalg.api.ops.impl.reduce3.EuclideanDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.HammingDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.JaccardDistance.class,org.nd4j.linalg.api.ops.impl.reduce3.ManhattanDistance.class,org.nd4j.linalg.api.ops.impl.scalar.LeakyReLU.class,org.nd4j.linalg.api.ops.impl.scalar.LogX.class,org.nd4j.linalg.api.ops.impl.scalar.Pow.class,org.nd4j.linalg.api.ops.impl.scalar.PowDerivative.class,org.nd4j.linalg.api.ops.impl.scalar.RectifiedLinear.class,org.nd4j.linalg.api.ops.impl.scalar.Relu6.class,org.nd4j.linalg.api.ops.impl.scalar.ReplaceNans.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarAdd.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarFMod.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMax.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMin.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarMultiplication.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarRemainder.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseDivision.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarReverseSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSet.class,org.nd4j.linalg.api.ops.impl.scalar.ScalarSubtraction.class,org.nd4j.linalg.api.ops.impl.scalar.Step.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarAnd.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEps.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThan.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNot.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarNotEquals.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarOr.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarSetValue.class,org.nd4j.linalg.api.ops.impl.scalar.comparison.ScalarXor.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterDiv.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMax.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMin.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterMul.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdAdd.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterNdUpdate.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterSub.class,org.nd4j.linalg.api.ops.impl.scatter.ScatterUpdate.class,org.nd4j.linalg.api.ops.impl.shape.ApplyGradientDescent.class,org.nd4j.linalg.api.ops.impl.shape.Broadcast.class,org.nd4j.linalg.api.ops.impl.shape.BroadcastDynamicShape.class,org.nd4j.linalg.api.ops.impl.shape.Concat.class,org.nd4j.linalg.api.ops.impl.shape.ConfusionMatrix.class,org.nd4j.linalg.api.ops.impl.shape.Cross.class,org.nd4j.linalg.api.ops.impl.shape.Diag.class,org.nd4j.linalg.api.ops.impl.shape.DiagPart.class,org.nd4j.linalg.api.ops.impl.shape.ExpandDims.class,org.nd4j.linalg.api.ops.impl.shape.Eye.class,org.nd4j.linalg.api.ops.impl.shape.Gather.class,org.nd4j.linalg.api.ops.impl.shape.GatherNd.class,org.nd4j.linalg.api.ops.impl.shape.Linspace.class,org.nd4j.linalg.api.ops.impl.shape.MergeAvg.class,org.nd4j.linalg.api.ops.impl.shape.MergeMax.class,org.nd4j.linalg.api.ops.impl.shape.MergeSum.class,org.nd4j.linalg.api.ops.impl.shape.MeshGrid.class,org.nd4j.linalg.api.ops.impl.shape.OneHot.class,org.nd4j.linalg.api.ops.impl.shape.OnesLike.class,org.nd4j.linalg.api.ops.impl.shape.ParallelStack.class,org.nd4j.linalg.api.ops.impl.shape.Permute.class,org.nd4j.linalg.api.ops.impl.shape.Rank.class,org.nd4j.linalg.api.ops.impl.shape.ReductionShape.class,org.nd4j.linalg.api.ops.impl.shape.Repeat.class,org.nd4j.linalg.api.ops.impl.shape.Reshape.class,org.nd4j.linalg.api.ops.impl.shape.SequenceMask.class,org.nd4j.linalg.api.ops.impl.shape.Shape.class,org.nd4j.linalg.api.ops.impl.shape.ShapeN.class,org.nd4j.linalg.api.ops.impl.shape.Size.class,org.nd4j.linalg.api.ops.impl.shape.SizeAt.class,org.nd4j.linalg.api.ops.impl.shape.Slice.class,org.nd4j.linalg.api.ops.impl.shape.Split.class,org.nd4j.linalg.api.ops.impl.shape.SplitV.class,org.nd4j.linalg.api.ops.impl.shape.Squeeze.class,org.nd4j.linalg.api.ops.impl.shape.Stack.class,org.nd4j.linalg.api.ops.impl.shape.StridedSlice.class,org.nd4j.linalg.api.ops.impl.shape.Tile.class,org.nd4j.linalg.api.ops.impl.shape.Transpose.class,org.nd4j.linalg.api.ops.impl.shape.Unstack.class,org.nd4j.linalg.api.ops.impl.shape.ZerosLike.class,org.nd4j.linalg.api.ops.impl.shape.bp.ConcatBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.SliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.StridedSliceBp.class,org.nd4j.linalg.api.ops.impl.shape.bp.TileBp.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArray.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayConcat.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayGather.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayRead.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayScatter.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySize.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArraySplit.class,org.nd4j.linalg.api.ops.impl.shape.tensorops.TensorArrayWrite.class,org.nd4j.linalg.api.ops.impl.summarystats.StandardDeviation.class,org.nd4j.linalg.api.ops.impl.summarystats.Variance.class,org.nd4j.linalg.api.ops.impl.transforms.Angle.class,org.nd4j.linalg.api.ops.impl.transforms.Assert.class,org.nd4j.linalg.api.ops.impl.transforms.BinCount.class,org.nd4j.linalg.api.ops.impl.transforms.CheckNumerics.class,org.nd4j.linalg.api.ops.impl.transforms.Cholesky.class,org.nd4j.linalg.api.ops.impl.transforms.Constant.class,org.nd4j.linalg.api.ops.impl.transforms.Histogram.class,org.nd4j.linalg.api.ops.impl.transforms.HistogramFixedWidth.class,org.nd4j.linalg.api.ops.impl.transforms.IdentityN.class,org.nd4j.linalg.api.ops.impl.transforms.MaxOut.class,org.nd4j.linalg.api.ops.impl.transforms.NthElement.class,org.nd4j.linalg.api.ops.impl.transforms.Pad.class,org.nd4j.linalg.api.ops.impl.transforms.ReluLayer.class,org.nd4j.linalg.api.ops.impl.transforms.any.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.any.IsMax.class,org.nd4j.linalg.api.ops.impl.transforms.bool.BooleanNot.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsFinite.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsInf.class,org.nd4j.linalg.api.ops.impl.transforms.bool.IsNaN.class,org.nd4j.linalg.api.ops.impl.transforms.bool.MatchConditionTransform.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNorm.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.clip.ClipByValue.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndReplace.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.CompareAndSet.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.Eps.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldGreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThan.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldLessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMax.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldMin.class,org.nd4j.linalg.api.ops.impl.transforms.comparison.OldNotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ATan2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Assign.class,org.nd4j.linalg.api.ops.impl.transforms.custom.BatchToSpace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Choose.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.CumSum.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Dilation2D.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicPartition.class,org.nd4j.linalg.api.ops.impl.transforms.custom.DynamicStitch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.EqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxArgs.class,org.nd4j.linalg.api.ops.impl.transforms.custom.FakeQuantWithMinMaxVars.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Fill.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.GreaterThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InTopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.InvertPermutation.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNonDecreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsNumericTensor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.IsStrictlyIncreasing.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNorm.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNormBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThan.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LessThanOrEqual.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ListDiff.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogMatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogSoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalAnd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalNot.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalOr.class,org.nd4j.linalg.api.ops.impl.transforms.custom.LogicalXor.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDeterminant.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixDiagPart.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixInverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MatrixSetDiag.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Max.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Min.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MirrorPad.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttention.class,org.nd4j.linalg.api.ops.impl.transforms.custom.MultiHeadDotProductAttentionBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.NotEqualTo.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ParallelConcat.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Pow.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Reverse.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseSequence.class,org.nd4j.linalg.api.ops.impl.transforms.custom.ReverseV2.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SoftMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.SpaceToBatch.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Standardize.class,org.nd4j.linalg.api.ops.impl.transforms.custom.StandardizeBp.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Svd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.TopK.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Trace.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Unique.class,org.nd4j.linalg.api.ops.impl.transforms.custom.UniqueWithCounts.class,org.nd4j.linalg.api.ops.impl.transforms.custom.XwPlusB.class,org.nd4j.linalg.api.ops.impl.transforms.custom.Zeta.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.custom.segment.SegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.dtype.Cast.class,org.nd4j.linalg.api.ops.impl.transforms.floating.RSqrt.class,org.nd4j.linalg.api.ops.impl.transforms.floating.Sqrt.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.CubeDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.DynamicPartitionBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.ELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.GradientBackwardsMarker.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardSigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.HardTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LeakyReLUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.LogSoftMaxDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RationalTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.RectifiedTanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.Relu6Derivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftSignDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.SoftmaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.gradient.TanhDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryMinimalRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.BinaryRelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.RelativeError.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.Set.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.AddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.Axpy.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.CopyOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.DivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.FloorModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MergeAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.MulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.ModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAddOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldAtan2Op.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFModOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldFloorDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldMulOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldRSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.OldSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.PowPairwise.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RSubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RealDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.RemainderOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SquaredDifferenceOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.SubOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.TruncateDivOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.AddBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.DivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.FloorModBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.MulBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RDivBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.RSubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SquaredDifferenceBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.arithmetic.bp.SubBpOp.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.And.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Not.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Or.class,org.nd4j.linalg.api.ops.impl.transforms.pairwise.bool.Xor.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMax.class,org.nd4j.linalg.api.ops.impl.transforms.same.AMin.class,org.nd4j.linalg.api.ops.impl.transforms.same.Abs.class,org.nd4j.linalg.api.ops.impl.transforms.same.Ceil.class,org.nd4j.linalg.api.ops.impl.transforms.same.Cube.class,org.nd4j.linalg.api.ops.impl.transforms.same.Floor.class,org.nd4j.linalg.api.ops.impl.transforms.same.Identity.class,org.nd4j.linalg.api.ops.impl.transforms.same.Max.class,org.nd4j.linalg.api.ops.impl.transforms.same.Min.class,org.nd4j.linalg.api.ops.impl.transforms.same.Negative.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldIdentity.class,org.nd4j.linalg.api.ops.impl.transforms.same.OldReverse.class,org.nd4j.linalg.api.ops.impl.transforms.same.OneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.same.Reciprocal.class,org.nd4j.linalg.api.ops.impl.transforms.same.Round.class,org.nd4j.linalg.api.ops.impl.transforms.same.Sign.class,org.nd4j.linalg.api.ops.impl.transforms.same.Square.class,org.nd4j.linalg.api.ops.impl.transforms.same.TimesOneMinus.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMax.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMean.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentMin.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentProd.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSqrtN.class,org.nd4j.linalg.api.ops.impl.transforms.segment.UnsortedSegmentSum.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.SegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMaxBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMeanBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentMinBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentProdBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSqrtNBp.class,org.nd4j.linalg.api.ops.impl.transforms.segment.bp.UnsortedSegmentSumBp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ACosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ASinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ATanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cos.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Cosh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.ELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erf.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Erfc.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Exp.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Expm1.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.GELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.HardTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Log1p.class,org.nd4j.linalg.api.ops.impl.transforms.strict.LogSigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.PreciseGELUDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RationalTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.RectifiedTanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Rint.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SELU.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SetRange.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sigmoid.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SigmoidDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sin.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Sinh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftPlus.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SoftSign.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Stabilize.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Swish.class,org.nd4j.linalg.api.ops.impl.transforms.strict.SwishDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tan.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanDerivative.class,org.nd4j.linalg.api.ops.impl.transforms.strict.Tanh.class,org.nd4j.linalg.api.ops.impl.transforms.strict.TanhDerivative.class,org.nd4j.linalg.api.ops.persistence.RestoreV2.class,org.nd4j.linalg.api.ops.persistence.SaveV2.class,org.nd4j.linalg.api.ops.random.compat.RandomStandardNormal.class,org.nd4j.linalg.api.ops.random.custom.DistributionUniform.class,org.nd4j.linalg.api.ops.random.custom.RandomBernoulli.class,org.nd4j.linalg.api.ops.random.custom.RandomExponential.class,org.nd4j.linalg.api.ops.random.custom.RandomNormal.class,org.nd4j.linalg.api.ops.random.impl.AlphaDropOut.class,org.nd4j.linalg.api.ops.random.impl.BernoulliDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistribution.class,org.nd4j.linalg.api.ops.random.impl.BinomialDistributionEx.class,org.nd4j.linalg.api.ops.random.impl.Choice.class,org.nd4j.linalg.api.ops.random.impl.DropOut.class,org.nd4j.linalg.api.ops.random.impl.DropOutInverted.class,org.nd4j.linalg.api.ops.random.impl.GaussianDistribution.class,org.nd4j.linalg.api.ops.random.impl.Linspace.class,org.nd4j.linalg.api.ops.random.impl.LogNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.ProbablisticMerge.class,org.nd4j.linalg.api.ops.random.impl.Range.class,org.nd4j.linalg.api.ops.random.impl.TruncatedNormalDistribution.class,org.nd4j.linalg.api.ops.random.impl.UniformDistribution.class)
this.registry.getValue().addXAResourceRecovery(recovery)
UriBuilder.fromResource(StreamAlertResource.class).build()
new InetSocketAddress(configuration.getRestListenUri().getPort())
getBooleanValue(ASYNC_CLIENT + "acceptAnyCertificate",false)
ExprEval.of(null)
Utils.isZkAuthenticationConfiguredStormServer(topoConf)
StatBuckets.prettyUptime(secs)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING
Thread.sleep(50)
resetTimeInSeconds * 1000
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class,JwtDecoderConfiguration.class)
assertEquals(expectedPlan,actualPlan)
return handshakeTimeoutMillis; 
fields[i] >= 0
return true; 
Thread.sleep(2000)
GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)
cf.getCompressionType() == null
0 - originY
statistics.addRemoveTimeNano(System.nanoTime() - start)
connection.pexpire(key,millisecondsTimestamp)
Calendar.getInstance(JSON.defaultLocale)
logger.error("Error connecting to Plex",e)
makeResponse(new AuthorizationException("UI request '" + op + "' for '"+ user+ "' user is not authorized"),containerRequestContext,401)
newNode.makeNonIndexable()
eq(true)
is("/home/source")
setMinHeight(minWidth)
config.getMaxRedirects()
checkArgument(partitionColumns.size() == values.size())
log.debug("PID contains identifier with no assigning authority")
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName())
!lowByte.equals("")
uri.toString().equalsIgnoreCase(future.getURI().toString())
toJSON(entry.getValue())
config.getOrcMaxBufferSize()
getBinaryTupledSet()
JavaConversions.asMap(logManager.logsByTopicPartition())
traces.set(null)
Long.valueOf(args[1])
LOG.info("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
1
key.equals(PropertyKey.ZOOKEEPER_ENABLED)
filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))
LOG.info("Creating netty output stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
bulkInsertableMap.get(persistentObjectClass)
System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000
primitiveToWrappers.put(wrapperType,primitiveType)
TransactionException e
username.length()
ZWaveSwithcAllCommandClass.class
targetCondn == null
operation.get(ROLLBACK_ON_RUNTIME_FAILURE)
256 << zoomLevel
Throwable t
IOException.class
request.getTaskDefinitionKey()
DEFAULT_MAX_UNION_SIZE=20
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
TfsShell.convertMsToDate(files[3].getCreationTimeMs())
assertFalse(user.isGeoEnabled())
Thread.sleep(1350)
SingleMapBlockWriter.class
edge.setType(EdgeDirection.DIRECTED)
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER")
TimeUnit.SECONDS.toMillis(3)
SOURCE.deref()
DefaultManagementAgent.class
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
capacity > 1 << 30
new Duration(2,SECONDS)
assertTrue(model.getUniqueItems())
ps.createRelationship(rel)
ar.cause()
graphWidth / 2
@IntMethodAnnotation(42)
clearFromMember.start()
message.getFormattedFields()
getter.getRawReturnType()
new DynamicAwareEntry("https4://localhost/test",null,null)
MoreObjects.toStringHelper(this).add("user",getUser()).add("timeZoneKey",timeZoneKey).add("locale",locale).add("startTime",startTime).add("properties",properties)
connectionTimeout / 2
logger.info("Optimized Selector: " + selector.getClass().getName())
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
group.getId()
protocol.read(inputStream)
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
Assert.assertEquals(2,visitor.getConditions().size())
Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
config.getIdleConnectionTimeoutInMs()
view.getClusteredLayerInDegree(absNode)
Preconditions.checkNotNull(blockWorker)
logger.error("Error connecting to Plex",e)
DataStream<OUT>
readBytes >= 0
a.getTypeByte()
field.getRawType()
endpoint.setDataSource(ds)
logger.info("Computing Control Flow Graph")
getTimeout()
GL15.glGetBufferParameter(target,pname,params)
public void testWithDFS() throws IOException {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
TimeUtils.nanoTime()
http2.setInitialStreamSendWindow(initialStreamSendWindow)
getConfiguration().getConnectionFactory()
Short.valueOf(value.toString())
PointLookupOptimizer.class
GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))
logger.debug("AtmosphereResource {} is resuming",uuid())
map.put(i,emp,0L,SECONDS,2L,SECONDS)
new DynamicAwareEntry("https://localhost:443/test",null,null)
args.length == 0
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
getMockEndpoint("mock:" + i).expectedMessageCount(1000)
req.startAsync()
statistics.addGetTimeNano(System.nanoTime() - start)
IOException e
getRegistry().put("myTable",ht)
new RequestManager(testTimer,300)
node.has(Constants.ALIAS)
level <= RF_STATUS_FULL_SIGNAL
id=14238
assertEquals(512f,i,10f)
new CSVFilter(lines)
UndertowServletWebServer.class
Exception exception
createService(apiKey,apiSecret,callback,defaultScope,responseType,userAgent,httpClientConfig,httpClient)
processSelectedKeys()
new StringBuilder(639)
Exception e
128 * 1024
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)
name="java:/topic/myAwesomeTopic"
option.getType()
/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 0; 
initial(rand)
assertEquals(expectedPlan,actualPlan)
Map<String,String>
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("hello"))
contact.GetWorldManifold()
MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())
test("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
new ArrayList<Object>()
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())
mock.expectedFileExists("target/failed/error/bye.txt","Kabom")
@UriParam
LOG.error("Failed to get next entry from " + jarFileName + ": "+ ioEx)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
assertEquals(expectedPlan,actualPlan)
new GatherGettersAndSetterProperties(compiler)
getParser().parse(args)
@Override public ResponseImpl schema(Property property){   throw new RuntimeException("Not implemented"); } 
String retval=""; 
ImmutableList.of(sourcesAsStrings)
id=18
maxActiveSessions == null
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
ticket.notify()
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
superClass == Object.class
new RuntimeException("Unexpected rule: " + ruleStr)
Map<String,String>
Object getBean() throws Exception ; 
layout.setRefreshingLabel(label)
ProtobufUtil.createSnapshotDesc(reqSnapshot)
methodName.startsWith("save")
attribute.getDefinition().getAttributeMarshaller()
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
pixmap.getHeight() - yHotspot - 4
showTooltip == null
isTestOnBorrow()
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
i < 10
mDownView != null
return true; 
webSocketProcessor.close(webSocket,0)
setMode(mode)
value.longValue()
trimmedLine.endsWith(delimiter)
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","DbHits","No data returned")
checkArgument(!"/".equals(resourcePath),"%s is the classpath root")
ExceptionInInitializerError|ClassNotFoundException
userStreamListener.onStatus(new StatusJSONImpl(json))
new StringBuilder()
id=38
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
idGenerator.generateId()
Integer.valueOf(st.nextToken())
type != REPARTITION
EnglishUdLas=84.9873
cSet.setConcept(this)
size * 1.75f
ClassNotFoundException e
OrderedMap.class
Assert.fail()
MathUtils.PI * (this.width * this.height) / 2
id=21
lexer.token() == (Token.SELECT)
id=29
Generics.newHashMap()
items[21]
(color & 0x00FFFFFF) & (alpha << 24)
options.setLanguageIn(LanguageMode.ECMASCRIPT5)
SOURCE.deref()
role.description().get()
typeSerializer.getClass()
internalExecutor.submit(command)
containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class)
logger.info("Expanding Jquery Aliases")
id=19903
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
node1.checkTreeEqualsSilent(node2)
value.doubleValue()
getUrl()
new IllegalStateException()
exportReturnCodes(exporter)
enabled=false
file.getAbsoluteFile()
!regex.equals(lastRegex)
(AST)child
histogram.getCount()
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRole"))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
assertClusterSize(2,nodes[0])
in.readObject()
KEY_LENGTH=20
AbstactStoreHandler<DelayedEntry>
public static XQueryBuilder xquery(File file,String characterSet) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
mWorkerId + BASE_FILE_NUMBER
targetClass != null
metastore.getHostText()
new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId))
return true; 
StatBuckets.prettyUptime(secs)
new Path(bucketPath,"test-" + i + '-'+ j).toString()
super.mySetupMutualAuthServerIsValidException(cause)
synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
DataStream<OUT>
memoryReservation.getAndAdd(bytes)
id=15848
public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
compactionStarted.getAndSet(true)
"http".equals(protocol)
Exception e
put(v)
pubSubDomain=true
Assert.assertEquals("Invalid selection end",280,selector.getSelectionEnd())
cache.flush()
assertThat(xml).isEqualTo(expectedContent)
mWorkerId + BASE_FILE_NUMBER
hz1.getLifecycleService().terminate()
scanFeatures(getCamelKarafFeatureUrl(),"camel-core","camel-spring","camel-" + feature)
config.getBroadcasterFactory().lookup(m.broadcaster(),true)
entry.getValue().health().compose(this.timeoutCompose)
context.getContextPath()
DEFAULT_NUMBER_OF_READ_BUFFERS=128
Calendar.getInstance(JSON.defaultLocale)
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
Object edge
assertEquals(iter.next().getMessage(),"Unable to open ''.")
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
new GetExecutionVariableInstancesCmd(executionId,variableNames,false)
LOG.error("OpenTracing: Failed to capture tracing data",t)
new UnsupportedOperationException()
oldestNode == null
cursor.getPosition()
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
is("/home/source")
JsonObject.createObjectMapper().getJsonFactory()
GatherGettersAndSetterProperties.update(compiler,externs,root)
chooser.showSaveDialog(null)
principalCookieName != null
count <= 0
req.getSession().getMaxInactiveInterval() * 1000
id=15863
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())
final HColumnDescriptor hcd=htd.getFamily(familyName); 
Long.valueOf(args[2])
hotRestartState != null
stopTimeNs - responseStartTimeNs
new SwiftRange(mPos,endPos)
DiagnosticType.disabled("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
this(parameters,new StringBuilder(),false); 
IR.var(IR.name(shortName),googRequireNode)
typeTmp.get(0)
QuartzEndpoint.class
typesArray.length == row.productArity()
Arrays.equals(oldVal,val)
GL20.glGetUniform(program,location,params)
Newer
(byte)0xff
version == null
status.isDirectory()
config.getStorageImpl()
synchronized (this) {   if (transformed != null) {     if (transformed instanceof List) {       @SuppressWarnings("unchecked") List<T> casted=(List<T>)transformed;       return casted;     }  else {       throw new InitializationTypeConflictException(transformed.getClass());     }   }  else {     return data;   } } 
connector.setPort(8080)
selector.select(500)
nearCache.put(key,event.getValue())
engine.execute(query).toString()
XMLInputFactory.newFactory()
Math.min(1000L,connectionTimeout)
e.getCause()
assertEquals(expectedPlan,actualPlan)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",8)
consumer.endpoint.isAutoAck()
assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)
GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))
config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
writer.write(line)
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
mock.message(0).outBody(String.class)
ImmutableSet<ImplemetationMethodDescriptor>
assertEquals(helper.getRelationshipIndexes().length,1)
knownType != null
new ResultSetIterator(rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
this.transactionsRepository.removeTransaction(this.xidTransactionID)
j++
propertiesComponent.isDefaultCreated()
beans.add(0,bean)
this.thrown.equals(IllegalStateException.class)
modulePath.split(File.pathSeparator)[1]
assertEquals(response.getStatusCode(),302)
UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)
System.currentTimeMillis()
getClusterMap().put(buildAttributeName(name),value)
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
from("direct:start").aggregator().header("id").batchTimeout(2000L)
request.getServletPath()
GL20.glUniform3(location,v)
96.0 / 160
webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))
new FilterConfiguration(filterParams,filterClass)
assertRemoveSubsystemResources(servicesA)
UserGroupInformation.getCurrentUser().reloginFromKeytab()
@Message(id=14151,value="Could not find view %s for EJB %s") RuntimeException viewNotFound(String viewClass,String ejbName); 
id=15847
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR,VARCHAR.getTypeSignature().toString(),VARCHAR)
theClass.getConstructor(new Class[0])
@SuppressWarnings("unused") private final Object strongReference; 
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
mTfs.delete(mTfs.open(new TachyonURI(dirPath)))
LOGGER.warn("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
Object edge
TEST_UTIL.getHBaseAdmin()
result.expectedMessageCount(1)
Throwable ex
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123L)
return r; 
? extends Exception
i=0
id=15836
id=15
FilterAndProjectOperator.class
mWorkerId + BASE_FILE_NUMBER
new MetaTableLocator().waitMetaRegionLocation(watcher,100)
parameter.toString()
Context.getProviderService().getAllProviderAttributeTypes(false)
DiagnosticType.error("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
ArrayNodeBaseTest<LazyTailArrayNode>
s.setMaxVersions()
FileSystem.getLocal(conf).delete(localScratchDir)
(new Path(testBucket.getParent(),".test.inprogress")).toString()
registry.put("curator",client)
result.expectedMessageCount(1)
@Override public ResponseImpl example(String type,Object example){   throw new RuntimeException("Not implemented"); } 
Long.valueOf(args[1])
j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
out.writeObject(function)
TestSuiteEnvironment.getServerAddress()
(strLine=br.readLine()) != null
when(rs.wasNull()).thenReturn(false)
target == null
privObj.getObjectName().equals("masking_acid_no_masking")
CanalParseException e
ROOT_LOGGER.error(consoleSlot == null ? "main" : consoleSlot)
c.getDeclaredConstructors()
put.writeToWAL()
processor.open(w,request)
notifierFuture.cancel(true)
exportReturnCodes(exporter)
/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(130,"your grammars contain a circular dependency and cannot be sorted into a valid build order",ErrorSeverity.ERROR)
mAbsListView.getPositionForView(childView) == position
ArrayList<EntryListener<?,?>>
found=true
s.count()
runPartialSorter(sorter,NUM_RECORDS,28)
13 * Bytes.SIZEOF_LONG
event.remove(factory.getName())
public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
System.currentTimeMillis()
calendar.set(Calendar.YEAR,2200)
Thread.sleep(1000)
GL20.glUniform1(location,v)
"Using bind address: " + publicAddress
ArrayList<TaggedWord>
"unable to parse " + abstractOption
id=7
t.add(R.id.frame,new SampleListFragment())
LOG.error("Failed to look for classes in " + jarFileName + ": "+ ioEx)
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
newEmbeddedDatabaseBuilder(path)
SampleCacheApplication.class
redeliveryDelay > maximumRedeliveryDelay
getData() ^ 0x8
titleTextField.getText()
ch.unsafe().flushNow()
logger.info("Remove try/catch/finally")
ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)
Color.fromRGB(0x3B511A)
order.getInstructions()
container.getTimeFormat().equals(TimeFormat.DATE)
AvailablePortFinder.getNextAvailable()
handshakeFuture != null
handles[i]
tickTupleInterval == 0
tokens.toString()
localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
javaClass.addNestedType().setPublic()
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
DataStream<OUT>
graphModel.getDirectedGraph()
Exception exception
new ArrayList<>()
capacity > 1 << 30
Thread.sleep(400)
s.elapsedTime(TimeUnit.NANOSECONDS)
littleEndian.order()
Preconditions.checkNotNull(worker)
Size.kilobytes(32)
UserGroupInformation.getLoginUser().reloginFromKeytab()
mLocalAlluxioClusterResource.get().getWorkerAddress()
endPosition.getPosition() < logfileoffset
GL.glDrawArraysEXT(mode,first,count)
testConsumerConfig()
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE)
ran.nextInt(500)
Throwable t2
System.nanoTime()
getBinaryTupledSet()
graphModel.getUndirectedGraph()
new StringBuilder()
IllegalArgumentException e
keyClass(NullWritable.class)
ImmutableList.of(result)
NoClassDefFoundError ex
assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions("-Xlint:-processing")
ChronicleEngineEnpoint.class
lookup(parseName(name))
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
numTouched == 1
app.getAudio().newAudioRecoder(22050,true)
id=15832
mTestStream.getBytesFlushed()
QuotaCache.this.namespaceQuotaCache.contains(ns)
this.nameDefinitionMultimap.remove(name,node)
TABLE_COMMIT
totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()
WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)
AbstractBootstrap<ServerBootstrap,Channel>
fLines.add(st.nextToken())
channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))
content.matches(expected)
Arrays.asList("/css/**","/js/**","/images/**","/**/favicon.ico")
Values.UPGRADE.equalsIgnoreCase(connection)
GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))
assertThat(response).isEqualToIgnoringCase("Ok.\n")
this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)
nodeEngine.getService(LockService.SERVICE_NAME)
items[17]
i < getATN().maxTokenType
paused.get()
GatherGettersAndSetterProperties.update(compiler,externs,root)
public DerivedBuilder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
log.warn("Could not annotate via server! Trying to annotate locally...",t)
LocalMetricRegistry localRegistry
columnType.equalsIgnoreCase("string")
UnmodifiableIterable<T>
logger.info("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
paused.set(false)
GatherGettersAndSetterProperties.gather(compiler,mainRoot)
ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())
(short)600
id=12
this.mrwork.getHadoopSupportsSplittable()
((Number)s.first()).intValue()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
getRegistry().put("myTable",ht)
sb.append(NC)
lexer.token() == (Token.SELECT)
LOG.error("Unable to read HTTP response content",e)
SSLHandshakeException.class
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString(),any(Exception.class))
offset * 12
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
bucketerContext.update(context.timestamp(),currentProcessingTime,context.currentWatermark())
new BulletTestCollection()
assertFalse("reuse-address",networkConfig.isReuseAddress())
config.trustStoreLocation != null
getLock(address)
node1.checkTreeTypeAwareEqualsSilent(node2)
values[i] == values
sizeNeeded >= items.length
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
getRegistry().put("myFilter",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )
i=1
(t instanceof MetaException) && t.getMessage().matches("(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*")
info.getRegionName()
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable)
getConcept() != null || getConcept().getName() != null
fMethodDescriptions.put(method,description)
Preconditions.checkNotNull(manager)
future.isCancelled()
restEnableGzip=false
getConcept() != null || getConcept().getDescription() != null
Thread.sleep(10)
servletPath.equals("/")
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
metaData.getColumnName(1)
info.getRegionName()
idleTimeout < 30000
4 * Bytes.SIZEOF_BOOLEAN
getHttpConnectionManager()
attributeModel != null
executor.submit(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
sb.toString()
public Object getBean() throws Exception {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
mWorkerId + BASE_FILE_NUMBER
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
EJBException nsee
db.createIndex(new BasicDBObject(FIELD_UPDATED_AT,1).append(FIELD_UNCOMMITTED_ENTRIES,1).append(FIELD_WRITTEN_MESSAGES_1M,1))
args.length > 1
TypeUtils.getKoltinConstructor(constructors)
new PkgControl(pkg,regex)
new NullPointerException("the ast is null")
getRequestMethod == null
heartBeatTimerTask != null
config.getMaxQueryMemoryPerNode().toBytes() < maxMemory.toBytes()
getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)
EVICT_ALL + 1
executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
ppcY / 2.54f
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
edge.setType(edgeDefault)
new DynamicAwareEntry("https://localhost:8443/test",null,null)
new ServletException("non-HTTP request or response")
data.remaining()
node.getLifecycleService().terminate()
conf.getSearchBaseURL()
assertMockEndpointsSatisfied()
nameLength > maxHeadersLength - headersLength
type.createDataFormat(routeContext)
l.onSuspend(request,response)
conceptToValidate.getConceptId()
mTestStream.getBytesFlushed()
new LwjglPreferences(name)
REAL_DRIVER.close()
DEFAULT_MAX_QUERIES=3
engine.execute(cypher).toString()
GatherGettersAndSetterProperties.update(compiler,externs,root)
new DatabaseFormatterOracle()
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractACLCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
"Deleting existing file: " + tempTarget
littleEndian.order()
assertEquals(0,deserialized.getOwnedEntryMemoryCost())
new RunnableAdapter<T>(task,result)
LOG.info(getName() + " caught: ",e)
assertEquals(response.getStatusCode(),302)
logger.debug("myq ReturnCode: {}",returnCode)
!rootScanned
assertEquals(avDegree,1.0)
registrar.checkExisting(metric)
TimeUtils.nanoTime()
timeout=3000
resultEndpoint.expectedBodiesReceived("one","two","three")
lock.lock(1000,TimeUnit.MILLISECONDS)
logger.trace("Receive queue TAKE: Length={}",recvQueue.size())
20 < statuses.size()
logger.info("Creating Object {}",count.getAndIncrement())
logger.info("Computing Control Flow Graph")
ufsPath.getPath()
ServiceLoader.load(MasterFactory.class)
LOG.info("Halting process: ShellBolt died.",exception)
DEFAULT_MAX=1024
DataStream<OUT>
Integer.valueOf(sessionTTL)
JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
new UnsupportedOperationException()
Integer.valueOf(quantifier)
buffer.capacity()
createOrcWriterOptions(sourceOi,conf,cacheWriter,allocSize)
Objects.isNull(value)
file.getName().startsWith("branched-")
nodeEngine.getService(LockService.SERVICE_NAME)
log.error(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
tableInfo.getType()
c.write("[you] " + msg + '\n')
funType.toString()
resource.getUser(req,AUTHORIZER_NAME,user,"")
logger.info("Expanding Jquery Aliases")
i < getATN().maxTokenType
group == null
mapper.writeValueAsString(segment)
public Integer getNewerThan(){   return newerThan; } 
new UnilateralSortMerger<TestData.Key,TestData.Value>(memoryManager,ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2,keySerialization,valSerialization,keyComparator,reader,parentTask)
block.useSourceInfoFromForTree(exprRoot)
page=TESTING_AUTHENTICATION_SETUP
Status.constructStatuses(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
model.getBoundingBox(bbox)
order.isCurrent()
public QueryRunner printPlan(){   printPlan=true;   return this; } 
assertEquals(8,lm.getFields().size())
expectedCountsForADoc(weights,ind)
Long.valueOf(args[1])
type.getSimpleName()
connections.get(address)
System.nanoTime()
encounter.getObsAtTopLevel(false)
raw.getParameters()
public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new SslContextBuilder(true)
@PathParam("createdTimeInterval")
commandLineArguments.isLocal()
Exception cause
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
Assert.assertEquals(masterAddress,new InetSocketAddress("RemoteMaster3",defaultPort))
connectionManager.markOwnerAddressAsClosed()
new SslContextBuilder(false)
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
connection.hdel(key)
page.getSizeInBytes()
container.getAttributeModel().getNodeTable()
Thread.sleep(200)
ArrayUtils.subarray(args,4,args.length)
localCache.put(name,NULL_ENTRY)
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket")
"Excluding secondary region " + regionToFlush + " - trying to find a different region to refresh files."
getTablename().getBytes()
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)
InetAddress.getLocalHost()
Exception e
DegreeRangeBuilder.class
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
amq.getConfiguration().getConnectionFactory()
id=15864
List<String>
content.matches(expected)
objects == null
new MalformedException("Unrecognized message placeholder referenced: " + phName,objLitNode)
logger.error("Error connecting to Plex",e)
e.getMessage()
response.getStatus().getCode() / 200
new CommandFormatException(result.toString())
historicState(item,timestamp)
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
targetActor.addCaptureListener(listener)
mWorkerId + BASE_FILE_NUMBER
log.error("Error while closing command context",exception)
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address),mTachyonConf)
getBinaryTupledSet()
worldVertices.length < localVertices.length
latch.await(5,TimeUnit.SECONDS)
c < ic
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)","NP|QP < ( DNP=target < (QP < OD !< CD) !< JJ|ADJP $++ NP|QP )")
basicInvocation.potentialResponse == null
List<PairedStats>
jniGetLocalAnchorA(addr,tmp)
config.getServerNumThreads()
connectionManager.markOwnerAddressAsClosed()
mock.expectedBodiesReceived("Hello World 3")
converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
CompletableFuture<Boolean>
removeQuote(timestring.trim())
/**   * Tests for  {@link Es6SortedDependencies}  */ public class Es6SortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new Es6SortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return true;   } } 
GL20.glUniformMatrix4(location,transpose,value)
mFs.mkdirs(new Path(path),null)
methodName.startsWith("save")
endTrack("main")
methodName.equals("scan")
header.writeBytes(mask)
messageHandler.serverResponder()
getConnectionAddOperation(name,outboundSocketBindingRef,address)
ChannelBuffers.copiedBuffer(bytes,0,length)
rsMeta.getColumnName(i + 1)
assertEquals(13,lm.getFields().size())
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
sizeNeeded >= items.length
app.configuration().getString("timezone")
assertEquals(0,counter.get())
Integer.valueOf(options.getMaxKeys())
LOG.error("delete failed: {}",e.getMessage())
i < maxIndex
prop.getParamName()
taken > 190
out.writeDouble((Float)obj)
LOG.warn("Promotion of block " + blockId + " failed.",ioe)
simple.getFromSentDate()
(ObjectDeserializer)value
entry.getValue().health().compose(this.timeoutCompose)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(100)
id=15869
ObjectMapper.class
targetActor.addCaptureListener(listener)
Thread.sleep(50)
END + " End Message Interceptor"
CompletableFuture<Boolean>
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
event.isResuming()
dimensionsSpec.getDimensions()
hashSymbols.keySet()
id=24
getter.getRawReturnType()
System.nanoTime()
id=15850
OpenmrsProfileWithoutTest1Module.class
this(maxFrameLength,lengthFieldOffset,lengthFieldOffset,lengthAdjustment,initialBytesToStrip,false); 
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
event.isResuming()
name="java:/ConnectionFactory"
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "label".equals(key)
mTfs.setPin(mTfs.open(path),false)
Assert.assertEquals(stringNumber,0)
callTimeout=1000
"true".equalsIgnoreCase(value)
GL11.glTexParameter(target,pname,params)
new UnsupportedOperationException()
Utils.class
mock.message(0).arrives().between(7,9)
builder120.build()
getTimeout()
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.")
id=2
log.debug("Error while closing command context",exception)
Exception exception
(int)timeoutMs * 1000
uncompressedProto.length < 1700000
amq.getConfiguration().getConnectionFactory()
new Neo4jGraph(database.graph)
targetDirectory.directory("unwritable")
incomingMessage.setTransActionCanceled(true)
assertClusterSize(2,nodes[0])
Status.constructStatuses(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
writtenOutputPhysicalDataSize+=stageStats.getPhysicalWrittenDataSize().toBytes()
player.playSound(soundLocation,soundArg,(float)minimumVolume,(float)pitch)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
deployOneTaskProcess()
content().copy()
"Requeuing shutdown because rootScanned: " + rootScanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
PORT_2=8080
getSrcPath("checks/javadoc/Input_01.java")
LOG.fatal("Cannot run ThriftServer")
registry.put("blogService",new BlogService())
a.length >= count()
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
new S_Command("00FE30",20.0)
GnomeEngineeringManager manager=new GnomeEngineeringManager(); 
getTimeout()
new InetSocketAddress(configuration.getRestListenUri().getPort())
parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ COVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
log.rollWriter()
nodeEngine.getService(LockService.SERVICE_NAME)
cf.getCompressionType() == null
32 * 1024 * 1024
Thread.sleep(100)
cache.remove(this)
GL20.glUniform1(location,v)
request.getServletPath()
mMountTable.resolve(getPath(dir)).getPath()
8 * Constants.MB
DEFAULT_RM_ACL_ENABLE=false
Arrays.asList("Java","CSharp","Python2","Python3","Node")
mock.expectedBodiesReceived("Hello World 2","Hello World 4")
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js")
logger.warn("gave up waiting for query reply from device {}",m_address)
id=15861
-90
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
id=19910
modulePath.split(File.pathSeparator)[1]
LOG.error("OpenTracing: Failed to capture tracing data",t)
ImmutableSet<ImplemetationMethodDescriptor>
entry.getHeader().getEventLength() * 3
Thread.sleep(1200)
exchange.getOut()
this.transactionsRepository.removeTransaction(this.xidTransactionID)
decoder.readOutbound()
isTop() || isUnknown()
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
6 * Bytes.SIZEOF_LONG
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
longValue == 0
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertEquals(10,events.size())
id=15834
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
Exception e
Setting<Long>
status.isDir()
LOG.error("Cache flusher failed for entry " + fqe)
size * 1.75f
collisionPoints.get(2)
framework.getBroadcasterFactory().lookup(m.broadcaster(),true)
names[2]
"" + SYSTEM_PROPERTIES_MODE_FALLBACK
MockReset.before()
methodName.equals("scan")
mm.tryLock(key,4,TimeUnit.SECONDS)
assertClusterSize(2,data2,data3)
conf.getSearchBaseURL()
1 / 5
sizeNeeded >= items.length
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)
props.getProperty("exporter")
GatherGettersAndSetterProperties.update(compiler,externs,root)
t3.getSize()
capacity > 1 << 30
localAddress != null
currentlyProcessing.addCallback(callback)
LOAD_FACTOR=1000
public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlOne.xml"));     final String[] expectedViolation={"3:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlTwo.xml"));     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlFour.xml"));     final String[] expectedViolation={"4:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT[./DOT[@text='Scanner']]");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
CompletableFuture<Boolean>
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
mListView.getChildAt(index)
-1
HashMap<String,ASTNode>
mFixedExecutionService.shutdown()
NUM_TOUCHES=40
uncompressedProto.length < 2560000
target.setField(1,edge)
defaultMaxRowsInMemory=500000
"Stream " + importer
node1.checkTreeTypeAwareEqualsSilent(node2)
request.getServletPath()
status.getCreationTimeMs()
return 1; 
new UnsupportedOperationException("Command not found in spout message: " + shellMsg)
clazz.getConstructor(ConstantsAndVariables.class,PatternScoring.class,String.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class,TwoDimensionalCounter.class)
in.readObject()
assertThat(response).isEqualToIgnoringCase("Woop woop. yay\n")
Exception exception
item.getClass()
testSame("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
mock.expectedMessageCount(3)
id=46
bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
new EnumValidator<Mode>(Mode.class,true,false)
new RuntimeException(e)
p + "." + M_ITERATOR
expirationTime == Long.MAX_VALUE && expirationTime < 0
checkArgument(child.parent == null)
mjCtx.getOldMapJoin() == null
"wrong partition, expected: " + getPartitionId() + " but found:"+ op
handlers[0] == null
MANAGEMENT_API_MICRO_VERSION=0
websocketComponent.setMaxThreads(11)
Reflection.methodHandle(type,"sizeOf",null)
bindingGroup.get(PORT_OFFSET).asInt() >= 0
new RuntimeException("error initializing deserializer: " + deserializer.getClass().getName())
this.logFactory
new WordToSentenceProcessor<IN>()
log.error(error,cause)
System.nanoTime()
RCFileMergeMapper.jobClose(outputPath,noName,job,console)
request.getServletPath()
ReactiveHelper.scheduleLast(runnable,"Multicast next step")
LOG.error("PriviledgedActionException as:" + this + " cause:"+ cause)
new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)
s.toString().toUpperCase()
option == JOptionPane.CANCEL_OPTION
LOG.error("Async Kafka commit failed.",cause)
List<SuggestedFix>
ParseUtils.parseHumidity(S300TH_DATA_1)
mjCtx.getOldMapJoin() == null
GL11.glGetInteger(pname,params)
Maps.newHashMap()
DatabaseDescriptor.getListenAddress().getHostName()
clientConfig.property(ClientProperties.READ_TIMEOUT,1000)
setComplete(length)
mock.expectedMessageCount(3)
msg.offset()
capacity > 1 << 30
attribute.getDefinition().getAttributeMarshaller()
Boolean.getBoolean("java.awt.headless")
new IncrementalIndexSegment(rtIndex)
new Duration(2,SECONDS)
config.getBroadcasterFactory().lookup(m.broadcaster(),true)
processor.open(w2,request)
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
expiresOn.getTime()
part.getDataLocation()
JavaConversions.asIterable(logManager.allLogs())
"Using bind address: " + publicAddress
getClientConfig().getAddressList()
new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null)
scanFeatures(getKarafFeatureUrl(),"spring","spring-dm","jetty")
assertOpenEventually(countDownLatch,50)
classResolver.resolveClass(type)
sliceInput.length()
cs.getString(columnIndex)
logger.error("",ex)
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),put,true)
GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))
Color.fromRGB(0xDECF2A)
static public final PowIn fastSlow=pow2In; 
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRole"))
getTokenNames()
LOG.error("OpenTracing: Failed to capture tracing data",t)
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
Calendar.getInstance(JSON.defaultLocale)
mockRegionInfo.isMetaRegion()
Assert.assertEquals(expected,values)
LOG.info("Ignoring duplicate journal entry with SN {} when next SN is {}",newSN,mNextSequenceNumberToRead)
@ConditionalOnEnablednHealthIndicator("diskspace")
!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
Object deserialize(byte[] b); 
prefSize(new Fixed(width))
timeout=600000
8 * Bytes.SIZEOF_LONG
assertTrue(CompressionTest.testCompression("SNAPPY"))
config.getMaxRedirects()
AsyncResult<InetAddress>
visitor.visit(this)
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Request[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onRequest(streamId,requestHeaders);     try {       if (cancel) {         frameWriter.rstStream(streamId,ErrorCode.CANCEL); synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
checkArgument(keyGroupRange.contains(keyGroup))
strategiesBuilder::messageReader
putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
System.getProperty(propName)
event.remove(factory.getName())
connection.subscribe(jedisPubSub,patterns)
file.getAbsoluteFile()
getEndpoint().getConfig().getIndexName()
@ConditionalOnEnablednHealthIndicator("rabbit")
new StringBuilder()
DiagnosticType.disabled("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
i++
ReactiveHelper.scheduleLast(() -> processor.process(exchange,done -> {   if (exchange.getException() != null) {     getExceptionHandler().handleException("Error processing aggregated exchange",exchange,exchange.getException());   }  else {     log.trace("Processing aggregated exchange: {} complete.",exchange);   } } ),"sending aggregated exchange")
waitLatch.await(25,TimeUnit.MILLISECONDS)
a.length >= count()
return false; 
bar.setResultWaitTime(1000)
twitter.getHomeTimeline()
SOURCE.deref()
(Long)strategy.getOrNull("test",third)
@ConditionalOnEnablednHealthIndicator("diskspace")
edge.setType(EdgeDirection.DIRECTED)
Thread.sleep(100)
StringUtils.subString(url,"weburi-",".json")
url2 != null
littleEndian.order()
contentType != null
robotstxtServer.allows(webURL)
END + " End Message Interceptor"
LOG.info("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
id=13307
public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
doMethod("GET","/books/" + bookId,null)
executor.scheduleWithFixedDelay(this,period,period,unit)
uiAclHandler.permit(reqContext,op,conf)
tabAlias.equals(tableAlias)
id=10
new ObjectTagging()
TfsShell.convertMsToDate(files[0].getCreationTimeMs())
latch.await(100,TimeUnit.SECONDS)
Double.isNaN(rate)
lastCompletedOffset != lastCompletedOffset
Long.valueOf(args[2])
ChannelBuffers.copiedBuffer(request.getByteData())
OptionalIdentifiedType<FromDefinition>
annotations.get(node)
dict.put(words[0],words[2])
String result=""; 
64 * 1024 * 0124
nodeColumn.getIndex()
logger.info("Renamed " + instancesRenamed + " instances of "+ propsRenamed+ " properties.")
propResource.get(BOOT_TIME).asBoolean()
input.mark(firstReadBufferSize)
header.writeBytes(mask)
mMountTable.resolve(getPath(next)).getPath()
Assert.assertEquals(9500,Utils.calculateHeapSize(10000))
t=b.getBroadcasterConfig().applyFilters(r,t)
logger.info("Optimized Selector: " + selector.getClass().getName())
mUfs.create(testFile)
Preconditions.checkNotNull(mBlockIdsOnTiers)
mock.expectedMessageCount(2)
System.currentTimeMillis()
Class.forName(name)
new UnsupportedOperationException()
from("direct:a").delay(3000)
i >= 0
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
log.debug(message,exception)
this.assignmentManager.isRegionInTransition(regionInfo) == null
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)
configElements[1]
new Path(bucketPath,"test-" + i + '-'+ j).toString()
mock.expectedMessageCount(2)
new ModelNode().set(60000)
colorModeClass.equals("ProportionalSizeMode")
text.equals(((TextButton)button).getText())
timeout=600000
body.getData()
callTimeoutMs=5000
getJSDocTypeWithBraces(operation)
LOG.error("Could not parse syslog message. Not further handling.",e)
public String getPort(){   return this.port; } 
data.limit()
GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))
that.getPath() == null
LOG.warn("Cannot create the SAXParser XMLReader, due to {}",ex)
-1
ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
logger.error("InfluxDB is not yet connected")
getAnimation(id,true)
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
redeliveryDelay > maximumRedeliveryDelay
JsonObject.createObjectMapper().getJsonFactory()
new AMQPProducer(configuration,metricRegistry)
p > 0
endTrack("main")
LOG.error("Unable to parse HTTP response content",e)
logger.info("Return Object {} now at size {}",b,count.getAndDecrement())
String transformationResult=JsonPath.read(source,JSonPathExpression); 
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
analysis.getType(expression)
capacity > 1 << 30
buffer.put(indices)
yz*=ly
c.setLong("hbase.hregion.memstore.flush.size",100000)
LOG.warn("Unable to close socket selector",ex)
System.arraycopy(value,0,value,length,value.length)
visitNode(node,context)
failure != null
request.getRequestURI()
IntrospectionSupport.setProperty(jpa,"timestamp",msg.getTimestamp())
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
indexFile.exists()
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n")
args.length != 3
HazelcastInstanceFactory.terminateAll()
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,false)
context.var("long")
user.getSystemId() == null
log.error(error,cause)
e.getMessage()
!type.isInterface()
telegram.getTimestamp() < currentTime
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,sessionTimeZone,sessionTimeZone)
Utils.class
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING)
attribute.getDefinition().getAttributeMarshaller()
b.getTopicId()
lights.shadowMap != null
Lists.newArrayList(stream1)
Thread.sleep(200)
equal=false
@GET @Path("/{petId}") @ApiOperation(value="Find pet by ID",notes="Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message="Invalid ID supplied"),@ApiResponse(code=404,message="Pet not found")}) public Response getPetById(@ApiParam(value="ID of pet that needs to be fetched",allowableValues="range[1,5]",required=true) @PathParam("petId") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,"Pet not found");   } } 
n.getNodeData().getLabel().toLowerCase().contains(str)
map.set(key,"value",1,TimeUnit.SECONDS)
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)
id=1
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())
input.size()
e.getMessage()
proxy == null
super.getView(position,contextualUndoView.getContentView(),parent)
idAnnotation != null
new NagiosNscaStub(25667,"password")
assertThat(getField(graphite,"port")).isEqualTo(8080)
MockReset.before()
LOG.error("register druid-driver mbean error",ex)
that.getPath() == null
buffer.capacity()
getOrCreateContainer().unlock(dataKey,caller,threadId)
registry.put("myManager",cacheManager)
id=15835
Throwable t2
engine.execute(query).toString()
position < mSrcDragPos
(getSource().y() + getTarget().y()) / 2f
new RuntimeIOException(e)
id=4
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
logger.debug("Invalid Account Credentials")
TrustManagerFactory.getDefaultAlgorithm()
request.getServletPath()
simple.getFromSentDate()
expirationTime == Long.MAX_VALUE && expirationTime < 0
new IllegalArgumentException()
atlasFile.path()
entry.getValue().getManagementInterfaceMinorVersion()
0 == CheckUtils.parseFloat(text,type)
webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))
/**   * Represents black  */ BLACK('0',0x01)
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
calendar.set(Calendar.YEAR,2200)
progress.start(0.45f)
DEFAULT_OCTREE_WIDTH=10000
SecurityActions.getModuleClassLoader(JACC_MODULE)
case JOIN: 
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription())
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
request.getServletPath()
LogUtils.initializeDefaultConsoleLogger()
new Color(pixels[i])
path.lastIndexOf("/") == 0
left.getFieldName().equals(right.getFieldName())
return false; 
new Argument().setIndex(0)
LOGGER.debug("Unable to process JSON",exception)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()
new DatagramDnsQuery(addr,null,1)
k < THREADS
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],user,new BindException(user,"user"))
Assert.assertNull(ex.getCause())
newId > max
JMXJsonServlet.class
Context.getVisitService().getAllVisitTypes(false)
initial=10
Database.builder()
Thread.sleep(100)
!scriptsToUpdate.add(n)
url.getServiceInterface()
segmentsInCluster.get(segment.getIdentifier(),server.getTier())
public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
stat.st_mtim.tv_nsec.get()
DataStream<OUT>
outputBatchSize=5000
testOffset=4875454l
HashMap<String,Operator<? extends Serializable>>
processSelectedKeys()
addProperty(firstNode,"band","The Clash")
incomingEdges.containsKey(source)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
/**   * Retrieves X.  * @return a value  */ public T getX(){   return null; } 
new CheckPermission().of("all").against("deploy").expect(false)
context.setDelayer(1000)
servletClass != null && filterClass != null
super.getView(position,contextualUndoView.getContentView(),parent)
public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
list.isEmpty()
!plugin.isEnabled()
new PeepholeSubstituteAlternateSyntax(false)
this(host,port,threadName,queueSize,timeout,SEND_BUFFER_SIZE,DEFAULT_BUFFER_SIZE); 
toHeapData(key)
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff
yamlFactory.createJsonParser(input)
julLogger.info("Hello world")
runTasks & 0x40
packed[j]
SingleServerInventoryProvider.class
field.getRawType()
Bytes.toBytesBinary(tableNameOrRegionName)
option.getType()
servers.isEmpty()
fields.get("last_seen")
resultEndpoint.expectedBodiesReceived("one","three")
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)
initialCapacity < capacity
report(n,MISPLACED_ANNOTATION)
Color.fromRGB(0xF0F0F0)
value.length() <= 3
ImmutableList.of()
lock.tryLock(3,TimeUnit.SECONDS)
-1
node1.checkTreeEqualsSilent(node2)
Long.valueOf(args[1])
historicState(item,timestamp)
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
new StringLengthValidator(1)
incomingMessage.getMessagePayloadByte(1)
WebSocketEventListener.class.cast(l).onMessage(event)
buffer.indexOf(partToMatch)
tJvmGcDetailed.getJvmGcNewCount()
request.getTaskDefinitionKey()
srcActivity.getParent() == null
ResponseImpl schema(Property property); 
graphModel.getGraph().getEdgeCount()
ImmutableList.of(listeners)
postAgg.getName().equals(metricName)
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.",ioe)
person.getVoidReason()
beansXml.createAlternatives()
this(true,true); 
new SimpleProxyPool(httpProxyList)
testSame("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
version == null
JSError.make(ModuleLoader.MODULE_CONFLICT,getName())
Color.fromRGB(0x51301A)
!mShowsDialog
11 * ClassSize.REFERENCE
System.out.println()
endTrack("main")
req.getServletPath()
statistics.addGetTimeNano(System.nanoTime() - start)
authentication.hasDefined(USERS)
id=15859
session != null
mBuffer.remaining() > toRead
assertTrue(predicate.apply(pickleEvent))
heatpumpValues[65]
millis % offset == 0
GenericUDFEnforceNotNullConstraint.class
capacity > 1 << 30
ignoreUnknownFields=false
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
getTokenNames()
status.isDirectory()
HashMap<String,Operator<? extends Serializable>>
Generics.newHashMap()
new DatabaseFormatterOracle()
new HashCollisionNode(edit,count,hash,array)
new StringBuilder()
attributes == null
Optional.of(Duration.seconds(1))
mWorkerId + BASE_FILE_NUMBER
Class.forName(name)
setColor(color)
failure.getCause()
System.currentTimeMillis()
RexUtil.simplify(rexBuilder,node)
this.applicationContext.register(RootConfig.class,PropertyPlaceholderAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,ServerPropertiesAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class)
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
ctx.write("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
endTrack("main")
getDatabaseSchema() != null
new GdxRuntimeException("Error during Vorbis decoding.")
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
min.x < max.x
EnterpriseMapPublisherCreateCodec.decodeResponse(response).list
client.getState().setCredentials(new AuthScope(null,-1,AuthScope.ANY_REALM),defaultcreds)
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally
ChannelStateHandler handler=(ChannelStateHandler)handler(); 
attributeModel != null
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)
@UriPath(label="producer",defaultValue="true")
qp.getExclusiveMaximum()
mock.expectedBodiesReceived("Hello World 2")
from("direct:tap").delay(100)
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],user,new BindException(user,"user"))
AsynchronousCloseException e
new GetExecutionVariableInstancesCmd(executionId,variableNames,false)
Thread.sleep(500)
processDefinition.getTenantId() == null
analysis.getType(windowFunction)
zController.sendData(doRequestStop())
new StringBuilder(709)
urlToNotify.openConnection()
interceptorParamTypes.length - 1
connections.get(address)
getPath(tFile).startsWith(MASTER_CONF.TEMPORARY_FOLDER)
setColor(color)
mUfs.create(testFile)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",true))
trimmedLine.endsWith(delimiter)
@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapBaseTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } 
/**   * The resource.   */ private T mResource; 
((ChannelProgressivePromise)promise).setProgress(progress,-1)
target.addTask(task)
Set<Key<?>>
mFixedExecutionService.shutdown()
IllegalArgumentException e
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false)
newNode.makeNonIndexable()
this.isDefaultAutoCommit()
value.doubleValue()
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))
maxSize > (used / 1024 / 1024)
ShrinkWrap.create(WebArchive.class).addClass(BatchTestHelper.class).addClass(MyInputRecord.class).addClass(MyItemProcessor.class).addClass(MyItemReader.class).addClass(MyItemWriter.class).addClass(MyOutputRecord.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsManifestResource("META-INF/batch-jobs/myJob.xml","batch-jobs/myJob.xml")
new RagManager(tm)
Values.WEBSOCKET.equalsIgnoreCase(upgrade)
fireMessageReceived(ctx,message)
getPath("InputPackageDeclarationDiffDirectory.java")
conceptAnswer.getConcept()
1024 * 64
((ExecutorService)executor).isShutdown()
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
new StringBuilder(246)
DiagnosticType.warning("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
statistics.addGetTimeNano(System.nanoTime() - start)
id=15860
RuntimeException.class
items[20]
logger.info("Creating extern file for exports")
this == OtiOnly
ImmutableSet<ImplemetationMethodDescriptor>
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
EndpointOption that=(EndpointOption)o; 
RouteContext key
t.report(n,UNUSED_PRIVATE_PROPERTY)
sentencesFile == null
byteBuf.readable()
GL20.glGetVertexAttrib(index,pname,params)
id=13308
reg.put("localhost:" + port,env)
targetCondn == null
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
log.debug("PID contains identifier with no assigning authority")
topicRegistrations == null && topicRegistrations.isEmpty()
alluxioUri.getPath()
index > n
cachedMemoryUsageBytes < softMemoryLimitBytes
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
id == null
prop.getParamName()
cache5.setColor(red)
_availMemory + amount
floatBuffer.clear()
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
DEFAULT_MAX_METHODS=999
Iterable<ManyValues>
Thread.sleep(100)
cache.setRecord(key,record)
webSocket.resource().getAtmosphereResourceEvent().isSuspended()
Metric<Long>
defaultCometSupport(useServlet30Async)
name="java:comp/ds"
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of("deploy").against("deploy").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of("deploy").against("all").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of("all").against("deploy").expect(false).run();   } } 
mouseEvent.getModifiers()
from("direct:b").delay(500)
row.size() == 0
getPath("InputPackageDeclarationDiffDirectory.java")
manualClock.addTimeMs(1020)
view.getClusteredLayerInDegree(absNode)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
getTimeout()
new Color(0x696969ff)
mWorkerId + BASE_FILE_NUMBER
exchange.getPartitioningScheme().isReplicateNulls()
Long.valueOf(args[2])
hasNextChunk()
operation.get(ROLLBACK_ON_RUNTIME_FAILURE)
logger.debug("Received MyQ  JSON: {}",dataString)
layout.setRefreshingLabel(label)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
getCurrentRequestId()
new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup)
idx[j] >= 0
postAgg.getName().equals(topNMetricName)
IOException e
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
new DefaultPropertyNamePatternsMatcher(delimeters,"aaa","bbbb","ccccc")
resultEndpoint.setMinimumResultWaitTime(1000)
new String(text.getBytes())
64 * 1024 * 0124
System.currentTimeMillis()
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
TestSuiteEnvironment.getServerAddress()
capacity > 1 << 30
instance.managementService.unregister()
getSrcPath("checks/javadoc/Input_02.java")
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())
resource.removeExtractor(input.getId(),extractorId)
Object node
GatherGettersAndSetterProperties.gather(compiler,mainRoot)
mFileLength < mBlockSize
TestSuiteEnvironment.getServerAddress()
(System.currentTimeMillis() - lastAccessedTime.getTime()) > timeout
latch.await(10,TimeUnit.MILLISECONDS)
TEST_UTIL.getHBaseAdmin()
Preconditions.checkNotNull(path)
logger.info("Recording function information")
GL20.glUniformMatrix2(location,transpose,value)
statistics.addPutTimeNano(System.nanoTime() - start)
args.length > 1
timeout=600000
log.warn("Annotation scanning mode loaded {} type converters. Its recommended to migrate to @Converter(loader = true) for fast type converter mode.")
dirtyOutputBuffer()
Cloud.class
((Number)s.first()).intValue()
locator.getRegionLocation(regionName)
Preconditions.checkNotNull(worker)
size * 1.75f
ConcurrentHashMap<Url,Channel>
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())
ImmutableSet.of("testStringRepresentation")
mTestStream.getBytesFlushed()
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available))
Thread.sleep(200)
assertFalse(dr.isFailure())
item.getClass()
registry.put("myConf",new XmlConfiguration(getClass().getResource("/ehcache/ehcache-file-config.xml")))
return 400; 
log.info("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
a.entrySet()
asList(8L)
RuntimeGlue optionalGlue
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
Lists.newArrayListWithExpectedSize(resultMessages.size())
DEFAULT_SHUFFLE_PORT=11000
new JSONParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null),JSONParseSpec.JSON)
connection.remote().nextStreamId()
RedisOperations<Object,Object>
new Interval(startTime,endTime)
getNonCompilablePath("InputGenericWhitespaceEndsTheLine.java")
AcidUtils.getTableSnapshot(hive.getConf(),tbl,true)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
compressedProto.length < 340000
new ArrayList<>(4)
!returnValue
file.name().contains(".etc1")
T resource
id=7
GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)
attribute.split("\\.")
buf.clear()
keys.isEmpty()
this.categoryWithApiModel=categoryWithApiModel
Exception exception
context.getStreamCachingStrategy().getSpoolChiper()
o instanceof Attribute
element.getNodeName()
level <= RF_STATUS_LOW_SIGNAL
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
hasNextChunk()
i >= 0
calendar.getTimeZone().getDSTSavings()
new StringBuilder()
test("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
bundleContext.getBundle().getEntry(uri)
Thread.sleep(1000)
1
createRecord(value,expiryTime)
order.isCurrent()
"Invalid modules directory: " + modulesDir
return false; 
GL20.glUniform1(location,toFloatBuffer(v,offset,count))
new UnsupportedOperationException()
(Source)src
request.getLocalAddr()
BlockingQueue<BodyChunk>
json.toString(1)
assertEquals(expectedPlan,actualPlan)
bufferSize != minAllocSize
bLocations[0].getNames()
Generics.newHashMap()
id=16
capacity > 1 << 30
FilterModifWord.modifResult(result)
analysis.getTypeWithCoercions(aggregate)
region.getRegionId()
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
mapper.writeValueAsString(segment)
DirectMessage.constructDirectMessages(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json"))
format(conf,false)
SocketTimeoutException.class
put(TYPES,new MapTypeCaster(),Map.class,Double.class)
new ServiceActivatorContextImpl(batchBuilder)
IOException ignored
new Packet(ioService.getPortableContext())
Object node
uri.getPath()
registry.put("amazonSQSClient",clientMock)
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean")
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",GOOG_BASE_CLASS_ERROR)
endpoint.expectedMessageCount(1)
event.isResuming()
Object edge
globalExecutionStats.getSplits()
titleTextField.getText()
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
config.getMaxRedirects()
case BOLD: 
super.getClass()
Thread.sleep(20000)
ResponseImpl description(String description); 
Class.forName(className.replace('/','.'))
new HazelcastInstance[count]
z.next_in[z.next_in_index++] == 0
Integer.valueOf(p.getProperty(screenName + ".id"))
typeConverter.convertTo(XMLStreamReader.class,createNonXmlFilterReader(exchange,stream))
probeParentLoaderLast=true
(1L << n)
NSString value=(NSString)nsDictionary.get(convertKey(key)); 
BitSetUtils.class
promise.tryFailure(new ClosedChannelException())
Thread.sleep(200)
statistics.addGetTimeNano(System.nanoTime() - start)
assertEquals(expectedPlan,actualPlan)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000)
(Long)123l
new NullPointerException("the ast is null")
3 < buf.length - count
peekNode()
map.tryPut(key,value,8,TimeUnit.SECONDS)
Exception exception
serializer.statementResult(mockExecutionResult(map("node",node[0],"rel",rel[0],"path",path,"map",map("n1",node[1],"r1",rel[1]))),ResultDataContent.rest)
TestUtils.randomByte() + 127
GL20.glUniformMatrix2(location,transpose,value)
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } 
id=47
buffer.getInt8()
sb.toString()
status.isDirectory()
public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
currentlyProcessing.addCallback(callback)
attribute.getDefinition().getAttributeMarshaller()
Lists.newArrayList("timestamp","source")
new GetExecutionVariableInstancesCmd(executionId,variableNames,false,locale,withLocalizationFallback)
Collection<DelayedEntry>
hgraph.getMutualDegree(n)
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port))
singletonComponent == null
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(true)
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName())
type == VertexDataType.VertexBufferObject
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
"Using bind address: " + publicAddress
assertEquals(actualTables,expectedTables)
idAnnotation != null
MAX_PRETTY_PRINTED_PROPERTIES=4
builder120.build()
config.getClass().toString()
JoinFunction.class
path(11)
path.lastIndexOf("/") == 0
MessageFormat.format(TEMPLATE,metricsUri,pingUri,threadsUri,healthcheckUri)
GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))
new File(FilenameUtils.getBaseName(file) + "_dex2jar.jar")
webSocketProcessor.close(webSocket,0)
id=6
queue.poll(2,TimeUnit.SECONDS)
Color.fromRGB(0xABABAB)
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IOException {   return JSON.writeValueAsString(object); } 
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",true,false,false)
assertEquals("There should be no files",files.length,0)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)
HttpHeaderValues.IDENTITY.equals(targetContentEncoding)
log.error("Not updating metadata, existing state[%s] in metadata store doesn't match to the new start state[%s].",oldCommitMetadataBytesFromDb,startMetadata)
logger.debug("attempting to login")
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
selectedFile != null
nameDefinitionMultimap.keys()
new byte[13]
cSet.setConcept(this)
toHeapData(key)
classResolver.resolveClass(type)
emptyCheck.log(0,"msgKey",null)
container.getTimeFormat().equals(TimeFormat.DATE)
r.getRequest()
c.getSimpleName()
ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())
getMockEndpoint("mock:test.after.1").expectedMinimumMessageCount(10)
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)
cookies.columnMap()
report(n,MISPLACED_ANNOTATION)
configList.size() == 0
outputFile.lastModified() < grammarFile.lastModified()
Thread.sleep(100)
outputBufferProcessors=5
super(RowResolver.getCombinedRR(leftRR,rightRR),true,false,false,false,false,false,false,false,false,false); 
catalog.validateLanguagePredicate(null,"simple",detail.getSimple())
GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)
query.getDimensionSpec().preservesOrdering()
new SimpleDateFormat(format)
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
capacity > 1 << 30
item.getClass()
new DataSize(42,Unit.MEGABYTE)
mapServiceContext.hasRegisteredListener(mapName)
id=39
mock.expectedMessageCount(1)
Object node
model.getSelectedLayout() != null
ch == '?'
localX2 * cos
statistics.addRemoveTimeNano(System.nanoTime() - start)
scaleX == 0
new ObjectRecordWithStats(key,v)
ssl.has(CommonAttributes.CIPHER_SUITE)
length % dictionarySize
heartbeatTimeoutIntervalMs >= 0L
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)
i == -1
rs.getString(columnName)
type == TokenTypes.CLASS_DEF
BufferUtils.freeMemory(bytebuffer)
@InputIntMethodAnnotation(value=43)
GatherGettersAndSetterProperties.gather(compiler,externsRoot)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null),JSONParseSpec.JSON)
mWorkerId + BASE_FILE_NUMBER
index > templateTypes.size()
estimatedLength < 8
timeMillis - MILLIS_IN
rSocketMessageHandler.serverAcceptor()
type.getDeclaredConstructor(String.class)
DataStream<OUT>
Status.constructStatuses(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
-1
logger.warn("{} {}",errorCode,message)
"TcpIpConnectionManager configured with Non Blocking IO-threading model: " + inputThreadCount + " input threads and "+ outputThreads+ " output threads"
getClientConfig().getAddressList()
DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE)
@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapBaseTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println("nodeCount = " + nodeCount);     System.out.println("operations = " + operations);     System.out.println("keyCount = " + keyCount);     Config config=new Config();     config.getReplicatedMapConfig("test").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName="test";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key="foo-" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println("---------------------");           System.out.println("key = " + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println("value[" + j + "] = "+ map.get(key)+ " , store version : "+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } 
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroups(groups)
Map<Integer,Object>
items[28]
tempBlock.getCommitPath()
edge.setType(edgeDefault)
proxyServer != null
HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
FILES_BYTES * 1000L
getMapNearCacheManager(dataMember)
alluxioUri.getPath()
Files.delete(dir.toPath())
endFunction("delete_column_statistics_by_table: ",ret != false)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
role.description().get()
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())
new IdentityHashMap<>(values.length)
contact.GetWorldManifold()
LOG.info("Cannot access storage directory " + rootPath,ex)
LOG.error("OpenTracing: Failed to capture tracing data",t)
callTimeout=1000
scaleX == 0
person.getVoidReason()
allGroupingColumns.isEmpty()
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath")
findDelegate(name)
TIMEOUT_SECONDS=5
UserGroupInformation.getLoginUser().reloginFromKeytab()
metric instanceof MetricsRate || metric instanceof MetricsString
Thread.sleep(110)
reg.put(LDAP_CONN_NAME,getWiredConnection(ldapServer))
Primitive.longObjectMap(32)
retVal.put(entry.getKey(),value)
inner.innerSetException((Throwable)result)
start.set(Calendar.DAY_OF_MONTH,startMonth)
invoke(args.first(),(args=args.rest()).first(),args.rest())
request.getServletPath()
gradHidden3[nodeIndex]
System.identityHashCode(this)
relationship(18,c,"KNOWS",d)
addProperty(firstNode,"band","The Clash")
name.length() > 2
TfsShell.convertMsToDate(files[2].getCreationTimeMs())
GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,20000))
route.setDelay(5000)
doTestNegative(301,false)
response.set(ROLLED_BACK)
size * 1.75f
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(2)
hash == 0
binder.bindConstant().annotatedWith(Names.named("tlsServicePort")).to(8091)
version == null
file.getAbsoluteFile()
public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost){   configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);   return this; } 
Calendar.getInstance()
checkArgument(prestoTypeParameters.size() == fieldTypes.size())
new BranchedDataException(e)
assertMockEndpointsSatisifed()
contentLength > 0
implemetationMethodDescriptors.build()
task.cancel()
debug=false
f.getAttrs().getATime()
log.errorf("started ResourceAdapterService %s",context.getController().getName())
complete.expectedBodiesReceived("finish","stop","faulted","except")
messageHandler.serverResponder()
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
LOG.warn(e.getMessage())
ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)
id=4
@NonNull
factory.getEmbdeddedServletContainer()
m_data.rewind().forward((int)key_offset).getFixString((int)key_length)
conf.getSearchBaseURL()
TEST_UTIL.getHBaseAdmin()
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),"val-2")
assertEquals(expectedPlan,actualPlan)
unlockForRegularUsage()
len > bits.length
id=15807
assertEquals(expectedResponse,orig.getResponse())
TestSuiteEnvironment.getServerAddress()
!b.getAtmosphereResources().contains(r)
textProto.charAt(0) == UTF8_BOM_CODE
getTimeout()
registry.put("dummy",new ReactiveStreamsTestService("from-registry"))
mockRegionInfo.isMetaRegion()
assertEquals(expectedPlan,actualPlan)
config.getIdleConnectionTimeoutInMs() > 0
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
resetTimeInSeconds * 1000
javaBeanSerializer.getFieldValues(json)
new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))
addKeys(externalClasses,DATE,"org.joda.time.LocalDate")
maxSize > (used / 1024 / 1024)
maxSize > (used / 1024 / 1024)
engine.execute(query).toString()
uri.getPath()
GL20.glGetShader(shader,pname,params)
new File(value).getPath()
logger.debug("NODE {}: App version requested but version is unknown",this.getNodeId())
Outcome.match("missing database driver " + driverClassName)
Float.valueOf(encoding.substring(equalsPos + 1))
timeOut=30_000
that.getDomain() == null
nameTextField.getText()
JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,"Undecomposable expression")
setParams().nx()
obj.getAcceptableTokens()
ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())
public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
protocol.read(inputStream)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
private final String mPortKey; 
cached.get(columnNames)
request.getServletPath()
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
name.length() > 2
new RuntimeException("Invalid Column Reference: " + grpbyExpr.dump())
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
IOUtils.toString(stencilsetStream)
((Number)s.first()).intValue()
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
Pattern.compile(CURRENT_DIR)
logger.error("InfluxDB is not yet connected")
new CancelJobSupervisorOperation(name,jobId,jobOwner)
GatherGettersAndSetterProperties.gather(compiler,externsRoot)
assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)
context.var("long")
LOG.debug("Error while deserializing payload",e)
data + END
this.cli.jar("secure.groovy")
Thread.sleep(5000)
port >= 65535
free(path,false)
assertOpenEventually(countDownLatch,30)
adapter.getArgumentResolvers()
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString())
public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme){   realm().setScheme(scheme);   return this; } 
statistics.addGetTimeNano(System.nanoTime() - start)
controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
latch.await(100,TimeUnit.MILLISECONDS)
javaWriter.emitSingleLineCOmment("foo")
TimeUnit.SECONDS.toNanos(timeoutSeconds)
this.thrown.equals("File must exist")
mode == MODE_PULL_DOWN_TO_REFRESH
getJSDocTypeWithBraces(cp)
ExceptionUtils.getFullStackTrace(th)
public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
(JobFound)response
getTimeout()
final PkgControl root=ImportControlLoader.load(new File(getPath("import-control_WithNewElement.xml")).toURI()); 
logger.debug("rapidRefreshFutureEnd stopping")
SpringApplication.class
gen.generateParser()
JavaDocTagContinuationIndentationCheck.class
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
taken > 90
typeConverter.convertTo(XMLStreamReader.class,stream)
Integer.valueOf(st.nextToken())
getPreferences().store(fos,"")
coreThreads.asString()
grammar.getTokenNames()
params.getInt("numPages")
e.getMessage()
assertEquals(11,visitor.getConditions().size())
getConfiguration().getConnectionFactory()
hz1.getLifecycleService().terminate()
routeList == null
List<Stats>
put.writeToWAL()
resources.size() <= maxSuspendResource.get()
getSwaggerType(swaggerModel.getAdditionalProperties())
factory.getProxy()
entry.getCompleteStore()
"value".equals(key)
Multiset<String>
mBlockStream.remaining()
testClosureFunction("goog.isArray",ALL_TYPE,ALL_TYPE,ALL_TYPE)
max=20
name.substring(0,name.length() - 1)
zController.sendData(doRequestStop())
new byte[10]
Bytes.toBytesBinary(tableNameOrRegionName)
new SemanticException(TYPE_MISMATCH,node,e.getMessage())
webSocketConnection.getRemote().sendString(s)
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval
OrderedMap.class
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING)
assertEquals(2,props.getDisabledPlugins().length,2)
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
GatherGettersAndSetterProperties.gather(compiler,mainRoot)
failure.getCause()
Exception exception
mListView.getChildAt(index)
Utilities.isMac()
mTfs.free(mTfs.open(path))
incomingMessage.getMessagePayloadByte(0)
counter + 2
getCompletePredicate()
assertEquals(response.getStatusCode(),301)
mouseEvent.getModifiers()
Integer.valueOf(patchVersionString)
articleMgmtService.addArticle(requestJSONObject)
Multimap<Feature<?>,Feature<?>>
logger.debug("NODE {}: App version requested but version is unknown",this.getNodeId())
4 * Constants.KB
HashMap<String,Operator<? extends Serializable>>
override.toString()
-120
logger.info("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
GenericIntegrationTest.class
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)
conf.getSearchBaseURL()
id=15853
factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
instance2.getLifecycleService().terminate()
factory.getEmbdeddedServletContainer()
host.getHostText()
@ConditionalOnEnablednHealthIndicator("jms")
new SimpleCanalConnector(address,username,password,destination,null)
new S3DataSegmentMover(mockS3Client)
component.setMaxThreads(11)
getRegistry().put("myFilter",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )
TestSuiteEnvironment.getServerAddress()
stopWatch.taken() < 100
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,aggregationAnnotation.approximate(),factory)
processDefinition.getTenantId() == null
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
sendCommand(CLIENT_SETNAME)
LOG.error("XMLStreamReader {} not supporting Location")
@Path(PATH_NODE_INDEX_ID)
getMockEndpoint("mock:" + i).expectedMessageCount(1000)
registry.put("eventBus",new EventBus())
calendar.getTimeZone().getDSTSavings()
(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
mock.expectedMessageCount(1)
CalciteTests.createMockSystemSchema(druidSchema,walker)
cam.near=0.1f
statistics.addGetTimeNano(System.nanoTime() - start)
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
Parameter.forConstructor(errorHandler,fastConstructor)
id=32
new Path(testBucket.getParent(),".test-2.inprogress").toString()
expectedCountsForADoc(weights,ind)
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
logger.debug("attempting to login")
mock.expectedMessageCount(3)
status.isDirectory()
m.isCacheValue()
(short)0644
twitter.getHomeTimeline()
cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)
model.getCurrentResult() != null
request.getContentType().equals("application/x-www-form-urlencoded")
GatherGettersAndSetterProperties.update(compiler,externs,root)
Integer.valueOf(p.getProperty("numberid.id"))
timeout=30000
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)
capacity > 1 << 30
-1
privObj.getObjectName().equals("masking_test_druid")
data.getBytes()
targetClass != null
CompletableFuture<Boolean>
AdviceWithTasks.removeByType(route,type,selectFirst,selectFirst,selectFrom,selectTo,maxDeep)
if (mCheckUnusedThrows) {   processImport(aAST); } 
status.getCreationTimeMs()
put.writeToWAL()
GatherGettersAndSetterProperties.gather(compiler,externsRoot)
Object node
mFs.mkdirs(new Path(path),null)
mTfs.getFile(fileId)
assertEquals(counter,1)
booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,"Experimental: Use dynamic schedule for grouped execution when possible",false,featuresConfig.isDynamicScheduleForGroupedExecutionEnabled())
case QUIT: 
new BindException(concept,"concept")
zk.exists(znode,false) != null
log.debug("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",1,SECONDS)
ret == null
statistics.addGetTimeNano(System.nanoTime() - start)
/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractACLCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrp";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return "chgrp <group> <path>";   } } 
new UnsupportedOperationException()
new IllegalStateException()
new ModelNode().set(10)
new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null,null)
w.println(padding)
true_parts.addAll(Hive.get().getPartitions(tab))
DEFAULT_BLOCK_SIZE=10
configureAtmosphereInterceptor(sc)
return false; 
new IncrementalIndexSegment(rtIndex)
attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()
uncompressedProto.length < 1000000
i == -1
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
user.getSystemId() == null
!ufsSyncChecker.isDirectoryInSync(parentUri)
((StringLiteral)literal).getSlice()
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } 
heatpumpValues[65]
Assert.assertEquals(3,visitor.getConditions().size())
Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))
this.thrown.equals("File must not be null")
isCancelled0(result)
engine.execute(query).toString()
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class)
id=19
condition.isEmpty()
getStreamNode(iterationHead)
Thread.sleep(500)
mWorkerId + BASE_FILE_NUMBER
soLingerTime.toSeconds()
client.srandmember(key)
capacity > 1 << 30
public DerivedBuilder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
requestModels.entrySet()
LOG.error("Node " + path + " already exists and this is not a "+ "retry")
cache.remove(key,true)
new byte[19]
obj.getAcceptableTokens()
(ChronicleEngineEnpoint)getEndpoint()
record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
XMLInputFactory.newFactory()
filteredData.addAccessRestrictedResource(absoluteChildAddr)
sizeNeeded >= items.length
nodeEngine.getService(LockService.SERVICE_NAME)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
!mPreferredHost.equals("localhost")
isHandshaking(clientResult) && isHandshaking(serverResult)
sanitizedName(name)
@Override public ResponseImpl headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
-1
row("p_comment",null,1.0,0.0,null,null,null)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
createPermissionsXmlAsset(new JndiPermission("*","lookup"))
mock.expectedMessageCount(1)
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
callTimeoutMillis=3000
log.trace("Failed to deploy!!")
Optional.of(resourceManagement.getStats())
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL)
conf.getSearchBaseURL()
DefaultFileSystemMaster.class
logger.error("table: {} column: {}, failed convert type {} to {}",columnName,value,sqlType)
buffer.nextOneRow(changeColumns)
Object key
ctx.nextOutboundMessageBuffer()
mock.expectedMessageCount(2)
new MockResponse().setBody("A").setSocketPolicy(SHUTDOWN_INPUT_AT_END)
asyncWriteFuture.cancel(true)
expression.length() - 2
routes.InputsResource()
Objects.isNull(value)
Thread.sleep(3000)
tabAlias.equals(tableAlias)
new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())
logger.error("InfluxDB is not yet connected")
getRedeliverDelay()
LOG.error("PriviledgedActionException as:" + this + " cause:"+ cause)
new EntryEvent(packet.getName(),(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
importedClassIndex.isEmpty()
Assert.assertTrue(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
statistics.addPutTimeNano(System.nanoTime() - start)
Object node
new GdxRuntimeException("Failed to read Vorbis.")
hasNextChunk()
this.vertices.containsKey(node) || this.chainedTasks.containsKey(node)
assertFalse(dr.isFailure())
deployOneTaskProcess()
logger.error("Error getting value for expression " + expressionField.getExpression() + " "+ e.getMessage())
GL20.glGetActiveUniform(program,index,256,typeTmp)
dimensionsSpec.getDimensions()
getBinaryTupledSet()
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
connection.setFollowRedirects(httpRequest.getFollowRedirects())
qp.getExclusiveMaximum()
Integer.valueOf(quantifier)
from("direct:b").delay(3000)
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "goog.require('a.b');\ngoog.require('a.c');\n\n")
new ModelNode(10)
/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, "Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ..."  */ @VisibleForTesting static class UnrecoverableS3OperationException extends RuntimeException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format("%s (Path: %s)",cause,path),cause);   } } 
sendCommand(CLIENT_LIST)
Assert.notNull(groupId,"ArtifactId must not be null")
factory.getSemaphore(packet.name)
public class Arial extends FontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
registry.put("myConfigurer",configurer)
to("bar")
RawUDPInput.class
UnavailableException e
log.debug("PID contains identifier with no assigning authority")
GL20.glUniform2(location,v)
THREADS_PER_CLIENT=8
new Thread()
ImmutableList.of(qmark,bang)
new StringBuilder()
size=1f
@Override protected BlockBuilder getBlock(){   return blockBuilder; } 
boolean injvm() default false; 
InputStream is=IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile)
ch == '&'
nodeEngine.getPartitionService()
uncompressedProto.length < 2500000
Integer.class
edgeData.getAttributes() == null
IOUtils.closeQuitely(is)
ArrayList<TaggedWord>
Vector<>
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
KeyValueStoreTest.class
invoke(args.first(),(args=args.rest()).first(),args.rest())
Object node
id == null
-1
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
new DatagramDnsQuery(addr,null,1)
Assert.assertEquals(19,as.getAllGlobalProperties().size())
addOrGetIndex(definition.getKey(),definition.getValue())
left.getQualifierLength()
-1
logger.error("Error connecting to Plex",e)
metricName.getName()
mFixedExecutionService.shutdown()
fileInfo.getPath()
Color.fromRGB(0x41CD34)
CellUtil.estimatedHeapSizeOf(c)
DefaultManagementAgent.class
this.thrown.equals(IllegalStateException.class)
saHooks != null
"memberOf".equalsIgnoreCase(attribute.getId())
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
ImmutableList.of(listeners)
Status.constructStatuses(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort())
!tmp.exists() && !tmp.isDirectory()
registry.put("connectionFactoryMock",connectionFactoryMock)
response.set(ROLLED_BACK)
public class ArialBlack extends FontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
new BinaryWebSocketFrame(payload)
in.readObject()
stopwatch.elapsedMillis()
offset=e.startOffset
assertEquals(activeEmployees,values.size())
return context; 
response == null
assertEquals(6358482,received.get(0)[1])
assertEquals(0,counter.get())
getTimeout()
DirectMessage.constructDirectMessages(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
keys.isEmpty()
GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)
nodeEngine.getPartitionService()
new InputStreamReader(bais,StandardCharsets.UTF_8)
Exception exception
logger.error("Configuration for influxdb not yet loaded or broken.")
assertFalse(jmsTemplate.isPubSubDomain())
annotation == OriginalType.MAP
clockSource.elapsedMillis(startTime,now)
new Histogram(10,100,1000,10 * 1000,100 * 1000)
new ClusterConfiguration(name,logging.getMessagesLog(ClusterConfiguration.class),Collections.singleton(boundAt))
Attribute attribute=(Attribute)o; 
new UnsupportedOperationException()
hashFunction.hashBytes(littleEndian)
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeStage().getLabel(),targetStage.getLabel())
config.getStorageImpl()
executor.submit(new NamedRunnable("OkHttp Window Update %s stream %d",hostName,streamId){   @Override public void execute(){     try {       frameWriter.windowUpdate(streamId,unacknowledgedBytesRead);     }  catch (    IOException ignored) {     }   } } )
loadMetadataSuceeded=true
assertTrueEventually(new AssertTask(){   @Override public void run(){     getStats(client,clientEngine);   } } ,STATS_PERIOD_SECONDS * 3)
GL20.glUniformMatrix4(location,transpose,value)
historicState(item,timestamp)
Assert.notNull(jarScanner,"Patterns must not be null")
indexOutURI.getPath()
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionValues)
Assert.assertEquals(select.size(),1)
Map.class
Map<K,? extends V>
columnType.equalsIgnoreCase("long")
Outcome.match("missing database driver " + driverClassName)
new ArrayList<>(modifiers.length())
ufsPath.getPath()
offset(1.0)
UIPasteboard.getGeneral()
LOG.info("Getting asynchronous method stub from channel")
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new ModelNode().set(600000)
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws Exception {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=false
getTokenNames()
mapper.getJsonFactory()
context.getStreamCachingStrategy().getSpoolChiper()
assertEquals(actualTables,expectedTables)
logger.info(sb.toString())
constructor.getTypeParameters()
mock.expectedMessageCount(4)
AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),3)
state.isGloballyTerminalState()
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
LOGGER.error("no property for " + type + ", "+ format)
c * b
newEmbeddedDatabaseBuilder(path)
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName())
target.setField(0,val2)
getSrcPath("checks/javadoc/Input_02.java")
ctx.sendDownstream(e)
client.get(path)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
new CacheCreateConfigOperation(config,true)
mTfs.mkdirs(new TachyonURI(dirPath))
DEFAULT_SHUFFLE_PORT=8080
isTouched(0.75f,1)
dataFormatModel.setLabel(row.get("description"))
rowsRet <= 0
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ Cell deepClone(); 
Context.getProviderService().getAllProviderAttributeTypes(false)
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
framework.getBroadcasterFactory().lookup(a.broadcaster(),true)
methodsToImplement(methods)
assertClusterSize(2,nodes[0])
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractACLCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
out.writeObject(entry.getValue())
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)
log.info("Performing lookup: %s --> %s",ips,retVal)
IOException.class
T
SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
processor.open(w,request)
entry.getValue().health().compose(this.timeoutCompose)
ReactiveHelper.scheduleLast(runnable,"Multicast next step")
new Date(0)
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
log.trace("Failed to deploy!!")
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)
@Converter
entry.getCompleteStore()
Sets.newHashSet()
LOG.error("OpenTracing: Failed to capture tracing data",t)
results.expectedMessageCount(2)
preloadQueue.size == 0
HBaseFsck.class
new IllegalStateException()
final Prototype testedPrototype
current.getLabel().startsWith("nt") && !pre.getLabel().startsWith("nt")
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
tFAgentStatMappter.map(agentStatBo)
request.getTaskDefinitionKey()
ch.unsafe().flushNow()
interceptors.addFirst(newAInterceptor(a))
ttl > 0
promise.setFailure(cause)
new RagManager(tm)
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),12,FontStyle.Plain,true)
timeout=600000
timePassed >= 1000
toHeapData(key)
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)
Metric<Integer>
keys.isEmpty()
indexFile.exists()
mMountTable.resolve(getPath(next)).getPath()
id=30
Endpoint server
capacity > 1 << 30
this == NtiOnly
args.length == 3
LOG.info("Set the current default database as [{}] in the current default catalog [{}].",currentCatalogName,currentDatabaseName)
start.expectedMessageCount(6)
sr0.getValue().f1
InterruptedException e
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
c.getName()
CliBroker.class
clazz.getInterfaces().length <= 0
Exception exception
Status.constructStatuses(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())
customerResourceLocator(url)
resultEndpoint.setResultWaitTime(1000)
i < 1000
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",false))
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,false)
mapper.getJsonFactory()
new AuthenticationException("Error validating LDAP user")
new SimpleAttributeDefinitionBuilder(CommonAttributes.NAME,ModelType.STRING,false).setXmlName(Attribute.NAME.getLocalName()).setAllowExpression(true)
statistics.addPutTimeNano(System.nanoTime() - start)
new StringBuilder(247)
Throwable t
executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
v.getCreationTime() + timeToLive > now
details.put(CONFIG_HASH_KEY,currentConfigHash)
mock.setResultWaitTime(3000)
complexColumnCache.values()
options.needsTranspilationFrom(ES7)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
items[16]
assertEquals(3,historyServer.getServices().size())
URIStatus::getBlockSizeBytes
reg.put("localhost:" + port,ctx)
LOG.error("Unable to unmarshall exception content",e)
argumentCount.isValidCount(actualCount)
Object edge
statistics.addGetTimeNano(System.nanoTime() - start)
it.next().hasFinished()
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); 
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))
typeConverter.convertTo(XMLStreamReader.class,stream)
subProperties.put(subName,value)
titleLabel.getPrefWidth()
new IllegalStateException()
GatherGettersAndSetterProperties.gather(compiler,externsRoot)
getOrCreateContainer().unlock(dataKey,caller,threadId)
engine.execute(query).toString()
from.getClass()
child.getParent()
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } 
engine.execute(query).toString()
getUrl().getMethodParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)
providers.size() >= 0
logger.info("Strip code")
stopwatch.elapsedMillis()
final Prototype testedPrototype
c.getDomain() == null
msg.offset()
i < uri.length() - 2
getSessionTimeout().toMinutes()
assertEquals(503,cause.getStatusCode())
index <= next
callTimeoutMillis=3000
Assert.assertEquals(3,providers.size())
before != after
n.getNodeData().getLabel().toLowerCase().contains(str)
mTfs.createFile(new TachyonURI("/root/testFile1"))
request.getRequestURI()
ApiConsumerHelper.findMethod(endpoint,this,log)
this.thrown.equals("File must not be null")
Math.min(1000L,connectionTimeout)
name="org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3"
RuntimeException.class
exportReturnCodes(exporter)
4 * (float)Math.sqrt(radius)
value={XSSHtmlFilter.class}
(long)y & 0xFFFFFFFL
logger.warn("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
this(type,0); 
grammar.getTokenNames()
docData.charAt(0) == 65279
new ClusterConfiguration("clusterName",StringLogger.DEV_NULL,initialHosts)
lookupService.lookupPrincipalByGroupName(user)
EmitterProcessor.create(1)
await().atMost(5,TimeUnit.SECONDS)
i >= 0
logger.warn("{} {}",errorCode,message)
mMountTable.resolve(getPath(dir)).getPath()
private final Action reloadAction; 
imageUrl.length() >= MAX_FILE_NAME_LENGTH
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     int n1=o1.width > o1.height ? o1.width : o1.height;     int n2=o2.width > o2.height ? o2.width : o2.height;     return n2 - n1;   } } ,0,inputRects.size)
json.length() - 2
Object.class
VERBOSE=true
Long.valueOf(args[2])
TfsShell.convertMsToDate(files[1].getCreationTimeMs())
LOG.info(rootPath + "is not a directory")
Sets.difference(liveQueries,queryIdsSnapshot)
Throwable t
id=5
CamelCloudServiceCallConfiguration.class
scheduler.scheduleRecurring(indexPopulation,countInvocationsJob,1,MILLISECONDS)
LOG.isInfoEnabled()
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,numSubtasks,subtaskIndex)
ObjectHelper.isEmpty(configuration.getClusterService())
DataStream<OUT>
(getSource().x() + getTarget().x()) / 2f
LOG.info("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
cs.getMetaData()
assertOpenEventually(latch,3)
System.currentTimeMillis() + start
option.getType()
from("direct:start").transform(body().append(" World")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to("mock:foo").delay(500)
1024 * 1024 * 14
length % dictionarySize
logger.error("Error connecting to Plex",e)
constructors[TXN_REMOVE_ALL]
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
raw.getParameters()
nameDefinitionMultimap.keys()
new byte[13]
Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
logger.info("Moving functions + variable into deeper modules")
new Path(bucketPath,"part-" + i + '-'+ j).toString()
dstPath.getPath()
response.setHeader(WWW_AUTHENTICATE,value)
((VarcharType)type).getLength()
parent.getRegionName()
from("direct:a").delay(500)
new TypeResolver(arrayListOfString)
AbstractBootstrap<ServerBootstrap,ServerChannel>
new AnnotationNode()
new ModelNode().set(240000)
id=15854
serverQueue.add(holder)
NettyAsyncHttpProvider.class
Sets.<Integer>newHashSet()
Bytes.toBytesBinary(tableOrRegionName)
System.nanoTime()
showTooltip == null
mapConfig.getTotalBackupCount()
sourceNodeData != null
-1
controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
GatherGettersAndSetterProperties.update(compiler,externs,root)
registry.put("myConfigurer",configurer)
getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)
Color.fromRGB(0x7B2FBE)
context.registerSubsystem(SUBSYSTEM_NAME,1,0)
writeLock()
hz1.getLifecycleService().terminate()
Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)
c.write("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false)
buffers[offset]
@ConditionalOnEnablednHealthIndicator("rabbit")
private static final Configuration config=HBaseConfiguration.create(); 
new S3DataSegmentMover(mockS3Client)
touchEventPool.free(touchEvents)
new IllegalStateException("Unexpected number of values for entry:" + entryValues)
statistics.addPutTimeNano(System.nanoTime() - start)
String text
HashMap<String,ASTNode>
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws IOException {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
private ErrorWrapperEmbeddedServletContainerFactory filter=new ErrorWrapperEmbeddedServletContainerFactory(); 
cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)
JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,parent.fullName())
GL20.glUniform2(location,v)
Map<String,String>
edge.setType(type)
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource)
Foundation.NSLog("[info] " + tag + ": "+ message)
BeanMapper.mapList(books,Book.class,BookDto.class)
100
Long.valueOf(args[2])
!handler.isDifferent(existing)
container.getAttributeModel().getNodeTable()
LOG.warn("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
mWorkerId + BASE_FILE_NUMBER
public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
logger.error("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
header.writeBytes(mask)
assertThat(getField(graphite,"port")).isEqualTo(8080)
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
Object edge
rs.getString(columnName)
id=15849
controller.getState() != ServiceController.State.UP
value.getType().getCanonicalName()
AttributeUtils.getDefault().getMin(column,valuesArray)
i > BY_DYE_DATA.length
Integer.valueOf(matcher.group(1))
Expression.eq("searchable",format)
msgType <= values.length
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)
d.setMajorVersion(1)
InputProcessor[]
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
Gauge<Object>
globalExecutionStats.getSplits()
message + END
serverSocket.setReuseAddress(false)
dis.read(serializedData,0,length)
assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(1)
new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true)
processor.open(w,request)
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
CompletableFuture<Boolean>
util.getDataTestDir(table)
FloatBuffer target
websocketComponent.setMaxThreads(11)
invocation.addAttachmentsIfAbsent(context)
pti.getTotalFields()
Assert.assertFalse("reload-required".equals(result.get(RESPONSE_HEADERS).get(PROCESS_STATE).asString()))
id=41
DiagnosticType.warning("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
numConnections=5
jmsManager.destroyTopic(name)
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.TERADATA)
runOTIafterNTI=false
Gdx.files.internal(fileName).nameWithoutExtension()
Assert.assertEquals(20,as.getAllGlobalProperties().size())
field.getFieldName().equals(s)
Preconditions.checkNotNull(mBlockIdsOnTiers)
@ConditionalOnEnablednHealthIndicator("db")
terms.facetFilter(standardFilters(range,filter))
public DerivedBuilder setProxyPassword(String password){   this.proxyPassword=password;   return this; } 
Thread.sleep(1000)
UnmodifiableIterable<T>
findDelegate(name)
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
julLogger.info("Hello world")
hz1.getLifecycleService().terminate()
rj.mapProgress()
conf.setInt("hbase.hregion.memstore.block.multiplier",10)
row("p_comment",null,1.0,0.0,null,null,null)
assertEquals(expectedPlan,actualPlan)
type == TokenTypes.CLASS_DEF
new UnsupportedOperationException("This should never happen.")
System.currentTimeMillis()
Long.valueOf(args[2])
isTouched(0.75f,1)
timeout=30000
GL11.glGetInteger(pname,params)
mock.expectedBodiesReceived("B+END","A+END")
new CustomChangeException("Failed to insert one or more concept map types")
DataStream<OUT>
logException(id,exception)
outList.size()
routes.UsersController.index()
new LwjglPreferences(name)
node1.checkTreeTypeAwareEqualsSilent(node2)
mWorkerId + BASE_FILE_NUMBER
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10L)
assertEquals(expectedPlan,actualPlan)
threads.isEmpty()
this == NtiOnly
log.info("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
new Long(3)
headerRow != null
connection.zrangeByLex(key,max,min)
streamTokenizer.ttype == StreamTokenizer.TT_WORD
BlockMasterClient.class
serverQueue.add(holder)
createConfig()
floatBuffer.clear()
len > 0
node.getLifecycleService().terminate()
new LwjglPreferences(name)
(outputFolder + File.separator + apiFolder).replaceAll("/",File.separator)
Threads.sleep(2000)
endpoint.getConnectionFactory()
logger.debug("defineClass pluginClass:{} cl:{}",className,classLoader)
startServer()
transactionalMap.put(key,value)
prop.getParamName()
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
JSError.make(REPORT_PATH_IO_ERROR,reportPath)
id=15
GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))
model.getModelName()
expiresOn == null
mock.expectedMessageCount(2)
analysis.getTypeWithCoercions(windowFunction)
context.restartRequired()
req.getServletPath()
new StringBuilder(741)
InputProcessor[]
contentType != null
colorModeClass.equals("ScaledSizeMode")
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-xml-","websocket-servlet-")
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new UnsupportedOperationException()
Exception e
InetAddress.getLoopbackAddress()
DelimitedRecordHiveMapper.class
HashSet<String>
BIG_ENOUGH_INT + 0.5
l.onSuspend(request,response)
id=15866
location.belongTo(BlockStoreLocation.anyTier())
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)
new RefProperty(existing)
/**   * Returns messages older than the message ID specified as a numeric string. This is useful for paginating messages. For example, if you're currently viewing 20 messages and the oldest is number 2912, you could append "?olderThan=2912″ to your request to get the 20 messages prior to those you're seeing.  */ private Integer olderThan=-1; 
Arrays.asList("Int","Float","Double","Bool","Void","String","Character")
littleEndian.order()
assertEquals(1,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
getLog().error("register druid-driver mbean error",ex)
logger.error("Error connecting to Plex",e)
T
assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7)
registry.put("myManager",cacheManager)
new String(bytes2)
hgraph.getMutualDegree(n)
tableInfo.getType()
bits2[1] == false
to("direct:foo")
s.contains(a.getName())
List<ConformanceConfig>
gen.get().document()
n.intValue()
new HTable(TABLE)
memoryReservation.getAndAdd(bytes)
row1 * layerTileHeight
new StringBuilder(674)
1000L * FILES_BYTES
public class XpathRegressionJavadocVariableTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='age']/MODIFIERS/LITERAL_PRIVATE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=JavadocVariableCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionJavadocVariableTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(JavadocVariableCheck.class);     final String[] expectedViolation={"6:9: " + getCheckMessage(JavadocVariableCheck.class,JavadocVariableCheck.MSG_JAVADOC_MISSING)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionJavadocVariableTwo']/OBJBLOCK" + "/CLASS_DEF[@text='InnerInner2']/OBJBLOCK/VARIABLE_DEF[@text='fData']/MODIFIERS" + "/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
connection.pexpire(key,millisecondsTimestamp)
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
ResponseImpl example(String type,Object example); 
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
isSdkLocationValid(sdkLocation)
private static class TestException extends Exception {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
new RuntimeException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
value.isEmpty()
timeout(1000)
1
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","strike","strong","sub","sup","u","ul")
mapConfig.getTotalBackupCount()
nodeString()
LOG.error("register druid-driver mbean error",ex)
statistics.addPutTimeNano(System.nanoTime() - start)
new KafkaComponent()
executor.scheduleWithFixedDelay(this,period,period,unit)
new AndroidFiles(this.getService().getAssets())
Assert.assertEquals("Wrong messages count: " + messages.size(),messages.size(),1)
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")
reg.getCounters(transformFilter(filter))
? extends Exception
util.getDataTestDir(table)
"streams:" + filter
config.getServerNumThreads()
Long.valueOf(timeout)
report(n,MISPLACED_ANNOTATION)
config.isAutoRead()
input.size()
@Override public ResponseImpl example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } 
REMOVALS_UPDATER.compareAndSet(this,nanos,duration)
log.debug(message,exception)
mf.filter(r,message,transformed.message())
incomingDir.exists()
ImmutableSet<ImplemetationMethodDescriptor>
coreThreads.asString()
new InstrumentedTimingCollector(Metrics.defaultRegistry(),Database.class)
node.getLifecycleService().terminate()
Assert.assertEquals("Recall outside target range",0.6924,r,0.001)
KeyValueHolder<RouteContext,Processor>
val=1
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
assertEquals(70011,exchange.getIn().getBody().toString().length())
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n"+ "Checkstyle ends with 2 errors.%n")
flags.length == 0
field.getRawType()
tableMetadataBuilder(TPCH_SCHEMA_NAME,TPCH_ORDERS_NAME).column("orderkey",LONG).column("custkey",LONG).column("orderstatus",STRING).column("totalprice",DOUBLE).column("orderdate",STRING).column("orderpriority",STRING).column("clerk",STRING).column("shippriority",STRING)
r.getRequest()
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
new Histogram(10,100,1000,10 * 1000,100 * 1000)
version == null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
resultEndpoint.expectedBodiesReceived("one","three")
Site.me().setRetryTimes(3).setSleepTime(0)
edge.setType(edgeDefault)
getTimeout()
HashMap<Object,AggregationStrategy>
mTestStream.getBytesFlushed()
ppcY / 2.54f
new PoolBagEntry(null,pool)
logger.info("Session destroyed")
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
@Overridee
n.isArrayPattern()
subtypeProps.isEmpty()
inputProcessor.touchDown(event.x,event.y,event.pointer,Buttons.LEFT)
@InputIntMethodAnnotation(42)
getJSDocTypeWithBraces(cp)
findDelegate(name)
i < end
element.getNodeName()
new StringBuilder(254)
execution.getJobs().remove(this)
new JedisClusterCommand<Set<String>>(connectionHandler,timeout,maxRedirections){   @Override public Set<String> execute(  Jedis connection){     return connection.spop(key,count);   } } 
mTfs.getFile(fileId)
NoObjectType noResolvedType=new NoResolvedType(this); 
new PriorityTieredBrokerSelectorStrategy(1,1)
clientConfig.property(ClientProperties.READ_TIMEOUT,1000)
((VarcharType)type).getLength()
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",true))
Status.constructStatuses(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
handlers[0] == null
pixmap.drawCircle(x,y,radius,color)
hz1.getLifecycleService().terminate()
retry.attemptRetry()
patientState.getState().getId()
rSocketMessageHandler.serverResponder()
new RuntimeException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
1000 * 1
mWorkerId + BASE_FILE_NUMBER
100
getUrl()
batteryVp >= medium
Setting<Long>
return false; 
assertEquals(301,status.getStatusCode())
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",true))
in.readObject()
TimeUtils.nanoTime()
items[29]
reg.put("localhost:" + port,ctx)
map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)
LOG.warn("Failed to send receipt of data to worker {} for request {}: {}.",mAddress,mReadRequest,e.getMessage())
matcher.groupCount() > 0
LOG.debug("Consumer subtask {} is trying to discover new partitions ...")
region != null
agg.setBatchTimeout(1000L)
new DynamicAwareEntry("http4://localhost/test",null,null)
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
VERSION=0
StringBuilder sb=new StringBuilder(64); 
statistics.addRemoveTimeNano(System.nanoTime() - start)
DataStream<OUT>
isTestOnBorrow()
expiresOn == null
writeLock()
factory.getEmbdeddedServletContainer()
bodyParts != null
titleTextField.getText()
future.get(10,TimeUnit.SECONDS)
factory.getEmbdeddedServletContainer()
pti.getTotalFields()
@UriParam(label="producer",defaultValue="1") private Integer requestRequiredAcks=1; 
new StringBuilder(167)
Exception exception
getConnectionFactory()
ufsDeleter.delete(alluxioUriToDel,delInode)
message.getFormattedFields()
mock.expectedMessageCount(0)
CompletableFuture<Boolean>
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)
qs.isEmpty()
GL20.glUniform3(location,v)
min1 < min2
Values.UPGRADE.equalsIgnoreCase(connection)
AtmosphereRequest.class.isAssignableFrom(request.getClass())
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
coreThreads.asString()
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.REMOVE)
Y
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))
element.getNodeName()
new ChronicleEngineEnpoint(uri,this,configuration)
assertEquals(actual,expected)
/**   * <code>CONCAT_AGG</code> aggregate function.  */ public static final SqlConcatAggFunction CONCAT_AGG=new SqlConcatAggFunction(); 
request.getServletPath()
conf.getSearchBaseURL()
nextRequest(request,future)
sizeNeeded >= items.length
req.getRequestURI()
allowedIdentifiersCheckDigits[i]
intbuf.get()
inbound.isEmpty() && inbound.hasByteBuffer()
test("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
Long.valueOf(args[1])
bits2[0]
SSL.getErrorString(err)
ExceptionUtils.firstOrSuppressed(collectedExceptions,e)
mStack.size() > 2
ServiceHelper.startService(jmx)
war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),"web.xml")
log.error(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
vizConfig.isShowArrows() && dataBridge.isDirected()
ActionsEnum.valueOf(action)
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
registry.put("groovyShellFactory",groovyShellFactory)
IOUtils.toString(stencilsetStream)
capacity > 1 << 30
executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
logger.info("Moving functions + variable into deeper modules")
logger.info("Return Object {} now at size {}",b,count.getAndDecrement())
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group,e)
inputPath=args[1]
assertEquals(12,url.getPort())
LOG.info(getName() + " caught: ",e)
assertEquals(8,lm.getFields().size())
Exception e
Latkes.getStaticPath()
report(n,MISPLACED_ANNOTATION)
LOG.warn("Requesting TaskManager's path for query services failed.",throwable)
filteredData.addAccessRestrictedResource(absoluteChildAddr)
MockReset.before()
globalExecutionStats.getSplits()
!first
ImmutableSet<ImplemetationMethodDescriptor>
response == null
response.getResponseBody().isEmpty()
timeout=120000
log.error("Metric=[%s] has no StatsD type mapping",statsDMetric)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
cr.session_timeout_ms != 0
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
super.createDataFormat(camelContext)
conceptAnswer.getConcept()
contentType != null
julLogger.info("Hello world")
mock.expectedBodiesReceived("Hello World")
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
multiValueRow.get(1)
callerPrincipalCallback == null
NUMBER_OF_IDS_PER_THREAD=400001
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
complexColumnCache.values()
assertClusterSize(2,nodes[0])
elementName=options.get(ARRAY_NAME)
clusterService != null
ImmutableMap.of(columnFamily,mutations)
Boolean ignored
new String(bytes2)
body[0][0][0]
partProps.size()
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)
DiagnosticType.error("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
a.length >= count()
i < 20
final Object firstLineKey=lines.firstKey(); 
Assert.assertEquals(msg,"Unexpected token type: methodStub")
deployOneTaskProcess()
new SctpMessage(streamIdentifier,protocolIdentifier,unordered,msg.retain())
Preconditions.checkNotNull(timer)
factory.getEmbdeddedServletContainer(initializers[0],initializers[1])
file.getAbsoluteFile()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
hz.getCluster().getLocalMember().isSuperClient()
assertEquals(2,possibleOutcomes.size())
new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions1,keyPositions2,keyClasses,memoryManager,ioManager,this,availableMemory)
mTfs.ls(Constants.PATH_SEPARATOR,true)
Throwable t
final PkgControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
requestReceived.await()
new ResultSetIterator(generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
file.getFileName()
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcOperations namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
items[32]
logger.error("InfluxDB is not yet connected")
uri.getPort() == -1
PathUtils.concatPath(src,child)
item.getClass()
superClass == Object.class
dbCollection.save(clusterEvent)
hz1.getLifecycleService().terminate()
factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)
defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))
grammar.getTokenNames()
eq(0)
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
put(v)
logger.debug("Requsting URL {}",url)
mock.expectedMinimumMessageCount(3)
Thread.sleep(100)
taskOutput.getState().isDone()
registry.put("amazonSQSClient",clientMock)
assertThat(response).isEqualToIgnoringCase("Woop woop. yay\n")
LOG.warn("Exception while fetching metrics.",e)
new IllegalStateException()
new StringBuilder(561)
Long.valueOf(args[2])
SavedSearch.constructSavedSearches(get(getBaseURL() + "saved_searches.json",true))
FISHING_ROD(346,1,64)
assertEquals(expectedPlan,actualPlan)
exclude
lock.lock()
info.getRegionName()
!isUDTF && child.getChildCount() > 2
TrustManagerFactory.getDefaultAlgorithm()
executionManager.findChildExecutionsByParentExecutionId(processInstanceId)
messageJournalEnabled=false
e.getMessage()
loadResourceAsURL(name)
assertRemoveSubsystemResources(servicesA)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read())
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!")
assertEquals(1,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
AtmosphereResourceImpl.class.cast(r)
getter.getRawReturnType()
objectMapper.readerFor(DataSegment.class)
new DirectDruidClient(warehose,smileMapper,httpClient,server.getHost())
VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)
assertOpenEventually(latch,3)
nodeString()
assertEquals(countDownLatch.getCount(),3L)
broadcasterFactoryClassName != null
NSNumber.numberWithLong(val)
CommonUtils.randomString(random.nextInt(10))
sr0.getValue().f1
RuntimeException e
assertNotPresent(GsonConverter.class)
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
@Override public Object getValue(){   return getThreadCount(state); } 
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
maxInvocationCountObservedDuringWarmup * 1.2
rsWrap.getMobFileCacheAccessCount()
JavaAssistUtils.getParameterType(parameterTypes)
200000 * 4 * 4
LOG.warn("Unable to close socket selector",ex)
GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))
List<PersistentLocalScope>
IOException e
!namespaces.isDefined()
GL.glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
return true; 
nodeEngine.getService(LockService.SERVICE_NAME)
node.actor.getY() <= high
internalExecutor.submit(command)
batch.isEmpty()
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",1,SECONDS)
statistics.addRemoveTimeNano(System.nanoTime() - start)
clazz.isPrimitive() || clazz.isArray()
ObjectStreamClass.lookupAny(clazz)
url.toServiceString()
deployments.get(uniqueName)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
ASYNC_CONSUMER_THREAD.getStackTrace()
setEternal(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
delayer != null
uri.equals("/")
assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)
new RuntimeException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d(%3$s)",aFileName,lineNumber,line))
webSocketConnection.getRemote().sendString(s)
FileNotFoundException ex
pixmap.drawCircle(x,y,radius,color)
bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())
url2 != null
new NotifyBuilder(context).whenDone(4)
log.debug("PID contains identifier with no assigning authority")
ChannelInboundHandlerAdapter handler=new ChannelDuplexHandler(){   @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {     ctx.fireChannelActive();     peerRef.exchange(ctx.channel(),1L,SECONDS);   }   @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg){     latch.countDown();     ctx.read();   }   @Override public void exceptionCaught(  ChannelHandlerContext ctx,  Throwable cause){     causeRef.set(cause);   } } ; 
logger.info("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.")
file.flush()
statistics.addPutTimeNano(System.nanoTime() - start)
ResponseBody.create(MediaType.get("text/plain"),new byte[0])
SSLContext.setCertificateChainFile(ctx,trustCertChainFile.getPath(),true)
reservedWords.contains(codegenProperty.datatypeWithEnum)
Thread.sleep(50)
GL20.glUniformMatrix3(location,transpose,value)
assertNotNull(savepointPath,"Failed to trigger savepoint")
synchronized (id) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
requestFilters.isEmpty()
mTfs.getFile(fileId)
error.expectedMessageCount(1)
callTimeoutMs=5000
registry.put("firehoseClient",amazonKinesisFirehoseClient)
stage.compareTo(currentStage) > 0
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
e instanceof MaybePrimitiveExpr && e.hasJavaClass()
Bytes.toBytesBinary(tableNameOrRegionName)
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
new UDFArgumentTypeException(2,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
failOrAccept(prevAccept,input,reach,t)
log.info("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
colorModeClass.equals("ScaledSizeMode")
modelNode.has(LOCAL)
ufsPath.getPath()
request.getServletPath()
error("Unable to connect due to unrecognised server certificate")
future.get(30,TimeUnit.SECONDS)
new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null)
s != null
field.getRawType()
writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
option == JOptionPane.CANCEL_OPTION
EXPLICIT_NO_UNSAFE_CAUSE == null
Foundation.NSLog("[error] " + tag + ": "+ message)
new MMUnlockHandler(this)
assertEquals(2,possibleOutcomes.size())
new StringBuilder(639)
new UnsupportedOperationException()
Object edge
incomingDir.exists()
ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))
getBinaryTupledSet()
getTimeout()
session.getMachineIdentifier().equals(config.getMachineIdentifier())
getRegistry().put("hb",hb)
mapEntry.getValue().isSame(source)
checkpointPath.getPath()
getExpressionTypesFromInput(TEST_SESSION,metadata,SQL_PARSER,INPUT_TYPES,ImmutableList.of(translatedProjection),ImmutableList.of())
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")))
version > 0
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("timeToIdleSeconds")).longValue())
assertTrue(found)
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
timeoutMs < 500
HttpHeaderValues.IDENTITY.equals(targetContentEncoding)
currentWorldTransform=renderable.modelTransform
Objects.isNull(value)
id=19907
new PriorityTieredBrokerSelectorStrategy(0,1)
UserGroupInformation.getCurrentUser().reloginFromKeytab()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new DeserializationException(e)
mock.expectedMessageCount(10)
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
System.currentTimeMillis()
-1
assertEquals(actual().toString(),typeString)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Preconditions.checkState(hasInstanceType())
@ConditionalOnEnablednHealthIndicator("jms")
toObject(value)
Sets.<Integer>newHashSet()
Thread.sleep(200)
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public String getBindHostKey(){   return mBindHostKey; } 
addProperty(firstNode,"band","The Clash")
routes.SessionsController.index()
(ResourceAdapterDeploymentService)controller.getService()
reg.getCounters(transformFilter(filter))
Arrays.asList("bash","-c",command)
!calculatePositionAndValue(x,y)
runAllTasks()
assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,true,true)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
tiled != null
IOException e
ReflectiveOperationException e
new IllegalStateException()
uncompressedProto.length < 2550000
theClass.getConstructor(new Class[0])
@ConditionalOnEnablednHealthIndicator("mongo")
new InetSocketAddress(configuration.getRestListenUri().getPort())
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeStage().getLabel(),targetStage.getLabel())
OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.TIMESTAMP))
new String(bytes2)
BOLD
m.isCacheValue()
mapper.getJsonFactory()
implemetationMethodDescriptors.build()
Bytes.toBytesBinary(tableNameOrRegionName)
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
taken > 190
new ModelNode(10000)
logger.trace("{} is already cancelled",impl.uuid())
DataStream<OUT>
Exception e
factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
Thread.sleep(50)
ImmutableSet.of(modules)
Integer.valueOf(p.getProperty("numberid.id"))
LOG.trace("The sequence id for {} is continuous, pass")
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)
logger.debug("Invalid Account Credentials")
Exception e
HashMap<String,ASTNode>
testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
hz1.getLifecycleService().terminate()
Site.me().setRetryTimes(3).setSleepTime(100)
timeoutMs=500
LOG.info("Cannot access storage directory " + rootPath,ex)
font.drawMultiLine(batch,results,20,300)
assertEquals(0,localReplicatedMapStats.getOwnedEntryMemoryCost())
libDirectory="."
Object node
assertEquals("There should be no files",files.length,0)
adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)
row("p_comment",null,1.0,0.0,null,null,null)
privObj.getObjectName().equals("masking_test_view")
i < count
Thread.sleep(600)
id=19
propEditor != null
logger.info("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
id=15853
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null)
PORT=6335
public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } 
_maxTransactionActive=0
inner.deletedNodes()
new HttpClientCodec(4096,8192,8192,true)
LOG.error("Failed to get files from " + baseDirectory.getAbsolutePath())
n.intValue()
tblObj.getDataLocation()
LOG.error("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
LOG.warn("calculatedMaxSteps:{} for loadbalancer's stochastic walk is larger than " + "maxSteps:{}. Hence load balancing may not work well. Setting parameter " + "\"hbase.master.balancer.stochastic.runMaxSteps\" to true can overcome this issue."+ "(This config change does not require service restart)",calculatedMaxSteps,maxRunningTime)
Long.valueOf(args[1])
layout.setRefreshingLabel(label)
? extends Exception
isTestOnBorrow()
batteryVp >= low
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
DEFAULT_ROW_FLUSH_BOUNDARY=80000
statistics.addRemoveTimeNano(System.nanoTime() - start)
buildPages.getTypes()
soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)
Utilities.LOG14535.info("creating new paths " + System.identityHashCode(fsp2) + " for "+ dirName+ ", childSpec "+ unionPath+ ": tmpPath "+ fsp2.getTmpPath()+ ", task path "+ fsp2.getTaskOutputTempPath(),new Exception())
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
resultEndpoint.assertIsNotSatisfied()
k < THREADS
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
new PrestoException(HIVE_FILESYSTEM_ERROR,e)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "var c = goog.require('a.c');\nvar d = goog.require('a.b.d');\n\n")
compile.minus(provided)
userGroupMember.getMemberId()
invocation.addAttachmentsIfAbsent(context)
stores.contains(name)
public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"7:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,"age","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK" + "/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"9:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,"method1","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
model.getNodeTextColumns() == null
ugi.reloginFromKeytab()
setExpectedMessageCount(messageCount)
selectedFile != null
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
executeConnectAsync=false
private String text; 
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
item.getName().matches(name)
o instanceof Xid
AbstactStoreHandler<DelayedEntry>
width - originY
ctx.writeAndFlush(msg,promise)
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new TagRewriteCell(clonedBaseCell,this.tags); } 
new S3DataSegmentMover(mockS3Client)
mapper.getJsonFactory()
nodeEngine.getService(LockService.SERVICE_NAME)
sourceNodeTextData.getText().isEmpty()
getPath("InputPackageDeclarationDiffDirectory.java")
Validate.notEmpty("Cookie name must not be empty")
queryStrings.append(name)
SingleServerInventoryProvider.class
assertEquals(actualPattern.pattern(),someName)
file.getFileName()
model.getNodeTextColumns() == null
Assert.assertEquals(1062,details.get(0).getAbsolutePosition())
new RuntimeException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
beanFactory.getBeanNamesForType(CacheAspectSupport.class)
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
child.getProperties().isNodePartitionedOn(partitioningRequirement)
new GameOver(Gdx.app)
offset >= 0
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)
!mIsMessageReady
Thread.sleep(50)
new RequestManager(testTimer,300)
userId <= 0
isStarted()
mm.tryLock(key,4,TimeUnit.SECONDS)
logger.info("Remove try/catch/finally")
sections.remove(section)
DEFAULT_MOVE_COST=100
visibleOnly=false
to("bar")
new NetAddress(resolvedHost,resolvedPort,-1)
ctx.sendDownstream(e)
new ConnectorTableLayout(handle)
node1.checkTreeTypeAwareEqualsSilent(node2)
logger.debug("Requsting URL {}",url)
context.createTaskContext().addPipelineContext(0,true,true)
context.var("double")
assertEquals(row.getField(0),2L)
this.logger.isWarnEnabled()
assertEquals(9,rows.size())
cache.setRecord(key,record)
MAX_CACHED_HBASE_INSTANCES=31
System.arraycopy(bytes,0,this.bytes,0,SIZE)
model.getBoundingBox(bbox)
statistics.addGetTimeNano(System.nanoTime() - start)
setBytes(0,data,index,length)
id=19909
value.isEmpty()
sourceEdgeTextData.getText().isEmpty()
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title")
LOG.warn("Failed to send receipt of data to worker {} for request {}: {}.",mAddress,mReadRequest,e.getMessage())
ApplicationPidFileWriter.class
reg.getCounters(transformFilter(filter))
users.size() > 90
LOG.warn(e)
processInstance.getId()
GatherGettersAndSetterProperties.update(compiler,externs,root)
ImplemetationMethodDescriptor methodDescriptor
LOG.error("delete failed: {}",e.getMessage())
i <= repeatCount
nodeEngine.getService(LockService.SERVICE_NAME)
IllegalStateException ise
Generics.newHashMap()
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)
Exception exception
"Stream " + importer
littleEndian.order()
assertEquals(expectedPlan,actualPlan)
registry.put("curator",client)
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)
expiresOn == null
AtmosphereResourceEventListener.class
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
child.getProperties().isNodePartitionedOn(partitioningRequirement)
min1 < min2
Assert.assertNull(ex.getCause())
200000 * 4 * 4
testWarning(LINE_JOINER.join("goog.require('a.c');","/** @suppress {extraRequire} */","goog.require('a.b')"),REQUIRES_NOT_SORTED,LINE_JOINER.join("goog.require() statements are not sorted. The correct order is:","","/**"," @suppress {extraRequire}"," */","goog.require('a.b');","goog.require('a.c');","",""))
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1)
statistics.addPutTimeNano(System.nanoTime() - start)
allowedIdentifiersCheckDigits[i]
List<String>
cSet.getConcept()
Logger.getLogger(loggerName).getLevel()
ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); 
promise.setFailure(new ClosedChannelException())
logger.info(name)
i > 0
assertFalse(dr.isFailure())
LOG.info("Halting process: ShellBolt died.",exception)
promise.tryFailure(new ClosedChannelException())
op.getJavaName()
incomingMessage.getMessagePayloadByte(0)
fieldDeser.getPropertyValue(currentObject)
request.getRequestURI()
jmsTemplate.setPubSubDomain(false)
chain.filter(exchange).compose((call) -> filter(exchange,call))
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public String getHostNameKey(){   return mHostNameKey; } 
id=15861
@PATCH
new InputStreamReader(fileObject.getInputStream())
(Integer)args.get("damage")
UIPasteboard.getGeneral()
entry.getOriginalUri()
new LazyTailArrayNode(record,schema)
promise.setFailure(cause)
dfa == null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
preDestroys != null
tickTupleInterval == 0
primitiveType != null
routes.SessionsController.index()
expected.getType().equals(actual.getType().toString())
logger.debug("Requsting URL {}",url)
MathUtils.PI * (this.width * this.height) / 2
new DoubleInetAddressDns()
assertMockEndpointsSatisifed()
assertEquals(7,LambdaOperations.values().length)
Logger.getLogger(loggerName).getLevel()
assertEquals(2,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
stateHolder.reloadVariables()
assertEquals(actualPattern.pattern(),someName)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
getJSDocTypeWithBraces(operation)
capacity > 1 << 30
5 * 1000
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
Collection<String>
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
logError(lcurly,"lcurly",lcurlyPos)
prev.getPrevProp()
LOG.error(e,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
UserGroupInformation.getCurrentUser().reloginFromKeytab()
1
getConnectionFactory()
return false; 
Boolean success
ExprEval.of(null)
Object edge
analysis.getTypeWithCoercions(aggregate)
ObjectConverter.toBoolean(scriptValue)
chooser.showSaveDialog(null)
DataStream<OUT>
mock.expectedBodiesReceived("c","b","a")
ClusterLeaveReelectionListener.class
HttpRequest.put("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
id=33
graph.getEdges()
1000L * FILE_BYTES
int retries() default 0; 
id=8
address.getHostText()
mTFS.exists(turi)
assertEquals(0,beanInfo.getOperations().length)
conceptToValidate.getConceptId()
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
report(n,MISPLACED_ANNOTATION)
expiresOn.getTime()
capacity > 1 << 30
new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs())
"maxHeaderSize must be a positive integer: " + maxChunkSize
toShortUnsafe(bytes,0)
index > capacity()
id=15858
attribute.getDefinition().getAttributeMarshaller()
filter.setPageSize(3)
buffer.getInt8()
y / vz
GL20.glUniform3(location,v)
compressedSliceInput.length()
ROOT_LOGGER.error(consoleSlot == null ? "main" : consoleSlot)
field.getRawType()
AtmosphereResponse.create()
TfsShell.convertMsToDate(files[3].getCreationTimeMs())
collection(StreamImpl.class).update(match,modify)
assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
mock.expectedBodiesReceived("Hello World")
contentType != null
event.getColumns()
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
acceptor.getFilterChain()
n < count(coll)
ufsPath.getPath()
Long.valueOf(args[1])
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.basic.enabled=false","security.user.password=password")
String text
floatBuffer.clear()
beansXml.createAlternatives()
public static AnimationAction $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
mHeartbeat != null
id=15851
ReflectiveOperationException e
this.repositories.add(repository)
processEngineConfiguration.setEnableSafeBpmnXml(false)
ServiceAnnouncingChatHandlerProvider.class
connection.zrangeByLex(key,max,min)
MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)
from("seda:a").delayer(500)
row.size() == 0
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
ImmutableSet.Builder<ImplemetationMethodDescriptor>
args.length < 1
LOG.info("Storage directory " + rootPath + " does not exist")
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRoles"))
test("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
isIgnoreUriScheme()
getConnectionFactory()
steps < 0
configMonitor.init(this)
jniGetLocalAnchorA(addr,tmp)
callTimeoutMillis=1000
new RuntimeException(ex)
Validate.notEmpty("Cookie name must not be empty")
stores.contains(name)
VertexAttribute.Color()
size=1f
new InputStreamReader(in)
ChronicleEngineEnpoint endpoint=(ChronicleEngineEnpoint)getEndpoint(); 
this(false,16,arrayType); 
this.getNotEmptyWaitThreadPeak()
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ descriptor+ "]"
Maps.newHashMap()
is("/home/source")
LAYERS=10
AbstractRanking.refreshMinMax(this,graph)
assertEquals(expectedPlan,actualPlan)
ImmutableList.of(sourcesAsStrings)
Integer.valueOf(st.nextToken())
visitNode(node,context)
? extends Exception
log.debug("Error while closing command context",exception)
LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())
new ResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
AlluxioLogServer.class
sourceEdgeTextData.getText().isEmpty()
LOG.info("Getting synchronous method stub from channel")
logger.info("Parsing Dep: " + filePath)
verify(collector)
column.createColumnObserver()
registry.put("kinesisClient",amazonKinesisClient)
tx == null
value={StringFilterAggregator.class}
HttpServletResponse.class.cast(response).sendError(202,"Websocket protocol not supported")
player.teleport(playerLocation)
new RuntimeException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName)
session.getMachineIdentifier().equals(config.getMachineIdentifier())
getTimeout()
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Throwable getExceptionThrown(){   return exceptionThrown; } 
b.getTopicId()
inputFuture.cancel(mayInterruptIfRunning)
GL20.glGetVertexAttrib(index,pname,params)
new ContinueProcessOperation(this,execution,true)
typeSerializer.getClass()
mWorkerId + BASE_FILE_NUMBER
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,true)
uri.toASCIIString()
id=15870
Assert.assertEquals(2,propertyCategories.size())
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
Latkes.getStaticPath()
incomingMessage.getMessagePayloadByte(0)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
"Interrupted when attempting to close writer for end point: " + ep
implemetationMethodDescriptors.build()
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
response.set(ROLLED_BACK)
t.st == ST.LABEL
new FileInputStream(props)
assertEquals(2,props.getConfigPathPatterns().length,2)
titleTextField.getText()
payload.getBodySources().size() == 1
editor.commit()
absEdge.getTarget()
dateOfBirth == null
new URI(parentUri.getScheme(),parentUri.getAuthority(),parentUri.getPath() + SEPARATOR,null)
logger.debug("Illegal argument in chart: {}",e)
config.getIdleConnectionTimeoutInMs()
uncompressedProto.length < 2100000
entry.getName().startsWith(BOOT_INF_CLASSES)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
sizeNeeded >= items.length
Bytes.toBytesBinary(tableNameOrRegionName)
nodeManager.getAllNodes()
comparePartitionOwnership(true,localMember,partition)
new SpriteBatch(10000)
setColor(color)
logger.info("Optimized Selector: " + selector.getClass().getName())
id=15871
connection.hdel(key)
NSNumber.numberWithLong(val)
jmsManager.destroyQueue(queueName)
id=15874
List<INPUT>
uiAclHandler.permit(reqContext,op,conf)
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Data[%s]",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
matcher.group(2)
target.addTask(task)
response.set(ROLLED_BACK)
graphModel.isDirected()
ALIAS.addOperationParameterDescription(resources,"infinispan.container",op)
channel.close()
left.getFieldName().equals(right.getFieldName())
res.sendError(202,"Websocket protocol not supported")
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)
Dagger_AutoFactoryProcessorComponent.builder()
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)
wrapper.shutdownNow()
new StringBuilder(674)
getTokenNames()
sshd.stop()
ti > 0
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
LOG.error("Failed to find " + baseDirectory.getAbsolutePath())
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
log.debug("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
"access-control/default is missing operations: " + accessControl
id=3
Color.rgb888ToColor(color,colorInt)
IOConverter.toString(out)
processor.open(w,request)
delegate.tokenize(token,regex)
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty
i < 1000
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,false,false,factory)
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))
KafkaEightDruidModule.class
nameLength > maxHeadersLength - headersLength
oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
new AsyncWriteToken(r,finalMsg,entry.future,entry.originalMessage)
Thread.sleep(5000)
ENTER_PORTAL_FRAME(120)
writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
CalciteTests.createMockSystemSchema(druidSchema,walker)
setBytes(0,data,index,length)
converter.convertTo(leftValue.getClass(),rightValue)
"Content-Type".equals(name)
promise.setSuccess(null)
toByteBuffer()
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
Throwable ex
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
XMLInputFactory.newFactory()
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
new StringBuilder(730)
getLog().error("register druid-driver mbean error",ex)
id=15830
bulkInsertableMap.get(persistentObjectClass)
queueView.get().get(index.longValue())
size * 1.75f
getUrl().getMethodParameter(methodName,TIMEOUT_KEY,DEFAULT_TIMEOUT)
sanitizedName(name)
new String(bytes2)
new Duration(2,SECONDS)
AbstractRanking.refreshMinMax(this,graph)
LOG.info("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
runOTIafterNTI=true
expiresOn.getTime()
fragUtils.getClass()
ConnectorSplitManager.class
computeSemiJoin(inputStatistics,inputStatistics,x,unknown)
new IllegalArgumentException()
bindingConfig != null
rs.getString(columnIndex)
Integer.valueOf(sessionTTL)
LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort())
id=13306
patientState.getState().getId()
bytesRead != 0
getRedeliverDelay()
uri.toString().equalsIgnoreCase(future.getURI().toString())
id=15831
CachingConnectionFactory connectionFactory
mock2.expectedMinimumMessageCount(3)
addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)
"Refreshing storefiles of region " + regionToFlush + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
/**   * {@inheritDoc}  */ @Override public AtmosphereResource removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),"removeAtmosphereResource(AtmosphereResource r)");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } 
path(11)
mock.expectedMessageCount(1)
eventJournalConfig.getMapName()
obj.getAcceptableTokens()
UnderFileSystem.get(tmpFolder)
Object node
new GatherGettersAndSetterProperties(compiler)
logger.debug("Received MyQ  JSON: {}",dataString)
new byte[13]
GL20.glUniform3(location,v)
ImportAutoConfigurationWithItemsOne.class
"Using bind address: " + publicAddress
Bullet.init()
configList.size() == 0
route.setDelay(5)
propResource.get(BOOT_TIME).asBoolean()
Object node
checkNotNull(getPropDefFromClass(superType,pname))
HazelcastInstanceFactory.terminateAll()
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"))
id=15845
wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())
Color.fromRGB(0x253192)
assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)
statistics.addGetTimeNano(System.nanoTime() - start)
factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)
getPreferences().store(fos,"")
model.getModelName()
req.getServletPath()
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules())
hashFunction.hashBytes(littleEndian)
z.next_in[z.next_in_index++] == 0
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12450,12451.87)
waitLatch.await(25,TimeUnit.MILLISECONDS)
HornetQAutoConfiguration.class
conf.getSearchBaseURL()
applicationStatistics.incrUpdateUserTimes()
Thread.sleep(2200)
getSwaggerType(swaggerModel.getAdditionalProperties())
put(v)
mapper.getJsonFactory()
logger.debug("myq securityToken: {}",securityToken)
"streams:" + filter
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)
sentences.get(0).entityMentions() != null
items[33]
in.readShortx()
loadObj(file,false)
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null
twitter1.checkUserListSubscription(id1.screenName,id2.id,userList.getId())
engine.execute(query).toString()
c.isEncoded()
mLockMode == InodeTree.LockMode.READ
flushStatements(false)
word=START_WORD
new IntRangeValidator(1,true)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
tblObj.getDataLocation()
item != txId
v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)
@ConditionalOnEnablednHealthIndicator("elasticsearch")
new MockResponse().setBody("A").setSocketPolicy(SHUTDOWN_INPUT_AT_END)
mMethod.invoke(MenuInflater.this,params)
attribute.split("\\.")
new ClosedByInterruptException("Interrupted while reading.")
log.debug("Unexpected exception on closing transaction.  Cause: " + e)
assertFalse("reuse-address",networkConfig.isReuseAddress())
mFixedExecutionService.shutdown()
Long.valueOf(args[2])
message + END
selector.select(500)
HashMap<String,ASTNode>
new GeoLocation(array.getDouble(0),array.getDouble(1))
qp.getUniqueItems()
attributeMap.put(attributeName,value)
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
"Interrupted when attempting to close writer for end point: " + ep
channel.close()
new CommandFormatException("The result couldn't be retrieved (perhaps the task was cancelled",e)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","del","div","dfn","dl","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
(byte)0xdf
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
dataFormatModel.setLabel(row.get("description"))
registered.add(objectName)
element.getNodeName()
mTfs.ls(Constants.PATH_SEPARATOR,true)
System.nanoTime()
ssl.has(CommonAttributes.CIPHER_SUITE)
KBP_MINIMUM_SCORE=.445
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } )
resultEndpoint.assertIsSatisfied(5000)
declaredIntentionToWrite.getMode() != DIRECT_TO_TARGET_NEW_DIRECTORY
Subqueries.gt(0L,subquery)
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Throwable {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
return true; 
word=START_WORD
uncollectedPointCreater.createUnCollectedPoint(timestamp)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false)
arguments[2]
public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } 
assertThat(this.context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(5)
Thread.currentThread().isInterrupted()
Thread.sleep(500)
Exception cause
pos < len
ImmutableList.of(modules)
size * 1.75f
TupleDomain.none()
exchange.getPartitioningScheme().isReplicateNulls()
getPreferences().setProperty(key,value)
file.getFileName()
request.getRequestURI()
/**   * The tested prototype instance  */ private final Prototype testedPrototype; 
from("direct:a").delay(3000)
toHeapData(key)
System.currentTimeMillis() + 5000
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
mockRegionInfo.isMetaRegion()
assertEquals(1,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
timeout=30000
VertexAttribute.Color()
LOG.error("Failed to get files from " + baseDirectory.getAbsolutePath())
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage",ioe)
JSError.make(AbstractCompiler.READ_ERROR,getName())
new NullPointerException("the annotation is null")
i < 10
CreateOptions.class
this.getClass()
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForNone"))
new RuntimeException(e)
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
new BindException(concept,"concept")
name="java:jboss/datasources/ExampleDS"
new CustomChangeException("Failed to insert one or more concept map types")
ticket.notify()
(byte)0xff
mock.expectedMessageCount(2)
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,true))
directoryUrl.getParameter(Constants.GROUP_KEY)
saveTask(taskDefinition)
tableInfo.getType()
Object edge
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
public DerivedBuilder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
found.size() == 1
TrustManagerFactory.getDefaultAlgorithm()
oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
ProcessorDefinition<ProcessorDefinition>
seenVertices.contains(startAncestor)
promise.setSuccess(null)
Object strongReference
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
Thread.sleep(500)
o.toString().getBytes()
StatBuckets.prettyUptime(secs)
@UriParam
dataSource.setInitExceptionThrow(true)
JavaAssistUtils.getParameterType(parameterTypes)
mail.getClass().getName()
assertTrue(CompressionTest.testCompression("SNAPPY"))
status.isDirectory()
assertThat(request.getBody().readUtf8()).isEqualTo("<my-object><message>hello world</message><count>10</count></my-object>")
javaWriter.emitSingleLineCOmment("foo")
pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)
public String getPort(){   return this.port; } 
basicGraph.getShortestPath(root,t,true)
boolean mutiValueResponse() default false; 
is("/home/source")
req.getServletPath()
item == null
result.expectedMessageCount(0)
List<String>
attribute.getDefinition().getAttributeMarshaller()
numKeys > 1
redirectUri == null
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
bc.getExecutorService()
compressedSliceInput.length()
proxy.getHostText()
getMockEndpoint("mock:start").expectedMinimumMessageCount(4)
value == 0
return false; 
UnsupportedOperationException.class
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
submittedNode.get("values") != null
hashSymbols.keySet()
barrier1.await(2,TimeUnit.SECONDS)
logger.error("Error connecting to Plex",e)
isDirect=false
DiagnosticType.error("JSC_NAME_REFERENCE_IN_EXTERNS","accessing name {0} in externs has no effect")
LOG.debug("Received ping --> {}",payload)
waitForJobExecutorToProcessAllJobs(3000,500)
profileCluster.clear()
rs.getString(columnIndex)
LOG.info("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
id=54
GL20.glUniform4(location,v)
System.currentTimeMillis()
capacity > 1 << 30
mTfs.createFile(new TachyonURI("/root/testFile1"))
http2.setInitialStreamSendWindow(initialStreamSendWindow)
expectedCountsForADoc(weights,ind)
expiresOn.getTime()
gauge.getValue() instanceof Long
maxSize > (used / total)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
logger.debug("myq securityToken: {}",securityToken)
Map<List<Object>,Object>
LOG.info("Creating short circuit input stream for block {} @ {}",blockId,address)
TfsShell.convertMsToDate(files[0].getCreationTimeMs())
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
Number.class
new StringLengthValidator(1,Integer.MAX_VALUE,true,true)
id=19
uuid != null
getBinaryTupledSet()
numThreads.get() > MAX_THREADS
new S3DataSegmentMover(mockS3Client)
bean.getCollectionCount()
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
wrapper.shutdownNow()
parent.decrementPrioritizableForTree(amt)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
primitiveToWrappers.put(wrapperType,primitiveType)
delegate.getChild(element)
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
jniGetLocalAnchorA(addr,tmp)
StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))
entry.getCheckName().equals(checkAlias)
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
new TaskStatusUpdateEvent(counters,progress,stats)
Arrays.asList("onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
id=11100
floatBuffer.clear()
fileObject.hasExt("zip")
indexOutURI.getPath()
ChannelBuffers.buffer(length)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
id=19908
return true; 
logger.error("",ex)
buildPages.getTypes()
jtaEnvironmentBean.getValue().getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap().remove(immediateCleanup)
stopwatch.elapsedMillis()
this.thrown.equals("File must exist")
id=15852
a.length >= count()
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())
new RuntimeException("Could not lookup jndi name: " + namespaceStrippedJndiName + " in context: "+ jndiContext,ne)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)
Map<Integer,Object>
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
active=true
id=15808
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
return false; 
AstUtils.hasLeastOneAnnotation(classNode,"Controller","EnableWebMvc")
details.put(fileName,Long.toString(timestamp))
volumes.toString()
mock(ExampleService.class,MockReset.before())
connection.setFollowRedirects(httpRequest.getFollowRedirects())
LOG.error(result.getDescription())
Optional<ZkWorker>
capacity > 1 << 30
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
filteredSearchRequest(query,filter,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
routes.BufferResource()
LOG.warn("DataNode is out of memory. Will retry in 30 seconds.",ie)
closedChannelException != null
context.reloadRequired()
notifier.getConfiguration().setPort(25667)
UfsUtils.loadUfs(mFileSystem,new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
DataTypes.TIME(9)
Validate.configurationDirectoryExists(javaHome,"controllerJavaHome must exist at " + controllerJavaHome)
buffer.getInt8()
cursor.retry()
finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
assertEquals(countDownLatch.getCount(),3L)
newId > max
new RuntimeException("should execute connector.connect() first")
new ModelNode(10)
processor.open(w,request)
IOConverter.toString(out)
assertMockEndpointsSatisifed()
id=43
oldestInflightEntry != null
new InMemoryMessageRespository()
this.logFactory
InputProcessor[]
catalog.validateLanguagePredicate(null,"simple",detail.getSimple())
new ModelNode().set(1)
keys.isEmpty()
Collection<Data>
maxSize(new Fixed(width))
logger.info("Recording function information")
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND)
assertRemoveSubsystemResources(servicesA)
isCancelled0(result)
p + "." + M_ITERATOR
ReferenceCountUtil.safeRelease(holder)
s == null
maxSize > (used / 1024 / 1024)
String text
(UndeclaredThrowableException)wrapped
data.limit()
targetActor.addListener(listener)
new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)
type=500
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
graph.getEdges()
LoopContextStepRetrieval retrievalToAdapt
expected.getType().equals(actual.getType().toString())
k < THREADS
SSEAtmosphereInterceptor.class
LOG.error("OpenTracing: Failed to capture tracing data",t)
new SslContextBuilder(false)
new NodeHistogram(application,range)
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
len % (1024 * 1024) / 10
sX != 0
fail()
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS
DiagnosticType.disabled("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
System.nanoTime()
Preconditions.checkNotNull(manager)
view.getClusteredLayerInDegree(absNode)
id=22
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
resultsE.appendChild(reportE)
logger.warn("{} {}",errorCode,message)
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
types.get(channel)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
getLock(address)
id=15856
pm.runMigrationTasks(this,tasks,partitionId,replicaIndex,from)
masterAddress.split(":").length != 2
new StringBuilder()
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",false))
(Object)x
incomingEdges.containsKey(source)
reducerCount=5
setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.6,55.7)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
privObj.getObjectName().equals("masking_test_subq")
conn.getResponseCode() == 201
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false)
getSSLContext().getSocketFactory().createSocket()
response.set(ROLLED_BACK)
getTokenNames()
latch.await(10,SECONDS)
final ClassNotFoundException ignored
new StringBuilder(239)
ti > 0
graphModel.getUndirectedGraph()
cache.remove(key,null)
LOGGER.warn("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
id=16
IOUtils.closeQuitely(is)
view != null
instance.managementService.unregister()
handle.parent().exists()
c.getDomain() == null
LOG.warn("Unable to close socket selector",ex)
bean.getCollectionCount()
assertRemoveSubsystemResources(servicesA)
Boolean.getBoolean("java.awt.headless")
details.put(CONFIG_HASH_KEY,currentConfigHash)
totalHistogram.getValueAtPercentile(90)
totalHistogram.getValueAtPercentile(90)
width - originY
mDir.getDirId()
serversByLoad.lastKey()
LinkedHashSet<String>
connection.subscribe(jedisPubSub,patterns)
in.readShortx()
stats.getLastAccessTime() > lastAccessTime
IllegalArgumentException.class
lastException != null
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false)
-1
pool.dealloc()
Float.valueOf(value.toString())
assertEquals(512f,i,10f)
CollectionUtils.isNotEmpty(elements)
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel())
assertEquals(row.getField(0),3L)
sanitizedName(name)
s.elapsedTime(TimeUnit.NANOSECONDS)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
IRON_GOLEM("VillagerGolem",IronGolem.class,98)
edge.setType(EdgeDirection.UNDIRECTED)
serverService.getIncomingInterceptors()
new Server(port)
IntrospectionSupport.setProperties(jpa,options)
logger.info("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
new Duration(10,TimeUnit.SECONDS)
s.toString().toUpperCase()
existingOne == null
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL)
channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)
n.getNodeData().getId().toLowerCase().contains(str)
Iterable<ObjectType>
cookies.columnMap()
soLingerTime.toSeconds()
headerHandled=false
elementClass != null
ImmutableList<HostAddress>
getClusterMap().put(buildAttributeName(name),value)
EVICT_ALL + 1
ConditionalOnEnablednHealthIndicator.class
log.debug("Error while closing command context",exception)
DEFAULT_CAPACITY=4000
new PrestoException(INVALID_CAST_ARGUMENT,e)
assertEquals(response.getResponseBody().length(),3876)
runPartialSorter(sorter,NUM_RECORDS,28)
getPath("InputPackageDeclarationDiffDirectoryAtParent.java")
error("Unable to connect due to unrecognised server certificate")
className.indexOf("org.openmrs.")
GL11.glGetTexParameter(target,pname,params)
createPermissionsXmlAsset(new JndiPermission("*","lookup"))
new ArrayList<Data>()
i < 10
UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)
newState.score()
mTfs.mkdirs(path)
context.var("long")
resultEndpoint.expectedBodiesReceived("one","two","three")
ObjectStreamClass.lookupAny(clazz)
id=25
new ModelNode().set(60000)
sourceNodeData != null
assertFalse(dr.isFailure())
memoryReservation.getAndAdd(bytes)
wizardModel.databaseConnection.contains("localhost")
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
webSocket.isOpen()
"Searching class for device type " + deviceAddress
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ)
c.getName()
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false")
id=15857
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
8 * 60000
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
context.addStep(new NewStepHandler(){   public void execute(  final NewOperationContext context,  final ModelNode operation){     if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {     }   } } ,NewOperationContext.Stage.VERIFY)
setSunPosition(calendar,latitude,longitude,sun)
objectMapper.readerFor(DataSegment.class)
IR.var(IR.name(shortName),googRequireNode)
connection.setFollowRedirects(httpRequest.getFollowRedirects())
Pattern.compile(foundAuthor)
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName())
waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)
protected FontMetrics fontMetrics; 
details.put(CONFIG_HASH_KEY,currentConfigHash)
node1.checkTreeEqualsSilent(node1)
graphVersion.incNodeVersion()
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static PkgControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
entry.getKey().getHostName()
root.toURL()
addProperty(firstNode,"band","The Clash")
sX != 0
mock.setMinimumResultWaitTime(1900)
LOG.error("Ignoring duplicate class " + className)
ss.getAuthorizerV2().checkPrivileges(type,Arrays.asList(commandObj),null)
ssl.has(CommonAttributes.CA_CERTIFICATE_FILE)
StatBuckets.prettyUptime(secs)
id=35
capacity > 1 << 30
mWorkerId + BASE_FILE_NUMBER
assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())
-1L
new CreateTable(temporaryTableName,ImmutableList.of(new LikeClause(originalTableName,Optional.of(INCLUDING))),false,tablePropertiesOverride,Optional.empty())
LOG.info("Cannot access storage directory " + rootPath)
@ConditionalOnEnablednHealthIndicator("mail")
beans.add(0,bean)
new DescribeInstances(awsConfig).execute(endpoint)
assertEquals(1,functionalTestHelper.removeAnyAutoIndex(map).size())
statistics.addGetTimeNano(System.nanoTime() - start)
LinkedHashSet<String>
/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage("Unable to start module",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal("Unable to refresh the spring application context.  Root Cause was:",rootCause);       }  else {         log.fatal("Unable to refresh the spring application context. Unloading all modules,  Error was:",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace("Unable to shutdown module:" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),"Got an error while starting a mandatory module: " + e.getMessage() + ". Check the server logs for more information");       } catch (      Throwable t2) {         log.warn("caught another error: ",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } 
@ConditionalOnEnablednHealthIndicator("solr")
InputProcessor[]
SingleServerInventoryProvider.class
ps.createRelationship(rel)
block.useSourceInfoFromForTree(exprRoot)
!shuttingDown
UnsupportedOperationException ex
((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
attributes == null
this.traceHandlers.add(traceHandler)
Integer.valueOf(2)
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
getClientConfig().getAddressList()
defaultCometSupport(useServlet30Async)
userStreamListener.onStatus(new StatusJSONImpl(json))
LOG.warn("discarding {} messages because the Netty client to {} is being closed",numMessages,dstAddressPrefixedName)
keyClass(NullWritable.class)
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,"struct","struct")
coreThreads.asString()
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
ChronicleEngineEnpoint endpoint
TestSuite testSuite=new TestSuite(testClass); 
5 * 60 * 100
InputProcessor[]
nameDefinitionMultimap.keySet()
super.getFamilyMap()
i < 10
Throwable t
assertEquals(service.state(),Service.State.FAILED)
incomingMessage.getMessagePayloadByte(0)
context.addStep(prepareStep,NewOperationContext.Stage.MODEL)
Bytes.toBytesBinary(regionname)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(id)
findState != 0
FlinkKafkaProducerBase.class
delta < 9000
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))
Thread.sleep(1350)
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))
callTimeout=1000
if (mCheckUnusedThrows) {   final ClassResolver cr=new ClassResolver(getClassLoader(),mPackageFullIdent.getText(),mImports);   try {     final Class clazz=cr.resolve(tag.getArg1());     reqd=!RuntimeException.class.isAssignableFrom(clazz) && !Error.class.isAssignableFrom(clazz);   }  catch (  ClassNotFoundException e) {     log(tag.getLineNo(),"javadoc.classInfo","@throws",tag.getArg1());   } } 
Object edge
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
a.entrySet()
entry.getValue().health().compose(this.timeoutCompose)
nameTextField.getText()
assertEquals(expectedPlan,actualPlan)
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
services=8
logger.debug("Invalid Account Credentials")
return 10; 
Calendar.getInstance(JSON.defaultLocale)
sleepAtLeastMillis(1)
src[srcIdx]
T
"access-control/default is missing operations: " + accessControl
cursor.getPosition()
req.getSession().getMaxInactiveInterval() * 1000
node.getLifecycleService().terminate()
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
Bukkit.getOfflinePlayers()
maxSize > (used / total)
taskService.createTaskQuery().orderByTaskId()
new StreamTaskException(exceptionMessage)
timeout=5000
new Font(edgeFontName,edgeFontSize,edgeFontStyle)
c.content().readBytes(CONTENT_LENGTH)
fieldDeser.getPropertyValue(currentObject)
getNonCompilablePath("InputDefaultConfig.java")
username.length()
new GeoLocation(array.getDouble(0),array.getDouble(1))
file.getAbsoluteFile()
queryIdsSnapshot.remove(deadQuery)
types.get(channel)
new ClusterConfiguration("whatever",StringLogger.DEV_NULL,"cluster://1","cluster://2")
@Override GelfOutput create(Stream stream,Configuration configuration); 
@SuppressWarnings("unused") private final Object strongReference; 
new StringBuilder(254)
WebSocketEventListener.class.cast(l).onMessage(event)
row1 * layerTileHeight
logger.info(name)
SOURCE.deref()
conf.getInt(Constants.TFS_PERMISSIONS_UMASK_KEY,Constants.DEFAULT_TFS_PERMISSIONS_UMASK)
Pattern.compile("(--?[a-zA-Z_]+)=(.*)")
metaData.getColumnName(1)
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())
Sets.<Integer>newHashSet()
conceptAnswer.getConcept()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
AlluxioWorker.class
KafkaInput.class
body.transferTo(position,Long.MAX_VALUE,target)
mMountTable.resolve(getPath(lastInode)).getPath()
LOG.trace("Terminating gRPC server")
millis % offset == 0
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
assertEquals(avDegree,2.0)
THREADS_PER_CLIENT=8
op.getJavaName()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
DEFAULT_ROW_FLUSH_BOUNDARY=500000
LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)
target.addTask(task)
logger.error("Configuration for influxdb not yet loaded or broken.")
config(" ",0)
publisher.publishWanReplicationUpdate(name,view)
cluster.getRexBuilder().makeCall(calciteOp,childRexNodeLst)
logger.debug("myq securityToken: {}",securityToken)
new AutoValue_PackageFiles(chunks,jsFiles,cssFiles)
registry.put("amazonSQSClient",clientMock)
(Integer)criteria.uniqueResult()
capacity > 1 << 30
Integer.valueOf(p.getProperty(screenName + ".id"))
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex())
id=27
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)
new GdxRuntimeException("Failure reading Vorbis.")
new Tag(line,column,text,on)
lastUpdateTime2 > lastUpdateTime
new StringBuilder()
converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)
new HiveS3Config().setS3AwsAccessKey("abc123").setS3AwsSecretKey("secret").setS3Endpoint("endpoint.example.com").setS3SignerType(PrestoS3SignerType.S3SignerType).setS3PathStyleAccess(true).setS3UseInstanceCredentials(false).setS3SslEnabled(false).setS3SseEnabled(true).setS3SseType(PrestoS3SseType.KMS).setS3SseKmsKeyId("KMS_KEY_ID").setS3EncryptionMaterialsProvider("EMP_CLASS").setS3KmsKeyId("KEY_ID").setS3MaxClientRetries(9).setS3MaxErrorRetries(8).setS3MaxBackoffTime(new Duration(4,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(20,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(8,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(4,TimeUnit.MINUTES)).setS3MultipartMinFileSize(new DataSize(32,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(15,Unit.MEGABYTE)).setS3MaxConnections(77).setS3StagingDirectory(new File("/s3-staging")).setPinS3ClientToCurrentRegion(true).setS3UserAgentPrefix("user-agent-prefix").setS3AclType(PrestoS3AclType.PUBLIC_READ).setSkipGlacierObjects(false)
robotstxtServer.allows(webURL)
Double.valueOf(value.toString())
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null
CompletableFuture<Boolean>
10 * Constants.SECOND_MS
stopwatch.elapsedMillis()
Math.min(1000L,connectionTimeout)
logger.info("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
RestartStrategies.fixedDelayRestart(3,0)
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
DiagnosticType.disabled("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
KBP_MINIMUM_SCORE=45.30
options.getLambdaRole()
closeCode < 1001
public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
RequestBody.create(mediaType,(byte[])bodyContents)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
GL15.glGetBufferParameter(target,pname,params)
registry.put("blogService",new BlogService())
logger.info("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
new MalformedException("Unused message placeholder: " + phName,objLitNode)
serversByLoad.lastKey()
converter.convertTo(rightValue.getClass(),leftValue)
new CommandFormatException("ModelNode request is incomplete",e)
DeletionRetentionStrategy.class
addr.isAnyLocalAddress()
AdviceWithTasks.afterByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
nodeManager.getAllNodes()
f.getAttrs().getMTime() * 1000
bc.getExecutorService()
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",1,SECONDS)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)
new DatagramDnsQuery(addr,null,1)
AuditEvemtFormatter messageFormatter
logger.debug(getName() + " has been started")
factory.lookup(DefaultBroadcaster.class,id)
assertEquals(expectedPlan,actualPlan)
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())
el.className()
request.getRelaxLocality() == false
EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)
waitForJobExecutorToProcessAllJobs(3000,500)
from("direct:start").multicast(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
http2.setInitialStreamSendWindow(initialStreamSendWindow)
r.getUri().toString()
GL20.glUniform1(location,toFloatBuffer(v,offset,count))
DIODE(100)
log.tracef("%s finished request %d",ManagementChannel.this)
items[18]
new RuntimeException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
getter.getRawReturnType()
writer.write(line)
Multimap<Object,JSError>
i < maxIndex
public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
active
excludesPattern == null
-1
executionStats.getSplits()
proxy.getHostText()
mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false)
DatabaseDescriptor.getListenAddress().getHostName()
ArrayList<MessageListener<Object>>
peekNode()
new Exception("File " + file.getPath() + " should not exist")
((Number)s.first()).intValue()
loadRunnable instanceof LongTask
filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))
new SpdySessionStatus(11,"INTERNAL_ERROR")
compressedProto.length < 330000
/**   * Tests setup and cleanup attempts getting killed from command-line  and lost tracker  * @param mr  * @param dfs  * @param commandLineKill if true, test with command-line killelse, test with lost tracker  * @throws IOException  */ private void testSetupAndCleanupKill(MiniMRCluster mr,MiniDFSCluster dfs,boolean commandLineKill) throws IOException {   RunningJob job=launchJobWithWaitingSetupAndCleanup(mr);   JobTracker jt=mr.getJobTrackerRunner().getJobTracker();   JobInProgress jip=jt.getJob(job.getID());   TaskAttemptID setupID=getRunningTaskID(jip.getTasks(TaskType.JOB_SETUP));   if (commandLineKill) {     killTaskFromCommandLine(job,setupID,jt);   }  else {     killTaskWithLostTracker(mr,setupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),setupSignalFile,(short)3);   while (job.reduceProgress() != 1.0f) {     try {       Thread.sleep(100);     }  catch (    InterruptedException ie) {     }   }   TaskAttemptID cleanupID=getRunningTaskID(jip.getTasks(TaskType.JOB_CLEANUP));   if (commandLineKill) {     killTaskFromCommandLine(job,cleanupID,jt);   }  else {     killTaskWithLostTracker(mr,cleanupID);   }   UtilsForTests.writeFile(dfs.getNameNode(),dfs.getFileSystem().getConf(),cleanupSignalFile,(short)3);   job.waitForCompletion();   assertEquals(JobStatus.SUCCEEDED,job.getJobState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(setupID).getRunState());   assertEquals(TaskStatus.State.KILLED,jt.getTaskStatus(cleanupID).getRunState()); } 
List<Integer>
executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
ModuleIdentifier.create(moduleName)
graphWidth / 2
functionJSDocInfo != null
new StringBuilder(246)
StringUtils.isEmpty(formKey)
logger.debug(getName() + " has been started")
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
id=15839
DEFAULT_DATA_SIZE_PER_COLUMN=10
logger.debug("myq ReturnCode: {}",returnCode)
config.properties().get(REDIS_SHARED_POOL) == null
DeploymentDescription.getDeployDeploymentOperation(locale)
targetDirectory.directory("unwritable")
ctx.write("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
setUnknownLabels(binarized,mainLabel)
(o instanceof Record)
new PeepholeSubstituteAlternateSyntax(true)
elapsed > config.getConnectionTimeout()
assertEquals(expectedPlan,actualPlan)
connection.local().createStream(toStreamId(i))
from("seda:foo").startupOrder(1).delay(1000)
logger.info("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
this.seperator
_barrier.waitFor(nextSequence,10,TimeUnit.MILLISECONDS)
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
ar.cause()
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName())
contact.GetWorldManifold()
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false)
Assert.fail()
VertexAttribute.Color()
n.getCharno()
dbSqlSessionFactory.getDatabaseSchema() != null
endFunction("get_column_statistics_by_table: ",statsObj != null)
Thread.sleep(1000)
StringBuffer text
activeFrom.getTime()
LOG.warn("Unable to close socket selector",ex)
node1.checkTreeTypeAwareEqualsSilent(node2)
GL20.glGetActiveAttrib(program,index,256,typeTmp)
LOGGER.debug("{} - Reset ({}) on connection {}",resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
username.length()
NIO_GROUP.shutdownGracefully()
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)
stat.st_mtim.tv_nsec.get()
fLines.add(st.nextToken())
graph.getEdges()
@UnrelatedOne
DefaultAsyncHttpClientConfig.class
labelProbsForToken.get(label) < entityLabelProbVals.get(label)
userGroupMember.getMemberId()
id=44
new ModelNode().set(1L)
primitiveType != GL10.GL_POINTS
flushAfterDuration(entry.getKey(),entry.getValue())
mWorkerId + BASE_FILE_NUMBER
ran.nextInt(500)
new StringBuilder(730)
assertEquals(ex.getCause().getMessage(),"Unable to read 2 bytes, got 0")
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,30_000)
-1
version > 0
response.set(ROLLED_BACK)
row.size() == 0
LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)
period < MINIMAL_POLL_PERIOD
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements","testGettingVerticesAndEdgesWithKeyValue")
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)
outList.size()
Boolean.getBoolean("java.awt.headless")
setMinHeight(minWidth)
ArrayList<TaggedWord>
value.getType().getCanonicalName()
data.limit()
type instanceof WildcardType || type instanceof TypeVariable
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,"dict","dict")
FilterRegistrationBean.class
new EnumValidator(ParticipantStatus.class,false,false)
c < values.length()
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
List<SourceFile>
c * b
RuntimeException.class
mime == null
currentlyProcessing.addCallback(callback)
taken > 190
mError != null
new IncrementalIndexSegment(rtIndex)
sessionConf.get("tez.queue.name") != null
out.writeDouble((Float)obj)
new StringBuilder()
String.format(SCOPED_AUTHORIZE_URL,formURLEncode(config.getCallback()),formURLEncode(config.getScope()))
findDelegate(name)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
fullName.split("[/@]",2)
Assert.assertEquals(result,expected)
new CompilerException(sourceName,e.line,e.getCause())
public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={"8:9: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,"}",9)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"9:15: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,"}",15)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK" + "/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"5:72: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,"}",72)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.SAME.toString());     final String[] expectedViolation={"7:27: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,"}",27)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
TestUtils.randomByte() + 127
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
new IntRangeValidator(1)
checkpointPath.getPath()
field.getFieldName().equals(s)
newId > max
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
new StringBuilder()
Cli.buildCli("presto",Runnable.class)
rSocketMessageHandler.serverResponder()
FILES_BYTES * 1000L
sequenceFileVersion == SEQUENCE_FILE_VERSION
controller.getState() != ServiceController.State.UP
framework.getBroadcasterFactory().lookup(a.broadcaster(),true)
test("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
new PkgControl(stack.peek(),name,regex)
container.getTimeFormat().equals(TimeFormat.DATE)
file.getFileName()
LOG.warn(e.getMessage())
new BindException(concept,"concept")
KeyType
adapter.getArgumentResolvers()
Mockito.anyString()
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
(short)777
logger.debug("Retreiveing door data")
public Integer getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
log.error("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
SecurityUtils.isSecurityEnabled(configuration)
EJBException nsee
new StringBuilder(639)
processInstanceArray.size() == 0
BufferUtils.freeMemory(bytebuffer)
ctClass.toClass()
checkNotNull(jobName,"The data sink must not be null.")
/**   */ class SctpServerPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn("Failed to accept a connection.",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to initialize an accepted socket.",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a partially accepted socket.",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a selector.",e); } } } } } 
fields.put(PERMISSIONS,permissions)
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
maxSize(new Fixed(width))
setAttributeInternal(inodePath,true,opTimeMs,options)
ImmutableList.of(interceptors)
id=15837
taskService.createTaskQuery().orderByTaskId()
profileCluster.clear()
PathUtils.concatPath(filePath,YML_FILE_DIR)
modulePath.split(File.pathSeparator)[1]
RaftJournalSystem.class
HBaseConfiguration conf
cacheDirectory.exists()
content.readable()
securityDomain != null
new DefaultAsyncHttpClient()
this.context.getLogAggregationStatusForApps().add(report)
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
System.currentTimeMillis()
Object edge
NodeUtil.getFunctionNameNode(enclosingFunction)
assertFalse("reuse-address",networkConfig.isReuseAddress())
ufsPath.getPath()
req.getRequestURI()
dic.buildRouterChain(invokers)
op.getIDLName()
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,true)
requestModels.entrySet()
createMessageConsumer(session,destinationName,messageSelector,false,null,true)
new Vector2()
processEngineConfiguration.getCommandExecutorTxRequiresNew()
conf.getSearchBaseURL()
AlluxioWorker.class
dis.read(serializedData,0,length)
id=13
System.getProperty("RecoveryEnvironmentBean.expiryScannerClassNames") != null
request.getTaskDefinitionKey()
Color.fromRGB(0xC354CD)
r.getUri().toString()
n.intValue()
buildPages.getTypes()
Optional.of(resourceManagementScheduler)
postAgg.getName().equals(topNMetricName)
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
entry.getOriginalUri()
cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)
new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)
mapper.getJsonFactory()
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
BlockMasterClient.class
proxy == null
GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))
0 - originY
new IllegalStateException()
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
mTfs.setPin(mTfs.open(path),true)
dic.buildRouterChain(invokers)
BED(99)
plugin != null
assertTrue(predicate.apply(pickleEvent))
new PrestoException(INVALID_CAST_ARGUMENT,e)
mWorkerId + BASE_FILE_NUMBER
size=500
return 30; 
hz1.getLifecycleService().terminate()
-1
Context.getEncounterService().createEncounter(encounter)
prefSize(new Fixed(width))
body.getData()
pos < len
ps.setString(i,parameter)
oldestNode == null
this(parameters,new StringBuilder(),false); 
assertEquals(2000,timeout)
size=5000
new StringBuilder(239)
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
Integer requestRequiredAcks
assertEquals(ex.getCause().getMessage(),"ClassInfo's name should be non-null")
map.put(USERNAME_KEY,password)
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
region.getRegionId()
CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
"Content-Type".equals(name)
factory.getEmbdeddedServletContainer()
modulePath.split(File.pathSeparator)[1]
Assert.assertEquals(1,intValue)
batteryVp >= high
bindingConfig != null
retVal.put(entry.getKey(),value)
delta < 5000
this.transactionsRepository.removeTransaction(this.xidTransactionID)
GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)
this.getNotEmptyWaitThreadPeak()
LOG.error("Ignoring duplicate class " + className)
System.currentTimeMillis()
f.cancel(true)
asyncContext.continueAsyncTraceObject()
primitiveType != null
Bytes.toString(qualifierName)
LOGGER.warn("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
Utils.isZkAuthenticationConfiguredStormServer(topoConf)
nodeEngine.getService(LockService.SERVICE_NAME)
currentTime.get() / 1_000L
Optional.of(resourceManagementScheduler)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
logger.warn("gave up waiting for query reply from device {}",m_address)
Arrays.asList("ls","pwd")
dests.size() == 1
clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)
request.charset != null
localCache.put(name,NULL_ENTRY)
currentPath.isEmpty()
Throwable e
handler instanceof ChannelInboundHandler
LOG.info("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
factory.getEmbdeddedServletContainer()
Iterable<ObjectType>
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractACLCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
Files.delete(dir.toPath())
publisher.publishWanReplicationUpdate(name,view)
new byte[10]
Object.class
this.transactionsRepository.removeTransaction(this.xidTransactionID)
log.info("Performing lookup: %s --> %s",nodeIds,retVal)
xtw.writeCharacters(customProperty.getSimpleValue())
CalciteTests.createMockSystemSchema(druidSchema,walker)
new JGroupsFilter(bc,event.getAtmosphereConfig().getWebServerName())
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
SampleCacheApplication.class
new MultitouchTest()
mock.expectedMessageCount(0)
new StringBuilder(239)
request.getRequestURI()
map.lock(key,4,TimeUnit.SECONDS)
DefaultAtmosphereRequest request
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",jobId,queryableStateName)
in.readObject()
ast.atnState != null
channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))
logger.warn("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))
logger.info("Creating extern file for exports")
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)
timeoutLatch.await(1200,TimeUnit.MILLISECONDS)
assertThat(context).getBeans(HandlerMapping.class).hasSize(7)
DataStream<OUT>
id=14
SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
-1
preloadQueue.size == 0
getTokenNames()
seenServiceNames.contains(serviceName)
routes.BufferResource()
n.getNodeData().x()
getTimeout()
bean.getCollectionCount()
jniGetLocalAnchorA(addr,tmp)
lastUpdate.after(updated)
new Font(nodeFontName,nodeFontSize,nodeFontStyle)
values == null
(Integer)criteria.uniqueResult()
resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
node.getNodeName()
builder.addDependency(RegistryInstallerService.SERVICE_NAME)
serverService.getIncomingInterceptors()
contentType != null
GL20.glGetVertexAttrib(index,pname,params)
System.identityHashCode(this)
IllegalArgumentException e
element.getNodeName()
HazelcastClient.newHazelcastClient()
websocketComponent.setMaxThreads(11)
cf.getCompressionType() == null
connection.remote().nextStreamId()
this.thrown.equals("File must not be null")
yamlFactory.createJsonParser(input)
assertClusterSize(2,nodes[0])
expression.indexOf("${") >= 0
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalArgumentException cannotCloseTransactionContainerEntityManger(); 
id=14239
mWorkerId + BASE_FILE_NUMBER
InterruptedException e
endpointA.expectedBodiesReceived("A blue car!","A blue car, again!")
public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } 
calendar.getTimeZone().getDSTSavings()
Assert.notNull("No cache with name '" + cacheName + "' found.")
SaslException.class
i=0
BroadcasterFactory.getDefault().get(mapping)
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).count())
offset(1.0)
new MockQueryExecution(1)
GL20.glUniform2(location,v)
invocation.pendingResponse == null
Thread.sleep(100)
ExceptionUtils.getFullStackTrace(th)
@Override public ResponseImpl description(String description){   this.setDescription(description);   return this; } 
context.getLogger().logAttributeWarning(address,SLOT_ATTRIBUTE_NAME,MESSAGES.invalidJSFSlotValue(slot.asString()))
callback.done(true)
serversByLoad.lastKey()
layout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(availableStrategiesComboBox,0,232,Short.MAX_VALUE)
visitNode(node,context)
resultsE.appendChild(reportE)
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true,null)
MESSAGES.failToReplicateAttribute()
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
slice.getAddress()
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
response.set(ROLLED_BACK)
logger.warn("{} {}",errorCode,message)
totalBytesOnTiers.get(tierAlias) > 0
capacity > 1 << 30
AttributeUtils.getDefault().getMin(column,valuesArray)
new StringBuilder(561)
getExecutorServiceManager().shutdown(errorHandlerExecutorService)
failure != null
type.getSimpleName()
instance2.getLifecycleService().terminate()
user.getSystemId() == null
logger.debug("Received MyQ  JSON: {}",dataString)
generator.generateX509Certificate(signedByKeyPair.getPrivate())
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,false,false,factory)
assertTrue(jmsTemplate.isPubSubDomain())
modifiers.branchContains(TokenTypes.LITERAL_PRIVATE) || modifiers.branchContains(TokenTypes.ABSTRACT) || modifiers.branchContains(TokenTypes.FINAL)
tokens.toString()
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
BlockMasterClient.class
(Long)strategy.getOrNull(third)
Foundation.NSLog("[debug] " + tag + ": "+ message)
Sets.<Integer>newHashSet()
excludesPattern == null
DirectMessage.constructDirectMessages(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json"))
outputBatchSize=25
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
JSError.make(ModuleLoader.MODULE_CONFLICT,"my/js.js")
test("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
conf.getSearchBaseURL()
queryParams != null
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; 
size=1000
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,53.98)
new HttpParameter("retweets",enableDeviceNotification)
processInstance.getId()
cache.flush()
dateOfBirth == null
logger.trace("Receive queue ADD: Length={}",recvQueue.size())
invoke(args.first(),args.rest())
Preconditions.checkNotNull(fileSystemMaster)
secConn != null
Integer.valueOf(matcher.group(1))
engine.execute(query).toString()
assertEquals(expectedPlan,actualPlan)
toRemove[0]
String id=reader.getAttributeValue(null,"id"); 
request.getContentType().equals("application/x-www-form-urlencoded")
TestUtils.randomByte() + 127
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,true))
mkdirs(mBaseDir)
{(byte)this.getNode().getNodeId(),3,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE}
table.getParameters()
Thread.sleep(1200)
simple.getFromSentDate()
lineageInfo.getParents()
ssl.has(CommonAttributes.PROTOCOL)
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(2000)
return false; 
s.contains(a.getName())
Foundation.NSLog("[info] " + tag + ": "+ message)
boundary.startsWith("\"")
logger.debug("NODE {}: App version requested but Version class not supported",this.getNodeId())
ImmutableList.of(modules)
context.setDelayer(2000)
requestContext.getUri().getPath()
getExecutorService()
nodeEngine.getService(LockService.SERVICE_NAME)
ServiceLoader.load(WorkerFactory.class)
planNode.getPlanNodeCpuTime()
createRecord(value,expiryTime)
util.getDataTestDir(table)
@Override public Object getValue(){   return getThreadCount(state); } 
out.writeObject(function)
graph.getEdges()
setEternal(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
conf.getSearchBaseURL()
Float.parseFloat(position.getChildByName("Y").getText())
Integer.valueOf(sessionTTL)
builder.addDependency(RegistryInstallerService.SERVICE_NAME)
isTrivial()
javaWriter.emitSingleLineCOmment("foo")
bindingGroup.has(PORT_OFFSET)
MESSAGES.pathEntryNotFound(path)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
nlDataOutNodes != null & nlDataOutNodes.getLength() > 0
id=78
metastore.getHostText()
(short)0755
packed[j]
partProps.size()
id=15851
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("hello"))
id=15843
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
assertEquals(2000,timeout)
status().isMovedTemporarily()
configList.size() == 0
ActionsEnum.valueOf(action)
runAllTasks()
COUNT_DATABASE.put(key,val)
Thread.sleep(3000)
options.getLambdaRole()
Long.valueOf(timeout)
defaultCamelContext.removeRouteDefinition(id)
new IncrementalIndexSegment(index)
public String getText(){   return text; } 
id=28
is(4)
nodeEngine.getService(LockService.SERVICE_NAME)
obj1.isLoose || obj2.isLoose
LOG.fatal("Could not append. Requesting close of wal",e)
GL20.glUniform1(location,toIntBuffer(v,offset,count))
engine.execute(query).toString()
latch.await(1,TimeUnit.MINUTES)
HornetQAutoConfiguration.class
latch.await(100,TimeUnit.MILLISECONDS)
this.thrown.equals(IllegalStateException.class)
Integer.valueOf(st.nextToken())
TimeUnit.SECONDS.toMillis(4)
new PrestoException(INVALID_CAST_ARGUMENT,e)
n.getCharno()
dis.read(serializedData,0,length)
hashFunction.newHasher().putBytes(littleEndian)
getCurrentRequestId()
InputProcessor[]
target.directory("zk" + id + "data")
javaWriter.emitSingleLineCOmment("foo")
new IOException()
count <= 0
uuid != null
"Invalid modules directory: " + modulesDir
getMockEndpoint("mock:event").expectedMessageCount(5)
!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)
k < THREADS
request.getLocalAddr()
assertThat(cli.getErrorOutput().length(),equalTo(0))
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf")
cache5.setColor(red)
id=20
new CommandFormatException("Communication error",e)
new StringBuilder()
Call<L>
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",BIGINT)
Iterable<Symbol>
oldModel.getVendorExtensions().get("x-className") == null
level <= RF_STATUS_MEDIUM_SIGNAL
FsDatasetImpl.LOG.info("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
ownedEntryCount >= nearCacheSize
timeout=60_000L
Thread.sleep(2000)
preserve.toString()
logger.error("Failed to enumerate network interfaces",e)
parameter.toString()
x instanceof ISeq
coreThreads.asString()
rackIdToNodes.get(rid)
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)
statistics.addGetTimeNano(System.nanoTime() - start)
CommonUtils.randomString(random.nextInt(10))
clusterService != null
ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining("AutoFactory does not support generic types").in(file).onLine(6)
o instanceof CreateOptions
Preconditions.checkNotNull(mBlockIdsOnTiers)
targetDescription.getClassName()
Long.valueOf(timeout)
Double.valueOf(value.toString())
new StringBuilder(246)
Column::toString
System.currentTimeMillis()
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
javaWriter.emitSingleLineCOmment("foo")
conceptAnswer.getConcept()
public static XQueryBuilder xquery(File file) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
Values.UPGRADE.equalsIgnoreCase(connection)
bundleContext.getBundle().getEntry(uri)
Character.isSpaceChar(origText.charAt(i))
assertEquals(expectedPlan,actualPlan)
registrar.checkExisting(metric)
mLineageStore.requestFilePersistence(fileId)
id=15849
Preconditions.checkNotNull(mBlockIdsOnTiers)
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
return areaHeight; 
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
this.conf.addResource(yarnSiteXMLInputStream)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
var.setValue(guessType(value))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicLocalTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)
NoopChatHandlerProvider.class
totalTime / curTime == curOps
supportSession=true
startOffset > pages.size()
writer.write(line)
success
mock(ExampleService.class,MockReset.before())
id=53
logger.info("Session created")
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))
this.thrown.equals("File must exist")
new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
assertMockEndpointsSatisifed()
Thread.sleep(2000)
!returnValue
HIVE_PARTITION_OFFLINE(6,EXTERNAL)
out != null
id=78
setUnknownLabels(binarized,mainLabel)
replicatedMapService.getReplicatedRecordStore(mapName,false)
ModuleIdentifier.create(moduleName)
websocketComponent.setMaxThreads(11)
@IntMethodAnnotation(value=43)
new StringBuilder(741)
message.contains("14807") || message.contains("14883")
routes.BufferResource()
new CustomChangeException("Failed to insert one or more concept map types")
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN)
new PoolBagEntry(null,pool)
conf.getSearchBaseURL()
Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())
ParseUtils.parseHumidity(S300TH_DATA_1)
return false; 
Map<Integer,Object>
rt == Boolean.TYPE
IOUtils.closeQuitely(is)
DiagnosticType.error("JSC_GOOG_MODULE_IN_NON_MODULE","goog.module() call must be the first statement in a module.")
userGroupMember.getMemberId()
instance2.getLifecycleService().terminate()
new ClusterConfiguration("whatever",StringLogger.DEV_NULL,"cluster://1","cluster://2")
JmxReporter.class
testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
!mpline.contains(boundary)
new String(bytes2)
new IllegalStateException()
id=15859
lookup(parseName(name))
new VariableInformation(10,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
Object edge
mWorkerId + BASE_FILE_NUMBER
tx == null
IOException e
getExecutorServiceManager().shutdown(errorHandlerExecutorService)
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml")
TimeUnit.SECONDS.toMillis(25)
manager != null
LOG.warn("Failed to get mount information: {}",e.getMessage())
stat.st_size.get()
SimpleAttributeDefinitionBuilder.create("file",ModelType.OBJECT,true)
NoopChatHandlerProvider.class
(Node)container
new IntRangeValidator(1,true,true)
ConditionalOnEnablednHealthIndicator.class
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes())
Math.min(clientCount,1)
id=15857
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)
GL.glPolygonOffsetEXT(factor,units)
await().atMost(5,TimeUnit.SECONDS)
bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())
factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))
julLogger.info("Hello world")
options != null
items[31]
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,outputFieldTypes[i].getDisplayName(),setOperationName,descFieldType.getDisplayName())
parent.incrementPrioritizableForTree(amt,oldParent)
Character.toLowerCase(ch)
dateOfBirth == null
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
ReferenceCountUtil.safeRelease(holder)
capacity > 1 << 30
Arrays.asList("bool","qint32","qint64")
mock.setMinimumResultWaitTime(1900)
logger.info("Normalizing")
log.warn("Could not annotate via server! Trying to annotate locally...",t)
assertEquals(fc,fc2)
Preconditions.checkNotNull(location)
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
transform.setToRotation(new Vector3(1,0,1).nor(),angle)
Validate.notEmpty("Cookie name must not be empty")
request.getRequestURI()
from.getClass()
javaBeanSerializer.getFieldValues(json)
sourceEdgeTextData.getText().isEmpty()
SecurityUtils.isSecurityEnabled(configuration)
table != null
Context.getEncounterService().createEncounter(encounter)
MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())
ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)
new EnumValidator<TransactionMode>(TransactionMode.class,true,false)
SocketUtils.findAvailableTcpPort(40000)
msg.getType() == Message.Type.error
getSslStoreProvider().getKeyStore()
assertEquals(expectedPlan,actualPlan)
grammar.getTokenNames()
assertThat(response).isEqualToIgnoringCase("Ok.\n")
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
delayer != null
DruidDataSourceUtils.isRemoveAbandoned(datasource)
AbstractRanking.refreshMinMax(this,graph)
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx)
new BindException(concept,"concept")
GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))
privObj.getObjectName().equals("masking_test")
value >>> 8
hazelcastFactory.newHazelcastClient()
userGroupMember.getMemberId()
getTimeout()
private final StringBuffer tmpSb=new StringBuffer(); 
this.conf.addResource(coreSiteXMLInputStream)
QUEUE_TRANSACTION_LOG_RECORD=43
assertThat(ds.getValidationInterval()).isEqualTo(30000L)
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while")
grammar.getTokenNames()
new Packet(data,0,serializationService.getPortableContext())
size=50000
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
string.length() >= 0
new WebApplicationException(serverError(e))
jarName.endsWith(".jar")
id=15805
views.html.search.noresults.render(currentUser(),q,searchResult)
sorted_files.get(i).createReader()
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRoles"))
details.put(fileName,Long.toString(timestamp))
start.expectedMessageCount(6)
javaWriter.emitSingleLineCOmment("foo")
"Segment initialized with too large address: " + address + " ; Max allowed address is "+ (Long.MAX_VALUE - Integer.MAX_VALUE - 1)
assertClusterSize(2,nodes[0])
getTimeout()
Lists.newArrayListWithExpectedSize(resultMessages.size())
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())
factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)
methodsToImplement(methods)
assertEquals(8,set.size())
new byte[17]
TimeUnit.SECONDS.toNanos(5)
StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))
Collection<String>
NETHER_WATER(115)
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
logger.info("Named " + namedCount + " anon functions using "+ bytesUsed+ " bytes")
new byte[9]
model.getEnum().size() == 2
logger.info("Session created")
offsetRepository != null
response.getHeader(Exchange.CONTENT_TYPE) != null
index > capacity()
id=37
PostgreSQLConnector.class
hz.getCluster().getLocalMember().isSuperClient()
logger.info("Calimero library version {}",Settings.getLibraryVersion())
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
CompletableFuture<Boolean>
world.add("capsule",5f,2.125f,5f)
new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName())
new StringBuilder()
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
id=45
GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)
i <= repeatCount
RequestBody.create(mediaType,(String)bodyContents)
Preconditions.checkNotNull(timer)
LOG.error("Failed to find " + baseDirectory.getAbsolutePath())
AcquireJobsRunnable.class
req.startAsync()
mapContainer.getMapConfig().getMaxIdleSeconds() * 1000
27 * ClassSize.REFERENCE
getConnectionFactory()
from("direct:c").delay(500)
fragUtils.getClass()
new IllegalStateException()
broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())
war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),"web.xml")
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
getNonCompilablePath("InputDefaultConfig.java")
request.getLocalAddr()
latch.await(10,SECONDS)
ChannelBufferHolders.catchAllBuffer()
500 * 1000000L
logger.debug("Invalid Account Credentials")
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",true,false,false)
GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))
GL11.glGetFloat(pname,params)
HIVE_TABLE_OFFLINE(2,EXTERNAL)
propMember.getType(beanDesc.bindingsForBeanType())
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
LOG.info(getName() + " caught: ",e)
mTableInfo.getTableName()
logger.trace("Receive queue ADD: Length={}",recvQueue.size())
legacyModel.isDefined()
StatBuckets.prettyUptime(secs)
vindex >= Short.MAX_VALUE
return context; 
sizeNeeded >= items.length
CellUtil.estimatedHeapSizeOf(cell)
new ModelNode().set(25000)
new ModelNode().set(60000)
getSessionTimeout().toMinutes()
logger.info(sb.toString())
LOG.error(e.getMessage())
request.getTaskDefinitionKey()
connection.subscribe(jedisPubSub,patterns)
DUE_DILIGENCE_MILLIS=50
UnderFileSystemUtils.deleteIfExists(mUfs,mTempCheckpointPath)
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new ValueAndTagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.value,this.tags);   }   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
GL20.glGetShader(shader,pname,params)
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
context.startRoute("consumer")
@ConditionalOnEnablednHealthIndicator("db")
exportReturnCodes(exporter)
pool != null & pool.getDataSource().getClass().isAssignableFrom(iface)
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null)
Arrays.asList("Int","Float","Double","Bool","Void","String","Character")
totalTime / curTime == curOps
topicRegistrations == null && topicRegistrations.isEmpty()
mock.expectedMessageCount(10)
executionManager.findChildExecutionsByParentExecutionId(processInstanceId)
LOG.error("Cannot resolve the host name for " + regionAddress + " because of "+ e)
InetAddress.getLoopbackAddress()
logger.error("Cannot retrieve item {} for widget {}",itemName,w.eClass().getInstanceTypeName())
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
Color.fromRGB(0xD88198)
serverService.getIncomingInterceptors()
ModelVersion.create(3,0,0)
ugi.reloginFromKeytab()
List<Object>
applicationStatistics.incrUpdateUserTimes()
args.length < 1
assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
WALSplitter.moveAsideBadEditsFile(walFS,edits)
this.healthMvcEndpointProperties.getMapping() != null
Context.getAdministrationService().saveGlobalProperty(coreProp)
attribute.getDefinition().getAttributeMarshaller()
GL20.glUniform4(location,v)
createRecord(value,expiryTime)
is("/home/source")
ar.cause()
progress.start(0.19f)
logger.debug("Retreiveing door data")
-26
SaveTask.class
src[srcIdx]
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new ChannelInboundHandlerAdapter(){   @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {     if (evt instanceof WebSocketServerProtocolHandler.HandshakeComplete) {       assertNull(ctx.pipeline().context(WebSocketServerProtocolHandshakeHandler.class));     }   } } 
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
mm.tryLock(key,4,TimeUnit.SECONDS)
public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
decoder.readOutbound()
1000 * 5
POLL_PERIOD=100L
E extends Model
this == OtiOnly
GL20.glGetVertexAttrib(index,pname,params)
DefaultAtmosphereRequest request
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)
id=15868
table != null
in.readObject()
logger.debug("myq securityToken: {}",securityToken)
Nd4j.getAffinityManager().getDeviceForThread(Thread.currentThread())
private final String mBindHostKey; 
return r; 
id=15855
AdviceWithTasks.removeByToString(route,toString,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
DateTimeZone.getDefault()
Iterable<TypedVar>
Thread.sleep(50)
Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
-1
attribute.getDefinition().getAttributeMarshaller()
b.length() - 1
transitiveClosure.setNumberOfPartitions(6)
(InvocationTargetException)wrapped
registry.put("firehoseClient",amazonKinesisFirehoseClient)
element.getChildByName("properties")
messageHandler.serverAcceptor()
id=51
saveRunnable instanceof LongTask
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
Dagger_AutoFactoryProcessorComponent.builder()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicLocalTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
request.getServletPath()
MathUtils.random(height)
new StringBuilder(730)
Throwable t
(BeanDefinitionRegistry)context
Math.abs(diff - maxAge) <= 1
new StringBuilder()
dstPath.getValue()
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null,null)
SimpleAttributeDefinitionBuilder.create("max-inclusive",ModelType.BOOLEAN)
List<String>
final DeletionRetentionStrategy deletionRetentionStrategy=clusterConfigService.get(DeletionRetentionStrategy.class); 
id=36
registry.put("sessionStateListener",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )
private final String mHostNameKey; 
new StringBuilder(561)
asList(4L)
timeMillis - MILLIS_IN
sExecutorService.shutdown()
testerAnnotation.getClass()
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly))
AsyncResult<Boolean>
capacity > 1 << 30
condition.isEmpty()
id=48
ResponseBody.create(MediaType.get("text/plain"),new byte[0])
registry.put("sessionStateListener",new SessionStateListener(){   @Override public void onStateChange(  SessionState arg0,  SessionState arg1,  Session arg2){   } } )
data.limit()
serversByLoad.lastKey()
assertEquals(4933401,received.get(0)[1])
assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)
realIndex < columns.size()
FsDatasetImpl.LOG.info("Completed checkDirs. Removed " + removedVols.size() + " volumes. Current volumes: "+ this)
id=24
GL20.glUniform4(location,v)
mock.expectedMessageCount(0)
hotDrinkDelay=500
DiagnosticType.warning("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
Preconditions.checkNotNull(uri)
public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper){   configBuilder.setScheduledExecutorService(reaper);   return this; } 
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
nameDefinitionMultimap.keySet()
assertMockEndpointsSatisifed()
!NettyUtils.isDomainSocketSupported(dataSource)
new IllegalStateException()
-1
200000 * 4 * 3
registry.put("connectionFactoryMock",connectionFactoryMock)
ssl.has(CommonAttributes.CERTIFICATE_KEY_FILE)
assertEquals(expectedPlan,actualPlan)
id=55
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
recordDefaults(HiveS3Config.class).setS3AwsAccessKey(null).setS3AwsSecretKey(null).setS3Endpoint(null).setS3SignerType(null).setS3PathStyleAccess(false).setS3UseInstanceCredentials(true).setS3SslEnabled(true).setS3SseEnabled(false).setS3SseType(PrestoS3SseType.S3).setS3SseKmsKeyId(null).setS3KmsKeyId(null).setS3EncryptionMaterialsProvider(null).setS3MaxClientRetries(5).setS3MaxErrorRetries(10).setS3MaxBackoffTime(new Duration(10,TimeUnit.MINUTES)).setS3MaxRetryTime(new Duration(10,TimeUnit.MINUTES)).setS3ConnectTimeout(new Duration(5,TimeUnit.SECONDS)).setS3SocketTimeout(new Duration(5,TimeUnit.SECONDS)).setS3MultipartMinFileSize(new DataSize(16,Unit.MEGABYTE)).setS3MultipartMinPartSize(new DataSize(5,Unit.MEGABYTE)).setS3MaxConnections(500).setS3StagingDirectory(new File(StandardSystemProperty.JAVA_IO_TMPDIR.value())).setPinS3ClientToCurrentRegion(false).setS3UserAgentPrefix("").setS3AclType(PrestoS3AclType.PRIVATE).setSkipGlacierObjects(true)
getDatabaseCatalog() != null
complete.expectedBodiesReceived("finish","stop","faulted","except")
capacity > 1 << 30
entry != null
singletonComponent == null
new Duration(2,SECONDS)
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
streamTokenizer.ttype == StreamTokenizer.TT_WORD
sizeNeeded >= items.length
createRecord(value,expiryTime)
notifier.isIgnoreExchangeSentEvents()
CommonUtils.randomString(random.nextInt(10))
atlasFile.path()
LOG.info("Getting asynchronous method stub from channel")
this.thrown.equals(IllegalStateException.class)
logger.debug("Retreiveing door data")
Metric<Long>
/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX="Check";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName="WARN";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append("] ").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(" [").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } 
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_by_me.json",null,paging.asPostParameterList(),true))
this.thrown.equals("File must exist")
System.currentTimeMillis()
Long.valueOf(args[2])
TIMEOUT=20000L
mHeartbeat != null
order.getInstructions()
VertexAttribute.Color()
AtmosphereResponse.create()
isDoubleA && isIntA
cal.set(1900,1,1,hour,minute,second)
public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)
Object message
JedisConnectionException e
new StringBuilder()
monochrome=true
((Number)s.first()).intValue()
getClientConfig().getAddressList()
assertMockEndpointsSatisifed()
recursiveUFSDeletes.remove(ancestor)
id=34
setAttributeInternal(tempInodePath,true,opTimeMs,options)
assertEquals(avDegree,1.0)
assertEquals(expectedPlan,actualPlan)
"Can't have more than 32767 vertices per batch: " + maxTriangles
Character.toLowerCase(ch)
Set<Item>
EmptyResponse.class
connection.subscribe(jedisPubSub,patterns)
getRegistry().put("hb",hb)
First=word.substring(0,3)
BufferUtils.newByteBuffer(fileSize)
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
jmsManager.destroyTopic(name)
Object node
reg.getCounters(transformFilter(filter))
success
new GZIPOutputStream(outputStream,true)
ours=theirIterator.next()
id=19904
config.get(CONFIG_KEY_READ_TIMEOUT)
"Can't have more than 32767 vertices per batch: " + maxTriangles
width - originY
System.nanoTime()
mViewAbove.setCurrentItem(2,animate)
AlluxioWorker.class
Thread.sleep(100)
VertexAttribute.Color()
location.belongTo(BlockStoreLocation.anyTier())
TransactionException e
Thread.sleep(10)
id=15838
new UnsupportedOperationException("Command not found in bolt message: " + shellMsg)
500 * 1000000L
MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)
checkArgument(!"/".equals(resourcePath),"%s is the classpath root")
assertFalse(predicate.apply(pickleEvent))
Exception ex
mapper.getJsonFactory()
part.getDataLocation()
engine.execute(query).toString()
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),false)
ChannelBuffers.copiedBuffer(request.getByteData())
hasMatch=true
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel())
rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1
ArrayList<TaggedWord>
f.getAttrs().getATime()
id=56
private Actor actor; 
error.expectedMessageCount(2)
new StringBuilder(709)
retries=2
Namespace.CURRENT.toString()
TimeUnit.SECONDS.toMillis(4)
assertThat(throttledLines(Duration.milliseconds(100))).doesNotHaveDuplicates().haveAtLeast(9,containsApplicationLog).haveAtMost(12,containsApplicationLog)
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onThreadPoolAdd","onContextStop")
return EOF_BLOCK_ID; 
method.invoke(method,ByteBuffer.allocate(1))
this.r != null
DefaultManagementAgent.class
getCurrCapacity()
realPointerIndex > AndroidInput.NUM_TOUCHES
!regex.equals(lastRegex)
assertMockEndpointsSatisifed()
Tuple2.of(timeoutPattern4,13L)
Set<String>
new FieldFrame(null,true,null,null)
customerResourceLocator(url)
request.getLocalAddr()
attribute.getDefinition().getAttributeMarshaller()
mMountTable.resolve(getPath(lastInode)).getPath()
sanitizedName(name)
assertMockEndpointsSatisifed()
checkForMisplacedBindingAnnotations(method,errors) | !isValidMethod(injectableMethod,errors)
xtw.writeCharacters(customProperty.getSimpleValue())
inUseByte != Record.IN_USE.byteValue()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
stat.st_ctim.tv_nsec.get()
out.write(this.connectionAddress.getPort())
deployOneTaskProcess()
assertEquals(2,map.size())
executor.submit(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
GL20.glGetProgram(program,pname,params)
new byte[17]
alpha=1
objects == null
webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
callTimeout=5000
statistics.addRemoveTimeNano(System.nanoTime() - start)
n.getNodeData().x()
/**   * Telnet port.  */ private String port="5000"; 
fireMessageReceived(ctx,completeMessage)
pool.dealloc()
factory.getEmbdeddedServletContainer()
map.set(keyValue.getKeyData(),value,0,TimeUnit.SECONDS)
promise.setFailure(new ClosedChannelException())
i=4
InputProcessor[]
Thread.sleep(100)
!SystemPropertyUtil.getBoolean("io.netty.noJdkZlibDecoder",true)
engine.execute(query).toString()
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
invoke(args.first(),args.rest())
connections.get(address)
Object edge
getLog().error("register druid-driver mbean error",ex)
/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     return sb.toString();   } } 
assertNotPresent(GsonConverter.class)
Class.forName(serializerConfigClassname,true,userCodeClassLoader)
sizeNeeded >= items.length
reservedWords.contains(codegenProperty.datatypeWithEnum)
@InputIntMethodAnnotation(-44)
newEmbeddedDatabaseBuilder(path)
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)
deployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(Initializer.class,new ImmediateInstanceFactory<ServletContainerInitializer>(initializer),NO_CLASSES))
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
pairs != null
sizeNeeded >= items.length
new InputStreamReader(is)
Integer.valueOf(sessionTTL)
fMethodDescriptions.put(method,description)
Thread.sleep(100)
new StringBuilder()
DEFAULT_HEAP_LIMIT_CAP=500
stopTimeNs - responseStartTimeNs
@ConditionalOnEnablednHealthIndicator("elasticsearch")
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
items[23]
mockRegionInfo.isMetaRegion()
new IllegalArgumentException("negative offset:" + offset)
-1
LOG.fatal("Could not append. Requesting close of wal",e)
GatherGettersAndSetterProperties.update(compiler,externs,root)
new BindException(concept,"concept")
Bytes.toBytesBinary(regionname)
assertEquals(6,set.size())
getCurrCapacity()
case 11: 
r.destination != null
System.currentTimeMillis() - start + 200
parent.incrementPrioritizableForTree(amt,oldParent)
values.equals(values[i])
logException(id,exception)
List<String>
contact.GetWorldManifold()
new ExchangePatternType(exchangePattern)
JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION)
GL11.glTexParameter(target,pname,params)
result.addEnchantment(enchantment,(Integer)entry.getValue())
builder.put(columnHandle,0L)
maxRowsPerFrame=100_000
@Override public ResponseImpl header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
super.setV(u)
logger.info("Calimero library version {}",Settings.getLibraryVersion())
tiled != null
setAll(lowResults,highResults,expectedResults,MUC_TP,5965)
ChannelBuffers.copiedBuffer(bytes,0,length)
root.toURL()
planNode.getPlanNodeScheduledTime()
assertEquals(0,beanInfo.getAttributes().length)
connectors.put(connectorName,connector)
assertSame(conf,(Configuration)serializeDeserialize(conf))
capacity > 1 << 30
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)
connectPromise.setFailure(t)
log.warn(e,"Graceful shutdown of task[%s] aborted with exception.")
superClass == Object.class
request.getServletPath()
index <= mInUseLocks.length()
assertEquals(15,tokens.size())
i > BY_WOOL_DATA.length
indexOutURI.getPath()
logger.warn("gave up waiting for query reply from device {}",m_address)
logger.debug("Mapped {} to {}",t,e.getValue())
servers.isEmpty()
private final DefaultChannelPipeline pipeline; 
getBinaryTupledSet()
Response<L>
log.error("Checking bounds [{}, {}) (expect {} keys)",new Object[]{startCol,endCol,expected.size()})
"Unsupported filesystem scheme found in the backup target url. Error Message: " + newMsg
-1
logger.debug("Retreiveing door data")
RevisionVersion=2
factory.getEmbdeddedServletContainer()
kryo.readObjectOrNull(input,JobID.class)
mWorkerId + BASE_FILE_NUMBER
logger.info("Calimero library version {}",Settings.getLibraryVersion())
JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
DelimitedRecordHiveMapper.class
variables.putAll(variables)
maxInvocationCountObservedDuringWarmup * 1.2
id=15846
badLine.getMessage()
callTimeoutMs=5000
GL20.glVertexAttribPointer(indx,size,normalized,stride,((ByteBuffer)buffer).asFloatBuffer())
assertMockEndpointsSatisifed()
frameHandler.getClass() == FrameAggregator.class
Collection<Data>
nodeEngine.getService(LockService.SERVICE_NAME)
public class CourierNew extends FontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
new IllegalStateException()
LOG.error("Unable to delete {} because listInternal returns null",path)
logger.info("Parsing Dep: " + filePath)
blocked.isDone()
id=15864
CalciteTests.createMockSystemSchema(druidSchema,walker)
public class XpathRegressionMultipleVariableDeclarationsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
Throwable ex
public DerivedBuilder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
/**   * The resource.   */ private T mResource; 
read(buffer)
lc + pb
statistics.addPutTimeNano(System.nanoTime() - start)
JsonNode::isLong
InetAddress.getLocalHost()
Integer.parseInt(parts[1])
assertThat(xml).isEqualTo(expectedContent)
new NagiosNscaStub(25667,"secret")
error("Unable to connect due to unrecognised server certificate")
planNode.getPlanNodeCpuTime()
"Requeuing shutdown because rootScanned: " + rootScanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
GL11.glGetTexParameter(target,pname,params)
rsMeta.getColumnName(i + 1)
LOG.debug("EOL(end-of-line) defined for the CSV: {}",crlf)
call.getRpcTimeout()
testConsumerConfig()
Integer.valueOf(tokens[3])
readBytes >= 0
i >= 0
PositiveIntegerValidator.class
endFunction("delete_column_statistics_by_partition: ",ret != false)
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") IllegalStateException sessionTypeNotSpecified(String bean); 
tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS || tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND
subtypeProps.isEmpty()
DataStream<OUT>
value={StringFilterAggregator.class}
defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary
Integer[]
public Long getAutoCommitInterval(){   return this.autoCommitInterval; } 
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); 
logger.error("Failed to enumerate network interfaces",e)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
value={StringFilterAggregator.class}
XMLInputFactory.newFactory()
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)
CellUtil.estimatedHeapSizeOf(cell)
logger.warn("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
new ZipAggregationStrategy(true)
context.startRoute("consumer")
verifyViewMethodsNotDeclaredFinal(sessionBeanClass,remoteBusinessInterfaces)
endpoint.getConnectionFactory()
d.setMajorVersion(1)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
stat.st_ctim.tv_nsec.get()
nodeEngine.getService(LockService.SERVICE_NAME)
final PkgControl root=ImportControlLoader.load(new File(getPath("import-control_complete.xml")).toURI()); 
obj.getAcceptableTokens()
registry.put("params",params)
op.get("address").set("host",host)
Object edge
assertThat(connector.getSoLingerTime()).isEqualTo(30)
additionalProperties.remove(DATE_FORMAT)
messageHandler.serverResponder()
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
assertOpenEventually(countDownLatch,30)
url == null
ChronicleEngineEnpoint.class
Exception exception
this.thrown.equals("File must not be null")
failureDesc.contains("14807") || failureDesc.contains("14883") || failureDesc.contains("13456")
this.instanceManager != null
(getSource().z() + getTarget().z()) / 2f
id=15840
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
font.drawMultiLine(batch,results,20,300)
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
version > 0
this.logger.isWarnEnabled()
Exception unexpectedException
AvailablePortFinder.getNextAvailable()
r.getResponse().sendError(503)
T
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)
In.valueOf(apiKeyAuthConfig.in().toValue())
LOG.warn("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
failure != null
newCount < reservoirSize
clusterService.getIndexerFailures(0,0)
task.cancel()
parameter.toString()
type.equalsIgnoreCase("boolean")
private final DynamicTrnasformerRegistry dynamicTransformerRegistry; 
new RuntimeException()
item == null
cacheDirectory.exists()
stat.st_mode.get()
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i)))
ran.nextInt(500)
Thread.currentThread().isInterrupted()
new BasicAWSSessionCredentials(accessKey,secretKey,sessionToken)
logger.debug("Illegal argument in chart: {}",e)
LOG.error("Failed to get next entry from " + jarFileName + ": "+ ioEx)
idleConnectionTimeout - nettyResponseFuture.getLastTouch()
target.addTask(task)
lockForRescale()
route.getOutputs().isEmpty()
mDir.getDirId()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
new StringBuilder()
new IllegalStateException()
@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
CellUtil.estimatedHeapSizeOf(c)
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)
hazelcastFactory.newHazelcastInstance()
LOG.error("Ignoring duplicate class " + className)
getLsNoAclResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)
Exception e
qp.getExclusiveMinimum()
floatBuffer.clear()
DefaultFileSystemMaster.class
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage",ioe)
Thread.sleep(100)
cppFile.writeString(buffer.toString(),false)
GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))
new HiveTableTypeMapping()
bean.getCollectionCount()
INVISIBILTY(14,PotionEffectType.INVISIBILITY,1)
Object node
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Throwable exceptionThrown=null; 
Object edge
new HashCollisionNode(edit,count,hash,array)
result.addEnchantments(getEnchantments())
log.error(error,cause)
GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))
MAX_ITEMS=1000
logger.info("Optimized Selector: " + selector.getClass().getName())
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))
type == TokenTypes.CLASS_DEF
final string clientSecret="your client secret"; 
String text
size * 1.75f
RowingBoat captain=(RowingBoat)beans.get(ROWING_BEAN); 
this.referenceId == referenceId
hz1.getLifecycleService().terminate()
@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
options.setLanguageIn(LanguageMode.ECMASCRIPT5)
SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
new Texture(file,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)
new RequestOptions(ResponseMode.GET_ALL,this.timeout,false,FILTER,Message.Flag.DONT_BUNDLE)
new PropertiesLoader("classpath:/application.functional.properties","classpath:/application.functional-local.properties")
DataStream<OUT>
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
sendCommand(CLIENT_GETNAME)
if (mCheckUnusedThrows) {   processPackage(aAST); } 
new SimpleDateFormat(format)
Integer.valueOf(patchVersionString)
Preconditions.checkNotNull(path)
routes.BufferResource()
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
ResponseImpl header(String name,Property property); 
synchronized (conn) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
prop.getParamName()
TimeUnit.SECONDS.toNanos(5)
new DeleteOptions.Builder(ClientContext.getConf())
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval(now.minusDays(1),now.plusDays(1))).build(),now))
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING)
Float.valueOf(value.toString())
Class.forName(injectorSourceClassName)
this.traceHandlers.add(traceHandler)
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
assertEquals(model.getProperties().get(COUNT).getType(),"integer")
IOConverter.toInputStream(s)
VertexAttribute.Color()
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxPriorityQueueLength,priority,conf,server)
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
graphVersion.incNodeVersion()
globalSecurityDomain != null
(short)0755
arguments == null
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
QUEUE_TRANSACTION_LOG_RECORD=43
"Using bind address: " + publicAddress
ticket.notify()
new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.args()[0].name().toString())
UIPasteboard.getGeneral()
new NullPointerException("the text is null")
simple.getFromSentDate()
"Refreshing storefiles of region " + regionToFlush + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
"Content-Type".equals(name)
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
writeUnlock()
FileInStream.create(status,options.toInStreamOptions(),mContext)
config.setPort(25667)
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json",new PostParameter[0],true))
registry.put("myConf",new XmlConfiguration(getClass().getResource("/ehcache/ehcache-file-config.xml")))
/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; 
NoopChatHandlerProvider.class
Exception e
new ServletException("non-HTTP request or response")
configuredScriptEngineNames == null
new StoreFile(this.fs,linkFilePath,conf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
QuotaCache.this.namespaceQuotaCache.contains(ns)
new ReadonlyMapELResolver(beans)
ufsPath.getPath()
ImplemetationMethodDescriptor methodDescriptor
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
partitionContainer.getRecordStore(name)
return r; 
Bytes.toBytesBinary(tableNameOrRegionName)
ensureInChild(parent,FooImpl.class,FooBar.class,Foo.class)
{@link PkgControl}
System.getProperty(propName)
"false".equals(showRelationships)
StatBuckets.prettyUptime(secs)
TestSuiteEnvironment.getServerAddress()
message.getFormattedFields()
assertEquals(fc,fc2)
minIdle < 0
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
format(conf,true)
new MockQueryExecution(1)
public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } 
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build)
capacity > 1 << 30
StringUtils.isEmpty(parameter)
LOG.debug("Received ping --> {}",payload)
TrustManagerFactory.getDefaultAlgorithm()
GL11.glTexParameter(target,pname,params)
DataStream<OUT>
watch.stop()
new IllegalArgumentException("Expected a proto but was: " + body.mimeType())
LOG.error("Failed to shut down ActorSystem")
minor < 5
originalValue != null
Thread.sleep(50)
Object node
HttpAuthenticationFactory.class
new JCacheProducer(this,cacheCnfiguration)
data + END
node.has(Constants.ALIAS)
ArrayList<Class<?>>
