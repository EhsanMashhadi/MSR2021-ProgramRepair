e.getCacheHits()
mPaused
CollectionUtils.filter(sources,secondaryRoutes,new Spec<File>(){   @Override public boolean isSatisfiedBy(  File file){     return file.getName().equals("routes");   } } )
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
@Override public Object getAsset(){   return null; } 
info != null
new CreateIndexResponse(true,true){ } 
SOCKET_TIMEOUT=30000
new File(value).getPath()
DictionaryGenerator.buildDictionaryFromValueList(Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ),tblColRef.getType())
nextRequest(request,future)
30 * 1000
assertEquals(expectedResponse,orig.getResponse())
IdeBorderFactory.createTitledBorderBoldWithIndent(ApplicationBundle.message("title.preview"))
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
HBaseConfiguration conf
assertEquals(8,lm.getFields().size())
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
Class.forName(this.owner)
id=15859
mNetAttributes[type].mLastState == state
listenersMap.remove(container)
i.routePointOffset < locations.size()
@Override public final StorableField createField(SchemaField field,Object val,float boost){   throw new IllegalStateException("should be calling createFields because isPolyField() is true"); } 
src.isDirectory()
expandable::collapse
new Random()
GtkPreferredJComboboxRendererInspection.class
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"))
newState.score()
sX != 0
new UnsupportedOperationException()
rdi != null
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12450,12451.87)
c.findOne(new BasicDBObject("_id",17),null,ReadPreference.withTags(new BasicDBObject("dc","proximacentauri")))
new MessageHeaderAccesssor(originalMessage)
findKeyFromPubKey(sender)
type == null
Integer.toString(1)
SyncAccountService.addSyncAccount(filePathName,10,"test@liferay.com","test","http://localhost:8080/api/jsonws",false)
runOTIafterNTI=false
pongPublication.offer(buffer,offset,length) < 0L
new Configuration(true,true,Predicates.<NamespaceDescriptor>alwaysTrue())
Debug.log(msg,args)
@Specialization protected Object fromLong(long value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new JMenuItem(docktoTrayText)
i == -1
DEFAULT_WAKE_LOCK_TIMEOUT=30000
properties.length > 3
factory.getConstructor()
info.getIccSerialNumberForSubscriber(subId)
processEngineConfiguration.getCommandExecutorTxRequiresNew()
InvokerHelper.setProperty(parent,"layout",answer)
Exception cause
thisVisible
!isEnabledTracker()
Long autoCommitInterval
Slog.wtf(TAG,"Starting rect for app requested, but none available",new Throwable())
sourceNodeTextData.getText().isEmpty()
selectorBox.getCanvas()
Throwable e
-7
faceIndex*=4
!useSuper && !isStatic && GroovyCategorySupport.hasCategoryInCurrentThread()
sshClient.connect(sshHost)
mPm.getPackageUid(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
WindowedValue.valueInEmptyWindows(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
UnsupportedTypeException.raise(arguments)
future.get(10,TimeUnit.SECONDS)
assertEquals(0.3169947529691508,mse,1e-8)
ProgressDialog.show(context,null,context.getText(R.string.signing_out))
buildData.getUserContentRelativePath()
block.localsLiveIn.xor(block.localsLiveKill)
d instanceof WebPageDetail
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable)
new XmlPathConfig()
logger.info("--> checking snapshot status again after snapshot is done",blockedNode)
i < position + totalAddedItems
app.setOrgName(ownerName)
new OAuth2RefreshToken("refresh-token",this.accessToken.getIssuedAt(),this.accessToken.getExpiresAt())
new ExpressionEvaluatingMessageProcessor<String>(remoteDirectoryExpression)
subrange.getStart()
sequence.getCache() != null
new InternalSearchResponse(hits,null,null,false,null)
mStackSupervisor.mAppVisibilitiesChangedSinceLastPause
buffer.putDouble(bo)
parent.getSubmittedCount() < (parent.getPoolSize())
listView.getCheckedItemCount()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
cc.isLazy()
toPreCompute.size()
EnglishUdLas=84.9873
new Textifier(){   @Override public void visitMethodEnd(){     System.out.println(cr.getClassName() + ":" + methodName+ methodDesc);     for (    Object line : getText()) {       System.out.print(line);     }     System.out.println();     System.out.println();     super.visitMethodEnd();   } } 
final String tId=getCentralAuthenticationService().createTicketGrantingTicket(TestUtils.getCredentialsWithSameUsernameAndPassword()); 
res.sendError(202,"Websocket protocol not supported")
t.getMessage()
Assert.assertEquals(4,count)
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes())
LOGGER.info("Cached resource {} is up-to-date (lastModified: {}).",cached.getExternalLastModified(),location)
getSingleModelLoader()
handleExportApplication()
LOG.error("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
list.getFirst()
VERSION=7
Log.w(TAG,"Session failed to close due to remote exception",e)
add(comp)
port >= 65535
builder.appendColumns("4dlu, pref")
mSearch.isManualSearch() && mAccount.allowRemoteSearch()
5 * 60 * 1000L
ciManagement.getNagEmailAddress()
Slog.wtf(TAG,sb.toString())
_buildTemplateWithGradle("rest","rest-dependency-management","--dependency-management-enabled","true")
PsiTreeUtil.getNextSiblingOfType(startTag,XmlTag.class)
patternLen == 0
id=25
MAX_ERROR_RETRIES_DEFAULT=20
Entity::propertVisibility
getBooleanValue("project","thrift_target_types_enabled",true)
!getBoldStatus(elements[1])
loading.dismiss()
incomingMessage.getMessagePayloadByte(0)
Objects.equals(value,defaultValue)
LOG.error("Registered pre-upgrade check {}",upgradeCheck.getClass())
super.onStop()
lines("Function.prototype.inherits = function(parentCtor) {","  function tempCtor() {};","  tempCtor.prototype = parentCtor.prototype;","  this.superClass_ = parentCtor.prototype;","  this.prototype = new tempCtor();","  this.prototype.constructor = this;","};")
accountCapsule.putFreeAssetNetUsage(tokenID,newFreeAssetNetUsage)
sleep < 0
private FBTree myCurrentTree; 
_keep_cross_validation_models=false
StringBuffer argBuf
instruction.getOffset()
id=51
Exception e
Thread.sleep(1350)
mTileState
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
form instanceof IObj && ((IObj)form).meta() != null
(Long)array[this.index]
Model.Book != null
out.writeObject(function)
latch.await(1,TimeUnit.MINUTES)
LOGGER.warn("Warning: could not get " + idForErrorMessage + " translation for \""+ key+ "\" for locale "+ Locale.getDefault(),ex)
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).contextStart(withUser)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).subscribe()
service.getRecordsForSelectedTab(mainMetadata,entity,sectionCrumbs,currentTabName)
prevSearchFiles
args[0]
context().getSettingsModule().isNotificationsEnabled()
child.getNodeValue().indexOf(lSep) == -1
UISettings.getInstance().HIDE_TOOL_STRIPES && !PropertiesComponent.getInstance().isTrueValue(key)
new SettingsValidators.InclusiveIntegerRangeValidator(0,99)
items[i].getValue()
HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
new CompoundShelfFileProcesor(streamProviders,configPath)
props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,3)
child.jni_YGNodeSetOwner(child.mNativePointer,0)
format != null
entries.remove(key)
excludesPattern == null
new ConcurrentHashMap<String,Object>(64)
Iterables.find(reportReader.readComponentMeasures(component.getRef()),new Predicate<BatchReport.Measure>(){   @Override public boolean apply(  @Nonnull BatchReport.Measure input){     return input.getMetricKey().equals(metric.getKey());   } } )
paramEntry.getKey()
inLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
new SelectWidget("Show server home page:",new String[]{"Automatic","Always","Never"},new String[]{"sessions","always","never"},false,true)
init(context,null)
renderedObject.getId() % 2 == 0
forced == null && con.getListener().isForceDefault()
SHORT_CF_NAMES_DEFAULT=true
entity.addReference(entity)
public ExecutionParameters transform(Consumer<Builder> builderConsumer){   Builder builder=newParameters(this);   builderConsumer.accept(builder);   return builder.build(); } 
inputFuture.cancel(mayInterruptIfRunning)
keyPhysType.comparer()
mMenuDrawer.isShown()
assertEquals(2,dataCountsDoc.get("bucket_count"))
javaVersion < 9
mActiveStreamType == -1
Files.createDirectory(destPath)
markEverythingDirty()
bits2[1] == false
JNIExceptionHandlerReturnNullWord.class
preResourcesElementDesc.getStoreFactory()
DynamicCounter.increment(filterName,"success",filter.filterType())
JMeterUtils.getPropDefault("proxy.cert.validity",7)
new RaftMessages.HeartbeatResponse(myself,RaftMessages.Type.HEARTBEAT_RESPONSE)
new IOException()
timeout=120000
NFC_UID=1025
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("DHE-RSA-DES-CBC3-SHA",KeyExchange.EDH,Authentication.RSA,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA")
LOG.debug("EOL(end-of-line) defined for the CSV: {}",crlf)
tableCache.getObject(monitor,this,name,DB2View.class)
descriptor.getKind() != ClassKind.TRAIT
"Error resetting interface " + mInterfaceName + ", :"+ e
assertThat(stack.selectChangelog("ISSUE-1")).isNull()
return _EMPTY_CONFIGURATION; 
name="email_index"
powerQuery[i] == 0.0d
paintBorder.top >= 1
block != null
Collectors.toMap(Entry::getKey,Entry::getValue)
new BTreeMap<K,Object>(engine,nodeSize,true,false,defaultSerializer,serializer,null,comparator)
query.assignees().toArray(new String[0])
Boolean.valueOf(literalOption)
size < MAX_SEQ_LENGTH
new ConcurrentHashMap<Class<?>,Boolean>(64)
mInfo != null
assertEquals(2,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
testCase.mVariationSelectors.contains(vs)
DfsSearchResult.plusOne(stats.totalTermFreq())
verifyNothing(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
Messages.getString("Spoon.ExportResourceZipFileExists.Message")
Resource resource
new CompletionThread(w,TestConcurrencyObserverEvent.onCompleted,f1,f2,f3,f4)
assertEquals(ss.getSalt(),"helloworld")
ItemStack.func_77970_a(stack,result)
F.asList(ctx.store(),ctx.events(),ctx.evicts(),ctx.queries(),ctx.continuousQueries(),ctx.dr())
CompactionIterable.class
world.scheduleUpdate(other,state.getBlock(),state.getBlock().tickRate(world))
server.getPlayer(name)
values.get("error").getAsString()
iteration == 0
HMSHANDLERATTEMPTS("hive.hmshandler.retry.attempts",1,"The number of times to retry a HMSHandler call if there were a connection error.")
10 * MINUTES
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
StringEscapeUtils.escapeXml(atts.getValue(i))
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE)
Color.fromRGB(0x7B2FBE)
getHeight()
BuildAndDecodeTest.class
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle")
new RuntimeException(ex)
Color.fromRGB(0xEB8844)
this(deploymentName,maxSessions,true); 
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final DefaultHttpClient getClient(){   return getClient(connectionTimeout); } 
List<String>
1.08f * t
mContext.checkCallingOrSelfPermission(PERMISSION)
super.getLikeProvider(path)
String.class
view.flatMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
position.getFixTime()
logger.trace("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
this.getColRef()
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL
runtimeContextFactory.create(originEnv,openShiftEnvironment,id,this)
@Override public ConfigValue get(Object key){   if (key instanceof String)   return peek((String)key);  else   return null; } 
(mConfiguration.openFlags & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
row.slider.setProgress(newProgress)
/**   * {@inheritDoc}  */ @Override public AtmosphereResource removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),"removeAtmosphereResource(AtmosphereResource r)");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } 
getTableName(simpleFilter)
motionPosition > 0
client.pods()
writer.shutdown(false)
TEST_STREAM_KEYS_SIZE=10
moduleRegistry.getModule("gradle-test-kit").getClasspath()
indexLock.readLock()
return __inferredEncodings; 
folderName=LARGE
/**   * Indicates that the user's friends are able to see posts made by the application.  */ Friends(NativeProtocol.AUDIENCE_FRIENDS)
mPowerManager.isScreenOn()
temp.requestFocus()
taskClass.findClassAttribute("description",false)
logger.error("{} invalid: {}",getEntityClass().getSimpleName(),msg)
myConfiguration.copy()
currentStatus.remove(info.getWar().getAbsolutePath())
config.getBroadcasterFactory().lookup(m.broadcaster(),true)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
Timber.v(e,"Permanent failure during XOAUTH2",e)
onHold | ON_HOLD_REMOTELY
ids.getIDs().length > 90
factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)
LOG.info(" job " + job.getName() + " completed ")
mPrefWriteAnswers
braceStyle == CodeStyleSettings.END_OF_LINE
dest.writeLong(this.milestone)
ftrain.numRows() < training_rows
number.equals("A")
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public boolean onContextMenuClick(  ArrayAdapter<?> adapter,  int itemId,  int pos,  boolean isChecked){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }     return true;   } } ).position(7)
hasVisibleChildren(group,myCheapStrategy)
new ServerPing.Players(bungee.getOnlineCount(),listener.getMaxPlayers())
getGlobalOptions().setAutoscrollToSource(enabled)
entity instanceof ProcessDefinition
(data[readAt++] & 0xffL) << 58
protected FBTree getCurrentTree(){   return myCurrentTree; } 
queueFileForUpload(mediaUri,getContentResolver().getType(mediaUri))
new MaxNParallelTestClassProcessor(testTask.getMaxParallelForks(),reforkingProcessorFactory,actorFactor)
final LongAdder sum=new LongAdder(); 
assertEquals(response.getResponseBody().length(),3876)
caretOffset > indent
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",true))
OrderedMap.class
JCVideoPlayerManager.listener()
ChannelBuffers.copiedBuffer(request.getByteData())
clazz == null
!TextSecurePreferences.isWebrtcCallingEnabled(this) || isGroupConversation()
Preconditions.checkNotNull("Streaming Job name should not be null.")
new UnderFileStatus("dummy",isDirectory)
_certHosts.isEmpty()
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
outLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
failed(x)
featuresMask != null
assertFalse(predicate.apply(pickleEvent))
log.error("Expected " + s.getStyleId() + " to have <w:basedOn ??")
sm.getString("namingContext.nameNotBound",name.get(0))
parseValueParameterList(false,TokenSet.create(COLON,SEMICOLON,LBRACE))
new LFWDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,nChannels},outputNum,useSubset,new Random(seed))
notifyItemRemoved(flatPosition)
@NotNull Object o
case NONE: 
new PartialEscapeAnalysisPhase(null,runtime(),null,assumptions,iterativeEscapeAnalysis)
resolveFromIndices(localProcessor,null)
in.read(message,0,length)
Long.toOctalString(localExpire)
Double.class
new ViewPagerAdapter(this,getIntent().hasExtra(TOKEN_MANUAL_SHOW))
LibraryTableEditor.editLibraryTable(getGlobalLibrariesProvider())
_log.warn("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
minSlot > 1
"".equals(callBeep.canPlayType("audio/ogg;"))
program.getProgramId()
CacheData<Simple>
Map<String,Object>
StatsLog.write(StatsLog.ANR_OCCURRED,app.uid,app.processName,activity == null ? "unknown" : activity.shortComponentName,annotation)
path.endsWith(".js")
myCell.getStream()
ComputationGraph.class
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMilis(request.getStartTime())
routerChain.notifyFullInvokers(groupInvokers,getUrl())
item != txId
telephony.getNeighboringCellInfo(mContext.getOpPackageName(),mContext.getApplicationInfo().targetSdkVersion)
log.debug(exception.getMessage())
JournalArticleLocalServiceUtil.search(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"general","","",null,null,status,null,false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
case INODE_REFRENCE: 
broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())
message.getToUser()
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,callbackIntent)
putProject(null,folder,true,false)
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mWorkSource,mResultStorages,ActivityThread.currentOpPackageName())
i <= tupleType.getElementCount()
t.getValue()
parentKey != null
new Intent()
b=data[byteOffset]
@NotNull JsonValue value
nodeTextIndex > nodeText.getElements().size()
public KeyValueBinding getValueBinding(){   return attributeBinding; } 
changeAffiliationByOwner(jid,"owner")
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName())
ListDataSink.get(2)
LOG.error("src link in the context java doc window does not attached")
rowLabels.size()
logger.error("Table spec retrieval failed, couldn't find table spec: " + modelName)
new JRHtmlExporter()
subject.isEmpty()
isFormat(format,F40,F50,F51,F52)
revisionVersion=5
index > n
new MultiSearchResponse(new MultiSearchResponse.Item[]{new MultiSearchResponse.Item(response,null)})
triggerManager.getRules(CHANGE,item,newState,oldState)
!list.append(ai)
e instanceof DuplicateLockException
hStack.getScrollHeight() + vLayout.getScrollHeight() + 30
grid(0).jcache(null)
String.format("BUG: %s changed score during rematch: %d -> %d",score,newNetwork.getCurrentScore())
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the IQ provider.  */ public static Object getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return privateDataProviders.get(key); } 
httpServletRequest.getParameterValues(name)
SC_DUPLICATE_FILE_EXCEPTION=1000
getNumberOfJournalFiles() <= 3
(currentCon != null) && (currentCon.getMode() == Conversation.MODE_MULTI) && (!alwaysNotify)
"cache." + name + ".size"
(EditText)findViewById(R.id.hostUrlInput)
openFileDescriptor == null && !openFileDescriptor.getFile().isValid()
rotationVector.length == 4
chain.resolveUrlPath(resourceUrlPath,locations).otherwiseIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
number.intValue()
BorrowablePath.borrowablePath(output.getUnchecked())
StringUtils.trimToNull(comparisonObjectSchema.getName())
mView.setTransitionVisibility(mFinalVisibility)
target != null
binary.size()
authenticator.executeCommandAndAuthenticateIfNecessary(myProject,myRepo,myDestination,"push",arguments)
random.nextInt(currentSize + 1) == 0
Executors.newScheduledThreadPool(0,new NamedThreadFactory("Strong-Reference-Leak-Detector"))
propMember.getType(beanDesc.bindingsForBeanType())
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port))
void setting(int identifier,long value) throws ConnectionError ; 
id=45
TokenSet.create(JavaTokenType.C_STYLE_COMMENT,JavaTokenType.END_OF_LINE_COMMENT,TokenType.WHITE_SPACE)
"ppc64".equals(arch) || "ppc64le".equals(arch)
i > 0
URI.create(super.getHeader(name)).getPath()
spawnSettings.contains(id)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() != 0
reversed
IllegalStateException ise
new GenericItem("Test"){   @Override public List<Class<? extends State>> getAcceptedDataTypes(){     return null;   }   @Override public List<Class<? extends Command>> getAcceptedCommandTypes(){     return null;   } } 
control.getRowHeight(rowToEdit)
UResultOperator.class
name.substring(0,6)
wrapDetails(sku,quantityAvailable,request)
LOG.trace("Should have transformed " + managedClassName + " but didn't")
account.getExternalKey()
ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(false)
strategiesBuilder::messageWriter
!visible
value < 0
bungee.getTranslation("outdated_client")
new IllegalStateException(e)
((Context)entry.value).unbind(name.getSuffix(1))
PortletFileRepositoryUtil.getPortletRepository(groupId,PortletKeys.DOCUMENT_LIBRARY,serviceContext)
sw.toString().getBytes()
Exception.class
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
selenium.sendKeys("//input[@id='_86_importFileName']",RuntimeVariables.replace("L:\\portal\\build\\portal-web\\test\\com\\liferay\\portalweb\\portlet\\mediagallery\\dependencies\\Media_Gallery-Selenium.portlet.lar"))
@Autowired RoutingService routingService; 
3 - iteration
conj == CONJ_AND
message.getPresence().toString()
assertEquals(0.208323733363106,mses[i],1e-4)
ObjectStore.isCurrentStatsValidForTheQuery(conf,db,tbl,params,statsWriteId,writeIdString,false)
Nd4j.randn(order,shape).divi(FastMath.sqrt(2.0 / (fanIn + fanOut)))
List<String>
String message=messageObj.getString("d"); 
-10
getItemViewType(position)
SolrServer lastClient=null; 
((Player)target).isOnline()
IOConverter.toString(out)
new ModLoaderModContainer(bmClazz,canonicalPath)
public TokenStream create(TokenStream input){   return new ISOLatin1AccentFilter(input); } 
texCoords.put(updateNormalArray,offset,size)
new PriorityTieredBrokerSelectorStrategy(0,1)
TIMEOUT=3000
new InetSocketAddress(5353)
JournalTestUtil.updateArticle(article,"Content: Enterprise. Open Source. For Life.",article.getContent())
mapper.setSqlSession(sqlSessionTemplate)
AbstractTreeNode<TypeMigrationLabeler>
documented=true
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
StringUtils.isEmpty(objectId)
new MongoSynchronization(dbHolder,mongo)
endOffset - 2
stream.<NettyServerStream>data()
createFile("Test.java","class Test extends Type {\n}")
colIndex < columnTypes.length
String.format(formatStrWithHash,container.getContainerID(),openStatus,data.getDBPath(),data.getContainerPath(),"",datanodeDetails.getHostName(),datanodeDetails.getHostName())
code.length() == 0
new FPSAnimator(window,60,true)
conferenceState.appendChild(users)
threadCount=100
Long.valueOf(attrValue)
Node beginNode=block.getBeginNode(); 
parameters == null
jabberStatusToPresenceStatus(o2,parentProvider)
Channel channel
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY())
myMatcher.getElementsByPattern(pattern,name,myCheckboxState,new Computable<Boolean>(){   public Boolean compute(){     return myCancelled;   } } )
src.getPath()
Lists.newArrayList(stream1)
appInfo.targetSdkVersion >= O
allDefinitions != null
in.read(buffer)
new IllegalArgumentException()
getPropertyAsString(IMPLEMENTATION)
this.contactTabsTable.put(contact.getMetaUID(),currentChatPanel)
type == SessionInfo.BUILD_TOOLS_PACKAGE
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),blacklistedSubdirectories)
new Spinner(getContext())
Integer.toString(bitstampOrder.getId())
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER
region.getRegionWidth()
DeprecationLogger.nagUser("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
myError == null
DiagnosticType.disabled("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
verify(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
container.getVersion()
super(80,new File(".")); 
dlFileEntryService.getFileEntries(groupId,folderId)
Base64.encodeBytes(key)
pairs != null
Assert.assertEquals(118L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
Utils.readLong(binary,16)
holder.setVisible(getLoadFailViewId(),visible)
EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING)
dexBuf.readSmallUint(interfacesOffset + 4 + (2 * index))
baseRevision != null
errorCount > maxErrors
requiresRefreshAfterBulk=true
new DefaultPaymentMethod(input)
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))
getClass().getName()
toJSON(item)
ctx != null
logger.warn("Cannot add group member ({})",e.getMessage())
onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()))
/**   * The component supports both opt-in and opt-out warnings on a per-user basis using a simple algorithm of three variables: <ol> <li> {@link #setWarningAttributeName(String) warningAttributeName}</li> <li> {@link #setWarningAttributeValue(String)} warningAttributeValue}</li><li> {@link #setDisplayWarningOnMatch(boolean) displayWarningOnMatch}</li> </ol> The first two parameters define an attribute on the user entry to match on, and the third parameter determines whether password expiration warnings should be displayed on match. <p> Deployers MUST configure LDAP components to provide <code>warningAttributeName</code> in the set of attributes returned from the LDAP query for user details.  * @author Marvin S. Addison  */ public class OptionalWarningAccountStateHandler extends DefaultAccountStateHander {   /**   * Name of user attribute that describes whether or not to display expiration warnings.   */   @NotNull private String warningAttributeName;   /**   * Attribute value to match.   */   @NotNull private String warningAttributeValue;   /**   * True to opt into password expiration warnings on match, false to opt out on match.   */   private boolean displayWarningOnMatch=true;   /**   * Sets the user attribute used to determine whether to display password expiration warnings.  * @param warningAttributeName Attribute on authenticated user entry.  */   public void setWarningAttributeName(  final String warningAttributeName){     this.warningAttributeName=warningAttributeName;   }   /**   * Sets the value of  {@link #warningAttributeName} used as basis of comparison.  * @param warningAttributeValue Value to match against.  */   public void setWarningAttributeValue(  final String warningAttributeValue){     this.warningAttributeValue=warningAttributeValue;   }   /**   * Determines whether password expiration warnings are opt-in or opt-out.  * @param displayWarningOnMatch True to opt into password expiration warnings on match, false to opt out on match.Default is true.  */   public void setDisplayWarningOnMatch(  final boolean displayWarningOnMatch){     this.displayWarningOnMatch=displayWarningOnMatch;   }   @Override protected void handleWarning(  final AccountState.Warning warning,  final AuthenticationResponse response,  final LdapPasswordPolicyConfiguration configuration,  final List<Message> messages){     final LdapAttribute attribute=response.getLdapEntry().getAttribute(this.warningAttributeName);     boolean matches=false;     if (attribute != null) {       matches=this.warningAttributeValue.equals(attribute.getStringValue());     }     if (displayWarningOnMatch == matches) {       super.handleWarning(warning,response,configuration,messages);     }   } } 
processEngineConfiguration.setEnableSafeBpmnXml(false)
new AutoCompleteListener(searchCompleter)
new ObjectMapper().reader(defaultInstance().constructCollectionType(List.class,DiskBalancerWorkEntry.class))
BlockMasterClient masterClientMock=PowerMockito.mock(BlockMasterClient.class); 
(imgRef != null) && (imgRef.charAt(0) == '#')
_connector.getResponses("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
Object[]
database.getDatabaseMajorVersion() >= 9
active
spec.multiPart(controlName,mimeType)
LOGGER.debug(e.getMessage())
CodeStyleSettingsManager.getSettings(myProject).LINE_COMMENT_AT_FIRST_COLUMN
type.getKeyName()
assertTrue(getProjectActions().contains(id))
fragmentEntryPersistence.filterCountByG_FCI_S(groupId,fragmentCollectionId,status)
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,0.07948414889955241,DeepLearningModel.DeepLearningParameters.Activation.Rectifier)
new DefaultConfiguration(new DataSourceConnectionProvider(datasource),null,null,null,null,null,null,null,null,null,dialect,settings,null)
Assert.assertEquals(transitions.size(),2)
order=30
writer.write(getReferenceIndex(instruction))
WRONG_SHARED_SECRET=1001
LOG.error("delete failed: {}",e.getMessage())
new LightweightThread(null,new MergeTest())
notifyManager()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
migrateXmlString(content,22)
before != after
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString(),any(Exception.class))
StampFactory.declared(type.getComponentType())
err.jspError("jsp.error.tld.mandatory.element.missing","tlib-version")
type.getConstructor()
toSetIn.length() < 1
Preconditions.checkNotNull(value,"Value argument can not be null")
PetiteReference... lookupReferences
getNext().invoke(this,method,args)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
b.getBroadcasterConfig().applyFilters(r,cachedMessages)
decodeAttribute(nameAttribute.getValue(),charset)
dynamicServletRequest.getParameterValues(name)
mTextColor.getColorForState(ds.drawableState,0)
@Override public final DivideBy andNotExists(Select<?> select){   return and(notExists(select)); } 
new GraphQLException()
logger.error("Field sorting failed!")
new JarResourceRoot(root,new File(getBase()),pathInJar,path)
log.info("Not in OSGi: using plexus based maven parser")
i < uri.length() - 2
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportFromCompanionObject.kt")
scope != null
new MethodDescription.Token(FOO,MODIFIERS,Collections.singletonList(mock(GenericTypeDescription.class)),second,Collections.singletonList(secondParameter),Collections.singletonList(mock(GenericTypeDescription.class)),Collections.singletonList(mock(AnnotationDescription.class)),null)
melody.length() - 2
outputDir.mkdir()
ErrorWrapperEmbeddedServletContainerFactory.class
columnSums.mean(1)
params[10]
eventsDone.remove(event)
retry=1
/**   * Integration tests for GRPC over Http2 using the OkHttp framework.  */ @RunWith(JUnit4.class) public class Http2OkHttpTest extends AbstractTransportTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer() throws Exception {     try {       SslProvider sslProvider=SslContext.defaultServerProvider();       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {         sslProvider=SslProvider.JDK;       }       SslContextBuilder contextBuilder=SslContextBuilder.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key"));       GrpcSslContexts.configure(contextBuilder,sslProvider);       contextBuilder.ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE);       startStaticServer(NettyServerBuilder.forPort(serverPort).sslContext(contextBuilder.build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer() throws Exception {     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort(TestUtils.TEST_SERVER_HOST,serverPort));     try {       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")));     }  catch (    Exception e) {       throw new RuntimeException(e);     }     return builder.build();   }   @Test(timeout=10000) public void receivedDataForFinishedStream() throws Exception {     Messages.ResponseParameters.Builder responseParameters=Messages.ResponseParameters.newBuilder().setSize(1);     Messages.StreamingOutputCallRequest.Builder requestBuilder=Messages.StreamingOutputCallRequest.newBuilder().setResponseType(Messages.PayloadType.COMPRESSABLE);     for (int i=0; i < 1000; i++) {       requestBuilder.addResponseParameters(responseParameters);     }     StreamRecorder<Messages.StreamingOutputCallResponse> recorder=StreamRecorder.create();     StreamObserver<Messages.StreamingOutputCallRequest> requestStream=asyncStub.fullDuplexCall(recorder);     requestStream.onNext(requestBuilder.build());     recorder.firstValue().get();     requestStream.onError(new Exception("failed"));     recorder.awaitCompletion();     emptyUnary();   }   @Test(timeout=10000) public void wrongHostNameFailHostnameVerification() throws Exception {     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort("I.am.a.bad.hostname",serverPort));     ManagedChannel channel=builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem"))).build();     TestServiceGrpc.TestServiceBlockingStub blockingStub=TestServiceGrpc.newBlockingStub(channel);     try {       blockingStub.emptyCall(Empty.getDefaultInstance());       fail("The rpc should have been failed due to hostname verification");     }  catch (    Throwable t) {       Throwable cause=Throwables.getRootCause(t);       assertTrue("Failed by unexpected exception: " + cause,cause instanceof SSLPeerUnverifiedException);     }     channel.shutdown();   } } 
internedAnnotationSetRefItems.put(annotationSetRefKey,0)
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false)
other instanceof OpenBitSet
classFile.matcher(file.getName()).find()
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_class_name"))
VERSION=22
this.conf.addResource(yarnSiteXMLInputStream)
saveCrendentialsInSmartLock()
JsonOutput.toJson(json.toString())
sStatsd.informDeviceShutdown(true)
mediaController != null
xam.getStudentNumber()
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroups(groups)
TestDummy t
new MongoClientException(format("Connection String contains invalid hosts: %s",connectionString.getHosts()))
classType.hasTypeTree()
new DMLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
TimeUtils.nanoTime()
!WatchlistConfig.getInstance().isConfigSecure()
Assert.assertEquals(20,Context.getAdministrationService().getAllGlobalProperties().size())
nearbyTransportStopRoutes.size() > 0
new RootModelImpl(myRootModel,this,true,accessor,null,myFilePointerManager,myProjectRootManager){   @Override public void dispose(){     super.dispose();     if (Disposer.isDebugMode()) {       myModelCreations.remove(this);     }     for (    OrderEntry entry : ModuleRootManagerImpl.this.getOrderEntries()) {       assert !((RootModelComponentBase)entry).isDisposed();     }   } } 
mMat[6]
Long.valueOf(numRowsProp)
formatInfo.getFormat() >= 7
result == Long.MAX_VALUE
valueFormatter != null
this.url
assertEquals("We have all the items via GameData",391,Item.REGISTRY.getKeys().size())
data.getBytes()
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally
!_calledSetTotal
id=15842
(i & RSV_BITMASK) > 0
RemoteException e
arguments.length > 0
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
Color.fromRGB(0x287697)
String.class
verifyNull(decoder,text("(865733028143493,00I76,00,000,,,,,A,133755,210617,10.57354,077.24912,SW,000,00598,00000,K,0017368,1,12.7,,,0.000,,,0,0,0,0,1,1,0,,)074"))
new ConcurrentHashMap<String,RootBeanDefinition>(64)
@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
Timber.e("Cannot remove EXPUNGEd messages",e)
new FrameTask.DataInfo(train,1,false,true,!classification)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_configuration,_templateContextHelper)
new RuntimeException("Could not create keystore: " + e.getMessage(),e)
getKey(companyId,repositoryId)
HashMap<String,Presence>
proratedOrderAdjustment.compareTo(BigDecimal.ZERO) == 0
this.evaluator.prepareLeftObject(handle)
LOG_KEY_EVENTS=true
id=15830
case 10: 
public class BackupManagerService implements IBackupManagerService {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
equalTo(2)
numberOfIntercept.incrementAndGet() == 1
new Requirement(Skill.FARMING,68)
edge.getUpNode()
bindServiceAsUser(serviceIntent,conn,BIND_AUTO_CREATE | BIND_NOT_FOREGROUND,UserHandle.CURRENT)
new DisplayEnvironment()
connectionTimeout / 2
new OverflowPanelViewHelper(mContext)
exclBuilder.grow(numIncludedDocs)
public class PublicKeyJwsSignatureVerifier implements JwsSignatureValidator {   private PublicKey key;   private AlgorithmParameterSpec signatureSpec;   public PublicKeyJwsSignatureVerifier(  PublicKey key){     this(key,null);   }   public PublicKeyJwsSignatureVerifier(  PublicKey key,  AlgorithmParameterSpec spec){     this.key=key;     this.signatureSpec=spec;   }   @Override public boolean verify(  JwtHeaders headers,  String unsignedText,  byte[] signature){     try {       return CryptoUtils.verifySignature(unsignedText.getBytes("UTF-8"),signature,key,Algorithm.toJavaName(headers.getAlgorithm()),signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
operation.get(ROLLBACK_ON_RUNTIME_FAILURE)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractACLCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
project.getId()
cursorMove=1
/**   * How to handle a missing part. By default, if no part matches, the  {@link org.apache.cxf.jaxrs.provider.MultipartProvider} throws a  {@link javax.ws.rs.WebApplicationException}with status 400. If this option is set to <strong>false</strong>, the parameter is set to <strong>null</strong>.  */ boolean errorIfMissing() default true; 
a.getNameSelected()
mm.tryLock(key,4,TimeUnit.SECONDS)
Extensions.getExtensions(FileBreadcrumbsCollector.EP_NAME)
deleteCondition.isPrivate()
in2 >= 0x7e
id=15872
latch.await(100,TimeUnit.MILLISECONDS)
substitutor.substitute(parameters[i].getType())
hook.startPlay(program)
a.length <= size
parentPackage.equals(shortName)
UIPasteboard.getGeneral()
readIntPref(FONTSIZE_KEY,mFontSize,20)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "var c = goog.require('a.c');\nvar d = goog.require('a.b.d');\n\n")
channel.close()
public TokenStream create(Reader input){   return new WhitespaceTokenizer(input); } 
context.getLogger().logAttributeWarning(address,SLOT_ATTRIBUTE_NAME,MESSAGES.invalidJSFSlotValue(slot.asString()))
updatePortletPreferences(portletPreferencesRow)
basicGraph.getShortestPath(root,t,true)
ch == '|'
config.setPort(25667)
dependency.getManfiestEntry("Export-Service")
RandomStringUtils.random(20)
addDaysAndCheckForCompletion(5,NextEvent.PAYMENT_ERROR)
InetAddress.getLoopbackAddress()
this.httpHeaderNames.put(KEYCLOAK_SUBJECT,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
p.getIsFeaturedProduct()
expect(cluster.getClusterName()).andReturn("cluster").times(2)
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,false)
readdirCacheBuilder.maximumSize(maxStats)
product.encodePrettily()
JmsQueueSendReceiveWithMessageExpiration.class
checkResultByText("dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}")
-418533254
assertClusterSize(2,data2,data3)
logger.warn("Cannot update media data for group member ({})",e.getMessage())
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
configureCluster(5)
userId != UserHandle.USER_ALL
video_st.metadata() != null
return softDepend; 
_constructor.newInstance(tempFileEntry.getFileEntryId(),tempFileEntry.getFileEntryId() + 1,_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
asList()
parseSitemapXml=false
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,false)
nameDefinitionMultimap.keySet()
effectColor=myFgColor
assertEquals(5,scannedBeanCount)
LOG.info("received message " + (TopologyMaster.PublishMetrics)message)
w.getStart() > oldEndOffsetInLine
toArrayWithTransform(input,new Function<PriceList,DefaultPriceList>(){   @Override public DefaultPriceList apply(  final PriceList input){     return toDefaultPriceList(input);   } } ,false)
msgLog.warn("Exception occurred while setting up store modules. Attempting to close things down.",e,true)
public Schema cancel(int version,JobsV3 c){   Job j=DKV.getGet(c.job_id.key());   if (j == null) {     throw new IllegalArgumentException("No job with key " + c.job_id.key());   }   j.cancel();   return c; } 
getLogger().error("Unknown classloader [CNFE]: " + loader.getClass().getName())
HEADER=234222482
jsonObject.get("error").getAsString()
ScatteringByteChannel.class
WINDOW_FREEZE_TIMEOUT_DURATION=3000
GL20.glUniform3(location,v)
heartbeatTimeoutIntervalMs >= 0L
@ConditionalOnEnablednHealthIndicator("rabbit")
new RelationshipLinkbackStage("Test",Configuration.DEFAULT,store,newCache(),0,false)
e.getMajorType()
LOG.error(e,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
mVibratorService.vibratePattern(new long[]{0},0,new Binder())
clearRefreshableViews()
ldapContexts.put(getThreadName(),dirContext)
ViewWebContentAssignedToMyRolesUpdateDueDateDetailsTest.class
PyTokenTypes.ADDITIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(expression.getOperator())
new WorldPoint(2712,3689,0)
i < message.length()
getLogger().error("Unknown classloader [IAE]: " + e.getMessage())
/**   * {@inheritDoc}   */ @Override public void stop() throws IgniteCheckedException { } 
log.error("Couldn't get font " + fontName)
mHandler == null
listeners != null
/**   * The invoker component.  */ private final JComponent invoker; 
nodeId.equals(message.getToNode())
newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!")
StringBuffer buffer
new V(1,new BooleanSetting(true))
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage))
final Prototype testedPrototype
clusterService != null
public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new WorldPoint(2975,3809,0)
Int2 v
public class XpathRegressionDeclarationOrderTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
i * randomIntBetween(2,10)
lockForRegularUsage()
tw.release()
RowSqlType.builder().withIntegerField("f_int").withIntegerField("sub_string")
mBackdrop.animate().alpha(0f)
i <= size
path.indexOf(Constants.JAR_EXT)
range.getStartOffset()
contribution[LIGHT_AMBIENT_R]
buf.capacity()
digester.parse(contextXml)
Applications.class
json.length() - 2
i < 100
getPlayerPosition().z
Sanitizer.class
(QMMObject)items[i].getData()
queryIdsSnapshot.remove(deadQuery)
GL20.glUniform1(location,v)
myCachedIntentions.getEditor()
InputMethodManager.getInstance(mTargetActivity)
private PostgreServerExtension serverExtension; 
activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient).length > _taskInfo._params.maxActivePredictors
LUMBRIDGE_HOME_TELEPORT=1
reply.getJMSCorrelationID()
clusterService.getIndexerFailures(0,0)
checkNotNull(jsonText,"Json should not be null")
new JAXWSHttpSpiTransportFactory(bus,context)
LOG.error("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
_validateHasRequiredPropertyElements(element,filePath)
String.format(SCOPED_AUTHORIZE_URL,formURLEncode(config.getCallback()),formURLEncode(config.getScope()))
this.mWidth != this.mBaseWidth && this.mHeight != this.mBaseHeight
checkArgument(prestoTypeParameters.size() == fieldTypes.size())
Optional.of(resourceManagementScheduler)
Assert.packageNotEmpty(bootClass,"your main class is empty of package.")
notNullValue()
logger.error("NODE {}: DeleteReturnRoute command failed.")
new KadaneResult(maxSoFar,maxStart,maxEnd)
AbstractMethodError e
msg.offset()
scheduler.getTriggerState(trigger.getName(),trigger.getGroup()) != Trigger.STATE_PAUSED
button.setTextViewCompoundDrawables(R.id.action0,action.icon,0,0,0)
to("bar")
ConnectionPool connectionPool=destination.getConnectionPool(); 
newUiPrefs.enableBackgroundDiagnostics()
new S_Command("00FE30",20.0)
"Interrupted when attempting to close writer for end point: " + ep
new SecretKeySpec(randomBytes,ENCRYPTION_ALG)
_train.remove(_parms._offset_column)
mgr.mergeSegments(cube,0,2000)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() == 0
8 * 60000
new ModelContextImpl.Properties(ApplicationId.defaultId(),true,Collections.emptyList(),null,false,Zone.defaultZone(),rotations,false)
@Nullable T value
new BitmapDrawable(holder.getValue())
this.artifactServerFactory=jobServerFactory
response.setStatus(400)
Observable.concat(_getCachedData(),_getFreshData())
"WPA".equals(networkTypeString)
generateRandomStringArray(2,4,false)
Color.fromRGB(0x434343)
new FileOutputStream(newState.getFileDescriptor())
@ConditionalOnEnablednHealthIndicator("solr")
myIpythonInputPromptCount=0
inputBind.setDescription(bind.description())
user.getUserId()
verify(issueUpdater).setSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
zController.sendData(doRequestStop())
m.get(InputStream.class)
new Max()
(BeanDefinitionRegistry)context
getAsText(get(instant))
(Integer)card[15]
mLocalDirtyRect.setEmpty()
info != null
this.decoder.decode(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
editor == null
i >= rows.size()
targetProject.evaluate()
new ImportResults(globalSettingsImported,importedAccounts,errorneousAccounts)
task.getTimerStart() != null
loadAnimator(fragment,transition,true,transitionStyle)
group.isCommunity()
settings instanceof UnknownRunConfiguration
@Nullable Throwable cause
upload1.getUploadEndTimestamp() == 0
(short)0755
public Fix build(){   return new SuggestedFix(fixes,importsToAdd,importsToRemove); } 
getTaskWriterCount(session) > 1
id=15868
updater.myComponent.isShowing()
CalendarWebUpgrade.class
Mockito.verify(mRMClient).start()
assertThat(t).isNotEqualTo(e)
mImageManager.load(postHolder.mImgDiscoverAvatar,GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp,ScaleType.CENTER)
fragmentEntryPersistence.filterFindByG_FCI(groupId,fragmentCollectionId,start,end)
resourceTableStream.read(tableBytes,0,(int)alignedSize)
workingMemory.getObject(handle)
random().nextInt(9) + 1
FileUtil.loadFileText(ioFile)
hasAuthenticationTimeoutExpired()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION)
compound.getCompoundTag("tile_pos")
shardDao.insertShard(shard,tableId,null,0,0,0)
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,30_000)
new EmbeddedDatabaseRule(testDirectory.graphDbDir())
searchUICore.getSearchSettings().setEmptyQueryAllowed(true).setAddressSearch(true).setSortByName(true)
public Integer getMeasureId(){   return measureId; } 
new HashMap<String,Object>(1)
appView.backHistory()
assertEquals(12,handler.getErrors().size())
GrTypeDefinition clazz=(GrTypeDefinition)context.getScope(); 
USE_DISPLAY_LIST_PROPERTIES=false
myStorage.isMapped()
message.getLine() != lineNumbers.get(i)
(DataProvider)dataProvider
MapUtil.getBoolean(parameterMap,_IMPORT_BLOGS_DATA,_enableImport.getDefaultState())
new IllegalArgumentException()
SocialActivityWebUpgrade.class
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)
@Override public ResponseImpl schema(Property property){   this.setSchema(property);   return this; } 
sides > 3
TokenSet.create(JavaTokenType.LT,JavaTokenType.LTLT,JavaTokenType.LTLTEQ,JavaTokenType.GT,JavaTokenType.GTGT,JavaTokenType.GTGTEQ,JavaTokenType.GTGTGTEQ,JavaTokenType.AND,JavaTokenType.ANDAND,JavaTokenType.ANDEQ)
setWindowingMode(windowingMode,false,true,false)
(xmin > x && xmin < x + width) || (xmax > x && xmax < x + width)
tag != null
createTextAttributesKey("KOTLIN_ANNOTATION",CodeInsightColors.ANNOTATION_NAME_ATTRIBUTES)
targetDescription.getClassName()
block.useSourceInfoFromForTree(exprRoot)
Lists.newArrayList('*','[',']','(',')',',','+')
mReportDrawNeeded=true
Box.createHorizontalStrut(conditionLabel.getPreferredSize().width + theCondition.getPreferredSize().width)
ConfiguredTargetValue.key(label,hostConfiguration)
e.getMessage()
InternalDecorator.this.computeActive()
builder.field(Fields.LARGEST,rejected)
new SubtasksUpdater()
public GlobFileFilter getFileFilterFromFileTypes(String fileTypes){   String glob;   if (fileTypes.equals("*"))   glob=".*";  else   glob="^.*\\.(" + fileTypes.replace(",","|") + ")$";   return new GlobFileFilter(glob,true); } 
new NumberFormatException("No value for parameter named '" + name + "'.")
mediaItemsNotUploaded < sNotificationData.currentMediaItem
Object.class
previousResultRsmSet.getLast()
CodeStyleSettings.class.getDeclaredField(value)
logger.info(String.format("calling ack %s with %s",packet.id,packet.data))
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"isAppInactive",null)
SystemProperties.getBoolean("persist.demo.hdmirotationlock",true)
private static JFrame getNullFrame(){   return null; } 
@Override public final DivideBy on(String sql,QueryPart... parts){   and(sql,parts);   return this; } 
metadata.addWhere(new BooleanBuilder())
(parentRestricted && !restricted) || (!parentAsked && asked) || !clear
childFolder.getType() != FileType.FOLDER
mIsScrollableViewHandlingTouch
useCustomAapt=false
socket.getSocket() == null
uiAclHandler.permit(reqContext,op,conf)
mContext.enforceCallingPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
gzipHandler.setMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid")
mContainerActivity.getStorageManager() != null
MIN_HEART_RATE_VALUE=0
new IllegalStateException()
Preconditions.checkNotNull(hostname)
p.contains("gt06.timezone")
writeSource.setReadCount()
ColorResources.getColor("controlColor")
text.substring(idx + 1,text.length())
factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)
processNonPersistent=true
index <= next
newChain.toString()
intersection.size()
privObj.getObjectName().equals("masking_test_subq")
rowSelected < table.getRowCount() - 1
checkOrderItemOfferAppliedCount(order) == 1
id=15849
threads.isEmpty()
mService.addOrUpdateNetwork(config)
session.users().getUserByServiceAccountClient(client)
presentation.setEnabled(false)
anchor.getElementType() == GroovyTokenTypes.mSH_COMMENT
@Override public Appendable append(CharSequence csq){   if (csq == null) {     return append(NULL_STRING);   }   return append(csq,0,csq.length()); } 
getterVisibility=Visibility.NONE
service.handlePinMmiForPhoneAccount(accountHandle,dialString)
FileChannel.open(indexFile.toPath(),CREATE,READ,WRITE,DSYNC)
bagEntry.getState() != STATE_NOT_IN_USE
new RoutingControlAction(this,newPath,false,callback)
JDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
ApplicationManager.getApplication().executeOnPooledThread(new Callable<Void>(){   @Override public Void call() throws Exception {     tester.test(file,xmlFile,originalVFile);     return null;   } } ).get(8,TimeUnit.SECONDS)
sender.getHostName()
dateFormatter.format(value)
enclosingHeight - insetBottom
bindingGroup.get(PORT_OFFSET).asInt() >= 0
driverFile.getLocalFile()
new IndexWriter(indexStoreB,new StandardAnalyzer(),true)
adjustedEndTimeUs=startTimeUs
principal.getName()
for (VirtualFile root : roots) {   Color color;   if (i >= ROOT_COLORS.length) {     color=getDefaultRootColor();   }  else {     color=ROOT_COLORS[i];     i++;   }   myRoots2Colors.put(root,color); } 
this.bukkitName.isEmpty()
Nd4j.zeros(1,size,1)
options.get(option).actionPerformed(null)
nextRow >= lastRow
for (EventListener listener : _eventListeners) addEventListener(listener); 
bindingGroup.has(PORT_OFFSET)
(Float)array[this.index]
new JobMeta((space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,null)
SolidityType.Bytes32Type.decodeBytes32(topicBytes)
registrar.checkExisting(metric)
BuildParameters parameters
removeQueueTask(this.message.getMessageId())
role instanceof UIRepositoryRole
new IOException("TEST")
this.cusolverDnDsyevd.invoke(solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
LanguageLevel.JDK_1_5.compareTo(field.getManager().getEffectiveLanguageLevel()) >= 0
new SimpleDateFormat(format)
maxLevel < levelFloor
maxTryTime=10
Integer.valueOf(this.getOptional("kylin.restclient.connection.max-total","200"))
accountData.setIsMigrated(Objects.firstNonNull(isNotifiedForInvoices,delegate.isNotifiedForInvoices()))
(System.currentTimeMillis() - startTime) < 10
Thread.sleep(20000)
MethodRedefinitionResolver methodRedefinitionResolver
assertEquals(0.3171486183300009,mse,1e-8)
@InputIntMethodAnnotation(42)
System.currentTimeMillis() - syncDelta
new AnalyzedToken(word,currTag,lemma)
new AtomicInteger(1)
opcode > 0
instance instanceof IFluidTank
SampleCacheApplication.class
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THREADS))
actionButton.setRolloverImage(new ImageIcon(ca.getRolloverIcon()).getImage())
new SimpleProxyPool(httpProxyList)
ContainerUtil.newHashSet("AddToFavoritesPopup","RemoveFromFavorites","DatabaseView.ImportDataSources","CompileDirty","Compile","AddNewFavoritesList","EditFavorites","RemoveFromFavorites","RenameFavoritesList","RemoveFavoritesList")
logger.info("--> checking snapshot status for all currently running and snapshot with empty repository",blockedNode)
!thisMatched && !elem.isInflected() && elem.getPOStag() == null
uri.substring(3,pathend)
retVal.put(p.getKey(),p.getValue())
final Error e
options.getJvmOpts() == null
intsScratch.values[0]=docId
new StringBundler(10)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true)
Preconditions.checkNotNull(thirdOperand,"Argument thirdOperand can't be null")
QuartzEndpoint.class
getNonCompilablePath("InputGenericWhitespaceEndsTheLine.java")
Collections.emptyList()
mAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"createUser:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign Up Failed",Toast.LENGTH_SHORT).show();     }   } } )
stop("background",ServiceSinkhole.this,false)
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0l
member.getType(beanDesc.bindingsForBeanType())
groupVM.getIsCanEditAdministration().get()
ZONE3_SOURCE_INTERETRADIO(154)
mColumn + (x - 0.5f) * 4 + 1
srTree.Result != mySearchResult
contentType.equals(PresContentClient.CONTENT_TYPE)
indexData.clear()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).description(message)
DDLDisplayWebUpgrade.class
logger.info("Attaching API Key: " + apiKey)
JSError.make(REPORT_PATH_IO_ERROR,reportPath)
IdentityHashMap<JsName,JsFunction>
IntrospectionSupport.setProperty(jpa,"timestamp",msg.getTimestamp())
receiverStatusListener.waitForEvent(8000,3)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
@Override public Value emitBitScanForward(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   append(new SPARCBitManipulationOp(BSF,result,asAllocatable(operand),this));   return result; } 
new SnippetInstaller(runtime,runtime.getGraalRuntime().getTarget(),HotSpotGraalRuntime.wordStamp(),assumptions)
fileName.endsWith("Test.java") || fileName.endsWith("UpgradeTableListener.java") || content.contains("Callable<Void>")
device == AudioSystem.DEVICE_OUT_HDMI
new WebDriverWait(driver,5)
state == null
ours=theirIterator.next()
new AudioMediaDeviceSession(this,session)
new IndexingStats.Stats(0L,0L,0L,0L,0L,0L,0L,true,randomLong())
state.isFrameTypePermitted(FrameType.DATA)
t.isFreeformTask()
maker.getTaggedData(NOTIFICATION_SINCE_CREATE_MILLIS)
new Tree(){   public Dimension getPreferredScrollableViewportSize(){     Dimension size=super.getPreferredScrollableViewportSize();     size=new Dimension(size.width + 10,size.height);     return size;   }   protected void processMouseEvent(  MouseEvent e){     if (e.getID() == MouseEvent.MOUSE_PRESSED) {       int row=myTree.getRowForLocation(e.getX(),e.getY());       if (row >= 0) {         final Rectangle baseRect=myTree.getRowBounds(row);         baseRect.setSize(checkboxWidth,baseRect.height);         if (baseRect.contains(e.getPoint())) {           myTree.setSelectionRow(row);           toggleSelection();         }       }     }     super.processMouseEvent(e);   }   public int getToggleClickCount(){     return -1;   } } 
sendMessage(CMD_STOP_AP)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,93700,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
Helpers.msgShort(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
client.completion(buf,buf,cursor)
maxSegmentSize >= numHits
return false; 
canWrite(mediaType)
Pair.newPair(0,"Killed")
int year() default 2007; 
Map<String,String>
ThreadLocal<JMeterContext>
in.markReaderIndex().readChar()
getLock(address)
assertEquals(128,blockHashesMessage.getBlockHashes().size())
ESLoggerFactory.getLogger(component,entry.getValue())
i < 100
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(primary)
/**   * {@link Builder#prefixWith(Tree,String)}    */ public static Fix prefixWith(Tree node,String prefix){   return builder().prefixWith(node,prefix).build(); } 
getCol().getDecks().id(deckName,true)
updateSubtree(node)
ZonedDateTime.now()
messageParts[3]
minBukkitBuildVersion=699
hasDefaultConstructor(superClass)
-n2
model.getStatus() == FileDownloadStatus.pending
app.isDispatchThread()
UIUtils.getFontHeight(group) * 10
ScriptingUtil.exec(null,portletObjects,language,script)
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,toNode,direction.reverse())
Assert.assertEquals(2,results.size())
StringUtil.isNullOrEmpty(websiteDir)
war.startsWith("file:")
table != null
line.split(HgChangesetUtil.ITEM_SEPARATOR)
SkuTranslationImpl.class
WHEELER(1)
logger.info("Calimero library version {}",Settings.getLibraryVersion())
nearCache.put(key,event.getValue())
bs.max() <= 32
ApplicationManager.getApplication().invokeLater(() -> {   project.getMessageBus().connect().subscribe(ToolWindowManagerListener.TOPIC,myPostponedEventsListener);   installContentListener(); } )
previousPhase != null
(byte)205
attributeMap.put(attributeName,value)
!transformations.isEmpty()
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
new String(actual,0,i + 1)
mListUrlBuilder.setMode(ListUrlBuilder.MODE_NORMAL)
range.myStartLine < end
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,2,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,0,1,1,1,1,1,1,3,3,3,3,3,3,3,5,5,3,2,3,1,1,3,3,1,1,0,4,3,3,5,5}
tour.getStageInformation().isEmpty()
offset <= text.length()
_assertAttibutes(sourcesJSONArray.getJSONObject(1),98,50)
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0
(opcode == TEXT.getOpCode()) | (opcode == BINARY.getOpCode())
setImageViewMatrix(getDrawMatrix())
out.read(compressed,0,chunkSize)
Context.getEncounterService().createEncounter(encounter)
RECONNECT_DELAY_MAX=15
i == 0
(Long)123l
id=15805
new StringBuilder(247)
synchronized (conn) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
Boolean.valueOf(indexOptions.get(INDEX_ANALYZED_OPTION))
copyFileEntryMetadata(dlFileVersion.getCompanyId(),dlFileVersion.getFileEntryTypeId(),fileEntryId,newDlFileVersion.getFileVersionId(),dlFileVersion.getFileVersionId(),serviceContext)
chart != null
m.getClass()
FavoritesWs.class
r1
enums.maxId()
revokingStore.enable()
cluster.restartDataNode(dnIdxToDie,true)
logger.isWarnEnabled()
new File(sdkPath)
RuntimeVersion.isAtLeast12()
mDrawerItems.size() > mCurrentSelection
_assetCategories.isEmpty()
_cameras.get(cameraType)
LocalFileSystem.getInstance().findFileByPath(libPath)
openSession.close()
virtualFile != null
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
node.getPolicyWeight()
MyModel rawModel=makeModel(); 
out.write(data)
log.error("The TGT cannot be renewed beyond the next expiry date: {}." + "This process will not be able to authenticate new SASL connections after that " + "time (for example, it will not be able to authenticate a new connection with a Kafka "+ "Broker).  Ask your system administrator to either increase the "+ "'renew until' time by doing : 'modprinc -maxrenewlife {} ' within "+ "kadmin, or instead, to generate a keytab for {}. Because the TGT's "+ "expiry cannot be further extended by refreshing, exiting refresh thread now.",expiryDate,principal,principal)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0.1).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
TopNCondition.isTopNHostCondition(metricNames,hostnames) || TopNCondition.isTopNMetricCondition(metricNames,hostnames)
return sinkMaxBufferSize; 
LOG.error("OpenTracing: Failed to capture tracing data",t)
!subAdded
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
logger.error("Error getting value for expression " + expressionField.getExpression() + " "+ e.getMessage())
owner == null
public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } 
mock.setResultWaitTime(3000)
anyAreClear(state,FLAG_SHOULD_RESUME_READS)
mBackgroundBitmap == null
AudioFormat.isEncodingLinearPcm(mAudioFormat)
new AccountInfo(mtGoxAccountInfo.getLogin(),MtGoxAdapters.adaptWallets(mtGoxAccountInfo.getWallets()))
getList().getSize() == 0
new Fault(new org.apache.cxf.common.i18n.Message("START_UP_SERVER_FAILED_MSG",LOG,e.getMessage()),e)
wagonManager.getArtifact(artifact,repo,null,false)
player.teleport(playerLocation)
!sameActivity
new org.deeplearning4j.nn.graph.vertex.impl.NormalizeVertex(graph,name,idx,dimension)
return threadRunning; 
new SnippetInstaller(runtime,target,new Assumptions(false))
new ParentObserver(actualObserver)
m.getName().startsWith("test") && Modifier.isPublic(m.getModifiers())
getWebElement(webDriver,locator)
LensPositionSelectors.external()
public class AbstractSerializationsTester extends SchemaLoader {   protected static final String CUR_VER=System.getProperty("cassandra.version","0.7");   protected static final Map<String,Integer> VERSION_MAP=new HashMap<String,Integer>(){ {       put("0.7",1);     }   } ;   protected static final boolean EXECUTE_WRITES=new Boolean(System.getProperty("cassandra.test-serialization-writes","False")).booleanValue();   protected final int getVersion(){     return VERSION_MAP.get(CUR_VER);   }   protected static DataInputStream getInput(  String name) throws IOException {     File f=new File("test/data/serialization/" + CUR_VER + "/"+ name);     assert f.exists() : f.getPath();     return new DataInputStream(new FileInputStream(f));   }   protected static DataOutputStream getOutput(  String name) throws IOException {     File f=new File("test/data/serialization/" + CUR_VER + "/"+ name);     f.getParentFile().mkdirs();     return new DataOutputStream(new FileOutputStream(f));   } } 
bar.setResultWaitTime(1000)
PRIORITY_MAX=2
sourceEdgeTextData.getText().isEmpty()
return RES_WAIT; 
Object requirement
JMeterUtils.getPropDefault("httpsampler.max_redirects",5)
packages.size()
availScrollRange == 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).description(message)
RegionsRegistryConverter.class
data.batchBuffer.add(r)
regUser * userWeight * trusteeFactorValue* trusteeFactorValue
_connector.getResponses("GET //bad/foo?data=1 HTTP/1.0\n\n")
mAlarmManager.setInexactRepeating(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class))
+appInfo.uid
new IllegalArgumentException("Invalid reference to commit for merge " + request.getCommit())
Exception ex
new byte[10]
prefsWriter.commit()
!lan
pathParts[1] != null
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DUMP,message)
config.getServletContext()
contentBitmap != null
jobsLogs.jobsLogGetter()
TextUtils.isEmpty(tag)
YMLSourceUtil.getDefinitions(content,nestedDefinitionIndent)
stagingTypeSettingsProperties.toString()
TimeUnit.SECONDS.toNanos(timeoutSeconds)
currentBuilder.getRoot()
eventFunc.equals("conf_api_sub_mute")
evaluationText.getText().indexOf('\n') == -1
Strings.split(Util.expr2Object(sqlExpr.getRight()).toString(),",")
!namespaces.isDefined()
200000 * 4 * 4
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
new InputStreamReader(fileObject.getInputStream())
field != null
metaInjectMeta.isNoExecution()
getLocationEnabled()
StatList.getCraftStats(itemstack.getItem())
DvcsUtil.guessRepositoryForFile(project,GitUtil.getRepositoryManager(project),GitVcs.getInstance(project),file,GitVcsSettings.getInstance(project).getRecentRootPath())
mListener.onFragmentInteraction(uri)
new StringBundler(13)
webSocketProcessor.close(webSocket,0)
drawerLayout.closeDrawer(fragmentContainerView)
sleepAtLeastMillis(1)
private FallbackKeySettings _fallbackKeySettings; 
timer.isActive()
websocketComponent.setMaxThreads(11)
Executors.newCachedThreadPool(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
Thread.sleep(100)
index > 0
completion.switchOnError(ex -> handler.handle(exchange,ex))
StringBundler.concat("select companyId, preferences from PortletPreferences ","where portletId = '",_PORTLET_ID,"' AND ownerType = ",PortletKeys.PREFS_OWNER_TYPE_COMPANY,";")
new LayerVisitor(editSession,asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
entry.getField(BibEntry.KEY_FIELD)
targetClassLoader == null
new AffineTransform(mTextScaleX,mTextSkewX,0,0,1,0)
SmartEnterProcessors.INSTANCE.forKey(fixture.getFile().getLanguage())
Throwable ignored
nativeLibraryDir.getParent()
GL.glBindTextureEXT(target,texture)
t1.setToUpperCase(true)
context.isPersistentField(f) && getMappedByFromAnnotation(f).equals(persistentField.getName())
Thread.sleep(1200)
type == VertexDataType.VertexBufferObject
dockedBounds.top - adjustment
event.isCanceled()
Assert.assertEquals(msg,"Unexpected token type: methodStub")
res.findViewById(R.id.avatar_bgrnd)
case 3: 
waitLatch.await(25,TimeUnit.MILLISECONDS)
BitSetUtils.class
element instanceof ZLTextWord
typeName.equals(java.util.Collection.class.getName()) || typeName.equals(java.util.Set.class.getName())
AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true,true)
StringBuffer buffer=new StringBuffer("{ "); 
textLanguage.getName()
assertRemoveSubsystemResources(servicesA)
fields.get("last_seen")
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarPath,serviceTypeRegistryService,annotationKeyRegistryService)
CRASH_AT_SIZE=5_000
instructionStart + 3
getSessionTimeout().toMinutes()
new StringBuilder(561)
assertEquals(invoicesAfterClose.size(),1)
createMaterializedFrame(arguments)
getInitClosure()
LOGGER.info(msg.apply())
LOG.info("Looking for service: " + service + ". Current token is "+ token)
dlg.setPositiveButton(fButtons[0],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,1),callbackId);   } } )
textEditor != null
new Request(picasso,CONTENT_1_URL,mock(ImageView.class),null,transformations,null,Type.CONTENT,0,null)
INDEX_VERSION=15
index.getName()
Collections.sort(runningJobs,njec)
AceThemes.TEXTMATE.equals(theme().getValue())
new ConnectionError(sm.getString("http2Parser.headers.wrongStream",connectionId,Integer.toString(headersCurrentStream),Integer.toString(streamId)),Http2Error.COMPRESSION_ERROR)
sender.waitForClose(500)
add(feedbackPanel)
-806120450
LOG.error("Cannot create writer for app " + this.applicationId + ". Skip log upload this time. ")
ByteBuffer.allocateDirect(mPreviewWidth * mPreviewHeight * 4)
new IndexWriter(d,new StandardAnalyzer(),false)
rats.getConfig()
CHECKIN_VERSION=29
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
db.qualityProfiles().activateRule(builtInProfile,rule)
synchronized (this) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
Assert.assertEquals(stringNumber,0)
assertTrue(createFactoryPage.isCreateFactoryButtonEnabled())
markerHeight
s.charAt(0) == 'z' | s.charAt(0) == 'Z'
String id
new GrammaticalRelation(Language.UniversalChinese,"nummod","numeric modifier",MODIFIER,"QP|NP|DP",tregexCompiler,"NP|QP < ( QP  =target << M $++ NN|NP|QP)","NP|QP < ( DNP=target < (QP < CD !< OD) !< JJ|ADJP $++ NP|QP )")
params.remove(key)
AtmosphereResponse.create()
lockForRescale()
MIN_NET_ID=10
logger.warn("Favorite '{}' not found",favorite)
battery.addPowerChecking(64 * MjAPI.MJ)
KeyValueHolder<RouteContext,Processor>
event.isResuming()
entry.getKey()
klass.getDeclaredMethods(false,declaredMethods)
proxyHTTPPort.getText()
OrderException.class
getLogger().info("Checking " + model.getId() + " for extensions.")
new MaterialDialog.Builder(getActivity()).title(R.string.about).positiveText(R.string.dismiss).content(R.string.about_body)
case o: 
getConversionByClass(value.getClass(),logicalType)
longValue == 0
-0f
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath",e)
mContext.checkCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
assertEquals(1,historyService.createHistoricActivityInstanceQuery().finished().list().size())
new Boundary()
Assert.assertSame(_ehcachePortalCache.ehcache,_ehcache)
Long.valueOf(str)
myProject.isDisposed()
existing.getState()
mWM.removeView(mView)
GL20.glUniform3(location,v)
!compoundResult.isSuccess()
downNode > myDownIndex
target == null
format != null
StringBuffer buffer=new StringBuffer(sericeCounterName.toString()); 
jobIds.isEmpty()
AbstractAppleNativeTargetBuildRule buildRule
builder.createStructureViewModel()
appBundle.exists() == false
marshallerCache().context().preloader().syncFuture().listenAsync(new CI1<IgniteInternalFuture<?>>(){   @Override public void apply(  IgniteInternalFuture<?> f){     ctx.marshallerContext().onMarshallerCacheReady(ctx);   } } )
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),createCommandDecoder(),connection,transformer(source))
AndroidResourceUtil.findResourceFieldsForValueResource((XmlTag)element,false)
methodNameMaps.containsKey(parentThing)
_valueDesc()
final LongAdder cnt=new LongAdder(); 
assertEquals(14000,peer.getPingTime())
ClusterMetadata metadata=cluster.getMetadata(); 
i < 100000000
ContactModel::getSmsSn
!SSID_PATTERN.matcher(ssid).matches()
si != null
new GridException("Failed to deserialize task attributes [taskName=" + req.getTaskName() + ", taskClsName="+ req.getTaskClassName()+ ", codeVer="+ req.getUserVersion()+ ", taskClsLdr="+ dep.classLoader()+ ']')
model.getProductOptionValidationStrategyType()
DefaultGradleDistributionLocator createGradleDistributionLocator(){   return new DefaultGradleDistributionLocator(); } 
LOG.error("Could not parse syslog message. Not further handling.",e)
assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(5)
buffer.put(indices)
MethodCallUtils.isCallToMethod(expression,"java.util.Formatter",null,"format",null) || MethodCallUtils.isCallToMethod(expression,"java.io.Writer",null,"append",null) || MethodCallUtils.isCallToMethod(expression,"com.google.common.base.Preconditions",null,"checkNotNull",null)
tryUsingRI(m)
c == Long.class
element instanceof FakeDocElement
assertEquals(12,md.references().size())
file.isHidden()
new Error("already exists: " + topic)
-1042273998
create.fetch(meta().getTables(null,getName(),"%",types))
new UnsupportedOperationException()
context.lineWidth != mesh.getLineWidth()
private void _compareManifestFiles(File expected,File actual) throws Exception {   Manifest expectedManifest=new Manifest(new FileInputStream(expected));   Manifest actualManifest=new Manifest(new FileInputStream(actual));   Attributes expectedAttributes=expectedManifest.getMainAttributes();   Attributes actualAttributes=actualManifest.getMainAttributes();   for (  Object name : expectedAttributes.keySet()) {     if (_ignoredAttributes.contains(String.valueOf(name))) {       continue;     }     String expectedValue=(String)expectedAttributes.get(name);     String actualValue=(String)actualAttributes.get(name);     Assert.assertEquals(expectedValue,actualValue);   } } 
distance(bottomLeft,bottomRight)
actionHandler.execute(editor,DataManager.getInstance().getDataContext())
originalValue != null
assertEquals(13,beanCount)
headerRow != null
timeout=600000
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS,1)
d.setHotspot(x,y)
material.getMaxDurability() < 0
connection.subscribe(jedisPubSub,patterns)
assertEquals(70011,exchange.getIn().getBody().toString().length())
texture=new Texture(this,pixelWidth,pixelHeight,texture.getParameters())
EditorFragmentComponent fragmentComponent=EditorFragmentComponent.createEditorFragmentComponent(uEditor,range.getVcsLine1(),range.getVcsLine2(),false,false); 
cs[0].set0(r,_createFrame.real_range * rng.nextDouble())
runTasks & 0x40
mSurfaceView.getHolder() != null
String jid
ReflectionUtils.invokeMethod(generateViewMethod,scaffoldingTemplateGenerator,domainClass,templateName,sw)
StringUtil.last(oldDefaultList.getName(),30,true)
Lists.newArrayList(condaExecutable,"create","-p",destinationDir,"python=" + version,"-y")
contentType.split("charset=")
DateUtils.parseDate(source,iso8601Patterns)
registerForAllMatchingVersions(level -> UnsupportedFeaturesUtil.raiseHasNoArgsUnderFinally(node,level)," not support this syntax. Raise with no arguments can only be used in an except block",node,null,false)
new ApiException(ApiException.Type.BAD_TYPE)
UIUtil.isActionClick(e)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,null,false)
mCurrentFirstVisiblePosition > 0
(opCode & 0x08) > 0
.12
mMessageList.getId()
assertEquals(0,ginfo._val.residualDeviance(),1e-5)
StyleConstants.setFontSize(style,16)
metaContact.getDefaultContact()
setEternal(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
methodType(Void.TYPE,StringBuilder.class,Request.class)
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
resultEndpoint.expectedBodiesReceived("one","two","three")
new MarketOrder(orderType,tradeableAmount,tradableIdentifier,transactionCurrency,"",null)
mRefreshView.getBottom() > mRefreshViewHeight + 20
telephony.isIdle()
setHasStableIds(true)
selection.getAsFiles()
new IllegalStateException("Unable to access to system bundle")
MainApp.getAccountType()
homeListView.setSelection(0)
SHOW_ON_APP_LAUNCH=3
smsHeader.portAddrs != null
getGpx().getColor(0)
@Override public final DivideBy and(String sql,QueryPart... parts){   return and(condition(sql,parts)); } 
state.getTypeMapper().mapReturnType(type)
MAX_INDEX_NAME_BYTES=100
operand instanceof PsiTypeCastExpression
(getSource().y() + getTarget().y()) / 2f
new ProtoFile("descriptor.proto",null,Arrays.asList("src/test/resources/unittest_import.proto"),NO_STRINGS,NO_TYPES,NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
_log.error(e)
new StringBuilder(167)
getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat())
shard.applyIndexOperationOnReplica(3,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id2",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
JsPeerInfo.create(JsPeer.create(src.getPeer()),src.getDialogTitle(),fileUrl,Placeholders.getPlaceholder(src.getPeer().getPeerId()))
textView.getTop()
logger.error("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
fileSystem.move(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
consumerPort=8830
iter.next()
PersistentTask<Params>
/**   * This is  {@link GroovySurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.3.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class GroovySurrogateRegisteredServiceAccessStrategy extends BaseSurrogateextendsRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-3998531629984937388L;   private String groovyScript;   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> principalAttributes){     if (isSurrogateAuthenticationSession(principalAttributes)) {       try {         final Object[] args={principal,principalAttributes,LOGGER};         final Resource resource=ResourceUtils.getResourceFrom(this.groovyScript);         return ScriptingUtils.executeGroovyScript(resource,args,Boolean.class);       }  catch (      final Exception e) {         LOGGER.error(e.getMessage(),e);       }       return false;     }     return super.doPrincipalAttributesAllowServiceAccess(principal,principalAttributes);   } } 
constr.ipadx=6
RegisteredService::getName
mock(ExampleService.class,MockReset.before())
DirectoryReader.open(writer,true)
mCollapsibleHeight > 0
wizardModel.databaseConnection.contains("localhost")
return key; 
commandLineConverter != null
new StoreFile(this.fs,linkFilePath,conf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
return 0; 
Assert.assertEquals(masterAddress,new InetSocketAddress("RemoteMaster3",defaultPort))
PositiveIntegerValidator.class
serializer.serializeForInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.1100,10.7530,ef),currIdx.findClosest(49.6500,10.3410,ef),73533,1462)
/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     return sb.toString();   } } 
graphStack.push(tx)
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
getMapNearCacheManager(dataMember)
result.setWriteIfCompleted(true)
subscriber.tryEmit(String.valueOf(i))
t + 5000
private AttributeBinding attributeBinding; 
Arrays.asList(MimeTypes.VIDEO_MP4,MimeTypes.VIDEO_WEBM,MimeTypes.VIDEO_H263,MimeTypes.VIDEO_MPEG,MimeTypes.AUDIO_MP4,MimeTypes.AUDIO_MPEG)
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFile()
this.col=col
new NotifyBuilder(context).whenDone(4)
public TokenStream create(Reader input){   return new ArabicLetterTokenizer(input); } 
ByteBuffer.allocateDirect(DEFAULT_NET_BUFFER_SIZE)
/**   * Represents a dependency on another Eclipse project.  */ public interface EclipseProjectDependency extends ProjectDependency, EclipseDependency {   /**   * Returns the target of this dependency.  * @return The target project, or null for a dependency on a different build within a composite.  */   HierarchicalEclipseProject getTargetProject();   /**   * Returns the project directory of the target eclipse project.  * @return The target project directory, never null.  * @since 2.14  */   @Incubating File getTargetProjectDirectory();   /**   * Returns the path to use for this project dependency.  */   String getPath();   /**   * Marks this dependency as exported.  * @return whether this dependency needs to be exported.  * @since 2.5  */   boolean isExported(); } 
Slog.e(TAG,"Unable to bind FLP Geofence proxy.")
storeSettings(actionRequest,themeDisplay,getServiceName())
@NonNull String uri
location.getAccuracy() < precision
filesToDownload.size() < 1
method.getReturnType().getSimpleName()
loopButton.isEnabled()
_buildTemplateWithGradle("simulation-panel-entry","simulator-dependency-management","--dependency-management-enabled","true")
Messages.getString("BaseStep.SafeMode.Exception.MixingLayout","" + (i + 1),Const.CR,referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
Arrays.asList("jacocoant","sonarqube-ant-task","hsqldb","activemq-all")
GL20.glGetUniform(program,location,params)
DEFAULT_ROW_FLUSH_BOUNDARY=500000
new SemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: field " + field + ":"+ " appears on the left side of the UNION at column position: "+ getPositionFromInternalName(lInfo.getInternalName())+ ", and on the right side of the UNION at column position: "+ getPositionFromInternalName(rInfo.getInternalName())+ ". Column positions should match for a UNION"))
StringUtils.isEmpty(value) ? true : Boolean.parseBoolean(value)
!mTranslucentStatusBar
RepairSession.class
/**   * set if this item is selectable  * @param selectable true if this item is selectable  * @return  */ @Override public T withSelectable(boolean selectable){   this.mSelectable=selectable;   return (T)this; } 
Long.valueOf(this.getOptional("kylin.server.sequence-sql.expire-time","86400000"))
waitForDown(CCMBridge.IP_PREFIX + '2',c.cluster)
System.arraycopy(objectArray,0,newObjectArray,0,3)
prefix != null
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
new ChooseCallAccountPopupMenu(tree,providers)
!this.isStompConnected
Boolean.valueOf(this.getOptional("kylin.query.security.table-acl-enabled","true"))
logger.info("--> checking that _current no longer returns the snapshot",blockedNode)
materialScrollBar.setIndicator(new CustomIndicator(this),true)
public TokenStream create(TokenStream input){   return new KeepWordFilter(input,words,ignoreCase); } 
TypeMissMatchException e
datum.getScore()
Ticket.class
result=35
src.copy(src.getConfig(),false)
mappingData.wrapperPath.recycle()
Packet packet
fragmentEntryPersistence.filterCountByG_FCI(groupId,fragmentCollectionId)
content.equals(newContent)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
ImmutableSet.of("superconsole")
copy.add(obj)
bop.getBindingInput()
ConcurrentLinkedQueue<long[]>
target.getUri()
fields != null
i > 1000
HTREEMAP_DIR_SHIFT=4
writeLine(STLS_COMMAND)
e2.addSuppressed(e)
new EclipseWtpmodulesWriter(getLog()).write(outputDir,executedProject,reactorArtifacts,sourceDirs,localRepository)
n.getValue().getKey() != null
Criterion.and(TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.in(tagUuids))
logger.error("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
CollectionUtils.filter(upSaleProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((UpSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
VMDebug.attachAgent(library + "=" + options)
case e: 
new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,cPreviewSteps,executedSteps.size(),true,null,props)
MAGIC=0xcafebabe
Time.getDescription(milliseconds)
Localization.menuTitle("Look up document identifier")
theFeatures.divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
row.size() == 0
app.getSettings().SPEAK_SPEED_CAMERA
FLAG_USE_MAGNIFIER=false
return dataPack; 
inserter.release()
IndexReader.open(ramDir,true)
new StringRepresentation(ret.toString())
assertEquals(revisions.size(),myRevisions.size())
new CSVFilter(lines)
V
DataManager.getInstance().getDataContext()
Map<K,? extends V>
size=3
tablelist == null
vb.getData().capacity()
new HostAddress(domain,port)
mavenRepoLocal == null
!Character.isLetter((char)c) && (c != '_')
port=8080
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,true)
new DefaultPropertyNamePatternsMatcher(delimeters,"aaa","bbbb","ccccc")
LOG.error("An exception was caught while attempting to handle an activity generated exception",th)
connections.get(address)
services.add(ClassLoaderScope.class,targetScope)
ChannelBufferHolders.catchAllBuffer()
new Button("submit",new StringResourceModel("submit",this,null)){   private static final long serialVersionUID=4149741045073254811L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setCoverageAccess((CoverageAccessInfo)coverageModel.getObject());     gs.save(global);     doReturn();   } } 
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN)
near.remove(1)
obj.getName()
itemMatches(itemStack,target,false)
data == null
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
((getAdditionalInformation() != null) && ((database instanceof PostgresDatabase) || (database instanceof OracleDatabase))) || (database instanceof HsqlDatabase)
Set<Renderer>
segmentInfos.createBackupSegmentInfos(true)
poiParentCategory != null
JMeterUtils.getPropDefault("backend_graphite.send_interval",5)
files != null
null != m_isJUnit
a.entrySet()
Instrumenter instrumenter
RIGHT_ID=3534
FileDataStorageManager.triggerMediaScan(file.getStoragePath())
status.getServerName()
PsiTreeUtil.isAncestor(elsePart,e,true)
log.error("Unable to save data for operation '" + op + "'")
statement.addPrimaryKeyColumn(column.getName(),constraints.getPrimaryKeyName(),database.getColumnType(column.getType(),isAutoIncrement))
first.getIndexInFile() == j - 2
plan0.getPriceListName().equals(plan1.getPriceListName()) && plan0.getProductName().equals(plan1.getProductName())
createScopePanel()
_buildTemplateWithGradle("service","service-dependency-management","--service","com.liferay.portal.kernel.events.LifecycleAction","--dependency-management-enabled","true")
charArray.length * 2
sendKeyDown(keycode)
/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static PkgControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException("syntax error in url " + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to find " + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } 
visible=false
targetActor.addListener(listener)
DvcsUtil.guessRepositoryForFile(project,getRepositoryManager(project),HgVcs.getInstance(project),DvcsUtil.getSelectedFile(project),HgProjectSettings.getInstance(project).getRecentRootPath())
pathParts[0] != null
activityPointList.size() + 1
proxyHTTPServer.getText()
ReadNode result=graph.add(new ReadNode(klassOop,LocationNode.create(LocationNode.FINAL_LOCATION,CiKind.Int,config.klassModifierFlagsOffset,graph),StampFactory.forKind(CiKind.Int))); 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedWouldBeOverwrittenDetector.getFiles(),"rebase")
logger.error("Failed to load config file {}, falling back on default config")
analysis.primaryKeyLiterals().size() > 1
case UNKNOWN: 
startMediaTimeUs != START_NOT_SET
_connector.getResponses("METHOD /foo HTTP/9\n\n")
logger.error("Couldn't read file: " + file)
assertLeftRightCategory(6,category1c)
searchContext | UsageSearchContext.IN_PLAIN_TEXT
mMediaRouter.addCallback(MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY,mMediaRouterCallback)
DataRow row=dataTree.findOne(new KeySearchRow(key.hashCode(),key,0)); 
Boolean ignored
Long.valueOf(strings[i])
createSequence(crs,(Point)data.get(i))
chars == null
checkArgument(partitionColumns.size() == values.size())
Exception e
setMode(mode)
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,1,Integer.MAX_VALUE)
primaries()
position < -1f || position > 1f ? 0 : 1f - (scale - 1f)
add(food(10),TUNA,COOKED_SWEETCORN,CRAB_MEAT,CHOPPED_TUNA,COOKED_CHOMPY)
new MockNode(nodeSettings,true,Version.CURRENT,Arrays.asList(ShieldPlugin.class,licensePluginClass()))
options.put(key,System.getProperty(key))
Map<String,String>
Class[]
doSubstitute(TypeSubstitutor.EMPTY,newOwner,modality,visibility,isOperator(),isInfix(),isExternal(),isInline(),isTailrec(),null,copyOverrides,kind)
msg.containsKey(SECURITY_PROCESSED) || isGET(msg)
format.width * format.height > MediaCodecUtil.maxH264DecodableFrameSize()
deploymentUnit.getParent() == null
StringUtil.equals(packageName,filter)
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",14)
new IndexWriter(indexDir,ANALYZER,!add)
new SystemAudioActionFromTv(tv(),mAvrAddress,true)
logger.trace("{} error while performing pre synced flush on [{}], skipping",shardId,exp,shard)
recoveryDescs.put(id,recovery=new GridNioRecoveryDescriptor(queueLimit,node,log))
new AmazfitBipFWHelper(uri,context)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.2f,FOLDER_NAVIGATION)
LOGGER.debug(message,e)
Predicates.or(Predicates.containsPattern("storm-compatibility-examples.src.java"),Predicates.containsPattern("storm-compatibility.src.java"),Predicates.containsPattern("tools/test/LcovMerger"),Predicates.containsPattern("contrib"))
SettingsActivity.class
mDownloadXtraDataPending=false
CryptoUtils.loadCertificate(is,new char[]{'p','a','s','s','w','o','r','d'},"morpit")
chatButton.setPressedImage(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_PRESSED))
minPriority == null ? 1 : minPriority
public Trigger withLateFirings(OnceTrigger lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
UnsupportedOperationException.class
newValue.getReceivedNumber() == Integer.valueOf(SettingUtility.getMsgCount())
(uptime - days) * 60
ThreadLocal<Map<String,CacheEntry>>
name.isEmpty()
Assert.fail()
case 13: 
u.equals(user)
s1.isNegative()
selector.select(500)
decoder.readString()
val=1
in.getLocalName()
ts.getJobId() == jobid
type != EventType.QUERY
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
curThread instanceof IgniteDiscoveryThread
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_FRIST),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_FRIST)),AccountType.Normal,200_000_000L)
size=10000
id=15859
!client && !disabled && complianceConfig.logExternalConfig()
String.format("(\\d{0,%d})(\\.\\d{1,%d})?",integer,fraction)
final ReflectiveOperationException x
info == null
columns.size() == 1
!TextUtils.isEmpty(library.getLibraryWebsite()) && !TextUtils.isEmpty(library.getRepositoryLink())
mInjector.getUserManager().removeUser(userId)
psiTypeParameter.getText()
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)
dataOffset == data.length
testOffset=4875454l
super(0); 
is(200)
new ProtoFile("search.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
assertThat(client).replicationController("fabric8-console-controller").hasId("fabric8-console-controller")
storeRepo.getAllLocalStores()
((GrReferenceList)e).getReferenceElements()
convertImportsToSingleLine=true
calendar.set(Calendar.YEAR,2200)
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_JUMP_TO,false)
docker.waitContainerCmd(container.getId())
response.getStatusCode()
new StreamError(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR,streamId)
activeFrom.getTime()
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
targetElement != null
((aLatitudeE6 < this.mLatNorthE6) && (aLatitudeE6 > this.mLatSouthE6)) || ((aLongitudeE6 < this.mLonEastE6) && (aLongitudeE6 > this.mLonWestE6))
audioSink.toString()
args[5]
list != null
public static TitledBorder createTitledBorderBoldWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),18,1,new Insets(5,0,10,0)); } 
input.getName().toLowerCase().contains(partialName.toLowerCase())
zip(srcPath,zipPath,true)
new HashMap()
injectionConfiguration.getSource().getResourceValue(serviceBuilder,context,managedReferenceFactoryValue)
TEST_UTIL.getHBaseAdmin()
swipeVertical
members == null
new RuntimeException("should execute connector.connect() first")
!rrdFile.exists()
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
mRefreshView.getBottom() > mRefreshViewHeight
final WorkingMemory workingMemory=ruleBase.newStatefulSession(); 
case RU_TASKS: 
id=26
!syncedFolderItem.isEnabled()
JsonProcessingException ex
twitter1.getRetweets(18594701629l)
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),OsProbe.getInstance().osStats(),ProcessProbe.getInstance().processStats(),JvmStats.jvmStats(),new ThreadPoolStats(threadPoolStats),new FsInfo(0,pathInfo),null,null,null,null,null)
Constant.isDailyBuild()
IoUtils.safeClose(channel)
new RuntimeException("Unable to load lock file")
proxyRequest.getEnvironment()
BorderFactory.createEmptyBorder(10,10,0,0)
src.getPlatformKind() == Kind.Int
logger.info("reading file from {}, repairedAt = {}",session.peer,repairedAt)
@Override public Object call() throws Exception {   if (distribution.getBaseName() == null || distribution.getBaseName().equals("")) {     throw new GradleException("Distribution baseName must not be null or empty! Check your configuration of the distribution plugin.");   }   return distribution.getBaseName(); } 
super.getRealtimeSegmentFlushSize(useLlc) * 10
new TypeList.Explicit(entryTypes)
commitBatchSize=1000
new SQLException("Unknown error","00000",-1,null)
new MyAlertDialogFragment()
docsInSegment.get() >= 10
timeout / 100
saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS)
original.getScreenName().endsWith("new")
taskFile.getAnswerPlaceholders().isEmpty()
new WrappedEpoxyModelClickListener(this,listener_OnClickListener)
GL.glDrawArraysEXT(mode,first,count)
logger.warn("Operation failed for accountId='{}' accountExternalKey='{}' error='{}'",paymentStateContext.getAccount().getExternalKey(),e.getMessage())
c.write("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
(PrivateData)privateDataProviders.get(key)
resultEndpoint.assertIsNotSatisfied()
pubSubDomain=true
10 + (int)(10000 * new Random().nextDouble())
GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)
new Tag(line,column,text,on)
ev.mDataSamples.length < ND
getEditor().getDocument().addDocumentListener(this)
addSkyNodes()
final string clientSecret="your client secret"; 
3L * 60 * 1000
detectionHandler.isErrorDetected()
i - sizeDifference > 0
fromCal.get(Calendar.ERA)
view != null
type.toUpperCase(ENGLISH)
mLayoutParams.width >= 0
this.setBuffer(VertexBuffer.Type.Index,3,indices)
Log.e(TAG,"Got null argument for a signing keyset, ignoring!")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new PeepholeSubstituteAlternateSyntax(true)
getConfig().getBoolean(SPIDER_PARSE_SITEMAP_XML,false)
LOG.debug(e)
++polled <= maxResults
Mockito.anyString()
FileSystem.getLocal(conf).delete(localScratchDir)
prop.getParamName()
maxMergeAtOnce != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
TurnPathHelper.getBitmapFromTurnType(ctx.getResources(),bitmapCache,TurnType.C,0,0,TurnPathHelper.FIRST_TURN,null,scaleCoefficient / miniCoeff,leftSide)
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0
new AsyncTask<Object,Object,Long>(){   @Override protected Long doInBackground(  Object... objects){     return DatabaseHelper.getInstance(context).getHostCount(rule.info.applicationInfo.uid,false);   }   @Override protected void onPostExecute(  Long hosts){     rule.hosts=hosts;     notifyDataSetChanged();   } } .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
setBackgroundDrawable(null)
requestsPolicy.isValid(count)
-1147719266
this(parameters,new StringBuilder(),false); 
firstIteration
!myDisposed
config.getMapConfig(mapName).setTimeToLiveSeconds(5)
new StringBuilder(741)
randomNonNegativeLong()
log.info(sm.getString("contextConfig.role.auth",roles[j]))
(short)777
keyPattern.getDefaultValue() == null
myContents.isEmpty()
Lists.newArrayList("timestamp","source")
RedissonSetCache.class
this.setSortParamsByRequiredFlag(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
public static TitledBorder createTitledBorderBoldWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),0,1,new Insets(5,0,10,0)); } 
DEFAULT_MAX_UNION_SIZE=20
returnElements.isEmpty()
final IndexReader r=w.getReader(); 
new SimpleMongoDbFactory(mongo(),getDatabaseName(),creadentials)
block.blockMaterial.isHarvestable()
unsafe.compareAndExchangeObject(container,doubleOffset,container,dummyValue)
ColorResources.getColor("inactiveTextColor")
greaterThan(1)
final TestActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait()
probability(NOT_FREQUENT_PROBABILITY,hintHub.equal(objectHub))
factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)
recall()
new NoSuchMethodError()
processAssignment(substitutor.substitute(targetType),initializer,parameter.getNameIdentifierGroovy(),method)
StatusBarIconController.getTint(mTintArea,mWifiActivity,mIconTint)
sendGetBlockHashesByNumber(blockchain.getBestBlock().getNumber(),maxHashesAsk)
evaluate("value = read_config('foo', 'bar')").lookup("value")
longValue() & 0xFF
BufferUtil.zeroBuffer(9)
formsFound=true
rs.getInt(1) > 1
proposalController.processProposals(currentMaintenanceTime)
((Activity)getContext()).onBackPressed()
BuildRule buildRule
new UnsupportedOperationException()
temp_descs.get(i)
LocalDateTimeUtils.getLocalDateClass()
/**   * Returns the next pseudorandom  {@link ArrayValue} of duration elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of duration elements.  */ public ArrayValue nextDurationArray(){   return Values.durationArray(nextDurationArrayRaw(minArray(),maxArray())); } 
new NotSupportedException()
amp*=0.5
moveInputMethodWindowsIfNeededLocked(false)
logger.warn("Writing large partition {}/{}:{} ({}) to sstable {}",metadata.ksName,metadata.cfName,keyString,rowSize,FBUtilities.prettyPrintMemory(rowSize),getFilename())
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
BIG_ENOUGH_INT + 0.5
Assert.assertEquals(326,md.getMetrics().size())
"SELECT id, factId, combinedDue FROM cards WHERE type = 1 AND combinedDue > " + dueCutoff + " ORDER BY combinedDue LIMIT "+ mQueueLimit
V2=false
1 * ONE_HOUR
IndexReader newReader; 
new ThreadPool()
ctx.isSwapEnabled()
"http".equals(protocol)
props.setProperty(JdbcConnectionParams.PROPERTY_URL,url)
vsbPolicy=HORIZONTAL_SCROLLBAR_ALWAYS
{BOOLEAN,BOOLEAN_ARRAY,DATE,DATE_ARRAY,DOUBLE,DOUBLE_ARRAY,FLOAT,FLOAT_ARRAY,INTEGER,INTEGER_ARRAY,LONG,LONG_ARRAY,NUMBER,NUMBER_ARRAY,SHORT,SHORT_ARRAY,STRING,STRING_ARRAY,STRING_ARRAY_LOCALIZED,STRING_ARRAY_LOCALIZED}
this.reader.comparator.compare(reader.blockIndex.blockKeys[b],key)
conn.getResponseCode() == HttpURLConnection.HTTP_OK
!isAllSized()
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SELECT_SPLASH_SCREEN,false)
mContext.startActivity(intent)
ENERGY_COUNTER=4
ServerError._getCode(res)
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)
new ConstructorInjectionComponentAdapter(implClass,implClass)
pluginClasspathUrl.getFile()
client.checkExists()
new LocalizationEntity(_packagePath,_apiPackagePath,_portletName,_portletShortName,_name.concat("Localization"),_humanName.concat(" localization"),_table.concat("Localization"),_alias.concat("Localization"),persistenceClass,_dataSource,_sessionFactory,_txManager,_cacheEnabled,_dynamicUpdateEnabled,_mvccEnabled,_deprecated,Collections.singletonList(entityLocalizationIDColumn),regularColList,Collections.<EntityColumn>emptyList(),Collections.<EntityColumn>emptyList(),columnList,finderList,Collections.singletonList(this),_txRequiredList)
MAX_MODULES=57
timeout=1000
listener.equals(pongMessageHandler)
this.optimizedDispatch
TIME_SCALE=1000
SSL.getErrorString(err)
newHeight + BORDER_THICKNESS
Validator.isNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
node1.checkTreeEqualsSilent(node1)
lastFilterIndex == -1
TopAndRecentlyPlayedTracksLoader.getRecentlyPlayedTracks(getApplicationContext())
new Window(window,begin,end)
logger.info("license [{}] - invalid",license.uid())
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.DoesNotExists.Message")
lexer.token() == (Token.SELECT)
printTypeWithoutBounds(out,type)
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper)
parent instanceof AppWidgetHostView
preparedStatement.setCharacterStream(paramIndex,tmpReader)
items[25]
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(1,Duration.ofMillis(100),Duration.ofMillis(2000),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 1/1").hasCause(exception))
rightExpression == null
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
versionDeterminer.getGccMetaData(candidate)
skipDoc >= doc
unfinishedVerificationHere()
private static DisplayEnvironment env; 
/**   * Created by Marcin on 2015-12-19.  */ public class Chip extends FrameLayout {   private ImageView icon;   private TextView title;   private ImageView close;   private OnRemoveListener onRemoveListener; public interface OnRemoveListener {     void onDismiss();   }   public Chip(  Context context){     super(context,null,R.attr.carbon_chipStyle);     initChip(null,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs){     super(context,attrs,R.attr.carbon_chipStyle);     initChip(attrs,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr){     super(context,attrs,defStyleAttr);     initChip(attrs,defStyleAttr);   }   @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){     super(context,attrs,defStyleAttr,defStyleRes);     initChip(attrs,defStyleAttr);   }   private void initChip(  AttributeSet attrs,  int defStyleAttr){     inflate(getContext(),R.layout.carbon_chip,this);     title=(TextView)findViewById(R.id.carbon_chipText);     icon=(ImageView)findViewById(R.id.carbon_chipIcon);     close=(ImageView)findViewById(R.id.carbon_chipClose);     close.setOnClickListener(new OnClickListener(){       @Override public void onClick(      View v){         if (onRemoveListener != null)         onRemoveListener.onDismiss();       }     } );     if (attrs != null) {       TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.Chip,defStyleAttr,0);       setCornerRadius((int)a.getDimension(R.styleable.Chip_carbon_cornerRadius,0));       setText(a.getString(R.styleable.Chip_android_text));       int iconRes=a.getResourceId(R.styleable.Chip_carbon_icon,0);       if (iconRes != 0) {         setIcon(iconRes);       }  else {         setIconVisible(false);       }       int color=a.getColor(R.styleable.Chip_android_background,0);       setBackgroundColor(color);       a.recycle();       Carbon.initElevation(this,attrs,defStyleAttr);     }   }   public void setText(  String text){     if (text != null) {       title.setText(text);       title.setVisibility(View.VISIBLE);     }  else {       title.setVisibility(View.GONE);     }   }   public void setText(  int resId){     setText(getResources().getString(resId));   }   public String getText(){     return (String)title.getText();   }   public View getTitleView(){     return title;   }   public void setIcon(  int iconRes){     icon.setImageResource(iconRes);     setIconVisible(iconRes != 0);   }   public void setIcon(  Drawable drawable){     icon.setImageDrawable(drawable);     setIconVisible(drawable != null);   }   public void setIcon(  Bitmap bitmap){     icon.setImageBitmap(bitmap);     setIconVisible(bitmap != null);   }   public Drawable getIcon(){     return icon.getDrawable();   }   public View getIconView(){     return icon;   }   public void setIconVisible(  boolean visible){     icon.setVisibility(visible ? VISIBLE : GONE);     setPadding(visible ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingTop(),getPaddingRight(),getPaddingBottom());   }   public void setRemovable(  boolean removable){     close.setVisibility(removable ? VISIBLE : GONE);     setPadding(getPaddingLeft(),getPaddingTop(),removable ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingBottom());   }   public boolean isRemovable(){     return close.getVisibility() == VISIBLE;   }   public void setOnRemoveListener(  OnRemoveListener onRemoveListener){     this.onRemoveListener=onRemoveListener;   } } 
IndexReader.open(userindex,true)
CollectionItemInfo.obtain(0,1,position,1,isHeading,isSelected)
LOGGER.debug("Could not execute delete",ex)
new GenericDynamicProperty(MODEL_AND_VIEW,ModelAndView.class,null,false)
Collection<DataSet>
Assert.assertTrue(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
_log.error(sb.toString())
mAppToken.hasContentToDisplay()
new LinkedList<>(0)
onCreateView(mContext,appWidgetId,appWidget)
typeInfoList[type.ordinal()].toArray()
enabled.get()
FileUtils.getFilesDir(testContext,"test-screenshots")
inverseCopy.apply(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
((ExecutorService)executor).isShutdown()
new ASMClassLoader()
id=40
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,false)
executeRunnableDismissingKeyguard(runnable,null,false,true)
args.putLong(ProgressScene.KEY_PAGE,result2.page)
mContext.getString(R.string.branded_monitoring_description_app_personal)
type.equalsIgnoreCase("boolean")
ex.getLocalizedMessage().equals("no source files")
@IntMethodAnnotation(-44)
settings.getFilesize(Keys.git.packedGitOpenFiles,cfg.getPackedGitOpenFiles())
Assert.assertEquals(result,expected)
new ModelNode().set(17500)
serverId > 0
o1.getPriority()
Integer.valueOf(options.getMaxKeys())
return mAppearingDuration; 
ProxyHelper.createProxy(endpoint,ISay.class)
correlationID != null
new RedissonSession()
new FileStructurePresenter(view,javaNavigationService,context,editorAgent,loaderFactory)
algo.equals(alloc.algo)
rootReference.root.isSaved()
line <= 0
mProfileCursor.getCount() == 0
id=15850
new SegmentReader(infos.info(i),newReaders[i].core,IOContext.READ)
new DashboardServiceImpl(mongoRule.getMongoConnection(),metricRegistry,searches,dashboardWidgetCreator)
out.write(this.connectionAddress.getPort())
GL11.glGetTexParameter(target,pname,params)
NODE_START_CHECK_LIMIT=25
new FsInfo(0,pathInfo)
boundary != null
atLeast(50)
row.getInt(4)
Arrays.asList("Hidschāb/S","Dvořák/S","Erdoğan/S","Ångström","µg","µl","µm","'Ndrangheta","McDonald's")
mActiveAgents.remove(info)
target.setField(1,edge)
index.sync()
new RuntimeException("failure")
makeInteractions(test,false,InteractionPair.generatePairwiseInteractionsFromList(interactionIndexes),true,false,false)
s1.isUnsubscribed()
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
is(false)
modified || f.updateField()
@Override public void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityError {   Preconditions.checkNotNull(query);   queueLock.lock();   String groupName=groupSelector.getSchedulerGroupName(query);   try {     SchedulerGroup groupContext=getOrCreateGroupContext(groupName);     checkGroupHasCapacity(groupContext);     query.setSchedulerGroupContext(groupContext);     groupContext.addLast(query);     queryReaderCondition.signal();   }   finally {     queueLock.unlock();   } } 
LAST_VERSION=1002
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).errorStrategyContinue()
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING)
accountSettings.isSynchronization()
o.getAmount()
case USER_ID_CONFIRMED: 
32 + (PersistentHashMapValueStorage.COMPRESSION_ENABLED ? 1 : 0)
identifier.toString()
PermanentGraph<CommitId>
snapshot != null
colors.getResourceId(i,0)
commit()
grid.context().cache().dynamicDestroyCache(cache.getName(),true,true)
logger.debug(String.format("Submitting %s metric for metric emission pool",metric.getName()))
treePrev.getTextLength() == 0
list.add(parameter)
mService.mDisplayContents.get(displayNdx)
new ProtoFile("exotic.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
PipelineLabel.create(labelTemplate,buildCause.getVariables().insecureVariablesHash())
(Compound)locationStrategies
!portletId.startsWith(PortletKeys.WIKI_DISPLAY)
parcel.writeCharSequence(mViewIdResourceName)
assertEquals(2,ti.nrOfInvocations)
logger.debug("NODE {}: App version requested but Version class not supported",this.getNodeId())
this.gatewayDelegate.setRequestChannel(replyChannel)
assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
ViewGroup newView; 
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,false,aggregationAnnotation.approximate(),factory)
Collection<DelayedEntry>
latch.await(5,TimeUnit.SECONDS)
mgr.isToolWindowRegistered(((ToolWindowImpl)myWindow).getId())
r.unlock()
new NativeAllocationRegistry(nativeGetNativeFinalizer(),nativeSize)
List.class
Timber.v("Authentication exception for new token, permanent error assumed",negativeResponseFromNewToken)
activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
storeField(field,isAttributeExpression,pexp,objectExpressionType,visitor,receiver.getData())
shard.idCache().onCached(readerCache.sizeInBytes())
IRON_SWORD(267,1,59)
annotations.isEmpty()
List<Bottom>
isPost(request)
Slog.wtf(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
volume.getMtpReserveSpace() * 1024 * 1024
logLine == 0
scopes.stream()
verify(mWifiService).stopLocalOnlyHotspot()
Object v
isDoubleA && isIntA
IDLE_TIMEOUT_MS=120000
"Python packaging tools and " + warningList
tableModel == null
mTfs.createFile(new TachyonURI("/root/testFile1"))
file.getCanonicalPath()
st.setCharacterStream(index,characterStream.asReader(),characterStream.getLength())
args.add(this)
"Surface(native-token=" + mSurface + ")"
packetId == 0x18
fm.stringWidth(fullText) > maxWidth
cacheConfig.isPopulateCache()
new IllegalStateException("Unexpected number of values for entry:" + entryValues)
kl.getAvailableKisoks()
mockResultSet.getDouble(1)
Resources.getString("defaultGroupName")
cf.getCompressionType() == null
List<Double>
questions.size()
typesToMatch.length != 1
amenity.getName(lang)
AsyncHttpClient.class
new ServerData("Command Line",host + ":" + port)
SESSIONS_ROOM_AFTER(408,"sessions/room/*/after/*",ScheduleContract.Sessions.CONTENT_TYPE_ID,false,null)
new KettleException("There was an error during transformation split")
this.spiceServiceListenerSet.add(spiceServiceServiceListener)
o1.getParameterTypes()
SiteNavigationLanguageWebUpgrade.class
isBetween(11000,12000,alt.getDistance())
public class PrivateKeyJwsSignatureProvider implements JwsSignatureVerifier {   private PrivateKey key;   private SecureRandom random;   private AlgorithmParameterSpec signatureSpec;   public PrivateKeyJwsSignatureProvider(  PrivateKey key){     this(key,null);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  AlgorithmParameterSpec spec){     this(key,null,spec);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  SecureRandom random,  AlgorithmParameterSpec spec){     this.key=key;     this.random=random;     this.signatureSpec=spec;   }   @Override public byte[] sign(  JwtHeaders headers,  String unsignedText){     try {       return CryptoUtils.signData(unsignedText.getBytes("UTF-8"),key,Algorithm.toJavaName(headers.getAlgorithm()),random,signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
val & 0xFFFFFFFF
user instanceof UIRepositoryUser
startSynchronization()
LOG.debug("Retrieving location for state={} of job={} from the cache.",jobId,queryableStateName)
LOG.debug("data:" + StringUtils.byteToHexString(data))
this.registry.getValue().addXAResourceRecovery(recovery)
getEndPoint().fillInterested(_blockingReadCallback)
new KsqlEngine(kafkaTopicClient,schemaRegistryClientFactory,clientSupplier,metaStore,ksqlConfig)
4 * Bytes.SIZEOF_BOOLEAN
convertAnnotation(pkgAnnotation)
new CompletionPhase.AutoPopupAlarm(false,hostEditor)
connection.remote().nextStreamId()
__logger.error("Unable to set 'this.bundle.install' " + " for the bundle " + bundle.getSymbolicName(),t)
sdk.isPresent()
motherTongue.getName()
responseHeaderRegex == null
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commit()
FUNCTION4=13
logger.info("Normalizing")
name="java:/topic/myAwesomeTopic"
val == null && fetch(obj.getClass(),Cnd.where(mf.getName(),"=",val)) == null
_log.debug("Skipping undecodable parameter " + param,e)
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
layer1.initializer().numParams(c,true)
@Override public MavenModule dependsOn(Map<String,?> attributes,Module module){   backingModule.dependsOn(attributes,module);   return t(); } 
getNullFrame()
SSEAtmosphereInterceptor.class
_count != 0
TokenSet.create(JetNodeTypes.BLOCK,JetNodeTypes.CLASS_BODY,JetNodeTypes.FUNCTION_LITERAL_EXPRESSION)
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate")
profilesXml.exists()
downloadFragment == null
MessagingService.instance().sendOneWay(message,target)
bucket.exists()
project.getSourceDirs()
ImmutableList.of()
new NotificationCompat.Builder(context)
executorService.isShutdown()
smallIcon.getType() == Icon.TYPE_RESOURCE
new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)))
weight + (yreal * Math.log(ymodel) - logfactorial - ymodel)
mavenBundle("info.cukes","cucumber-jvm-deps","1.0.4-SNAPSHOT")
tempPinnedTaskBounds != null
jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,true)
con.serverSentScoreboard.addTeam(team)
t.join(10)
version.onOrBefore(Version.V_1_0_0_Beta2)
extraMargin + "pt"
VERBOSE=true
mFollowersWPCOM != null && mFollowersEmail != null
new JavaScriptAggregatorFactory(name,Arrays.asList(input),fnAggregate,fnReset,fnCombine)
parameters.substring(x + 1)
Arrays.equals(oldVal,val)
orgReplica.applyIndexOperationOnReplica(3,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id2",new BytesArray("{}"),XContentType.JSON),u -> { } )
Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())
cs[c].set0(r,(int)(rng.nextDouble() * _createFrame.factors))
new StackManager(new File(upgradeCycle),null,osFamily,true,metaInfoDao,actionMetadata,stackDao)
GitWorkingDirectoryFactory.newGitWorkingDirectory(portalGitWorkingDirectory.getUpstreamBranchName(),JenkinsResultsParserUtil.getProperty(portalReleaseProperties,"lp.plugins.dir"))
level.equals("ERROR")
ChannelOption<Integer>
app.getSettings().AVOID_TOLL_ROADS.get()
info.getRegionName()
!KotlinDetector.isKotlinType(ctor.getDeclaringClass())
GlobalSearchScope.projectScope(getProject())
wrapper != null
HashMap<Type,CstType>
AssetBrowserWebUpgrade.class
LOG.error(e)
tomcat.addServlet(ctx,"myServlet",new HelloWorld())
password.length() > 0
@Specialization protected Object fromBoolean(boolean value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new HashMap<>()
ensureExpectedToken(parser.currentToken(),XContentParser.Token.FIELD_NAME,parser::getTokenLocation)
sm.getString("standardRoot.startInvalidMain")
8 * 1024
Pair<Match,PsiElement>
LOGGER.warn("Caught exception while updating segment status for table {}",e,tableNameWithType)
new ForgeCommand(evt.getServer())
Period.years(lExpr.getIntervalYear())
locations.get(0).distanceTo(start) > 200
(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
utf.length + 10
Integer.valueOf(2)
3 + uids.length
heartBeatTimerTask != null
T extends Capability
root.waitThis().size() >= 0
_isNegInf(text)
docsSinceCommit > docsUpperBound
IndexReader reader=IndexReader.open(dir); 
softmax.get(point(i),point(box),all(),point(x),point(y))
expected == short.class
mHeight <= 0
new LanczosState(L,clusters,DistributedLanczosSolver.getInitialVector(L))
attribute.equals("\\Spam")
assertTrue(predicate.apply(pickleEvent))
Build.VERSION.SDK_INT > Build.VERSION_CODES.M
secondsElapsedRemaining > 0
symbolUsageValidator.validateCall(functionDescriptor,context.trace,loopRangeExpression)
buttonWidth.setPrefSize(200,30)
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(new ForwardingLoggerInterceptor(memoryDatabase)).appendParameterBinder(Pipe.Binder.install(Forwarder.class))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
Context.getVisitService().getAllVisitTypes(false)
allocator.getFlowController().prepareAction(input,epsilon,nextEpsilon,gamma,dGammaView,dBetaView)
Session.getInstance(mailServerProperties,null)
mJobs.get(i)
true_parts.addAll(Hive.get().getPartitions(tab))
query.components().toArray(new String[0])
_label != null
oppositeWindow != null && oppositeWindow.getOwner() == w
buildeSurrogatePrincipalElectionStrategyr.toString()
getResource(TEST_AUTOCONFIG_FILE,myClassLoader,updateStatus)
location != null
localAddress != null
abstract protected T createDeployTask(File pomFile,LocalMavenRepositoryLocator mavenRepositoryLocator,MavenArtifactRepository artifactRepository); 
indexSettings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
LARGE_SIZE=20
session.createTextMessage()
ctx.sendDownstream(e)
myEditor.getBackroundColor()
Exception e
certGen.addExtension(X509Extension.subjectKeyIdentifier,true,new SubjectKeyIdentifierStructure(pubKey))
new TreePath(rootPath,compilationUnitTree)
out.writeUTF(type)
fragmentServletDefinitions.put(servletName,entry.getValue())
converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)
RELAX_TIMING ? 1000 : 100
new DeadCodeEliminationPhase(OPTIONAL)
LOG.error("Failed to get files from " + baseDirectory.getAbsolutePath())
ImmutableList.of("/bin/bash","-c",command)
new ArrayList<>()
headers.size() == 1
new SolrException(1,"analyzer without class or tokenizer & filter list")
new DataCompletenessScheduler()
new JedisClusterCommand<Long>(connectionHandler,timeout,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
CentralizedThreadLocal.class
masterComponents.length > 0
data != null
@JsonProperty("id") Integer id
(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
log.info("munlocking " + file + " with length "+ length)
customCroutonControls.setVisibility(View.GONE)
mask.size()
n <= colP.getInt(i)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,false)
appleConfiguration.getMultiArchPlatform(PlatformType.IOS)
fileFactory.createFileFromText(HTMLLanguage.INSTANCE,xmlFile.getText())
pa.getStore().getJournal().getFileMap().size() == 1
y / vz
contactImpl != null
valueElement != null
win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)
crPluggableScmMaterial.getFilterIgnore()
new IOException(msg)
options.getLambdaRole()
partStore.finishLoad()
prefs.getBoolean(AUTO_START,false)
_persistedScheduler.getJobNames(groupName)
ACRA.log.e(LOG_TAG,"Could not send crash Toast",e)
fluid != null
Assert.assertEquals(account.getBillCycleDayLocal().intValue(),31)
addEnum(ArmorMaterial.class,name,durability,reductionAmounts,enchantability)
ib.isBlocking()
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(3).backward(true).hiddenLayerSizes(new int[]{3,2}).override(new ClassifierOverride(2))
tab[index]=arr
new Fault("COULD_NOT_WRITE_XML_STREAM_CAUSED_BY",LOG,e,e.getMessage())
line.contains(" throws ")
verify(applicationsSource,timeout(1000).times(3))
/**   * Controls tesselation factor (e.g how often a input patch should be subdivided)  */ TesselationControl
boosted - base < config.boostThreshold()
--remainingReleaseCount == 0
zoom - Math.floor(zoom) < 0.05f
this.getAuthorities() != null
SCROLL_BAR_SIZE=10
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",1,SECONDS)
options.removeUnusedVars
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } 
new IllegalStateException(format("Component of scope '%s' is not allowed",component.scope()))
source.getAllEditors()
channel.write(buf)
ReflectUtil.isSubclass(type,Number.class)
public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlOne.xml"));     final String[] expectedViolation={"3:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlTwo.xml"));     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlFour.xml"));     final String[] expectedViolation={"4:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT[./DOT[@text='Scanner']]");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
x instanceof ISeq
LOG.trace("Terminating channel to the remote gRPC server")
logger.warn("Cannot play line-in ({})",e.getMessage())
BUKKIT_VERSION=2586
fileList.isEmpty()
mMountTable.resolve(getPath(dir)).getPath()
new ExchangePatternType(exchangePattern)
channel.isOpen()
lpNameBuffer.getPointer()
/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; 
CommonUtils.truncateString(query.getQuery(),1000)
assertEquals(0,view.getEnqueueCount())
-586705259
inOrder.verify(mockAwareService).publish(eq(clientId),eq(publishConfig),any())
createUrl(Url.append(myRepositoryRoot,path))
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),internalCallContext,invoiceConfig)
HistoryRecord r=(HistoryRecord)it.next(); 
Assert.assertEquals(122L,assetCapsuleNew.getNetUsage())
dstCursor != null
attribute.getFieldName()
version.toString()
mAdapter == null
Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl))
myNameSuggestionsField.getComponent()
0.15 / Math.sqrt(N)
new GLMModel(args.dest,model._parms,new GLMOutput(model._output._names,model._output._domains,names,beta,.5f,model._output._binomial),model.dinfo(),Double.NaN,Double.NaN,-1,null)
times(7)
new Duration(endsMills,System.currentTimeMillis())
AllCodehausJavaTestsSuite.suite()
ensureStableCluster(3)
new AssertionError("Lib files not found.")
mFileLength - mPos < mBlockSize
o == BlockingSubscriber.TERMINATED
app.getTargetPointsHelper().getPointToNavigate() != null
SOCKET_TIMEOUT_MILLIS=2000
request.getManager().loadAsset(text)
topMbMessage.getMessageId()
new RuntimeException()
buildData.getWorkspaceDir()
type.endsWith(type)
new StackManager(new File(stackRoot),new File(commonServicesRoot),osFamily,true,metaInfoDao,actionMetadata,stackDao)
StringUtils.isNotBlank(cert)
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
makeString(list,",","(",")")
new InverseSchedule(ScheduleType.ITERATION,1,decay,1)
userGroupMember.getMemberId()
logger.info("mmap address is: " + Pointer.nativeValue(addr))
@Specialization protected Object fromByte(byte value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new StringBundler(8)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(myProject,"Updating OSGi indices",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         if (!myProject.isOpen())         return;         indicator.setIndeterminate(true);         indicator.setText("Updating OSGi indices");         myBundleManager.reindexAll();       }     } .queue();   } } )
new StackManager(new File(singleStack.replace(StackManager.PATH_DELIMITER,File.separator)),null,osFamily,true,metaInfoDao,actionMetadata,stackDao)
stopwatch.elapsedMillis()
OsmandPlugin.onDestinationReached()
TypeEvalContext.fast()
Float.parseFloat(position.getChildByName("Y").getText())
offset >= 0
return 30; 
getImportGroupId()
staticLibrary == null
Files.delete(file.toPath())
simpleRecyclerViewAdapter.insertLast("rand added item")
Layout.class
tokenLength >= 2
setComplete(length)
MapsForgeTileSource.createFromFile(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
libDirectory="."
g.cluster().node()
PrintAttributes.enforceValidColorMode(currentMode)
blockDismiss
restrictedFilters.load(is)
ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)
new Long(93)
interactor.startConfirmation(packageName,callback,mCommand,mArgs)
domain == null ? 1 : domain.length
new ArrayList<Data>()
DynamoDbConfigurationSource.class
matrix != null
TestPackage.foo(a,1,"1","!")
sstable.markCompacted()
synchronized (this) {   mScreenOnTime=readScreenOnTimeLocked(); } 
Slog.wtf(TAG,"Unknown restriction: " + restriction)
id=15834
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
Log.e(TAG,msg)
value.startsWith("npm WARN ")
InputStream.class
return raf; 
ReferencesSearch.search(method,method.getUseScope().intersectWith(myRules.getSearchScope()),true)
HiveConf.setLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(),450L)
adminClient.describeConsumerGroup(APP_ID + testNo)
collector.getRangeCountersToBeDisplayed(range)
b0.divide(b1)
/**   * This is the primary connection pool class that provides the basic pooling behavior for HikariCP.  * @author Brett Wooldridge  */ public abstract class BaseHikariPool implements HikariPoolMBean, IBagStateListener {   protected final Logger LOGGER=LoggerFactory.getLogger(getClass());   private static final long ALIVE_BYPASS_WINDOW=Long.getLong("com.zaxxer.hikari.aliveBypassWindow",1000L);   protected static final int POOL_RUNNING=0;   protected static final int POOL_SUSPENDED=1;   protected static final int POOL_SHUTDOWN=2;   public final String catalog;   public final boolean isReadOnly;   public final boolean isAutoCommit;   public int transactionIsolation;   protected final PoolUtilities poolUtils;   protected final HikariConfig configuration;   protected final AtomicInteger totalConnections;   protected final ConcurrentBag<PoolBagEntry> connectionBag;   protected final ThreadPoolExecutor addConnectionExecutor;   protected final ThreadPoolExecutor closeConnectionExecutor;   protected final ScheduledThreadPoolExecutor houseKeepingExecutorService;   protected final boolean isUseJdbc4Validation;   protected final boolean isIsolateInternalQueries;   protected volatile int poolState;   protected volatile long connectionTimeout;   protected volatile long validationTimeout;   private final LeakTask leakTask;   private final DataSource dataSource;   private final GlobalPoolLock suspendResumeLock;   private final IConnectionCustomizer connectionCustomizer;   private final AtomicReference<Throwable> lastConnectionFailure;   private final String username;   private final String password;   private volatile MetricsTracker metricsTracker;   private volatile boolean isRecordMetrics;   /**   * Construct a HikariPool with the specified configuration.  * @param configuration a HikariConfig instance  */   public BaseHikariPool(  HikariConfig configuration){     this(configuration,configuration.getUsername(),configuration.getPassword());   }   /**   * Construct a HikariPool with the specified configuration.  We cache lots of configuration items in class-local final members for speed.  * @param configuration a HikariConfig instance  * @param username authentication username  * @param password authentication password  */   public BaseHikariPool(  HikariConfig configuration,  String username,  String password){     this.username=username;     this.password=password;     this.configuration=configuration;     this.poolUtils=new PoolUtilities(configuration);     this.connectionBag=createConcurrentBag(this);     this.totalConnections=new AtomicInteger();     this.connectionTimeout=configuration.getConnectionTimeout();     this.validationTimeout=configuration.getValidationTimeout();     this.lastConnectionFailure=new AtomicReference<Throwable>();     this.isReadOnly=configuration.isReadOnly();     this.isAutoCommit=configuration.isAutoCommit();     this.suspendResumeLock=configuration.isAllowPoolSuspension() ? new GlobalPoolLock(true) : GlobalPoolLock.FAUX_LOCK;     this.catalog=configuration.getCatalog();     this.connectionCustomizer=initializeCustomizer();     this.transactionIsolation=getTransactionIsolation(configuration.getTransactionIsolation());     this.isIsolateInternalQueries=configuration.isIsolateInternalQueries();     this.isUseJdbc4Validation=configuration.getConnectionTestQuery() == null;     setMetricRegistry(configuration.getMetricRegistry());     setHealthCheckRegistry(configuration.getHealthCheckRegistry());     this.dataSource=poolUtils.initializeDataSource(configuration.getDataSourceClassName(),configuration.getDataSource(),configuration.getDataSourceProperties(),configuration.getDriverClassName(),configuration.getJdbcUrl(),username,password);     this.addConnectionExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),"HikariCP connection filler (pool " + configuration.getPoolName() + ")",configuration.getThreadFactory(),new ThreadPoolExecutor.DiscardPolicy());     this.closeConnectionExecutor=createThreadPoolExecutor(4,"HikariCP connection closer (pool " + configuration.getPoolName() + ")",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());     long delayPeriod=Long.getLong("com.zaxxer.hikari.housekeeping.periodMs",TimeUnit.SECONDS.toMillis(30L));     ThreadFactory threadFactory=configuration.getThreadFactory() != null ? configuration.getThreadFactory() : new DefaultThreadFactory("Hikari Housekeeping Timer (pool " + configuration.getPoolName() + ")",true);     this.houseKeepingExecutorService=new ScheduledThreadPoolExecutor(1,threadFactory,new ThreadPoolExecutor.DiscardPolicy());     this.houseKeepingExecutorService.scheduleAtFixedRate(getHouseKeeper(),delayPeriod,delayPeriod,TimeUnit.MILLISECONDS);     this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);     this.leakTask=(configuration.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(configuration.getLeakDetectionThreshold(),houseKeepingExecutorService);     setRemoveOnCancelPolicy(houseKeepingExecutorService);     poolUtils.setLoginTimeout(dataSource,connectionTimeout);     registerMBeans(configuration,this);     initializeConnections();   }   /**   * Get a connection from the pool, or timeout after connectionTimeout milliseconds.  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection() throws SQLException {     return getConnection(connectionTimeout);   }   /**   * Get a connection from the pool, or timeout after the specified number of milliseconds.  * @param hardTimeout the maximum time to wait for a connection from the pool  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection(  final long hardTimeout) throws SQLException {     suspendResumeLock.acquire();     long timeout=hardTimeout;     final long start=System.currentTimeMillis();     final MetricsContext metricsContext=(isRecordMetrics ? metricsTracker.recordConnectionRequest(start) : MetricsTracker.NO_CONTEXT);     try {       do {         final PoolBagEntry bagEntry=connectionBag.borrow(timeout,TimeUnit.MILLISECONDS);         if (bagEntry == null) {           break;         }         final long now=System.currentTimeMillis();         if (bagEntry.evicted || (now - bagEntry.lastAccess > ALIVE_BYPASS_WINDOW && !isConnectionAlive(bagEntry.connection))) {           closeConnection(bagEntry,"(connection evicted or dead)");           timeout=hardTimeout - elapsedTimeMs(start);         }  else {           metricsContext.setConnectionLastOpen(bagEntry,now);           metricsContext.stop();           return ProxyFactory.getProxyConnection((HikariPool)this,bagEntry,leakTask.start(bagEntry));         }       }  while (timeout > 0L);     }  catch (    InterruptedException e) {       throw new SQLException("Interrupted during connection acquisition",e);     }  finally {       suspendResumeLock.release();     }     logPoolState("Timeout failure ");     throw new SQLTimeoutException(String.format("Timeout after %dms of waiting for a connection.",elapsedTimeMs(start)),lastConnectionFailure.getAndSet(null));   }   /**   * Release a connection back to the pool, or permanently close it if it is broken.  * @param bagEntry the PoolBagEntry to release back to the pool  */   public final void releaseConnection(  final PoolBagEntry bagEntry){     metricsTracker.recordConnectionUsage(bagEntry);     if (bagEntry.evicted) {       LOGGER.debug("Connection returned to pool {} is broken or evicted.  Closing connection.",configuration.getPoolName());       closeConnection(bagEntry,"(connection broken or evicted)");     }  else {       connectionBag.requite(bagEntry);     }   }   /**   * Shutdown the pool, closing all idle connections and aborting or closing active connections.  * @throws InterruptedException thrown if the thread is interrupted during shutdown  */   public final void shutdown() throws InterruptedException {     if (poolState != POOL_SHUTDOWN) {       poolState=POOL_SHUTDOWN;       LOGGER.info("HikariCP pool {} is shutting down.",configuration.getPoolName());       logPoolState("Before shutdown ");       connectionBag.close();       softEvictConnections();       houseKeepingExecutorService.shutdown();       addConnectionExecutor.shutdownNow();       houseKeepingExecutorService.awaitTermination(5L,TimeUnit.SECONDS);       addConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       final ExecutorService assassinExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),"HikariCP connection assassin",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());       final long start=System.currentTimeMillis();       do {         softEvictConnections();         abortActiveConnections(assassinExecutor);       }  while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));       assassinExecutor.shutdown();       assassinExecutor.awaitTermination(5L,TimeUnit.SECONDS);       closeConnectionExecutor.shutdown();       closeConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       logPoolState("After shutdown ");       unregisterMBeans(configuration,this);       metricsTracker.close();     }   }   /**   * Evict a connection from the pool.  * @param proxyConnection the connection to evict  */   public final void evictConnection(  IHikariConnectionProxy proxyConnection){     closeConnection(proxyConnection.getPoolBagEntry(),"(connection evicted by user)");   }   /**   * Get the wrapped DataSource.  * @return the wrapped DataSource  */   public final DataSource getDataSource(){     return dataSource;   }   /**   * Get the pool configuration object.  * @return the {@link HikariConfig} for this pool  */   public final HikariConfig getConfiguration(){     return configuration;   }   @Override public String toString(){     return configuration.getPoolName();   }   /**   * {@inheritDoc}   */   @Override public final int getActiveConnections(){     return connectionBag.getCount(STATE_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getIdleConnections(){     return connectionBag.getCount(STATE_NOT_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getTotalConnections(){     return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);   }   /**   * {@inheritDoc}   */   @Override public final int getThreadsAwaitingConnection(){     return connectionBag.getPendingQueue();   }   /**   * {@inheritDoc}   */   @Override public final void suspendPool(){     if (suspendResumeLock == GlobalPoolLock.FAUX_LOCK) {       throw new IllegalStateException("Pool " + configuration.getPoolName() + " is not suspendable");     }  else     if (poolState != POOL_SUSPENDED) {       suspendResumeLock.suspend();       poolState=POOL_SUSPENDED;     }   }   /**   * {@inheritDoc}   */   @Override public final void resumePool(){     if (poolState == POOL_SUSPENDED) {       poolState=POOL_RUNNING;       addBagItem();       suspendResumeLock.resume();     }   }   public void setMetricRegistry(  Object metricRegistry){     this.isRecordMetrics=metricRegistry != null;     if (isRecordMetrics) {       this.metricsTracker=new CodaHaleMetricsTracker(this,(MetricRegistry)metricRegistry);     }  else {       this.metricsTracker=new MetricsTracker(this);     }   }   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       CodahaleHealthChecker.registerHealthChecks(this,(HealthCheckRegistry)healthCheckRegistry);     }   }   /**   * {@inheritDoc}   */   @Override public Future<Boolean> addBagItem(){     FutureTask<Boolean> future=new FutureTask<Boolean>(new Runnable(){       public void run(){         long sleepBackoff=200L;         final int minimumIdle=configuration.getMinimumIdle();         final int maxPoolSize=configuration.getMaximumPoolSize();         while (poolState == POOL_RUNNING && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {           quietlySleep(sleepBackoff);           sleepBackoff=Math.min(connectionTimeout / 2,(long)((double)sleepBackoff * 1.5));         }       }     } ,true);     addConnectionExecutor.execute(future);     return future;   }   /**   * Create and add a single connection to the pool.  */   protected final boolean addConnection(){     if (totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()) {       Connection connection=null;       try {         connection=(username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username,password);         if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection)) {           throw new SQLException("JDBC4 Connection.isValid() method not supported, connection test query must be configured");         }         final int originalTimeout=poolUtils.getAndSetNetworkTimeout(connection,connectionTimeout);         transactionIsolation=(transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);         poolUtils.setupConnection(connection,isAutoCommit,isReadOnly,transactionIsolation,catalog);         connectionCustomizer.customize(connection);         poolUtils.executeSql(connection,configuration.getConnectionInitSql(),isAutoCommit);         poolUtils.setNetworkTimeout(connection,originalTimeout);         connectionBag.add(new PoolBagEntry(connection,this));         lastConnectionFailure.set(null);         return true;       }  catch (      Exception e) {         lastConnectionFailure.set(e);         if (poolState == POOL_RUNNING) {           LOGGER.debug("Connection attempt to database {} failed: {}",configuration.getPoolName(),e.getMessage(),e);         }         poolUtils.quietlyCloseConnection(connection,"(exception during connection creation)");       }     }     totalConnections.decrementAndGet();     return false;   }   /**   * Fill pool up from current idle connections (as they are perceived at the point of execution) to minimumIdle connections.  */   protected void fillPool(){     final int connectionsToAdd=configuration.getMinimumIdle() - getIdleConnections();     for (int i=0; i < connectionsToAdd; i++) {       addBagItem();     }     if (connectionsToAdd > 0 && LOGGER.isDebugEnabled()) {       addConnectionExecutor.execute(new Runnable(){         public void run(){           logPoolState("After fill ");         }       } );     }   }   /**   * Permanently close the real (underlying) connection (eat any exception).  * @param connectionProxy the connection to actually close  */   protected abstract void closeConnection(  final PoolBagEntry bagEntry,  final String closureReason);   /**   * Check whether the connection is alive or not.  * @param connection the connection to test  * @return true if the connection is alive, false if it is not alive or we timed out  */   protected abstract boolean isConnectionAlive(  final Connection connection);   /**   * Attempt to abort() active connections on Java7+, or close() them on Java6.  * @param assassinExecutor   * @throws InterruptedException   */   protected abstract void abortActiveConnections(  final ExecutorService assassinExecutor) throws InterruptedException ;   /**   * Create the JVM version-specific ConcurrentBag instance used by the pool.  * @param listener the IBagStateListener instance  * @return a ConcurrentBag instance  */   protected abstract ConcurrentBag<PoolBagEntry> createConcurrentBag(  IBagStateListener listener);   /**   * Create the JVM version-specific Housekeeping runnable instance used by the pool.  * @return the HouseKeeper instance  */   protected abstract Runnable getHouseKeeper();   /**   * Fill the pool up to the minimum size.  */   private void initializeConnections(){     if (configuration.isInitializationFailFast()) {       try {         try {           if (!addConnection()) {             shutdown();             throw new PoolInitializationException(lastConnectionFailure.getAndSet(null));           }           ConnectionProxy connection=(ConnectionProxy)getConnection();           connection.getPoolBagEntry().evicted=(configuration.getMinimumIdle() == 0);           connection.close();         }  catch (        SQLException e) {           shutdown();           throw new PoolInitializationException(e);         }       }  catch (      InterruptedException ie) {         throw new PoolInitializationException(ie);       }     }     fillPool();   }   /**   * Construct the user's connection customizer, if specified.  * @return an IConnectionCustomizer instance  */   @SuppressWarnings("deprecation") private IConnectionCustomizer initializeCustomizer(){     if (configuration.getConnectionCustomizerClassName() != null) {       return createInstance(configuration.getConnectionCustomizerClassName(),IConnectionCustomizer.class);     }     return configuration.getConnectionCustomizer();   }   public final void logPoolState(  String... prefix){     if (LOGGER.isDebugEnabled()) {       LOGGER.debug("{}pool stats {} (total={}, inUse={}, avail={}, waiting={})",(prefix.length > 0 ? prefix[0] : ""),configuration.getPoolName(),getTotalConnections(),getActiveConnections(),getIdleConnections(),getThreadsAwaitingConnection());     }   } } 
assertEquals("throughput",94.155883322,model.getThroughput(),0.00000001)
poolTimeoutMillis < 0
logger.getParent()
continueBox.setSelected(true)
assertTrue(Utils.mkList("RUNNING","CREATED").contains(metadata.threadState()))
GridCacheEntry<UUID,String>
params.length >= 9
SchematicsLoader.INSTANCE.load(ProjectManager.getInstance().getDefaultProject(),localFile,true)
taskService.createTaskQuery().orderByTaskId()
startTemplate(editor,null,template,listener,null,false)
assertEquals(provider.fetchCount,is(3))
tags != null
logger.warn("Cannot update channel for group member ({})",e.getMessage())
VERSION=2
other.getClass().toString()
placeInfo == null
ParserUtils.eatElement(builder,VARIABLE)
left + height
Utils.field(value,type)
mRenderNode.isPivotExplicitlySet()
MessageBodyWriter<TestDummy>
requiredAcks > 0
setServiceForegroundInnerLocked(r,callingUid,notification,0)
addTest(AB_NEW_LOGIN_YES_GOOGLE,new int[]{1,1,1},new int[]{1,0,0},new String[]{"old-welcome","new-welcome","new-quick-welcome"})
Slog.w("Could not read " + path,e)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1)
new Origin(origin,nativeGetUsageForOrigin(origin),nativeGetQuotaForOrigin(origin))
IndexerRegistryUtil.getIndexer(className)
Boolean success
new ArrayList<>()
(showcaseX != 1000000 && showcaseY != 1000000) || !hasNoTarget
!autoConnect
log.warn("Double activation of SQL context")
isRunning()
counter <= max
ConstantNode.forConstant(newMethod.getEncoding(),tool.getMetaAccess(),graph())
IOException err
cppFile.writeString(buffer.toString(),false)
gatt.periodicAdvertisingEnable(this.advertiserId,enable)
new SpacingBuilder(settings)
checkpointPath.getPath()
BlockingIOCometSupport.class
format.getShape() == JsonFormat.Shape.STRING
splits.length < i
deltaoNext.mmul(Nd4j.diag(wOO))
/**   */ private final LongAdder mapPubSize=new LongAdder(); 
isFirstChar || Character.isLowerCase(c)
connectionManager.markOwnerAddressAsClosed()
log.makeAlert("Failed to remove segment")
Messages.getString(key,param1,param2)
new BufferedImage(10,height,BufferedImage.TYPE_INT_RGB)
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureHeight,this.mTextureWidth,this.mRotated)
new PlotFiltersIterationListener(variables)
a.getNodeName()
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new IndexWriter(mDirectory,new StandardAnalyzer(),false)
reportWhenNoStatementFollow
currentResponse.getAuthentication() != null
parameters != null
Integer.valueOf(stackIdStr)
1
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0
ast.getNextSibling() != null
LOG.debug("Failed to install vim keymap.\n" + e)
compressedSliceInput.length()
printf(") at %p (",Word.fromObject(exception).rawValue(),exceptionPc.rawValue())
document != null
globalSecurityDomain != null
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpoint,this.getNode().getNodeId())
TransMeta.addStep(1,deletedStep)
case 9: 
assertEquals(serdeWrite.getCodec().toString(),CodecFactory.deflateCodec(9).toString())
offset + n
filteredData.addAccessRestrictedResource(absoluteChildAddr)
pv.setBackground(getResources().getDrawable(R.drawable.list_bg_selector))
new InitialThreadLocal<Boolean>(PortletPreferencesThreadLocal.class + "._strict",true)
_buildTemplateWithGradle("npm-vuejs-portlet","vuejs-portlet-dependency-management","--dependency-management-enabled","true")
auxString.lastIndexOf(",")
RecentsVerticalScrollView.super.removeViewInLayout(view)
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_NOOP,device,0,streamState,0)
ctx.cache().dynamicStartCaches(cacheCfgs,true,true,true)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Collection paramNames
endFunction("write_partition_column_statistics: ",ret != false)
2.0f * zFar * rangeReciprocal
resultEndpoint.setResultWaitTime(1000)
private Stream createRemoteStream(int streamId) throws ConnectionError {   Integer key=Integer.valueOf(streamId);   if (streamId % 2 != 1) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR);   }   if (streamId <= maxRemoteStreamId) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR);   }   Stream result=new Stream(key,this);   streams.put(key,result);   maxRemoteStreamId=streamId;   return result; } 
assertEquals(flowerVocab.getIndex(),1)
peopleListFromJSON(jsonArray,blogId,localTableBlogId,false,false,true)
assertEquals(2,results.size())
ASHMEM_SIZE=256
XContentType.YAML.restContentType()
sqlType == Types.NUMERIC
null != Configuration.getResource(dataSourceName)
name != null
ZException e
session.setOffline(true)
new DefaultMemoryManager(totalMemory,numSlots,pageSize)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).description(message)
new EngineConfig(shardId,"allocation-id",threadPool,indexSettings,null,store,newMergePolicy(),indexWriterConfig.getAnalyzer(),indexWriterConfig.getSimilarity(),new CodecService(null,logger),new Engine.EventListener(){   @Override public void onFailedEngine(  String reason,  Exception e){   } } ,IndexSearcher.getDefaultQueryCache(),IndexSearcher.getDefaultQueryCachingPolicy(),translogConfig,TimeValue.timeValueMinutes(5),Collections.emptyList(),Collections.emptyList(),null,new TranslogHandler(xContentRegistry,IndexSettingsModule.newIndexSettings(shardId.getIndexName(),indexSettings.getSettings())),new NoneCircuitBreakerService(),() -> SequenceNumbers.NO_OPS_PERFORMED,() -> primaryTerm.get())
targetSdkVersion == -1
public static TutorialFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
this instanceof ScatterData
new DefaultQueryOptions(consistency,values,false,SpecificOptions.DEFAULT,0)
channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)
commander.downContentPic(imageView,accountList.get(i).getAvatar_url(),i,listView)
HashMap<String,Account[]>
ExceptionUtils.handleThrowable(t)
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1)
value > 1800
type.getActualTypeArguments()[0]
new CrypticClue("Search the crates in the Barbarian Village helmet shop.",NULL_10627,new WorldPoint(3073,3430,0),"Peska's Helmet Shop in Barbarian Village.")
DEFAULT_MAX_DHCP_RETRIES=2
public static ArrayValue dateArray(LocalDate[] values){   return new DateArray(values); } 
IOUtils.toString(classpathUrl)
parent != null
Collection<TblColRef>
Item.itemsList[item.itemID].func_82790_a(item,0)
softWrapsIndex < softWraps.size()
TagsAssetLocalServiceUtil.updateAsset(userId,article.getGroupId(),className,article.getResourcePrimKey(),categoriesEntries,tagsEntries,null,null,null,null,ContentTypes.TEXT_HTML,article.getTitle(),null,null,null,0,0,null,false)
Status.constructStatuses(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
Collections.addAll(result,"十二星座","成功学","不转不是中国人")
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address),mTachyonConf)
uri.indexOf("http://") == -1
new StyleChart.Builder().width(CHART_WIDTH_PX,LengthUnit.Px).height(CHART_HEIGHT_PX,LengthUnit.Px).margin(LengthUnit.Px,60,60,40,10)
case JOIN: 
log.warn("Hooking new default : onNextDropped")
assertEquals(model.getProperties().get(COUNT).getType(),"integer")
Vector<String>
rangeOffset < thisEnd
T
MicroblogsWebUpgrade.class
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)
getInstalledCode("queueTest")
XMLInputFactory.newFactory()
this(60000L); 
modelCache.put(cacheKey,model)
filePath == null
resultCode == RESULT_OK
assertEquals(1,yubiKeyAccountRegistry.getAccounts().size())
v[4]
this.getClass().getName()
keyed=false
"Second position set to " + pos1 + "."
is.read(data)
ArrayList<PsiElement>
this.messageService.fluxPreAuthorizeBeanFindById(2L).contextStart(withAdmin)
Arrays.asList(ProjectUri.PluginRepositories.PluginRepository.xUri,ProjectUri.Repositories.Repository.xUri,ProjectUri.Reporting.Plugins.Plugin.ReportSets.ReportSet.xUri,ProjectUri.Profiles.Profile.xUri,ProjectUri.Build.Plugins.Plugin.Executions.Execution.xUri)
pathToFileInProject.indexOf("error-prone")
t.add(R.id.frame,new SampleListFragment())
Bytes.toBytesBinary(regionname)
0.09f * mainUnitInMeters
logger.debug("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
rc.zoom == tileBox.getZoom()
COUNT=2000
m.get(OutputStream.class)
new Location(importStack.peek().getResource())
o instanceof TermQuery
logger.warn("using stable discover node UUIDs with seed: [{}]",seed)
Integer.parseInt(value)
refresh()
synchronized (runningTasks) {   runningZKTasks.remove(id); } 
Iterable<ManyValues>
Collections.emptyMap()
jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)
configureWebDotXmlAtmosphereHandler(sc)
resultEndpoint.expectedBodiesReceived("one","three")
CompilerTestUtil.disableExternalCompiler()
new WorldPoint(3105,3369,2)
log.error("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
SubscriberBarrier<IN,Void>
/**   * Something that can be called, passed parameters to, and return something back.  * @author dcheryasov  */ public interface Callable extends PyElement {   /**   * @return a list of parameters passed to this callable, possibly empty.  */   @NotNull PyParameterList getParameterList();   /**   * @return the type of returned value.  */   @Nullable PyType getReturnType(  @NotNull TypeEvalContext context,  @Nullable PyQualifiedExpression callSite);   /**   * @return a methods returns itself, non-method callables return null.  */   @Nullable PyFunction asMethod();   /**   * Returns the qualified name of the function.  * @return the qualified name of the function, or null for a lambda expression.  */   @Nullable String getQualifiedName(); } 
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(4)
mIsLongClickable=true
Iterator<Cache.Entry<Integer,Person>>
LOG.error("Found spell checking wrapper is not local " + spellCheckingWrapper)
krakenDepth.getAsks()
mThumbPosition <= getThumbScrollRange() / 2
true || DEBUG_WALLPAPER
new IllegalStateException("pAssetBasePath must end with '/' or be lenght zero.")
items[16]
name == null
DynamicCounter.increment(filterName,"unknown",filter.filterType())
sm.getString("http." + statusCode,message)
w1.getGradient(target,(label - 1))
myParameterIndex > value
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).blogPostings(Collectors.toList())
getCategoriesAndThreads(category.getGroupId(),category.getCategoryId())
PlatformTestUtil.startPerformanceTest("VF.getPath() performance failed",3000,new ThrowableRunnable(){   @Override public void run(){     for (int i=0; i < 1000000; ++i) {       file.getPath();     }   } } )
messageReference.equals(account.getUuid(),folder,uid)
pull(remote)
Long dateObject=(Long)firstMessageElement.getAttributes().getAttribute("date"); 
!mIsRecentsShown || !mIsPipFocusedInRecent
cxxDeps.get(resolver,cxxPlatform)
backupFile(w,false)
_instanceDataManagerConfiguration.getBoolean(DIRECT_REALTIME_OFFHEAP_ALLOCATION,true)
@UriPath(label="producer",defaultValue="true")
FastMath.max(origin,num.doubleValue())
LoopContextStepRetrieval retrievalToAdapt
range.endsWith("^.." + _latestHASH) && ticketIds.isEmpty()
MacMessages.showYesNoDialog(message,title,YES_BUTTON,NO_BUTTON,SwingUtilities.getWindowAncestor(parent))
aClass.getInterfaces()
Message.throwInternalError()
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class)
FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning()
new HTTPJavaImpl(this)
singleType != null
Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN
@PATCH
@Override protected BlockBuilder getBlock(){   return blockBuilder; } 
super(project,labeler); 
_fragmentEntryLocalService.addFragmentEntry(userId,fragmentEntry.getGroupId(),fragmentEntry.getFragmentCollectionId(),fragmentEntry.getName(),fragmentEntry.getCss(),fragmentEntry.getHtml(),fragmentEntry.getJs(),fragmentEntry.getPreviewFileEntryId(),fragmentEntry.getStatus(),serviceContext)
Resolvable<Object>
id=52
modules.size()
entry.maximumAmount - entry.freeConnectionsCounter.get() + entry.connections.size() >= entry.minimumAmount
SPACE_BEFORE_TYPE_COLON=true
offlineTableConfig == null
mSeekBar.setProgress(mLastAudibleStreamVolume)
containsBox.setSelected(true)
postAgg.getName().equals(metricName)
componentTree == null
mapKeys=new RapidsStringsV3(fr.keySet().toArray(new String[]{}))
case GRIDGAIN_HANDSHAKE: 
mainSize < size
(int)step + 2
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e)
navigateToUri("https://www.google.com/accounts/Logout",false)
numThreads.get() > MAX_THREADS
c < values.length()
this.WebView
dexFile.readSmallUint(out.getCursor())
quoineTicker.getLastPrice24h()
Float.valueOf(strings[i])
host1.getAddress()
ByteBufferUtil.string(value,value.position(),value.remaining())
mHeadsUpNotificationView.clear()
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,false,false)
assertEquals(4933401,received.get(0)[1])
new AndroidInstrumentationInfoProvider(targetApk,instrumentationApk)
Vector<MediaDescription>
new PyStringLiteralLexer(PyElementTypes.STRING_LITERAL_EXPRESSION,false)
preferences.getBoolean("forceQuickUpdate",false)
logger.debug("NODE {}: Retry timout: Can't advance")
!plugin.isEnabled()
new RuntimeException(e)
getUrl()
!traceIds.isEmpty()
new ChronicleEngineEnpoint(uri,this,configuration)
mAppOpsManager.noteOp(opCode,uid,packageName)
mStackSupervisor.anyTaskForIdLocked(taskId,true)
DEBUG_GESTURES=true
weekRange.roll(Calendar.DATE,6)
public class BuildOperationFiringBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private final BuildOperationExecutor buildOperationExecutor;   private final RoleAwareBuildCacheService delegate;   public BuildOperationFiringBuildCacheServiceDecorator(  BuildOperationExecutor buildOperationExecutor,  RoleAwareBuildCacheService delegate){     this.buildOperationExecutor=buildOperationExecutor;     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  final BuildCacheKey key,  final BuildCacheEntryReader reader) throws BuildCacheException {     return super.load(key,new BuildOperationFiringBuildCacheEntryReader(reader,key));   }   @Override public void store(  final BuildCacheKey key,  final BuildCacheEntryWriter writer) throws BuildCacheException {     super.store(key,new BuildOperationFiringBuildCacheEntryWriter(writer,key));   } private class BuildOperationFiringBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryReader(    BuildCacheEntryReader delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void readFrom(    final InputStream input) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Loading entry " + key + " from "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.readFrom(input);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } private class BuildOperationFiringBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryWriter(    BuildCacheEntryWriter delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void writeTo(    final OutputStream output) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Storing entry " + key + " in "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.writeTo(output);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } } 
meta.isUsingAuthentication()
ReplacementsImpl.class.getDeclaredMethod("makeGraph",rjm,rjm,SnippetInliningPolicy.class)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Http401Auth.class
@Overide
super(pDuration,pFromValueA,pFromValueB,pModiferListener); 
instanceMethod.getDeclaringClass() == implementation.getClass()
PROGRESS_DATA_MESSAGE=6
Assert.assertEquals(416,statusCode)
logger.debug("{} {}",errorCode,message)
relevant && canSetPlaceholder()
getJavaType(keyColumns.get(0).getType(resolver()))
createFromResourceStreamThemed(res,value,is,srcName,null,theme)
Assert.assertEquals(4,latch.getCount())
con.getClass().getName()
reboot(null)
queryBuilder.appendQuoted(columnAliases[i].getAliasName())
V_5_6_10_ID=50601099
new AndroidFiles(this.getService().getAssets())
graphics=new QDGraphics(QDGraphics.kDefaultPixelFormat,qdrect)
ctx.grid().forCache(name())
mappedSuperclass.isMetadataComplete()
outboundRequest("localhost",port,httpRequest)
!export && !beforeFilename.equals(fname)
id=34
new ParameterSpec("executedValue",types.toArray(new TypeMirror[types.size()]),getNode().getTypeSystem().getGenericType(),false,Cardinality.ONE)
MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity,src,amount))
Assert.assertEquals(8L,v2)
Integer maxFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
AbstractPullBufferStream.class
new Thread[10]
getRequiredLong(singletonMap("long","Apio"),list)
mNavigationBarView.isQuickScrubEnabled()
ormEntity.isMetadataComplete()
configInstance.getIntProperty(namespace + "eurekaServer.connectTimeout",5000)
Assertions.expectThrows(EmptyStackException.class,() -> stack.pop())
VERSION=18
i.hasNext()
Value emitLoad(LIRKind kind,Value address,LIRFrameState state); 
fragmentEntryPersistence.filterFindByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
!enteringSplitScreenMode
startExpression != null
protected abstract ReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration); 
Rule.DEFAULT_WEIGHT * 1.2
booleanPreference(preference,value,R.string.p_end_at_deadline,R.string.EPr_cal_start_at_due_time,R.string.EPr_cal_end_at_due_time)
TYPE_20(ACCURATE,CONTROLLED,null,LONGRANGE)
public void set(int parameterId,long value) throws ConnectionError {   if (log.isDebugEnabled()) {     log.debug(sm.getString("connectionSettings.debug",Integer.toString(parameterId),Long.toString(value)));   } switch (parameterId) { case 1:     setHeaderTableSize(value);   break; case 2: setEnablePush(value); break; case 3: setMaxConcurrentStreams(value); break; case 4: setInitialWindowSize(value); break; case 5: setMaxFrameSize(value); break; case 6: setMaxHeaderListSize(value); break; default : log.warn(sm.getString("connectionSettings.unknown",Integer.toString(parameterId),Long.toString(value))); } } 
expected.size() > actual.size()
minY + minY
contentEncoding != null
public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"10:34: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"value")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS" + "/PARAMETER_DEF[@text='value']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"other")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
LOG.debug("Failed to reconfigure vim keymap.\n" + e)
logger.trace("Trying to map {} to {}",t,path)
final PkgControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
new NameAlias(tableNameAlias)
new MapVectorLayer(null)
new AMQPProducer(configuration,metricRegistry)
yz*=ly
state == ApplicationState.STATUS | state == ApplicationState.STATUS_WITH_PORT
AvatarManager.getInstance().getOccupantAvatar(user + "/" + resource)
platformVersion < MNC
event.getServletContext().getAttribute(SERVER_CONFIG_KEY)
el.className()
bm.copy(bm.getConfig(),true)
factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)
HashMap<String,FilterBuilder>
NameTable.getObjCType(var.getType())
log.info(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),true,true,null,null,createdBy,reason,comment)
isDisposed() || myProject.isDisposed()
byteBuffer == null
NetworkAddress.format(inet.address().getAddress())
fourCC.equalsIgnoreCase("TTML")
new SyncDateFormat[3]
assertLeftRightCategory(10,category2b)
file.name().contains(".etc1")
processDefinition.getTenantId() == null
add(m)
error
new DateTime()
state == AsyncState.DISPATCHING
error(e,e.getMessage())
artifact.getName().getExtension()
((MapType)toCheck).getKeysType()
mActivity.getFragmentManager()
Integer.parseInt(parts[1])
int retries() default 0; 
name="org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3"
temp.reAddRight()
mChildren.get(i).render(camera,projMatrix,vMatrix,mMMatrix,pickerInfo)
assertEquals("total runtime",120.215,model.getRunningTime(),0.000001)
page.getMembersByIdx(0).shouldBeNamed("admin","Administrator").shouldHaveGroups(1)
callSite != null
MINOR_ALPHA=.3f
logicalExpressionStack.get(logicalExpressionStack.size() - 1)
offset > leftParen.getTextRange().getEndOffset()
mFirstNotificationMillis=-rateLimitMillis
order=4
ex.getClass().equals(ClassNotFoundException.class)
private final ThreadPoolExecutor compileQueue; 
((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
validatorHelper.enclosingElementHasEnhancedViewSupportAnnotation(element,validatedElements,valid)
logException(id,exception)
response.optJSONObject("discussion")
new LFWLoader(imgDim,imageTransform,normalizeValue,useSubset).getRecordReader(numExamples,batchSize,imgDim,numLabels,labelGenerator,train,splitTrainTest,rng)
cmd.append("upsert",returnNew)
Stream.of(null)
ContainerUtil.newHashSet("<br>","</br>","<br/>","<p>","</p>","<p/>")
context.reloadRequired()
new Scanner(f)
visibleTerminal.getTitle()
new InternalTestCluster(randomLong(),2,2,cluster2Name,cluster2SettingsSource,0,false,false,CHILD_JVM_ID,SECOND_CLUSTER_NODE_PREFIX)
primaryKey == null && primaryKey.cardinality() == 0
logger.warn("Cannot play sound ({})",e.getMessage())
ImmutableSortedMap.builder()
ONBOARDING_ENABLED=false
TextUtils.isEmpty(defaultRingtoneName)
offsets[i + 1] - offsets[i] == 1
Algorithms.isEmpty(pd.getName()) && !nameStr.equals(PointDescription.getAddressNotFoundStr(mapActivity))
assertModel(MODEL).query("select state, city from zips where state = 'CA'").limit(2)
log.error("Query failed to parse : '{}'",executionInput.getQuery())
edge.setType(EdgeDirection.UNDIRECTED)
fLines.add(st.nextToken())
job.build(true,job.getId())
input.getParameterField()
@Override protected AbstractBlockWrapper getPreviousBlock(){   if (myChildren == null || myChildren.isEmpty()) {     return null;   }   return myChildren.get(0).getPreviousBlock(); } 
StagingServiceHttp.prepareStagingRequest(httpPrincipal,remoteGroupId,checksum)
TokenSet.create(PyTokenTypes.OR_KEYWORD,PyTokenTypes.AND_KEYWORD,PyTokenTypes.LT,PyTokenTypes.GT,PyTokenTypes.OR,PyTokenTypes.XOR,PyTokenTypes.AND,PyTokenTypes.LTLT,PyTokenTypes.GTGT,PyTokenTypes.EQEQ,PyTokenTypes.GE,PyTokenTypes.LE,PyTokenTypes.NE,PyTokenTypes.NE_OLD,PyTokenTypes.IN_KEYWORD,PyTokenTypes.IS_KEYWORD,PyTokenTypes.NOT_KEYWORD,PyTokenTypes.PLUS,PyTokenTypes.MINUS,PyTokenTypes.MULT,PyTokenTypes.FLOORDIV,PyTokenTypes.DIV,PyTokenTypes.PERC)
SettingsBaseActivity.getRoutingStringPropertyName(this,p.getId(),p.getDescription())
new IllegalArgumentException()
StringUtils.isNotBlank(value) || WebUtils.isRememberMeAuthenticationEnabled(requestContext)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local date-time elements.  */ public ArrayValue nextDateTimeArray(){   ZonedDateTime[] array=nextDateTimeArrayRaw(minArray(),maxArray());   return Values.dateTimeArray(array); } 
U.sleep(15000)
RowMutation rm; 
(outputFolder + File.separator + apiFolder).replaceAll("/",File.separator)
assertEquals(10,beanCount)
tok.getAttachedReference()
ConfigPropertyVetoExceoption exception=null; 
errorRowMeta.size()
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","strike","strong","sub","sup","u","ul")
new ScriptC_errorCalculator(mRS,resources,R.raw.errorcalculator)
info.getInfo().getHeadToBranchCommits(myGitRepository).isEmpty()
ScriptingUtil.exec(null,inputObjects,language,script)
mf.filter(popup.getMenu())
IntentFactory.create(mContext,type,text)
@ApiEndpointPreference final @NonNull StringPreference apiEndpointPreference
new Runtime()
synchronized (classCache) {   classCache.remove(name); } 
Slog.e(TAG,"FLP HAL not supported")
/**   * Callback that is invoked <em>before</em> all  {@code @BeforeAll} methods have been invoked.  * @param context the current container extension context  */ void beforeAll(ContainerExtensionContext context) throws Throwable ; 
new CamelNodeState(endpoint.getSingletonId(),System.getProperty("karaf.name"))
message.processMessage()
jitter=0.4
stat.st_mode.get()
info.getName()
expression.substring(1,pathSeparator)
!getBoldStatus(elements[0])
!hasPullToRefresh
equalTo(25714837.0)
new TaskStatusUpdateEvent(counters,progress,stats)
MESSAGES.deploymentUnitNotFound(absolutePath,puName,current)
MAX_TOOLTIP_SHOWN_COUNT=3
new ExportDBTask(testContext,filename -> {   assertThat(filename,is(not(nullValue())));   File f=new File(filename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,null,primary,state,version,null,true)
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER)
ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining("AutoFactory does not support generic types").in(file).onLine(6)
assertNotNull(savepointPath,"Failed to trigger savepoint")
logger.error("Couldn't calculate the target package! Using default: " + DEFAULT_PACKAGE)
BaseBinaryFixtures.create(type,name,component,taskFactory)
context.registerReceiver(mBroadcastReceiver,broadcastFilter)
!mMetaDb.isOpen()
LOGGER.lifecycle(msg.apply())
ClassNotFoundException e
deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding())
Model.getSingleton().getSession().isNewState()
new RemoveSubscriptionCmd(destination,channelIds)
(aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
new PBEKeySpec(secretKey.toCharArray(),char2byte(salt),65536,256)
new Entry(p.hash,p.key,p.value,head,queue)
BufferUtils.freeMemory(bytebuffer)
!myExcludedFileIndex.isExcludedFile(validParent)
HashCodeBuilder.class
Preconditions.checkNotNull(root,"Root value can't be null")
!powerManager.isDeviceIdleMode()
metaData.getData(SaveActions.META_KEY) == null
getCallerAddress()
Build.VERSION.SDK_INT > Build.VERSION_CODES.O
tableHasData(newTableName)
ASSET_TYPE buildAsset(AssetUri uri,DATA_TYPE data); 
nodeVersion.after(Version.V_5_3_0_UNRELEASED)
lastGoodQuery.getQuery()
createMessage(33,"ABC",3,3,replyChannel,null)
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID
!mIsRecentsShown || mIsPipFocusedInRecent
listener.wait()
c == Integer.class
FileUtil.join(portalConfiguration,sourceSet.getRuntimeClasspath(),portalTestConfiguration)
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(true)
mapper.writerWithType(planType)
listener_OnClickListener == null
getModifiableRootModel()
new BindException(concept,"concept")
diskThresholdSettings.getFreeDiskThresholdHigh()
maxResults < 0
this.photoLabel
!nm.matches(sr.localeName) || !nm.matches(sr.otherNames)
model.getSelectedLayout() != null
globalMappings.differentiate(delta,removedPaths,successfullyCompiled,allCompiledFiles,allAffectedFiles)
TOUCHEVENT_POOL.recylePoolItem(pTouchEvent)
new AlertDialog.Builder(context)
logger.warn("failed to close node {} on failed start",otherNode,t)
diff >= 86400
rj.mapProgress()
1000L * FILE_BYTES
result.getAttack() == null
PATH_ITERATIONS * 50
~PUBLIC_STATUS_BAR_VISIBILITY_MASK
kv.getValue() > minMatch
assertEquals(0,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
shape.getMin().x
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
sNotificationData.currentMediaItem >= sNotificationData.totalMediaItems
SaslException.class
new SonarException(String.format("Project [%s] doesn't exist on server",projectKey))
rejectRemoteInitiatedRenegotiation && SSL.getHandshakeCount(ssl) > 1
context.createTaskContext().addPipelineContext(0,true,true)
mSlideOffset >= 0
sa.getBoolean(com.android.internal.R.styleable.AndroidManifestApplication_testOnly,true)
w / 2
getJSDocTypeWithBraces(cm,var)
phoneDisplayHeight == actionBarOverlayLayoutHeight
parent != mHostView
IntList list
h.addParameters("--name-status","--no-abbrev","-M","--pretty=format:" + COMMITTED_CHANGELIST_FORMAT,"--encoding=UTF-8",revisionName,"--")
if (CONST) { } 
U.warn(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
i.getName().getName()
this.repositories.add(repository)
ByteArray.fromLong(assetId)
new ImmutableAssertion(CoreAuthenticationTestUtils.getAuthentication(),list,RegisteredServiceTestUtils.getService(),fromNewLogin)
Preferences.navigationEnabled(context)
getColors(which,TYPE_NORMAL)
varDeclaration instanceof GoRecvStatement
new NoSuchFileException()
agentInstances.findAgent(uuid)
parseJavaCodeReference(builder,true,true,false,false)
ZipUtil.unzip(null,myCoursesDir,file,null,null,true)
new IntRangeValidator(1,true,true)
nodeConfig.setExecutors(Collections.singletonMap("test",1))
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,true)
!returnValue
HashMap<String,Operator<? extends Serializable>>
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true)
/**   * Represents an invalid default audience value, can be used when only reading.  */ None(null)
formatTime(fullWifiLockOnTime / 1000)
BlockMasterClient.class
id=22
c == 10
bodyParts != null
new IndexWriter(directory,new SimpleAnalyzer(),true)
result == null
new NullPointerException("the ast is null")
i < 12
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true)
speed < 30
@Overridee
singleLanguageProfile.getName()
STANADALONE
new StringBuilder()
request.getRelaxLocality() == false
jndiName != null
computeHorizontalScrollRange()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
new int[3008]
startErrPos < endPos
LOGGER.info("No access to path {}",input)
nsDescriptor.getAttribute(localName,namespace)
assertContainsParams(CollectionAdminRequest.createCollection("foo",null,1,1).getParams(),ACTION,NAME,ZkStateReader.NUM_SHARDS_PROP,"replicationFactor",ZkStateReader.NRT_REPLICAS)
info.getGroupIdLevel1()
TimeUnit.SECONDS.sleep(3)
fileSizeKb * 1024
w.mBaseLayer <= myLayer
cacheSize > 0
clusterType == UNKNOWN
input.getDelta()
Arrays.asList(0L,1L,2L)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION)
drawable != mBackgroundDrawable
BasicMonkeyServer.class
new InputStreamReader(this.getClass().getResourceAsStream(tokens[0]))
size < maxListFill
newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,false)).setRAMBufferSizeMB(0.5)
ColorResources.getColor("selectionBackground")
ObjectLoadException e
previousParameterName.compareTo(parameterName)
new ClusterConfiguration(name,logging.getMessagesLog(ClusterConfiguration.class),Collections.singleton(boundAt))
Exception exception
a.getDimensionPixelSize(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
ChromeTraceBuildListenerCloseAction.class
min1 < min2
detailNode != null
return context; 
private Exception exception; 
TVisit
EntityCacheUtil.putResult(CheckoutModelImpl.ENTITY_CACHE_ENABLED,CheckoutImpl.class,checkout.getPrimaryKey(),checkout,false)
mOverviewOpenedCountSinceQuickScrubTipDismiss == QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
setEditorText(expressions.get(myHistoryIndex))
KEEP_ALIVE_LENGTH=6
new EnumValidator<TransactionMode>(TransactionMode.class,true,false)
gapBlock.getParentHash()
port > 21000
ReflectUtils.getBeanGetters(target)
Boolean.getBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
Boolean.valueOf(System.getProperty("cassandra.consistent.rangemovement","true"))
new ReflectionsException("could not create class object from file " + file.getRelativePath())
stall_till_cloudsize(1)
new String(decryptCipher.doFinal(Base64.decode(ciphertext)))
cr != null
conn.getResponseCode() == 302
Collection<LocalInspectionToolWrapper>
props.entrySet()
new SpannedString(new CustomSpanned(first),false)
ConfigPropertyVetoExceoption e
assertEquals(serdeC.getCodec().toString(),CodecFactory.xzCodec(i).toString())
StringUtils.isEmpty(runtime.getRuntimeError())
JSONUtilities.safePut(options,"guessCellValueTypes",true)
entry.getCheckName().equals(checkAlias)
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(MethodDelegation.to(ToStringInterceptor.class).defineParameterBinder(StringValueBinder.INSTANCE)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
new WorldPoint(1428,3864,0)
featureNum=1230
SessionErrors.add(actionRequest,e.getClass().getName())
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR)
Log_OC.e(TAG,"onCreateView")
mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately))
workQueue.getStats()
client.getBulkReply()
Double.valueOf(m.group(2))
id=19906
myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),project)
rows[1].getLock().writeLock().lock()
GenericUDFEnforceNotNullConstraint.class
console.getStdOut()
(i - blockStart) > 1
new PeepholeSubstituteAlternateSyntax(false)
(CounterCell)this
new StringBuffer()
_cacheRegistryItems.put(cacheRegistryItem.getRegistryName(),cacheRegistryItem)
length > 0L
Preconditions.checkNotNull(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
editable=true
firstExc != null
applicationStatistics.incrUpdateUserTimes()
10 * 60 * 1000L
worldRenderer.getChunkProvider().addRegionEntity(spawnZoneEntity,1)
new ValueComparator(sortOrderAscending,type)
handleIncomingUser(callingPid,callingUid,userId,false,ALLOW_NON_FULL_IN_PROFILE,"checkContentProviderPermissionLocked " + cpi.authority,null)
String.format("%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",nf(counter),updateCounter,nf(sortedNodes.getSize()),nf(nodeContractor.getAddedShortcutsCount()),nf(nodeContractor.getDijkstraCount()),getTimesAsString(),(long)meanDegree,nodeContractor.getPrepareAlgoMemoryUsage(),Helper.getMemInfo())
SecurityActions.getModuleClassLoader(JACC_MODULE)
when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(3)
pubnub.unsubscribe(channel)
bfd.singularData.getSingularizer().appendBuildCode(bfd.singularData,type,statements,bfd.name)
new File(jmDir,"bin" + File.separator + "log4j.conf")
ar.cause()
new EnterSelectionDialog(shell,props,files,Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogMessage"))
(flags & 0x08) > 0
_state.getState() != HttpChannelState.State.IDLE
!allowWrapperOperations && op.isUnwrappedCapable() && !op.isUnwrapped()
out.write(CLASS_CONSTANT_VALUE_TAG)
material.getUseTickets()
databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive")
topNProjector.doFinish()
enforceSystemOrSystemUI("grant notification assistant access")
timeFieldSpec.getOutgoingTimeColumnName()
this.notifyDataSetChanged()
objects == null
layer.setLayerPaint(paint)
super(message); 
exclusiveConsumer2.receive(100)
profile.getActiveRules()
commands_.vcsRevertFiles()
AMQ5921Test.class
(int)value < 0
given().content(bytes).when().post("/file")
KeyValue<String,Long>
main.call(frame,args)
writeString(writer,String.valueOf(reader.getDouble()),fieldName)
mClipboard.getText().length() != 0
public DerivedBuilder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
sb.append(uri)
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProessor(new ButtonItemProcessor(this))
loadMetadataSuceeded=true
Proxy.getInvocationHandler(proxy).getClass().toString()
mHidProfile.isProfileReady()
UADExporter.exportApplicationDataInBackground(applicaitonName,selUserId,themeDisplay.getScopeGroupId())
new OsMoControlDevice(app,service)
init
JvmDeclarationOriginKt.OtherOrigin(aClass,descriptor)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertDurationsTo(getRateUnit())
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"),BuildInfo.BUILD_SCM_REVISION,Key.of(KeyType.STRING,"0","0"),BuildInfo.BUILD_SCM_STATUS,Key.of(KeyType.STRING,"","redacted"))
scanner.acceptResult(fqn)
randomIntBetween(1,8)
warn(Log.IGNORED,ignored)
for (BooleanClause<Filter> booleanClause : _mustBooleanClauses) {   sb.append(booleanClause);   sb.append(StringPool.COMMA_AND_SPACE); } 
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xff
Beans.newDuration(rtProps.getTimeToKillInSeconds()).toMillis()
setVisibility(INVISIBLE)
new RedisCommand<String>("PING",new ListObjectDecoder<String>(0))
obj.getExp()
ZONE2_SOURCE_INTERETRADIO(120)
tableHasColumn("KBTemplate","engineType")
Q.row(j).add(delta_qj.scale(lRate))
(lastInsert.getFlags() & Command.FLAG_NO_REPEAT) != 0
public S on(Expr.EBoolean o){   query.on(o);   return self; } 
dcEndpoints.get(dc).get() != responses.get(dc).get()
StorageService.instance.getTokenMetadata().invalidateCaches()
assertTrue(model.getUniqueItems())
Integer.valueOf(taskIdStr)
session.initBounds(param)
_parms._export_native_model_prefix != null
pathEditor.reload(sdk != null ? sdkModificator : null)
new int[0]
nsDescriptor.getAttribute(localName,namespace)
Integer.valueOf(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
isTestOnBorrow()
baseURI != null
requestFocus()
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_label_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR))
isNavBarVirtKey && !down
assertTrue(now.modTime != snapshot.modTime || !Arrays.equals(now.hash,snapshot.hash))
LOG.assertTrue(!myDisposed)
new java.util.Date()
Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR1
resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
Setting<Long>
StringUtil.trimEnd(sdkHomePath,GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH)
location != null
backups.length == 0
IndexReader r=IndexReader.open(d); 
mStartActivity.task == null
i < maxIndex - match.length()
InvokerException e
link.bone.getInitialPos()
new CompoundShelfFileProcesor("shelf")
args.length != 2
baseDir.equals(dir)
width / 2
e.getMessage().indexOf(":") + 2
JsonWriteContext.createRootContext()
_buildTemplateWithGradle("npm-billboardjs-portlet","billboardjs-dependency-management","--dependency-management-enabled","true")
ft.commit()
new ProtocolException()
new IfNode(currentGraph.unique(new IsNullNode(receiver)),trueSucc,falseSucc,0.5)
mFailedMediaIds.add(attrs.getValue("data-wpid"))
value == null
mHasSurface && !resizingWindows.contains(this)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_configuration,_templateContextHelper)
UIUtils.setBackground(mSliderLayout,mSliderBackgroundColorRes)
container.getTimeFormat().equals(TimeFormat.DATE)
RenderingRuleProperty.createInputIntProperty(OBJECT_TYPE)
mSearchFab.setScaleX(1.0f)
warningBytes > limitBytes
ENABLE_COPY_OPTIMIZATIONS=false
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,false,false,factory)
logger.warn("running policy with current-step[" + currentStep.getKey() + "]")
new ELResolver[2]
avatar != null
@Parameter(names="-usedefaultlisteners",description="Whether to use the default listeners") public Boolean useDefaultListeners=Boolean.TRUE; 
!filePath.endsWith(".jpg") || !filePath.endsWith(".gif")
return size; 
FBUtilities.getBroadcastAddress()
tx.getOutputs().size() >= uxtoIndex
new Dimension(500,350)
path(11)
infos.length == 0
RngElementDescriptor.this.getDependencies()
file.flush()
assertEquals(response.getStatusCode(),301)
setupStrokePaint(paint,opacity)
wasLoaded && !(myStreamProvider instanceof OldStreamProviderAdapter || myStreamProvider instanceof CurrentUserHolder)
functionJSDocInfo != null
mSupportView != null
proxyHTTPServer.setText(Preferences.get("proxy.https.server"))
public abstract class AbstractHikariConfig implements HikariConfigMBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty("hikaricp.configurationFile");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn("The connectionCustomizerClassName property has been deprecated and may be removed in a future release");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn("The connectionCustomizer property has been deprecated and may be removed in a future release");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException("connectionTimeout cannot be less than 1000ms");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException("validationTimeout cannot be less than 1000ms");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException("driverClassName specified class '" + driverClassName + "' could not be loaded",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException("idleTimeout cannot be negative");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn("The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.MetricRegistry");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException("maxPoolSize cannot be less than 1");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException("minimumIdle cannot be negative");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn("connectionCustomizationClass specified class '" + connectionCustomizerClassName + "' could not be loaded",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error("when specifying driverClassName, jdbcUrl must also be specified");       throw new IllegalStateException("when specifying driverClassName, jdbcUrl must also be specified");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error("both driverClassName and dataSourceClassName are specified, one or the other should be used");       throw new IllegalStateException("both driverClassName and dataSourceClassName are specified, one or the other should be used");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error("one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified");       throw new IllegalArgumentException("one of either dataSource or dataSourceClassName must be specified");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn("both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName="HikariPool-" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn("validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout.");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error("maxLifetime cannot be negative.");       throw new IllegalArgumentException("maxLifetime cannot be negative.");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn("maxLifetime is less than 30000ms, using default {}ms.",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn("idleTimeout is less than 10000ms, using default {}ms.",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn("idleTimeout is greater than maxLifetime, setting to maxLifetime.");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn("leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms.");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug("HikariCP pool {} configuration:",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if ("dataSourceProperties".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty("password","<masked>");           value=dsProps;         }         value=(prop.contains("password") ? "<masked>" : value);         LOGGER.debug((prop + "................................................").substring(0,32) + (value != null ? value : ""));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException("Exception copying HikariConfig state: " + e.getMessage(),e);         }       }     }   } } 
currentBlog.getRemoteBlogId()
new Label(GroovyBundle.message("dynamic.toolwindow.search.elements"))
shadowSize == 0
!isEnabled()
esVersion.after(Version.V_5_3_0_UNRELEASED)
retval=(constValue + constValue2 == x)
_connector.getResponses("GET /foo HTTP/1.0\n\n")
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),false)
receiverUserId != mCurrentUserId
ThemeUtils.primaryColor()
LauncherActivity.isLaunchUri(uri)
createTestBlockCapsule(dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
id=36
Ordered.LOWEST_PRECEDENCE - 20
new ClusterStateUpdateResponse(true)
singleValueAggregation.has(String.valueOf(VALUE)) || !singleValueAggregation.get(String.valueOf(VALUE)).isJsonNull()
new ListenerInfo("ajp",server.getLocalAddress(),openListener,null,channel)
new IndexWriter(directory,new WhitespaceAnalyzer(),true)
return 3337733202L; 
curArticle.getArticleId()
collectionRecords != null
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingUrl",value))
new ClassPathResource("word2vecserialization/google_news_30.bin.gz").getFile()
userSession.addProjectUuidPermissions(UserRole.ADMIN,"PROJECT_1")
out.writeFloat(mProgress)
removeModelSpecificMarkup(base,pattern)
new SslContextBuilder(false)
!output.isEmpty()
Metric<Integer>
currentFileContext.get(BindingContext.FILE_TO_NAMESPACE,containingFile)
itemView.getScaleX()
"".equals(callRingtone.canPlayType("audio/mpeg;"))
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS))
new JBossServerCapabilities2()
Util.SDK_INT <= 24
createHandlerResult(tokenCredential,p,null)
LOGGER.info("Application {} refreshed",newApp)
tiHops.setText(STRING_CLUSTERS)
peekServiceForUserLocked(userId)
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
GraphAnswer<CommitId>
new CSVFilter(columns)
StringBuffer sb=new StringBuffer("["); 
String.valueOf(0xFFL)
constructors.length > 0
getStartPeriod() - offset * getPeriodLength()
/**   * Transforms the given object, and returns the transformed value.  * @param original The object to transform.  * @return The transformed object.  */ R transform(I original); 
OptionalIdentifiedType<FromDefinition>
public String getThumb(){   return thumb; } 
query.resolutions().toArray(new String[0])
constants.size() != 0
new DatabaseExplorerDialog(shell,props,SWT.NONE,dbinfo,transMeta.getDatabases(),true)
(operations.byteAt(contractType / 8) & (1 << (contractType % 8))) == 0
"-" + CONFDIR + " and -"+ CONFNAME+ " are required for "+ LINKCONFIG
SAVE_TRACK_INTERVAL.setModeDefaultValue(ApplicationMode.BICYCLE,7000)
LineAndLineHashKey that=(LineAndLineHashKey)o; 
contentLength < 0
id=27
items[17]
ruleContext.ruleError("Xcode version must be specified to use an Apple CROSSTOOL")
groupPersistence.countByChildrenSites(group.getCompanyId(),group.getGroupId())
are("resource1-reflections.xml","resource2-reflections.xml","testModel-reflections.xml")
columnType.equalsIgnoreCase("date")
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Node[]
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker")
Arrays.asList("SuppressWithNearbyCommentFilter.fileContents","SuppressionCommentFilter.fileContents","MethodNameCheck.applyToPackage","MethodNameCheck.applyToPrivate","MethodNameCheck.applyToProtected","MethodNameCheck.applyToPublic")
ConditionalOnEnablednHealthIndicator.class
Math.max(1.0,type.getProbability() / (1.0 - probabilityB))
new InetSocketAddress(configuration.getRestListenUri().getPort())
JMeterUtils.getPropDefault("proxy.cert.validity",90)
url.addArgument(selectName,value)
fields.put(PERMISSIONS,permissions)
channel.write(response)
logger.error("Error connecting to Plex",e)
++length > maxFieldLength
new ModelNode(10)
logger.warn("Cannot paly favorite ({})",e.getMessage())
ExecutionSParameters parameters
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.REMOVE)
new EnterSelectionDialog(shell,props,procs,Messages.getString("DBProcDialog.EnterSelection.DialogTitle"),Messages.getString("DBProcDialog.EnterSelection.DialogMessage"))
new TextSelection(queryStartOffset + pos.position,1)
returnTypeElement == null
queryAddPosition=new NamedParameterStatement(globalConnection,query)
dockedBounds.left - adjustment
Helpers.exec(j4p,"setProfileFeatures(java.lang.String, java.lang.String, java.util.List)",id,strings)
LOGGER.warn("Found legacy attribute value [{}] which will be converted to [{}] as part of a service multifactor authentication policy." + "The definition SHOULD manually be upgraded to the new supported syntax",valueToConvert,RegisteredServiceMultifactorPolicy.FailureModes.UNDEFINED,"misagh")
message.containsKey(Message.REQUESTOR_ROLE)
new IllegalArgumentException(e.getMessage())
LOG.info("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
d.addWelcomePages(welcomeFiles)
new Ardi01ProtocolDecoder(Xrb28Protocol.this)
pos.getInputType(usage) == type
me.showWebPage(errorUrl,true,true,null)
public void setMaxFrameSize(long maxFrameSize) throws ConnectionError {   if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.maxFrameSize=(int)maxFrameSize; } 
attachmentSaved(file.toString())
maskArray != null
mTask.icon != null
new SystemException()
node.getNodeName()
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=4
public static AnimationAction $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
zone5.equals(zone5)
getClientConfig().getAddressList()
logger.error("An exception occurred while parsing a date : '{}'",e.getMessage())
srcCharset=StandardCharsets.UTF_8
Arrays.asList(gA0,gA1,gB2,gB3,gC1)
Boolean.valueOf(this.getOptional("kylin.query.escape-default-keyword","false"))
new BehaviorSubjectSearchEmitterFragment()
!fieldTree.isStandalone()
properties.get(logSlow)
old + 15
new String[11]
target.getClass().getDeclaredMethod(getterName,EMPTY_CLASS_ARRAY)
assertEquals(4,body.size())
isValid(payloadJSONObject)
myPromptHooksExtensionFile == null
FitNesseSuite.initContext(new File(ContextConfigurator.DEFAULT_CONFIG_FILE),fitNesseRootPath,ContextConfigurator.DEFAULT_ROOT,port)
EMOJI_SMALL=0.60
liquibaseDataType.toString()
setInitView()
new BalloonImpl(new JLabel("FUCK"),Color.black,MessageType.ERROR.getPopupBackground(),true,true,true,true,true,0,true,null,false,500,5,0,0,false,"This is the title",new Insets(2,2,2,2),true,false,Layer.normal)
config != null || !config.isEmpty()
uuid.replace("-","").substring(0,8)
"Error: Could not get/register id for this client: " + e
DirectMessage.constructDirectMessages(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
new SpriteBatch(10000)
asFloatReg(input)
HazelcastClient.newHazelcastClient()
plus > 2
map.tryPut(key,value,8,TimeUnit.SECONDS)
/**   * Get the <em>required</em>  {@link Method} associated with the current testor container. <p>Use this method as an alternative to  {@link #getTestMethod()} for usecases in which the test method is required to be present.  * @return the test method; never {@code null}  * @throws PreconditionViolationException if the test method is not presentin this  {@code ExtensionContext}  */ default Object getRequiredTestMethod(){   return Preconditions.notNull(getTestMethod().orElse(null),"Illegal state: required test method is not present in the current ExtensionContext"); } 
assertEquals(row.getField(0),2L)
source=Html.fromHtml(this.source).toString()
display.equals(taskRect)
flowParameters.get(flowParam)
note.getAttachmentsList().size() > 0 && showThumbnails
in.readUTF()
new SdkListCellRenderer("<Project Default>")
JCheckBox formatPhoneNumber=new JCheckBox("",ConfigurationManager.isNormalizePhoneNumber()); 
getRepoUrl().equals(gitHubRepo.getRepoUrl()) & getBranch().equals(gitHubRepo.getBranch())
final IInputMethodClient client=(IInputMethodClient)msg.obj; 
type == Sensor.TYPE_AMBIENT_TEMPERATURE
inflater.inflate(R.layout.mainfrag,container)
AuditEvemtFormatter messageFormatter
connectPromise.setFailure(t)
mConnector.execute("cryptfs","deleteuserkey",userHandle)
assertThat(lastTrade.getFeeAmount()).isNull()
availableLocale.equals(defaultLocale)
w.applyTo(myNode,myNode.getAttributeList())
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo(java.lang.Class...)","foo(java.lang.Class<?>...)")
modelCalcinator.render()
plugin.authorizePayment(account.getId(),directPaymentId,account.getPaymentMethodId(),amount,currency,properties,callContext)
FilterAndProjectOperator.class
new WordToSentenceProcessor<IN>()
obj != proxiedObj
new StringBundler(6)
expirationPeriod * 60 * 1000
recipient.getName()
System.getProperty(key,"")
new PkgControl(stack.peek(),name,regex)
LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,false,progress)
!BSSID_PATTERN.matcher(bssid).matches()
addView(mTitleLayout,new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.MATCH_PARENT))
width > 0
fieldType.equals(SupportedFieldType.DECIMAL.toString())
client.pods()
AbstractConfiguredTarget current
schemas == null
!mMediaPlayer.isPlaying()
name.substring(0,name.length() - 1)
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:11500}")
frag.element("status")
new StringBuilder()
folder.getGroupId()
mState == StatusBarState.SHADE_LOCKED
new GroupDialog(frame,panel,oldGroup)
results.put("results",jsonObject)
UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {   PsiDocumentManager.getInstance(myFixture.getProject()).commitAllDocuments();   final String intentionName=PyBundle.message("sdk.gen.stubs.for.binary.modules",myUseQuickFixWithThisModuleOnly);   IntentionAction intention=myFixture.findSingleIntention(intentionName);   if (intention instanceof IntentionActionDelegate) {     intention=((IntentionActionDelegate)intention).getDelegate();   }   Assert.assertNotNull("No intention found to generate skeletons!",intention);   Assert.assertThat("Intention should be quick fix to run",intention,Matchers.instanceOf(QuickFixWrapper.class));   final LocalQuickFix quickFix=((QuickFixWrapper)intention).getFix();   Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run",quickFix,Matchers.instanceOf(GenerateBinaryStubsFix.class));   final Task fixTask=((GenerateBinaryStubsFix)quickFix).getFixTask(myFixture.getFile());   fixTask.run(new AbstractProgressIndicatorBase()); } )
new V(1,new BooleanSetting(Account.DEFAULT_SORT_ASCENDING))
Assert.assertEquals(5,autoPartition.getPartitionNum())
COLUMNS=7
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=7
new PrintWriter(deprecationPrinter)
startExpression != null
internedParseStringCharacters(text)
!active
mUserPaddingStart >= 0
isSupportsAlterColumnName()
builder.length()
Ddeml.INSTANCE.DdeUnaccessData(hData)
file.toURL()
SAM<X>
RuntimeInfrastructure.class
assertEquals(r.getProperties().size(),2)
e.getMessage().equals("fields stored in the db can't have . in them")
StringUtil.isNotEmpty(name)
PersistenceManager.class
Assert.assertEquals("Message key '" + retrievedMessage + "' is not valid",retrievedMessage,"unable.open.cause")
halfTextureSize != 0
Randomness.shuffle(builders)
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     associatedTask.setUpdated(new Date());     activateTask(associatedTask,true,false);   } } )
!debuggerSettings.equals(currentSettings) && Registry.is("debugger.mayBringFrameToFrontOnBreakpoint") != myFocusAppCheckBox.isSelected()
maxCards[i]=numWords
ParallelStreams::sequentialSum
deprecated.getActiveRules()
file != null
metric instanceof MetricsRate || metric instanceof MetricsString
mode.getFormattedName().toLowerCase()
getAllAncestors()
allOf(withContentDescription("drawer open"),withParent(withId(R.id.toolbar)),isDisplayed())
sendCommand(CLIENT_GETNAME)
sDefaults.putBoolean(KEY_PERSIST_LPP_MODE_BOOL,false)
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,20000))
generateRandomStringArray(20,20,false)
Integer.valueOf(nextArgRequired())
origin.realComponent().doubleValue() < other
new GeneratorException("Error writing " + file.getAbsolutePath())
mContext.startActivity(intent)
isSite()
string.toLowerCase()
@Override public Text setText(String str){   throw ImmutableElement.immutableError(this); } 
Object... pathParams
jsonObject.put("displayStyle",displayStyle)
new RuntimeException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
registerProblem(node,"Too broad exception clause")
!COMMENTS.contains(type2) && BLOCKS.contains(parentType) && !(node1.getTreeNext() instanceof PsiErrorElement)
cursor != consumer.get()
height > seaLevel
createClient(addr.getHost(),addr.getPort())
result=55
tagService.getTagsAsString(task.getId())
String.format("%n%s after %d ms\n" + "[%10d tests found     ]\n" + "[%10d tests started   ]\n"+ "[%10d tests skipped   ]\n"+ "[%10d tests aborted   ]\n"+ "[%10d tests successful]\n"+ "[%10d tests failed    ]\n",msg,(this.timeFinished - this.timeStarted),this.testsFound.get(),this.testsStarted.get(),this.testsSkipped.get(),this.testsAborted.get(),this.testsFailed.get(),this.testsSucceeded.get())
(ResourceAdapterDeploymentService)controller.getService()
ConfigPropertyVetoExceoption ex1
ethFilter.getError()
findAndRemove(query,null,collectionName)
new BranchedDataException(e)
counter >= max
trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)
@NotNull protected abstract TStatement createNewStatement(@NotNull PsiElementFactory factory,@NotNull PsiElement expression,@NotNull PsiElement context); 
new StepMeta(log,"SelectValues",stepName,svm)
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().otherwiseIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
getVersion()
lastUpdateIdx < firstUpdateIdx
this.file.maxContentLength > 0
HashMap<String,ASTNode>
chart.createBufferedImage(bounds.width,bounds.height)
GridCacheAdapter<K,V>
this.transactionsRepository.removeTransaction(this.xidTransactionID)
Set<UidRange>
destroy.isPrivate()
to("direct:foo")
sm.getString("standardContext.startingContext")
randomIntBetween(1,10000)
super((JFrame)null,JMeterUtils.getResString("search_tree_title"),true); 
getJndiString(JNDI_JMX_USER)
i < end
delegate.writeStartElement(prefix,namespaceURI,localName)
io.getCount(buf) >= idx
mWindowingMode == WINDOWING_MODE_PINNED
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
Control.getSingleton().getExtensionLoader().addonFilesAdded()
Byte.toUnsignedInt(seed[0])
createContractFromJson(json,contractName)
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)
Slog.e(TAG,"couldn't inflate view for notification " + ident)
_sumsqe / _count
useOsmandKeyboard
energyProcessor.calculateGlobalEnergyLimit(totalBalanceForEnergyFreeze)
PORT_2=8080
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFUser,false,false)
referencedDomainClass.getName()
level == 0
Integer contentLength=ctx.getOriginContentLength(); 
AnnotatedElementUtils.getAnnotationAttributes(method,annotationType)
sm.getString("standardSession.setAttribute.ise")
JSError.make(AbstractCompiler.READ_ERROR,getName())
getPlayer(server,args,0)
getLogger().error("Unknown classloader: " + loader.getClass().getName())
ssl.has(CommonAttributes.PROTOCOL)
query.from(employee).distinct(employee.datefield,employee.timefield)
mData.hashCode()
this.logger.isWarnEnabled()
decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf1)))
new KMLNetworkLinkTransformer(wms)
getName()
mappers.mapper().searchAnalyzer()
fragmentEntryPersistence.filterFindByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.PNORM,(double)pnorm,outH,outW,output)
System.out.println()
oauth20ValidationServiceSelectionStrategy()
FastMath.max(origin,num.floatValue())
BufferUtil.zeroBuffer(4)
CHATTY=true
new Prepared(instrumentations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),finding)
mDrawBitmap == null
current == null
new GSPSitemeshPage(true)
queryBuilder.appendQuoted(FlowManager.getTableName(table))
parser.getBoolean(KEY_ANIMATION_DISABLED,true)
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,null,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
u1.version() == 1
nodePath != null
id=15862
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCE_POLICY_CLASS_NAME_METHOD)
ArrayUtil.isEmpty(groupId)
event instanceof ArtifactCacheEvent
!cursor.checkAndClearBoundsFlag()
Nd4j.dataType()
secConn != null
lastConnectionFailure.getAndSet(null)
childParams.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER
new ShardRouting(index,shardId,currentNodeId,null,null,primary,state,version,null,true)
new PaymentApiException(ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
new ImmutableInstruction3rc(Opcode.INVOKE_DIRECT_RANGE,instruction.getRegisterCount(),instruction.getStartRegister(),instruction.getReference())
executeWrappedCommandProtocol(databaseName,getCommand(),createCommandDecoder(),connection,commandTransformer(source))
mHandler.postDelayed(pae,timeout)
log.debug("Testing debug(msg,null)",null)
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().otherwiseIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
pressedView.postDelayed(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
setRestitution(objectId,mass)
mBluetoothHeadset.stopScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
Futures.transform(executionClients.getRemoteExecutionService().execute(actionDigest),result -> {   executingScope.close();   return result; } )
entry != null
unhintedMessage.getMessageId()
slash < 0
checksum ? COMPRESS_FLAG_MASK : 0
new IndexWriter(rd,new WhitespaceAnalyzer(),true)
ParamUtil.getLong(uploadRequest,"nodeId")
name.equals("getSimOperator")
new Alarm(Alarm.ThreadToUse.SWING_THREAD)
new CrypticClue("Search the crates near a cart in Varrock.",MILL_2571,new WorldPoint(3226,3452,0),"South east of Varrock Palace, south of the tree farming patch.")
serialVersionUID=145789840
EnumSet.of(Scope.JAVA_FILE)
mRS.nMeshGetIndices(mID,idxIDs,primitives,vtxCount)
returnTypeOfGetMethod != null
note.get_id() == 0
pipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
new HgSetExecutableDialog(project)
new IOException("Downloading Gradle distributions with HTTP Basic Authentication is not supported on your JVM.",ex)
DeviceCommunicationService.class
entry.getHeader().getEventLength() * 3
InetAddress.getLoopbackAddress()
Aria.download(this).getDownloadList()
new IndexWriter(storeDirectory,analyzer,true)
block.getX() + 1.5
this.sslHostnameValidationEnabled
sum > 0
fileCollectionSnapshotter.registerSerializers(serializerRegistry)
registryCache.putIfAbsent(channel.getName(),registry)
compressedProto.length < 390200
getType().isArray()
b.getTopicId()
element.getKind() != ElementKind.CONSTRUCTOR
response.getStatus() < 400
exported
ZWaveSwithcAllCommandClass.class
object=this
Object[]
EJBException nsee
id > holdingColor.length
byteBuf.readable()
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE)
ServiceLoader.load(ReportSenderFactory.class)
checkBoxView.setBackgroundResource(R.drawable.btn_check)
cr.session_timeout_ms != 0
!state.isFrameTypePermitted(FrameType.DATA)
Trans == TRANSPOSE
logger.error("Channel error",cause)
format.getDescription()
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=false
ResponseImpl schema(Property property); 
getInt(DISPLAY_OPTION,0)
/**   * An action to create an implementation of  {@link ExecutingTransformer} that support Java 9 modules.  */ protected enum InheritanceAction implements PrivilegedAction<Factory> {/**   * The singleton instance.  */ INSTANCE; @Override @SuppressFBWarnings(value="REC_CATCH_EXCEPTION",justification="Exception should not be rethrown but trigger a fallback") public Factory run(){   try {     return new Factory.ForJava9CapableVm(new ByteBuddy().subclass(ExecutingTransformer.class).name(ExecutingTransformer.class.getName() + "$ByteBuddy$ModuleSupport").method(named("transform").and(takesArgument(0,JavaType.MODULE.load()))).intercept(MethodCall.invoke(ExecutingTransformer.class.getDeclaredMethod("transform",Object.class,String.class,Class.class,ProtectionDomain.class,byte[].class)).onSuper().withAllArguments()).make().load(ExecutingTransformer.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER_PERSISTENT.with(ExecutingTransformer.class.getProtectionDomain())).getLoaded().getDeclaredConstructor(ByteBuddy.class,TypeLocator.class,TypeStrategy.class,LocationStrategy.class,Listener.class,NativeMethodStrategy.class,InitializationStrategy.class,BootstrapInjectionStrategy.class,DescriptionStrategy.class,RawMatcher.class,Transformation.class));   }  catch (  Exception ignored) {     return Factory.ForLegacyVm.INSTANCE;   } } @Override public String toString(){   return "AgentBuilder.Default.ExecutingTransformer.InheritanceAction." + name(); } } 
ContainerUtil.newHashSet(EDITOR_TOOLBAR,PROJECT_VIEW_TOOLBAR,TESTTREE_VIEW_TOOLBAR,MAIN_TOOLBAR,TOOLBAR,RUNNER_TOOLBAR,ANT_EXPLORER_TOOLBAR,ANT_MESSAGES_TOOLBAR,COMPILER_MESSAGES_TOOLBAR,TODO_VIEW_TOOLBAR,STRUCTURE_VIEW_TOOLBAR,USAGE_VIEW_TOOLBAR,DEBUGGER_TOOLBAR,CALL_HIERARCHY_VIEW_TOOLBAR,METHOD_HIERARCHY_VIEW_TOOLBAR,TYPE_HIERARCHY_VIEW_TOOLBAR,JAVADOC_TOOLBAR,FILE_HISTORY_TOOLBAR,FILEHISTORY_VIEW_TOOLBAR,LVCS_DIRECTORY_HISTORY_TOOLBAR,CHANGES_VIEW_TOOLBAR,PHING_EXPLORER_TOOLBAR,PHING_MESSAGES_TOOLBAR,ANALYZE_STACKTRACE_PANEL_TOOLBAR)
Files.exists(start)
collection.setLazy(true)
replicatedMapService.getReplicatedRecordStore(mapName,false)
IRON_GOLEM("VillagerGolem",IronGolem.class,98)
getActionBar()
getAffiliatesByOwner("owner")
mFrustum.update(mCombinedMatrix)
ImmutableList.of("/bin/bash","-c","python signer.py $APK key.properties > $OUT")
SPACE_BEFORE_COLON_IN_FOREACH=false
takenProbability=0.5
beforeCaret.getText().indexOf('\\') > 0
this.thrown.equals(IllegalStateException.class)
tokens.length + 1
Entity shooter=((Projectile)event.getDamager()).getShooter(); 
file.lastModified()
Math.round(internalPower[in] / totalPowerContained * totalPowerConsumed)
Collections.singletonList("")
new WorldPoint(3026,3629,0)
new Resource(url,name)
getWidth()
cascadeValidationToOne(errors,bean,associatedObject,persistentProperty,propertyName + "[" + (idx++)+ "]")
"jar".equals(url.getProtocol())
Thread.sleep(1000)
msgInfoHolder != null
matcher.replaceFirst(replacement)
ExamplesUtils.classLoader().getResource(HIBERNATE_DFLT_CFG)
new JBHiDPIScaledImage(newUserWidth,newUserHeight,getType())
config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString())
pixmap.drawCircle(x,y,radius,color)
shouldBackup=false
length % dictionarySize
new NullPointerException()
LOG.warn(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
mRepeat > 1
masterAddress.split(":").length != 2
t < _to
assertThat(filter.getColumns()).hasSize(6)
assertEquals(1,preIndex.get())
idx > biomes.length
public SELF withArguments(String... arguments){   operationParamsBuilder.setArguments(arguments);   return getThis(); } 
FilenameIndex.processFilesByName(PubspecYamlUtil.PUBSPEC_YAML,false,falseProcessor,module.getModuleContentScope(),project,null)
p + "." + M_ITERATOR
new PatreonRealm()
commit.getTime()
Messages.getString(key,param1,param2)
f.getFp()
start < 0
elapsed > config.getConnectionTimeout()
new InvalidPluginRequest("No artifacts in maven layout found for plugin id" + pluginId)
new AgentTemplate(parent,true)
text.split("\\n")
isCorrect
!m.containsNonNullValue(TagMetadata.TASK_UUID) && m.getValue(TagMetadata.TASK_UUID) == 0
config.getStorageImpl()
"".equals(format)
height / 2
ViewCompat.getScaleX(itemView)
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER")
64 * 2
IndexReader.openIfChanged(oldReader)
"none".equals(max_items)
@Tes
mShouldTranslateContents
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,true,"getAppStandbyBucket",null)
assertEquals("The bus id should be changed",bus.getId(),"test")
c == Float.class
configuration.getOutputType()
SavedSearch.constructSavedSearches(get(getBaseURL() + "saved_searches.json",true))
psiElement().afterLeaf(".")
Integer.parseInt(compressionLevel)
mCheckUnusedThrows=aFlag
/**   * Returns last child <b>element</b> with given name or <code>null</code> if no such child node exist.  */ public Node getLastChildElement(String elementName){   if (childNodes == null) {     return null;   }   int from=childNodes.size() - 1;   for (int i=from; i >= 0; i--) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
oldestUnflushedStoreSequenceIds.put(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
amfOut.getByteArrayOut().writeTo(amfOut)
AbstractHadoopJob.loadKylinPropsAndMetadata(context.getConfiguration())
+theme
assertNull(stubTree)
random().nextInt(999) + 1
source.getCode()
final StringBuffer sb=new StringBuffer("PluginInfo{"); 
!readThrough || skipVals || (key != null && !cctx.affinity().backupsByKey(key,topVer).contains(cctx.localNode()))
diagnostic.getCode().equals("compiler.err.cant.access")
account.getPendingEmailChange()
targets.length == 0
window != null
mCurrentDate.get(Calendar.MONTH) != dayOfMonth
private Container container; 
logger.debug(getName() + " has been started")
targetInfo != null
mHiddenForOtherReasons=false
ConsistencyManager.class
id=19909
connection.setConnectTimeout(1)
PreferenceManager.instantPictureUploadEnabled(this)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,true)
WeakReference[]
"true".equalsIgnoreCase(value)
Arrays.sort(hyperParamNames1)
OPEN
Exception exception
seriesInfo.Index.toString()
((-t + 2) * t - 1) * t / 2f
feedEntryStatusDAO.findUnreadByCategories(children,null,0,1,ReadingOrder.desc,false)
new IllegalStateException()
s.length() - 2
new ToolTip(500,new ToolTipLine(StringUtils.localize("tip.tool.add")))
call.getProject()
res.getContentType().toLowerCase().indexOf("text/html") != -1
ProcessBundleDescriptors.fromExecutableStage("my_stage",stage,components,dataServer.getApiServiceDescriptor())
100 * 1000
id=13307
Utils.class
IoUtil.delete(dir,false)
assertEquals(actual.length,expected.length)
new Tuple(label,name)
GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)
user.getDisplayName()
new InTransformReader(reader,Collections.singletonMap("{http://bar}test","test2"),null,false)
initial=10
new MockNode(Settings.builder().put(SETTINGS).put("node.data",false).build(),false,Version.CURRENT,Arrays.asList(WatcherBenchmarkPlugin.class,LicensePlugin.class))
DISPLAY_TASKS_PORTRAIT=8
realIndex < columns.size()
HashSet<Test>
NoopChatHandlerProvider.class
@Override public Value emitBitScanForward(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   append(new AMD64BitManipulationOp(BSF,result,asAllocatable(value)));   return result; } 
position.setLongitude(buf.readShort())
0.1 * VALUE_RANGE
mRilVoiceRadioTechnology=m.getInt("dataRadioTechnology")
if (DBG) loge("Exception trying to remove a route: " + e); 
ActivityManager.handleIncomingUser(callingPid,callingUid,userId,true,true,"enqueueNotification",pkg)
getDir()
logger.info("Failed to register block {} - no id",block,block.getId())
new TransactionBroadcast(peerGroup,tx)
DEFAULT_DISMISS_TO_VIEW_RATIO_LIMIT=.4f
LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'))
signature.getToSign()
scope.getLocalVariable(name)
entry.get() == null
new IOException()
StringUtils.containsIgnoreCase(userAgentStr,"Iframely") || StringUtils.containsIgnoreCase(userAgentStr,"Google") || StringUtils.containsIgnoreCase(userAgentStr,"B3log")|| StringUtils.containsIgnoreCase(userAgentStr,"BUbiNG")
DebuggerUtilsEx.collectLambdas(original,false)
/**   * Titan graph database implementation of the Blueprint's interface. Use  {@link TitanFactory} to open and configure TitanGraph instances.  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  * @see TitanFactory  * @see TitanTransaction  */ @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_INTEGRATE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_PERFORMANCE) @Graph.OptIn("org.janusgraph.blueprints.process.traversal.strategy.TitanStrategySuite") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.structure.VertexPropertyTest$VertexPropertyAddition",method="shouldHandleSetVertexProperties",reason="Titan can only handle SET cardinality for properties when defined in the schema.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldOnlyAllowReadingVertexPropertiesInMapReduce",reason="Titan simply throws the wrong exception -- should not be a ReadOnly transaction exception but a specific one for MapReduce. This is too cumbersome to refactor in Titan.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldProcessResultGraphNewWithPersistVertexProperties",reason="The result graph should return an empty iterator when vertex.edges() or vertex.vertices() is called.") public interface TitanGraph extends TitanGraphTransaction {   /**   * Opens a new thread-independent  {@link TitanTransaction}. <p/> The transaction is open when it is returned but MUST be explicitly closed by calling  {@link org.janusgraph.core.TitanTransaction#commit()}or  {@link org.janusgraph.core.TitanTransaction#rollback()} when it is no longer needed.<p/> Note, that this returns a thread independent transaction object. It is not necessary to call this method to use Blueprint's standard transaction framework which will automatically start a transaction with the first operation on the graph.  * @return Transaction object representing a transactional context.  */   public TitanTransaction newTransaction();   /**   * Returns a  {@link TransactionBuilder} to construct a new thread-independent {@link TitanTransaction}.  * @return a new TransactionBuilder  * @see TransactionBuilder  * @see #newTransaction()  */   public TransactionBuilder buildTransaction();   /**   * Returns the management system for this graph instance. The management system provides functionality to change global configuration options, install indexes and inspect the graph schema. <p /> The management system operates in its own transactional context which must be explicitly closed.  * @return  */   public TitanManagement openManagement();   /**   * Checks whether the graph is open.  * @return true, if the graph is open, else false.  * @see #close()  */   public boolean isOpen();   /**   * Checks whether the graph is closed.  * @return true, if the graph has been closed, else false  */   public boolean isClosed();   /**   * Closes the graph database. <p/> Closing the graph database causes a disconnect and possible closing of the underlying storage backend and a release of all occupied resources by this graph database. Closing a graph database requires that all open thread-independent transactions have been closed - otherwise they will be left abandoned.  * @throws TitanException if closing the graph database caused errors in the storage backend  */   @Override public void close() throws TitanException ;   /**   * The version of this Titan graph database  * @return  */   public static String version(){     return TitanConstants.VERSION;   }   public static void main(  String[] args){     System.out.println("Titan " + Titan.version() + ", Apache TinkerPop "+ Gremlin.version());   } } 
lock.unlock()
public AuthenticationType authenticationType() default AuthenticationType.CONTAINER; 
id=19907
LocalMetricRegistry localRegistry
dep instanceof CxxPythonExtension
si.deliveryCount > 0
+distDir.getAbsolutePath()
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,false,false)
getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable(){   public void run(){     cleanup();   } } ,cleanupPeriod,cleanupPeriod,TimeUnit.MILLISECONDS)
new SpockTimeoutError(seconds,msg)
Object.class
DiagnosticGroups.registerGroup("functionParams",FunctionTypeBuilder.OPTIONAL_ARG_AT_END)
Group other
id=7
name.length() > 0
ret0 != null
installProgressBar.setIndeterminate(true)
dist > maxDist
CompletableFuture<Boolean>
assertEquals(1,tempDir.listFiles().length)
s == null
/**   * Returns a result of type  {@code T} if the operation succeeds; otherwisethrows an exception.  * @return a result of type {@code T} if the operation succeeds; anexception otherwise  */ public T get() throws Exception ; 
new AmbariException("TopologyManager: Unable to retrieve cluster topology for cluster: " + clusterName)
mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getReplicaProps(collection,shardId,thisCoreNodeName)
addInactiveSubscription(subscriptionKey,info)
message.size()
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","del","div","dfn","dl","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
@Override public MutableLongValue reduce(List<MutableLongValue> combinedResultList){   long reducedValue=0;   for (  MutableLongValue value : combinedResultList) {     reducedValue+=value.longValue();   }   return new MutableLongValue(reducedValue); } 
new ShingleFilter(tokenStream,maxShingleSize,minShingleSize)
database instanceof DB2Database
logger.warn("[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed")
List<CommitId>
new StringBuilder()
mock(Grouped.class)
Expression.gt(this.propertyName,arguments[0])
status == 400
value.equalsIgnoreCase("assetCategories") && name.startsWith(prefix)
requestParameters == null
/**   * Creates a ClassLoader implementation which has, by default, only the classes from the Java API visible, but which can allow access to selected classes from the given parent ClassLoader.  * @param parent the parent ClassLoader  * @param spec the filtering spec for the classloader  * @return The ClassLoader  */ FilteringClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec); 
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
AUTH_BYTE=0x8
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,false)
origin > other
pipe != null
fieldTable[i]
new Dimension(600,800)
new Pair<>(modelName,expressions().values().iterator().next())
leftExpression.getName()
this.setTouchAreaBindingEnabled(true)
new File(parent,pdeName)
LOGGER.debug("Error with XML parser configuration",e1)
g.events().localListen(lsnr,EventType.EVT_NODE_LEFT)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted,crestricted)
endpoints.add(entry.getValue())
assertThat(countWithAllDateFieldsNull).isEqualTo(1)
documents.get(docNum).getCheckResults(paraText,locale,paRes,footnotePositions,isParallelThread)
INDEX_VERSION=17
BatchQuickFix<ProblemDescriptor>
public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
Log.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
routine != null
elapsedMillis < 170
ValueNode firstMethodConstantNode=ConstantNode.forConstant(firstMethodConstant,metaAccess,graph); 
HighlightUtil.Feature.ENHANCED_SWITCH.isAvailable(block)
SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
consoles.waitUntilJdtLsStarted()
bindings.get()
filter != null && !filter.isAccept(field)
dest.writeList(userIds)
BlockStoreContext.INSTANCE.hasLocalWorker()
SERVLET_MINOR_VERSION=0
{1,0,0,0,0,0,1,0,0,0}
annotations == null
isMarked(node)
/**   * Run the stemmer against all strings in voc.txt The output should be the same as the string in output.txt  */ public void testPorterStemFilter() throws IOException {   Tokenizer tokenizer=new KeywordTokenizer(new StringReader(""));   TokenStream filter=new PorterStemFilter(tokenizer);   ZipFile zipFile=new ZipFile(new File(getClass().getResource("porterTestData.zip").getFile()));   InputStream voc=zipFile.getInputStream(zipFile.getEntry("voc.txt"));   InputStream out=zipFile.getInputStream(zipFile.getEntry("output.txt"));   BufferedReader vocReader=new BufferedReader(new InputStreamReader(voc,"UTF-8"));   BufferedReader outputReader=new BufferedReader(new InputStreamReader(out,"UTF-8"));   String inputWord=null;   while ((inputWord=vocReader.readLine()) != null) {     String expectedWord=outputReader.readLine();     assertNotNull(expectedWord);     tokenizer.reset(new StringReader(inputWord));     filter.reset();     assertTokenStreamContents(filter,new String[]{expectedWord});   }   vocReader.close();   outputReader.close();   zipFile.close(); } 
out.writeInt(mProgress)
reportError(context,"encoding %s as an ARRAY was unexpected")
AcquireJobsRunnable.class
new HashMap(50)
ig0.context().query().dynamicTableCreate(SCHEMA_NAME,getEntity(),TMPL_NAME,true)
GenericsUtil.eliminateWildcards(psiType)
isDistinct(child)
truePositives.incrementCount(classLabel,1.0)
0.5f
mQuietEnable
max() > 32
Nd4j.pullRows(weights,1,indexes)
GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))
StringBuffer buffer=(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey); 
iconSize * DisplayMetrics.DENSITY_HIGH > availableHeight
testAllocation("test2snippet",1,0,0)
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commit()
JBScrollPane.findScrollPane(myContent)
RECONNECT_DELAY_MIN=8
segmentsInCluster.get(segment.getIdentifier(),server.getTier())
ArrayList<>
battery.addPower(MjAPI.MJ)
data.eachX=8
LoginWebUpgrade.class
re.getResponse().getStatus() == 404
currentUser.observable()
IOUtils.toInputStream(responseString)
assertCompletionVariants(myProjectPom,"test","org.apache.maven.plugins","org.codehaus.mojo")
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),put,true)
checkTables("purgeSnapshots","snapshots","project_measures","measure_data","rule_failures","snapshot_sources","dependencies","events")
Preconditions.checkNotNull(mPinnedInodes)
settingOptional.get().getName()
SC_FILE_EXTENSION_EXCEPTION=1001
r.getRequest(false)
CellUtil.estimatedHeapSizeOf(c)
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
response.header("location")
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
IndicesOptions.fromOptions(true,false,true,true)
Utility.isConnected(context)
tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS || tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND
query.getSliceEnd()
super.close()
new CommandFormatException("Parsed request isn't available.")
addVault(file.toPath(),false)
stmt.executeQuery(sqlQuery)
output.writeStartElement(part.getConcreteName().getNamespaceURI(),part.getConcreteName().getLocalPart())
FORBIDDEN_INDEX_SETTING.contains(name)
OpenSparkInterpreter(false)
this.mPlatformBitmapFactory=mPlatformBitmapFactory
api == null
w.closeException() == null
new AssertionError("Should not be called")
boneIndexes.size() > 0
((AbstractDrawerItem)drawerItem).isExpanded()
Class.forName("java.lang.invoke.CallSite")
ArrayList<Class<?>>
(!url.startsWith("http://")) && (!url.startsWith("https://")) && (!url.startsWith("file://"))&& (!url.startsWith("data:"))
FileDownloadUtils.formatString("range[%d-)",startOffset)
mandatory
new StringLengthValidator(1,Integer.MAX_VALUE,true,true)
dragNode.isNodeChild(target)
SecureRandom.getInstanceStrong()
this.currentKeys
message.getMessageId().getDataLocator()
/**   * @author Hugo Huijser  */ @RunWith(LiferayIntegrationJUnitTestRunner.class) public class JavaSourceProcessorTest extends BaseSourceProcessorTest {   @Test public void testExceedMaxLineLength() throws Exception {     test("ExceedMaxLineLength.testjava","> 80:",22);   }   @Test public void testUnusedImport() throws Exception {     test("UnusedImport.testjava");   } } 
interval * 1000
new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis())
protected JavaExec createTaskGenerate(File wsdlFile,File tmpDir){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Generate",wsdlFile);   JavaExec javaExec=GradleUtil.addTask(_project,taskName,JavaExec.class);   File tmpSrcDir=new File(tmpDir,"src");   javaExec.args("--output=" + FileUtil.getAbsolutePath(tmpSrcDir));   javaExec.args(FileUtil.getAbsolutePath(wsdlFile));   javaExec.setClasspath(getConfiguration());   javaExec.setMain("org.apache.axis.wsdl.WSDL2Java");   TaskInputs taskInputs=javaExec.getInputs();   taskInputs.file(wsdlFile);   TaskOutputs taskOutputs=javaExec.getOutputs();   taskOutputs.dir(tmpSrcDir);   return javaExec; } 
mConnector.executeForList("volume","list")
logger.error("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
dialect.supportsQuotedMixedCase()
typeDefinition.isEnum() || typeDefinition.isInterface() || typeDefinition.isAnonymous()
new SparkRuntimeContext(p)
showSelfHostedSignInForm()
null == iobj.getType()
velocityX / flingThreshold
JSInheritanceUtil.iterateMethodsDown((JSFunction)element,new Processor<JSFunction>(){   @Override public synchronized boolean process(  final JSFunction jsFunction){     allRenames.put(jsFunction,newName);     return true;   } } )
errorPos + 20
options != null
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_CONNECTED)
styles_.input()
Thread.sleep(1000)
cached.get(columnNames)
Cleaner.create(this,new Closer(mFileDescriptor,mMemoryRegistration))
cls.getAccessFlags().isSynthetic() && cls.getFields().isEmpty() && cls.getMethods().isEmpty()
(new OpenEphyraCorpus()).commandLine()
incomingEdges.containsKey(source)
logger.info("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
Object[]
resultSet.put("start",start)
method.getStatusCode() == HttpStatus.SC_NOT_FOUND
BaseMessages.getString("Spoon.Dialog.PromptToSave.Message",fileName)
!Utils.isRawValue(value)
treeStyles.styles()
(lo + hi) >> 1
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
getKeyDesc(keyRowMeta,keyNrs,one)
indexOfSlashN != -1
LanguageLevel.getDefault()
accountApi.setEmailNotificationsForAccount(accountId,invoiceEmailJsonWithNotifications,requestOptions)
CONTENT_TYPE + "; boundary=" + getBoundary()
Integer.valueOf(_ANALYTICS_GATEWAY_PORT)
toHeapData(key)
logMinimal(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
CheckEmptyScriptTagInspection.class
super.onDetachedFromWindow()
InsertFinalStep<R>
Image.class
Objects.isNull(value)
connect(monitor,null,null,false,false)
new Location(user.getWorld(),x,y,z)
index > capacity()
n.intValue()
new QueryException("Could not parse build targets.\n%s",e.getMessage())
Files.isReadable(file)
(OneToOneCallPanel)callPanel
fdm.getCachedDocument(file) == null
recurrence.length() > 0
Collections.<IntPair>emptyList()
idfr.identify(this.getClass().getResourceAsStream(tokens[0]))
data.hasTestPassed()
inbound.isEmpty() && inbound.hasByteBuffer()
serverEnvironment == null
LOGGER.error("Something went wront : {}",errorMessage,element)
new OwnCloudVersion(0x040001)
AssertionFailedError e
ranges == null
stores.next().getAssertMap()
id=6
aProject.getTasks().all(captureReportingTasks)
testEventsByType(DYNAMIC_TEST_REGISTERED)
!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY) || !ConnectivityUtils.isInternetWalled(context)
message.getCounterpart().split("/")
keyBindings.checkSearchResultKeyBinding("open",6)
new Vector2i(availableHeight,areaHint.x)
homeListView.smoothScrollToPosition(0)
data.lineBuffer.size() <= meta.getNrFooterLines()
mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL
maxRowsPerFrame=100_000
globalDisplay_.openWindow(result_.getOutputFile())
ConfigPropertyVetoExceoption ex
referenceDatabase.getObjectQuotingStrategy()
RouteInfo r; 
System.currentTimeMillis()
new UnsupportedOperationException("Attempting to send sliced reindex-style request to a node that doesn't support " + "it. Version is [" + out.getVersion() + "] but must be ["+ BulkByScrollTask.V_5_1_0_UNRELEASED+ "]")
encoding=options.get(ELEMENT_NAME)
messenger.requestSms(res)
MergeMatchedSetMoreStep<R>
RIGHT_ID_T=3534
dockerConfigPath.isEmpty()
WikiServiceUpgrade.class
DecimalUtility.getDecimal9FromBigDecimal(bigDecimal,precision,scale)
state.mTint != null
it.setJavaDocComment("Cool this annotation!")
file.getInputStream()
logger.error("couldn't execute commandLine '" + commandLine + "'",e)
sqlRouteResult.getSqlParsedResult().getSqlType()
columnRestrictions[name.position]
XContentType.fromRestContentType(template.substring(2,endOfContentName))
new AlertDialog.Builder(this,mThemeId)
data.indexOfFilterField > 0
isCreated()
_TestUtil.nextInt(random(),0,256)
DurationType.getMillisType()
_propertyComments.isEmpty()
insertAfter != null
details.put(fileName,Long.toString(timestamp))
service.handlePinMmi(dialString)
i < 1
blockchain.isBlockExist(hash)
Results.ok()
mFlexItem.setAlignSelf(AlignItems.FLEX_START)
httpClient.getSocketMiddleware()
getUriBuilderFactory().expand(uriTemplate)
PollsServiceUpgrade.class
executeMethodAndCovertExceptions(httpPost)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(true)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CUBE))
CompilerDirectives.inInterpreter()
/**   * Include the name of each field when printing it. <strong>default: false</strong>  */ boolean includeFieldNames() default false; 
!toBeContained.initialized
session.getRemote().sendString(command.format())
value == null
new byte[0]
new DuplicateOrganizationException()
mNotificationsUtilsWrapper.mapJsonToFormattablbeContent(headerArray.getJSONObject(i))
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).toMillis()
defaultDDLFilename()
DfsSearchResult.toNotAvailable(in.readVLong())
VtexApis.REPLIES_URL + id
instance.startAction(getDefaultTitle(),null,false)
serialVersionUID=215521212534238L
subProtocol != null
config.getMaxRedirects()
log.i(LOG_TAG,"ACRA processName='" + processName + "'")
(byte)0xff
dbIdsRepository.getComponentId(component)
new Bitmap(nativeInt,isMutable,null,density)
getPreferences().getBoolean(SIGNAL_PREF,true)
new QueryException("Error in resolving targets matching %s",pattern)
mulNegLong(x,y) + mulZeroSubLong(y,x) + mulSubZeroLong(x,y)
val != null
ccfg1.setWriteBehindFlushFrequency(5000)
c.getAddMessageStatement()
newBase.isEmpty()
substitutor.substituteTemplate(myEditor,file,caretOffset,template)
className.getClassName()
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1500
index=0
StringUtils.subString(url,"weburi-",".json")
Socket.sendbb(socketRef,0,outputBuffer.position()) < 0
SHOW_DISABLE_FOREGROUND=true
testerAnnotation.getClass()
cfg.setExternalExecution(true)
mncStr.isEmpty()
" firstActiveTime=" + lastActiveTime
case WIKI: 
sender.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
jdbcTemplate.queryForInt(sql)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)
id=10
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
opened == -1
c.getDeclaredConstructors()
EntityRegistry.registerEntityID(entityClass,entityName,id)
si.intent == null
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
selenium.waitForElementPresent("//iframe[contains(@title,'Rich Text Editor')]")
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,DOUBLE,VARCHAR)
Native.ffi_prep_cif(0,1,Structure.FFIType.get(double.class).peer,types)
FISHING_ROD(346,1,64)
LOG.info("Client: segment " + segments[j] + " at "+ addr)
parseBlockPos(sender,args,1,false)
options.getPreserveOrder()
margin=5
fr.isExists()
new XContentTypeOptionsHeaderWriter()
overlookOuterLimit
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").filterSize(5,1,2,2).nIn(4).nOut(3).batchSize(batchSize).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(2).backward(true).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(new int[]{9}).override(new ClassifierOverride(1))
lastPull == node
new HazelcastInstance[count]
new ROC()
Object node
new HttpParameter("retweets",enableDeviceNotification)
in.seek(in.getFilePointer() + 4)
case QUIT: 
Class.forName(SYSTEM_ACTIVITY_MANAGER_LINUX_CLASS)
script_params.addParameter(myConfig.getParams())
DATABASE_TYPE_MYSQL.equals(databaseType)
visibleOnly=false
/**   * Ignore binary payloads by default  */ boolean logMultiplart() default true; 
SERVICELOG.error("Async error occurred: " + e,e)
revisionVersion=0
mTouchMode == TOUCH_INIT_MODE
Executors.newCachedThreadPool()
stack.stackSize > 0
ReplaceTranslationMojoTest.class
GL.glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
super.onDetachedFromWindowInternal()
doTest("class UserProfile:\n" + "    pass\n" + "\n"+ "#noinspection PyUnusedLocal\n"+ "def foo(sender):\n"+ "    pass","Py:CLASS_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:DEDENT","Py:END_OF_LINE_COMMENT","Py:LINE_BREAK","Py:DEF_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:LPAR","Py:IDENTIFIER","Py:RPAR","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK")
assertEquals(dataFileStream.getMetaString("avro.codec"),"deflate")
store.delete(message.getHeaders().getId())
new ModelNode(10000)
LOGGER.error("Following side pane could not be found: " + componentName,e)
!tickEnd
ArrayList<Library>
ReactiveHelper.scheduleLast(runnable,"Multicast next step")
compressed.capacity()
getAsText(fieldValue)
ExecutionParameters oldParameters
PsiFile file=null; 
updateRotation(1)
_constructor.newInstance(0,0,StringPool.BLANK,_IMAGE_URL,_IMAGE_URL)
resource == null && resource.length() == 0
super.beginPass(n)
test("MissingAuthor.testjava","Missing author")
targetAPI
!TextUtils.isEmpty(title)
Color.fromRGB(0x1E1B1B)
FilteringClassLoader filteredGroovy=classLoaderFactory.createFilteringClassLoader(groovyClassLoader,filteredGroovySpec); 
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots),true)
assertEquals(server.mode(),"stream")
LiferayFileEntry liferayFileEntry=(LiferayFileEntry)fileEntry; 
NUM_PUBLISHERS=1
ObjectAnimator.ofFloat(target,ALPHA,VISIBLE)
row - 0.25f
timeMs <= 0
new CountDownLatch(0)
XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors())
!mIsInitialized
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
new EqualsWithEps(arrayX,arrayY)
clazz.isAssignableFrom(value.getClass())
getPreferences().store(fos,"")
assertEquals(9776l,(long)sourceStats.get("warcNovelContentBytes"))
resolve(users)
mContext.getPackageManager().getUserBadgedDrawableForDensity(icon,new UserHandle(td.userId),null,0)
user.canAfford(money)
config.setBeanCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
mHandler.handleMessage(msg)
arg1 == 0
mSmallBatteryDevice ? 3 : 30
timeoutMs=500
ImmutableSortedSet.of("p","br","li","dt","dd","td","hr","img","tr","th","td")
new DSXOrder(pair,type,new BigDecimal("0.01"),new BigDecimal("900"),new Date().getTime(),0,DSXOrder.OrderType.limit)
Validator.isNull(className) && Validator.isNull(classPK)
!Arrays.equals(delta,pending.delta)
setAttributeInternal(inodePath,true,opTimeMs,options)
typeName.contains("CHAR")
subColumn.getLocalDeletionTime() <= gcBefore
isMute
id=15858
Values.WEBSOCKET.equalsIgnoreCase(upgrade)
@ManyToOne(optional=false) private Middle middle; 
op.getIDLName()
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,notification.toString())
Long.parseLong(value)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)
getContent(files,".obf",".zip")
deployOneTaskProcess()
SystemInfo.isMac ? 5 : 7
tileBox.getMapDensity()
var(b) > 1e-14
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
Collections.emptyList()
TextUtils.isEmpty(addresses)
assertEquals(response.getStatusCode(),302)
it.hasNext()
enu.hasMoreElements()
getLoaderManager().initLoader(LOADER,null,mLoaderCallbacks)
n == stringLength
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,false)
Network.connectToServer("localhost",5110,5000)
getSrcPath("checks/javadoc/Input_02.java")
DISMISS_TO_VIEW_RATIO_LIMIT=.8
info.getVoiceMailNumberForSubscriber(subId)
cfs.getMemtableThroughputInMB() * 1024 * 1024
Beans.newDuration(session.getLockTimeout()).toMillis()
VersionedChecksummedBytes mainAddressCopy=(VersionedChecksummedBytes)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
new CacheConfiguration<>()
OCDirId > 0
PlatformUtils.isIntelliJ()
fRestriction && ondemand
ShrinkWrap.create(JavaArchive.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml")
Preconditions.checkNotNull(timer)
if (dockOntopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
new HashSet<RecordReplicationInfo>(recordStore.size())
toShortUnsafe(bytes,0)
LOGGER.info("Application registered itself as {}",response.getBody())
private String location; 
getCluster().getDescription().getPrimaries()
mTableInfo.getTableName()
line == document.getLineCount()
new ALPNServerConnectionFactory(h2.getProtocol(),http.getDefaultProtocol())
questionMark >= 0
position - dockDividerWidth
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,1)
totalTime / curTime == curOps
future.isCancelled()
currentlyProcessing.addCallback(callback)
localVideoEnabled && !audioManager.isSpeakerphoneOn() && !audioManager.isBluetoothScoOn()
new WriteConcern(getSecondaryCount(testHosts) + 1)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
executionJobVertex.getParallelism()
storeProperty(propertyNode,pexp,objectExpressionType,visitor,receiver.getData())
config != null
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).count(wrapper)
logger.warn("Cannot play playlist ({})",e.getMessage())
!lowByte.equals("")
WebSettings.setTextSize(WebSettings.TextSize.SMALLEST)
descriptors[i].getPropertyType().equals(propertyType)
case s: 
Map<Integer,Object>
BigInteger.valueOf(55)
List<E>
grantRuntimePermissionsLPw(pkg,permissions,false,permissionGrant.fixed,userId)
methods.put(name,methods)
TagViewActivity.class
contents.getBytes()
composite.isStaticName(c.name())
applyDefaultViewName(request,mv)
loader.startInternal()
appendElementReference(buf,refElement)
assertEquals(serdeWrite.getCodec().toString(),CodecFactory.xzCodec(9).toString())
state.mBitmap == null
ContainerUtil.newHashSet(actions)
new ClusterRule(getClass())
_connector.getResponses("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
((VarcharType)type).getLength()
under
protected JavaCompile createTaskCompile(File wsdlFile,File tmpDir,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Compile",wsdlFile);   JavaCompile javaCompile=GradleUtil.addTask(_project,taskName,JavaCompile.class);   javaCompile.setClasspath(getConfiguration());   File tmpBinDir=new File(tmpDir,"bin");   javaCompile.setDestinationDir(tmpBinDir);   javaCompile.setSource(generateTask.getOutputs());   return javaCompile; } 
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName())
getSharedLocalInspectionTool() != null
sb.getParts().size() == 1
annotation.authenticationType()
getAnonID() != null
processor.process(request)
Assert.fail("Known issue https://github.com/eclipse/che/issues/8031")
location == null
DefaultCacheKeysFactory.getEntityId(cacheKey)
writer.writeLongArray("arr",arr)
cCurrentVersion=465
new CharacterDelimiterFrameDecoder('\0')
id=15864
t != null
assertEquals(2437,res.getTime(0,1) / 1000,30)
RevisionVersion=2
jsonObject.get(ERROR_KEY).getAsString()
!KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME)
TargetMinSubTotal=3000
mCol != null
treeView.group(deptColumn,ageColumn)
new Insets(6,0,0,6)
new MalformedException("Unused message placeholder: " + phName,objLitNode)
desktopSharingButton.setPressedImage(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_PRESSED))
getCanonicalText()
getOccurrence() < count
notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
expectation.getTimeToLive()
new IndexWriter(directory,analyzer,true)
eventDispatcher.loadCompleted(loadable.dataSpec,loadable.type,elapsedRealtimeMs,loadDurationMs,loadable.bytesLoaded())
mService.addOrUpdatePasspointConfiguration(config)
getDegreesFromXY(x,y)
MILLISECONDS.toNanos(20)
PathUtilRt.getFileName(moduleDirParent)
new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions1,keyPositions2,keyClasses,memoryManager,ioManager,this,availableMemory)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-date-time elements.  */ public ArrayValue nextLocalDateTimeArray(){   return Values.localDateTimeArray(nextLocalDateTimeArrayRaw(minArray(),maxArray())); } 
!(topicParts.length > 2) && !topicParts[0].equals(TOPIC_PREFIX)
threadPerHost=1
fireTableDataChanged()
buf.readIntLE() * 0.01
broadcasterFactoryClassName != null
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,false)
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)
MutableLongValue value
moduleProperties.setProperty(FAB_MODULE_NAME,model.getDescription())
FORCE_LOGGING=true
new BooleanPreference("use_high_res_maps",false,false,true)
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0
appearance.getPreference(1)
isDirect=true
input.floatValue() == value.floatValue()
getAll()
swap instanceof FileSwapSpaceSpiMBean
LOG.error("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
recyclerView.indexOfChild(view)
LLVMArgNodeGen.create(1)
matcher.group(11)
new CommandExecutor(context,message,this)
_masterVec == null
comparePartitionOwnership(false,localMember,partition)
assertEquals(0,tabGenerator.getInitialValue())
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true)
uri.equals("/")
assertThat(messages).isNotNull().isNotEmpty().hasSize(51)
pos == -1
Utils.addMenuItem(menu,Menu.NONE,MENU_SYNC,Menu.NONE,R.string.menu_rotate,android.R.drawable.ic_menu_always_landscape_portrait)
loginWindow.showWindow()
DEBUG_FOCUS=false
!getUnwrapDescription(file).showOptionsDialog()
jobDataMap.put(SchedulerEngine.JOB_STATE,jobState)
typeTreeStruct.embedded(false)
s.equals(s2)
i.getTouchIconUrl() != null
getExecutorService()
DEFAULT_MOVE_COST=100
StringBuilder sb=new StringBuilder(); 
StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField._TAGS.field())
cs[0].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
Log.e(TAG,"Stats: Failed to get summary")
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null)
dropIndex("DROP INDEX " + indexName)
StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler))
Integer.valueOf(topStr)
matcher.group(2)
qux.getConstructor()
in.readUTF()
-11
assertEquals("to",14,sr.getToInt())
SameValueContexualRule<ConfirmPassword,Password,String>
response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty())
ruleGroup.getGroupId()
stat.st_mtim.tv_nsec.get()
foldersSize.y > sashSize.y / 2
-balloon.getShadowBorderSize()
new GZIPOutputStream(outputStream,true)
new DateMathParser(formatDateTimeFormatter,TimeUnit.MILLISECONDS)
Double.doubleToLongBits(v)
mListView.getChildAt(index)
replacePsiElementWithLambda(element,false,true)
initBounds(copy[i])
style[j] instanceof ImageSpan
mNetd.setDnsServersForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
logger.warn("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
text.length() != 0
isImmutable(element)
ConverterRegistry.getInstance().convert(rowType,value)
inetAddresses == null
super.getView(position,contextualUndoView.getContentView(),parent)
UIHelper.getContactPicture(contact,null,90,this.getContext())
logger.info(String.format("sending ack %s",args))
v > 65355
services=8
completeBox.setBackgroundResource(R.drawable.btn_check)
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),0)
log.debug("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
new BindFBO(SCENE_OPAQUE_FBO,frameBuffersManager)
i < maxIndex
new ArrayList<>()
t != null
assertEquals(6,tool.check("I can give you more a detailed description").size())
Thread.sleep(500)
super.cancel()
desktopSharingButton.setRolloverImage(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
PluginServices.getTaskService().fetchById(t,Task.NOTES,Task.ID,Task.UUID,Task.TITLE,Task.HISTORY_FETCH_DATE)
JavaType accessingClass
new ApiHelper.RefreshBlogContentTask(this,WordPress.currentBlog).execute(true)
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),e)
isFinishing()
@Override protected MyContentEntryEditor createContentEntryEditor(String contentEntryUrl){   myContentEntryEditor=new MyContentEntryEditor(contentEntryUrl,getEditHandlers());   return myContentEntryEditor; } 
retransformsClasses=true
JSONArray whitelistArray=new JSONArray(mJpSettings.jetpackProtectWhitelist); 
param.args.length > 0
IQProvider provider
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,mustHaveFlags)
log.error("Wrong client secret for service {}",service)
result.indexOf('}')
/**   * @author Vitaliy.Bibaev  */ public interface ProducerStreamCall extends StreamCall, TypeAfterAwareCall { } 
callContactItem.setName(detail.getContactAddress())
callTimeout=1000
IllegalArgumentException e
Messages.getString("BaseStep.SafeMode.Exception.MixingTypes","" + (i + 1),Const.CR,referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
object=event.getOldObject()
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error),error)
Throwable t
new VisorCacheV3()
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity")
factory.getDestination(getEndpointInfo("sna","foo","https://localhost:9002"))
disjPred.isAlwaysFalse()
checkNotNull(uri,"URI should not be null")
BuildParametersBuilder parametersBuilder=new BuildParametersBuilder(); 
new ArrayList<PhysicsJoint>()
XmppStringUtils.parseBareAddress(address)
S3DataSegmentKiller.class
buffer.rewind()
new BroadcastAction(originalMessage)
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,true)
getConcept() != null || getConcept().getDescription() != null
new BadRequestException(null,errors)
format == DecodeFormat.ALWAYS_ARGB_8888
relativePath.charAt(0) == '/'
methods[i].getParameterTypes().length == 0
Ints.min(completedSplits.get(),splits)
Objects.requireNonNull("value should not be null")
Object value
List<PyRequirement>
a.getInt(attr,0)
LOG.error("Unable to read HTTP response content",e)
CommonUtils.randomString(random.nextInt(10))
viewGroup == null
PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME,"DEFAULT",sql,results,columnMetas,sqlException)
timeout=8000
handshakeFuture != null
rv.length == 4
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end)
boardPort.getPrefs().get("iserial")
origin.realComponent().doubleValue() >= other
Color.fromRGB(0x3B511A)
MenuInflater.this.getClass()
new JBList()
logger.warn("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
LOGGER.debug("Could not execute sendAsEmail",ex)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_USERNAME,false)
{26,29}
stream.close()
_buildTemplateWithGradle("panel-app","panel-dependency-management","--dependency-management-enabled","true")
clazz.getConstructor(Long.TYPE,Long.TYPE,String.class,String.class,String.class)
hasExtension("GL_EXT_framebuffer_blit")
Integer.valueOf(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
4 * Constants.KB
expected == long.class
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)
nestedTuplesSchemaHelper(128)
values.putNull(Document.COLUMN_ICON)
String text
nodes.setInt(edgePointer + E_ADDITIONAL,value)
new StrutsSpringObjectFactory(null,null,null,new MockServletContext(),null,"false")
id=15873
state <= 0
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao)
docDeleted == false
serialVersionUID=5345570420394408290L
Vector<>
Component.isNestedTree(component)
ThrowableFunction<T,V>
i <= repeatCount
log.error("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
sNotificationData.currentPostItem >= sNotificationData.totalPostItems
name.substring(i + 1,name.length())
TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
new TypeMissMatchException("'" + toName(object.getClass()) + "."+ field.getName()+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(field.getType()))
distance / MILES_KILOMETRES_RATIO
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED,result.getFingerprint().getFingerId(),result.getFingerprint().getGroupId())
vizConfig.isShowArrows() && dataBridge.isDirected()
log.error(sm.getString("hostConfig.deployDescriptor.error",xml))
services.size() == 0
assertSame(conf,(Configuration)serializeDeserialize(conf))
Arrays.asList("Java","CSharp")
LOG.info("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,true,"cancelNotificationWithTag",pkg)
mDark == dark
this.toString()
drs.setTotalRecords(1)
!file.exists()
canCacheErrors
LOG.error("Couldn't run process with PTY",t,logContent)
connectionProperties.contains("oracle.password")
twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())
allowedIdentifiersCheckDigits[i]
body.endsWith("6")
!isTopLeftVisible
LocalFileSystem.getInstance().findFileByIoFile(new File(path1))
!vis.isChecked()
three.setCoordinateIndex(LEAF)
application.isPresent()
logger.warn("Cannot play URI ({})",e.getMessage())
layoutTreeNodes.size()
propExcludedBiomes.getIntList()
commandExecutor.writeAsync(getName(),RedisCommands.DEL_OBJECTS,getName(),getTimeoutSetName())
factCount=50000
tp.go(fd)
url.addArgument(getAttributeValue(nodeAtts,"name"),getAttributeValue(nodeAtts,"value"))
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
contact.getUser()
ultimateRecyclerView.enableSwipeRefresh(false)
deleteChildrenRecursively(dir)
requestOptionMethod.toString()
Map<TypeMirror,TypeData>
lines[i].length() > cutWidth
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/classObjectMethod.kt")
mock.expectedMessageCount(10)
returnCursor != null
new Field(_name,columns.getString(4),null,_class.getName(),_class.getSimpleName(),_type)
case 11: 
evaluate(123.5,DataTypes.FLOAT)
RedissonMultimap.this.size()
size=5000
(0x0000000000000008L)
j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
mAbsListView.getPositionForView(childView) == position
removed.isEmpty()
executeConnectAsync=false
target.getContext().isIncluded(nodeName)
new FavoriteImageDrawable(a,color)
new ArrayList<FileInputSplit>(numSubtasks)
assertEquals(4,verifier.getErrors().size())
serialVersionUID=844410366
acceptor.getFilterChain()
usage.getInit()
result.size() == 2
RowPosition.forKey(range.start_key,p).compareTo(stop) > 0
config.getInt("history.size",0)
declaration instanceof KtProperty || declaration instanceof KtNamedFunction
ignite.createNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
typTypeStr != null
packed[j]
assertEquals(11,beanCount)
ret.message().get(1)
public void testWithDFS() throws IOException {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
assertEquals(result,Optional.of("abc"))
createQuery(jpaqlString,resultClass)
OrderByComparator<T>
RecentsHorizontalScrollView.super.removeViewInLayout(view)
JSParameter parameter
this.child(i)
super.getLikeProvider(path)
rename.isPrivate()
comboBox == myInputComboBox
writeString(writer,reader.getDate().toDateStr(),fieldName)
m.getPredsSize()
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean")
allocator.getFlowController().prepareAction(input,weights,weightGradView,biasGradView,delta,epsNext)
errorType == ApiHelper.ErrorType.NO_ERROR
Looper.prepare()
format(arguments[i],true)
Native.getStringEncoding(classes[i])
new InterpreterContext("","1","","",null,null,null,null)
channel.write(res)
myTools != null
highlighterStart < end
result.bitmap != null
Slog.e(TAG,"Unable to bind ActivityRecognitionProxy.")
@Override public DataSource createDataSource(){   return new CacheDataSource(cache,upstreamFactory.createDataSource(),cacheReadDataSourceFactory.createDataSource(),cacheWriteDataSinkFactory.createDataSink(),flags,eventListener); } 
new FreeMarkerTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_configuration,_templateContextHelper)
mentionsListView.smoothScrollToPosition(0)
LogDelegate.createLog(name)
buildHistoryNewItem(pageKey)
VERSION_META_ARRAY=0
m.isVersioned()
private final Action reloadAction; 
@NotNull
sceneCam.getUp()
new WorldPoint(2466,3461,0)
Validator.isNull(_uploadMessage)
assertEquals(512f,i,10f)
offset + blockSize <= bytes.length
GUIManager.class
!cached && node.isFiltered()
patched != null
companAssetCategory.getCategoryId()
m2.getName().equals("getAttributes") & !m1.getName().equals(m2.getName())
super.getDataEncodingWithDefault(DEFAULT_HTTP_ENCODING)
invalidate()
parameters1.size()
hazelcastFactory.newHazelcastClient()
VertexAttribute.Color()
buffer.rewind().forward((int)n).getFixString((int)str_len)
g.getTarget().setPackageName("target/generated-sources/jooq")
cause.getMessage().startsWith("Relative Redirect detected on")
receiver.receive(this,activeCorrelationId)
IdeaTestUtil.bombExplodes(2006,Calendar.SEPTEMBER,5,15,0,"maxim.mossienko","next token after tag correctly becomes " + "a tag parameter even if located on next line." + "Leading asterisks should not be counted as well.")
InsertAnalysis analysis=(InsertAnalysis)analyze("insert into deeply_nested (tags) " + "values ([" + "           {\"name\"='cool', \"metadata\"=[{\"id\"=0}, {\"id\"=1}]}, "+ "           {\"name\"='fancy', \"metadata\"=[{\"id\"='2'}, {\"id\"=3}]}"+ "         ])"); 
new UnsupportedTemporalUnitException("This method should not be used for any fields the DateBuilder or TimeBuilder can't handle")
Timber.v("Authentication exception, re-trying with new token",negativeResponseFromOldToken)
new StaticStringValuesReferenceProvider(false,"input","button","image")
endFunction("delete_column_statistics_by_table: ",ret != false)
wrappedBuffer(byteBuffer)
parser.getBoolean(KEY_SEND_TRON_LOG,true)
verifyNothing(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
mCurrentReactContext.runOnJSQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
username.length()
new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString())
new RuntimeIOException(e)
pRegexMatch != null
SystemInfo.isWindows && frame instanceof IdeFrameImpl
@ConditionalOnEnablednHealthIndicator("jms")
answer == 1
r.getUri().toString()
AssetTagsNavigationWebUpgrade.class
this.heading=0.0
GitHandlerUtil.doSynchronously(h,GitBundle.getString("rebasing.title"),h.printableCommandLine())
mapping.set(groupCount + indicatorCount + newAggCallList.size(),j)
runner.run(1,true)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
getEnvironment().updateClasspath(Collections.singletonList(testDir))
AppLog.e(T.EDITOR,message)
((TileGenericPipe)source.getTile()).isPipeConnected(direction)
dict.put(words[0],words[2])
waitForInterrupt(pin,mode,-1)
logger.debug("defineClass pluginClass:{} cl:{}",className,classLoader)
setSort(4)
ContainerUtil.createConcurrentWeakMap()
groupVM.getGroupType() == GroupType.GROUP
entry.getKey().contains("defaultProduct.")
logger.getLoggedInfo().startsWith("This stubbing was never used")
cached.get(walCacheLock)
implemetationMethodDescriptors.build()
getEndpoint().getConfig().getIndexName()
sentences.get(0).entityMentions() != null
setProperty(IMPLEMENTATION,implementation)
log != null
Thread.currentThread().isInterrupted()
Formatter.getInstance().createContinuationIndent()
configuration.dialect()
log.error("Cannot retrieve roles for {} from {} due to {}",authenticatedUser,ab.getType(),e.toString())
Integer requestRequiredAcks
private static class TestException extends Exception {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
connections[i].getRequestId() == request.getRequestId()
message.getFormattedFields()
assertFalse(dr.isFailure())
assertEquals(3,resources.size())
new IncrementalIndexSegment(index)
verify(client).bufferAtomicIncrement((AtomicIncrementRequest)any())
DBException e
stream.myStorage == this
am.getClass().getDeclaredField("mContext")
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_RAW,Format.NO_VALUE,streamInfo.bitRate(),streamInfo.channels,streamInfo.sampleRate,null,null)
TrustManagerFactory.getDefaultAlgorithm()
myNotNullParams.size() > 0
defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary
Thread.sleep(5000)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_TUNE_FUNCTION)
1l << rem
new InputStreamReader(f)
new EntryTitleException()
sequenceFileVersion == SEQUENCE_FILE_VERSION
objects.length() < slots
new MergingUpdateQueue("EditorNotifications update merger",100,true,null)
new RuntimeException("Unable to find className in " + classCommandName)
DEFAULT_PORT=5432
javaBeanSerializer.getFieldValues(json)
addContactButton.setPressedImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).switchOnError(exceptionHandler)
cannedReplies != null
pos == 0
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
parameters == null
new PortletDataContextImpl(layoutSet.getCompanyId(),groupId,parameterMap,new HashSet<String>(),null,zipReader)
role.getChatUser().getAddress().toBareJID()
id=41
previousSelection + 1
Key.makeSystem(_file + DeepWaterModel.CACHE_MARKER)
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().getEpochSecond()
myEditor.visualLineToY(startLineNumber)
sDefaults.putBoolean(KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL,true)
!expr.isGetProp() || !expr.getLastChild().getString().equals("bind")
this.conversation.getContactJid().split("/")
filter.getMinPrice()
JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)
DescriptorUtils.getContainingModule(what)
logger.info("munlocking region")
mService.mDisplayContents.get(i)
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true,null)
new IndexWriter(startDir,autoCommit,new WhitespaceAnalyzer(),true)
new NameValuePair[5]
super.getProperty(property)
orgReplica.applyDeleteOperationOnReplica(1,1,2,"type","id",VersionType.EXTERNAL,u -> { } )
/**   * {@inheritDoc}  */ @Override public AtmosphereResource addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource<?, ?> r");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn("Too many resource. Forcing resume of {} ",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn("failed to resume resource {} ",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } 
from > to
LOG.error("Async Kafka commit failed.",cause)
String.format(mappingFormat,mappedPackageName,packageName,mappedPackageName)
MessagingService.instance().addCallback(handler,message,destination,message.getTimeout())
this.myHashMap.containsKey(o)
getStringList(true,true,true)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).run()
2 << 16
loadWallpaper(forDraw,true)
new IndexResponse(shardId,index.type(),index.id(),randomIntBetween(0,Integer.MAX_VALUE),true)
null == mImage
TimeUnit.SECONDS.toMillis(4)
context.getLong("hdfs.callTimeout",10000L)
getSelectedColor(ctx)
event.getRequestedTransitionTime()
rm.getPrecision(i)
result.seAttributePrefix("")
PlatformDependent.getByte(index)
scannerSupplier.filter(bci -> namedCheckers.contains(bci.canonicalName()))
enableRefreshTime=false
prefs.getBoolean(context.getString(R.string.pref_enable_cell_key),false)
getTestVector().getNumNondefaultElements()
new ClusterConfiguration("whatever",StringLogger.DEV_NULL,"cluster://1","cluster://2")
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle)
getMyApplication().getFavorites().getVisibleFavouritePoints()
mHasPendingMoveOrDelete
ImmutableList.of(interceptors)
UnmodifiableIterable<T>
(Class<? extends TruffleObject>)returnClass
getPreferences().getBoolean("allow_message_correction",true)
r.lock()
field.getType()
gridDim > 512
new LinkedHashSet<>()
routePointImage.setOnClickListener(saveAsLineOnClickListener)
sendResourcesChangedBroadcast(true,false,pkgList,uidArray,null)
new Version(V_1_1_2_ID,true,org.apache.lucene.util.Version.LUCENE_4_7)
mDeviceInfo.isMili1A()
ddmStructureService.fetchStructure(groupId,ddmStructureKey)
LOG.info(getQueueName() + " user=" + userName+ " used="+ queueUsage.getUsed()+ " numContainers="+ numContainers+ " headroom = "+ application.getHeadroom()+ " user-resources="+ user.getUsed())
NoSuchLayoutSetException.class
mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
event.getElement()
ConfigureMapMenu.getSortedMapNamesIds(this,entriesValues,entries)
Debug.w("Texture asset not found, " + pAssetPath,e)
EntityCacheUtil.putResult(AssetModelImpl.ENTITY_CACHE_ENABLED,AssetImpl.class,asset.getPrimaryKey(),asset,false)
stopped.get()
super.onRequestSendAccessibilityEvent(child,event)
HashSet<DeclarationDescriptor>
Validator.isNull(referringPortletResource)
new StringParser()
useAutoinc=true
public Object getManagedObject(){   return transMeta; } 
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).contextStart(withUser)
isEmpty(s)
mBoundServices.isEmpty()
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod.kt")
b.get()
persistencePackage.containsCriteria(INVENTORY_ONLY_CRITERIA)
@Nullable @Override public KtElement getContentElement(){   return findChildByClass(KtTypeReference.class); } 
assertEquals(result,"that/has/one/bang")
each.getCanonicalPath()
partialUri.toString()
composeText.getTextTrimmed()
app.getSettings().AVOID_FERRIES.get()
logger.warn(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
new StringBundler(3)
ColorResources.getColor("buttonGradientLight")
LOG.error(e)
BeanUtil.setProperty(target,parameter,value)
MAX_EMITTER_THREADS=2
DEFAULT_DATA_SIZE_PER_COLUMN=10
this.currentNode
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,true,"cancelAllNotifications",pkg)
new EditSessionBlockChangeDegate(editSession)
new HTable(TABLE)
testWarning(LINE_JOINER.join("goog.require('a.c');","/** @suppress {extraRequire} */","goog.require('a.b')"),REQUIRES_NOT_SORTED,LINE_JOINER.join("goog.require() statements are not sorted. The correct order is:","","/**"," @suppress {extraRequire}"," */","goog.require('a.b');","goog.require('a.c');","",""))
LOG.warn("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer())
threshold > 0
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false)
TruffleOptions.AOT
!chatSession.isDescriptorPersistent() && !(chatSession instanceof ConferenceChatSession)
new PrestoException(INVALID_CAST_ARGUMENT,e)
Boolean.parseBoolean(ldapConfig.get("startEmbeddedLdapServer"))
!jarEntry.isDirectory()
idleTimeoutStamp=-1
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMETERS,true,names)
mNextToPlay < sSoundPaths.get(mQa).size()
Assertions.expectThrows(EmptyStackException.class,() -> stack.peek())
accounts.length > 0
List<String>
new MultipartEntity(getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT)
csUseGlobalSearch.getSelection()
list.elements()
mDetector.onTouchEvent(ev)
context.getVariableResolver().resolve(bsz)
myPreferredFocusedComponent instanceof JButton
verify(people,times(2))
menu == null
ArrayList<PdfComment>
seenServiceNames.contains(serviceName)
replayStart=ISODateTimeFormat.dateTimeParser().parseDateTime(replayTimeIso)
Matrix.scaleM(mMVPMatrix,0,scaleY,scaleX,1)
context.getCompileScope()
request.addHeader(h.getKey(),h.getValue())
period < MINIMAL_POLL_PERIOD
clock.equals(newClock)
parentPackageInTree != null
getRestricted(null,uid,restrictionName,md.getName(),false,true)
p.clearContexts()
protected static String lock=""; 
new TestCaseGeneratorImpl(false)
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data,mock(BindingResult.class))
id=16
new GetExecutionVariableInstancesCmd(executionId,variableNames,false)
new INodeDirectory(dirNode)
myShowWindowAlarm.addRequest(new Runnable(){   public void run(){     if (isRunning()) {       showDialog();       final DialogWrapper popup=myDialog.myPopup;       if (popup != null) {         myFocusTrackback.onShown(popup.getPreferredFocusedComponent());       }     }   } } ,0,getModalityState())
waitFor(condition,MAX_WAIT_MILLIS,SLEEP_MILLIS)
assertEquals(worldVocab.getIndex(),2)
assertThat(connector.getSoLingerTime()).isEqualTo(30)
close.setVisibility(removable ? VISIBLE : GONE)
v2.getString()
new ArrayList<>(modifiers.length())
Network.connectToServer(TestChatServer.NAME,TestChatServer.VERSION,host,TestChatServer.PORT,TestChatServer.PORT + 1)
g.paidAppName.isEmpty()
p.getName().equals(name)
MTU_LENGTH_DEFAULT=1280
proxy.getHostText()
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkWeakWarnings,ignoreExtraHighlighting,checkInfos,getHostFile())
result == null
(_result == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
assertEquals(mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.INSERT)
renderer != null
propEditor != null
findAvailablePort(1000,10000)
discardChannel.receive(100)
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId))
ACRA.log.e(LOG_TAG,"ACRA is disabled for " + context.getPackageName() + " - forwarding uncaught Exception on to default ExceptionHandler")
new ProtoFile("hex.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
word2Vec.setSentenceIter(iterator)
serialVersionUID=136781021
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_ACCESS_SETTINGS,false)
declaringClass.getName()
new Timespan(10,Timespan.TimeUnit.SECOND)
inCoolableTicks=20
frame.setLocation(frameLoc.x,20)
HashBiMap.create(6)
parent == null
setZrtpEncryptionToDescription(mediaType,description,null)
tome != null
myRole1 == ChildRole.LOOP_BODY
@Override public FilteringClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec){   FilteringClassLoader.Spec classLoaderSpec=new FilteringClassLoader.Spec(spec);   if (needJaxpImpl()) {     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,SAXParserFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DocumentBuilderFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DatatypeFactory.class);   }   return new FilteringClassLoader(parent,classLoaderSpec); } 
columnType.equalsIgnoreCase("double")
TestPackage.foo(a,1,"1","!")
-120
Math.min(128,Math.max(-128,priority))
recommendedVersion.equals(seenVersion)
ret.setComplete(response)
myAutomaticStartLevel.isSelected()
Character.isDigit(first)
assertTrue(timestamp[i] != modified)
runUTRunner(testDir.getPath(),testDir.getPath() + "/")
Connector.class
AnnotatedElementUtils.getAnnotationAttributes(method,annotType)
String transformationResult=JsonPath.read(source,JSonPathExpression); 
WikiTestUtil.addPage(TestPropsValues.getUserId(),node.getNodeId(),ServiceTestUtil.randomString(),ServiceTestUtil.randomString(),true,serviceContext)
desiredX >= 0
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon",ioe)
new IndexWriter(indexStore,new StandardAnalyzer(),true)
logger.info("reconnect success")
sendMail(getFromAddress(),addressList,getSuccessSubject(),"URL Restarted: " + sample.getSampleLabel(),getSmtpHost())
process.waitFor(2,TimeUnit.MINUTES)
findAnnotationAttributes(element,annotationType.getName())
new CommandFormatException("Failed to execute operation.",e)
new FileDumper(output.toAbsolutePath().toString(),e1.getClassType(),summaryDumper,collectingDumper.getTypeUsageInformation(),options,illegalIdentifierDump)
this.mGLState.setBlendEnabled(renderOptions.isDithering())
Key.class.getCanonicalName()
LOG.warn(ex.getLocalizedMessage(),ex)
new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
Boolean.parseBoolean((String)disableMultipart)
LAST_VERSION=361
myPieces.ceilingEntry(startOffset)
s.charAt(1)
um.getUsers()
Object rootName
EntityRegistry.registerEntityID(entityClass,entityName,id,background,foreground)
assertFalse(qr.hasFullRank())
Double.parseDouble(args[1])
sysPkg != null
c < ic
new MD5Renderer(model,true)
new Fetcher(conf).fetch(segment,threads)
String... selected
!sDisplayAnswer || getConfigForCurrentCard().getBoolean("replayq")
FilteringClassLoader rootClassLoader=classLoaderFactory.createFilteringClassLoader(classLoader,rootSpec); 
ContactModel::getSmsSn
adminService.createInstance(containerName,sshPort,rmiServerPort,rmiRegistryPort,null,jvmOptsBuilder.toString(),collectionAsString(features),featuresUrls)
i < rlist.size() - 1
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_GIF,showCamera)
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElementsToIgnore),false,refreshViews);   } } )
attribute.getDefinition().getAttributeMarshaller()
public Value emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   AMD64AddressValue addressValue=asAddressValue(address);   RegisterValue raxRes=AMD64.rax.asValue(kind);   emitMove(raxRes,expectedValue);   append(new CompareAndSwapOp(memKind,raxRes,addressValue,raxRes,asAllocatable(newValue)));   assert trueValue.getLIRKind().equals(falseValue.getLIRKind());   Variable result=newVariable(trueValue.getLIRKind());   append(new CondMoveOp(result,Condition.EQ,asAllocatable(trueValue),falseValue));   return result; } 
DiagnosticType.warning("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
Integer.valueOf(optionsHelper.getOptionValue(OPTION_PERIOD))
ACRA.log.e(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,connectionTracker,transactionSPI)
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
JSRefactoringUtil.createTypeElement(myTargetClass.getProject(),type)
dist < bestdist
prefs.getBoolean(PERSIST_SERVICE,false)
assertThat(request.getBody().readUtf8()).isEqualTo("<my-object><message>hello world</message><count>10</count></my-object>")
final String subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo).toString(); 
rewrite != null
ruleGroupInstance.getGroupId()
Pointer.class
statistics.addPutTimeNano(System.nanoTime() - start)
args.length >= 1
new BigInteger(Hex.decode("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))
req.getServletPath()
String uri
HandleConstructor.createConstructor(AccessLevel.PACKAGE,builderType,Collections.<EclipseNode>emptyList(),false,annotationNode,Collections.<Annotation>emptyList())
FridgeFreezerChannelSelector selector=(FridgeFreezerChannelSelector)getValueSelectorFromChannelID(channelID); 
(IntFloatVector)row
return 54; 
r.getEffectiveKey()
miniBatchSize[m]
LoggerFactory.getLogger(ProcessUtils.class).error("Fail to kill " + process)
lower != null
5 * 60 * 1000L
mSeekBar.setProgress(mVolumeBeforeMute)
final StringBuffer buf=new StringBuffer(); 
15 * MINUTES
new ComponentContext(c.getBaseContext())
parser.parse(GroovyElementTypes.CLOSURE,builder)
Integer.valueOf(param.getValue())
/**   * Received bytes count.   */ private final LongAdder rcvdBytesCnt=new LongAdder(); 
GL20.glUniform2(location,v)
createRandomPk()
"DependencyReport".equals(scriptName) || "Upgrade".equals(scriptName)
mapEntry.getValue().isSame(source)
countNewlines(headerFragment) + 1
obj.getName() != null
JournalServiceUpgrade.class
button.setPadding(10,5,10,5)
p > 0
!request.getScheme().startsWith("package")
masm.add(size,scratch1,result,delta,ShiftType.LSL,0)
new RuntimeException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
VERSION=13
TCN_REQUIRED_MINOR * 100
Slog.wtf(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
loginResult != null
mAccessibilityController.isTouchExplorationEnabled()
whitelist.addTags("span","hr","kbd","samp","tt","del","s","strike","u")
log.warn("Null primary key column for '" + object.getName() + "'")
RECENT_SKETCHES_MAX_SIZE=5
propertyValue.getName().replace(prefix + PREFIX_SEPERATOR,"")
(cb.getBuffer().length - cb.getEnd()) == 0
statusMessage != null
pyClass.getClassName()
host.getHostText()
javaProject.getPackageFragmentRoots()
StringUtil.isEmpty(source)
secretQuestionPanel.getSecret()
mApplicationObject == null
pane.setMinimumSize(new Dimension(300,80))
RawUDPInput.class
notificationManager.cancel(NOTIFICATION_ID,id)
name.startsWith("java.") || name.startsWith("javax.xml.") || name.startsWith("org.w3c.dom.")
setTargetBuildConfigurations(buildable,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
buf.readBytes(length)
dz > 1
getChildren().add(tabsContainerHolder)
mViewModel.onNewsCardShown(item)
new float[2]
@Override @NotNull protected TStatement handlePostfixInsert(@NotNull InsertionContext context,@NotNull PrefixExpressionContext expressionContext){   Project project=expressionContext.expression.getProject();   JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);   PsiElementFactory elementFactory=psiFacade.getElementFactory();   PrefixExpressionContext fixedContext=expressionContext.fixExpression();   PsiStatement targetStatement=fixedContext.getContainingStatement();   assert targetStatement != null;   PsiElement expressionCopy=fixedContext.expression.copy();   TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression);   @SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement);   return replaced; } 
databaseLocker == null
new ForAdvice(adviceMethod,new TypeList.Empty(),entryTypes,TranslationMode.ENTRY)
Connection.class
getTestName(true)
new GitCompareBranchesDialog(myProject,info.getTo(),info.getFrom(),info.getInfo(),myGitRepository)
items[32]
Integer.valueOf(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
Validator.isNull(portalVersion)
hongbaoContent == null
foundTargetWs && winAnim.getShown()
Arrays.asList("Bnd-LastModified","Javac-Debug","Javac-Deprecation","Javac-Encoding")
final ImageView buttonMore=(ImageView)view.findViewById(R.id.context_menu_more_button); 
AssetTagsCompilerWebUpgrade.class
commentsListView.smoothScrollToPosition(0)
InputType.convolutional(height,width,channels)
add(food(perc(.1,1)),SWEETCORN,SWEETCORN_7088)
-30.0f
log.warn("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
DataType.list(datatype)
new Dialog(ActivityMain.this,mThemeId)
new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,trimmed)),SaveService.getFileEncoding("UTF-8")),true)
PlatformTestCase.initPlatformLangPrefix()
assertNotNull(statementUnderTest)
this.asImmutable(ModelType.untyped(),modelNodeInternal,null)
new ContextName(name)
!isUDTF && child.getChildCount() > 2
Sets.union(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
? extends TypeDefinition
paras.put(20L,10000L)
return last_user; 
logger.error("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
logger.info("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
new IterableAlgorithmRunner(blockScanner,40000)
Status.constructStatuses(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
OnSubscribeGroupByUntil<T,TKey,TValue,TDuration>
change.isIsReplaced()
this.databaseIdProvider != null
E extends Throwable
DEFAULT_PORT=8080
IOException e
isConnectedToCluster()
new IOException(sm.getString("iib.requestheadertoolarge.error"))
Character.isJavaIdentifierPart(c)
input.getPath()
ocvmat.convertTo(cvmat,CV_8UC(3))
name.indexOf('+') >= 0
food(4)
this.messageService.fluxPostAuthorizeBeanFindById(1L).contextStart(withUser)
Long[]
logger.info("license [{}] - expired",license.uid())
CLOB_LENGTH=99999999
data[1] > 772
new GitVersion(1,7,1,0)
telephony.getDataNetworkTypeForSubscriber(subId)
Internal.getSaltBytes(salt_bucket)
type.equals(number.getClass())
new LeftTuple(new DefaultFactHandle(2,"cheese"))
printServices.size() >= 2
visibility != View.VISIBLE
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
HashMap<Byte,ResTypeSpec>
GridCacheProxyImpl metaCache=getFieldValue(fs,"meta","metaCache"); 
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
latch.await(100,TimeUnit.SECONDS)
LOG.error("Could not load JDK7 class with a JDK7+ JVM, falling back to no-op implementation.",e)
t.type.tsym.getQualifiedName()
0.499f * mainUnitInMeters
this.referenceId == referenceId
stationItemName != null
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)
/**   * set the identifier of this item  * @param identifier  * @return  */ public T withIdentifier(long identifier){   this.mIdentifier=identifier;   return (T)this; } 
new IllegalStateException("UTF-8 not supported!",e)
parser.hasNext(3)
Flyway.configure(classLoader).configure(createFlywayConfig(envVars))
changeAffiliationByOwner(jids,"owner")
solo.clickOnMenuItem(solo.getString(R.string.settings_label))
arguments[0]
contentType.getCharSet()
System.identityHashCode(this)
SCRIM_BEHIND_ALPHA_KEYGUARD=0.55f
maxActiveSessions == null
JettyWebSocketServer.LISTEN_PORT.getName()
createFrame(getRootNode().getFrameDescriptor(),args)
cell.recon != null
mock.message(0).outBody(String.class)
myLeftIndex == 1
Exception ex
new Long(3)
DEFAULT_VERIFY_ENABLE=false
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
unsafeBuffers.contains(buffer,true)
wrapper.getServlet() != null
LOG.debug("Error while deserializing payload",e)
packet.getTo().split("/")
benchmark.expectAround("Throughput to scroll FILE_SOURCES",throughputPerSecond,120,0.04)
TreePath path
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
Timber.e(e,"Argument %s is incorrect",playColorString,e.getMessage())
model.replaceWhiteSpace(textRange,newWhiteSpace)
currentOffset >= documentText.length()
!isConsole && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
permissions+=1
attacher.addRefreshableView(view,null,refreshListener,false)
getObjectLayout().getArrayBaseOffset(elementKind)
value.getType().getCanonicalName()
myDebugger.disconnect()
request.contains(HttpParameters.SESSIONS_PART) || request.contains(HttpParameters.PROCESSES_PART) || request.contains(HttpParameters.JNDI_PART)|| request.contains(HttpParameters.CONNECTIONS_PART)
latbottom >= o.getLocation().getLatitude()
TypeParameterDescriptorImpl.createWithDefaultBound(receiverFunction,Collections.<AnnotationDescriptor>emptyList(),true,Variance.IN_VARIANCE,Name.identifier("T"),0)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   return cache.drPauseState(); } 
continueUpdateBounds(RECENTS_STACK_ID)
new SortedList<>(entriesViewModel)
DEFAULT_LOCK_TIMEOUT=180000
owner.getEnergyUsage()
i > generations.length
log.info("Performing lookup: %s --> %s",nodeIds,retVal)
NoClassDefFoundError onlyIfJUnitIsNotAvailable
/**   * @param arg  * @return  */ Target convert(Source arg); 
new LaserRow(spriteTubeMiddle,0,8,8,8)
CollectionUtils.newList(GrailsResourceUtils.appendPiecesForUri(SLASHED_VIEWS_DIR_PATH,uri),GrailsResourceUtils.appendPiecesForUri(PATH_TO_WEB_INF_VIEWS,uri),uri,GrailsResourceUtils.CLASSPATH_URL_PREFIX + uri)
PART_COUNT=800
LOG.info(() -> createDiscoveredTestEnginesMessage(testEngines))
UnifiedDiffWriter.write(patches,writer,"\n",patchTransitExtensions)
ConcurrentHashMap<Url,Channel>
DKV.get(vec._key) == null
mDrawer != null
JBIterable.of(getSelectedValuesList())
processor.open(w2,request)
currentTx.preConcatenate(matrixTx)
realUserTagEventDel.getObjectId()
perfRule.assertDurationAround(Long.valueOf(prof.getProperty("Xoo Highlighting Sensor")),9700L)
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.BUILDING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNodes)
SOURCE_INTERETRADIO(26)
i > 0
c.getDomain() == null
HEADER.getBytes()
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),12,FontStyle.Plain,true)
LOG.error("Value selected for the metric should be a number: " + context)
pk.getColumnName()
new IOException(e.getMessage())
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(element)).description(message)
new InvalidPluginRequest("Found more than one plugin for plugin id " + pluginId)
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
issuer.equals(accessTokenV.getTokenIssuer())
m[M03]
_log.error(ioe.getMessage())
verify(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
U extends Identifier
StringBuffer numberedSrcTextBuffer=new StringBuffer(); 
Object userObject
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getParentGroupId(),assetTagName)
mImageManager.load(holder.mImgAvatarOrBlavatar,imageUrl,null,ScaleType.CENTER)
component.setMaxThreads(11)
size > _STORAGE_SIZE_DENOMINATOR
new DatePickerDialog(getActivity(),getConstructorListener(),y,m,d)
mDefaultOverlays.contains(overlayPackage.packageName)
gradleProject.getIdentifier()
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()
new UpgradePermission()
new MaterialDialog.Builder(getActivity()).title(R.string.reschedule_card_dialog_title).positiveText(getResources().getString(R.string.dialog_ok)).negativeText(R.string.cancel).inputType(InputType.TYPE_CLASS_NUMBER).inputRange(1,9999)
mapActivity.getMapActions()
outState.putBoolean(KEY_SHOULD_RESOLVE,mIsResolving)
JiveGlobals.setXMLProperty(ONE_TIME_PROPERTY,"")
Duration.seconds(1)
annotationProcessors.isEmpty() && plugins.isEmpty()
mDownView != null
trade.getPrice()
mService.removeNetwork(netId)
icer_cc.toClass()
rnaPath.endsWith("rotation")
agent.getHeader() != HttpHeader.USER_AGENT
StringBuilder sb=new StringBuilder("RuleFlowProcessInstance"); 
paymentGatewayApi.processNotification("TOTO",PLUGIN_NAME,NULL_PLUGIN_NAMES,NULL_PLUGIN_PROPERTIES,requestOptions)
setIcon(view,iconView,tree)
fm2.getKnownNodes().size() > 0
zkController.getZkStateReader().getReplicaProps(collection,shardId,cd.getCloudDescriptor().getCoreNodeName(),leaderProps.getStr(ZkStateReader.CORE_NAME_PROP))
this.specificIcon && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL
lowJson.getDouble(i)
IP_FILTER_ENABLED_HTTP_SETTING.getDefault(s)
networkOperator != null
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title","_id","_version","_score")
lambdas.size() >= ordinal
nextNonWakeup != 0
new Tailer(new File(s),new LogTailerListener(),1000,false)
hasFocus()
mapTypeString=R.string.map_transparency
@NotNull @Override public abstract ClassifierDescriptor getDeclarationDescriptor(); 
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=10
getPaymentMethodById(account.getPaymentMethodId(),false,context)
PyUtil.addListNode(this,param,beforeWhat,true,params.length == 0)
list.size() > 1
mService.disconnect(mContext.getOpPackageName())
runPartialSorter(sorter,NUM_RECORDS,28)
guiResource.getImageSlaveMedium()
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
NETHER_WATER(115)
mGridView.getNumColumns() > maxColumnSize
assertBusy(() -> {   final Snapshot snapshot=new Snapshot("test-repo",snapshotId);   List<IndexShardSnapshotStatus.Stage> stages=snapshotShardsService.currentSnapshotShards(snapshot).values().stream().map(status -> status.asCopy().getStage()).collect(Collectors.toList());   assertThat(stages,hasSize(shards));   assertThat(stages,everyItem(equalTo(IndexShardSnapshotStatus.Stage.DONE))); } )
CLOSURE_DO_CALL_METHOD.equals(methodName)
cs.newDrawable(context.getResources())
Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
body.getChildCount() > 0
d.isObjectVisibleImpl(tag,val,zoom,type,nightMode)
query.contains("about:")
f.close(false)
new LLVMInsertFloatValueNode(resultAggregate,sourceAggregate,size,offset,(LLVMFloatNode)valueToInsert)
Assert.assertEquals(2,definitions.size())
myIgnoreInstanceRefsInClosure=true
foundExistingGitUrl=true
SDK_INT >= JELLY_BEAN
assertEquals(1,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
getUserFromDashboard(ownerDashboard,responsibleId)
getEmptyCell()
ColorResources.getColor("primaryControlColor")
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",true))
baseAt(i).getFile().getPath()
/**   */ private final LongAdder mapSize=new LongAdder(); 
{26,31}
Flux.from(inputStream).flatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
state > singleByteReads
Double.parseDouble(data[metadata.indexOf(name)])
List<String>
y == 29
note.getTag().getId() != 0
!mStopped
assertEquals(actualPattern.pattern(),someName)
Object result=order; 
mBluetoothHeadset.startScoUsingVirtualVoiceCall(mBluetoothHeadsetDevice)
new MailMessage(from,to,subject,body,true)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(id)
return 6000; 
MUCUser.from(packet)
Collection<Street>
fluidOil.getBlockID()
Long.valueOf(val)
service.getAdnUriForPhoneAccount(accountHandle)
reader.nextInt()
@OutputDirectory
greaterThanOrEqualTo(300L)
LOG.info("Failed to read expected encryption handshake from client " + "at " + peer.getRemoteAddressString() + ". Perhaps the client "+ "is running an older version of Hadoop which does not support "+ "encryption")
widthMode != MeasureSpec.EXACTLY
new StringBuffer()
ret.size()
info.getName()
CallParticipantRecord newRec=new CallParticipantRecord(callParticipant.getAddress(),new Date(),null); 
assertEquals(12,definitions.size())
mContext.checkCallingOrSelfPermission(PERMISSION)
LOGGER.trace(exception.apply().toString())
size * 1.75f
/**   * Create the  {@link RxBleClientMock} instance using the configured values.  */ public RxBleDeviceMock build(){   if (this.rssi == -1)   throw new IllegalStateException("Rssi is required. DeviceBuilder#rssi should be called.");   if (this.deviceMacAddress == null)   throw new IllegalStateException("DeviceMacAddress required." + " DeviceBuilder#deviceMacAddress should be called.");   if (this.scanRecord == null)   throw new IllegalStateException("ScanRecord required. DeviceBuilder#scanRecord should be called.");   RxBleDeviceMock rxBleDeviceMock=new RxBleDeviceMock(deviceName,deviceMacAddress,scanRecord,rssi,rxBleDeviceServices,characteristicNotificationSources);   for (  BluetoothGattService service : rxBleDeviceServices.getBluetoothGattServices()) {     rxBleDeviceMock.addAdvertisedUUID(service.getUuid());   }   return rxBleDeviceMock; } 
index <= 5
new IllegalStateException()
InputType.convolutional(from - to + 1,conv.getWidth(),conv.getHeight())
MIN_DIMENSION_TO_RECUR - (int)maxX
mNwService.getInterfaceConfig(mInterfaceName)
ddmTemplateModel.setResourceClassNameId(structureId)
new SimpleType(subclass,_bindings,_superClass,_superInterfaces,_valueHandler,_typeHandler,_asStatic)
new OkHttpClient.Builder().connectTimeout(10,TimeUnit.SECONDS)
vsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
property != null
new NetworkRequestHandler.ResponseException(0,504)
myClass != null
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))).append(targetNodes)
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,outputFieldTypes[i].getDisplayName(),setOperationName,descFieldType.getDisplayName())
new Schema(3,"de.greenrobot.daoexample")
countDownLatch.await(5,java.util.concurrent.TimeUnit.SECONDS)
_validation_metrics != null
new ModelNode().set(1L)
REPLACE_IS_SAME(7)
mAudioQuality=AUDIO_QUALITY_AMR_WB
SiteMembershipsWebUpgrade.class
cg.getUpdater().update(cg,gradient[0],1,batchSize)
Math.max(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
TokenSet.create(ABSTRACT_KEYWORD,ASSERT_KEYWORD,BOOLEAN_KEYWORD,BREAK_KEYWORD,BYTE_KEYWORD,CASE_KEYWORD,CATCH_KEYWORD,CHAR_KEYWORD,CLASS_KEYWORD,CONST_KEYWORD,CONTINUE_KEYWORD,DEFAULT_KEYWORD,DO_KEYWORD,DOUBLE_KEYWORD,ELSE_KEYWORD,EXTENDS_KEYWORD,FINAL_KEYWORD,FINALLY_KEYWORD,FLOAT_KEYWORD,FOR_KEYWORD,GOTO_KEYWORD,IF_KEYWORD,IMPLEMENTS_KEYWORD,IMPORT_KEYWORD,INSTANCEOF_KEYWORD,INT_KEYWORD,INTERFACE_KEYWORD,LONG_KEYWORD,NATIVE_KEYWORD,NEW_KEYWORD,PACKAGE_KEYWORD,PRIVATE_KEYWORD,PUBLIC_KEYWORD,SHORT_KEYWORD,SUPER_KEYWORD,SWITCH_KEYWORD,STRICTFP_KEYWORD,SYNCHRONIZED_KEYWORD,THIS_KEYWORD,THROW_KEYWORD,PROTECTED_KEYWORD,TRANSIENT_KEYWORD,RETURN_KEYWORD,VOID_KEYWORD,STATIC_KEYWORD,WHILE_KEYWORD,TRY_KEYWORD,VOLATILE_KEYWORD,THROWS_KEYWORD,ENUM_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,NULL_KEYWORD)
readStayAwakeConditions()
new ListWidget(RuntimeEnvironment.application,formEntryPrompt,false)
headerHandled=false
new ClassPathResource(location)
StringBuffer padding=new StringBuffer("\t"); 
Double rate=(Double)map.get(MediaFormat.KEY_FRAME_RATE); 
any()
instance.criterion.sql.replaceAll("?",instance.criterion.entryValues[instance.selectedIndex])
new EditorLanguage("mode/rdoc",false)
new Span(Style.of(Style.Color.GREY),"> IDLE")
JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath)
DruidDataSourceUtils.isRemoveAbandoned(datasource)
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallbackExt mBluetoothGattCallback=new IBluetoothGattCallbackExt.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
mapper.getTypeFactory().uncheckedSimpleType(UpdateContainerCmdImpl.class)
new RuntimeException("Unable to find className and commandName in classCommandName: " + classCommandName)
AndroidApkBuilder.execute(item.mySdkPath,resPackagePath,item.getClassesDexPath(),item.getSourceRoots(),externalLibPaths,item.getNativeLibsFolders(),finalPath,unsigned)
callVideoButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisibile)
new ByteSizeValue(1,ByteSizeUnit.BYTES)
settings.username != null
KNOWN_TO_FAIL.add("comments/generic_methods.unit:46  var")
UIUtil.createImage(rect.width,rect.height,BufferedImage.TYPE_INT_RGB)
case 12: 
resourceUrl.getPath()
new IllegalStateException()
assertQEx("unknown sort field",req("id_i:1000; abcde12345 asc"),1)
registered.add(objectName)
mockBigtableSource.getRange()
part1.equalsIgnoreCase("error")
return toSelect; 
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper)
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
Assert.assertSame(_ehcache,_ehcachePortalCache.ehcache)
LocalFileSystem.getInstance().findFileByIoFile(hardLinkFile)
in.read(serCondition)
hotDrinkDelay=500
config.getStartTime()
200 * 1024L * 1024L
b.setMessage(getString(R.string.local_osm_changes_upload_all_confirm))
expression.getThen()
mSelectPhotoView.getSelectFiles().size() > 0
i=0
this.setOpaque(false)
!Mirrors.isInstance(types,typeElement,PACKAGE_ANDROID_OS + ".Parcelable") || Mirrors.overridesMethod(types,typeElement,"writeToParcel")
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help)
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst)
new JarFile(mArchiveSourcePath)
super.getHibernateTemplate().executeFind(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     for (Iterator i=expressions.iterator(); i.hasNext(); ) {       GrailsMethodExpression current=(GrailsMethodExpression)i.next();       crit.add(current.getCriterion());     }     List results=crit.list();     if (results.size() > 0) {       return results.get(0);     }  else {       return null;     }   } } )
expectQueryToFail("UserWith:Colon",ldapUserPassword,INVALID_CREDENTIALS_ERROR)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",8)
flow.getStatus()
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00020000
encoding != null || !DEFAULT_ENCODING_NAMES.contains(encoding.name())
assertThat(targetConnectionCount).isGreaterThanOrEqualTo(goodServerStats.getTotalRequestsCount())
markerFile.delete()
_buildTemplateWithGradle("portlet-configuration-icon","icon-dependency-management","--dependency-management-enabled","true")
SyncAccountService.addSyncAccount(filePathName,"test@liferay.com","test","http://localhost:8080/api/jsonws")
CommonUtils.sleepMs(5)
items[23]
telecomManager != null
indexY < pointsIndex
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
Math.max(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
opti <= args.length
XPathUtil.makeDocument(new ByteArrayInputStream(responseData),isValidating(),isWhitespace(),isNamespace(),isTolerant(),isQuiet(),showWarnings(),reportErrors())
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2)
Simple.of(Tuple.class)
OutputScrapingExecutionFailure.hasFailure(error)
(color & 0x00FFFFFF) & (alpha << 24)
this.bus != null
canvas.drawText(shortText)
psiElement instanceof GoFunctionDeclaration
mLayoutAnimator.shouldAnimateLayout(viewToRemove) && arrayContains(tagsToDelete,viewToRemove.getId())
SiteAdminWebUpgrade.class
super.getDefaultContexts()
offset(100.0)
EntryProcessor<Integer,Long,Object>
pipe != null
StaticOuterContextServiceFetcher.this
coreId < nReplicas
assertEquals(4,loader.getPlugins().size())
myFixture.assertPreferredCompletionItems(0,"AXX.one","AXX.two","main","const","false","new","null","true","AbstractClassInstantiationError","ArgumentError","AssertionError","AXB","AXB.four","AXB.three","AXX","BidirectionalIterator")
new OptionValue<>(3)
Thread.sleep(5000)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false)
new String[4]
URISyntaxException ignored
caches.values()
logger.warn("{} {}",errorCode,message)
methodExists("of",typeNode)
dw != mBackgroundHeight
executor.submit(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
bucket=2
eipCandidates.iterator()
LOG.isDebugEnabled() && instruction instanceof ControlTransferInstruction && after.length == 0
StringBuffer stringBuilder=new StringBuffer(); 
patientExitObs != null
getPosition(identifier)
paths.isEmpty()
i < 3
mLteSignalStrength > 63
behindFraction * mScrimBehindAlphaKeyguard
showViewUpdateCollection(request,model,pathVars,id,collectionField,null,collectionItemId,"viewCollectionItem")
accountHandle.getComponentName().toString()
new InfoData(InfoData.NOT_AWAY,null,MY_CAPS,null)
format.getDisplayName()
@GUIMenuSortOrder(1)
Loader.loadClass(__logClass)
part.size()
mSlideableView != child
/**   * SSH port.  */ private String port="2000"; 
res.startsWith("android") || res.startsWith("Vtok")
mFilesAll.indexOf(file)
assertInCompletionList("<caret>UIView",false,"animationDidStart","animationDidStop:finished:")
ArrayUtil.contains(functionName,PyNames.AITER,PyNames.ANEXT,PyNames.AENTER,PyNames.AEXIT)
vals.length != _sparseLen
StringUtils.isEmpty(initExpr) ? 0 : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
this.input.clone()
filtersId != null
connectionStreams.getInputStream().read(buffer)
sslService.sslConfiguration(SSLService.getHttpTransportSSLSettings(settings),Settings.EMPTY)
DeprecationLogger.nagUser("<someIdeTask>.beforeConfigured is deprecated! Replaced by beforeMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
FSImageFormatProtobuf.class
c < '9'
removeQuote(timestring.trim())
target.directory("zk" + id + "data")
parametersList.getParamsGroup(GROUP_EXE_OPTIONS)
new Backgrounding()
diff <= 750
mService.setUidPolicy(UID_A,POLICY_NONE)
v.layout(viewTop,viewLeft,viewLeft + viewWidth,viewTop + viewHeight)
assertTrue(killRes)
addResult.getNumRowsInSegment() > tuningConfig.getMaxRowsPerSegment()
typeName.equalsIgnoreCase("Integer")
kylinConfig.setProperty(COPROCESSOR_LOCAL_JAR,path)
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE)
managedType.getConcreteClass()
contains="directDispatch"
authManager.setupCredentials(client,url,credentialsProvider,localHost)
new IndexWriter(directory,analyzer,create)
"Requeuing shutdown because rootScanned: " + rootScanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
RECORD_LENGTH=10
conf.getFeatureMapSize()
content().copy()
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_YES)
equalTo("Eclipse")
getLayoutRec(getFixedPosition(data),position,length,getFixedFitLength(data))
assertNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
Validate.notNull(autoScalingGroups)
idleConnectionTimeout - nettyResponseFuture.getLastTouch()
new StoreFileMetaData(file.getName(),file.length(),file.lastModified(),checksums.get(file.getName()))
CodeStyleSettings.class.getDeclaredField(name)
new FormAttachment(wReplace,-margin)
final Exception ex
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
DEBUG_ALL_ACTIVITIES || false
mDuration >= 0
status.isDir()
localSettings.getMaxConcurrentStreams() > activeRemoteStreamCount.incrementAndGet()
Assert.assertNull(ReportUtils.calculateFuel(startPosition,endPosition))
readBuffer.remaining() > 0
executor.submit(new EmailTask(messages))
timeoutMs < 500
localCache.put(name,NULL_ENTRY)
card.init(i)
pgl.loadFragmentShader(vertFilename)
prots != Protections.SIGN_ENCRYPT
Integer.valueOf(st.nextToken())
@Override public Value emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new AMD64ByteSwapOp(result,input));   return result; } 
JoglDisplay.class
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
buildVolumeSettingsPendingIntent(vol)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-time elements.  */ public ArrayValue nextLocalTimeArray(){   LocalTime[] array=nextLocalTimeArrayRaw(minArray(),maxArray());   return Values.localTimeArray(array); } 
writeBufferBlocking(true)
size == 1
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) != PackageManager.SIGNATURE_MATCH
sourceNodeData != null
createHalf(buffer.length(),init,workspace)
Internal.prefixKeyWithSalt(key_a)
resolveExecutableType(child,targetType)
(inGC - timeInGC) * 100
new SimpleSourceInclusionScanner(testExcludes,testExcludes)
trace.debug(e,"removing server because of exception")
/**   * Current size of all enqueued blocks in bytes.   */ private final LongAdder curSize=new LongAdder(); 
searchBack.postDelayed(new Runnable(){   @Override public void run(){     searchBack.setImageDrawable(ContextCompat.getDrawable(SearchActivity.this,R.drawable.ic_arrow_back_padded));   } } ,600)
inputItem.getDescription()
@Message(id=14151,value="Could not find view %s for EJB %s") RuntimeException viewNotFound(String viewClass,String ejbName); 
new GroupTest(true)
new Builder().setDuration(5000).setTextColor(android.R.color.holo_red_light)
observable.timeout(5,SECONDS).toList().toBlockingObservable()
factory.getProxy()
bottomost.getLanguage().getFormattingModelBuilder() != null
teleport(new Target(loc),chargeFor)
propertyDescriptor.setType(inType,type,Collections.<TypeParameterDescriptor>emptyList(),ReceiverDescriptor.NO_RECEIVER)
log.warn(e,"Graceful shutdown of task[%s] aborted with exception.")
new InstantPeriodicWorkerTask(errorRunnable,exec,composit)
orderedSet((int)i & mask,item)
TextAttributes.merge(textAttributes,ConsoleHighlighter.OUT.getDefaultAttributes())
min.getX() < box.max.getX()
connection.setSchema(name)
resultCode == ResultCodes.OK
new INodeDirectory(s)
new TestCaseGeneratorImpl(true)
private final Clock clock; 
context.getLocation(node)
sUseRenderThread=true
compare(leftValue,rightValue) < 0
Log_OC.wtf(TAG,"onAccountChanged was called with NULL account associated!")
compare(other,method) > 0
Double.valueOf(param.getValue())
targetPoint.y + shift
EndpointOption that=(EndpointOption)o; 
colon != null
mSettingsButton != null
RANGES.contains(builder.getTokenType())
final XmlElementDescriptorImpl xmlElementDescriptor=createElementDescriptor(tag); 
new JSoupExtractor()
query.getInt(7)
FileUtils.setPermissions(mPackageListFilename,0660,SYSTEM_UID,PACKAGE_INFO_GID)
factory.getSemaphore(packet.name)
Localization.lang("Check integrity")
log.error("Error opening session file " + file.getAbsolutePath())
Build.VERSION.SDK_INT < 23
assertEquals(15,tokens.size())
VibrationEffect.get(VibrationEffect.EFFECT_TICK)
BUKKIT_VERSION=2415
assertEquals(0,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
annotationHelper.printError(element,"%s annotated element should have only one constructor")
Assert.assertEquals(threshErr2,error,1e-15)
mQSPanel.getHost() != null
Futures.transform(inputsUploadedFuture,ignored -> {   uploadingInputsScope.close();   return actionInfo.withRequiredData(ImmutableMap.of()); } )
Collections.emptyList()
new RastriginFunctionModel(100,conf)
client != null & client.autofillClientIsFillUiShowing()
public TokenStream create(Reader input){   return new LetterTokenizer(input); } 
config.highlightOwnName()
StringBuffer xml=new StringBuffer(); 
new ModelMetricsMultinomial.MetricBuilderMultinomial(domain)
new LinearLayoutManager(getActivity())
key.equals(PropertyKey.ZOOKEEPER_ENABLED)
markerArray.get(1)
newExecutionInput().requestString(parameters.getQuery())
entry.getValue().getManagementInterfaceMinorVersion()
new URLClassLoader(classpath.toArray(new URL[classpath.size()]))
workspace.runBuckCommand("test","//:foo")
HashMap<String,Integer>
view.getTag()
request.getSoFar() == 0
new ClassPathResource(PROJECT_META_FILE)
position < mData.size()
mScanHelper.getCycledScanner() == null
Assert.assertEquals(select.size(),1)
ensureNoInitializingShards()
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).mapError(this::mapError)
"Failed to create OutgoingJingleSession.\n" + fullCalleeURI + " does not support jingle"
computeGraph(_effective_n_classes,treeToPrint)
new Interval(startTime,endTime)
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo-java.lang.Class...-","foo-java.lang.Class<?>...-")
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),true,Variance.IN_VARIANCE,Name.identifier("P" + j),j)
(target.getModifiers() & Modifier.STATIC) != 0
createFromResourceStream(res,value,is,srcName)
url.toDecodedString()
_addTestVariant("small.hd","uuid1",99,200)
pkgs.get(i)
data.contains("siamese")
mService.enableNetwork(netId,attemptConnect)
(shape != LINES) && (shape != TRIANGLES)
supportsNewLinesInSQL()
war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),"web.xml")
null == file
tea.save(false)
CACHE_MANAGER.addCache(storageCache)
localMaster == null
response.getResponseBody().isEmpty()
handleException(exception)
LOGGER.debug(msg.apply())
!cmdKey.equals("-help") && !cmdKey.equals("-failover")
_writeNestedList(nestedListFieldFunction,list,_jsonObjectBuilder,null)
calendar.getTimeZone().getDSTSavings()
auxString.substring(0,auxString2.lastIndexOf(","))
fmd.getFieldType().equals(SupportedFieldType.EXPLICIT_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.BROADLEAF_ENUMERATION)
targetWidth <= 0
GLMTest.residualDevianceTest(model) + 1e-2
args.length != 3
frameHandler.getClass() == FrameAggregator.class
ts > timeout
59L + 118L
-2028634701
IgniteCheckedException e
parameter.getSimpleName()
FileTemplateUtil.mergeTemplate(attributes,airDescriptorContentTemplate)
learningRate=0.01
((RoutableChannelHandler)nameRoutes).getAddress().equals(node)
mConnector.execute("resolver","clearifaceforuidrange",uid_start,uid_end)
Validator.isNull(indexType)
ArrayUtils.equals(MiBand2Service.RESPONSE_ACTIVITY_DATA_START_DATE_SUCCESS,value,0,2)
SharingEntryActionKey::getBitwiseVaue
name.getElementType() == JSTokenTypes.IDENTIFIER
new ImmutableInstruction3rc(deodexedOpcode,instruction.getRegisterCount(),instruction.getStartRegister(),resolvedMethod)
assertEquals(0,counter.get())
editor.offsetToVisualPosition(mySelectionStarts[i])
Value emitBitCount(Value operand); 
logger.error(message)
new ModelNode().set(1)
assertEquals(expectedPlan,actualPlan)
TEST_TIMEOUT_MS=200
TRACE_ROUTING=true
objectMapper.readerFor(DataSegment.class)
JsonUt8Writer.string(buffer,strings[i])
closeForbidden(ok)
Math.ceil((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
DiagnosticFactory0.create(WARNING)
_parms._distribution == Distribution.Family.bernoulli
ThingFactory.class
subtypeProps.isEmpty()
me.urls.size() == 0
_addTestVariant("small.hd","uuid1",200,99)
c.getLiquid().amount == 0
dlFileEntryFinder.countByG_U_F_M(groupId,0,folderIds,mimeTypes,new QueryDefinition(WorkflowConstants.STATUS_ANY))
GroupFinderUtil.findByC_C_PG_N_D(TestPropsValues.getCompanyId(),classNameIds,GroupConstants.ANY_PARENT_GROUP_ID,StringPool.NOT_EQUAL,new String[]{null},new String[]{null},new String[]{null},groupParams,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
qualifier != null
System.currentTimeMillis() - lastTimeGPSLocationFixed
underTest.newRequest()
request.getRequestURI()
KotlinToJVMBytecodeCompiler.INSTANCE.analyzeAndGenerate(environment,configuration)
LOG.warn("Promotion of block " + blockId + " failed.",ioe)
mBarChart.addTiming(section,4,serializeResult.runDuration / 1000f)
StreamingWindowedElement.class
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
PRAYER_ENHANCE("prayerenhance","Prayer enhance",290,ChronoUnit.SECONDS)
new ResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
VERSION=6
mWasActivatedOnDown || !mNeedsDimming
rootPortletId.equals(PortletKeys.WIKI_DISPLAY)
mapper.getTypeFactory().uncheckedSimpleType(InspectContainerResponse.class)
commentText.substring(commentText.length() - 2,commentText.length())
FileDownloadUtils.formatString("range[%d-%d)",startOffset,endOffset)
evaluate("value = read_config('foo', 'bar', 'baz')").lookup("value")
colors[0]
Lifecycle.BEFORE_DESTROY_EVENT.endsWith(type)
Log.d(tag,msg,tr)
DLWebUpgrade.class
ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,AppleBinaryDescription.class,AppleBundleDescription.class,AppleTestDescription.class,HalideLibraryDescription.class)
Arrays.asList(HTTPConstants.GET,HTTPConstants.HEAD,HTTPConstants.OPTIONS,HTTPConstants.DELETE,HTTPConstants.TRACE)
!beanPrefix.isEmpty() | !beanSuffix.isEmpty() | beanPackageName != null
consumeTokenFast(b,IDENTIFIER)
waitForOptimization(function,120000)
testClass.getName()
getTestGridName(nodeCount() + servers + i)
/**   * @return When this column is a {@link ForeignKey} and a Model, returning true with save the modelbefore adding the fields to save as a foreign key. If false, we expect the field to not change and must save the model manually outside of the ModelAdapter. This also applies to ModelContainer objects as foreign key fields.  */ boolean saveForeignKeyModel() default true; 
NIO_GROUP.shutdownGracefully()
parser.hasNext(4)
servletClass != null && filterClass != null
initSize / 100
@NotNull DfaMemoryStateImpl createClosureState(); 
assertThat(xml).isEqualTo(expectedContent)
allocator.getFlowController().prepareAction(input,epsilon,activations,nextEpsilon)
new UncheckedIOException(e.getMessage(),e)
Integer.parseInt(sid[0])
new RelationIndexStatusReport(true,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
FileUtils.deleteDirectory(root)
new Node.JspAttribute(tai,qName,uri,localName,value,false,el,dynamic)
Optional.of(certificatesFile)
ltype == Analyzer.self.builtins.BaseStr || rtype == Analyzer.self.builtins.BaseStr
innerCache.put(reader,value)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (a == Alignment.ALIGN_RIGHT)
timeout=60_000L
c.getLiquid().amount < c.getCapacity()
endpoint.toString()
public S where(Expr.EBoolean... o){   query.where(o);   return self; } 
assertEquals(4,outs.size())
pgl.initTexture(glTarget,width,height,PGL.GL_RGBA,PGL.GL_UNSIGNED_BYTE)
DEBUG_OBB=true
new SafariWebDriverImpl(projectDir,portalURL)
type == Object.class
new StringBuilder(input.length())
numDocs <= docCount
if (VDBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
? super Void
ACC_BRIDGE | ACC_STATIC
cctx != null
Map<Integer,UdpMessageTypeEnum>
toByteBuffer()
PsiReplacementUtil.replaceExpression(expression,newMethodCallExpression.toString(),false)
SemVerMatcher.parseFromText(version)
PortalUtil.getSiteDefaultLocale(groupId)
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_AS,false)
recommendArrayListByUser.size() > 0
startMediaTimeUs=START_NOT_SET
css.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
flipX=1
type == BSON.B_GENERAL
buf.openElement("url")
mergeWithParentCategory && !oldCategoryId.equals(parentCategoryId)
LOG.error("Node " + path + " already exists and this is not a "+ "retry")
public BaseExecSpec setIgnoreExitValue(boolean ignoreExitValue){   this.ignoreExitValue=ignoreExitValue;   return this; } 
runtime.lookupType(returnType,(HotSpotResolvedObjectType)accessingClass,true)
instanceOfA.profile().getNullSeen() != TriState.FALSE
context.containsMetaEmbeddable(fqcn)
setServiceForegroundInnerLocked(r,userId,notification,flags)
that.getPath() == null
addon.markDirty()
out.append(e.getMessage())
lang.length() > 2
ctx.nextOutboundMessageBuffer()
createMessageConsumer(session,destinationName,null,false,null,true)
DeletionRetentionStrategy.class
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()
ROOT_LOGGER.error(consoleSlot == null ? "main" : consoleSlot)
LOG.isInfoEnabled()
lastModified > (headerValue + 1000)
c == interfaceClass
new ConditionVariable()
new EmptyProgressIndicator()
subscriptionSender.setContextAttributes("[$CONTENT_TITLE$]",contentTitle,false)
LabelSchemaDescriptor descriptor
connection.local().createStream(toStreamId(i))
LAST_VERSION=936
_configurationPair.getKey()
new TextField<String>(TopicConfiguration.TOPIC_NAME_KEY)
world.add("capsule",5f,2.125f,5f)
/**   * Allows subclass to override Conection if required.  */ protected HttpConnection newHttpConnection(EndPoint endpoint){   return new HttpConnection(this,endpoint,getServer()); } 
LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort())
new IndexWriter(dir,new MyAnalyzer(),true)
orig.getGenericsTypes()
(DeltaManager)manager
metricsByDimensions.remove(dimension)
c.setLong("hbase.hregion.memstore.flush.size",100000)
promise.setSuccess()
classPropertyFetcher.getPropertyType(property)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionTanh.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,43.45703932447497,DeepLearningParameters.Activation.Tanh)
new GridQueryPortableFieldsIterator(new Iter(res),cctx,cctx.keepPortable())
impl.getClass().getMethod("join",InetAddress.class)
new Influencer(JOB_ID,"n","v",new Date(DEFAULT_START_TIME),600,1)
noteAcquireWifiLock(wifiLock)
Thread.sleep(1500)
OperationSetPersistentPresence persistentPresence=new OperationSetPersistentPresenceGibberishImpl(this); 
executor.scheduleWithFixedDelay(this,period,period,unit)
bufferedKeys.size() > getBatchSize()
m1.getName().equals("getAttributes") & !m1.getName().equals(m2.getName())
RouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
new RuntimeException("can't remove from a ReflectionDBObject")
feature.getName()
Config.empty()
typesArray.length == row.productArity()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,5)
IllformedLocaleException e
value.equals(getString(R.string.protocol_odk_default))
equalsToSchemaName(tag,"include")
cubeSeg.getConfig().getQueryCoprocessorTimeoutSeconds() * 1000
resetTimeInSeconds * 1000
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFSystem,true,false)
System.currentTimeMillis() + (sessionInactiveInterval + 60) * 1000
client.get().uri("/").exchange().expectStatus().isOk().expectBody()
ev.getAction() == MotionEvent.ACTION_DOWN
patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(fragUrl))
Utils.writeFile(outputDirectory,getFileName(cls),xsb.toXML())
IgniteException expected
sb.append(servletName)
!delegate.exists(file)
friendlyAttributes.get(name)
order.getInstructions()
e.getKey() > 25
DEPENDENCY_FORMAT_VERSION=46
create().select(param("p",String.class).as("p")).getSQL()
createTestBlockCapsule(dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,blockCapsule3.getBlockId().getByteString(),addressToProvateKeys)
dimension - 11
modifyList(list,arg)
dateMask[pos]
swapFile.delete()
myPluginDescriptor.getPluginClassLoader() != null
Thread.sleep(1000)
assertEquals(27,sqlStatements.get(1).getLineNumber())
securityMode != SecurityMode.None
this(128); 
new CacheCreateConfigOperation(cacheConfig,create,false)
(sbn.getNotification().flags & Notification.FLAG_AUTOGROUP_SUMMARY) != 0
childrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
nrRecordsCompare++
ByteArrayEntity entity=new ByteArrayEntity(new Gson().toJson(object).getBytes()); 
logger.info("Moving functions + variable into deeper modules")
token.equals(":") && !prevToken.equals("\u00a0")
transformedLine == null
newParameters.add(o)
field.getRawType()
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
value.isValid()
new DebugFlag("debug.optimize_startinput")
MAX_ITEMS=50
this.categoryWithApiModel=categoryWithApiModel
logger.info("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
execution.getJobs().remove(this)
post.getTitle()
dateFormatter.format(value)
invalidate()
ch.pipeline().addLast(handler)
TreeClassChooserFactory.getInstance(project).createProjectScopeChooser(title)
mUnreachedBarPaint.setColor(mReachedBarColor)
AudioManager.class
List<SourceFile>
new RemoveFileOperation(PATH_TO_DELETE,false,account,MainApp.getAppContext())
conv.convert(bc,cc)
new UnsupportedOperationException("ExifInterface only supports saving attributes on JPEG formats.")
Preconditions.checkNotNull(blockIds)
twitter1.checkUserListSubscription(id1.screenName,id2.id,userList.getId())
setImageDrawable(icon)
((ResolvedJavaType)obj).getName()
archiver.createArchive(project,archive)
Preconditions.checkNotNull(secondOperand,"Argument secondOperand can't be null")
assertEquals(5,ti.nrOfInvocations)
new SynthesizedAnnotationInvocationHandler(annotatedElement,annotation,getAttributeAliasMap(annotationType))
fullName.length() > selectedFullName.length()
Value emitBitScanReverse(Value operand); 
private final String mHostNameKey; 
location.belongTo(BlockStoreLocation.anyDirInTier(tierAlias))
@Override public Cell deepClone(){   return new KeyValue(this); } 
new MapProducerCapabilities(false,false,false,true)
jmsTemplate.setPubSubDomain(false)
c.networkId == netId
IllegalArgumentException.class
inflater.inflate(R.layout.mdtp_date_picker_dialog,container)
(Source)src
icon.setVisibility(visible ? VISIBLE : GONE)
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
resources.isEmpty()
Error err
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ AtmosphereResource addAtmosphereResource(AtmosphereResource resource); 
/**   * clockwise   */ CW(1)
returnElement.createReadableBlock(readableBlock)
"declaringClass".equals(propName)
GL20.glUniform2(location,v)
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.basic.enabled=false","security.user.password=password")
Integer painelStatus=parser.nextInt(); 
logger.error("Table spec retrieval failed!")
dest.writeLong(mTxPower)
next.handle(request).map(responseProcessor)
logger.info("Parsing Dep: " + filePath)
i < DatabaseDescriptor.getIndexInterval()
new ClientAttributeUpdater(clients.get(salesRep.getId())).setFrontchannelLogout(true).setAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE,"")
assertLeftRightCategory(8,category2a)
ColorResources.getColor("primaryControlShadow")
super.nodeSettings(nodeOrdinal)
V_5_0_0_ID=5000052
typeSettingsProperties.containsKey(oldRootPortletId)
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static Object get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
String.format("Could not find method %s(%s) on %s",name,Arrays.toString(paramTypes),target)
Sets.newHashSet(declarationCollector.getForwardDeclarations())
REAL_DRIVER.close()
SUBOPTIMAL_INDEX_FOR_CONSTAINS_QUERY(SeverityLevel.INFORMATION,Status.Statement.SuboptimalIndexForWildcardQuery,"If the performance of this statement using `CONTAINS` doesn't meet your expectations check out the alternative index-providers, see " + "documentation on index configuration.")
ordinals.size()
ctx.write("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
promises.addFirst(promise)
String value
Observable.interval(10,TimeUnit.MILLISECONDS)
sLat == null
Localization.menuTitle("Find unlinked files")
config.getOrcMaxBufferSize()
public <A>S innerJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).innerJoin((Expr<?>)entity);   return self; } 
cacheMapTileCount=24
minPriority == null ? 0 : minPriority
getTimeout(ticket)
emitScript(scriptStartNdx,ndx)
socialActivityFinder.countByRelationType(userId,type)
!isSameGroup(current)
@Nullable
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
assertTrue(latch.await(5,TimeUnit.MINUTES))
new Error(me)
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false)
/**   * The root package controller.   */ private PkgControl root; 
SceneOutputValueReadingJob.class
MAX_ARITY=22
methodName.startsWith("save")
myAccountPortlet.getPortletName()
new ZLIntegerRangeOption("Scrolling","AnimationSpeed",1,10,4)
JMenuItem predefined=new JMenuItem("Predefined Style"); 
-1688903193
super(expression," \t",startTime,zone,0,2); 
super.onDestory()
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,context,_configuration,_templateContextHelper)
new Invoke(opcode,kind,new Value[argumentCount],target,returnType,into)
possibleCenters.get(i)
popup.showInFocusCenter()
processor.getOrCreateManifest(archive)
factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)
Duration.millis(320)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccesssor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
saveRunnable instanceof LongTask
FilterModifWord.modifResult(result)
LOG.warn("Failed to add Connection id={}, clientId={} due to {}",info.getConnectionId(),clientId,e)
ImmutableList<String>
addKeys(externalClasses,DATE,"org.joda.time.LocalDate")
RowingBoat captain=(RowingBoat)beans.get(ROWING_BEAN); 
portletDataContext.setDataStrategy(portletDataContext.getDataStrategy())
SkuTranslationImpl.class
addDaysAndCheckForCompletion(7,NextEvent.PAYMENT_ERROR)
version > 0
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
logger.error("{}",builder)
new AndroidBinaryNonExoInstaller(buildTarget,projectFilesystem,androidBinary)
new GLBufferPool()
Tokens.isIgnoredWhitespace(t) || isUnquotedWhitespace(t)
xmlenc.writeObject(t)
errorHandler.onError(ex)
singletonComponent == null
Set<Key<?>>
GithubApiUtil.getGitHost()
new InvalidFragmentCollectionFileException("selected-file-does-not-contain-fragment-collections")
(arg & (EventDistributor.DOWNLOAD_QUEUED)) != 0
data.contains("red")
new PluginsPanel(new GridBagLayout())
SENDER_POSITION_TYPE_ID=4
moveTaskToBack(true)
!group.isActive()
fileNode.dexVersion >= DexConstants.DEX_037
bs.max() < 32
buff.remaining()
FileType.of(".h",".hh",".hpp",".hxx",".inc")
new SdkListCellRenderer()
PyStatement callExpression=elementGenerator.createFromText(LanguageLevel.forElement(dictExpression),PyStatement.class,stringBuilder.toString()); 
{6,30,54,74,102}
page.getSizeInBytes()
string.length() / maxIdxPerLine + 1
new EnterSelectionDialog(shell,props,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
input.getInfoStepDefinitions()
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true)
System.currentTimeMillis() + start
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS))
TestShardRouting.newShardRouting(index,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
pathText.getText()
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
LOG.error(e)
name.equals(pkg.getName())
logger.warn("TuneIn service not found")
LOGGER.debug("No file list editor found.")
logger.info("started [{}] instances with [{}] stage=prod tag")
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(calendarBooking,0,false)
removeViewsInLayout(--index,1)
assertEquals(fc,fc2)
-26
link.bone.getInitialRot()
private final JWindow myWindow; 
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
super.getSecurityEngine(false)
Integer.getInteger("org.mortbay.io.nio.MAX_SELECTS",15000)
what instanceof UpdateAppearance || what instanceof ParagraphStyle
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,completedTasks,false,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
LOG.assertTrue(url != null)
assertEquals(4,tool.getAllRules().size())
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
views.html.search.noresults.render(currentUser(),q,searchResult)
SpringBootWebSecurityConfiguration.class
Modifier.isStatic(field.getModifiers())
stack.get(stack.size() - 4).longValue()
clone.setClassNameId(getClassNameId())
@Override public Object createNullToken(String token,int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
ListFragment.class
new TypeResolver(arrayListOfString)
setProperty(POLICY,policy)
refDeafult != null
maxPagedStorageCacheProperty == null
AtmosphereResourceEventListener.class
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
id=13
response == null
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   return dht().drPauseState(); } 
myLeftPrecalculated.get(lineRight)
new ObjectMapper().reader(DiskBalancerWorkItem.class)
drained != null
charsSequence.charAt(startOffset)
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!")
parentQuerySpec.limit()
mContext.sendStickyBroadcast(mStorageFullIntent)
editor.repaintHeader()
Localization.lang("Search")
public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
@Override public final DivideBy orExists(Select<?> select){   return or(exists(select)); } 
VcsException e
targetState == STATE_EXPANDED
9 | open
Optional.of(privateKeyFile)
"DROP TABLE IF EXISTS " + TABLE_ACCOUNTS
mMccMncs != null
String.format("User [%s] already exists",username)
IDLE_TIMEOUT=100
new TemporalParseException("Wrong header information type: " + fieldsFromHeader)
mAnswer.setBackgroundDrawable(null)
Localization.lang("BibTeX")
Boolean.valueOf(resizeableStr)
isDeviceInVrMode()
mTempDate.get(Calendar.DAY_OF_YEAR) != mMaxDate.get(Calendar.DAY_OF_YEAR)
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group,e)
StartupManager.getInstance(myProject).registerStartupActivity(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
new AssertionError("unexpeced missing SHA-1 digest",ex)
location[0]
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,razberryLimit)
s.equals(".svn") || s.equals(".git")
routeName + "-" + namespace+ "."+ cheWorkspacesRoutingSuffix
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
declaredTypes.remove(innerName)
synchronized (this) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } 
data.metadataRowMeta.getString(rowData)
mDisplay.getMetrics(mDisplayMetrics)
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED
port.readBytes()
mImage.getFrameCount() >= 1
{4,5,5,11,6,5,7,5,11,11}
!mConnected
ExceptionUtils.handleThrowable(t)
YamahaZoneThingHandler.class
getBurnTime(ALCHEMICAL_COAL_BLOCK_STACK)
new DSXOrder(pair,type,new BigDecimal("0.1"),new BigDecimal("900"),new Date().getTime(),0,DSXOrder.OrderType.limit)
ipnbFilePanel.getSelectedCell()
!WordPress.hasValidWPComCredentials(getActivity().getApplicationContext())
/**   * Mounts file resources in sub directories that do not exist in the main resoucres.  */ public class TestFileResourceSetVirtual extends TestFileResourceSetReadOnly {   @Override public File getBaseDir(){     return new File("test/webresources/dir3");   } } 
!pageInfo.isELIgnored() && reader.matches("#{")
focusManager.requestFocus(new MyFocusCommand(),true)
addView(mNotificationHeader)
public Integer getId(){   return id; } 
/**   * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is smaller than the amount of data read after the mark position.  */ public static class InvalidMarkException extends RuntimeException {   private static final long serialVersionUID=-4338378848813561757L;   public InvalidMarkException(  String detailMessage){     super(detailMessage);   } } 
new WorldPoint(3238,3166,0)
peopleListFromJSON(jsonArray,localTableBlogId,!isEmailFollower,isEmailFollower)
mSelectedItemIdentifier != 0
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true)
CodeSignIdentityStore.class
private JsExprStmt mapExprStmt(Node node) throws JsParserException {   JsExpression expr=mapExpression(node.getFirstChild());   return expr.makeStmt(); } 
this(texName,true); 
(Long)resultList
new StringBuilder(730)
new Message(MSG_TXT,false)
super.onCreate(icicle)
Integer.valueOf(getOptional("kylin.storage.hbase.small-family-block-size-bytes","65536"))
Schema.builder().addInt32Field("id")
msgLog.info(msg,true)
mono.switchOnError(ex -> Mono.error(getReadError(bodyParameter,ex)))
public class XpathRegressionCyclomaticComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
mp.getValue()
fm.getKnownNodes().size() > 0
postApply(p.getLayer(),p.getParamName(),paramView,gradView)
gatherWriteActionStatistics && myWriteActionsStack.isEmpty()
id=19
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
config.getIdleConnectionTimeoutInMs()
response.sendError(statusCode)
{@link PkgControl}
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
fragmentTransaction.replace(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
formatter.printHelp()
topVer(4,2)
collection.addOnScrollListener(onScrollListener)
len != 2
!calculatePositionAndValue(x,y)
per > HEALTHY_PER
singleModelJSONObjectBuilder.nestedField(head,tail).field(OPERATION)
onEvaluateInputViewShown()
new BufferedOutputStream(new FileOutputStream(outFile))
assertEquals(2,schema.getUDTs().size())
discardChannel.receive(10)
editor.waitAllMarkersInvisibility(INFO)
new INodeDirectory(oldinode)
stream.<NettyClientStream>data()
getIntProperty("tachyon.master.web.threads",5)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
hz.getCluster().getLocalMember().isSuperClient()
route.getDomain()
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_VIDEO_OUTPUT) != PackageManager.PERMISSION_GRANTED
e.getMessage().contains("SocketTimeout")
1l << 36
getInt(THREAD_PER_HOST,1)
new UrlClassLoader(urls,null)
LOG.error(String.format("%d ms elapsed since build job marked as finished, but still missing build rule finished events.",elapseMillisSinceFirstFinishedStatus))
equal=false
ComputeTaskTimeoutException e
left.getQualifierLength()
log.error("Error extracting parameters meta data",e)
Calendar.getInstance(TimeZone.getTimeZone("UTC"))
wNoExecution.getSelection()
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button); 
4 < buf.length - count
giveFieldBinding(s)
diffs.isEmpty()
l.equals("<pre>")
messageVerifier.verifyMessage(responseHeaders,requestCtx.getUriInfo().getAbsolutePath().getPath(),requestCtx.getMethod())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION)
c.getStartOffset() != getStartOffset()
new MyResult(null,DiffPresentationReturnValue.quit)
bitoff + nbits < 32
mWindowManager.removeView(mContainer)
logger.info("AUTHENTICATE")
resolver.stop()
GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))
/**   */ private LongAdder cntr; 
sharedPref.getBoolean(SettingActivity.SHOW_BIG_PIC,true)
!mFolderName.equals(mAccount.getInboxFolderName())
JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
(Short)array[this.index]
lib.returnStringVarArgs("","Test")
"Skipped invalid content exclude pattern: " + includeExp
session == null
GROUPS=3
log.warn("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
testPackage.getFormattedDuration()
new InputStreamReader(in)
new ChunkUpdater(c,tessellator,worldProvider)
ignoreResourceNotFound=false
tableHasColumn(oldTableName,"description")
LOGGER.debug("Error while downloading file",ioex)
InsertionSort.sort(sorted.clone())
KeyStore.getInstance("PKCS11")
mRingingCallState != other.mRingingCallState
new IndexSizeExceededException(getOutOfRowsReason())
createPermissionsXmlAsset(new JndiPermission("*","lookup"))
new LightweightThread(null,new SuspendableRunnable(){   @Override public void run() throws SuspendExecution {     dut.myMethod();   } } )
this.klass.isPrimitive()
Preconditions.checkState(state.discoveredInputs != null)
impl._handler_method.toString()
isRemoteRegionRequested
op.getJavaName()
clientCodeChallenge == null
logger.info("Remove try/catch/finally")
buffer.writeBytes(content)
tag.setLabelPosition("top")
args.length > 0
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_velocityEngine,_templateContextHelper)
"Got ACTION_DEVICE_CHANGED from unexpected device: " + mGBDevice
"weighting " + weighting + " not supported"
connection.getRequestId() == lastRequestID + 1
field.holder().isResolved()
id=19
ImmutableSet.of(new AnagramClue("This anagram reveals who to speak to next: A BAKER","Baraek",new WorldPoint(3217,3434,0),"Varrock square","5"),new AnagramClue("This anagram reveals who to speak to next: A BASIC ANTI POT","Captain Tobias",new WorldPoint(3026,3216,0),"Port Sarim","7"),new AnagramClue("This anagram reveals who to speak to next: A HEART","Aretha",new WorldPoint(1814,3851,0),"Soul altar","2"),new AnagramClue("This anagram reveals who to speak to next: A ZEN SHE","Zenesha",new WorldPoint(2652,3295,0),"Platebody Southern Ardougne centre square"),new AnagramClue("This anagram reveals who to speak to next: ACE MATCH ELM","Cam The Camel",new WorldPoint(3300,3231,0),"North of the glider in Al Kharid"),new AnagramClue("This anagram reveals who to speak to next: AHA JAR","Jaraah",new WorldPoint(3359,3276,0),"Duel Arena hosptial"),new AnagramClue("This anagram reveals who to speak to next: AN PAINT TONIC","Captain Ninto",new WorldPoint(2865,9877,0),"Bar under White Wolf Mountain"),new AnagramClue("This anagram reveals who to speak to next: ARC O LINE","Caroline",new WorldPoint(2715,3302,0),"North Witchaven next to the row boat","11"),new AnagramClue("This anagram reveals who to speak to next: ARE COL","Oracle",new WorldPoint(3013,3501,0),"Ice Mountain West of Edgeville","48"),new AnagramClue("This anagram reveals who to speak to next: ARMCHAIR THE PELT","Charlie the Tramp",new WorldPoint(3209,3392,0),"South entrance of Varrock","0"),new AnagramClue("This anagram reveals who to speak to next: ARR! SO I AM A CRUST, AND?","Ramara du Croissant",new WorldPoint(2339,3677,0),"Piscatoris Fishing Colony"),new AnagramClue("This anagram reveals who to speak to next: AT HERG","Regath",new WorldPoint(1719,3723,0),"General Store, Arceuus, Zeah","25"),new AnagramClue("This anagram reveals who to speak to next: A BAS","Saba",new WorldPoint(2858,3577,0),"Death Plateau"),new AnagramClue("This anagram reveals who to speak to next: AREA CHEF TREK","Father Aereck",new WorldPoint(3243,3208,0),"Lumbridge Church","19 or 20"),new AnagramClue("This anagram reveals who to speak to next: BAIL TRIMS","Brimstail",new WorldPoint(2402,3419,0),"West of Stronghold Slayer Cave"),new AnagramClue("This anagram reveals who to speak to next: BAKER CLIMB","Brambickle",new WorldPoint(2783,3861,0),"Trollweiss mountain"),new AnagramClue("This anagram reveals who to speak to next: BLUE GRIM GUIDED","Lumbridge Guide",new WorldPoint(3232,3232,0),"Lumbridge"),new AnagramClue("This anagram reveals who to speak to next: BY LOOK","Bolkoy",new WorldPoint(2529,3162,0),"Tree Gnome Village general store","13"),new AnagramClue("This anagram reveals who to speak to next: CAR IF ICES","Sacrifice",new WorldPoint(2209,3056,0),"Zul-Andra"),new AnagramClue("This anagram reveals who to speak to next: CAREER IN MOON","Oneiromancer",new WorldPoint(2150,3866,0),"Astral altar","25"),new AnagramClue("This anagram reveals who to speak to next: C ON GAME HOC","Gnome Coach",new WorldPoint(2395,3486,0),"Gnome Ball course","6"),new AnagramClue("This anagram reveals who to speak to next: COOL NERD","Old Crone",new WorldPoint(3462,3557,0),"East of the Slayer Tower","619"),new AnagramClue("This anagram reveals who to speak to next: COPPER ORE CRYPTS","Prospector Percy",new WorldPoint(3061,3377,0),"Motherlode Mine","12"),new AnagramClue("This anagram reveals who to speak to next: DED WAR","Edward",new WorldPoint(3284,3943,0),"Inside Rogue's Castle"),new AnagramClue("This anagram reveals who to speak to next: DEKAGRAM","Dark Mage",new WorldPoint(3039,4835,0),"Centre of the Abyss","13"),new AnagramClue("This anagram reveals who to speak to next: DO SAY MORE","Doomsayer",new WorldPoint(3230,3230,0),"East of Lumbridge Castle","95"),new AnagramClue("This anagram reveals who to speak to next: DIM THARN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28 or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR HITMAN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28, Light box or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR WARDEN FUNK","Drunken Dwarf",new WorldPoint(2913,10221,0),"East Side of Keldagrim"),new AnagramClue("This anagram reveals who to speak to next: DRAGONS LAMENT","Strange old Man",new WorldPoint(3564,3288,0),"Barrows","40"),new AnagramClue("This anagram reveals who to speak to next: DT RUN B","Brundt the Chieftain",new WorldPoint(2658,3670,0),"Rellekka, main hall","4"),new AnagramClue("This anagram reveals who to speak to next: DUO PLUG","Dugopul",new WorldPoint(2803,2744,0),"Graveyard on Ape Atoll"),new AnagramClue("This anagram reveals who to speak to next: EEK ZERO OP","Zoo keeper",new WorldPoint(2613,3269,0),"Ardougne Zoo","40"),new AnagramClue("This anagram reveals who to speak to next: EL OW","Lowe",new WorldPoint(3233,3423,0),"Varrock archery store"),new AnagramClue("This anagram reveals who to speak to next: ERR CURE IT","Recruiter",new WorldPoint(2541,3305,0),"West Ardougne centre square","20"),new AnagramClue("This anagram reveals who to speak to next: FORLUN","Runolf",new WorldPoint(2512,10256,0),"Miscellania & Etceteria Dungeon"),new AnagramClue("This anagram reveals who to speak to next: GOBLIN KERN","King Bolren",new WorldPoint(2541,3170,0),"Tree Gnome Village"),new AnagramClue("This anagram reveals who to speak to next: GOT A BOY","Gabooty",new WorldPoint(2790,3066,0),"Centre of Tai Bwo Wannai","11"),new AnagramClue("This anagram reveals who to speak to next: GULAG RUN","Uglug Nar",new WorldPoint(2442,3051,0),"West of Jiggig"),new AnagramClue("This anagram reveals who to speak to next: GOBLETS ODD TOES","Otto Godblessed",new WorldPoint(2501,3487,0),"Otto's Grotto","2"),new AnagramClue("This anagram reveals who to speak to next: HALT US","Luthas",new WorldPoint(2938,3152,0),"Banana plantation, Karamja","33 (or none)"),new AnagramClue("This anagram reveals who to speak to next: HE DO POSE. IT IS CULTRRL, MK?","Riki the sculptor's model",new WorldPoint(2904,10206,0),"East Keldagrim, south of kebab seller."),new AnagramClue("This anagram reveals who to speak to next: HEORIC","Eohric",new WorldPoint(2900,3565,0),"Top floor of Burthorpe Castle","36"),new AnagramClue("This anagram reveals who to speak to next: HIS PHOR","Horphis",new WorldPoint(1639,3812,0),"Arceuus Library, Zeah","1"),new AnagramClue("This anagram reveals who to speak to next: I AM SIR","Marisi",new WorldPoint(1813,3488,0),"Allotment patch, South coast Zeah","5"),new AnagramClue("This anagram reveals who to speak to next: ICY FE","Fycie",new WorldPoint(2630,2997,0),"East Feldip Hills"),new AnagramClue("This anagram reveals who to speak to next: I DOOM ICON INN","Dominic Onion",new WorldPoint(2609,3116,0),"Nightmare Zone","9,500"),new AnagramClue("This anagram reveals who to speak to next: I EAT ITS CHART HINTS DO U","Shiratti the Custodian",new WorldPoint(3427,2927,0),"North of fountain, Nardah"),new AnagramClue("This anagram reveals who to speak to next: I EVEN","Nieve",new WorldPoint(2432,3422,0),"The slayer master in Gnome Stronghold","2"),new AnagramClue("This anagram reveals who to speak to next: I FAFFY RUN","Fairy Nuff",new WorldPoint(3201,3169,0),"North of the bank in Zanaris"),new AnagramClue("This anagram reveals who to speak to next: IM N ZEZIM","Immenizz",new WorldPoint(2592,4324,0),"The Imp inside Puro-Puro"),new AnagramClue("This anagram reveals who to speak to next: KAY SIR","Sir Kay",new WorldPoint(2760,3496,0),"The courtyard in Camelot Castle","6"),new AnagramClue("This anagram reveals who to speak to next: LEAKEY","Kaylee",new WorldPoint(2957,3370,0),"Rising Sun Inn in Falador","18"),new AnagramClue("This anagram reveals who to speak to next: LAND DOOMD","Odd Old Man",new WorldPoint(3359,3506,0),"Limestone mine northeast of Varrock"),new AnagramClue("This anagram reveals who to speak to next: LARK IN DOG","King Roald",new WorldPoint(3220,3476,0),"Ground floor of Varrock castle","24"),new AnagramClue("This anagram reveals who to speak to next: LOW LAG","Gallow",new WorldPoint(1805,3566,0),"Vinery in the Great Kourend","12"),new AnagramClue("This anagram reveals who to speak to next: LADDER MEMO GUV","Guard Vemmeldo",new WorldPoint(2447,3418,0),"Gnome Stronghold Bank","3"),new AnagramClue("This anagram reveals who to speak to next: MAL IN TAU","Luminata",new WorldPoint(3508,3237,0),"Near Burgh de Rott entrance"),new AnagramClue("This anagram reveals who to speak to next: ME AM THE CALC","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: MACHETE CLAM","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena","6"),new AnagramClue("This anagram reveals who to speak to next: ME IF","Femi",new WorldPoint(2461,3382,0),"Gates of Tree Gnome Stronghold"),new AnagramClue("This anagram reveals who to speak to next: MOLD LA RAN","Old Man Ral",new WorldPoint(3602,3209,0),"Meiyerditch"),new AnagramClue("This anagram reveals who to speak to next: MOTHERBOARD","Brother Omad",new WorldPoint(2606,3211,0),"Monastery south of Ardougne","129"),new AnagramClue("This anagram reveals who to speak to next: MUS KIL READER","Radimus Erkle",new WorldPoint(2726,3368,0),"Legends' Guild"),new AnagramClue("This anagram reveals who to speak to next: MY MANGLE LAL","Lammy Langle",new WorldPoint(1688,3540,0),"Hosidius House spirit tree patch"),new AnagramClue("This anagram reveals who to speak to next: NO OWNER","Oronwen",new WorldPoint(1162,3178,0),"Lletya Seamstress shop in Lletya","20"),new AnagramClue("This anagram reveals who to speak to next: NOD MED","Edmond",new WorldPoint(2566,3332,0),"Behind the most NW house in East Ardougne","3"),new AnagramClue("This anagram reveals who to speak to next: O BIRDZ A ZANY EN PC","Cap'n Izzy no Beard",new WorldPoint(2807,3191,0),"Brimhaven Agility Arena","33"),new AnagramClue("This anagram reveals who to speak to next: OK CO","Cook",new WorldPoint(3207,3214,0),"Ground floor of Lumbridge Castle","9"),new AnagramClue("This anagram reveals who to speak to next: OR ZINC FUMES WARD","Wizard Frumscone",new WorldPoint(2594,3086,0),"Downstairs in the Wizards' Guild"),new AnagramClue("This anagram reveals who to speak to next: OUR OWN NEEDS","Nurse Wooned",new WorldPoint(1575,3590,0),"Shayzien House Infirmary","19"),new AnagramClue("This anagram reveals who to speak to next: PACINNG A TAIE","Captain Ginea",new WorldPoint(1561,3602,0),"Building east of Shayzien combat ring","113"),new AnagramClue("This anagram reveals who to speak to next: PEAK REFLEX","Flax keeper",new WorldPoint(2744,3444,0),"Flax field south of Seers Village","676"),new AnagramClue("This anagram reveals who to speak to next: PEATY PERT","Party Pete",new WorldPoint(3047,3376,0),"Falador Party Room"),new AnagramClue("This anagram reveals who to speak to next: PROFS LOSE WRONG PIE","Professor Onglewip",new WorldPoint(3113,3162,0),"Ground floor of Wizards Tower"),new AnagramClue("This anagram reveals who to speak to next: QUIT HORRIBLE TYRANT","Brother Tranquility",new WorldPoint(3681,2963,0),"Mos Le'Harmless or Harmony Island","7"),new AnagramClue("This anagram reveals who to speak to next: QUE SIR","Squire",new WorldPoint(2975,3343,0),"Falador Castle Courtyard","654"),new AnagramClue("This anagram reveals who to speak to next: R AK MI","Karim",new WorldPoint(3273,3181,0),"Al Kharid Kebab shop","5"),new AnagramClue("This anagram reveals who to speak to next: RAT MAT WITHIN","Martin Thwait",new WorldPoint(2906,3537,0),"Rogues' Den","2"),new AnagramClue("This anagram reveals who to speak to next: RED ART TANS","Trader Stan",new WorldPoint(3041,3193,0),"Port Sarim Charter ship"),new AnagramClue("This anagram reveals who to speak to next: RATAI","Taria",new WorldPoint(2940,3223,0),"Rimmington bush patch","7"),new AnagramClue("This anagram reveals who to speak to next: R SLICER","Clerris",new WorldPoint(1761,3850,0),"Arceuus mine, Zeah","738"),new AnagramClue("This anagram reveals who to speak to next: SAND NUT","Dunstan",new WorldPoint(2919,3574,0),"Anvil in north east Burthorpe","8"),new AnagramClue("This anagram reveals who to speak to next: SEQUIN DIRGE","Queen Sigrid",new WorldPoint(2612,3867,0),"Throne room of Etceteria Castle."),new AnagramClue("This anagram reveals who to speak to next: SLAM DUSTER GRAIL","Guildmaster Lars",new WorldPoint(1649,3498,0),"Woodcutting guild, Zeah"),new AnagramClue("This anagram reveals who to speak to next: SLIDE WOMAN","Wise Old Man",new WorldPoint(3088,3253,0),"Draynor Village","28"),new AnagramClue("This anagram reveals who to speak to next: SNAH","Hans",new WorldPoint(3218,3219,0),"Lumbridge Castle courtyard"),new AnagramClue("This anagram reveals who to speak to next: SNAKES SO I SAIL","Lisse Isaakson",new WorldPoint(2351,3801,0),"Neitiznot","2"),new AnagramClue("This anagram reveals who to speak to next: TAMED ROCKS","Dockmaster",new WorldPoint(1822,3739,0),"Piscarilius House, NE of General store","5"),new AnagramClue("This anagram reveals who to speak to next: TEN WIGS ON","Wingstone",new WorldPoint(3389,2877,0),"Between Nardah & Agility Pyramid"),new AnagramClue("This anagram reveals who to speak to next: THEM CAL CAME","Cam the Camel",new WorldPoint(3300,3231,0),"Just outside of the Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: THICKNO","Hickton",new WorldPoint(2822,3442,0),"Catherby fletching shop","2"),new AnagramClue("This anagram reveals who to speak to next: TWENTY CURE IRON","New recruit Tony",new WorldPoint(1498,3544,0),"Shayzien House's Graveyard"),new AnagramClue("This anagram reveals who to speak to next: UNLEASH NIGHT MIST","Sigli the Huntsman",new WorldPoint(2660,3654,0),"Rellekka","302"),new AnagramClue("This anagram reveals who to speak to next: VESTE","Steve",new WorldPoint(2432,3423,0),"Upstairs Wyvern Area or Stronghold Slayer Cave","2"),new AnagramClue("This anagram reveals who to speak to next: VEIL VEDA","Evil Dave",new WorldPoint(3079,9892,0),"Doris' basement, Edgeville","666"),new AnagramClue("This anagram reveals who to speak to next: WOO AN EGG KIWI","Awowogei",new WorldPoint(2802,2764,0),"Ape Atoll","24"),new AnagramClue("This anagram reveals who to speak to next: YAWNS GY","Ysgawyn",new WorldPoint(2340,3167,0),"Lletya"))
injectFieldSuppressWarnings(annotationNode.up().up(),fieldDecl)
fileService.getLocalResource(getResourcePath(versionedBundleName))
candidate.getSelected().getId()
Timber.d(e,"Error getting path delimiter using LIST command",e)
identifier != null
gs._mb.makeModelMetrics(GLRMModel.this,adaptedFr)
um.getEnabledProfileIds(userId)
assertEquals(40,carEncoder.getSpeed(iter.getFlags()))
CalendarBookingServiceUtil.addCalendarBooking(calendarId,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
String.format("Option %s is not supported by this runtime")
!page.isApproved() && !page.isDraft() && !page.isPending()&& !page.isInTrash()&& (page.getVersion() != WikiPageConstants.VERSION_DEFAULT)
FileInStream.create(status,options.toInStreamOptions(),mContext)
o.getClass()
parts.length > 0
response.getContentCount()
blockId >= Block.field_71973_m.length
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true)
DocumentationManager.storeOriginalElement(project,element,originalElement)
annotationHelper.printError(element,"%s annotated element should have an empty constructor")
Double.valueOf(value.toString())
LOG.info("Creating short circuit output stream for block {} @ {}",blockId,address)
public IMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
new HttpBlobStore(new URI("http://localhost:" + serverPort),5,credentials)
externalCacheDir.getPath()
glyph.setSizeRatio(16)
@Override public String apply(String json) throws IOException {   Controller controller=createController();   return controller.applyJson(json); } 
report(n,MISPLACED_ANNOTATION)
!BuildCraftCore.DEVELOPER_MODE
Actor actor
log.debug(msg,t)
i < 6
name.length() > 0
psiFileFactory.createFileFromText(HTMLLanguage.INSTANCE,templateString)
CharSequence textToUse; 
annotations.isEmpty()
SelectTimeZonePacificStandardTimeTest.class
(V)unsafe.getObjectVolatile(owner,offset)
new ResourceContactPhoto(R.drawable.ic_profile_default)
Context.getAdministrationService().saveGlobalProperty(coreProp)
call.getRpcTimeout()
RenderUtil.loadResources(resources)
hostConfig.getCpuPeriod()
DLServiceUtil.addFile(companyId,portletId,article.getGroupId(),repositoryId,dirName + "/" + fileName,StringPool.BLANK,new String[0],bytes)
RemoteOperation synchFolderOp=new SyncFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName())
COUNT_DATABASE.put(key,val)
notifier.getConfiguration().setPort(25667)
entry.getKey().isEmpty()
timeout > 0
private MyClassLoader myClassLoader; 
LOG.error(e.getMessage())
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,TRUE)
Collection<PostgreTableReal>
this.rejectedAttr=requiredAttr
new IgniteCheckedException("Failed to perform cache operation (cache topology is not valid): " + U.maskName(cacheCtx.name()))
-612878558
permissions+=2
res.getObject().isStopApplicable(res.isForwardDirection(),intId)
hideable && shouldHide(releasedChild,yvel)
holder.setVisible(loadEndViewId,visible)
dataFormatModel.setLabel(row.get("description"))
future.get(30,TimeUnit.SECONDS)
!isLoaded && item.isOptional()
reader.getString(reader.readSmallUint(protoIdItemOffset + RETURN_TYPE_OFFSET))
TypeSpec.parse(builder,false)
source.isInternal()
gen.generateParser()
assertEquals(true,statement.getReferencesUniqueColumn())
new ExecutionEnvironment(env.getRunProfile(),env.getProject(),null,null,null,null)
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.claimed,"AAAAA","BALO")
mAccount.hasSpamFolder()
new DatabaseFormatterOracle()
schema.getDynamicPattern(sfield.getName()) != null
path.findChild(className.replace('.','/') + ".class")
getI18NString(key,Locale.getDefault())
private RunningProcesList mRunningProcessList=new RunningProcesList(); 
fileMeasures.get(1)
setUnknownLabels(binarized,mainLabel)
currentFragment=FRAGMENT_LOGIN
hour != 0
new BorderLayout()
PyByteLiteralInspection.class
Objects.hashCode(mLocationPolicy,mReadType)
new ArgumentsPanel(JMeterUtils.getResString("backend_listener_paramtable"))
0x1000000 - 0x50
_rate_decay != 1e-6
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,false,DEFAULT_CONFIG_IGNORE_LIST)
_siteNavigationMenuPortletInstanceConfiguration.navigationMenuType()
saveToFile()
new MethodHandler(methodKey,groupId,cal,types)
srcCount >= 1
webView.findNext(true)
assertEquals(2,map.size())
MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || (name != null && name.startsWith(AopConfigration.IOCNAME))|| AopConfigration.class.isAssignableFrom(type)
interfaces[i].isAssignableFrom(c)
timeout=50000000
id=19904
"Scheduling method " + method.getName() + " on "+ target+ " to be run every "+ delay+ " "+ timeUnit+ " after "+ delay+ " "+ timeUnit
256 * 1024
Context.getVisitService().getAllVisitTypes()
alpha=1
this.originX
requestLine.split("\\s")
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,false)
new Notification(notification)
parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)
case 3: 
paginationType.equals("more") && (docs.size() > end)
assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())
final GenericObjectContainer parent
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(24)
isAlphaModeEnabled(window)
/**   * User: anna Date: 1/10/13  */ public class JavaFXDefaultTagInspectionTest extends AbstractJavaFXQuickFixTestCase {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxDefaultTagInspection());   }   public void testChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testEmptyChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testStylesheets() throws Exception {     checkQuickFixNotAvailable("stylesheets");   }   @Override protected String getHint(  String tagName){     return "Unwrap '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/defaultTag/";   } } 
holder.textView.setBackground(null)
queryStrings.append(name)
mWidth - edgeWidth
specFactory.createInputFilesSpec(value,RUNTIME_INPUT_FILES_VALIDATOR)
ignite.createCache(cacheCfg)
liveMetadata != null
asIntReg(result)
loc != null
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Cool this annotation!")
String key
AbstractPushBufferStream.class
e instanceof Painting
input.getDouble(0) < 10.0
jaxbbean.addConstructorArg(paramsbean.getBeanDefinition())
buildData.getUserContentRelativePath()
public TokenStream create(TokenStream input){   return new PhoneticFilter(input,encoder,name,inject); } 
PageFlagsWebUpgrade.class
workishDir.getAbsolutePath()
super(project,false); 
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button); 
List<Long>
lookupService.lookupPrincipalByGroupName(user)
!isEnabled()
!closedWay && getOuterWays().size() == 1
db.needUpgrade(8)
log.error("Couldn't get resource: " + filename)
config.getProperty("peer.p2p.pingInterval",5L)
HIDDEN
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends AbstractWalletActivity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK)     SendCoinsActivity.start(this,intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT));     finish();   } } 
ChunkSatelliteView view
logger.info(String.format("close (%s)",reason))
leftResult.cardinality()
mImageSize == MediaSettingsImageSize.FULL
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
side.toString()
(LongFloatVector)row
getTestName(false)
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription())
from >= to
AddPortletChildPageTest.class
canvas.drawArc(mArcRect,45,90,true,mPaint)
fullSize + 1
"Content-Type".equals(name)
JDBCUtils.safeGetString(dbResult,"time")
a.getInt(R.styleable.BootstrapButton_android_layout_width,0)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
ORIENTATION_SETTLE_TIME_MS=100
dbSqlSessionFactory.getDatabaseCatalog() != null
updatable=false
dot != -1
_content=nc
VERSION_INT=1000010
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false)
(1.0f - rawLightValueSun) * 16.0f
((Number)s.first()).intValue()
tenantApi.uploadPluginPaymentStateMachineConfig(stateMachineConfig,PLUGIN_NAME,requestOptionsOtherTenant)
(read=channel.read(byteBuffer)) > 0
CellUtil.estimatedHeapSizeOf(cell)
-823689956
authenticationText == null
new Note(null,noteText,comment,new Date())
ultimateRecyclerView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
this.csrfTokenRepository.generateToken(exchange).flatMap(token -> this.csrfTokenRepository.saveToken(exchange,token))
searcher.get().getIndexReader()
CachedValuesManager.getCachedValue(newExpression,new CachedValueProvider<MethodCandidateInfo>(){   @Nullable @Override public Result<MethodCandidateInfo> compute(){     return new Result<MethodCandidateInfo>(getStaticFactoryCandidateInfo(psiClass,newExpression,context,argumentList),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);   } } )
FileUtil.loadFile(new File(getTestDataPath() + "/" + getTreeFileName()))
assertEquals(10,databases.size())
renderFrameBuffer == null
Math.abs(expectedSum) * 1e-11
commit.getId().toShortString()
@NotNull public SoftWrapModel getSoftWrapModel(){   return myDelegate.getSoftWrapModel(); } 
3 + maskLength
Status.constructStatuses(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
hits.length()
LOGGER.info("Invalid number format for side pane component '" + componentName + "'.",e)
header.getX()
conf.setInt("hbase.hregion.memstore.block.multiplier",10)
getBitmapFromMemCache(key) == null
!mPhones.contains(phone)
mCaCerts != null || mCaCerts.length > 0
Iterator<WebPageDetail>
await().atMost(1,TimeUnit.SECONDS)
LongAdder cntr
w1.getGradient(target,label - expTable[(int)((f + MAX_EXP) * (expTable.length / MAX_EXP / 2))])
emptyCheck.log(0,"msgKey",null)
Helpers.exec(j4p,"setProfileFabs(java.lang.String, java.lang.String, java.util.List)",id,strings)
annotation == OriginalType.MAP
private static final Configuration config=HBaseConfiguration.create(); 
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
new TimeoutException()
myChild2.getElementType() == ElementType.BLOCK_STATEMENT
folder.toEscapedModel()
DEBUG_LOG_ENABLED=true
final GridCache cache=internalCache(i); 
NSNameResourceCodec.encode(ci)
count < 50
ServiceLoader.load(MasterFactory.class)
GetterUtil.getString(serviceReference.getProperty("javax.portlet.description"),portletModel.getPortletId())
RingBuffer.newWriteQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
Thread.currentThread().getId()
status.isDirectory()
invocations >= 8
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandlerContext {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
this.add(getPanelCommand())
directoryUrl.getParameter(Constants.GROUP_KEY)
md.getToggleState()
!mWindow.getSharedElementsUseOverlay()
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase
stopWatch.taken() < 100
get(context,R.string.pref_navigation,true)
prev.getPrevProp()
new Node.JspAttribute(tai,qName,uri,localName,value,true,el,dynamic)
verify(mockRestTemplate).postForObject(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
mImage.getFrameCount() < 1
oldFlagged=Boolean.parseBoolean(value)
waitLatch.await(25,TimeUnit.MILLISECONDS)
ci.getConduit(info)
assertEquals(1,dataCountsDoc.get("bucket_count"))
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
method.getReturnType()
ids1.size()
body.getContentType().restContentType()
NestedSetBuilder.stableOrder()
rt != null
solve(true)
U.warn(log,"Failed to load partition counters.")
service.diff(appContext.getDevMachine(),project.getLocation(),null,NAME_STATUS,false,0,"HEAD",false)
String.format("(%s) violated quota. Actual: (%f), Threshold: (%f)",metric.metricName(),quota.bound(),value)
block instanceof BlockGrass
boundingBox.getLatSouthE6() / 186
ImmutableSortedSet.<BuildRule>of(bundle)
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),team.getGroupId(),ActionKeys.MANAGE_ANNOUNCEMENTS) || RolePermissionUtil.contains(themeDisplay.getPermissionChecker(),themeDisplay.getScopeGroupId(),role.getRoleId(),ActionKeys.MANAGE_ANNOUNCEMENTS)
buildData.getBuildURL()
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
incomingMessage.setTransActionCanceled(true)
case READ_UNCOMMITED: 
enforceSystemOrSystemUI("grant notification listener access")
385L * FileUtils.ONE_MB
contact != null
this.r != null
new StatsListener(ss)
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.<Type>asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
parts.length >= 2
Assert.assertEquals(stdoutLines.length,lines.length)
objectFactory.newInstance(DefaultSwiftExecutable.class,name + "Executable",projectLayout,objectFactory,getModule(),true,getSwiftSource(),configurations,getImplementationDependencies())
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onThreadPoolAdd","onContextStop")
Slog.wtf(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
updateBreakRequestBtn()
authHeaders.size() != 1
calendar.roll(Calendar.DATE,2)
LOG.error("Memory Usage for the Broker (" + memLimit / (1024 * 1024) + " mb) is more than the maximum available for the JVM: " + jvmLimit / (1024 * 1024) + " mb - resetting to 70% of maximum available: " + (usage.getMemoryUsage().getLimit() / (1024 * 1024)) + " mb")
EventPublishingService<ReplicationMessage,ReplicatedMessageListener>
retryPolicy.onWriteTimeout(wcl,WriteType.from(wte.writeType),wte.received,wte.blockFor,queryRetries)
new File(ctx.getCurrentDir(),resourceArr[i])
Math.min(1,amount)
setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true)
registerWithArgs(preMethods,"size",o,methodArgs)
invoke(agentInfo,payload,DEFUALT_FUTURE_TIMEOUT)
"Virtual file is null for " + file
/**   * Proxy class to catch calls to set blocks.  * @author sk89q  */ public class MinecraftSetBlockProxy extends el {   /**   * Edit session.  */   private EditSession editSession;   /**   * Constructor that should NOT be called.  * @param editSession  */   public MinecraftSetBlockProxy(  EditSession editSession){     super(null,"",(long)0,null);     throw new IllegalStateException("MinecraftSetBlockProxy constructor called (BAD)");   }   /**   * Called to set a block.  * @param x  * @param y  * @param z  * @param blockType  * @return  */   @Override public boolean a(  int x,  int y,  int z,  int blockType){     try {       return editSession.setBlock(new Vector(x,y,z),new BaseBlock(blockType));     }  catch (    MaxChangedBlocksException ex) {       return false;     }   }   /**   * Called to get a block.  * @param x  * @param y  * @param z  * @return  */   @Override public int a(  int x,  int y,  int z){     return editSession.getBlock(new Vector(x,y,z)).getID();   }   /**   * @return  */   public EditSession getEditSession(){     return editSession;   }   /**   * @param editSession  */   public void setEditSession(  EditSession editSession){     this.editSession=editSession;   } } 
standalone=true
connectors.put(connectorName,connector)
sendGetBlockHeaders(syncManager.getGapBlock().getHash(),FORK_COVER_BATCH_SIZE,1,true)
module == null
(low + high) >> 1
assertEquals(builder.size(),2)
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static String get(String self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
(status & 0x00010000) > 0
refreshInterval=10 * 1000
Files.move(tmpCacheEntry,cacheEntry.toPath())
XmppStringUtils.parseBareAddress(user)
serialVersionUID=3256441400072353336L
List<ConformanceConfig>
5 * 60 * 100
result.length() < 4
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
BorderFactory.createEmptyBorder(5,0,5,0)
case NORMAL: 
U.warn(log,"Failed to apply updates for session (maximum number of retries exceeded) [sesId=" + sesId + ", retries="+ retries+ ']')
onBackPressed()
BuildRule resourceRule1=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res1")).build()); 
info.getDepth()
((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(oldChannel,exchange)
refresh(asynchronous,recursive,postRunnable,ModalityState.NON_MODAL)
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING)
new IndexWriter(directory,autoCommit,ANALYZER,true)
iter.next().getDoubleValue() > 0.0
Optional.of(caCertificatesFile)
Thread.sleep(200)
/**   * Changes permission on current working directory so that the directory is owned by the user and the group remains azkaban. Leverages execute-as-user with "root" as the user to run the command.  * @param effectiveUser user/proxy user running the job  */ private void assignUserDirOwnership(final String effectiveUser) throws IOException {   final ExecuteAsUser executeAsUser=new ExecuteAsUser(this.sysProps.getString(AZKABAN_SERVER_NATIVE_LIB_FOLDER));   final String groupName=this.sysProps.getString(AZKABAN_SERVER_GROUP_NAME,"azkaban");   final List<String> changeOwnershipCommand=Arrays.asList(CHOWN,effectiveUser + ":" + groupName,getWorkingDirectory());   info("Change current working directory ownership to " + effectiveUser + ":"+ groupName+ ".");   final int result=executeAsUser.execute("root",changeOwnershipCommand);   if (result != 0) {     error("Failed to change current working directory ownership. Error code: " + Integer.toString(result));   } } 
new BooleanQuery()
assertFalse("reuse-address",networkConfig.isReuseAddress())
/**   * The number of public elements in this segment's region.   */ private final LongAdder pubSize=new LongAdder(); 
SpectralKMeansDriver.run(new Configuration(),affinities,output,1100,5,measure,convergenceDelta,maxIter)
properties.itemType >= ItemViewProperties.ID_NOT_IN_ACTIONBAR
ddmStructureLocalService.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
Mono.just(entry.getKey()).and(entry.getValue().health().compose(this.timeoutCompose))
new PropertyDescriptor.Builder().name("Receive Message Wait Time").description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.").expressionLanguageSupported(false).required(false)
TestSuiteEnvironment.getServerAddress()
MavenBuild.create(new File("projects/struts-1.3.9-diet/pom.xml")).setCleanPackageSonarGoals()
causeString.contains("NoSuchGroupException")
StepVerifier.create(Flux.just(1).then()).expectComplete()
logger.debug(e.getMessage())
public Number getMedian(){   if (count > 0) {     return values.get((int)(values.size() * .5));   }   return ZERO; } 
LOG.error("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
/**   * Gets data center replication pause state  {@code null} if replication is not paused.  * @return Data center replication pause state {@code null} if replication is not paused.  */ @Nullable public GridDrPause pauseState(); 
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).description(message)
getExitCode() != 0
tracesFile.mkdirs()
fileName.substring(lastDotIndex + 1,fileName.length())
TypeEvalContext.fast()
getService().hasPrimaryClip()
stateMap.get("CurrentURIMetaData") != null
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource)
marketDataService.getOrderBook(CurrencyPair.LTC_USD)
List<Map<String,Object>>
ack.getLastMessageId().setDataLocator(seq)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
BehaviorSubject<Void>
GenericAttributeValue<String>
buildJSLoaderModulesServlet()
iq.elements()
new PNGDecoder(stream)
Vector other=(Vector)obj; 
stack.get(stack.size() - 3).longValue()
expectedStatus != 500
NOTIFICATION_TYPE_MOVE_ENTRY_TO_TRASH=4
MIN_RECALL=0.5f
mStartDelay == 0
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).contextStart(withUser)
getStep(stepId)
ZLColorOptionEntry option
LanguageExtensionPoint<CompletionContributor>
v.getContext()
selectNext(currentCellPanel)
/**   * Create reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonClient createReactive(){   Config config=new Config();   config.useSingleServer().setAddress("127.0.0.1:6379");   return create(config); } 
new ByteArrayInputStream(decrypedPayload)
JetBrainsAccountDialogKt.showJetBrainsAccountDialog(getRootPane(),null)
new HighlightInfoTypeImpl(HighlightSeverity.INFORMATION,CodeInsightColors.TODO_DEFAULT_ATTRIBUTES,false)
details.put(CONFIG_HASH_KEY,currentConfigHash)
(cls == null) || (cls.length == 0) || (!SvnVcs.getInstance(project).getName().equals(((CommittedChangeList)cls[0]).getVcs().getName()))
UserManager.getUserProvider()
new URI(scheme,userInfo,server.host,server.port,prefix,null,null)
item.getName().matches(name)
MultiFields.getFields(index1)
mIam.getStackInfo(WINDOWING_MODE_UNDEFINED,ACTIVITY_TYPE_STANDARD)
assertion.getXmlObject()
quad ? (val & 0x3F) : 64
assertEquals(9,batchExecutionAssistant.processedCount())
rep.saveStepAttribute(id_transformation,id_step,"file_type_field",filenameField)
Localization.menuTitle("Library")
MAX_RETRIES_ON_ASSOCIATION_REJECT=4
Long.valueOf(value)
scanFeatures(getCamelKarafFeatureUrl(),"camel-core","camel-spring","camel-" + feature)
builder.setPlaceholderImage(getResources().getDrawable(ActorSDK.sharedActor().style.getAvatarBackgroundResourse()))
discardChannel.receive(10000)
logger.error("Exception mapping responses to requests.",e)
mState.mPivotY == pivotY
activeEditor.checkModified(false)
gsonWrappedStack.toJsonTree(inputStack)
TimeZone.getDefault().getOffset(actualTime.getTime())
@Override public ZuulMessage getDefaultOutput(HttpResponseMessage input){   return input; } 
formatter != null
curOffset=1
r - scrollY
this.serviceRpcServer.addProtocol(HAServiceProtocol.class,this)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : INVISIBLE
minBukkitBuildVersion=612
-y
_appendables == null
XSourcePositionImpl.createOpenFileDescriptor(project,this)
annotation.getContainingFile() != annotationOwner.getContainingFile()
@After public void clearMlState() throws IOException {   new MlRestTestStateCleaner(logger,adminClient(),this).clearMlMetadata(); } 
formatTime(scanWifiLockOnTime / 1000)
(getSource().x() + getTarget().x()) / 2f
responseEncoding == null
Column column
sendMessage() == false
scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
/**   * Sent messages count.  */ private final LongAdder sentMsgsCnt=new LongAdder(); 
IOException ioe
"Adding new Docker node " + node
NotificationManager.getInstance().onCurrentChatMessageNotification(messageItem)
Validator.equals(value.getData(),data)
index < myIntermediateCalls.size()
{abiList}
portlet.getPortletName()
Math.abs(loss)
blocked.isDone()
new NullPointerException()
Map<String,Integer>
previousAttribute.compareTo(attribute)
FLog.d(TAG,"Failed inserting a file into the cache",ioe)
AbstractPollingScheduler.class
AccessException ex
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equals(type)
new Instant(5L)
Long id
getConfig().getInt(ADVANCEDUI_OPTION,1)
new UnsupportedOperationException()
sMenuHeight=800
super.setup()
"thing".equals(uri.getScheme()) == false
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_STRING,myLanguageLevel.isPy3K())
Response<L>
MessagingService.instance().sendRR(cm.makeMutationMessage(),endpoint,responseHandler)
(InvocationTargetException)wrapped
Integer.valueOf(System.getProperty("cassandra.memtable_row_overhead_computation_step","100000"))
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameMethod.run();   } } 
MAX_IMAGE_DIMEN=1280
".".equals(relativePath)
partitionGroup.numBuffered()
getBoolean(SPIDER_PROCESS_FORM,false)
put(v)
IllegalStateException.class
doOpenIfChanged(true)
MoreCollectors.toImmutableSortedSet()
new HandlingEvent(cargo,new Date(10),new Date(20),HandlingEvent.Type.CLAIM,sesto)
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","DbHits","No data returned")
(child.mViewFlags & VISIBILITY_MASK) != GONE
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equals(contentType)
isOffhook
String curString=""; 
COUNTER_UPDATER.addAndGet(this,-vs.size) == 0
super.onCreate(state)
new Resource(include,name)
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph)
/**   * Needed for statistics.   */ private final LongAdder canceledJobsCnt=new LongAdder(); 
map.substitute(path,SystemInfo.isFileSystemCaseSensitive,null)
Math.abs(e1.getY() - e2.getY()) > SWIPE_MAX_OFF_PATH
textDelimiterLeading.getSelection()
root != null
validateFriendlyURL(group.getGroupId(),group.getCompanyId(),group.getClassNameId(),group.getClassPK(),friendlyURL)
item.getType() == DownloadActivityType.NORMAL_FILE
/**   * The upper value in the range.  * @return the upper value in the range  */ Comparable getTo(); 
Ignition.start("examples/config/example-compute.xml")
packet.setError(PacketError.Condition.not_authorized)
OAuthConstants.HAWK_TOKEN_TYPE.equals(tokenType)
atLeast(1)
args.length >= index
this.urlPathHelper.getRequestUri(request)
private TextView mAlarmStatusCollapsed; 
ams.mContext.createPackageContext(appInfo.packageName,0)
closeCode < 1002
public void testJobQueues() throws IOException {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo="Maximum Tasks Per Job :: 10";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals("default",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName("test-job-queue-info-test");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } 
hasPartialTag(tokens[pos - 1],"SUB","EIG","VER:AUX:3:")
image.getFile_url() != null
? super K
DataBufferUtils.read(is,this.bufferFactory,4)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,p)
List<Exception>
name.indexOf(endQuote)
filename.endsWith(".jpg")
ATLAS_MAP_ENTRY_FIELD_COUNT=4
new DroolsParserException(e.getCause())
handler.add(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
myBuilder.enableEols()
newCount < reservoirSize
log.warn("Hooking new default : onOperatorError")
request.setAttribute("liferay-ui:asset-display:assetEntry",_assetEntry)
query.field("relyOnPrevCycle").equal(true)
this == NtiOnly
items[21]
safeClose(channel)
/**   * Rest integration test. runs against external cluster in 'mvn verify'   */ public class RestIT extends ElasticsearchRestTestCase {   public RestIT(  RestTestCandidate testCandidate){     super(testCandidate);   }   @ParametersFactory public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {     return createParameters(0,1);   } } 
setException(t)
annotationReader.ofParameter(index)
PageCommentsWebUpgrade.class
(flags & Const.FLAG_FLOAT) == 0x0
prjFile.getPath()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).description(message)
failureDesc.contains("14807") || failureDesc.contains("14883") || failureDesc.contains("13456")
AbstractBootstrap<ServerBootstrap,Channel>
new Translog.DeleteByQuery(new byte[]{4},null,null)
zeroState[1][1]=0.25F
LOG.info(rootPath + "is not a directory")
logger.info("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
assertFalse(bulkResponse.hasFailures())
this.mTitle.compareTo(another.mTitle)
owner != null
method.getName()
dataFilter != null
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace,true)
NSString value=(NSString)nsDictionary.get(convertKey(key)); 
id=12
ShoppingServiceUpgrade.class
1024 * 1024
LOG.error(result.getDescription())
U.resolveWorkDirectory("marshaller",false)
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IOException {   return JSON.writeValueAsString(object); } 
contentWritten > 0
request.mConnectionID != null
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
DEBUG_RC=true
XContentType.JSON.restContentType()
new Long(getShortValue(workingMemory,object))
new PageException("不支持该SQL转换为分页查询!")
JavaConversions.asIterable(logManager.allLogs())
return 0; 
checkNotNull(resource,"Resource should not be null")
new KillableColoredProcessHandler(finalCommandLine){   @Override public void startNotify(){     if (myShowGoEnvVariables) {       GoRunUtil.printGoEnvVariables(finalCommandLine,this);     }     super.startNotify();   } } 
w.getAddress()
getIEuiccController().getEid(mCardId)
window.show(null)
StringUtf8Coder.of()
className.indexOf("org.openmrs.")
StringUtil.isBlank(raw)
packet.getType() != IQ.Type.result
logger.info("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
Params params
new UnsupportedTemporalUnitException("Not a time field: " + field)
initializeMainContext(monitor)
new BitSetFlags(permanentGraph.nodesCount(),true)
taskClass.findClassAttribute("negative_opt",false)
readers[i].delete(n - starts[i])
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentIoFile)
getDefaultLanguage()
exec("p4","-d",workingDir,"sync","@" + parseLong(revision))
paragraphNote.getId().equals(this.getId())
FIXED_VIEWPORT=20
firstIdx + 1
public static PhotoContent createRemotePhoto(FileReference reference,int w,int h,int duration,FastThumb fastThumb){   return new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration)))); } 
appMode.getSmallIconDark()
showMessage(context.getString(R.string.error_calculating_route_occured))
TYPE_DEBUG.equals(json)
Context.getPermissionsManager().checkGeofence(getUserId(),entity.getAttributeId())
fetch.get(i)
ZonePlannerMapDataServer.instance.loadChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
mMMatrix.leftMultiply(mParentMatrix)
String.format("%s:%s:%s:%s",getModuleGroup(),getModuleVersion(),getModuleName(),configuration)
worldEdit.getBlockRegistry().parseFromInput(component,context)
new ChannelHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
SettingsUtils.hasJobTransportPoolingKey(settings)
hash == this.lastDeviceListNotificationHash
Assert.assertEquals(150,resultAll)
m.getSize()
Map<List<Object>,Object>
builder.startArray("upgraded_indices")
private final String key; 
jid != null
checkNotNull(checker.getAnnotation(BugPattern.class))
mScrollView.restoreDefaultFocus()
public String comment() default ""; 
LensPositionSelectors.lensPosition(LensPosition.FRONT)
assertEquals(activeChangeList.getName(),"TEST-001 Summary")
{14,3.0f}
Color.green(color)
convertView == null
mService.reassociate(mContext.getOpPackageName())
queryMixin.leftJoin(target)
StringBuffer message=new StringBuffer(); 
http2Stream.inboundFlow()
log.error("Could not set transaction isolation: {}@{}",isolation,System.identityHashCode(dsc))
ctClass.getDeclaredMethod("paintBackground",paintBackgroundParams)
super.onPause()
verifyNothing(decoder,text("359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"))
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } ,0,inputRects.size)
MUCAdmin iq=new MUCAdmin(); 
new Camera()
new Coordinator(node.getName(),clusterService.getSettings(),clusterService.getClusterSettings(),transportService,namedWriteableRegistry,allocationService,masterService,() -> persistedState,hostsResolver -> testClusterNodes.nodes.values().stream().filter(n -> n.node.isMasterNode()).map(n -> n.node.getAddress()).collect(Collectors.toList()),clusterService.getClusterApplierService(),random())
pOtherShape instanceof RectangularShape
mTimes[i]
ChannelBuffers.copiedBuffer(bytes,0,length)
new IllegalStateException()
List<IConfigurationListener>
name.equals("Devices")
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize()
IS_USER_BUILD
return mRxTimeMillis; 
11 * ClassSize.REFERENCE
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString())
LibraryTableEditor.editLibraryTable(getProjectLibrariesProvider())
JvmDeclarationOriginKt.OtherOrigin(myClass)
editor.selectPrevTab()
MapActivity.getMapViewTrackingUtilities()
VfsUtilCore.getRelativePath(sourceRoot,mainClassFile,'/')
POLL_PERIOD=100L
GradleTaskDisplayNameMixIn.class
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,6)
new InputStreamReader(resourceInputStream,fileEncoding)
isGroupConversation()
DatabaseDescriptor.getListenAddress().getHostName()
CompanyLocalService.class
domElement.getXmlTag() != null
Namespace.CURRENT.toString()
Assert.assertEquals(_memoryClusteredJobs.toString(),1,_memoryClusteredJobs.size())
Thread.sleep(2200)
ClassHelper.make(SoftReference.class)
builder.timeValueField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
ProblemDescriptor[]
component.setUnderlined(object.get("strikethrough").getAsBoolean())
SingleServerInventoryProvider.class
result == Integer.MAX_VALUE
Class.forName(className.replace('/','.'))
case abort: 
new PebbleHealthActivitySample(stepsRecord.timestamp,userId,deviceId,stepsRecord.getRawData(),stepsRecord.intensity,stepsRecord.steps)
4 * displayMetrics.density
eligible.size() >= allowedSegCountInt
url.lastIndexOf(';')
mService.stopLocalOnlyHotspot(mContext.getOpPackageName())
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT)
distinctValues.put(distinct,distinct)
mAccount.setChipColor(color)
FileTemplateManager.getInstance()
core.getOpenCount()
maxCallCount=10
UrlUtils.isSpecialUrl(currentTab.getUrl())
duration(0,15,18900,0)
updateCondition.isPrivate()
mIconBase.clone().icon((String)mIcons.get(i))
context.init(httpServletRequest,httpServletResponse)
15 * 60 * 1000
propertiesComponent.setValue(CONFIGURED_V11,"true")
JDBCUtils.safeGetString(dbResult,"id")
@Override public Integer call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
new JSyntaxTextArea(15,50)
logger.trace("[{}] not acking store deletion (not a data node)")
quad.toUnpacked()
planDetailJson.getProductName()
Map.Entry<String,OsRealmObjectSchema>
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractACLCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_MARK_AS_FINALIZED,false)
DefaultCacheKeysFactory.createNaturalIdKey(naturalIdValues,persister,session)
Site.me().setRetryTimes(3).setSleepTime(0)
getWorkDirectory()
mExpandedGroup != -1
source.getAddress() == null
public static String replaceCommandVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _commandMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _commandMap.containsKey(matcher.group(1))) {     String varValue=getStringFromCommandMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
Messages.showErrorDialog("Error updating package list: " + e.getMessage(),"Reload List of Packages")
InputProcessor[]
"Cannot guess file extension for invalid MIME type: '" + name + "'"
mDiskCache.put(key,value)
LOGGER.debug("Could not perform drage and drop",nfe)
id=53
AnkiDroidApp.deck().setUndoStart(undoName)
message.getMessageId().setDataLocator(sequenceId)
mService.reassociate()
Configuration.getInstance().setHostInjectionEnabled(host,Collections.singleton(languageId),false)
mCameraUser.submitRequest(request,true)
Loader.loadClass(mName)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
SortedMap<String,T>
(Integer)args.get("damage")
pm.performDexOpt(pkg,null,false)
end + emoji.length()
StringBuffer buffer=new StringBuffer("SynchronizedAttributeAccessor: ["); 
ImmutableSet.of("~key","~value","~id","~nid","~label","~adjacent","~timestamp","~ttl","~visibility","key","vertex","edge","element","property","~T$VertexExists","~T$SchemaName","~T$SchemaDefinitionProperty","~T$SchemaCategory","~T$SchemaDefinitionDescription","~T$SchemaUpdateTimestamp","~T$SchemaRelated","~T$VertexLabel")
public SELF addProgressListener(ProgressListener listener){   operationParamsBuilder.addProgressListener(listener);   return getThis(); } 
public static BuildParameters addBuildParameterGitSource(BuildParametersBuilder builder,String gitUrl){   return builder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource().build(); } 
pointer.isEmpty()
log.info()
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0)
!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
components.isInstalled(service,"CLIENT")
LockServiceUpgrade.class
converter.convertTo(rightValue.getClass(),leftValue)
vel < mFlingGestureMinDistPx
id=15869
a.getInt(R.styleable.CollapsingToolbarLayout_scrimVisibleHeightTrigger,-1)
new BuildRuleParams(params.getBuildTarget(),() -> ImmutableSortedSet.<BuildRule>naturalOrder().addAll(swiftCompileRules).addAll(implicitSwiftCompileRules).addAll(cxxDeps.getDeps(ruleFinder)).addAll(preprocessor.getDeps(ruleFinder)).build(),ImmutableSortedSet::of,ImmutableSortedSet.of(),params.getProjectFilesystem())
tfp != null
sm.getString("apr.read.error",Integer.valueOf(-result),Long.valueOf(socket))
FileUtils.setPermissions(fstr.getFD(),0660,SYSTEM_UID,PACKAGE_INFO_GID)
dataTypeDefinition.replaceFirst("\\s*\\{.*","")
item.exists()
Futures.transformAsync(attemptTwoLevelStore(info,output),input -> {   if (input) {     return Futures.immediateFuture(null);   }   return delegate.store(info,output); } )
FileUtil.isAncestorThreeState(changeCandidate.getPath(),dir.getPath(),false)
request.getParams() != null
query.length()
inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 || evt.getButtonIndex() <= 2
ExampleRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
rulesJars.include(excludedJar)
input.doubleValue() == value.doubleValue()
fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.INVOICE_ADJUSTMENT)
DEFAULT_TETHER_OFFLOAD_DISABLED=0
ticket.notify()
new Dimension(700,600)
createFile("Test.java","class Test extends Type<A, B, C, D> {\n}")
allDeleted
(ImageView)convertView.findViewById(R.id.repost_flag)
getDialog()
guiResource.getImageBol()
v.isString() && meta.isEnclosureForced()
Dependencies dependencies
ImageUtilities.createBufferedImage(capture.getNextFrame())
SCAN_STATUS_COMPLETE=1
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_DISABLED,0,null,true)
private SimpleLimitExceptionHandler exceptionHandler; 
opCodes[0x84]
new Duration(2,SECONDS)
Context.newBuilder("java").setOption("java.AllowClassLoading","true")
UnitBitSet.MAX_CHARS_IN_WORD >= letters.length()
new MccEntry(230,"cz",2,"Europe/Prague")
new Ticker.Builder().currencyPair(pair).ask(kcTick.getBuy())
responseString(p)
IndexerRegistryUtil.nullSafeGetIndexer(baseModel.getModelClass())
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),GridCacheAdapter.class,"ctx")
IllegalStateException ex
LOG.warn(title + "; " + message)
new IndexMetadata(column,type,row.getString(INDEX_NAME))
getStepIOMeta().getTargetStreams()
findMethodOrFail(expr,ClassHelper.STRING_TYPE,name,args)
mWorkerId + BASE_FILE_NUMBER
buffer == null
SmartEnterProcessors.INSTANCE.forKey(language)
IndexReader.openIfChanged(oldReader,writer.w,true)
Stream.of(BRIDGE_TYPE,THING_TYPE_PRESENCE_SENSOR,THING_TYPE_DAYLIGHT_SENSOR,THING_TYPE_POWER_SENSOR,THING_TYPE_LIGHT_SENSOR,THING_TYPE_TEMPERATURE_SENSOR)
super.onOptionsItemSelected(item)
cs.getMetaData()
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
assertEquals(1,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
ImmutableList.of()
new IllegalArgumentException(JSON_BUILDER + "invalid element",e)
preMergedCustomer.isLoggedIn()
err != 0
cls != null
csUseGlobalSearch=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
ClientBase.class
resultList.first()
log.warn("Exception while processing message: " + e,e)
errorIfMissing=false
client.setIgnoreExternals(true)
tableHasColumn(oldTableName,"templateId")
curArticle.getResourcePrimKey()
mAvailableSessionKeys == null
SessionClicks.get(request.getSession(),"ignoreUserLocaleOptions")
new PackageConfig()
new BlockFamilyRegistryImpl(context)
c < 18
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.")
LOGGER.lifecycle(msg.apply())
now > deadline
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")
mFile.getPath()
parser.parse("-u",username,"-p",password,"-U",url,"--path.conf",conf)
WindowsResourcesPlugin.class
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
ListHabitsActivity.class
info.crashInfo.stackTrace.length() > 10000
mForegroundResId=array.getResourceId(1,0)
case GRIDGAIN: 
UndertowLogger.ROOT_LOGGER.debug("JDK9 ALPN not supported",e)
endFunction("write_column_statistics: ",ret != false)
graphVersion.incNodeVersion()
token.equals("?") && !prevToken.equals("!") && !prevToken.equals("\u00a0")
case 15: 
ph.setTimeStamps()
result=false
result.assertJson(this.getClass(),"search_debt_rule.json")
obj1.isLoose || obj2.isLoose
join(list,",","(",")")
p.matcher(string)
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(false)
Const.isEmpty(tablename)
new EmptyRepository.MyRepositoryElementsManager(psiManager)
scanFeatures(getKarafFeatureUrl(),"spring","spring-dm","jetty")
pluginsModel.setSortByStatus(true)
socket.setSoTimeout(300)
public TokenStream create(TokenStream input){   return new EdgeNGramTokenFilter(input,side,minGramSize,maxGramSize); } 
lp.height != defaultHeight
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,30_000)
new IgniteCheckedException("Failed to send message to node (has node left grid?): " + nodeId)
addThem=true
@Self Object currentStatement
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
TransactionException e
Cat.w(e)
playbackService != null
latch.await(55,TimeUnit.MILLISECONDS)
size >= min || size <= max
configuration.numEvents*=1000
delta > radius
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
failOrAccept(prevAccept,input,reach,t)
repositoryEntry != null
t instanceof InvalidToken
RU_TASKS
GrailsDataBinder.createBinder(map,instance.getClass().getName(),request)
getOriginalAmount().min(remainingAmount)
(flags & 0x01) > 0
textureDataMap.size()
activeSyncAccountIds.remove(syncAccount.getSyncAccountId())
setSelectedCell(panel)
fileName.startsWith("/")
getAllDeviceItems(deviceId).contains(commandId)
ThreadLocal<Integer>
String.format("Warning:  Could not parse [%s] for roles verification. Please revise and fix it. Nonetheless, the user will still be associated with all specified roles",rolesFile.toAbsolutePath())
index.retrieve(between(TransactionIndex.TIMESTAMP,beginInMilliseconds,endInMilliseconds),queryOptions(orderBy(descending(TransactionIndex.TIMESTAMP)),applyThresholds(threshold(INDEX_ORDERING_SELECTIVITY,1.0))))
jfe.getTotalCounters()
items.get(index)
mThemeStore.getThemeByThemeId(themeId)
LOG.info("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
ordering.compare(info.startOffset,caretOffset) > 0
DefaultStaticAnalysisWidget.class
/**   * This is  {@link CasWebflowServerSessionContextConfigurationTests}.  * @author Misagh Moayyed  * @since 5.0.0  */ @TestPropertySource(properties="cas.webflow.session.storage=true") public class CasWebflowServerSessionContextConfigurationTests extends BaseCasWebflowSessionContextConfigurationTests {   @Autowired @Qualifier("loginFlowExecutor") private FlowExecutor flowExecutorViaServerSessionBindingExecution;   @Override public FlowExecutor getFlowExecutor(){     return this.flowExecutorViaServerSessionBindingExecution;   } } 
64 * 1024
String.format("route weight: %.6f (CH) vs. %.6f (no CH) (diff = %.6f)",chWeight,noChWeight,(chWeight - noChWeight))
LanguageFolding.INSTANCE.forLanguage(elements[0].getLanguage()) instanceof CompositeFoldingBuilder
title.length() > 12
assertThat(stack.selectAllIssues()).hasSize(0)
RepositoryDirectoryUI.getTreeWithNames(newJob,rep,objectMap,dircolor,sortColumn,includeDeleted,ascending,false,true,directoryTree,null,null)
Log.setDebugEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
flow.getUpdateTime() > updateTime
args0.length > 0
cfs.getMemtableFlushAfterMins() * 60 * 1000
HashMap<String,String>
"Failed to generate [" + source + "]"
JetTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
unlock(orig)
private void showMatch(final Server server,final CommandSender sender,final String match) throws NotEnoughArgumentsException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(match);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     showExp(sender,player);   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
len >= 10
response.getStatusCode() / 100 == 4
getLog().info("Module name is " + moduleName)
!myComponentsRegistry.containsInterface(interfaceClass)
ResponseEntity<Void>
LOG.info("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
BrowseCap.isChrome()
id=15852
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),true)
CookieHelper.addCookie(KEYCLOAK_REMEMBER_ME,username,path,null,null,2592000,secureOnly,true)
field.getFieldName().equals(s)
tableHasColumn("MicroblogsEntry","receiverUserId")
new MockNode(settings,false,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
localBinder.getServiceInstance().clearCache()
new WrappedEpoxyModelClickListener(this,clickListener_OnClickListener)
tryHarder ? 7 : 4
Thread.sleep(100)
model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(),HistoryReference.TYPE_SPIDER)
subProperties.put(subName,value)
new GridTestUserResource()
filterJson != null || !filterJson.isEmpty()
line.startsWith(StringPool.TAB + "public class ") || line.startsWith(StringPool.TAB + "public enum")
return checksumtypeCodes; 
StringBuffer buffer=new StringBuffer("["); 
accountCapsule.getLatestAssetOperationTime(tokenID)
Preconditions.checkNotNull(nativePlatforms.get(targetCpuType))
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false)
assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)
Exception e
this::handle
itemTop > headerBottom
source.isNodeChild(target)
tracker.timeUpperBound=500
this.keycloakSession.users().getUserByServiceAccountClient(clientSession.getClient())
rs.getString(columnName)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,methodHandleLoaded))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
private MultiplePermissionListenerThreadDecorator listener; 
setAll(lowResults,highResults,expectedResults,MUC_TP,5965)
!addressStreet1Present
log.debug("Can not authenticate " + ac.getUsername() + " due to "+ e.toString())
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.7f)
GroupServiceUtil.addGroup(GroupConstants.DEFAULT_PARENT_GROUP_ID,name,description,type,StringPool.BLANK,true,true,serviceContext)
Timber.e("Dismiss dialogs")
row("p_comment",null,1.0,0.0,null,null,null)
Localization.lang("File")
Collection<GridDrStateTransfer>
runUTRunner(PathManager.getHomePath())
DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS=5000
Utils.createInformativeDialog(mContext,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.dialog_import_error))
!mStatus.showStatusLines()
new KettleException("Couldn't find hop '" + from + "' to read from")
NORMAL(R.drawable.sense_ok,R.string.normal,R.string.detail_info_normal)
isSimple=true
CollectionAdminRequest.createCollection("halfdeletedcollection2","conf",4,2)
extras.getInt("fragment")
new JCacheProducer(this,cacheCnfiguration)
trim.equalsIgnoreCase(ALL)
mCol.getDb().queryScalar("SELECT nid FROM cards WHERE id = " + id)
ctx.writeAndFlush(msg,promise)
SceneApplication.getApplication().getRenderer().readFrameBuffer(offBuffer,cpuBuf)
l.setAltitude(alt)
docErrors.get(i)
"Use " + ATT_LOGOUT_URL + " or "+ ATT_LOGOUT_HANDLER+ ", but not both"
Internal.prefixKeyWithSalt(key)
new NotificationCompat.BigTextStyle().bigText(errorMessage)
JavaSdkImpl.getMockJdk("java 1.5")
CLEAR_OUTPUT_DIRECTORY=false
Status.constructStatuses(get(getBaseURL() + "statuses/home_timeline.json",true))
ImmutableList.<PostAggregator>of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"))
childrenExpanded ? mDividerHeight : mChildPadding
Throwable e
Utils.intNow()
_testUploadPortlet.put(fileEntry)
Thread.sleep(50)
JwsSignatureValidator validator
addEnergy(1)
logger.warn("[{}] {}",msg)
nameMethod.invoke(nameMethod)
public String getHeight(){   return height; } 
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).arguments(parameters.getVariables())
COOKIE_SYNC_MANAGER=false
event.causeOfChange != CommentAction.PUSH_COMMENT
bufferedBytes >= maxBufferedBytes
subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
notebook.createNote()
fileSystem.move(backup,file)
in.getVersion().after(Version.V_5_4_0_UNRELEASED)
new ArrayList<Object>()
new ZuulException(errorMsg,causeMsg)
getCode().split("\n")
assertEquals(write.getCodec().toString(),CodecFactory.deflateCodec(6).toString())
content.contains("&")
allowPrivate.isNull()
populateTrendingUi()
m.getAnnotation(Test.class) != null
panel.getTabIndex() == 0
stmt.setDate(1,date,UTC)
assertEquals(codecFactory.getCodec().toString(),(CodecFactory.fromString(codec).toString()))
new IllegalArgumentException("Advertising can't be both connectable and scannable")
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)
group.shutdownGracefully()
Person person=new Person(); 
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD))
saleAdjustmentPrice.lessThan(retailAdjustmentPrice)
FluxPeekHelper<T>
alterStatement.getUpdateColumns().put(newName,oldDefinition)
DiagnosticType.disabled("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
new CamelExchangeException("JettyClient failed with state " + exchangeState,exchange)
page < 1
Status.constructStatuses(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
arguments.add("--jmxlocal")
near.remove(key)
project.getUserData(LIBRARIES_SCOPE_KEY)
paramNames != null
from("direct:b").delay(500)
fragmentCollectionPersistence.filterFindByGroupId(groupId,start,end,orderByComparator)
getProperties().remove("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
LOG.info("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
CCMBridge.ipOfNode(0)
new IgniteException("Failed to start near cache " + "(a cache with the same name without near cache is already started)")
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket")
clientState.getKeyspace()
new IllegalArgumentException()
@Autowired GraphTraversalService graphTraversalService; 
Bullet.init()
value instanceof NotValue
MIN_DIMENSION_TO_RECUR - (int)maxY
toolItem.getControl()
(startTime + 500) / 1000
!mInInitialized
getLocalizationXmlFromPreferences(preferences,portletRequest,parameter,defaultValue,null)
Query[]
super.getAttributeAsInt(FOUNDATION_ATTR_NAME)
metricName.getName()
scheduleUpdate(0)
com.android.internal.util.DumpUtils.checkDumpPermission(mAm.mContext,TAG,pw)
new Label(this.comboComposite,SWT.NONE)
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]))
SSLHandshakeException.class
new MulticastSocket(SSDP_PORT)
windowEnd=Long.parseLong(cmd.getOptionValue(CLI_WINDOW_SIZE)) * DAY_IN_MS
rsWrap.getMobFileCacheAccessCount()
elementAtOffset == null
none()
Response.ok()
new ByteArrayResource(groovyPages.get(location).getBytes("UTF-8"))
getLastNonConfigurationInstance()
xml.openElement(getElementName())
routes.ExtractorsResource().list(input.getId())
MacMessages.showYesNoDialog(message,title,yesText,noText,WindowManager.getInstance().suggestParentWindow(project))
log.warn("Could not annotate via server! Trying to annotate locally...",t)
ApplicationManager.getApplication().invokeLater(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
null == result
addError("URL [" + url + "] is not of type file")
new Dimension(3000,GRID_SIZE)
IntrospectionSupport.setProperties(config,componentProperties,null)
SecondActivity.class
@Controller
logger.error("InfluxDB is not yet connected")
!_isAtLineEnd(detailAST)
new LeftTuple(new DefaultFactHandle(1,"cheese"))
rows.get(0).key.key.equals(startKey)
poolProperties.getRemoveAbandonedTimeout() * 1000
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_PUT,updateVal,true,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
GithubNotifications.showErrorDialog(myPane,"Can't login: " + GithubUtil.getErrorTextFromException(ex),"Login Failure")
mCachedDevice.onProfileStateChanged(mHidProfile,BluetoothProfile.STATE_DISCONNECTED)
new ObjectMapper().reader(DiskBalancerVolume.class)
entry.getValue().getIdentifiesControllerService() != null
Log.wtf(TAG,"Unable to resolve SystemUI's UID.",e)
return filename; 
BinaryFunction<T>
diff >= freeLimit
description != null
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=true
_buildTemplateWithGradle("npm-jquery-portlet","jquery-dependency-management","--dependency-management-enabled","true")
USE_COMPASS_IN_NAVIGATION.setModeDefaultValue(ApplicationMode.CAR,false)
new DbTests()
getDoubleValue(key,0.0)
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_SECOND),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),AccountType.Normal,300L)
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
assertEquals(3,unindexedFieldNames.size())
new IllegalStateException("Failed to create temp directory")
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",false,new ServiceContext())
public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"7:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,"age","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK" + "/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"9:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,"method1","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
executionStats.getSplits()
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,true)
typedAction.getHandler()
new SoftReference(result)
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)
totalBytes()
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
line.startsWith(StringPool.TAB + "private class ") || line.startsWith(StringPool.TAB + "private enum ")
v.toNumericVec()
assertEquals(provider.fetchCount,is(1))
mAppOpsManager.checkOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
_sharingEntryService.addSharingEntry(user.getUserId(),classNameId,classPK,themeDisplay.getScopeGroupId(),shareable,sharingEntryPermissionDisplayActionKey.getSharingEntryActionKeys(),expirationDate,serviceContext)
StringUtils.isNotEmpty(id)
writeStartElement(null,namespaceURI,localName)
BatchCSVRecord.class
new Font(nodeFontName,nodeFontSize,nodeFontStyle)
List<Middle>
CMISFileEntry.class
(Long)strategy.getOrNull("test",third)
tenantApi.uploadPluginConfiguration(pluginConfig,pluginName,requestOptions)
findAnnotationAttributes(element,annotationType.getName(),true,true,true,true,false,false)
fieldType instanceof PsiPrimitiveType
app.getAudio().newAudioRecoder(22050,true)
new IllegalArgumentException("Advertising can't be both connectable and anonymous")
defaultMaxRowsInMemory=500000
? extends Exception
String.format("The variables input contains a field name '%s' that is not defined for input object type '%s' ",GraphQLTypeUtil.getUnwrappedTypeName(graphQLType),fieldName)
"Unknown or Unsupported Option '" + value + "'"
client.getVertx().setTimer(1,id -> checkExpired())
@Alive protected Value deltaValue; 
assertEquals(2,resultList.size())
app.invokeLater(() -> Messages.showErrorDialog(text,title))
VERSION=27
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid)
messageBus.replace(createSynchronousDestination(destinationName))
mapper.seAttributePrefix("")
assertViolations(result,2,0)
c >= 0x7F
ApplicationManager.getApplication().isUnitTestMode() ? 4 : 2
List<PersistentLocalScope>
/**   * GridGain message.   */ GRIDGAIN
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,NO_TYPES,Arrays.asList(expected),map(),NO_EXTEND_DECLARATIONs)
create.fetch(meta().getSchemas(),SQLDataType.VARCHAR,SQLDataType.VARCHAR)
DefaultCacheKeysFactory.createEntityKey(id,persister,factory,tenantIdentifier)
AlluxioWorker.class
findById(type,0)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
WebSocketEventListener.class.cast(l).onMessage(event)
IOHelper.getCharsetName(exchange)
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amounts[face.getIndex()] / flow.capacity,1,min,max,vb,sides)
new IllegalStateException("Could not find navigation view for Toolbar!",e)
ObjectStreamClass.lookupAny(clazz)
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
assertEquals(1,persons.size())
SerializableString name
verifyGetCommandNameCalled(3)
IndexScanVerbHandler.class
assertTrue(prj.nodes().contains(grid(4).localNode()))
TypeMirror fooTypeMirror=types.getDeclaredType(fooElement); 
Throwable t
error.expectedMessageCount(2)
MAX_IMAGE_DIMEN=1280
return 7; 
Timber.v(e,"Authentication exception for new token, permanent error assumed",e)
ResponseImpl description(String description); 
assertEquals(write.getCodec().toString(),SNAPPY_CODEC)
text.closeElement(BR)
Math.max(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
options.needsTranspilationFrom(ES7)
{11,6.5f}
getStaticCatalog(from,requestedDate,subscriptionStartDate)
m.isCacheValue()
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
Validator.isNull(entry.getUrlTitle())
myTaskManager.suggestBranchName(localTask)
Metric<Long>
mFlexItem.setAlignSelf(AlignItems.BASELINE)
waitForMappingUpdateOnAll("dynamic_table","my_object.a")
getCategoriesAndThreads(category.getGroupId(),categoryId)
requestEncoding == null
mImageManager.load(holder.mImgBlavatar,GravatarUtils.fixGravatarUrl(post.getBlogImageUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp,ScaleType.CENTER)
String.join("\n","pending changes to 'foo/bar/baz.xml'","pending changes to 'spam/ham/eggs.c'")
@Use({REG,ILLEGAL})
superMenu.add(menuItem)
query.toString()
in.readShortx()
propByGetter == null
mapper.getTypeFactory().uncheckedSimpleType(InspectExecResponse.class)
new InterruptedException()
slotId == 0
TestPackage.foo(10,new Function1<Integer,Unit>(){   public Unit invoke(  Integer n){     System.out.println(n);   } } )
executionListenerContextCloseListener.addClosedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
event.isHidden()
this.context.getLogAggregationStatusForApps().add(report)
AuditManagerImpl.class
countNewlines(headerFragment + lhsFragment + thenFragment) + 2
config.getClass().toString()
reportExceptions(result,basedir)
layout.setVisibility(View.VISIBLE)
_jsonWebServiceServiceAction.getJSON(null,null,mockHttpServletRequest,mockHttpServletResponse)
assertThat(finder.findByIds(newArrayList(2,3))).hasSize(2)
StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField.LANGUAGE.field())
output.flush()
final String sId=getCentralAuthenticationService().grantServiceTicket(tId,TestUtils.getService()); 
activityMonitor.waitForActivity()
checkPojoMetaClass()
STUB_VERSION=39
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
@IntMethodAnnotation(42)
context.startRoute("consumer")
i < lastLine
retriever.captureFrame()
LOG.error(e)
type == TokenTypes.CLASS_DEF
expectedCommentLength < maxCommentLength
line.startsWith("##")
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_UNICODE,myLanguageLevel.isPy3K())
return mPrefs; 
connectors.hashCode()
repoSelectorPanel.add(label,BorderLayout.WEST)
toIntervalStartEpochMs(epochMs) + NEXT_TASK_DELAY_MS
log.error(sm.getString("webappClassLoader.stackTrace",threadName,getStackTrace(thread)))
requestHeader.mConnectionID != null
telephony.isOffhook()
checkArgument(!"/".equals(resourcePath),"%s is the classpath root")
BuildRule resultRule=binaryBuilder.build(graphBuilder,filesystem,targetGraph); 
clockSource.elapsedMillis(startTime,now)
Object data
strand.isAlive()
new MutableDouble("2.0")
List<PairedStats>
findPackage(PIP,false)
Arrays.asList(MaterialColor.PLUM,MaterialColor.CRIMSON,MaterialColor.VERMILLION,MaterialColor.VIOLET,MaterialColor.BLUE,MaterialColor.INDIGO,MaterialColor.FOREST,MaterialColor.WINTERGREEN,MaterialColor.TEAL,MaterialColor.BURLAP,MaterialColor.TAUPE,MaterialColor.STEEL)
this.clientRpcServer.addProtocol(HAServiceProtocol.class,this)
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX)
personalJournalList != null
(application.change().upgrades(deployment.version()) || application.change().upgrades(deployment.applicationVersion()))
i++
WikiTestUtil.addPage(TestPropsValues.getUserId(),(Long)parentBaseModel.getPrimaryKeyObj(),ServiceTestUtil.randomString(),keywords,approved,serviceContext)
public class RegExpParseTest extends BaseParseTestCase {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
equalTo(0l)
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,null,true)
VerifyError e
is.setAmount(amount)
private TextView frame=null; 
assertEquals(7,databases.size())
LOG.error("Root project path of the Gradle project not found for " + rootModel.getModule())
assertEquals(activeEmployees,values.size())
mWorkerId + BASE_FILE_NUMBER
Runtime.getRuntime().totalMemory()
ev.getY() < mQsContainer.getBottom()
new WorldPoint(3458,3364,0)
!newDatabase && (bibDatabaseContext != null)
FacetUtilsKt.getOrCreateFacet(getModule(),modelsProvider,false,false)
parcel.readCharSequence()
tester.getServletRequest()
new J7StatsListener(ss)
ProblemDescriptor descriptor
PasswordPoliciesAdminWebUpgrade.class
next.getElementType() == ElementType.WHITE_SPACE
StringBuffer buffer=null; 
AbstractTableWriterModelCell tableCell
mProgress != null
this == RUNNING
project.isDisposed()
getMyApplication().getSelectedGpxHelper().selectGpxFile(model.getGpx(),false)
getPageItems(PaginationRequest.of(10,1),_group.getGroupId(),getThemeDisplay(_group,LocaleUtil.getDefault()),new Filter(_filterParser.parse("contains(title,'title')")),Sort.emptySort())
Map<CommandSender,String>
new IllegalStateException("Failed to create temporary folder in " + workingPath)
classOrVariableName.matches(allowedClassName)
Thread.sleep(10)
rtWithDecryptedAssertion.getAssertions()
JavaTerm.class
mOpenTags.peekFirst()
resolved.asSnapshot()
playerData.getCurrenciesList()
onDetachedFromWindow()
e.getPresentation().setEnabled(enabled(project,log,details))
Boolean.valueOf(getOptional("kylin.query.enable-dict-enumerator","false"))
MeasureTypeFactory.init()
new ConcurrentHashMap<Class<?>,Constructor<?>[]>(64)
position == buffer.length
Thread.sleep(600)
DefaultGroovyMethods.getRootLoader(Environment.class.getClassLoader()) == null
myPalmId=id
BlockingManager.getInstance().getBlockedContacts(account)
JACKSON_16
db.delete(TABLE_NAME,null,null)
notifier.isIgnoreExchangeSentEvents()
mPm.getUserBadgedDrawableForDensity(icon,new UserHandle(userId),null,0)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
/**   * Defines the target visibility of properties in the target entity. Note this is not applicable to abstract or immutable classes.  * @return the visibility level of properties in the target entity  */ PropertyVisibility propertVisibility() default PropertyVisibility.PRIVATE; 
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Throwable getExceptionThrown(){   return exceptionThrown; } 
new ArrayList<>()
eq(true)
is(13)
picker.end(pageContext.getOut(),null)
assertEquals(11,definitions.size())
renderNotebookv2(sourceDoc,input.getFormat())
task.getInputs().files(futureValue)
connectionProperties.contains("oracle.url")
JSTypeUtils.areTypesCompatible(setterType,type,null)
new RangeSliceCommand(KS,CF,System.currentTimeMillis(),filter,range,count)
!comp.getCollectorItems().isEmpty()
sharedPreferences.edit().remove(PREF_KEY_HIDDEN_DEFAULT_ENGINES).commit()
System.out.prinln("The stack is full, can't insert value")
mConferenceById.containsKey(callId)
Long.valueOf(row.getValue(partitionCol).toString())
isVisible()
new DeoptimizeNode(node.action(),node.reason())
return consistency; 
log.info(message)
LOGGER.lifecycle(msg.apply())
hits.length()
testPool.getListeningExecutorService()
new TitanException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
d == 0
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","my-app")
Character.isLetterOrDigit(buffer.charAt(i))
classFilter.contains(classID)
phones.isValid()
imageView.setBackgroundDrawable(drawable)
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null)
_buildTemplateWithGradle("content-targeting-report","report-dependency-management","--dependency-management-enabled","true")
Preferences.setLong(ActFmPreferenceService.PREF_USER_ID,0)
public Object clone(); 
targetRegistry.registerAlias("transactionManager",transactionManagerRef)
version == null
stall_till_cloudsize(2)
!includeGlobalTemplates
new UnsupportedOperationException("Command not found in spout message: " + shellMsg)
new HttpPanelResponse(true,extension,httpMessage)
i < 1000000000
senders == SendersEnum.both
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractACLCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
commentsListView.setSelection(0)
wsSession == null
/**   * Executes the action with the given controller. <p> The state of the build is not defined as part of this contract, it is highly context specific.  */ T run(BuildController buildController); 
urlToLoad.getText().toString().isEmpty()
JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)
elementText.substring(i + 1)
NotifyUtil.show("Error",formatter.format(record),MessageType.ERROR,listener,10000)
Environment.getRootDirectory()
mForgotPatternButton.getVisibility() == View.VISIBLE
MessageListBean mentionsComment=intent.getParcelableExtra(BundleArgsConstants.MENTIONS_COMMENT_EXTRA); 
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED
accountPermissionUpdateContract.getPermissionsCount() == 2
clientConfig.getRegistryFetchIntervalSeconds() * 2
logger.warn("gave up waiting for query reply from device {}",m_address)
surfaceHeightFacet.get(pos.getX(),pos.getY())
synchronized (classCache) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new JCheckBox()
dest.mkdir()
assertEquals(10,tasks.size())
new MethodCallExpression(INVOKERHELER_RECEIVER,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",new ArgumentListExpression(target.isStatic() ? new ClassExpression(target.getDeclaringClass()) : receiver,new ConstantExpression(target.getName()),arr))
arrayContaining("foofoobar","foofoo")
initialCapacity < 0
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute()
configElements[1]
AvroKey<GenericRecord>
view.isLaidOut()
retVal.put(entry.getKey(),value)
cache.invoke(entry.getKey(),this)
this.traceHandlers.add(traceHandler)
result.wasNull()
new IllegalStateException("Could not access Field '" + classField.getName() + "'")
out.writeLong(sampleCount)
holder.setVisible(getLoadingViewId(),visible)
myTreeBuilder.isNodeBeingBuilt(event.getPath())
LOG.trace("Failed to delete temp folder",e)
f.getAttrs().getMTime() * 1000
material.getMaterialDef().getName().contains("Lighting") || mesh.getFloatBuffer(Type.Normal) == null
Assert.assertEquals(interop.getFloatField(),copy.getFloatField())
getNextClusterID()
GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)
i < count
Integer.valueOf(time.split(":")[1])
currentConditionType[0]
new WorldPoint(2552,3557,0)
private void _runClassCommandName(String classCommandName) throws PoshiRunnerException {   Element rootElement=PoshiRunnerContext.getTestcaseRootElement(_testClassName);   List<Element> varElements=rootElement.elements("var");   for (  Element varElement : varElements) {     String name=varElement.attributeValue("name");     String value=varElement.attributeValue("value");     PoshiRunnerVariablesUtil.putIntoExecuteMap(name,value);   }   PoshiRunnerVariablesUtil.pushCommandMap();   Element commandElement=PoshiRunnerContext.getTestcaseCommandElement(classCommandName);   if (commandElement != null) {     PoshiRunnerStackTraceUtil.pushFilePath(classCommandName,"testcase");     PoshiRunnerExecutor.parseElement(commandElement);     PoshiRunnerStackTraceUtil.popFilePath();   } } 
addRewrite(0x0B,ProtocolConstants.Direction.TO_SERVER,true)
jsonModel.update(async)
showDialog(DIALOG_SYNC_ERROR)
showDialog(parent,message,title,options,defaultOptionIndex,icon)
hasNextChunk()
this.comparator
endPosition.set(Position.KEY_ODOMETER,50001)
Assert.assertNotNull(text)
@Override public Content detach(){   throw immutableError(this); } 
result1.getMatches()
GithubNotifications.showInfoDialog(myPane,"Connection successful for user " + user.getLogin(),"Success")
new String[10]
return 10_000; 
id=15857
Validator.isNull(portletResource)
strokePaint.getTypeface()
candidateMatchPosition=currentWordsIndex
buffer.setFlags(C.BUFFER_FLAG_DECODE_ONLY)
Util.threadFactory("Rate Limited Dispatcher",false)
myPopup.cancel()
Throwable ex
EvaluationResult<ActionLookupValue>
done
new ServletException("non-HTTP request or response")
ssl.has(CommonAttributes.CIPHER_SUITE)
!allowBlacklisting
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
args.length > 5
uri.getPath()
assertThat(context.getExtensions()).hasSize(43)
QUEUE_TRANSACTION_LOG_RECORD=43
getIntent().getExtras().getInt(EXTRA_PERSON_ID)
logger.debug("myq ReturnCode: {}",returnCode)
new IllegalArgumentException("Expected a proto but was: " + body.mimeType())
DEFAULT_MAX=1024
@RunWith(MockitoJUnit4Runner.class) public class JUnit4ExampleTest extends ExampleTest { } 
new DebugMediaCodecVideoRenderer(context,MediaCodecSelector.DEFAULT,allowedVideoJoiningTimeMs,mainHandler,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY)
grabFrame(true,true,false,false)
showMessage(context.getString(R.string.osmand_routing_experimental))
indexNameExpressionResolver().concreteIndices(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,30_000)
getServiceName()
checkCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS)
groupType == null
war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),"web.xml")
new ToolWindow.Border(true,false,false,false)
new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR)
Timber.e(e,"Error enabling compression",e)
currentGroupByExprData[index] != null
mph >= 10
public <A>S from(Expr<A> entity,A first,A... rest){   List<A> list=new ArrayList<A>(rest.length + 1);   list.add(first);   list.addAll(Arrays.asList(rest));   return from(entity,list); } 
year <= 0
unquotedValue.substring(idx + AS_CONNECTOR_WITH_SPACES.length(),unquotedValue.length())
new ModuleDescriptorImpl(Name.special("<built-ins module>"),storageManager,ModuleParameters.Empty.INSTANCE$)
targetDirectory == null
getChildMeasureSpec(widthMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
LOG.error(e,"Parser exited while decoding BSER data")
JavaCompletionData.addExpectedTypeMembers(parameters,result,position)
learnRate * 0.95f
myEditor.getComponent()
case build: 
bar.expectedMinimumMessageCount(1)
binding.getKey().getTypeLiteral().getType()
new StormClientHandler(client)
Build.VERSION.SDK_INT < 11
blockChainSummary.size() == 1
child1.setBytes(100)
LOG.error(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
new Exception()
String.format("Examples labeled as %s classified by model as %s: %d times%n",actual,expected,count)
Queue<String>
masm.add(64,resultRegister,zr,resultRegister,AArch64Assembler.ShiftType.LSL,encoding.shift)
value < minimumValue
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.short-title"),portletModel.getPortletId())
rootDir.mkdirs()
new DeleteOptions.Builder(ClientContext.getConf())
consumers.isEmpty()
onlyEnabled
-132758928
pc.getPlugin().equals(plugin)
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null))
aCheckIn("foo/bar.baz")
script.getBytes()
/**   * counter-clockwise   */ CCW(2)
String.format("%s : filtering out %s as it's stats is unavailable.",MINIMUMFREEMEMORY_FILTER_NAME,filteringTarget.toString())
((StringLiteral)literal).getSlice()
new IllegalArgumentException("Return type " + returnType + " does not match result "+ result.getClass())
printSelect(unionSelect.left(),sb)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true)
MAX_DEFAULT_FRACTIONS_DIGITS=4
RIGHT_ID_F=3535
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted,restricted)
serialVersionUID=215521212534239L
!displayContent.isReady() || !mPolicy.isScreenOn()
result.size() == 7
!tmp.exists() && !tmp.isDirectory()
USE_ROULETTE_WHEEL=true
String.format("Time taken: %d.%03ds",seconds,milliseconds)
into.get(i)
hasClassAnnotations()
HashSet<String>
logger.warn("an error")
new UnsupportedOperationException()
new MalformedException("Unrecognized message placeholder referenced: " + phName,objLitNode)
getFragmentManager().beginTransaction().add(android.R.id.content,peopleListFragment)
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
KBFolderServiceUtil.getFolder(getParentResourcePrimKey())
order=2
mock.expectedMinimumMessageCount(3)
this.messageService.monoPostAuthorizeFindById(1L).contextStart(withUser)
Object item
GL20.glGetShader(shader,pname,params)
synchronized (io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
Pair.of(pair.getLeft(),pair.getRight())
new PaymentType("CUSTOMER_PAYMENT","Customer Payment",false)
queuedChunk.provider.loadChunk(queuedChunk.x,queuedChunk.z)
LOG.error(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
callElement.toString()
to()
progress != null
private final DomAnchorImpl myParent; 
_buildTemplateWithGradle("freemarker-portlet","freemarker-dependency-management","--dependency-management-enabled","true")
mNavigationBarView.getPaddingStart()
uncompressedProto.length < 1000000
descrTextView.setVisibility(color)
p.getFileSystem(conf).delete(p)
TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MULT)
req.getContentLength()
ArrayList<UsageInfo>
blockIo && !ContainerThreadMarker.isContainerThread()
new StringPreference("map_underlay",null,true)
body.transferTo(position,Long.MAX_VALUE,target)
NullPointerException e
LanguageLevel.forElement(element).isPy3K()
postForm=false
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver)
!aClass.isInterface()
getTotalSpaces() > spaceProperty.getMaxSpaces()
+portNum
kbArticle.setPriority(priority)
new FrameV2()
_parms._sample_rate < 1
file.getPath()
position.offset(mLeft,mRight)
getOldValue()
private final ReplayingDecoderBuffer replayable=new ReplayingDecoderBuffer(); 
msg.what=SHOW_ZOOM_LEVEL_BUTTON_DELAY
NOTIFICATION_LED_OFF_TIME=500
new UnsupportedTemporalUnitException("Fields should be either date based or time based")
getConfig().getBoolean(ENABLED,false)
/**   * User: anna Date: 30-Jan-2006  */ public class ClassesScopeTreeStructureExpander implements ScopeTreeSctructureExpander {   private Project myProject;   public ClassesScopeTreeStructureExpander(  final Project project){     myProject=project;   }   public void treeWillExpand(  TreeExpansionEvent event) throws ExpandVetoException {     ProjectView projectView=ProjectView.getInstance(myProject);     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<ClassNode> classNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof FileNode) {           final FileNode fileNode=(FileNode)childNode;           final PsiElement file=fileNode.getPsiElement();           if (file instanceof PsiJavaFile) {             final VirtualFile virtualFile=((PsiJavaFile)file).getVirtualFile();             if (virtualFile == null || (virtualFile.getFileType() != StdFileTypes.JAVA && virtualFile.getFileType() != StdFileTypes.CLASS)) {               return;             }             final PsiClass[] psiClasses=((PsiJavaFile)file).getClasses();             if (classNodes == null) {               classNodes=new HashSet<ClassNode>();             }             commitDocument((PsiFile)file);             for (            final PsiClass psiClass : psiClasses) {               if (psiClass != null && psiClass.isValid()) {                 final ClassNode classNode=new ClassNode(psiClass);                 classNodes.add(classNode);                 if (projectView.isShowMembers(ScopeViewPane.ID)) {                   final List<PsiElement> result=new ArrayList<PsiElement>();                   PsiClassChildrenSource.DEFAULT_CHILDREN.addChildren(psiClass,result);                   for (                  PsiElement psiElement : result) {                     psiElement.accept(new JavaElementVisitor(){                       @Override public void visitClass(                      PsiClass aClass){                         classNode.add(new ClassNode(aClass));                       }                       @Override public void visitMethod(                      PsiMethod method){                         classNode.add(new MethodNode(method));                       }                       @Override public void visitField(                      PsiField field){                         classNode.add(new FieldNode(field));                       }                       @Override public void visitReferenceExpression(                      PsiReferenceExpression expression){                       }                     } );                   }                 }               }             }             node.remove(fileNode);           }         }       }       if (classNodes != null) {         for (        ClassNode classNode : classNodes) {           node.add(classNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   public void treeWillCollapse(  TreeExpansionEvent event) throws ExpandVetoException {     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(PackageDependenciesNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<FileNode> fileNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof ClassNode) {           final ClassNode classNode=(ClassNode)childNode;           final PsiElement psiElement=classNode.getPsiElement();           if (psiElement != null && psiElement.isValid()) {             if (fileNodes == null) {               fileNodes=new HashSet<FileNode>();             }             fileNodes.add(new FileNode(psiElement.getContainingFile(),true));           }           node.remove(classNode);         }       }       if (fileNodes != null) {         for (        FileNode fileNode : fileNodes) {           node.add(fileNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   private DependencyNodeComparator getNodeComparator(){     return new DependencyNodeComparator(ProjectView.getInstance(myProject).isSortByType(ScopeViewPane.ID));   }   private void commitDocument(  final PsiFile file){     final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);     final Document document=documentManager.getDocument(file);     documentManager.commitDocument(document);   } } 
layout == null
visitNode(node,context)
modified=false
mNumAppsLaunchedSinceSwipeUpTipDismiss == swipeUpShowOnAppLauncherAfterDismiss
element == null
getValue(activity.getExtraData(),"title",kbArticle.getTitle())
components.beforeEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
debug=false
UsageDetailMode.DETAIL == usageDetailMode
_logloss / _count
type.getSimpleName()
new StringBuilder()
Double.toString(d)
field.createField(fieldType.indexedToReadable(indexedValue),0.0f)
new IllegalStateException()
x < 7
id > EVENT_CODE_BY_ID.length
Value delta
public abstract ReferenceType deriveTypeParameters(ResolvedTypeParametersMap typeParametersMap); 
tokens[position].isImmunized()
@UriParam(label="producer",defaultValue="1") private Integer requestRequiredAcks=1; 
DefaultAtmosphereRequest.newInstance()
new GroovyPagesTemplate(context,request,response,pageMeta)
new StepMeta(log,fromstepid,fromstepname,(StepMetaInterface)tii)
StepVerifier.create(source.flux().bufferWhen(open,o -> close)).then(() -> {   source.assertSubscribers();   open.assertSubscribers();   close.assertSubscribers();   open.next(1); } ).then(() -> {   open.assertSubscribers();   close.assertSubscribers();   source.complete(); } ).expectNextMatches(List::isEmpty).expectComplete()
noParam == null
appearance.getFont(attr)
callerPrincipalCallback == null
TestUtils.getService("test")
boost == -1
multipleTopologyChangeWorker()
getProperty().contains("spark.yarn.keytab")
public ByteBuf getBufferFor(int index) throws IOException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
new CommentByBlockCommentHandler().invoke(myFixture.getProject(),myFixture.getEditor(),myFixture.getFile())
IndexReader r=IndexReader.open(dir); 
PyExpressionStatement newExpression=createExpression(project,name,declaration); 
showStatusChangedInChat=true
request.getTaskDefinitionKey()
rackIdToNodes.get(rid)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PLAY_FUNCTION)
super.remove(key)
logger.info("Adding PropertySource: " + source + " in group: "+ basename)
rc.tiles.size() > 35
LOG.info("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
Arrays.asList("properties",GormProperties.IDENTITY,GormProperties.VERSION,"domainClass","dirty",GormProperties.ERRORS,"dirtyPropertyNames")
new GdxRuntimeException("Failure reading Vorbis.")
edge.setType(edgeDefault)
file != null
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)
public TvShowFragment getListener(){   return listener; } 
new MongoClient()
new IllegalStateException()
entryString.substring(i + 1)
GrIntroduceHandlerBase.findAnchor(context.getOccurrences(),clazz)
verifyAttributes(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
fragment == null
ReviewChangesActivity.Companion.startForResult(this,view,requestModel,getPresenter().getRepoId(),getPresenter().getLogin(),pullRequest.getNumber(),isAuthor)
server.getSegment(segment.getIdentifier()) != null && peon.getSegmentsToLoad().contains(segment)
mMediaMetadataRetriever.captureFrame()
values == null
INSTANCE.rand(shape)
db.activityDao().getNullableByKey(dbSession,activityKey)
!record.isMms() || record.isMmsNotification()
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)
manager.enable(keyId)
Assert.assertEquals(2,propertyCategories.size())
Integer.parseInt("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
DISABLE_TIMEOUT=5000
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
mWm.addAppToken(0,null,0,0,false,false)
pojo.valueFields(includeKeys)
(Publication)resourceByRegIdMap.get(registrationId)
CxfEndpointBean.class
0 == CheckUtils.parseFloat(text,type)
mBitmapState.mBitmap.hasAlpha()
expected=536871104
public Integer getBuffer(){   return this.buffer; } 
type != null && interpolationInterval > 0
IncomingRepairStreamTracker.class
eq(ethernetIface)
jdk.getHomeDirectory() == null
entry != null
Math.max(filterExplanations.get(i).getValue(),maxFactor)
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
future.channel().write(request)
unittests("tests_pydevd_python/test_debugger.py",null)
!canSupportPublicClient(client)
quantaRemaining > quantaPerBlock
Constant.messages.getString("start.gui.cmdline.invalid.session.options",CommandLine.SESSION,CommandLine.NEW_SESSION)
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),name)
o1 instanceof String
new int[684]
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null)
100 * 1024 * 1024
conf.set("tez.queue.name",null)
parent.getChild(jarfile)
/**   * {@link Builder#postfixWith(Tree,String)}   */ public static Fix postfixWith(Tree node,String postfix){   return builder().postfixWith(node,postfix).build(); } 
freezeThisOneIfNeeded != null
endpoint.expectedMessageCount(1)
querySkuDetails(ITEM_TYPE_SUBS,inv,moreItemSkus)
inputBuffer.nbRead() > 0
System.getProperty("java.io.tmpdir")
Long oldValue=(Long)conn.get(getName()); 
existingOne == null
/**   * Hook some methods which we want to create an easier interface for developers.  */ private static void initXbridgeZygote() throws Exception {   final HashSet<String> loadedPackagesInProcess=new HashSet<String>(1);   findAndHookMethod(ActivityThread.class,"handleBindApplication","android.app.ActivityThread.AppBindData",new XC_MethodHook(){     protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ActivityThread activityThread=(ActivityThread)param.thisObject;       ApplicationInfo appInfo=(ApplicationInfo)getObjectField(param.args[0],"appInfo");       ComponentName instrumentationName=(ComponentName)getObjectField(param.args[0],"instrumentationName");       if (instrumentationName != null) {         XposedBridge.log("Instrumentation detected, disabling framework for " + appInfo.packageName);         disableHooks=true;         return;       }       CompatibilityInfo compatInfo=(CompatibilityInfo)getObjectField(param.args[0],"compatInfo");       if (appInfo.sourceDir == null)       return;       setObjectField(activityThread,"mBoundApplication",param.args[0]);       loadedPackagesInProcess.add(appInfo.packageName);       LoadedApk loadedApk=activityThread.getPackageInfoNoCheck(appInfo,compatInfo);       XResources.setPackageNameForResDir(appInfo.packageName,loadedApk.getResDir());       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=appInfo.packageName;       lpparam.processName=(String)getObjectField(param.args[0],"processName");       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=appInfo;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);       if (appInfo.packageName.equals(INSTALLER_PACKAGE_NAME))       hookXposedInstaller(lpparam.classLoader);     }   } );   findAndHookMethod("com.android.server.ServerThread",null,Build.VERSION.SDK_INT < 19 ? "run" : "initAndLoop",new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       loadedPackagesInProcess.add("android");       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName="android";       lpparam.processName="android";       lpparam.classLoader=BOOTCLASSLOADER;       lpparam.appInfo=null;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);     }   } );   hookAllConstructors(LoadedApk.class,new XC_MethodHook(){     @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {       LoadedApk loadedApk=(LoadedApk)param.thisObject;       String packageName=loadedApk.getPackageName();       XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());       if (packageName.equals("android") || !loadedPackagesInProcess.add(packageName))       return;       if ((Boolean)getBooleanField(loadedApk,"mIncludeCode") == false)       return;       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=packageName;       lpparam.processName=AndroidAppHelper.currentProcessName();       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=loadedApk.getApplicationInfo();       lpparam.isFirstApplication=false;       XC_LoadPackage.callAll(lpparam);     }   } );   findAndHookMethod("android.app.ApplicationPackageManager",null,"getResourcesForApplication",ApplicationInfo.class,new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ApplicationInfo app=(ApplicationInfo)param.args[0];       XResources.setPackageNameForResDir(app.packageName,app.uid == Process.myUid() ? app.sourceDir : app.publicSourceDir);     }   } );   if (!new File(BASE_DIR + "conf/disable_resources").exists()) {     try {       hookResources();     }  catch (    Exception e) {       log("Errors during resources initialization");       logResourcesDebugInfo();       throw e;     }   }  else {     disableResources=true;   } } 
162 + (USE_OLD_HISTORY ? 1000 : 0)
action == KeyEvent.ACTION_UP
x + 1 > size
new JSONObject()
setFlag(FLAG_ONLY_ALERT_ONCE,autoCancel)
focusable.canTakeAccessibilityFocusFromHover()
freezeBalanceContract.getFrozenBalance() / 10000
SpellCheckerBundle.message("word.0.1.is.misspelled",token.getElement().getLanguage())
work > 0
searchUICore.search(text,new ResultMatcher<SearchResult>(){   SearchResultCollection regionResultCollection=null;   SearchCoreAPI regionResultApi=null;   List<SearchResult> results=new ArrayList<>();   @Override public boolean publish(  SearchResult object){     if (paused || cancelPrev) {       if (results.size() > 0) {         getResultCollection().addSearchResults(results,true,true);       }       return false;     } switch (object.objectType) { case SEARCH_API_FINISHED:       final SearchCoreAPI searchApi=(SearchCoreAPI)object.object;     final List<SearchResult> apiResults;   final SearchPhrase phrase=object.requiredSearchPhrase; final SearchCoreAPI regionApi=regionResultApi; final SearchResultCollection regionCollection=regionResultCollection; final boolean hasRegionCollection=(searchApi == regionApi && regionCollection != null); if (hasRegionCollection) { apiResults=regionCollection.getCurrentSearchResults(); }  else { apiResults=results; } regionResultApi=null; regionResultCollection=null; results=new ArrayList<>(); showApiResults(apiResults,phrase,hasRegionCollection); break; case SEARCH_API_REGION_FINISHED: regionResultApi=(SearchCoreAPI)object.object; final SearchPhrase regionPhrase=object.requiredSearchPhrase; regionResultCollection=new SearchResultCollection(regionPhrase).addSearchResults(results,true,true); showRegionResults(regionResultCollection); break; case PARTIAL_LOCATION: break; default : results.add(object); } return false; } @Override public boolean isCancelled(){ return paused || cancelPrev; } } )
AbstractRanking.refreshMinMax(this,graph)
ftest.numRows() < validation_rows
libraryOrderEntry.isValid()
OptimisticOptimizations.ALL.remove(OptimisticOptimizations.Optimization.UseExceptionProbability,OptimisticOptimizations.Optimization.RemoveNeverExecutedCode)
Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
mapCache1.addAndGet("4",1L)
"MySQL".equals(databaseProductName) || "Google SQL Service/MySQL".equals(databaseProductName)
settings.isShowExcludedFiles() == isShowExcludedFiles() || settings.isUseFileNestingRules() == isUseFileNestingRules()
LOGGER.info("Using proxy address [{}]")
throwable.getCause()
new UserServiceBeanDefinitionParser()
!file.isValid()
synchronized (mVolumes) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
!isAutopopupCompletion()
/**   * {@inheritDoc}  */ public Comparable getTo(){   return Integer.valueOf(to); } 
isCancelled0(result)
Integer.valueOf(tupleValue)
row > getRowCount() - 1
HashMap<Object,AggregationStrategy>
public class XpathRegressionFallThroughTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
return ANTUMN; 
logger.warn("Callback onResult call produced an error",e)
new IndexWriter(dir2,new StandardAnalyzer(),true)
GlobalContextKey.create("_java_compiler_usage_stats_")
mc.getMod() == null
getResources().getString(R.string.upgrade_import_no_file_found)
/**   * {@inheritDoc}  */ public Object get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
assertEquals(13,lm.getFields().size())
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_unique_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR))
new TitanException("Unable to close transaction",Iterables.getOnlyElement(txCloseExceptions.values()))
VersionNumber.parse(playVersion).getMinor()
getRight() + getPaddingRight()
Character.isLetter(ch)
Glide.with(activity).load(url).downloadOnly(size.getWidth(),size.getHeight())
Long value=list.get(i); 
cacheDirectory.exists()
/**   * <p>A  {@code TaskInputs} represents the inputs for a task.</p><p>You can obtain a  {@code TaskInputs} instance using {@link org.gradle.api.Task#getInputs()}.</p>  */ @HasInternalProtocol public interface TaskInputs extends TaskInputsVersion2 {   /**   * Returns true if this task has declared the inputs that it consumes.  * @return true if this task has declared any inputs.  */   boolean getHasInputs();   /**   * Returns the input files of this task.  * @return The input files. Returns an empty collection if this task has no input files.  */   FileCollection getFiles();   /**   * Registers some input files for this task.  * @param paths The input files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder files(  Object... paths);   /**   * Registers some input file for this task.  * @param path The input file. The given path is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder file(  Object path);   /**   * Registers an input directory hierarchy. All files found under the given directory are treated as input files for this task.  * @param dirPath The directory. The path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder dir(  Object dirPath);   /**   * Returns the set of input properties for this task.  * @return The properties.  */   Map<String,Object> getProperties();   /**   * <p>Registers an input property for this task. This value is persisted when the task executes, and is compared against the property value for later invocations of the task, to determine if the task is up-to-date.</p> <p>The given value for the property must be Serializable, so that it can be persisted. It should also provide a useful  {@code equals()} method.</p><p>You can specify a closure or  {@code Callable} as the value of the property. In which case, the closure or{@code Callable} is executed to determine the actual property value.</p>  * @param name The name of the property. Must not be null.  * @param value The value for the property. Can be null.  */   TaskInputs property(  String name,  Object value);   /**   * Registers a set of input properties for this task. See  {@link #property(String,Object)} for details.  * @param properties The properties.  */   TaskInputs properties(  Map<String,?> properties);   /**   * Returns true if this task has declared that it accepts source files.  * @return true if this task has source files, false if not.  */   boolean getHasSourceFiles();   /**   * Returns the set of source files for this task. These are the subset of input files which the task actually does work on. A task is skipped if it has declared it accepts source files, and this collection is empty.  * @return The set of source files for this task.  */   FileCollection getSourceFiles();   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param paths The paths. These are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #files(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object... paths);   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #file(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object path);   /**   * Registers a source directory for this task. All files under this directory are treated as source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #dir(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return this  * @deprecated Use {@link #dir(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs sourceDir(  Object path); } 
groupMetaCache.get(userName)
!conf.get("spark.submit.deployMode").equals("cluster")
polyLats.length - 1
ServiceLoader.load(ReportingAdministrator.class)
target.toFile().isDirectory()
alertEventHandler != null
transform(matrix,source,width,height,false,recycle)
text.length() == 0
-1
i == -1
service.setEventService(domainEventNotifier)
Messages.showErrorDialog("Error loading package list:" + e.getMessage(),"Packages")
currentTestStartTime.startedAt()
tokens.next().expect(Token.IDENTIFIER,'{')
ctx.write("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
theContact=props.getProperty(TERMS_URL_PROPERTY)
reporter.report("A class cannot have default members",n)
batteryVp >= low
!ModLoaderHelper.sidedHelper.clientConnectionClosed(manager,mod)
sanitaryName.equals(c.getPrettyName())
expressionType.equals(JetStandardClasses.getUnitType())
collisionPoints.get(2)
new OneRun(49.8020,9.2470,50.4940,10.1970,125633,2253)
parent.decrementPrioritizableForTree(amt)
100 * 1024 * 1024L
StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
FilteringClassLoader loggingClassLoader=classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(),loggingSpec); 
String.format("Error while checking frozen types on field %s of %s %s: %s",field.getName(),classDescription,field.getDeclaringClass().getName())
outputType == ProcessOutputTypes.STDERR
Simple.of(Runtime.NoneType.class)
Double.valueOf(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
this.cusolverDnSsyevd.invoke(solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
fm.beginTransaction().add(R.id.stats_container,mStatsPhoneFragment)
LOG.error("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
Key<String>
DatabaseDescriptor.getRpcAddress().toString()
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
public void setEnablePush(long enablePush) throws ConnectionError {   if (enablePush > 1) {     throw new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR);   }   this.enablePush=(enablePush == 1); } 
PoshiElement returnElement=null; 
DLFileShortcutLocalServiceUtil.fetchDLFileShortcut(primaryKey)
note1.id()
new CacheCreateConfigOperation(config,true)
new RuntimeConfigurationError("No attest runner found in selected interpreter")
responseType != null
getter.getRawReturnType()
logger.fine("Packed texture. Reading directly from the blend file!")
new FakeCommitsInfo(fakeCommits,base,resultRef)
value != null
outputDir.getCanonicalPath()
new Instant(15L)
peopleListFromJSON(jsonArray,localTableBlogId,false,false)
getIntent().getAction() == null
Preconditions.checkNotNull(manager)
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,false)
dispatched.remove(node)
field.getElementType()
folder.getModel()
log.warn("No slayer task for {} in the Task database",taskName)
length == 0
STATUS.isStatusDefault(mStatus)
reader.numDocs()
public static final class TutorialSupportFragmentImpl extends TutorialFragment {   private TutorialOptions mTutorialOptions;   public TutorialSupportFragmentImpl(){   }   @SuppressLint("ValidFragment") private TutorialSupportFragmentImpl(  @NonNull TutorialOptions tutorialOptions){     mTutorialOptions=tutorialOptions;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRetainInstance(true);   }   @Override protected TutorialOptions provideTutorialOptions(){     return mTutorialOptions;   } } 
workspace.runBuckBuild("build","//:provided_only")
connection().createPacketCollectorAndSend(ping).nextResultOrThrow()
session.close(new CloseReason(code,reasonPhrase))
Object edge
current.localDeletionTime > gcBefore
distanceToView(focused) > 0
parameters.length < limit
isFieldKept(uniqueField,input)
/**   * An attachment provider that locates the attach API directly from the system class loader.  */ enum ForJigsawVm implements AttachmentProvider {/**   * The singleton instance.  */ INSTANCE; /**   * {@inheritDoc}  */ public Accessor attempt(){   return Accessor.Simple.of(ClassLoader.getSystemClassLoader()); } } 
line.startsWith("//") || line.startsWith("--") || line.startsWith("#")|| line.startsWith("REM")|| line.startsWith("/*")
mFormEntryModel.getCaptionHierarchy()
logger.trace("Receive queue ADD: Length={}",recvQueue.size())
subjectAlternativeNameDomains != null
"Trying to use view with tag " + tag + " as a parent, but its Manager doesn't extends ViewGroupManager"
new FileResource(tarFile)
destinations[i].getQualifiedName()
bicycleNotDefinedValues.put("bridleway",5d)
primaryServer.getClass()
equalTo(1)
formService.populateEntityForm(cmd,entity,subRecordsMap,entityForm)
super(project,manager); 
PyExpressionStatement dict=elementGenerator.createFromText(LanguageLevel.forElement(expression),PyExpressionStatement.class,"{" + stringBuilder.toString() + "}"); 
args.length == 3
statesByName.put(name,state)
!entry.hasChanged()
_connection.onIdleExpired()
asList(DERBY,FIREBIRD,ORACLE)
ThirdEyeUtils.getTimeSpecFromDatasetConfig(datasetConfig)
m.shapeInfoDataBuffer()
clear(request,plid)
(Long)countObj
assertEquals(1,triggers.size())
Assert.assertEquals(20,as.getAllGlobalProperties().size())
idGenerator.generateId()
IllegalArgumentException.class
paintFooterLine.setColor(FOOTER_COLOR)
event.init(viewTag)
p == null
name.equals(blacklistName)
new ConnectorTableLayout(handle)
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(10000)
conn.getResponseCode() == 201
Value emitByteSwap(Value operand); 
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding())
application.map(version::compareTo).orElse(0) > 0
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("DHE-DSS-DES-CBC3-SHA",KeyExchange.EDH,Authentication.DSS,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA")
100 * width
info.crashInfo.stackTrace.length() > 10000
this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
buffersReadyFlyweight.bufferLength(index,termLength)
cache.remove(key,null)
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withAdmin)
stat.st_size.get()
getStubOrPsiChild(PyElementTypes.TARGET_EXPRESSION)
viewable=false
FSDirectory.getDirectory(sub.toString(),true)
findDelegate(name)
(V)identifier
tplSnd.getParent().getChildren()[1]
new ConnectionError(sm.getString("http2Parser.headers.wrongFrameType",connectionId,Integer.toString(headersCurrentStream),frameType),Http2Error.COMPRESSION_ERROR)
myCopyDocument.addDocumentListener(new DocumentAdapter(){   @Override public void documentChanged(  DocumentEvent e){     if (isUpToDate()) {       myTranslation.addFirst(e);     }   } } )
case SUBCMD_TRIGGER_CHANNEL: 
username != null
route.setDelay(5000)
new IndexWriter(dir,anlzr,true)
mIconColor != null
x2 - x2
property.getGetter().value()
public DerivedBuilder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
styleBox.setSelectedIndex(0)
teleport(new Target(entity),chargeFor)
SystemProperties.getBoolean("persist.enable_task_snapshots",true)
await().atMost(5,TimeUnit.SECONDS)
StringBuffer buffer=new StringBuffer("("); 
new MqttFixedHeader(SUBACK,false,AT_LEAST_ONCE,false,0)
new IndexWriter(dir,new WhitespaceAnalyzer())
TokenSet.create(RegExpTT.CHARACTER,RegExpTT.CARET,RegExpTT.DOLLAR)
new MapStoreWithStoreCount(expectedStoreCount,300,100)
HashSet<Item>
destroyPools()
EstimatedHistogram.serializer.serialize(rowSizes,out)
GenericIntegrationTest.class
left == right
!db.isSyncMode()
XContentType.fromRestContentType(values[0])
req.startAsync()
z.muli(activationDerivative)
MANAGEMENT_API_MICRO_VERSION=0
Class.forName(name)
transform.getValue().getScaleX() != 0f
r.destination != null
out.write(ENUM_CONSTANT_VALUE_TAG)
comparator.compare(value,answer) < 0
mDatamodels[1] != null
/**   * Retrieves X.  * @return a value  */ public T getX(){   return null; } 
stmt.executeQuery(sql)
vertexIndex % 3 == 0
seconds * 1000
PathUtils.concatPath(filePath,YML_FILE_DIR)
RuntimeException e
new SimplexNoise()
t instanceof ThreadDeath
revWalk.release()
onFocusChange(mRefreshButton,false)
new ExecutionEnvironment(new MockProfile(),myProject,null)
!event.isError()
dispatchedMessage.remove(messageId)
assertEquals(savedPayment4Again.getLastSuccessStateName(),"AUTH_SUCCESS")
getLog()
new WebApplicationException(serverError(e))
BUTTON_QUIESCENT_ALPHA=0.6f
knownActions.contains(handler)
100
archivePath.toString()
b.setSubject(TEST_SUBJECT).setSentDate(SENT_DATE).setHideTimeZone(false)
InspectionsConfigTreeTable.getAdditionalShiftIfMac()
appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
super.onPause()
n <= colPI
new ShowArticleOnTouchListener(title,activity,helpFileName)
Deque<Object>
SSLContext.getDefault().createSSLEngine()
new Field(name,DateField.dateToString(value),true,true,true)
maxIdxPerLine - 2
localExclude != null
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL)
timeMillis - MILLIS_IN
arg1 > arg1
batteryVp >= medium
thread.sleep(10)
width / images.size()
indexWriter.expungeDeletes(false)
!states[0].hollow
@Test public void testSimplePutTake() throws OutOfCapacityError {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   assertEquals(groupFactory.numCalls.get(),2);   SchedulerQueryContext r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupTwo); } 
ColorResources.getColor("tabTitle")
SystemTable.setLocalHostId(hostId)
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
assertEquals(adjustedInvoice.getAmount().compareTo(BigDecimal.ZERO),1)
/**   * @return  */ private StringBuffer getCurrentBuffer(){   if (!TransactionSynchronizationManager.hasResource(bufferKey)) {     TransactionSynchronizationManager.bindResource(bufferKey,new StringBuffer());     TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){       @Override public void afterCompletion(      int status){         clear();       }       @Override public void beforeCommit(      boolean readOnly){         try {           if (!readOnly) {             complete();           }         }  catch (        IOException e) {           throw new FlushFailedException("Could not write to output buffer",e);         }       }       private void complete() throws IOException {         StringBuffer buffer=(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey);         if (buffer != null) {           String string=buffer.toString();           byte[] bytes=string.getBytes(encoding);           int bufferLength=bytes.length;           ByteBuffer bb=ByteBuffer.wrap(bytes);           int bytesWritten=channel.write(bb);           if (bytesWritten != bufferLength) {             throw new IOException("All bytes to be written were not successfully written");           }           if (forceSync) {             channel.force(false);           }           if (TransactionSynchronizationManager.hasResource(closeKey)) {             closeCallback.run();           }         }       }       private void clear(){         if (TransactionSynchronizationManager.hasResource(bufferKey)) {           TransactionSynchronizationManager.unbindResource(bufferKey);         }         if (TransactionSynchronizationManager.hasResource(closeKey)) {           TransactionSynchronizationManager.unbindResource(closeKey);         }       }     } );   }   return (StringBuffer)TransactionSynchronizationManager.getResource(bufferKey); } 
log.warn("Error processing event, NOT scheduling retry for event='{}', retryNb='{}'",originalNotificationEvent,effectiveDate,retryNb,exception)
new IndexWriter("index",ANALYZER,false)
id=54
new NTCredentials(PROXY_USER,PROXY_PASS,localHost,PROXY_DOMAIN)
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractACLCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
mFrameSlots.remove(slot)
id=15
resource.removeExtractor(input.getId(),extractorId)
methodAnnotationListField != null
endBounds.width()
(KvCoder)windowedInputCoder
Arrays.asList(createBlock(0),createBlock(1),createBlock(2),createBlock(3),createBlock(4),createBlock(5))
Integer maxIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
StorableField[]
this.children.add(body)
PASSWORD_SCRYPT_N=13
tnCount=100
-33.865436156120467
d1.isTimeOut()
internalCluster().getInstance(ClusterService.class)
internalAddPlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
smartLockHelper != null
mBluetoothService.notifyIncomingA2dpConnection(address,true)
new IndexWriter(startDir,new WhitespaceAnalyzer(),true)
super(maxHits); 
PlatformPatterns.or(psiElement().withParent(PsiExpression.class),psiElement().inside(PsiClassObjectAccessExpression.class))
initial(rand)
appWidth > mHeaderMinWidth
r[1]
h - x
LoggerFactory.getLog(MongoQueryCreator.class)
actionCache.remove(key)
allowCredentials=false
request.params()
RedisRunner.startDefaultRedisServerInstance()
i < 10
Response.ok(Status.OK)
executableTypes.size() == 1
s.trim().endsWith("#")
final SimulatedTrackball mSimulatedTrackball; 
string.toUpperCase()
ViewWSRPClickToInvokeResouceServingPhaseRDPTest.class
mDataNotSet
log.warn("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
4 * width * height
subjectConfData.getNotOnOrAfter().isAfterNow()
OrganizationMembershipPolicyUtil.checkRoles(null,filteredSiteUserGroupRoles)
log.info("Failed to retrieve instances from Eureka")
final GrMethod constructor
MonitoringWebUpgrade.class
ISOChronology.getInstance()
REQUEST_TIMEOUT=1000
GlobalContext.getInstance().getAppTheme() == R.style.AppTheme_Four
new LineNumberRange(1,0,move)
Map<IdeFrame,GestureListener>
MAX_CACHE_PREPARED=50
user.getBytes(StringUtils.UTF8)
speed < 80
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends AbstractWalletActivity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK) {       final String input=intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT);       new StringInputParser(input){         @Override protected void handlePaymentIntent(        final PaymentIntent paymentIntent){           SendCoinsActivity.start(SendCoinsQrActivity.this,paymentIntent);           SendCoinsQrActivity.this.finish();         }         @Override protected void handleDirectTransaction(        final Transaction transaction) throws VerificationException {           final WalletApplication application=getWalletApplication();           application.processDirectTransaction(transaction);           SendCoinsQrActivity.this.finish();         }         @Override protected void error(        final int messageResId,        final Object... messageArgs){           dialog(SendCoinsQrActivity.this,dismissListener,0,messageResId,messageArgs);         }         private final OnClickListener dismissListener=new OnClickListener(){           @Override public void onClick(          final DialogInterface dialog,          final int which){             SendCoinsQrActivity.this.finish();           }         } ;       } .parse();     }  else {       finish();     }   } } 
log.debug("Unexpected exception on closing transaction.  Cause: " + e)
GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))
validator.warning("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
QMMObject[]
new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,false)
Assert.assertEquals(122L,ownerCapsuleNew.getNetUsage())
createMessageConsumer(session,destinationName,messageSelector,false,null,true)
SystemInfo.isMac ? 5 : 2
++i
mock.expectedMessageCount(3)
writeRepeatedFixed64(id,val)
userRecord.mClientRecords != null
storeDirList.length > (numBackups + 1)
in.readVInt()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
uuids.split("/")
s <= 2000
vp.getCamera().resize(width,height,true)
new CircularClipper(mDetail)
getDelegate().handle(exchange).otherwise(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
tempBlock.getCommitPath()
MessagingService.instance().sendRR(message,target,handler)
avatar == null
row.getTable().remove(row.getIndex())
JSRootConfiguration.getInstance(getProject()).storeLanguageLevel(JSLanguageLevel.JS_1_7)
topActivity != null
versionObject.getVersion()
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",BIGINT)
url.addArgument(getAttributeValue(nodeAtts,"name"),tempNode.getFirstChild().getNodeValue())
Class.forName(ORIGIN_EXECUTABLE).getConstructor()
zoom < 15
mIconAttrId > 0
order.isCurrent()
taskDao.findByUserId(1L,new Sort(Direction.ASC,"id"))
/**   * Pops a constructor call from the enclosing constructor call stack.  * @return the popped call  */ public Expression popEnclosingConstructorCall(){   return enclosingConstructorCalls.removeFirst(); } 
Assert.assertEquals(2,latch.getCount())
escape=jp.getIntValue() != 0
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource,msg)
LOGGER.debug("Cache expiration duration after reads is set to [{}]",currentDuration)
EXCEPTION_PATTERN.matcher(error)
this.settings.analyzeWildcard(DEFAULT_ANALYZE_WILDCARD)
sDefaults.putBoolean(BOOL_SHOW_CDMA,false)
this.saveTotalNetWeight(0L)
new SkylarkTest()
datastoreFactory.getDatastore(c.getPipelineOptions(),v1Options.getProjectId())
url.equals(completeUrl)
s.elapsedTime(TimeUnit.NANOSECONDS)
PREVIEW_FRAME_TIMEOUT=300
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
lock.tryLock(3,TimeUnit.SECONDS)
Thread.sleep(100)
myListeners.add(listener)
Class.forName(className)
renderManager.render(tpf)
cell.recon == null
err.jspError("jsp.error.tld.mandatory.element.missing","jsp-version")
/**   * Needed for statistics.   */ private final LongAdder rejectedJobsCnt=new LongAdder(); 
getSelectedColorRes()
in.readStringNull(8)
exchFut.discoveryEvent().node()
Log_OC.wtf(TAG,"\t file is NULL")
new byte[160]
calculateRoute(lastFixedLocation,finalLocation,currentGPXRoute)
traces.set(null)
edge.setType(type)
collectCount < lim
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath")
indexBuf.getData().capacity()
mContext.getPackageManager().getApplicationInfo(sbn.getPackageName(),0)
parser.parse("-u",username,"-p",password,"-U",url,"--path.conf",conf.toString())
new ApiException(ApiException.Type.BAD_FORMAT)
new OpenFileDescriptor(project,selectedFiles[i],0)
elementsToDelete == null
CHAIN_CONTRUCTION
assertEquals("Size of " + r,10,r.size())
handler.waitFor()
new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration))))
queryIndex == 0
forced == null || con.getListener().isForceDefault()
uri.getAssetName().toString()
super.getHibernateTemplate().executeFind(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     crit.add(Expression.allEq(queryMap));     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
context.getLocation(node)
DomAnchorImpl<DomElement>
Preconditions.checkState(subscriptionId != null || !failOnMissingSubscription)
iteration=0
isPrimitive(type)
(count + numSkipped + skipInterval) > df
myVirtualFile != null
klass.getDeclaredFields(false,declaredFields)
metadata.getFaces()
@Bean @Primary Repository repository(){   return new RepositoryImpl(systemProperties(),keyValueDataSource(),keyValueDataSource(),this); } 
PsiFormatUtil.getExternalName(psiMethod)
meta.setContentEncoding(Mimetypes.MIMETYPE_OCTET_STREAM)
GitLineHandler h=new GitLineHandler(project,root,GitCommand.INIT); 
r1.getName()
WebUtils.isForward(request)
didtimeout=false
mPowerManager.wakeUp(SystemClock.uptimeMillis())
hasMatch=true
provider.addRootSetChangedListener(this,myProject)
ArrayIndexOutOfBoundsException e
JMeterUtils.getPropDefault("proxy.pause",1000)
MonitoringPortletImpl.isMonitoringPortletRenderRequest()
pathURL.toURI().getPath()
EventQueue.isDispatchThread()
buffer.writeInt(INT32_BYTE_SIZE)
pending_native(fd)
new WeightedRandomChestContent(item,max,max,weight)
Size.kilobytes(32)
assertEquals(3,sqlStatements.size())
Byte.valueOf(value.toString())
ITERATIONS=100
List<SuggestedFix>
getLayoutIndex(upNodeIndex)
i=10000
assertThat(list.params()).hasSize(4)
ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS=450
new EnumValidator(ParticipantStatus.class,false,false)
leafOutcomeValue.advance(valuesDocID)
mCursor.deactivate()
new EnterSelectionDialog(shell,props,tablenames,Messages.getString("AccessOutputDialog.Dialog.SelectATable.Title"),Messages.getString("AccessOutputDialog.Dialog.SelectATable.Message"))
((MasterSlaveDataSource)dataSource).getAllDataSources()
reporter.report("\"default\" methods must have a body",n)
synchronized (this) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0")
limit=10000
this.getTable()
MatchingFilters filters=new MatchingFilters(Module.LUCENE,Target.LUCENE); 
enabled.set(true)
Integer.parseInt(args.get(2))
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
(byte)0xF7
route.isDeviceTypeBluetooth()
data.getAvatar() != null
i < 100
HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod())
mn.getTypeDescriptor().equals(candidate.getTypeDescriptor()) && !mn.isAbstract()
new IndexWriter(directory,analyzer,false)
!projectGeneratorParameters.isWithoutTests()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_strmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Log.info("Disable autoInstallOSGiBundles as the contexts folder '" + scandir.getAbsolutePath() + " does not exist.")
3
"Camera resolution: " + screenResolution
suggestUniqueVariableName(name,place,false)
LOG.warn("DataNode is out of memory. Will retry in 30 seconds.",ie)
CodeStyleManager.getInstance(myProject).reformatTextWithContext(file,ranges)
portletDataContext.addReferenceElement(entityStagedModel,entityElement,layout,PortletDataContext.REFERENCE_TYPE_DEPENDENCY,true)
getFragmentManager().beginTransaction().replace(android.R.id.content,personDetailFragment)
new RecordReaderDataSetIterator(rr,new SelfWritableConverter(),batchSize,labelIndex,numPossibleLabels,regression)
socket.closeLatch.await(1,TimeUnit.SECONDS)
MathUtils.convertLongToInt(length)
new Lock.With(directory.makeLock("commit.lock")){   public Object doBody() throws IOException {     segmentInfos.write(directory);     return null;   } } 
(spoon.getRepository() != null) && (spoon.getRepository().getTransformationLock(transMeta.getObjectId()) != null)
kbase.newStatefulSession(conf)
color.length() > 0
!dockOntopOrLeft
Assert.assertEquals(editor.getMarkersQuantity(ERROR_OVERVIEW),13)
pToX - pToY
expression.length() - 2
null != rootCause
endFunction("get_column_statistics_by_partition: ",statsObj != null)
{0,750L}
max=2
entry.doesSupportPartial()
StringUtils.stringToInt(mediaId)
DLAppServiceUtil.updateFolder(folder.getFolderId(),folder.getParentFolderId(),album.getTitle(),album.getDescription(),serviceContext)
windowIndex > currentTimeline.getWindowCount()
LOG.error("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
new NodeStats(discoveryNode,0L,null,null,null,null,null,null,null,null,null,null,null,null)
in.getVersion().after(Version.V_5_3_0_UNRELEASED)
new HashMap(request.getParameterMap())
/**   * {@code BuildCacheService} decorator that stages files locally from a remote build cache. This provides a separation betweena build cache problem and a  {@code BuildCacheEntryReader} or {@code BuildCacheEntryWriter} problem.  */ public class StagingBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private final RoleAwareBuildCacheService delegate;   private final boolean stageCacheEntries;   private final TemporaryFileProvider temporaryFileProvider;   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  boolean stageCacheEntries,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.stageCacheEntries=stageCacheEntries;     this.temporaryFileProvider=temporaryFileProvider;   }   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  RoleAwareBuildCacheService delegate){     this(temporaryFileProvider,!(delegate instanceof DirectoryBuildCacheService),delegate);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (stageCacheEntries) {       return super.load(key,new StagingBuildCacheEntryReader(reader,temporaryFileProvider));     }  else {       return super.load(key,reader);     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (stageCacheEntries) {       super.store(key,new StagingBuildCacheEntryWriter(writer,temporaryFileProvider));     }  else {       super.store(key,writer);     }   }   /**   * Reads the cache entry to a local file from the build cache and then reads the cache entry from the local file.  */ private static class StagingBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader reader;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryReader(    BuildCacheEntryReader reader,    TemporaryFileProvider temporaryFileProvider){       this.reader=reader;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void readFrom(    InputStream input) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         stageCacheEntry(input,destination);         readCacheEntry(destination);       }   finally {         destination.delete();       }     }     private void stageCacheEntry(    InputStream input,    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         IOUtils.copyLarge(input,fileOutputStream);       }   finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void readCacheEntry(    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         reader.readFrom(fileInputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileInputStream);       }     }   }   /**   * Writes the new cache entry to a local file and then pushes the local file to the delegate build cache.  */ private static class StagingBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter writer;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryWriter(    BuildCacheEntryWriter writer,    TemporaryFileProvider temporaryFileProvider){       this.writer=writer;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void writeTo(    OutputStream output) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         writeCacheEntry(destination);         unstageCacheEntry(output,destination);       }   finally {         destination.delete();       }     }     private void writeCacheEntry(    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         writer.writeTo(fileOutputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void unstageCacheEntry(    OutputStream output,    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         IOUtils.copyLarge(fileInputStream,output);       }   finally {         IOUtils.closeQuietly(fileInputStream);       }     }   } } 
simpleRecyclerViewAdapter.removeAt(1)
new FileOutputStream(tempFile,false)
aClass.getContainingClass()
public Long getAutoCommitInterval(){   return this.autoCommitInterval; } 
pixel >> 8
myApplyData == null
RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authn)
ESClientYamlSuiteTestCase.createParameters(0,1)
rect == null
log.info("{}: Requesting {} transactions for dep resolution",needToRequest.size())
USE_DISPLAY_LIST_PROPERTIES=true
DDLServiceUpgrade.class
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
valueType.isIntegerNumber()
log.warn("jmeterthread.startearlier=true (see jmeter.properties)")
view.getCurrentMode()
findTearDownMethod(psiClass)
msg.getText()
packetSize=480
channel.writeHeaders()
component instanceof JTree
getKeyFromGrant(alias)
imageHeight - kernelHeight + 1
assertEquals(counter,1)
AnnotatedElementUtils.isAnnotated(type,Validated.class)
if (mCheckUnusedThrows) {   processImport(aAST); } 
getApprovalParameters()
selUser.getUserId()
tFAgentStatMappter.map(agentStatBo)
PointLookupOptimizer.class
DateFormat.getDateFormat(context)
returnElement == null
paramValue.isEmpty()
String.format(" Time: %6.2fms",queryTime * 1.e-6 / run)
langTool.check(paraText,false,JLanguageTool.ParagraphHandling.ONLYPARA)
MavenProjectsManager.getInstance(myProject).doInitComponent(true)
Integer.toString(flags,16)
new PrestoException(HIVE_FILESYSTEM_ERROR,e)
putInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
doTestCompletionVariants("av10.xml","fill_parent","wrap_content","@android:")
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId())
/**   * Returns first child <b>element</b> with given name or <code>null</code> if no such children exist.  */ public Node getFirstChildElement(String elementName){   if (childNodes == null) {     return null;   }   for (int i=0, childNodesSize=childNodes.size(); i < childNodesSize; i++) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
@XmlElement protected Object value; 
/**   * Callback that is invoked <em>after</em> all test methods have been invoked.  * @param context the current container extension context  */ void afterAll(ContainerExtensionContext context) throws Throwable ; 
color.toLowerCase()
cSubmitLimit=3
toObject(value)
new String(text.getBytes())
new TestClass(ic,m_testName,testMethodFinder,m_annotationFinder,m_runInfo,this)
ParseException pe
buffer.getSize()
new AnnotationNode()
id=15853
this.copyErrors
assertEquals(10,cms.getMaxThreadCount())
InputHelper.capitalizeFirstLetter(manufacturer)
ClassFileVersion.forKnownJavaVersion(enforce.value()).compareTo(supportedVersion) < 0
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).contains("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
ownedEntryCount >= nearCacheSize
Pattern.compile(keys[i])
DocumentationManager.storeOriginalElement(PlatformDataKeys.PROJECT.getData(dataContext),element,originalElement)
assertThat(System.currentTimeMillis() - start).isBetween(950L,1050L)
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER
new HashMap<K,CacheObj<K,V>>(capacity + 1)
new WorldPoint(1302,3762,0)
foreground(false)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE
timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()
indexMap || indexAddress || indexTransport
source != null
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage",ioe)
chain.filter(exchange).contextStart((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
new DeleteByQueryWrapper(in,schema)
dpToPx(32f)
parseValueParameterList(false,valueArgsRecoverySet)
xmlWriter.writeStartDocument()
LOG.error("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
containerKeyName=columnName
new QueryException("Error getting target node for %s\n%s",target,e.getMessage())
user.getSystemId() == null
!Algorithms.isEmpty(address) && !address.equals(title)
DeclarationDescriptorVisitorEmptyBodies<Void,StringBuilder>
item == null
targetClass != null
e.contains(SVNErrorCode.WC_NOT_DIRECTORY) || e.contains(SVNErrorCode.WC_NOT_FILE)
origin.realComponent().doubleValue() <= other
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(64)
synchronized (this) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
startupManager.registerPostStartupActivity(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
bounds.width()
getBorderRadius() >= 0.5f
new NullPointerException("ClassInfo's name should be non-null")
getReadTimeout(requestConfig,attemptNum)
command.getNewName()
inputPath=args[1]
value.iterator().hasNext()
new Type(null,"java.lang.Object",tableName)
/**   * Returns the constructor call which is on the top of the stack, or null if there's no such element.  * @return the enclosing constructor call on top of the stack, or null if no such element.  */ public Expression getEnclosingConstructorCall(){   if (enclosingConstructorCalls.isEmpty())   return null;   return enclosingConstructorCalls.getFirst(); } 
config != Config.ARGB_8888
getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,new FirstUsageWelcomeFragment(),FirstUsageWelcomeFragment.TAG).commit()
mSyncStatus.get(i)
lock != null
myFixture.testCompletionVariants("/jsp/actionLink-completionvariants-no-namespace.jsp","/","/actionLink/")
deleteTaskView.animate().setDuration(300).scaleX(0)
DefaultCacheKeysFactory.createCollectionKey(id,persister,factory,tenantIdentifier)
myNameField.getComponent()
steps < 0
Slog.wtfStack(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
ValueGeometry.get(bytes)
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName("cluster")).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
randomLong()
!includeSpecifiedOrganization
friendlyURL.startsWith(layout.getFriendlyURL(locale))
(Long)_aggregationResultList.get(i)
bibentries.size() == 0
configure(COMPONENT)
public class Arial extends FontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
INDENT_BRAKE_FROM_CASE
BaseOutputLayerSpace.Builder<RnnOutputLayer>
LOG.debug(e)
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "label".equals(key)
StringBuilder sb=new StringBuilder(html); 
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)")
myScopeSlider.setValue(3)
super(pipeline,null,HEAD_NAME,false,true); 
serialNumber.equals(null)
backLayer.getLayoutDirection()
session.close()
return START_FLAG_REDELIVERY; 
getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery())
res >= mLen
log.error("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
new IndexOutOfBoundsException()
world.setBlockMetadataWithNotify(x,y,z,targetID,targetMeta)
Integer.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
latch.await(1000,TimeUnit.MILLISECONDS)
read == '/'
exists
pathname.getAbsolutePath()
a.getBoolean(R.styleable.View_fadeScrollbars,false)
client.replicationControllers().inNamespace(session.getNamespace()).withName(serviceName)
new KillableColoredProcessHandler(commandLine)
new IOException(msg,ioe)
JSParameterTableModel.createDefaultValueCellFragment("",createFakeClass())
Throwable throwable
createReactive(config)
state.addNullness(true,x)
mentionsState()
mState != STATE_INITIALIZED
_nonceQueue.remove()
BigDecimal.valueOf(100L)
(float)executions / iteration
/**   * Total job execution time (unaccounted for in metrics).   */ private final LongAdder finishedJobsTime=new LongAdder(); 
JMXJsonServlet.class
assertEquals(0.0,biaOp.currentResult().doubleValue())
Arrays.asList(Errors.UNKNOWN_TOPIC_OR_PARTITION,Errors.TOPIC_AUTHORIZATION_FAILED)
ConstantNode.forConstant(JavaConstant.NULL_POINTER,null)
offset >= editor.getDocument().getTextLength()
Integer.MIN_VALUE + 11
lastTerm.toBytesRef()
new KettleException("Couldn't find hop '" + from + "' for reading from")
allowedAudiences.contains(providedAudiences)
stackTrace.length < depth
OpenmrsProfileWithoutTest1Module.class
Program
TEMP_DIR_ATTEMPTS=10000
gi.getVertexNames()
Preferences.getBoolean(R.string.p_rmd_snooze_dialog,true)
this.publicKeyLocation
new Update(MavenProjectsManager.this){   public void run(){     wrapper.get().run();   } } 
info.isConnected() == true
Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS))
o.getClass() != getClass()
fragmentEntryPersistence.filterFindByG_FCI_S(groupId,fragmentCollectionId,status,start,end,orderByComparator)
new CacheConfiguration()
Thread.sleep(30000)
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE))
generatorConfig.getDaoPackage()
JavascriptCompiler.compile("bar()",functions,thisLoader)
removedGenerator.isAssignableFrom(next.getClass())
context.formatSeparator()
alertDialogBuilder.setNegativeButton(resources.getString(R.string.title_allow),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=false;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),false);     latch.countDown();   } } )
MethodHandles.dropArguments(cacheLookup,0,type.parameterList().subList(1,type.parameterCount()))
new HttpHost(proxy.host,proxy.port,proxy.protocol)
Thread.sleep(300)
"" + docCount
logMinimal(message)
mPathParameterMap != null
new String(expected,0,i + 1)
faultSerialVersionUID.equals(FaultSerialVersionUID.FQCN)
new DeoptimizeNode(deoptAction,deoptReason)
formService.populateEntityForm(cmd,entity,entityForm,false)
tag.getLocalName()
getDeltaRequest().execute(this)
Validator.isNotNull(PropsValues.MOBILE_DEVICE_TYPE)
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle
case 4: 
PropertiesComponent.getInstance(project).getBoolean(UPDATE_STATE_ENABLED,true)
!file.isHidden() && file.getPath().endsWith(".swf")
super.addPage(userId,nodeId,redirectTitle,content,summary,minorEdit,serviceContext)
final Color color
new IndexAnalyzers(indexSettings,namedAnalyzer,namedAnalyzer,namedAnalyzer,Collections.emptyMap())
new ArgTypePreparedStatementSetter(args,argTypes)
(ChameleonElement)element
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetdata,mergedManifest,keystore)
getName().equalsIgnoreCase("enum")
Arrays.asList(new HashSet(),new LinkedHashSet(),new TreeSet())
SERIAL_VERSION_UID=420L
this.messageService.monoPostAuthorizeBeanFindById(1L).contextStart(withUser)
@Specialization protected Object fromInt(int value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
pgl.blendFunc(PGL.ONE,PGL.SRC_ALPHA)
types.get(channel)
new WorldPoint(2487,3001,0)
isNotNull(url)
@Override public final DivideBy on(Condition... conditions){   condition.addConditions(conditions);   return this; } 
logger.debug("Failed to obtain file icon from JFileChooser.",e)
v2.isSupportedBy(v1)
i.getIntExtra(Constants.INTENT_KEY,0)
archiverManager.getUnArchiver(src)
data.limit()
callExpression != null
len < 0 && len > 52
note.get_id() != 0
s.getIndexReader()
reload()
new Avg()
PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,false)
assertEquals(7,LambdaOperations.values().length)
operations.remove(query,metadata.getCollectionName())
DateUtilities.ONE_MINUTE * 20
new CvsRollbackProvider(myProject,selectedRevisions,containsExcluded)
element == null
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false")
private void _runCommand() throws PoshiRunnerException {   _runClassCommandName(_testClassCommandName); } 
TestTextureArray app=new TestTextureArray(); 
ANXV2.getWalletHistory(ANXExchange.getExchangeSpecification().getApiKey(),signatureCreator,new CurrentTimeNonceFactory(),"BTC",null)
it.current() == '/'
Loader.getResource(__dftMimeMap.getClass(),resourceName)
e.getCommandResult().getErrorMessage().equals("ns not found")
_buildTemplateWithGradle("soy-portlet","soy-dependency-management","--dependency-management-enabled","true")
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",realSubStepName)
new OptionValue<>(30.0D)
i=1
getPlayer(server,args,0,true)
expandable::collapse
new AssetKey(text)
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
private final String mPortKey; 
powerBase=60
ModelReference.of(ModelPath.path("componentTypeRegistry"),new ModelType<RuleAwarePolymorphicNamedEntityInstantiator<ComponentSpec>>(){ } )
{0x038,0x121,0x061,0x160,0x031,0x130,0x070,0x025,0x124,0x064,0x109,0x049,0x148,0x019,0x118,0x058,0x00D,0x10C,0x08C,0x01C,0x103,0x043,0x142,0x013,0x112,0x052,0x007,0x106,0x046,0x016,0x181,0x0C1,0x1C0,0x091,0x190,0x0D0,0x085,0x184,0x0C4,0x094,0x0A8,0x0A2,0x08A,0x02A}
this.alphabet
replacements.add(replacement)
new Info("basic/types").cppTypes("signed","unsigned","char","short","int","long","bool","float","double")
executeWrappedCommandProtocolAsync(databaseName,getCommand(),connection,transformer(),wrappedCallback)
JetExpression lhs=(JetExpression)assignment.getLeft().copy(); 
ChronicleEngineEnpoint endpoint=(ChronicleEngineEnpoint)getEndpoint(); 
optionalClient.orElseGet(null)
new HashMap()
Looper.getMainLooper()
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
indexSettings.get("fpp")
new JsonPathConfig(numberReturnType)
fileFilters.get(module)
hotRestartState != null
ShutdownOperations.addOperation(new Runnable(){   public void run(){     wrappedResponseHolder.remove();   } } )
rt == Boolean.TYPE
doTestNewInference(BASE_PATH + "/" + getTestName(false)+ ".java",warnings,false)
CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
setSunPosition(calendar,latitude,longitude,sun)
redefined.getConstructor()
startBounds.width()
fieldValues.isEmpty()
setPin(file,false)
new RuntimeConfigurationError("No py.test runner found in selected interpreter")
SSTableMetadata.createCollector()
fmd.getValueCount() == 0
Integer.toBinaryString(gramSize)
new RuntimeException("Unexpected rule: " + ruleStr)
new Settings(getContext(),getContext().getFilesDir(),new Object())
jsonFile.getParentFile()
clientConfig.property(ClientProperties.READ_TIMEOUT,1000)
config.getMaxQueryMemoryPerNode().toBytes() < maxMemory.toBytes()
(types != null) && (types.length > 0)
getSegments().length - 2
currentFuel == null
Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,false)
refTableName.split("\\.")[0]
Thread.sleep(1200)
EventQueue.invokeAndWait(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
!((HttpOutput)out).isWritten()
new RendezvousAffinityFunction()
Mockito.any()
elements != null
assertEquals(12,tokens.size())
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingString",value))
bindingConfiguration.getSource().getResourceValue(serviceBuilder,phaseContext,service.getManagedObjectInjector())
new MethodHandler(methodKey,groupId,types,start,end)
IndexReader reader=IndexReader.openIfChanged(open); 
VerificationResult.withCount(2)
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
SmsHeader.toByteArray(header).length + 1
DAY_POSITION_IN_LONG=10000
Representor<T,U>
BrowseCap.isMacintoshDesktop()
now == currentPage
checkManageUsersPermission("query user")
{0x003,0x006,0x009,0x060,0x012,0x042,0x021,0x024,0x030,0x048,0x00c,0x018,0x025,0x051,0x054,0x015,0x01A,0x029,0x00B,0x00E,0x01A,0x029}
assertEquals(5,beanCount)
new IllegalArgumentException("negative offset:" + offset)
ContainerUtil.getLastItem(expressions)
!version.equals("1.2") && !version.equals("2.0")
MOD_NUM=100
cluster.setWifiIndicators(mWifiEnabled,mWifiIconId,mWifiActivityIconId)
-29
!file.isFile()
private Exception maybeAttachBuildRuleNameToException(@Nonnull Exception thrown){   if ((thrown instanceof HumanReadableException) || (thrown instanceof InterruptedException)) {     return thrown;   }   String message=thrown.getMessage();   if (message != null && message.contains(rule.toString())) {     return thrown;   }   return new RuntimeException(getErrorMessageIncludingBuildRule(thrown),thrown); } 
player.sendMessage(new TextComponentString("Not an air block @" + placePos))
dumpErrorCountThreshold=3
file.getName()
public static BuildParameters addBuildParameterOutput(BuildParametersBuilder builder,String imageTag){   return builder.withNewOutput().withTag(imageTag).endOutput().build(); } 
new PagesListAddPageRecord(cacheId,pageId,nextId)
Log.info("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
setTo(replyTos)
String tag
IllegalArgumentException e
enabled.set(false)
properties.contains("flyway.url")
new BooleanPreference("auto_zoom_map",false,true)
findPackage(SETUPTOOLS,false)
file.isDirectory()
result == Short.MAX_VALUE
new DatabaseExplorerDialog(shell,props,SWT.NONE,dbinfo,databases,true)
request.getContentLength()
new IllegalArgumentException()
new MultiParentClassLoader()
currentFactory != null
preciseExchangeAmount - exchangeAmount >= 0.000001f
allCramTags == null
v != null
c == Character.class
new ServerSparseDoubleRow(rowId,startCol,endCol)
mDataSetObserver != null
addr.toString()
public VectorClock getVersion(){   return version; } 
performDexOpt(pkg.packageName,null,false,causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT,false)
Boolean.valueOf(getOptional("kylin.query.disable-cube-noagg-sql","false"))
{CUSTOM_STUDY_REV,DECK_OPTIONS,CONTEXT_MENU_STANDARD}
scaleImage(scale,viewWidth / 2,viewHeight / 2,false)
commState.getBoolean()
out.annotateTo(reader.getOffset(),StringIdItem.getOptionalReferenceAnnotation(dexFile,paramaterIndex,true))
fieldType.storeTermVectors()
Color.fromRGB(0xF0F0F0)
(FileDisplayActivity)getActivity()
change.downgrades(current)
writeRepeatedSFixed64(id,val)
popup.requestFocus()
public static final Object NO_SETTINGS=new Object(); 
protected ReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,ResolvedTypeParametersMap typeParametersMap){   return create(typeDeclaration,typeDeclaration.getTypeParameters().stream().map(typeParametersMap::getValue).collect(Collectors.toList())); } 
FileType.of(".so")
/**   * User: anna Date: 1/10/13  */ public class JavaFXUnresolvedFxIdReferenceInspectionTest extends AbstractJavaFXQuickFixTestCase {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxUnresolvedFxIdReferenceInspection());   }   public void testUnknownRef() throws Exception {     doTest("Controller");   }   private void doTest(  final String controllerName){     myFixture.configureByFiles(getTestName(true) + ".fxml",controllerName + ".java");     final IntentionAction singleIntention=myFixture.findSingleIntention(getHint("unknown"));     assertNotNull(singleIntention);     myFixture.launchAction(singleIntention);     myFixture.checkResultByFile(controllerName + ".java",controllerName + "_after.java",true);   }   @Override protected String getHint(  String tagName){     return "Create Field '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/unresolvedFxId/";   } } 
mono.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
out.writeLong(length())
mSrc.onTouchEvent(e)
jabberStatusToPresenceStatus(o1,parentProvider)
numTouched == 1
new MethodDescription.Token(FOO,MODIFIERS,Collections.singletonList(mock(GenericTypeDescription.class)),second,Collections.<ParameterDescription.Token>emptyList(),Collections.singletonList(mock(GenericTypeDescription.class)),Collections.singletonList(mock(AnnotationDescription.class)),null)
new InterpreterExpectations("",true)
new ClosedByInterruptException("Interrupted while reading.")
dirContext=ldap.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw())
getTypeName(method.getReturnType())
ColumnFilter filter
ASHMEM_SIZE=296
BeanPropertiesUtil.getString(model,_keyProperty)
numSegments - 1
queryParams != null
PokemonMetaRegistry.getHightestForFamily(getPokemonFamily())
this.createError == null
new IllegalArgumentException("pos must be >= -1")
bits2[0]
(outputFolder + File.separator + modelFolder).replaceAll("/",File.separator)
DiagnosticFactory3.create(ERROR,DECLARATION_SIGNATURE)
AssetPublisherWebUpgrade.class
localFileSystem.findFileByIoFile(vimKeyMapFile)
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SUCCESSFUL)
dz < -1
API_KEY == null
new char[31]
Simple.of(SkylarkDict.class)
JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
synchronized (classCache) {   classCache.put(cls.getName(),cls); } 
c1.getName()
mLayoutParams.height >= 0
formController.getEventLogger().logEvent(EventLogger.EventTypes.GOOGLE_PLAY_SERVICES_NOT_AVAILABLE,0,null,true)
gtype < TYPES.length
SDK_INT < LOLLIPOP
TfsShell.convertMsToDate(files[0].getCreationTimeMs())
myCardModel.getAnswerAlign()
mdcPropertyMap != null
IndexReader.open(benchmark.getRunData().getDirectory(),true)
syncOperation.delay == 0
command.next(answerForm)
interceptors.addFirst(newAInterceptor(a))
@API(help="NetworkTestResults",direction=API.Direction.OUTPUT) public TwoDimTable table; 
overrideDeploymentConfig
ViolationTrackingBlocksRecognizer rec
Matchers.greaterThanOrEqualTo(1000L)
assertTrue(e.getMessage().toLowerCase().indexOf("writer") >= 0)
public static ResourceBundle getMessages(){   return new LocalizationBundle(messages); } 
new DexBackedMethodReference(dexFile,MethodIndex)
_connector.getResponses("GET /foo?data=1 HTTP/1.0\nhost: host:80\n\n")
LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(layoutUuid,groupId,false)
AssetCategoriesNavigationWebUpgrade.class
mSmallestWidthDp > 600
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") IllegalStateException sessionTypeNotSpecified(String bean); 
256 * 256 * 12.8f
new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)
DUPLICATE_OPS_TOLERANCE=5
MonitoringPortletImpl.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
values[i] == values
Localization.lang("Push entries to external application (%0)",appName)
_parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
file.exists()
CoreMatchers.anyOf(is(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>$Placeholder"))
TIMEOUT=50
code.executeVarargs(args)
Arrays.asList("test","lukas","sa","root@localhost","postgres","dbo","dba","dba@lukas-hp")
id=15835
reject()
max=20
new IndexWriter(rd,new StandardAnalyzer(),true)
new String(decryptedByteArray)
mMapView.postInvalidate(frameLeft - 2,frameTop - 2,frameRight + 2,frameBottom + 2)
synchronized (this) {   ImmutableSet.Builder<ShardId> builder=ImmutableSet.builder();   return builder.addAll(shardLocks.keySet()).build(); } 
reactiveType == null
SHUTDOWN_VIBRATE_MS > 0
/**   * Obtain the property descriptor for a specific property of the wrapped object.  * @param propertyName the property to obtain the descriptor for(may be a nested path, but no indexed/mapped property)  * @return the property descriptor for the specified property  * @throws InvalidPropertyException if there is no such property  */ PropertyDescriptor getPropertyDescriptor(String propertyName) throws BeansException ; 
makeString(actual,",","(",")")
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,63)
w1.getGradient(target,alpha)
hasFocus() && showClearButton
mService.setUidPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
PortalInstancesWebUpgrade.class
/**   * Constrains search results to only match those which also match a provided query.  Results are cached, so that searches after the first on the same index using this filter are much faster.  * @version $Id$  * @deprecated use a CachingWrapperFilter with QueryWrapperFilter  */ public class QueryFilter extends QueryWrapperFilter {   /**   * Constructs a filter which only matches documents matching <code>query</code>.  */   public QueryFilter(  Query query){     super(query);   }   public boolean equals(  Object o){     return super.equals((QueryFilter)o);   }   public int hashCode(){     return super.hashCode() ^ 0x923F64B9;   } } 
addTest(19,23,180.0f)
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,1,graphId)
Results.ok()
LinkedHashSet<String>
Log_OC.wtf(TAG,"initFragments() called with invalid NULLs!")
ShutdownOperations.addOperation(new Runnable(){   public void run(){     clear();   } } )
l.maxComputers(lic.maxCpus())
this.field_92016_l
Map<Method,List<String>>
mResourceData[i] != null
Table table=Table.open(tableName); 
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET)
handler.inGroup(base,node)
/**   * The failure that occurred.  */ Exception getFailure(); 
return 400; 
new RStudioThemedFrame()
name="java:/TransactionManager"
requestUrlregex == null
new RuntimeException("Unable to find className in " + namespaceClassName)
updateStreetName(calculateTextState())
showTooltip == null
!documentsToCommit.isEmpty()
new Button("submit",new StringResourceModel("submit",this,null)){   private static final long serialVersionUID=1L;   @Override public void onSubmit(){     try {       GeoServerExtensions.bean(GeoFenceConfigurationController.class).storeConfiguration(config,cacheParams);       doReturn();     }  catch (    Exception e) {       LOGGER.log(Level.WARNING,"Save error",e);       error(e);     }   } } 
context.createContext(createdBy,reason,comment,request)
Long.valueOf(args[ai])
myMapping.update(outputPath,outputPath)
mv.visitParameterAnnotation(0,Type.getDescriptor(Nullable.class),true)
Arrays.asList(mvn,"org.apache.maven.plugins:maven-archetype-plugin:2.2:generate",property("interactiveMode","false"),property("archetypeGroupId",archetype.groupId),property("archetypeArtifactId",archetype.artifactId),property("archetypeVersion",archetype.version),property("groupId",groupId),property("artifactId",artifactId),property("version",version),property("package",packageName))
isRotationEnabled
WEB_SYNC_MANAGER=false
new IllegalStateException("Unable to load error page data")
(NotificationAction)null
Arrays.asList(TYPE_INTEGER,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING)
this.messageService.monoPreAuthorizeHasRoleFindById(1L).contextStart(withUser)
protocolProvider.getProtocolName()
out.getVersion().after(Version.V_5_3_0_UNRELEASED)
year=2013
HSTRETCH_DURATION=0.4f
private JTextPane myDetailsPane; 
BaslineCompiler baselineCompiler=new BaslineCompiler(GraphBuilderConfiguration.getDefault(),providers.getMetaAccess()); 
runtime().config.useCompressedKlassPointers
verify(runSvn("status"),"","--- Changelist 'newOne':","A + c.txt","D a.txt")
!txEnabled()
id=2
count <= 0
Picasso.get()
delayDuration - 50
String.format("Expression must consist of 6 fields (found %d in %s)",fields.length,fields)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE)
Loader.getResource(TEST_AUTOCONFIG_FILE,classLoader)
new IllegalStateException("PLAIN supports neither integrity nor privacy")
!mPreferredHost.equals("localhost")
myViewingPanel.requestFocusInWindow()
next != 1
proxy.attemptErrorResponse(controlSessionId,GENERIC,correlationId,errorMessage,controlPublication)
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
Thread.sleep(1000)
new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName())
LOG.error("Error reading HTTP response from " + url)
List<Stats>
final ClassNotFoundException e
GeneratedJavaParser::Type
Ignition.start()
parent instanceof PsiMethodReferenceExpression
transportError.withDescription("\n" + headers.toString())
msg.getHistoryRef().getHistoryId()
hash == 0
final LongAdder msgCntr=new LongAdder(); 
methodCall.accepts(eMethodCall)
System.out.printf("na.setNode(%d, %f, %f);\n",node,na.getLat(node),na.getLon(node))
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters)
mergeConfigs(res,s -> ConfigFactory.parseFile(new File(s)))
DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
LOGGER.debug("Error during XML parsing",e2)
eventFunc.equals("conference_add_member")
ref_val.startsWith("HTTP error 403")
manager.getUserDictionary().getWords()
Collection self
zip(srcFile,zipFile,true)
!compareRequestAndSessionTokens(sessionToken,params,userSubject)
writeString(writer,String.valueOf(reader.getInt()),fieldName)
"Received communication message while stopping (will ignore) [nodeId=" + nodeId + ", msg="+ cacheMsg+ ']'
new StringBuilder(246)
id=15854
GL11.glTexParameter(target,pname,params)
order=1
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)")
strangeVocab.getWordFrequency()
testClosureFunction("goog.isArray",ALL_TYPE,ALL_TYPE,ALL_TYPE)
Class.forName(metadata.getInheritedFromType()).isAssignableFrom(entity.getClass())
isAssignableFrom(supertypeName,cn.superName,cl)
stateMap.get("CurrentTrackMetaData") != null
new CompletionItemCapabilities(false)
@Override public ResponseImpl header(String name,Property property){   addHeader(name,property);   return this; } 
new IgfsListingEntry(oldId,true)
mMediaPlayer.isPlaying()
methodReturnType != null
node_type == MatchNode.MATCHNODE_STATEMENT
view.setTextColor(0xFFDADADA)
tabbed.addEventHandler(KeyEvent.KEY_PRESSED,event -> {   Optional<KeyBinding> keyBinding=preferences.getKeyBindings().mapToKeyBinding(event);   if (keyBinding.isPresent()) { switch (keyBinding.get()) { case ENTRY_EDITOR_NEXT_PANEL: case ENTRY_EDITOR_NEXT_PANEL_2:       tabbed.getSelectionModel().selectNext();     event.consume();   break; case ENTRY_EDITOR_PREVIOUS_PANEL: case ENTRY_EDITOR_PREVIOUS_PANEL_2: tabbed.getSelectionModel().selectPrevious(); event.consume(); break; case HELP: HelpAction.openHelpPage(HelpFile.ENTRY_EDITOR); event.consume(); break; case CLOSE_ENTRY_EDITOR: close(); event.consume(); break; default : } } } )
DBUtils.getDefaultContext(object,true)
!debugInfoEnabled
c < 'Z'
Slog.wtf(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
/**   * 秋季（第三季度）   */ ANTUMN(3)
LOGGER.debug("Could not execute open URL",ex)
task.cancel()
parseKeywordIf(ctx,"DOUBLE")
setUp(new JZDataSource(url),0,screen,objects)
/**   * @see Submit  */ public class SubmitTag extends AbstractUITag {   private static final long serialVersionUID=2179281109958301343L;   protected String action;   protected String method;   protected String align;   protected String type;   protected String src;   public Component getBean(  ValueStack stack,  HttpServletRequest req,  HttpServletResponse res){     return new Submit(stack,req,res);   }   protected void populateParams(){     super.populateParams();     Submit submit=((Submit)component);     submit.setAction(action);     submit.setMethod(method);     submit.setAlign(align);     submit.setType(type);     submit.setSrc(src);   }   public void setAction(  String action){     this.action=action;   }   public void setMethod(  String method){     this.method=method;   }   public void setAlign(  String align){     this.align=align;   }   public String getType(){     return type;   }   public void setType(  String type){     this.type=type;   }   public void setSrc(  String src){     this.src=src;   } } 
new TreeToBuffer(buffer,0,true,false,false,true,null){   @Override protected boolean shouldSkipNode(  TreeElement node){     return super.shouldSkipNode(node) || node instanceof PsiErrorElement || node instanceof PsiComment|| node instanceof LeafPsiElement && StringUtil.isEmptyOrSpaces(node.getText()) || node instanceof OuterLanguageElement;   }   @Override protected boolean showEmptyChildren(){     return false;   } } 
rs.getString(columnIndex)
updateViewsVisibility(mIconifiedByDefault)
container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
blankPosition=obj.getInt("errorPosition")
BatchCSVRecord singleCsvRecord=Unirest.post(url + "/transformincremental").header("accept","application/json").header("Content-Type","application/json").header(SEQUENCE_OR_NOT_HEADER,"true").body(transform).asObject(BatchCSVRecord.class).getBody(); 
mAm.addSharedAccountsFromParentUser(userId,parentUserId)
itemChannelLinkRegistry.getLinks(channelUID).isEmpty()
currLine > mPrevLine
format(elem,true)
executor.submit(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
clusterListeners.size() == 0
LOG.warn("{} {}",_request.getRequestURI(),failure)
progressHeight - 3
date.getTime()
SURFACE_SELECTOR=25
PRESERVE_WINDOWS
log.warn("IntrospectionUtils: InvocationTargetException for " + o.getClass() + " "+ name+ ")")
assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L,"2011-05-01").setLast(true))).isTrue()
position == 0
logger.info(logMessage)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } ,10)
/**   * {@inheritDoc}  */ @Override public Object clone(){   TestElementProperty prop=(TestElementProperty)super.clone();   prop.value=(TestElement)value.clone();   return prop; } 
comment.lastIndexOf(']')
volatile IndexReader reader; 
cacheTimeout=3600000l
dos.write(valueBytes.length)
Tools.checkText(text,lt)
mPositionScroller.startWithOffset(position,offset,offset)
docker.startContainerCmd(container.getId())
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),userGroupGroup,ActionKeys.VIEW)
source.readInt()
s.onError(new NullPointerException("The future produced a null value"))
map.tryPut(key,newValue,8,TimeUnit.SECONDS)
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=4
CachedValuesManager.getManager(project).getParameterizedCachedValue(psiFile,CACHE_KEY,param -> CachedValueProvider.Result.create(parseConfigInternal(param.getVirtualFile(),param),param),true,psiFile)
ParamUtil.getString(req,Constants.CMD)
new TermQuery(new Term("body","m?tal"))
Assert.fail()
string.getName()
logger.error(e)
offset > mValue.length
number.length()
StringBuffer msg=new StringBuffer(methodName); 
MessageDigest.isEqual(ourMac,theirMac)
UPDATES_BEFORE_CHECK_LOCATION=20
lineIdx > 0
InputType.recurrent(convNIn)
new TwoDimTable("Confusion Matrix (Act/Pred)",rowHeader,colHeader,colType,colFormat,new String[rowHeader.length][],new double[rowHeader.length][])
dir.mkdir()
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null,null)
writer.close(true)
floatVal(doc)
feedEntryStatusDAO.findAll(user,true,0,1,ReadingOrder.desc,false)
"+" + localNumberImprecise.substring(0,difference) + number
permissions=4
head.equals("ntpath") | head.equals("posixpath")
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,109000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
mBatteryStatus=BATTERY_STATUS_FULL
endLogicalColumn < marginColumns
(RuleBaseEventListener)this
calendar.set(Calendar.DAY_OF_WEEK,1)
config.isAnimateWater()
client.filter(basicAuthentication("test","this")).get().uri("/").exchange().expectStatus().isOk().expectBody()
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)
SearchWebUpgrade.class
viewObject.getMessageOwner() != null
LOGGER.debug(e.getMessage(),e)
void execute() throws Exception ; 
props.getInt("session.time.to.live",SESSION_TIME_TO_LIVE)
LOG.info("Storage directory " + rootPath + " does not exist")
this.counterpart.split("/")
channel.write(reply)
LOG.warn("Unable to close socket selector",ex)
UniqueQueue<Node>
!vm.canGetInstanceInfo()
LOG.warn(e)
LOG.lifecycle("Detection of classes for compilation ({}) plus the compilation took {}.",clock.getTime(),recompilationSpec.getClassNames().size())
ImmutableList.of(result)
new SimpleDateFormat("HH:mm MMM d yyyy")
getInInterceptors()
replicaEngine.refresh("test",true)
TestPropsValues.getUserId()
assertEquals(8,definitions.size())
typeAddrPair.getTypeReferenceField().toString()
r.curApp != null
adapter != null
public static void main(String[] args) throws Throwable {   Bootstrap.main(args); } 
log.warn("Cannot fetch column count for cursor : " + e.getMessage())
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound()
new IllegalArgumentException()
Text val=new Text(); 
shuffleWithInexistingUuids(project1.uuid(),project3.uuid())
final LongAdder puts=new LongAdder(); 
dialog.show()
Integer.valueOf(getOptional("kylin.engine.spark.max-partition","5000"))
callbackList.getRegisteredCallbackCookie(i)
mThumbnail.copy(Config.HARDWARE,true)
(byte)0xdf
GenericObjectContainer parent
Integer.valueOf(2)
LifecycleListener listener
LibraryTableEditor.editLibraryTable(getApplicationServerLibrariesProvider())
stateManager.register(store1,false,stateRestoreCallback)
mf.filter(r,message,transformed.message())
ApplicationManager.getApplication().isUnitTestMode()
s.count()
renderManager.render(tpf)
TailArraySchema schema=new TailArraySchema(); 
course.getLessons()
new ParseField("rules")
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.2800,9.7190,ef),currIdx.findClosest(49.8960,10.3890,ef),76409,1406)
addAOEntitlementAndCheckForCompletion(bpSubscription.getBundleId(),"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
replayStart=DateTime.now()
writeMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
old + 8
"Deleting existing file: " + tempTarget
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
w <= 0 && h <= 0
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
c.getPath() == null
clsName != null
@Nullable final Exception lastException
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantCreate(serverTag)
executorCount--
asList(DERBY,FIREBIRD,ORACLE,SQLSERVER,SYBASE)
file.renameTo(newFile)
type.getName()
usersStats.getMax()
Executors.newCachedThreadPool()
allGroupingColumns.isEmpty()
ClientSession.getTLSPolicy() != Connection.TLSPolicy.required
explicit && !finished
request.getRequestURI()
Pattern.compile(regexp)
new ConstraintIndexCreator(() -> kernel,indexingService,propertyAccessor,false)
task.stack != tr.stack
assertThat(pod).hasId("cheese")
tempBitmap != null
new DirectDruidClient(warehose,smileMapper,httpClient,server.getHost())
getQualifiedName() == AbstractName.NO_NAME
174 != errors.size()
typeSwitch.keySuccessor(i) == predecessor
applyFilter()
saveJSONArray(json,filename)
((SoapFault)ex).getSubCode() != null
1 << 2
@Override protected Content setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
twitter.getHomeTimeline()
dic.buildRouterChain(invokers)
world.setBlockMetadataWithNotify(x,y,z,0,3)
View divider=new View(mContext); 
final Trie foundWhitelist=trie.findNode(FocusString.create("def")); 
Bottom bottom
identity.getId()
n.intValue()
assertEquals(9,md.references().size())
/**   * {@code "x-frame-options"}  */ public static final CharSequence X_FRAME_OPTIONS=new AsciiString("x-frame-options"); 
i < getATN().maxTokenType
openConnection(true)
!shouldUsePool(bis)
add2(ds[0],yact[0])
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
settings.getChangeBeforeFilter()
model::commit
(parentRestricted && !restricted) || (!parentAsked && asked)
mode != IControllable.Mode.Unknown
ClientComponent.class
result=60
Optional.of(authorizedPeers)
connectionWaitMs + delta
userVector.get(index) != 0.0
Manager.this.readyState == ReadyState.OPEN
FORMAT_FIELD.getPreferredName()
new InputStreamReader(githubResponse)
laneOptions[j].equals("slight_right")
testSame("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
rsMaxRows > 0
c.getWidth()
new StrictModeViolationDialog(mContext,ActivityManagerService.this,res,proc)
newHashSet()
notifyDataSetChanged()
key == null
windowState.isOnScreen() && !windowState.mWinAnimator.mEnterAnimationPending
!c.moveToFirst()
classNode.hasMethod(methodName,parameterTypes)
NettyAsyncHttpProvider.class
dpToPx(68f)
Long assetName
this.children != null
this.supervisors
new InvalidPluginRequest("No plugins found for plugin id " + pluginId)
ThriftValidation.validateColumnFamily(keyspace,cfname,true)
triggerProto.getAfterEndOfWidow()
data[1] > 260
canvas.clipRect(0,0,tabWidth,tabHeight)
atlasFile.path()
unwindNode != null
this.httpHandler.handle(request,response).otherwise(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
Plugin.class
response.rows()[8]
new UpdateNotifierTimerTask(this,verChecker)
(long)mCachedGroupId[i] << 32l
!mShowsDialog
jp.getIntValue()
curLayout.getName(locale).equals(localizedName)
parsedVersion != null
clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
Beans.newDuration(jpaProperties.getPool().getMaxWait()).toMillis()
"Interceptors contributed by endpoint: " + i2
currentSegmentIndex < fakeData.segments.size()
ImmutableSet<ImplemetationMethodDescriptor>
new StreamTaskException(exceptionMessage)
setResult(RESULT_CANCELED)
ErrnoException e
(!p.matcher(definedType.getType()).matches()) && (definedType.getLength() == 0 || !p.matcher(definedType.getType() + "(" + definedType.getLength()+ ")").matches()) && (definedType.getScale() != 0 || !p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ","+ definedType.getScale()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ", "+ definedType.getScale()+ ")").matches())
root.getSourceSection() != null
return mEnabled; 
@Override public PostgreTableReal getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
createCurrency("LTC","Litecoin","XLT")
list.size() + 1
Integer[]
new IndexWriter(dir,new Analyzer(){   public TokenStream tokenStream(  String fieldName,  Reader reader){     return new TokenFilter(new StandardTokenizer(reader)){       private int count=0;       public Token next() throws IOException {         if (count++ == 5) {           throw new IOException();         }         return input.next();       }     } ;   } } ,true)
mArrowImage != null
menu.isSelected()
NativeBinarySpecInternal nativeBinary
new GridKernalContextImpl(this,cfg,gw,ENT)
serialVersionUID=953707622
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFolder.Label",realTargetdirectory))
new EntityTrackerInfo(mod,ID,range,updateFrequancy,sendVelocityInfo)
a.getInteger(R.styleable.MaterialCalendarView_mcv_selectionMode,SELECTION_MODE_NONE)
animateHeader()
!myToolWindow.isVisible()
!mAccountStore.hasAccessToken()
fluid.getBlockID() != 0
attributes.getDimension(R.styleable.ArcProgress_arc_angle,default_arc_angle)
@Override public ConfigValue get(int index){   return value.get(index); } 
redisson.<Integer>getBucket("executed1")
_buildTemplateWithGradle("npm-react-portlet","react-portlet-dependency-management","--dependency-management-enabled","true")
nonPersistent.addMessageLast(node)
RandomDocumentPicks.randomIngestDocument(random())
mPathBitmap == null
dataType.equals("boolean")
Bukkit.getOfflinePlayers()
Constructor constructor=(Constructor)chooseMethod("<init>",constructors,arguments,false); 
iterations=10
shortSizeDp > 600
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS)
logger.warn("Cannot clear queue ({})",e.getMessage())
mEditor.startSelectionActionModeAsync()
request.getUserPrincipal()
this == group.mInternalConnection
jitter=0.2
BroadcasterFactory.getDefault().get(mapping)
mLocalWorkerAddress.getRpcPort()
recordSetVersion1.getVersion()
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
assertStatus(a,f,false)
owner == null
new UncheckedIOException(e)
sSwipeMinDistance=150
progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress
parentJob.isStopped()
new Random()
Class.forName("android.support.v7.widget.Toolbar",false,null)
payloadErrorFatal
rule.getName() == null
String requestCacheKey
VertexProgram.createVertexProgram(ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
this(true,true); 
beans.add(0,bean)
max() >= 32
case 15: 
MessageNotifier.updateNotification(context,null)
account == null
interfaceToImplement.contains(interfaceToImplement)
target.getAddress() == null
graphBuilderConfig.eagerResolving()
z.next_in[z.next_in_index++] == 0
stack.peekFirst()
rc.networkPolicy(NetworkPolicy.NO_CACHE,NetworkPolicy.OFFLINE)
mTfs.free(mTfs.open(path))
msgss == null
Window.<Integer>into(new GlobalWindows()).triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1))).accumulatingFiredPanes().withAllowedLateness(new Duration(0))
postVisitColumnDefinition(ancestorNode,statement,column.getName())
new Server(port)
given().contentType(ContentType.BINARY).content(inputStream).when().post("/file")
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString())
Long dateObject=(Long)lastMessageElement.getAttributes().getAttribute("date"); 
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges))
times(3)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public CharSequence getViewIdResourceName(){   return mViewIdResourceName; } 
offset > 32768
yAmount > 0
ClosureToSamConverter.isSamConversionAllowed(myPlace) && InheritanceUtil.isInheritor(argType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE) && !TypesUtil.isClassType(paramType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)
httpClient.close()
m - 5
iconsByFileExtension_.put(filespec.toLowerCase(),icon)
new Documentation(__ -> Optional.of(() -> "A"),__ -> Optional.of(() -> "B"),null,null,null)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL)
new WorldPoint(2783,3210,0)
_formatDefinition(definition,nestedDefinitionIndent,level,!nestedDefinitions.isEmpty())
values.size()
endpoint.getCamelContext().getClassResolver().resolveClass(endpoint.getConfiguration().getTargetModel())
!window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())
cache.removeAll()
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_velocityEngine,_templateContextHelper)
String conf=nodeEnvironment.configFile().toString(); 
(NestedForm)form
new BigInteger(buf)
suiteXmlBuilder.getMetaClass().invokeMissingMethod(suiteXmlBuilder,name,null)
!(application.change().downgrades(deployment.version()) || application.change().downgrades(deployment.applicationVersion()))
case BOLD: 
now > prefs.getLong(Constants.PREF_LAST_UPDATE_CHECK,0) + Constants.UPDATE_MIN_FREQUENCY
SubscriptionItem channelObj=channelSubscriptions.getItem(channel); 
_buildTemplateWithGradle("war-hook","war-hook-dependency-management","--dependency-management-enabled","true")
between != null
mouseEvent.getModifiers()
new OperationSetTypingNotificationsGibberishImpl(this)
RSSWebUpgrade.class
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_STOP_FUNCTION)
Localization.lang("Tools")
BooleanUtils.isFalse(p.getMetadata().getExcluded())
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1))
new MapProducerCapabilities(false,false,true,true)
StringBuilder sb=new StringBuilder(64); 
new StrutsSpringObjectFactory("constructor",null,null,msc,null,"true")
1 / 100
order=1
args.length != 1
Map<Long,Fields>
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(true)
response.getHeader(Exchange.CONTENT_TYPE) != null
DiagnosticType.error("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
pathParts[2] != null
lastReturned == streamSessions.size() - 1
new XlsExporter()
Status.constructStatuses(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
private final FixedNode node; 
mDrawable != null
createCurrentSeverities()
SLIDING_TIMEOUT=20L
getPreferences().getBoolean(DEBUG_PREF,true)
cacheController.get(internalTenantContext.getTenantRecordId())
sourceScope.getLibrariesScope()
IDLE_TIMEOUT=3
PFLAG3_ASSIST_BLOCKED=0x100
second.getWeight()
verify(mWifiService,never()).stopLocalOnlyHotspot()
expectedClockTime - 500
address.getHostName()
new WitnessService(appT)
MIN_CONNECTIVITY_COUNT=2
token.equals("»") && !prevToken.equals("\u00a0")
!hasRows(targetConnection,tableName)
id=16
TextComponent.toLegacyText(message)
public Object mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Game game=new Game();   game.setId(fs.readString("id"));   game.setYear(fs.readInt("year"));   game.setTeam(fs.readString("team"));   game.setWeek(fs.readInt("week"));   game.setOpponent(fs.readString("opponent"));   game.setCompletes(fs.readInt("completes"));   game.setAttempts(fs.readInt("attempts"));   game.setPassingYards(fs.readInt("passingYards"));   game.setPassingTd(fs.readInt("passingTd"));   game.setInterceptions(fs.readInt("interceptions"));   game.setRushes(fs.readInt("rushes"));   game.setRushYards(fs.readInt("rushYards"));   game.setReceptions(fs.readInt("receptions",0));   game.setReceptionYards(fs.readInt("receptionYards"));   game.setTotalTd(fs.readInt("totalTd"));   return game; } 
SIZE_OF_LONG + SIZE_OF_INT
JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION)
ThreadPoolIntentService.makeIntent(getContext(),mHandler,Options.TEST_URI)
ccfg0.setWriteBehindFlushFrequency(5000)
String.format("Data file row position %d differs from index file row position %d",dataStart,dataSizeFromIndex)
writer.write(line)
GenericCommand<Void>
log.warn("caught exception",e)
_training_metrics.auc().maxF1()
ctx.cache().dynamicStartCaches(cacheCfgs,false,true,true)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
buffer.nextValue(info.type,info.meta)
uri.getSchemeSpecificPart()
new GdxRuntimeException("Error during Vorbis decoding.")
"$" + functionName
ApplicationManager.getApplication().invokeLater(() -> {   final ExternalProjectsViewImpl projectsView=new ExternalProjectsViewImpl(project,(ToolWindowEx)toolWindow,myExternalSystemId);   ExternalProjectsManagerImpl.getInstance(project).registerView(projectsView);   ContentImpl tasksContent=new ContentImpl(projectsView,ExternalSystemBundle.message("tool.window.title.projects"),true);   contentManager.removeAllContents(true);   contentManager.addContent(tasksContent); } )
chain.resolveResource(exchange,requestPath,locations).otherwiseIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
new TextField<String>(textFieldId)
contains(permissionChecker,primaryKey,actionId)
previous.last.compareTo(current.first) > 0
canTakeAccessibilityFocusFromHover()
Internal.prefixKeyWithSalt(key_b)
ReflectionUtils.findMethod(user.getClass(),userPropertyToUse)
dbStat.setString(2,table.getName())
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_folder_name"))
childSubscription.setSubscription(scheduler.schedule(parentAction,parentAction))
Truffle.getRuntime().getCurrentFrame()
buildHiloOptimizer(-1,incremepnt)
users.size() > 90
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0
MacFactory.class
mLocalAlluxioClusterResource.get().getWorkerAddress()
TIMEOUT=15000
enablePreload=true
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
latch.await(10,TimeUnit.SECONDS)
builder.run()
next != null
new RuntimeException("Missing type parameter.")
dirtyOutputBuffer()
node == null
ESTestCase.randomAlphaOfLengthBetween(1,10)
res.getQuantityString(R.plurals.time_seconds_quantified,v)
printSelect(unionSelect.right(),sb)
minElevation=0
e.getStateChange() == ItemEvent.SELECTED
ModalityState.current()
Sets.newHashSet()
app.getSettings().SHOW_NEARBY_FAVORIES
winAnimator.prepareSurfaceLocked(recoveringMemory)
buckdEnabled
mHorizontals == null
LocalFileSystem.getInstance().findFileByPath(filePath)
scale(3000)
qp.getUniqueItems()
new ExecutionContext(instrumentation,executionId,graphQLSchema,queryStrategy,mutationStrategy,subscriptionStrategy,fragmentsByName,operation,variableValues,root,context)
1 < user.getListedCount()
ComboStringEditor cse=new ComboStringEditor(null,notExpression && notOther,notNull); 
logger.warn("Did not recognise element named {}",localName)
isMoving
assertFalse(Modifier.isFinal(modifiers))
oldClusterVersion.onOrAfter(Version.V_6_0_0_alpha1)
NativeDecoder.matches(out,getMatchingOutputFormats(inputFormat))
pm.setBlockUninstallForUser(packageName,blockUninstall,userId)
@GET @Path("/{petId}") @ApiOperation(value="Find pet by ID",notes="Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message="Invalid ID supplied"),@ApiResponse(code=404,message="Pet not found")}) public Response getPetById(@ApiParam(value="ID of pet that needs to be fetched",allowableValues="range[1,5]",required=true) @PathParam("petId") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,"Pet not found");   } } 
results.size() == K
request.getRequestURI()
new PrestoException(INVALID_CAST_ARGUMENT,e)
return tsr; 
namesOfResourcesWithInvalidMac.contains(cleartextPath)
new HandlerThread(THREAD_NAME)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null),JSONParseSpec.JSON)
entity.getNotes()
mKeyguardController.isKeyguardLocked()
transportService.sendRequest(node,PublishClusterStateRequestHandler.ACTION,new PublishClusterStateRequest(clusterState),new VoidTransportResponseHandler(false){   @Override public void handleException(  TransportException exp){     logger.debug("failed to send cluster state to [{}], should be detected as failed soon...",exp,node);   } } )
equals(file1,file1)
detector != null
assertEquals(2000,timeout)
m.getParameters()
setStacked(true,true)
1l << 36 - 1
mRemote.transact(REVOKE_URI_PERMISSION_TRANSACTION,data,reply,0)
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } )
flyway.setLocations("com.googlecode.flyway.sample.migration")
buffers[offset]
attribute.split("\\.")
bean.getCollectionCount()
String.format("Warning: The following roles [%s] are unknown. Make sure to add them to the [%s] file. " + "Nonetheless the user will still be associated with all specified roles",Strings.collectionToCommaDelimitedString(unknownRoles),rolesFile.toAbsolutePath())
sourcepath.isEmpty()
SkylarkDict<K,V>
measureRun(0,0,target,mLen,true,fmi)
packageNames.length == 1
synchronized (listeners) {   if (listeners == null) {     listeners=new LinkedHashSet<HttpSessionListener>(GeoServerExtensions.extensions(HttpSessionListener.class));   } } 
new ListenerInfo("https",sslServer.getLocalAddress(),openListener,xnioSsl,channel)
DbConnectionManager.closeConnection(pstmt,null)
@ConditionalOnEnablednHealthIndicator("db")
fullname.contains(".")
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,1)
LayoutLocalServiceUtil.addLayout(group.getCreatorUserId(),group.getGroupId(),privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,name,StringPool.BLANK,StringPool.BLANK,LayoutConstants.TYPE_PORTLET,false,friendlyURL,false,serviceContext)
map.set(keyValue.getKeyData(),value,0,TimeUnit.SECONDS)
_path.toString()
entity.func_189777_di() != ZombieType.NORMAL
Integer.parseInt(nid[0])
protected abstract FBTree getTreeByKey(FBTree.Key key); 
record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
/**   * Theater of Blood reward chest inventory (Raids 2)  */ THEATRE_OF_BLOOD_CHEST(10)
message.isDiscussion()
OfferDeliveryType.AUTOMATIC == deliveryType
repository.loadForRequest(url,null)
Set<String>
service.getId().equals(PublicizeConstants.GOOGLE_PLUS_ID) || mShouldHideGPlus
entry.getKey().startsWith("sun.")
listeners.preExecute(context)
new Entry((float)val,i)
EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT)
-4
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
randomFrom(SearchType.QUERY_AND_FETCH,SearchType.QUERY_THEN_FETCH,SearchType.DFS_QUERY_THEN_FETCH)
targetBoard == null
titleLabel.getPrefWidth()
new IndexWriter(d,new StandardAnalyzer(),true)
@Override public AllocatedObjectNode getMaterializedRepresentation(FixedNode fixed,ValueNode[] entries,int[] locks){   return new AllocatedObjectNode(this); } 
PhoneNumberUtils.isISODigit(number.charAt(i))
maxRows > 0
PsiTreeUtil.getParentOfType(file.findElementAt(offset),PsiComment.class)
iceBox.isSelected()
mock.expectedMessageCount(1)
closing.get()
parser.getName().equals(xhtmlExtension.getElementName()) || parser.getDepth() <= startDepth
info.getDeviceSvnUsingSubId(subId[0])
b < 'F'
listener.equals(binaryMessageHandler)
mediaVideoItem.getHeight() * 2
Nd4j.rand(200,200,max,min,Nd4j.getRandom())
isFetchActive=false
STUB_VERSION=21
synchronized (classCache) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
subscriptionManager.getOnSubscribeFunc(new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){   } } ,new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){     lastNotification.get().accept(o);   } } )
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AV_INPUT_FUNCTION)
((ContactJabberImpl)obj).getAddress().equals(getAddress())
value.readSignedInteger(offset,size)
getScrollMode(scroll,hasFirstRow,useLimit,queryParameters)
TEST_UTIL.waitTableEnabled(TEST_TABLE.getTableName())
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
ExampleItemWriterTests.class
CANCEL_TIMEOUT_LIMIT=300
LAST_VERSION=940
ContentType.create(request.getContentType())
this.getClass().getSimpleName()
Log_OC.e(TAG,"Got to start sync")
amp*=0.3
Map<String,ResolvedType>
IOException ex
32 * 1024 * 1024
(XBeanBrokerService)context.getBean("broker")
providerConfig.setTimeout(1000)
ACRA.log.e(LOG_TAG,"Unknown json subtree type, see issue #186")
!cursor.moveToFirst()
JobEntry.class
type.getModifiers()
zkController.getZkStateReader().getReplicaProps(collection,shardId,coreNodeName,null)
sRecentsBlacklist.contains(t.realActivity.getClassName())
clazzes.put(className,clazz)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
fluidIDs.containsKey(fluid.getName())
Arrays.fill(this.state,0,state.length - 1,FREE)
unsafe.compareAndSetByte(container,booleanOffset,(byte)17,(byte)121)
!context.getViolations(violationQuery).isEmpty()
String tempDataPathString=tempNoCluster.toAbsolutePath().toString(); 
stringEntry.getKey()
value + value + MINIMUM_BACKLIGHT
isAvailable(status)
synchronized (point) {   points.add(point);   int size=points.size();   if (size > MAX_RESULT_POINTS) {     points.subList(0,size - MAX_RESULT_POINTS / 2).clear();   } } 
LOG.error("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
Math.min(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
deserializerForCreator(config,enumClass,factory)
hasCollapsibleActionView()
parent.getOverriddenJoinColumn(propertyName)
onlyRemoveOutdatedData
getVersion()
value={XSSHtmlFilter.class}
from("direct:a").delay(3000)
assertEquals(15,rows.size())
/**   * Creates the  {@link TokenStream} of n-grams from the given {@link Reader}.   */ public TokenStream create(Reader input){   return new NGramTokenizer(input,minGramSize,maxGramSize); } 
Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,16,17,18,19,20)
!isRunning()
256 << zoomLevel
(Integer)criteria.uniqueResult()
-2099140913
prj0.putIfAbsent(i,i * i)
plugin.getPath()
lan
new FormAttachment(wFormat,margin)
mucUser.getInvite() != null
new LightweightThread(null,this)
timeout=5_000L
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
EXCEPTION_CAUSE_PATTERN.matcher(error)
new FairAffinityFunction()
localNodeData.dcLocalAddress.toString()
assertEquals(dataFileStream.getMetaString("avro.codec"),"null")
(short)0644
TestJsonRequest.doJsonRequest(client,false)
WsHttpUpgradeHandler.class
NODE_START_CHECK_LIMIT=5
configurationManager.addConfigurationProvider(c)
myProgramParameters.getComponent().setDialodCaption(myProgramParameters.getRawText())
networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
listIntent.toArray()
item != null
LayoutPrototypeWebUpgrade.class
a.getTranslation()
table.hasIndex(table.getColumnIndex("columnString"))
TEST_MAP_SIZE=100000
inputMaskArray != null
private void speedOtherPlayers(final Server server,final CommandSender sender,final boolean isFly,final boolean isBypass,final float speed,final String name) throws NotEnoughArgumentsException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     if (isFly) {       matchPlayer.setFlySpeed(getRealMoveSpeed(speed,isFly,isBypass));       sender.sendMessage(_("moveSpeed",_("flying"),speed,matchPlayer.getDisplayName()));     }  else {       matchPlayer.setWalkSpeed(getRealMoveSpeed(speed,isFly,isBypass));       sender.sendMessage(_("moveSpeed",_("walking"),speed,matchPlayer.getDisplayName()));     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
TimeoutUtil.sleep(1100)
public class DefaultDynamicTransformerRegistry implements DynamicTrnasformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
new DefaultConfiguration(new NoConnectionProvider(),null,null,null,null,null,null,null,null,null,dialect,settings,null)
new ByteSizeValue(50,ByteSizeUnit.MB)
m_data.rewind().forward((int)key_offset).getFixString((int)key_length)
user == null
!browser.isLoad()
SammonMapping.class
chatPanel.getChatStatusIcon()
logger.debug("Requsting URL {}",url)
Arrays.asList(User.class,Organization.class,Role.class,UserGroup.class,Group.class)
new ByteBuddy().subclass(Object.class).name("example.Type").make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
mouse().alt().clickAt(1,1)
USE_MACOSX_CALAYERS=true
command != null
TransactionInterceptor.class
importData ? 4 : 4
Assert.assertEquals(122L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
EnumDict<String>
name.length() - 2
keyFrameMeta.timestamps[i] > ts
TaskLog.captureOutAndError(command,stdout,stderr,logLength)
plan != null
FileSystemUtils.exists(paths)
mAppOpsManager.noteOp(opCode,callingUid,opPackageName)
contentService.submitContentFromSandbox(contentIds,"UserSandBox","NumeroUno")
project.getExtensions().add("idea",ideaModel)
fragUtils.getClass()
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()
lightSpecular[lightCount][2]
new WebdavEntry(resp.getResponses()[0])
ro.isStopApplicable(ro.bearingVsRouteDirection(loc),i)
id=15865
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer())
commonPrefixLength == chars.length()
@NotNull CommitId getId(); 
namespace.equals("")
name.startsWith("!") && name.endsWith("!")
major < 3
createAggregator(aggregationBuilder,fieldType,indexSearcher)
calendar.roll(Calendar.DATE,-1)
i == 1
RexUtil.simplify(rexBuilder,node)
hasAuthenticationTimeoutExpired()
new Dimension(700,400)
Thread.sleep(75)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
upgradeDDLRecordSetClassName(classNameDependencies)
FMLLog.log(mod.getModId(),Level.FINE,"Mod Logging channel %s configured at %s level.",level == null ? "default" : level)
page.getSizeInBytes()
call != null
accountCapsule.getFreeAssetNetUsage(tokenID)
cctx.wal() != null
DISPLAY_TASKS_PORTRAIT + 2
ROUTE_IGNORED_WARNING_CODE=4100
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)
mFragments.mCurState < Fragment.CONTENT
new IllegalAccessError("read-only")
g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),expr)
typCategoryStr != null
new SQLException("Table exists","I6000",288,null)
assertThat(map).contains(p)
Const.isEmpty(stepTablename)
onJava10()
new DateTime(2012,3,2,23,59,59,0,testTimeZone)
o.getClass().getSimpleName().equals("SegmentCoreReaders")
LOG.info("Found operation: " + ori.getMethod().getName())
broker == null
handleSecurityPermissionEndpoints(principalNode,permConfig)
numMessages=1000
ImplemetationMethodDescriptor methodDescriptor
logger.warning("Unable to load image using TGA loader!")
new BundleSavedState(source)
underlying.next()
path.charAt(i) == PERIOD
Number.class
@Nullable Object value
resources.getDimension(R.dimen.close_handle_height)
new JobConf(config_)
PsiElement superClass=((PsiAnonymousClass)typeDefinition).getBaseClassReference().resolve(); 
t.getType() == Term.Type.STRING
new Builder().setDuration(3000).setTextColor(android.R.color.holo_green_light)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
activityType == ACTIVITY_TYPE_RECENTS
new ColumnInfo(Messages.getString("SetVariableDialog.Fields.Column.VariableType"),ColumnInfo.COLUMN_TYPE_CCOMBO,SetVariableMeta.getVariableTypeDescriptions(),true)
addIndex(indices)
public Integer getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
new TextField<String>(JMSConfiguration.GROUP_KEY)
public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
TIMESTAMP_READ_METHOD.invoke(object,connection)
manager != null
GL11.glGetInteger(pname,params)
MethodConstant.of(instrumentedMethod.asDefined())
guiResource.getImageBol()
index != 0
new IdentityHashMap<>(values.length)
source.toString()
SLTestSlowPath01BuiltinFactory.getInstance()
this.getStyleClass().setAll("document-viewer")
state == SocketState.CLOSED
view.getStylesheets().add(AbstractDialogView.class.getResource("Main.css").toExternalForm())
count < 51
TfsShell.convertMsToDate(files[3].getCreationTimeMs())
new AnalyzedToken(word,taggerTokens[i + 1],taggerTokens[i])
public TokenStream create(TokenStream input){   return new RemoveDuplicatesTokenFilter(input); } 
batch.getSample().getRequiredBatchMemorySize() * 5
logger.error(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
new IllegalArgumentException()
ourXWindowIDEA94683FocusBug && isFocused() && !myRequestFocus&& prevOwner != null
that.timestamp.isEqual(timestamp) && that.windows.size() == windows.size()
e1.getPointerCount()
s.charAt(3) == '<'
TransactionMetadata::setInActive
assertEquals(result.toString(),expected)
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,true)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,accountId,"")
fortData.getLureInfo().getLureExpiresTimestampMs() < api.currentTimeMillis()
mAlpha == 0
rm.add(new QueryPath(cfName,cosc.super_column.name,column.name),column.value,column.timestamp)
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range))
delta.assetsSeq != ASSETS_SEQ_UNDEFINED
assertEquals(55,StringUtil.countMatches(drl,"rule \""))
mCol.getDb().getDatabase().setTransactionSuccessful()
ToolUtils.sleepIgnoreInterrupt(60000)
st.setCharacterStream(name,characterStream.asReader(),characterStream.getLength())
element == null
Slog.e(TAG,"Hardware Activity-Recognition not supported.")
n.extras.getString(Notification.EXTRA_TITLE)
S extends Tree
ContainerUtil.newTroveSet("intellij.platform.commercial","intellij.idea.ultimate.resources","intellij.platform.commercial.verifier","intellij.diagram","intellij.diagram.impl","intellij.uml")
toolWindow.activate(null)
reordableChildren.size() > actionUrl.getAbsolutePosition()
this.getDependencies()
!assetAutoTaggerEntries.isEmpty()
logger.warn("Cannot handle repeat command ({})",e.getMessage())
latch.endLatch.await(400,TimeUnit.MILLISECONDS)
new ShowArticleOnTouchListener("feature_articles/about.html",getActivity(),name)
XmppStringUtils.parseBareAddress(userJID)
id=3
LOG.info("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
coyoteRequest.getReadListener() != null
file != null
String prefix
ServerEndpointConfig.class
info.getImeiForSubscriber(subId[0])
MavenHelpers.getOrCreateElementBuilder(build,"name")
MAGIC_GEN_NUMBER=0xD0_46_B4_E4_0C_7D_07_CFl
mAuthorities.get(i)
textChangeObservable.debounce(400,TimeUnit.MILLISECONDS,Schedulers.io())
mState.isAlive()
{ENDPOINT_DISPLAY_ITEMS,DISPLAY_ITEM_BIT_CLOCK,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}
decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf2)))
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,method.getModifierList()) == null
uri.toASCIIString()
new CharChunk()
uiSettings.setShowToolWindowsNumbers(myShowCodeLensInEditorCheckBox.isSelected())
kernelHeight >= (inHeight + 2 * padHeight)
/**   * Returns a trigger which never fires. Output will be produced from the using  {@link GroupByKey}when the  {@link BoundedWindow} closes.  */ public static OnceTrigger ever(){   return new NeverTrigger(); } 
layoutPageTemplateLocalService.updateLayoutPageTemplate(pageTemplateId,name,layoutPageTemplateFragments,serviceContext)
name.equals(that.name)
response.set(ROLLED_BACK)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).getAndSet(value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()))
Log_OC.wtf(TAG,"Server check tried with OperationService unbound!")
string.indexOf(oldname) != -1
JavaScriptClassContributor.getItemsByNameStatic(name,pattern,project,includeNonProjectItems)
days(30)
/**   * {@inheritDoc}   */ @Override public void start() throws IgniteCheckedException {   if (dataSrc == null)   throw new IgniteCheckedException("Failed to initialize cache store (data source is not provided).");   if (dialect == null)   dialect=resolveDialect(); } 
ChannelBuffers.buffer(length)
id=14238
Config.supportOmemo()
assertEquals(0.31070661329904065,mse,1e-8)
javadocMethod != null
PasswordEncryptorUtil.encrypt(jPassword)
new IllegalArgumentException("Tag " + tagName + " not found. ")
BATCH_SIZE=500
argumentsLength == 1
downstreamNodes.equals(executionPhase.nodeIds())
new TanhDerivative(x,y,z,n)
info.getDeviceIdForPhone(slotId)
Throwable t3
notifierFuture.cancel(true)
from.getItem().shouldCauseReequipAnimation(from,to,changed)
setStatus(SC_MOVED_TEMPORARILY)
getLargestAlignment(targetDataLayout)
logger.debug("Mapped {} to {}",t,e.getValue())
size=32
intent.setData(uri)
UNPINNED=0x7FFFFFFF
id=15836
maxWait=50
allowStateLoss
new WorldPoint(2447,3418,0)
ire.printStackTrace()
LOGGER.warn("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
assertEquals(12,scannedBeanCount)
Color.red(endColor)
manager.beginTransaction().remove(fragment).commit()
cache.size()
JenkinsResultsParserUtil.combine("Unable to rebase ",targetBranch.getName()," to ",sourceBranch.getName())
formatted.split("\n")
mTfs.delete(mTfs.open(new TachyonURI(filePath)))
postAgg.getName().equals(topNMetricName)
assertEquals(2,result.getAuthorities().size())
precision=1E6
SkylarkDict<String,Object>
classMapper.lookupType(reader.getNodeName())
new InetSocketAddress("localhost",8888)
new VisorBinaryConfiguration()
a.getInt(com.android.internal.R.styleable.Animator_duration,0)
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst)
IllegalArgumentException e
new ConnectionError(sm.getString("frameType.checkStream",this),Http2Error.PROTOCOL_ERROR)
timeout=3000
HashMap<String,String>
getJSDocTypeWithBraces(operation)
new MessagingException("Cannot open folder: " + e.getMessage())
keyCode == KeyEvent.KEYCODE_BACK
height / 2
reporterCtl.setVoidCallable()
!mAwake
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(false)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_velocityEngine,_templateContextHelper)
RemoteException e
myImplementation.clear()
lastUpdateTime2 > lastUpdateTime
new IOException(sm.getString("TODO"))
GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcOperations namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
log.warn("Not found",e)
new MatParamTexture(VarType.Texture2D,paramName,texture,0,null)
mService.saveConfiguration(mContext.getOpPackageName())
final string fpCat=(p.category != null) ? p.category : ""; 
Calendar.getInstance(JSON.defaultLocale)
(prop.getModifiers() & ACC_FINAL) != 0
param.setResult(xparam.getThrowable())
node.executorManager.executeLocaly(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
LOG.debug("Skipping incompatibly changed class: " + className)
assertEquals(6358481,received.get(0)[1])
Assert.assertTrue("Some completion variants are missed " + missedVariants,false)
new CompositeException(ex,e)
assertEquals(200,animator.getFrame())
public static ArrayValue localTimeArray(LocalTime[] values){   return new LocalTimeArray(values); } 
Assert.assertEquals(6033531930L,trace.getReceipt().getEnergyFee())
bg treeGen=new gy(); 
Assert.assertEquals(3,clusterEventListeners.size())
run.size() > maxBatchWriteSize
removeFlagForThreadsFromCache(account,ids,flag)
finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
loadRunnable instanceof LongTask
internalRenderers.containsKey(name)
script.getInstructions()
batteryVp >= full
1024 * 1024 * 14
logger.info("[v] Unsecure sync completed")
DLFolderLocalServiceUtil.deleteFolder(parentFolder.getFolderId())
payload.intPayload[2]
BaseMessages.getString(PKG,"AutoDoc.Exception.UnknownFileTypeValue")
outputPath.endsWith(DexStore.JAR.getExtension())
DLAppLocalServiceUtil.updateFolder(folder.getGroupId(),folder.getFolderId(),folder.getParentFolderId(),"New Name",RandomTestUtil.randomString(),serviceContext)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
meta.getColumnDefinition(columnName.key)
Top top1=new Top(); 
nextInfo.directionInfo == null
createCurrency("BTG","Bitcoin Gold",null,null)
error("Unable to connect due to unrecognised server certificate")
listener == null
new TransactionOptions().setDurability(0).setTimeout(10,TimeUnit.SECONDS)
logger.info("transport is open - connecting")
categoryMap.get(category.getParentId())
FSA.getInstance(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
INGORE("ignore")
doOpenIfChanged(false)
destination.delete()
upgradeVersion=36
new FieldFrame(null,true,null,null)
SocialActivityInterpreterLocalServiceUtil.interpret(selector,_activitySet,serviceContext)
forward.closeNow()
file == null
type.createBlockBuilder(new BlockBuilderStatus(),100)
doMethod("GET","/books/" + bookId,null)
!mShowAnimations && mCardTimer.getVisibility() == View.INVISIBLE
myApplication.invokeLater(new Runnable(){   public void run(){     if (myModule.isDisposed())     return;     ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();     if (indicator != null) {       indicator.setIndeterminate(true);       indicator.setText("Updating manifest indices.");     }     myBundleManager.reindex(myModule);   } } )
localBroker.request(sub.getLocalInfo())
LOG.isDebugEnabled() && getDefaultState(component,name,stateClass) != null
iter > 1
PsiTreeUtil.getParentOfType(uexpr,ScopeOwner.class)
moveDocument(client,sourceParentDocumentUri,sourceDocumentUri,targetParentDocumentUri)
t3.getSize()
"com.android.browser".equals(browserPackageName)
java(convention).getClassesDir()
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=6
/**   * Tests that compression is turned on.  */ @RunWith(JUnit4.class) public class TransportCompressionTest extends AbstractTransportTest {   private static int serverPort=TestUtils.pickUnusedPort();   private static final DecompressorRegistry decompressors=DecompressorRegistry.newEmptyInstance();   private static final CompressorRegistry compressors=CompressorRegistry.newEmptyInstance();   @Before public void beforeTests(){     Fzip.INSTANCE.anyRead=false;     Fzip.INSTANCE.anyWritten=false;   }   /**   * Start server.   */   @BeforeClass public static void startServer(){     decompressors.register(Fzip.INSTANCE,true);     compressors.register(Fzip.INSTANCE);     startStaticServer(ServerBuilder.forPort(serverPort).compressorRegistry(compressors).decompressorRegistry(decompressors),new ServerInterceptor(){       @Override public <ReqT,RespT>Listener<ReqT> interceptCall(      MethodDescriptor<ReqT,RespT> method,      ServerCall<RespT> call,      Metadata headers,      ServerCallHandler<ReqT,RespT> next){         Listener<ReqT> listener=next.startCall(method,call,headers);         call.setMessageCompression(true);         return listener;       }     } );   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Test public void compresses(){     final SimpleRequest request=SimpleRequest.newBuilder().setResponseSize(314159).setResponseType(PayloadType.COMPRESSABLE).setPayload(Payload.newBuilder().setBody(ByteString.copyFrom(new byte[271828]))).build();     final SimpleResponse goldenResponse=SimpleResponse.newBuilder().setPayload(Payload.newBuilder().setType(PayloadType.COMPRESSABLE).setBody(ByteString.copyFrom(new byte[314159]))).build();     assertEquals(goldenResponse,blockingStub.unaryCall(request));     assertTrue(Fzip.INSTANCE.anyRead);     assertTrue(Fzip.INSTANCE.anyWritten);   }   @Override protected ManagedChannel createChannel(){     return ManagedChannelBuilder.forAddress("localhost",serverPort).decompressorRegistry(decompressors).compressorRegistry(compressors).intercept(new ClientInterceptor(){       @Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(      MethodDescriptor<ReqT,RespT> method,      CallOptions callOptions,      Channel next){         final ClientCall<ReqT,RespT> call=next.newCall(method,callOptions);         return new ForwardingClientCall<ReqT,RespT>(){           @Override protected ClientCall<ReqT,RespT> delegate(){             return call;           }           @Override public void start(          final ClientCall.Listener<RespT> responseListener,          Metadata headers){             ClientCall.Listener<RespT> listener=new ForwardingClientCallListener<RespT>(){               @Override protected io.grpc.ClientCall.Listener<RespT> delegate(){                 return responseListener;               }               @Override public void onHeaders(              Metadata headers){                 super.onHeaders(headers);                 String encoding=headers.get(GrpcUtil.MESSAGE_ENCODING_KEY);                 assertEquals(encoding,Fzip.INSTANCE.getMessageEncoding());               }             } ;             super.start(listener,headers);             setMessageCompression(true);           }         } ;       }     } ).usePlaintext(true).build();   } static final class Fzip implements Codec {     static final Fzip INSTANCE=new Fzip();     volatile boolean anyRead;     volatile boolean anyWritten;     @Override public String getMessageEncoding(){       return "fzip";     }     @Override public OutputStream compress(    OutputStream os) throws IOException {       return new FilterOutputStream(os){         @Override public void write(        int b) throws IOException {           super.write(b);           anyWritten=true;         }       } ;     }     @Override public InputStream decompress(    InputStream is) throws IOException {       return new FilterInputStream(is){         @Override public int read() throws IOException {           int val=super.read();           anyRead=true;           return val;         }         @Override public int read(        byte[] b,        int off,        int len) throws IOException {           int total=super.read(b,off,len);           anyRead=true;           return total;         }       } ;     }   } } 
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,account.getId(),paymentMethodId)
console.readPassword()
(Params)in.readOptionalNamedWriteable(PersistentTaskParams.class)
subModule.add(persistencePackage)
fragmentEntryPersistence.filterCountByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
{4,5,5,11,6,5,7,5,11,11}
commState.getBoolean()
finalOverlayView.getParent() != null
str.chomp_bang19(context)
e.update(2L,recid,Serializer.LONG)
clone.setName(getName())
position > 0
Env.valueOf(env)
grpCtx.config().getRebalanceDelay() != -1
webSocket.resource().getAtmosphereResourceEvent().isSuspended()
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR,VARCHAR.getTypeSignature().toString(),VARCHAR)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
T
deopt1.action()
mConfig.hasTransposedNavBar
TimeUnit.SECONDS.toNanos(5)
new PageException("分页参数不是合法的数字类型!")
private final MessageHeaderAccesssor headerAccessor; 
consumer.receive(1000)
Assert.assertEquals(catalogsJson.get(0).getPriceLists().size(),6)
case 7: 
file.getName().getURI()
PostgreTable.class
executeDraw()
LOG.error("Process %s exited with error code %d",buckPyProcess,exitCode)
assertThat(System.currentTimeMillis() - startTime).isBetween(500L,600L)
Object bindingTarget
grantResults[0] == PackageManager.PERMISSION_GRANTED
serialVersionUID=9006432914018679675L
edge.getDownNode()
THUMBNAIL_APP_TRANSITION_DURATION=300
Assert.assertEquals(resJsonObject.getJSONArray("SERVER_TENANTS").length(),8)
mappingsDir.exists()
id=15870
config.getBroadcasterFactory().lookup(a.broadcaster(),true)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause drPauseState(){   GridCacheProjectionImpl<K,V> prev=gate.enter(prj);   try {     return delegate.drPauseState();   }   finally {     gate.leave(prev);   } } 
!sessionToken.equals(stateParam)
awsClient.deleteLaunchConfiguration(resource.getId())
(status & 0x80000000) > 0
ViewRecordTest.class
"true".equals(mode)
mCharging ? Tile.STATE_UNAVAILABLE : mPowerSave ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE
moveCursorToRow(pac.getRow())
version != 0
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),false)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mock.expectedBodiesReceived("Hello World 2","Hello World 4")
@Override public ResponseImpl example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } 
logger.getLogger().warn("Shut down master")
dir.exists()
scan.getResults()
? extends VcsCommitDetails
accessor.value()
PsiTreeUtil.getParentOfType(element,PsiClass.class)
this.instanceManager != null
size=1f
depthErrorXYZ("modelY")
new IncorrectOperationException()
object2StaticBuffer(value)
this.args.nodeId()
flux.mapError(UnsupportedMediaTypeException.class,ERROR_MAPPER)
getFastAdapter().notifyAdapterItemInserted(position)
Arrays.asList("bash","-c",command)
new OptionValue<>(10)
userId <= 0
Object listener
@Specialization protected Object fromShort(short value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
logExitAPICall(log,transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames)
System.out.ptintln("--")
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapBaseTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
post.hasChangedFromLocalDraftToPublished()
elementType == null
fail()
dfa == null
mPwCollection.getGroupedPwPairsSortedByRank()
id=28
curRowNum >= segmentSize
ImmutableMap.of(BuildInfo.BUILD_TIMESTAMP,Key.of(KeyType.INTEGER,"0","0"))
consumed || ((AndroidJoyInput14)joyInput).onKey(event)
return hasValueProxies; 
lock.isLocked()
mSettings.writeRuntimePermissionsForUserLPr(userId,true)
type.equalsIgnoreCase("text/css") == true
new JGroupsFilter(bc,event.getAtmosphereConfig().getWebServerName())
new PlainMenuItem(iconId,text,null,needLinks,isUrl,collapsable,collapsableView,onClickListener)
intent.putExtra(EXTRA_THEME,1)
unbox(inWatchlist,movie.watched)
offset == 0
Settings.Secure.getInt(mResolver,NETSTATS_ENABLED,1)
new LinkedList<>()
new IllegalArgumentException()
_layout.isTypePanel()
bundleBinaryPath.getParent()
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
PROJECTS=1
resource.terminate(input.getId(),extractorId)
sm.getString("managerBase.sessionAttributeValueClassNameFilter",name,value.getClass().getName(),sessionAttributeNamePattern)
maxLifetime < 120000
ep.getClass()
new FontComboBox(false,true)
results.getCount() > 0
calendar.set(Calendar.DAY_OF_WEEK,3)
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n"+ "Checkstyle ends with 2 errors.%n")
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_LOW)
_fragmentCollectionLocalService.deleteFragmentCollection(entryId)
session.setMaxInactiveInterval(getMaxInactiveInterval())
LOG.info("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
port == 8080
size() >= this.capacity
Integer minIntDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
ArrayUtil.contains(childCalendarIds,childCalendarBooking.getCalendarId())
hr != null
orderBook.getDate()
processInstance.getId()
Map<String,V>
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build)
Thread.sleep(10000)
whitePoint=5.0f
processExistingType(resolveType,processor,state)
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
resultsE.appendChild(reportE)
new ServerPartition(partitionKey,rowType)
changed
i < 10
return 62; 
day=10
"abcdefghijklmnop".getBytes()
ViewPortletSiteMapTest.class
mPowerRequest.policy == DisplayPowerRequest.POLICY_DIM
return 6; 
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
pb.setProcessListener(pBmpHandler)
app.getSettings().SHOW_IMAGES
config.swapBones()
-flexibleSpace < translationY
nextOffsetStart > rangeToRemove.getEndOffset()
sendObjectInfoResult.getCompressedSize()
e instanceof NoSuchUserException
spec.getClass()
items[29]
measureRun(0,0,target,mLen,false,fmi)
public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } 
id=15847
(filterMap.getDispatcherMapping() & FilterMap.INCLUDE) > 0
nestedIA.setContext(context)
!startPositioningLocked(win,true,startX,startY)
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(ChangingLoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
public static ArrayValue timeArray(OffsetTime[] values){   return new TimeArray(values); } 
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Throwable {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
tableHasColumn("MicroblogsEntry","creatorClassNameId")
this.principalSuffix != null
order.getFilledSize()
/**   * Add a  {@link Publication} for publishing messages to subscribers.  * @param channel  for receiving the messages known to the media layer.  * @param streamId within the channel scope.  * @return the new Publication.  */ public Publication addPublication(final String channel,final int streamId){   clientLock.lock();   try {     return conductor.addPublication(channel,streamId);   }   finally {     clientLock.unlock();   } } 
assertBusy(() -> {   GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();   SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);   logger.info("Snapshot status [{}], successfulShards [{}]",snapshotInfo.state(),snapshotInfo.successfulShards());   assertThat(snapshotInfo.state(),equalTo(SnapshotState.SUCCESS));   assertThat(snapshotInfo.successfulShards(),equalTo(shards)); } ,10,TimeUnit.SECONDS)
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws IOException {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } 
Observable.create(takeWhile(source,new Func1<String,Boolean>(){   @Override public Boolean call(  String s){     return false;   } } )).toBlockingObservable().last()
BitUtil.check(status,6)
ClassNotFoundException e
unresolvedReferenceDiagnostic.getReference()
mUserManager.getUsers()
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(64)
Assert.assertEquals(118L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
new EnterSelectionDialog(shell,props,files,Messages.getString("ExcelInputDialog.FilesRead.DialogTitle"),Messages.getString("ExcelInputDialog.FilesRead.DialogMessage"))
new ImmutableShardRouting(indexName,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
GitBranch.list(myProject,myDir,true,true,branches)
assertEquals(2,conceptStopWords.size())
EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries
"unable to parse " + abstractOption
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"cpuinfo",pw)
readBuffer.position() > 0
(next=this.input.get(currentPosition++)) != null
telephony.getForbiddenPlmns(subId,appType)
JournalArticleFinderUtil.countByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,type,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
targetColumn.getTable() != null
mScrollView.setVisibility(View.GONE)
mbRootMessage.getMessageId()
Long.valueOf(subSecs)
canPTR
targetPrincipal == null
promise.tryFailure(new ClosedChannelException())
replace(wmlTemplateString,0,new StringBuilder(),mappings)
new IntRangeValidator(1,true)
new StringBuilder(709)
mapperContextRootRedirectEnabled=false
context.proxyOf(entity,false)
DDMStructureLocalServiceUtil.getFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
data.length < columnCount
preferences.putString("cityAdminLevel",s)
/**   */ public class S3SnapshotRestoreOverHttpTest extends S3SnapshotRestoreAbstractTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","http");     return settings.build();   } } 
Convert objConvert=new Convert(); 
oldVb.getBufferType() == VertexBuffer.Type.Index
SampleObservables.numberStrings2()
createTx(blockchain,sender,receiveAddress,data,1)
items[26]
out.write(CONSTANT_VALUE_ARRAY_TAG)
segments == null
buttons.size() > 3
tx == null
mAlarmManager.set(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
available=true
sessionConf.get("tez.queue.name") != null
params.getConsole().getStdErr()
holder.createInfoAnnotation(element,composeTooltipString(descriptor,deprecated))
id=15845
new IOException("data still remaining in inflater",e)
_relanuchCounter > maxRelaunch
RAMDirectory dir=new RAMDirectory(); 
block.getChildren()[2]
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
VERSION=8
/**   * Closed connections.   */ @GridToStringExclude private final LongAdder closed=new LongAdder(); 
dir.findChild("python")
runLayoutListener()
callback.done(true)
public class RetryFailure extends Error {   private static final String MESSAGE="Test failed despite retries";   public RetryFailure(  Throwable cause){     super(MESSAGE,cause);   } } 
new NamespaceFilter(XmlUtil.FACELETS_TAGLIB_URI,XmlUtil.FACELETS_TAGLIB_URI2)
any(TransactionHook.Outcome.class)
ensureExpectedToken(token,Token.FIELD_NAME,parser::getTokenLocation)
data[1] < 4
DATABASE_VERSION=482
targetLocation.x >= hOffset + viewRect.width
aClass.isInterface() || aClass.isAnnotationType()
statistics.addGetTimeNano(System.nanoTime() - start)
getJavaVersion(nom)
s > 0
endPos < paraEnd
num.add(j,numbers.get(keys[j]))
startTest(getMethodName(),false)
body[0][0][0]
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
assertEquals(0.3169947529691508,mse,1e-8)
assertEquals(v1,v2)
GL.glPolygonOffsetEXT(factor,units)
solrDocument1.getFieldNames()
new String(jsonExpectation)
buildArchiveContext(persistenceUnit,false,resultCollector)
(NON_DOUBLE_LONG & in) == 0
new DoubleValue(Float.parseFloat(text))
c.getDeclaredMethod(mtdName,paramTypes)
HttpComplianceSection#RFC7230_3_1_1_METHOD_CASE_SENSITIVE
!tryExtractRequired(buildingInfo.entitiesRequiredItems.get(schematicEntity),buildingInfo.entitiesRequiredFluids.get(schematicEntity),true).isPresent()
recipe.hasKey("energy",6)
logger.error("Cannot parse " + str + " using 0 minutes")
formatTilesDefsXML(fileName,content)
surfaceHolder.setFixedSize(320,240)
DefaultFileSystemMaster.class
i < 1000
mMat[9]
VersionPrinter.printVersion(Thread.currentThread().getContextClassLoader())
invoke(args.first(),args.rest())
Collectors.toList()
util.getDataTestDir(table)
logger.info("Creating Object {}",count.getAndIncrement())
new IocException("_mirror_factory_init","Mirror Factory init fail",e)
buildData.getTopLevelMasterHostname()
config.isConfigurationSection("socialspy-commands")
assertEquals(3,executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
equalTo(20)
factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)
pdf.getName()
new StreamingModeExecutionState(NameContextsForTests.nameContextForTest(),"testState",null,NoopProfileScope.NOOP)
CollectionUtils.filter(featuredProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((FeaturedProduct)arg).getProduct()).getArchived();   } } )
s2 < s1
factory.getDestination(getEndpointInfo("sna","foo2","https://localhost:9003"))
wait <= 0
psiFile == null
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.installerPackageName,null,pkgSetting.name,null)
layoutFriendlyURLLocalService.addLayoutFriendlyURLs(user.getCompanyId(),groupId,plid,privateLayout,friendlyURLMap,serviceContext)
jniGetLocalAnchorA(addr,tmp)
this.service != null
e.getPresentation().setVisible(false)
result.setBytes(8)
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",1,SECONDS)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new GridBag().setDefaultInsets(new Insets(0,0,DEFAULT_VGAP,DEFAULT_HGAP)).setDefaultWeightX(1).setDefaultWeightY(0.1)
origin.absoluteValue().doubleValue() > complexNumber.absoluteValue().doubleValue()
fs.move(file,new File(file.getParent(),newName))
t.getState() != Thread.State.RUNNABLE
args[0].length() == 51
offset > i
assertCompletionVariants(myProjectPom)
IMPL_HTTP_CLIENT4.equals(impl)
new IllegalArgumentException(ERROR_ADD_REMOTE_NAME_MISSING)
templatesToAddressList(engine,replyTo,model)
new ModelNode().set(25000)
Slog.e(TAG,"Unable to bind FusedProxy.")
logger.info("copy {} to {}",srcFile.getAbsolutePath(),destPath)
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN,UNSET)
Double.valueOf(parser.group(index++)) / 60
moduleProfile.setOutputRelativeToContentRoot(true)
Context.packingClass(initialConfig)
new Scale(1,0,0,0)
Executors.newCachedThreadPool()
dimensionsSpec.getDimensions()
getConversionByClass(value.getClass())
assertThat(context).getBeans(HandlerMapping.class).hasSize(7)
types != null
entry.key == k
new InputStreamReader(is)
cSet.getConcept()
InventoryMessage getdata=new InventoryMessage(params); 
new NoteDrawerTagAdapterViewHolder()
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTest {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
JZVideoPlayer.onScrollReleaseAllVideos(view,firstVisibleItem,visibleItemCount,totalItemCount)
XmlSuite.DEFAULT_PRESERVE_ORDER.equals(m_verbose)
LOG.warn("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
wsdlLocation.length() > 0
EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)
new Rectangle(3,2,ERROR_ICON_WIDTH,ERROR_ICON_HEIGHT)
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n")
or.isYNegated()
(PyReferenceExpression)expression
MESSAGES.failToReplicateAttribute()
setUseSynchronousMode(true)
WebPageDetail wd
new VideoMediaDeviceSession(this,session)
displayNameComparator.compare(first,second)
name.isEmpty()
endpointId <= result.getInstances()
URL.encode(content)
entry.getValue().getTimeWindowSet().size() < 2
return mChangingAppearingDuration; 
calendar.get(HOUR)
callBacks.parallelStream()
jobLogTab.getText()
(ElasticSearchException)t
new NagiosNscaStub(25667,"password")
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
OptionBuilder.create(CMD_PORT)
notebook.cloneNote(note.getId(),"clone note with Exception result")
addDaysAndCheckForCompletion(1)
dir.setMaxSizeInBytes(2)
info.getSubscriberIdForSubscriber(subId)
classNode.hasDeclaredMethod(mixinMethod.getName(),mixinMethod.getParameters())
mime == null
id=49
assertEquals(true,StringUtils.isNumeric(""))
rangeTable.getRowCountApproximation()
200000 * 4 * 3
@Override public Appendable append(CharSequence csq,int start,int end){   if (csq == null) {     return append(NULL_STRING);   }   grow(ref.length + end - start);   for (int i=start; i < end; ++i) {     setCharAt(ref.length++,csq.charAt(i));   }   return this; } 
KeyWord link=new KeyWord(); 
new ReactorManager(Collections.EMPTY_LIST)
modificationDateField != null
420 * KB
mInternalOnScrollListener=listener
Math.max(titleRight,subtitleRight)
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentType(TEXT_EVENT_STREAM)
computator.getContentRectMinusAxesMargins()
new JComboBox()
CompilerDirectives.inCompiledCode()
flusher.register(handler)
HashMapDBSimple<byte[]>
zzStartRead <= zzCurrentPos
CallParticipantRecord cpr=new CallParticipantRecord((String)callParticipantIDs.get(i),new Date(Long.parseLong((String)callParticipantStart.get(i))),new Date(Long.parseLong((String)callParticipantEnd.get(i)))); 
rangedRegion.getProximityUuid()
targetMeta.convertData(sourceMeta,r[rowcolumn])
getDefaultLayout(groupId,privateLayout)
protected final MethodRedefinitionResolver methodRedefinitionResolver; 
state.getItemCount() == 0
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE)
LOG.error("Failed to find " + baseDirectory.getAbsolutePath())
propResource.get(BOOT_TIME).asBoolean()
"Expanded " + before + " to "+ replace
targetCondn == null
eventFunc.equals("conf_api_sub_unmute")
diagnosedRanges.remove(2)
TimeUnit.SECONDS.toMillis(25)
CLOCK_DAEMON.scheduleAtFixedRate(timerTask,period,period)
entry.getKey().subscribeToRootRefreshEvents(entry.getValue(),myLogRefresher)
new String(payload)
uris.keySet()
WildcardType maybeWildcardType
LOG.debug("removing shm " + shm)
System.lineSeparator()
check(given("HEAD","master","origin/master"),ContainerUtil.list("HEAD"),Pair.create("Local",ContainerUtil.list("master")),Pair.create("Tracked",ContainerUtil.list("origin/master")))
limitOrder.getType() == OrderType.BID
defaultInt=UNSET
Math.min(1000L,connectionTimeout)
INDEX_VERSION=16
ohCache.size()
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName),"success",String.valueOf(rules.getRuleItems()))
getDataSource()
new Insets(2,6,2,6 + 6)
resultBits == 32
dao.meta().isSqlServer() || dao.meta().isHsql()
generateBitmapFromImageData(rotateImage(mImageData,mWidth,mHeight),mWidth,mHeight)
myTypeChecker.checkExpressionIsAssignableToType(arguments[0],BOOLEAN_CLASS_NAME,"javascript.argument.type.mismatch",null)
row1 * layerTileHeight
assertCompletionVariants(myProjectPom,"jar","pom","war","ejb","ejb-client","ear","bundle")
mapper.getTypeFactory().uncheckedSimpleType(Event.class)
super.execute()
nai.networkCapabilities.satisfiedByNetworkCapabilities(networkCapabilities)
Screen.dp(34)
new GridDrPause(pauseReason,errMsg)
editor == null
STUB_VERSION=45
!isChecked
is(3)
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent)
!connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)
Object data
0 < f
id.provider.info != null
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).mapError(this::mapError)
unsafeBuffer.wrap(decodingBuffer)
closeTo(2569.0,200.0)
state.registerDeleted(descriptor.getTarget(),file)
val > mMaxValue
mHeartbeat != null
Cloud.class
ti > 0
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     if (!myProject.isOpen())     return;     myFrameworkInstanceLibraryManager.updateFrameworkInstanceLibraries();     myAlarm.cancelAllRequests();     myAlarm.addRequest(new Runnable(){       @Override public void run(){         rebuildOSGiIndices();       }     } ,500);   } } )
mv.visitAnnotation(Type.getDescriptor(NotNull.class),true)
metadata.getClass()
m.put(OutputStream.class,os)
ddmStructureService.deleteStructure(ddmStructure.getStructureId())
pinScrollBy(hdelta,vdelta,true,0)
MapActivity activity=(MapActivity)fragment.getActivity(); 
bulkInsertableMap.get(persistentObjectClass)
_closed=false
this.seperator=seperator
ArrayList<MemberNode>
new Button("submit",new StringResourceModel("submit",this,null)){   private static final long serialVersionUID=-2842881187264147131L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setJAI((JAIInfo)jaiModel.getObject());     gs.save(global);     doReturn();   } } 
getCurrentRequestId()
if (VDBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
parseLibraryFileChunk(jar,libDescription,zip)
"Executing SQL script from " + script
Preconditions.checkArgument(argv.length == 2)
new EditText(getDialogContext(true))
trip ? (val & 0x3F) : 64
"could not execute request: " + response
new StringBuilder(254)
manualClock.addTimeMs(1020)
DestinationFactoryManager.class
component.setUnderlined(object.get("obfuscated").getAsBoolean())
new ObjectMapper().reader(HashMap.class)
install.getAbsolutePath()
public SELF withCancellationToken(CancellationToken cancellationToken){   operationParamsBuilder.setCancellationToken(Preconditions.checkNotNull(cancellationToken));   return getThis(); } 
mValues[7]
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).description(message)
final PkgControl root=ImportControlLoader.load(new File(getPath("import-control_complete.xml")).toURI()); 
getFirstByType(type,withProxy)
List<File>
getVirtualMachine().versionHigher("1.4")
mPackageUsage.write()
@Override public Cell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
get(key).equals(that.get(key))
SystemInfo.isMac
for (SampleStream sampleStream : sampleStreams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
setNextBackupId(buf,0)
fixes != null
log.warn(sm.getString("contextConfig.invalidSciHandlesTypes",className),t)
rm.add(new QueryPath(cfName,null,cosc.column.name),cosc.column.value,cosc.column.timestamp)
AnkiDroidApp.colIsOpen()
pane.getLeftComponent()
trimmedLine.endsWith(delimiter)
element.isNamespace()
editor1 == editor
new IndexWriter(ramDir,analyzer,true)
socket == null
processEmbed(curi,codebase,context)
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_TEXT)
JavaSmartCompletionContributor.processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){   public void consume(  final PsiType type){     addExpectedType(result,type,identifierCopy);   } } )
"-n".equals(arg) || "-s".equals(arg)
mSeekBar.setProgress(0)
constraintSystem.getTypeVariables()
DB_VERSION=1
name="java:comp/ds"
fileName.contains("-ext") || !isJarFile(file)
longSize >= 800
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),null,null,null,null,new FsInfo(0,pathInfo),null,null,null,null,null)
getReduceValuesForReduceSinkNoMapAgg(parseInfo,dest,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
application.isWriteAccessAllowed()
Error e1
req.getSession().getMaxInactiveInterval() * 1000
new SkeletonControl(model,meshes,animData.skeleton)
data.cx.initStandardObjects(null,true)
hasFocus() && showClearButton && !TextUtils.isEmpty(getText())
CLIENT_SNAPSHOT=0x05
LOG.error(msg)
CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider<XmlNSDescriptorImpl>(){   @Override public Result<XmlNSDescriptorImpl> compute(){     return Result.create(doCreateDescriptor(kind),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);   } } )
toggleBreakpoint(getScriptPath(),13)
writer.getSourceFile(1)
mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
JournalTemplateLocalServiceUtil.getTemplate(webDavRequest.getGroupId(),journalTypeId,true)
RolesAdminWebUpgrade.class
mockServerLogger.info(request(),"resetting all expectations and request logs" + NEW_LINE)
Log.i(TAG,"releaseInfoLock error",e)
mBluetoothGatt.registerScanner(this)
create.isPrivate()
delegate.open(filename,grabSize,idType,highId,maxId)
Arrays.binarySearch(vipAddresses,key.getName()) > 0
doTest("va","val ... = ...","var ... = ...","vararg","values","variables")
mAssetManager.openNonAssetFd(mAssetName)
t.st == ST.LABEL
@NotNull GitBranch branch
Arrays.asList("com.google.errorprone.MaskedClassLoader$MaskedFileManager","com.google.devtools.build.buildjar.javac.BlazeJavacMain$ClassloaderMaskingFileManager","com.google.devtools.build.java.turbine.javac.JavacTurbineCompiler$ClassloaderMaskingFileManager","org.netbeans.modules.java.source.parsing.ProxyFileManager","com.sun.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager")
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_START)
configureRemote(fork)
IllegalArgumentException e
(pInfo.applicationInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) == 0
TEST_DATA_SIZE=516
handshake == 0
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
@Override protected Content setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
JournalArticleLocalServiceUtil.addArticle(TestPropsValues.getUserId(),groupId,JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID,JournalArticleConstants.CLASSNAME_ID_DEFAULT,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,descriptionMap,content,"general",ddmStructure.getStructureKey(),ddmTemplate.getTemplateKey(),null,displayDateCalendar.get(Calendar.MONTH),displayDateCalendar.get(Calendar.DAY_OF_MONTH),displayDateCalendar.get(Calendar.YEAR),displayDateCalendar.get(Calendar.HOUR_OF_DAY),displayDateCalendar.get(Calendar.MINUTE),0,0,0,0,0,true,0,0,0,0,0,true,true,false,null,null,null,null,serviceContext)
p.getLabel()
Mono.currentContext()
mFlexItem.setWrapBefore(isChecked)
cachedValues.put(entry,NULL) != null
new AntTypeDefinitionImpl(id,typeClass.getName(),isTask,attributes,nestedDefinitions)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,false)
{NOTIFY_INIT,NOTIFY_CONNECT,NOTIFY_ABANDON,SLOW_QUERY_NOTIFICATION,FAILED_QUERY_NOTIFICATION,SUSPECT_ABANDONED_NOTIFICATION,SUSPECT_RETURNED_NOTIFICATION}
T t
case Deposit: 
callNode.call(frame,evaluateArgs(frame))
Number.class
addTest(12,13,180.0f)
registeredService.getAccessStrategy().doPrincipalAttributesAllowServiceAccess(principalAttrs)
periodUnit == 'n'
DirectoryReader.open(writer.w,true)
new Rect(28,14,28,14)
@Override public final D reloadFromBytes(byte[] ary){   _mem=ary;   initFromBytes();   return (D)this; } 
UPUPDATING
Math.min(filterExplanations.get(i).getValue(),minFactor)
version.getUpdate().getAsInt() >= 92
new StringBuilder(247)
location.getWorld()
HashMap<ShardId,ShardRestoreStatus>
accountInfo.compareTo(order.getTotalAmount()) <= 0
((MapActivity)getActivity()).getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_action_search_dark)
invertedIndex.getImmutable(i)
new ColorUIResource(0xC3E88D)
VERSION=0
Arrays.asList("jar","ejb-client")
new SafeTextModel(Mode.relaxed)
i == j
componentClasses != null
MultiMap.createSmart()
out.write(bytes,0,len)
imeWin.getDisplayFrameLw()
assertEquals(c1.counts + c2.counts,SIZE * COUNTDOWN)
AdviceWithTasks.removeByType(route,type,selectFirst,selectFirst,selectFrom,selectTo,maxDeep)
assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
equalAny(DefaultKeyword.LIKE)
StringUtil.isNotEmpty(functionName) && o.getContainingFile().getImportMap().containsKey(functionName)
readBytes >= 0
new Box(Vector3f.ZERO,1,1,1)
currentToken.hasType("operator","comment","numeric")
ParseException e
sslConfig.getBoolean(CONFIG_OF_ENABLE_SERVER_VERIFICATION)
mHeader.performClick()
writeln(serverInfo + columnEnd)
Criterion.and(TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.eq(tagUuid))
waiting - addConnectionQueue.size() > 0
Messages.showInfoMessage(component,getErrorTextFromException(e),title)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(project,"Synchronizing OSGi dependencies",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         indicator.setIndeterminate(true);         ModuleManager instance=ModuleManager.getInstance(project);         Module[] modules=instance.getModules();         for (        Module module : modules) {           getInstance(module).syncDependenciesFromManifest();         }       }     } .queue();   } } )
log.trace("Failed to deploy!!")
isAllFiles()
!binding.getName().equals("compareTo")
TimeUnit.SECONDS.toMillis(2)
Error e
new SimpleTextSegmentInfosFormat()
LOG.error("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
i > speedBumpIndex
clientBuilder.readTimeout(timeout,TimeUnit.MILLISECONDS)
world.setBlock(i,j,k,blockId,meta,1)
new SQLException(e.getMessage())
is(3)
LOGGER.info("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
new ProtocolException()
Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
@Override @NotNull public FrameworkSupportConfigurableBase createConfigurable(final @NotNull FrameworkSupportModel model){   return new FrameworkSupportConfigurableBase(this,model,getVersions(),getVersionLabelText()); } 
method.getClass()
GroupFinderUtil.findByLayouts(TestPropsValues.getCompanyId(),parentGroupId,true,-1,-1)
isFormat(format,F60)
checkField(clazz,"octets",ByteArrayOutputStream.class)
getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC)
callTimeout=5000
docTag != null
Boolean.valueOf(BytesUtil.readUTFString(buffer))
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this)
(encoded >> 32) & 0xFFFF_FFFFl
c.setDisplayName(nickName)
doTest(getTestName(false),inspection)
mPackages.add(coreModulesPackage)
new OptionParser()
!shouldCreateOut()
getAsShortText(get(instant))
WebStorage.getInstance().deleteAllDatabases()
T resource
field.createField(fieldType.indexedToReadable((String)sortValue),0.0f)
isReturnGeneratedKeys() && generatedKey.isPresent()
PendingIntent.getActivity(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT)
renderUpdate(out,results)
(T)filteredItems
UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()
renditionGroups=new int[0]
"frame".equals(provides)
List<ValueParameterDescriptor>
RecentBloggersWebUpgrade.class
this.removeFirst()
notNullValue()
ThreadFactoryBuilder.create().withNamePrefix(THREAD_NAME)
assertEquals(9,rows.size())
returnFalseIfFailed(code,"super." + superMtd,BUF_VAR)
sentHeaders.get(0).getNumber() > bestKnownBlock.getNumber()
sender().send(new StashIgnore(new SequenceActor.UpdateProcessed()),1500)
assertEquals(23,sqlStatements.get(2).getLineNumber())
f
assertEquals(8,set.size())
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING)
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)
level < 96
par == null
analysis.getType(aggregate)
factory.getEmbdeddedServletContainer()
condition.signal()
doTestNotIndexed(type)
group != null
OverrideResolver.generateOverridesInFunctionGroup(methodName,null,functionsFromSupertypes,functionsFromCurrent,classDescriptor,null,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
buffer.putLong(nextMarker + 4,0)
queueAccess.get(0) != selectedItem.getId()
this.doInitrospect(extendedInterfaces,matchedInterfaces)
column.getValueClobFile() != null
metrics.density * 40
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
131 + (USE_OLD_HISTORY ? 1000 : 0)
Helper.interpretSizeSource(jaxbElement.getLength(),jaxbElement.getPrecision(),jaxbElement.getScale())
city.getID()
-33.865233402568428
myClassName.startsWith("javax.swing")
element != null
RepositoryDirectoryUI.getTreeWithNames(newCat,rep,objectMap,dircolor,sortColumn,includeDeleted,ascending,true,false,directoryTree,null,null)
keymapManager == null
args != null
replace(searchStr,0,searchStr,replacement,ignoreCase)
JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
resolveTypeParametersForCallableDescriptor(containingDeclaration,writableScope,typeParameters,trace)
vertex.vertexID() == newVertex.vertexID()
pluginContainer.lookup(ComponentConfigurator.ROLE)
fingerId == 0
public Throwable getCause(){   return reason; } 
new ChunkedUploadRemoteFileOperation(mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict())
Settings.Secure.getInt(mContentResolver,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED)
classType.getClassName()
new Bottom()
LOG.info("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
fields[i] >= 0
ObjectMapper.class
mimeType == null
new KsqlTopic("FOO","TEST_TOPIC1",new KsqlJsonTopicSerDe())
JBUI.Borders.empty(10,0)
assertEquals(258L,response.rowCount())
graph.add(new OSRLocalNode(i,proxy.stamp().unrestricted()))
setNetworkTimeout(connection,networkTimeout)
gateway.sendAndRecieve(requestMessage)
new IllegalStateException()
specModel.getProps()
viewPort.setClearEnabled(true)
"Refreshing storefiles of region " + regionToFlush + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
log.error(e.getMessage())
PermissionCacheUtil.clearResourceBlockCache(companyId,groupId,name)
graph.getNewNodes(mark)
pGLState.resetModelViewGLMatrixStack()
@Specialization protected TruffleObject escapingJavaByteArray(LLVMVirtualAllocationAddress address,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMVirtualAllocationAddressTruffleObject(address.copy()); } 
allGpxAdapter.getGroupCount() > 0
webView.evaluateJavaScript(injectJavaScript)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),99,50)
LOGGER.debug("Register profile {}",qualityProfile.getQProfileName())
mTfs.delete(mTfs.open(path))
/**   * Opened connections.   */ @GridToStringExclude private final LongAdder opened=new LongAdder(); 
@CheckForNull @Override public Integer getVersion(){   return version; } 
cors.isEnabled()
LOG.error(ex,"Distributed build step failed.")
uri.toString().equalsIgnoreCase(future.getURI().toString())
CodegenUtilKt.calcTypeForIEEE754ArithmeticIfNeeded(expression,bindingContext,context.getFunctionDescriptor())
serviceInfo.getRequiredServices() == null
WikiTestUtil.addPage(TestPropsValues.getUserId(),_node.getNodeId(),ServiceTestUtil.randomString(),originalContent,true,serviceContext)
CollectionUtils.isEmpty(realms)
matcher.group(1)
JDBCUtils.safeGetString(resultSet,"ROLENAME")
String id=reader.getAttributeValue(null,"id"); 
new TextPaint()
builder.timeValueField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
Character.isJavaIdentifierPart(c)
nameLength > maxHeadersLength - headersLength
columnDefinition.getLoadFromCursorMethod()
AtlasBuildContext.atlasMainDexHelper.getMainResFiles()
ColorRGBA.White.mult(0.3f)
receiver != null
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)
new XExpressionImpl(expression.getExpression().trim(),expression.getLanguage(),expression.getCustomInfo())
removedTerrains.remove(tq)
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxPriorityQueueLength,priority,conf,server)
startUnicastCluster(3,new int[]{0},-1)
logger.warn("There is no alarm running on {}",getUDN())
new ClusterConfiguration(initialConfig.getName(),logging.getMessagesLog(ClusterConfiguration.class),initialConfig.getMemberURIs())
duration <= 0
contains(connection.getRedisClient().getAddr())
LOG.info("Getting asynchronous method stub from channel")
BigDecimal value
isVideoScalingModeSupported(mode)
lp.onResolveLayoutDirection(layoutDirection)
LOG.debug("Consumer subtask {} is trying to discover new partitions ...")
proxyFactory.createClass().getConstructor()
ProductWrapper wrapper=(ProductWrapper)context.getBean(ProductSummaryWrapper.class.getName()); 
scopeGroup.isLayoutSetPrototype() || scopeGroup.isRegularSite()
LOG(3)
extractTimeValue(settings,null)
mgr.checkSystemClipboardAccess()
cache.localPeek(1,CachePeekMode.ONHEAP)
awaitMessages(4,7,20000)
new CountDownLatch(3)
Flags.BITFIELD.isSetIn(mdType.getFlags())
new ZLNetworkRequest(url){   @Override public void handleStream(  InputStream inputStream,  int length) throws IOException, ZLNetworkException {     new OpenSearchXMLReader(getURL(),descriptions).read(inputStream);   } } 
assertNull(store.getId())
ctx.setInputSource(context,file,context.getRuntime().getNil())
mViewModel.getNewsItem()
SAMPLE_RATE_3D_VERT=16
policy_empty == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
IndexReader r; 
checkpoint(false,true)
convert(BigDecimal.class,defaultValue,defaultValue)
setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)
buf.getByte(buf.readerIndex() + 2)
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",10)
"user_not_found".equals(code)
view.getZoom()
log.info("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
FileUtil.loadFile(new File("injector-generator/copyright.txt"),true)
new RuntimeDroolsException(this.getEvalExpression() + " : " + e)
pathGroup.paths.get(i)
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.PAYMENT_ERROR)
new IndexWriter(dir,analyzer)
@NotNull Object value
testError("class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }",GOOG_BASE_CLASS_ERROR)
filter.setRadius(mAngle)
SDK_INT >= JELLY_BEAN || SDK_INT <= LOLLIPOP_MR1
clearFromMember.start()
getChildFragmentManager().beginTransaction().add(R.id.stats_pager_container,fragment)
new FormAttachment(spacer,15)
SwingUtilities.getWindowAncestor(actualTarget) == null
directories.getDirectoryForNewSSTables(0)
query.getDimensionSpec().preservesOrdering()
MAP.put(UPPER_BOUND_VIOLATED,"Type argument is not within its bounds: should be subtype of ''{0}''",RENDER_TYPE)
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),true,Variance.OUT_VARIANCE,Name.identifier("R"),parameterCount + 1)
httpRequest.getSession().setAttribute(ACEGI_SECURITY_TARGET_URL_KEY,null)
DEBUG_STARTING_WINDOW_VERBOSE || true
new Vt300ProtocolDecoder(ServerManager.this)
new RStudioThemedFrame(url,true,"allow-same-origin",null,null,false)
ImmutableList.of(qmark,bang)
asParserError(e)
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY)
SystemClock.nanoTime()
LOG.debug(message,e)
existingFile.refresh(false,toWatchRecursively)
!justBootedUp
maxEntries == -1
application.map(version::compareTo).orElse(0) < 0
source.setNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
myParametersInContext <= that.myParametersInContext
TitanGraphTransaction gview=null; 
doTest(true)
onNoteBlockTextClickListener != null
sb.index() - 2
_vresponse == null
!mapReader.getRegionNames().isEmpty()
IllegalArgumentException iae
new GameOver(Gdx.app)
ClassNotFoundException.class
@Id @GeneratedValue(strategy=GenerationType.IDENTITY) private String id; 
y - r
logger.error("Configuration for influxdb not yet loaded or broken.")
ReflectionUtil.setAccessible(m).invoke(this,new Object[1])
event.setHandled(false)
child.getParent()
pvtKeyStore == null
c == Double.class
state == AsyncState.STARTING
chatRooms.add(chatRoomID)
AccountResource.class
Long.valueOf(timeString)
node.actor.getY() <= high
fragmentManager.beginTransaction().add(rxPermissionsFragment,TAG).commit()
sourceContact != null
(ExpiringCell)this
SimpleHandler.getInstance().post(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } )
dir.getPath()
_projectTemplateArgs.getName()
verify(connection,exception,error)
new IndexWriter(directory,new KeywordAnalyzer(),create)
new BufferedOutputStream(new FileOutputStream(file))
session.executePost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler,false)
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i)))
Model.getSingleton().getDb().getTableHistory().getHistoryIdsOfHistType(session.getSessionId(),HistoryReference.TYPE_PROXIED,HistoryReference.TYPE_ZAP_USER,HistoryReference.TYPE_SPIDER)
result.setDataEncoding(st.getResponseSOAPContext().getContentType())
BeanUtils.instantiateClass(this.executorType,FeatureSpecificationExecutor.class)
FitNesseUtil.makeTestContext(null)
uri.equals(patterns[k])
StorageProxy.readProtocol(commands,select.getConsistencyLevel())
DiagnosticFactory1<JetElement,DeclarationDescriptor>
info.getType() & 0x7
Class<T>
result.getInfo()
assertLeftRightCategory(12,category2c)
taken > 90
isSavedPostsList()
new IOSMobileDriverImpl(projectDir,portalURL)
parts.size() % 2 != 0
m.execute()
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss()
SingleMapBlockWriter.class
Injection.provideDesignerNewsCommentsRepository()
name=Resources.REQUEST_QUEUE
Utils.writeFile(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
imageViewFuture.setComplete(imageView)
scale.getScaleX() != 0f
TYPE_ADD_VOTE=10006
layoutChildLayouts.sort(Comparator.comparing(Layout::getPriority))
GitFileUtils.delete(project,root,removed,"--ignore-unmatch")
private MtpManagerMock mMtpManager; 
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,0)
testIncludeFilter(query,5,"Filter",34)
lengthInWords >> 4
this.exchanges.get(requestId)
assertEquals(builder.defaultLbPolicy,"pick_first")
curr.end <= intervals[i].start
new File(child)
tagData.getValue(TagData.NAME).length() == 0
NavigateAction.prepareAppModeView(map,selected,true,(ViewGroup)confirmDialog.findViewById(R.id.TopBar),false,new View.OnClickListener(){   @Override public void onClick(  View v){     if (selected.size() > 0) {       view.getSettings().APPLICATION_MODE.set(selected.iterator().next());       listAdapter.notifyDataSetChanged();     }   } } )
getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).collect(Collectors.toList())
createListFromPropertyString(description)
LOG.error("Plugin " + plugin.getName() + " has an artefact "+ shortName+ " without a package name "+ "This could lead to artefacts being excluded from the application")
this.args=args
lineArgs[1]
DistinguishedNameParser dnParser=new DistinguishedNameParser(cert.getSubjectX500Principal()); 
Object... sources
hashSymbols.keySet()
LOGGER.debug("Unable to process JSON",exception)
new AlreadyExistsException(cfm.cfName,cfm.ksName)
log.error("Metric=[%s] has no StatsD type mapping",statsDMetric)
DeprecationLogger.nagUser("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
new EnterSelectionDialog(shell,props,dbNames,"Select the database","Select the partitioned database to import from")
errorMsgJson.put("ERROR",errorMsgJson)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
cluster.shutdown()
doTest(true)
env.lookup(PARSE_CONTEXT)
assertEquals(1208,trackPoints.size())
context.declareFields()
Assert.assertFalse(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
Iterable<SkyKey>
RegexFilter.createFilter(".*(\n.*)*",new String[0],true,null,null)
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
clazz.getField("commandProcessor")
new HTTPResponseResult(reqEntity,httpClient)
GATEWAY_TIMEOUT=50
Arrays.asList("net.bull")
assertThat(client).replicationController("doesNotExist").hasId("fabric8-console-controller")
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0)
super.performAccessibilityAction(action,arguments)
target.getParentFile().exists()
Uri[]
private final RulesProfileWrapper qProfile; 
idleTimeout < 30000
contentType.equals(ContentTypes.PRESENTATIONML_MAIN)
sentence.length() <= 25
public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); 
scale(1f)
new HashMap()
methodName.equals("getUseScope")
ImageView repost_flag; 
elementName=options.get(ARRAY_NAME)
ApplicationManager.getApplication().isInternal()
Log.d(TAG,"We have a callback to send this result to")
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(new ClassifierOverride(1))
new PrintStream(bos)
type == QUADS
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now))
portletRequestDispatcher != null
@Specialization public Object change(){   FrameInstance frameInstance=Truffle.getRuntime().getStackTrace().iterator().next();   Frame frame=frameInstance.getFrame(FrameAccess.READ_WRITE,false);   FrameSlot slot=frame.getFrameDescriptor().findOrAddFrameSlot("hello");   frame.setObject(slot,"world");   return null; } 
mTargetSdk >= O
converterRegistry.addConverter(Enum.class,String.class,new EnumToStringConverter((ConversionService)converterRegistry))
sourceWidth > 0
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),null,null,null,null)
fragmentEntryPersistence.filterFindByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
Arrays.asList("viel","nichts","wenig","zuviel")
HDR_TYPE_NAK=0x01
StatusBarIconController.getTint(tintArea,mMobileActivity,tint)
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer","jenen")
Log.info("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
new FunctionIntrinsic(){   @NotNull @Override public JsExpression apply(  @Nullable JsExpression receiver,  @NotNull List<JsExpression> arguments,  @NotNull TranslationContext context){     return new JsInvocation(new JsNameRef("substring",receiver),arguments);   } } 
innerLoader.parseClass(inputStream)
BungeeCord.instance.pluginManager.onHandshake(event)
Long.valueOf(nfcid2,16)
IColumn c
it.getJavaDoc()
inUtc
DATABASE_VERSION=64
urlConnection.getContentLength()
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper)
((PsiManagerImpl)manager).getFileManager().findCachedViewProvider(file)
/**   * Needed for statistics.   */ private final LongAdder startedJobsCnt=new LongAdder(); 
ensureExpectedToken(parser.nextToken(),XContentParser.Token.VALUE_NUMBER,parser::getTokenLocation)
getPagesAndOrPostsString()
LOGGER.debug("Could not execute copy",ex)
longSize >= 530
lastPosition < positionCount
volume.getType() == VolumeInfo.TYPE_PUBLIC
mAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"signIn:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign In Failed",Toast.LENGTH_SHORT).show();     }   } } )
log.debug("'{}' extracting credentials from {} http authenticator",e1,httpAuthenticator.getType())
base.getContentFile("modes/java")
StringUtils.isNoneEmpty(xml)
Exception e
hStack.getScrollWidth() + 30
String[] names(); 
assertEquals(serdeC.getCodec().toString(),CodecFactory.deflateCodec(i).toString())
adapter.getArgumentResolvers()
client.query(query)
sentenceCount > maxDocs
/**   * {@link Builder#replace(Tree,String)}   */ public static Fix replace(Tree tree,String replaceWith){   return builder().replace(tree,replaceWith).build(); } 
context.getSystemService(Context.WINDOW_SERVICE)
SKELETONS_VERSION=14
mLocation != null
@SuppressWarnings("unchecked") private S self=(S)this; 
String pattern=this.prefix; 
MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player,entity))
this.getContactJid().split("/")
primitiveType != null
new String(bs2.toByteArray())
(filterMap.getDispatcherMapping() & FilterMap.ASYNC) > 0
-(int)(editor.getLineHeight() * 0.1)
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",getId(),maxXms)
LAST_VERSION=548
!value.isStatic() && value.isPublic() && classNode.equals(value.getDeclaringClass())
myCache1.getCacheConfiguration().getMaxElementsInMemory()
LOG.error("Unable to unmarshall exception content",e)
_bc.proxPen(_beta)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY,Collections.EMPTY_LIST)
ImmutableSet.of("key","vertex","edge","element","property")
Collections.emptyList()
Hooks.resetOnEachOperator()
log.warn("Reset to factory defaults : onErrorDropped")
assertEquals(q.toString(),"[]")
ref.getAssociatedEntity()
Assert.assertEquals(1,intValue)
mContext.sendBroadcast(intent)
new Long(getIntValue(workingMemory,object))
entry.getValue().getLastAccessed() > expireTime
Assert.assertEquals(permissions.size(),2)
PropertyListParser.saveAsASCII(x,outputFile)
simpleQueryString("spaghetti").field("body",10.0f)
someBatchInterval * 3
assertThat(ex.code()).isEqualTo(400)
Long id
public <A>S from(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).from((Expr<?>)entity);   return self; } 
params[1]
status.getCode().ordinal()
assertThat(System.currentTimeMillis() - start).isGreaterThan(2000)
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamSpace()
ExpandoWebUpgrade.class
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBefore(new Date())
splitVert.setDividerLocation(220)
TupleDomain.none()
new EmoteClue("Panic by the mausoleum in Morytania. Wave before you speak to me. Equip a mithril plate skirt, a maple longbow and no boots.",new WorldPoint(3504,3576,0),PANIC,WAVE,item(MITHRIL_PLATESKIRT),item(MAPLE_LONGBOW))
((ContainerLifeCycle)contextHandler).addBean(clientContainer)
LOG.assertTrue(true,"Invalid element: " + elementAt)
/**   * Reads next record from input  */ public Object read() throws Exception {   return input[index++]; } 
isNodeHealing(node.getNodeId())
new PsiArrayType(mappedComponent)
id=55
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),true,event.mediaModelList,event.successMessage)
table.averageDouble(columnIndex)
final StringBuffer replacement=new StringBuffer(tag.getText()); 
for (IMethodInterceptor methodInterceptor : methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
CLOSE_TIMEOUT=1000
remaining > 0
mLayout.getPaint().getTextWidths(mText,offsetStart,offsetEnd,widths)
i < 1025
/**   * Returns first child <b>element</b> node or <code>null</code> if no element children exist.  */ public Node getFirstChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[0]; } 
new HashMap<>(queryMemoryReservations)
((IPowerReceptor)pipe).powerRequest()
elementClass != null
props.getProperty(SAVE_THREAD_COUNTS,FALSE)
CvsVfsUtil.findFileByIoFile(targetFile)
new TermInfosWriter(store,"words",fis)
operation.equals("in")
getMockServerClient(mockServerPort).stop()
List<T>
renderBlock(util,world,lightX,lightY,lightZ,false,true)
Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
MAX_DIMEN_FOR_ROUNDING=1080
Lists.newArrayList(PROPERTY_PROJECT_BASEDIR,PROPERTY_MODULES,CoreProperties.PROJECT_DESCRIPTION_PROPERTY)
bundle != null & bundle.containsKey(key)
testAllocation("test3snippet",3,0,0)
new Parameter(new IdentifierImpl("_" + f.getIdentifier().getName()),f.getType(),false)
classDirectoryName.contains("bin") || classDirectoryName.contains("classes")
Build.VERSION.SDK_INT >= 14
bo.write(0x0b)
Optional.of(target)
collectDependencies().equals(myInitialDependencies)
getContext().registerReceiver(mReceiver,filter)
new ScriptField_Point(mRS,PART_COUNT,Allocation.USAGE_GRAPHICS_VERTEX)
backgroundOut.getDouble(i)
selectedPageLabel_.removeAttribute("selected")
getValueController().updateSelectionValue(editedValue)
locations.get(0).distanceTo(start) > 200
flags.add(CLASSMETHOD)
assertNull("Should find entry",getThreadCacheEntry(LOCAL_HOST))
limit == 0
Exception ioe
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mUserManagerHelper.getAllUsersExcludesSystemUser()
assertThat(new XooPlugin().getExtensions()).hasSize(14)
pod.setId(expectedId)
return 23; 
StubElement fileStub=getStub(); 
Exception failure=lastException; 
getRequiredDate(singletonMap("date","2017-04-03"),list)
def.needsInput()
Optional.of(dynamicProperties)
IT0000Person person=new IT0000Person(); 
walk.release()
registerTags(ACTION_REFERENCE_PROVIDER,"action",NAMESPACE_TAGLIB_STRUTS_UI,"form","url")
requestHeaderRegex == null
focusedStack.getTaskCount() == 0
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapBaseTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
new FileSystemWebDabServer(cryptoFileSystem())
DiagnosticFactory2<JetElement,JetElement,DeclarationDescriptor>
requestJSONObject.optString(Article.ARTICLE_EDITOR_TYPE)
MimeUtil.ENC_7BIT.equalsIgnoreCase(encoding) || MimeUtil.ENC_8BIT.equalsIgnoreCase(encoding)
logger.info("--> checking snapshot status after it is done with empty repository",blockedNode)
StyleableProperty<Paint>
builder.addDependency(RegistryInstallerService.SERVICE_NAME)
defaults.put(PREVIEW_PANEL_HEIGHT,200)
op.z()
expected == byte.class
String result=""; 
new ModelNode().set(10)
put("1.7",CompilerOptions_VERSION_1_6)
actual_train_samples_per_iteration / correction <= 10 * tspiGuess || actual_train_samples_per_iteration / correction >= 0.1 * tspiGuess
AnnotatedElementUtils.getAnnotationAttributes(controllerType,annotType)
win.mAppToken != null ? win.mAppToken.mAppStopped : false
new URLClassLoader(new DefaultClassPath(runSpec.getClasspath()).getAsURLArray())
tl.set(mPaint,mText,start,end,dir,directions,hasTabs,tabStops)
RowMutation rm=new RowMutation("Keyspace1",key); 
editedGroup.getClass() == SearchGroup.class
((Cell)atom).localCopy(cfs,HeapAllocator.instance)
public TokenStream create(Reader input){   return new KeywordTokenizer(input); } 
viewHolder.getItemViewType() == TYPE_EDIT
getProperties().requestCachingEnabled()
buffer.length() == 0
layer.initializer().numParams(nnc,true)
enSearch.getResultSet()
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteBuffer,false,indexSession,indexBoolean)
PApplet.split(transform)
this.clsName.equals(name)
expression.indexOf("${") >= 0
file != null
BlockStoreContext.releaseBlockWorkerThriftClient(mRpcAddress,client)
myIpnbPanels.size() > myInitialSelection
NullPointerException.class
Slog.e(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
notation.<ArtifactFile>flatMap(new Transformer<ArtifactFile,Object>(){   @Override public ArtifactFile transform(  Object value){     ArtifactFile artifactFile;     if (value instanceof FileSystemLocation) {       FileSystemLocation location=(FileSystemLocation)value;       artifactFile=new ArtifactFile(location.getAsFile(),module.getVersion());     }  else     if (value instanceof File) {       artifactFile=new ArtifactFile((File)value,module.getVersion());     }  else {       throw new InvalidUserDataException(String.format("Cannot convert provided value (%s) to a file.",value));     }     return artifactFile;   } } )
fireBridgeFailed(new Throwable("remoteBrokerInfo is null"))
exchange.getRequestPath()
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""))
expirationTime * 1000
ImmutableSet.of("reportUnknownTypes")
Optional.of(BuckAddDependencyIntention.create(referenceElement,psiClass))
cat.getAllParentCategories().indexOf(cat.getDefaultParentCategory()) < 0
replace(searchStr,0,searchStr,replacement,true)
assertTrue(found)
/**   * <p>Formats the receiver using the given format.</p> <p>This uses  {@link Formattable} to perform the formatting. Two variable maybe used to embed the left and right elements. Use  {@code %1$} for the leftelement (key) and  {@code %2$} for the right element (value).The default format used by  {@code toString()} is {@code (%1$s,%2$s)}.</p>  * @param format  the format string, optionally containing {@code %1$} and {@code %2$}, not null  * @return the formatted string, not null  */ public Object toString(String format){   return String.format(format,getLeft(),getRight()); } 
new AmbariException(error)
AssetTagsAdminWebUpgrade.class
v1 & 0xc0
new ZooKeeperServer(dataDir,dataLogDir)
actionName.startsWith("android.net.netmon.lingerExpired") || actionName.startsWith("com.android.server.sip.SipWakeupTimer") || actionName.startsWith("com.android.internal.telephony.data-reconnect")
sampleFormat != null
new String(bytes)
Integer.parseInt(setting)
List<INPUT>
TypeConversionUtil.isAssignable(myS,myT)
authenticator.executeCommandAndAuthenticateIfNecessary(project,repo,source,"pull",arguments)
profile.getMinimumInstances()
callNode.call(frame,packArguments(frame,arguments,toLLVMNodes,cachedLength))
new String(buffer,0,len)
Double value=iterator.next(); 
"access-control/default is missing operations: " + accessControl
ViewConfiguration.getLongPressTimeout() * 1.5f
d.setMajorVersion(1)
setSDesEncryptionToDescription(mediaType,description,null)
other instanceof ValueLob
BonusPackHelper.requestStringFromUrl(mUserAgent)
DiagnosticType.warning("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
from=PERSISTENT_ALL_CACHES
initializationData != null
!f.getName().equals(unzipped.getName())
id=4
ref != null
transGraph.getLastMove()
new Dimension(450,300)
remoteUidMap.get(localMessage.getUid()) == null
componentRealm.importFrom(componentRealm.getParentRealm().getId(),"plexus.core","org.codehaus.plexus.util.xml.pull")
private ViewPagerAdapter mAdapter; 
remaining - (long)pos
connector.accept(new ConnectEventAction(action),false)
rollbackCount <= 0
pos + toFind.length() < limit
LOG.error("Ignoring duplicate class " + className)
public DerivedBuilder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
IconLoader.isGoodSize(myIcon)
fieldInfos.size() == 7
target == null
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)
directory == null | (!directory.exists() && !directory.mkdirs())
planRouteContext.getSnappedMode().getSmallIconDark()
v instanceof View
mState.action == ACTION_OPEN_TREE
logger.warn("Cannot update the group coordinator ({})",e.getMessage())
ImmutableList<HostAddress>
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy)
FileUtil.join(sdkHomePath,GoConstants.GO_EXECUTABLE_NAME)
ObjectAnimator.ofFloat(mView,"alpha",dimAlpha)
Map<String,Object>
Integer.valueOf(v)
this.messageService.monoPostAuthorizeBeanFindById(2L).contextStart(withUser)
Object[]
JSONValue.parse(value)
MAX_LOW_POWER_STATS_SIZE=512
logger.error("Error while matching regex [" + matcher + "] for string ["+ matched+ "] "+ pse.getMessage())
assertThat(registration.getScopes()).containsOnly("openid","profile","email","address","phone")
message.getCounterpart()
logger.debug("attempting to login")
conn.setSourceDecoration(srcDec)
intention.processIntention(element)
object instanceof RegexCompiler
notify()
Timber.e("Creating SAVING_DIALOG")
getAndAppendNextComparator(i,bb,sb)
list != null
Util.convertDpToPixel(dataSet.getBarBorderWidth())
attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()
getSsl(ClientAuth.NEED,"password","src/test/resources/test.jks")
prefs.getBoolean(AUTO_START,true)
targetDirectory.directory("unwritable")
metadata.addWhere((Predicate)null)
getString(R.string.osmo_tracker_id_share,ci.trackerId)
new ConnectionError(sm.getString("http2Parser.processFramePushPromise",connectionId,Integer.valueOf(streamId)),Http2Error.PROTOCOL_ERROR)
new ShardPath(false,shardPath,shardPath,"",new ShardId(index,0))
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(13)
rematchAllNetworksAndRequests(networkAgent,oldScore,NascentState.NOT_JUST_VALIDATED)
el.getProperty(HTTPSampler.METHOD)
_hasGuestViewPermission(layout)
Conv2DConfig.builder().kh(kernel[0])
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples)
logger.warn("failed engine [{}]",reason,failure)
config.enterpriseConfig != null
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
FMLPacket.makePacket(Type.ENTITYSPAWN,er,entity)
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } 
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),true)
sampleOffset * 1000
showMessage(context.getString(R.string.error_calculating_route) + " : " + res.getErrorMessage())
myTabs.getPresentation().setPaintBorder(0,-1,rightIds.size() > 0 ? 1 : 0,-1)
wordStart == index
withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE)
getPredicate()::test
accessLevel1 == accessLevel2
rep.saveStepAttribute(id_job,getID(),"success_condition",getSuccessConditionCode(successCondition))
sceneToLocalTransformation.postConcat(parent.getSceneToLocalTransformation())
isAssignableFrom(supertypeName,iface,cl)
System.err.printf("\"%s\" #%d%n",thread.getName(),thread.getId(),thread.getId())
assertEquals(20,instance.getCapacity())
_pds._job.isStopped()
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10L)
i > stripeStats.size()
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   @Override public void run(){     postUiTask.run(roots);   } } ,ModalityState.stateForComponent(getRootPane()))
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent(),UserHandle.getUserId(mLaunchedFromUid))
LOG.info(e)
"Predefined " + pkg + " blocked="+ pblocked+ " unused="+ unused+ " roaming="+ proaming
Log.wtf(TAG,e.getMessage(),e)
wCompression.getSelection()
DefaultAtmosphereRequest request
new ScaledResolution(mc,mc.displayWidth,mc.displayHeight)
isSecureText
fileSpecs.size() >= 0
HEIGHT=616
capacityOrValue > 0
reader.getString(reader.readSmallUleb128())
body.invoke(_super(),onAttachedToWindowMethod)
response.getBytes()
event.fromDisplayDensityChange
s <= 100
new IndexWriter(indexStoreB,new StandardAnalyzer(),false)
spoon.saveToRepository(jobMeta)
id=15860
Math.max(20,myListModel.getSize())
newDescriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage("Unable to start module",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal("Unable to refresh the spring application context.  Root Cause was:",rootCause);       }  else {         log.fatal("Unable to refresh the spring application context. Unloading all modules,  Error was:",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace("Unable to shutdown module:" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),"Got an error while starting a mandatory module: " + e.getMessage() + ". Check the server logs for more information");       } catch (      Throwable t2) {         log.warn("caught another error: ",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } 
ps.createRelationship(rel)
retry.attemptRetry()
adapterCount < MAX_VISIBLE
createProject(path,creationPlace,true)
new Histogram(10,100,1000,10 * 1000,100 * 1000)
videoInfoPage == null
!isConsole && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
PropertiesComponent.getInstance().getBoolean(getAutoUpdateEnabledProperty())
memOffsetData.intValue()
T
key.endsWith("authmechanismproperties")
CreateClassOrInterfaceFix.getApplicableTemplates(FLEX_TEMPLATES_EXTENSIONS)
buttonOrder.setPrefSize(200,30)
new TransientPropertyValueException("object references an unsaved transient instance - save the transient instance before flushing",childEntityName,parentEntiytName,propertyName)
return CTR; 
DualViewColumnInfo<TreeNodeOnVcsRevision,Object>
protected OSGIConfigProperties configProperties; 
readOwners.clear()
type.equals(SyncConstants.TYPE_FILE)
GL11.glTranslatef(0.5F,0.0F,0.5F)
mHotspotBounds.set(left,top,bottom,right)
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractACLCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class)
super.visitLocalVariable(variable)
id=21
what != -38
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
PrefGetter.getNotificationTaskDuration(this) != -1
height < 0
!currentCondition.toString().trim().equals(condition.trim())
importedClassIndex.isEmpty()
tok.getID()
new Handler(){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
isPlaybackActive(false)
checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
Arrays.deepEquals(valSrcQueries,other.valSrcQueries)
GrClosureSignatureUtil.mapParametersToArguments(signature,callExpression.getNamedArguments(),callExpression.getExpressionArguments(),callExpression.getClosureArguments(),callExpression,true,true)
CLOSE_TIMEOUT=300
/**   * Saves the size and the location of a specific <tt>Component</tt> through the <tt>ConfigurationService</tt>.  * @param component the <tt>Component</tt> which is to have its size andlocation saved through the <tt>ConfigurationService</tt>  * @throws PropertyVetoException if the <tt>ConfigurationService</tt> doesnot accept the saving because of objections from its <tt>PropertyVetoListener</tt>s.  */ static void saveSizeAndLocation(Component component) throws ConfigPropertyVetoExceoption {   Map<String,Object> props=new HashMap<String,Object>();   String className=component.getClass().getName().replaceAll("\\$","_");   props.put(className + ".width",component.getWidth());   props.put(className + ".height",component.getHeight());   props.put(className + ".x",component.getX());   props.put(className + ".y",component.getY());   UtilActivator.getConfigurationService().setProperties(props); } 
CodeStyle.getSettings(project)
StringBuilder builder=new StringBuilder(); 
layerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
handleShowingDetail(detail,x,y,true)
Thread.sleep(50)
assertEquals(301,status.getStatusCode())
PsiTreeUtil.getParentOfType(context,JetClassBody.class,true,JetBlockExpression.class)
FileUtils.write(fileWithBom,FileUtils.readFileToString(jsFile),true)
Assert.assertEquals(101220L,ret.getFee())
type > 25
transfer.getTransactionId()
new PojoMessageHandlerAsyncString(pojo,m,session,params,indexString,false,indexSession,indexBoolean)
mService.getWifiServiceMessenger()
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949)
mapLayerConfiguration.setOpacity(((float)cachedMapTransparency) / 255.0f)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,5)
mock.expectedFileExists("target/failed/error/bye.txt","Kabom")
c == separatorChar
sentBytesCnt.intValue()
config.getBoolean("single.reader.only")
current instanceof Invoke
this.encoding == null
Arrays.binarySearch(_id,i)
id=56
_buildTemplateWithGradle("portlet","portlet-dependency-management","--dependency-management-enabled","true")
availablePlugins.get(i)
in.indexOf("{") > 0
a.isFinishing()
new FormAttachment(wAttributes)
executor.submit(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
!javaSource
poiCategory != null
Preconditions.checkArgument(!(msDir == null && s3Dir == null))
dlg.getListView().addFooterView(footerView)
routes.InputsResource()
participantAddresses.get(2)
Headers.FORWARDED.toString()
StringBuffer buf=new StringBuffer(); 
resolveImpl(incomplete,null,false)
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallback(new MetricCB())
new CatchResult()
final GridKernal grid=(GridKernal)ignite; 
new BulletTestCollection()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,commentFragment).commit()
windowToken != null
mEnginesHelper.isEngineEnabled(engine)
machine.getConfig().getLimits().getRam() * 1024 * 1024
i=3
ConnectorSplitManager.class
selection != ""
BufferUtil.toDebugString(prefilled)
args == null
myComposite.equals(composite)
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).toMillis()
featureType.getName()
data.remaining()
new NodeStats(discoveryNode,no,indices,os,process,jvm,threadPool,fs,null,null,null,null,null,null)
GameData.injectSnapshot(snapshot,true,true)
cfStandardTable != null
@Override protected FBTree getTreeByKey(FBTree.Key key){   return key != null ? myLibrary.getLibraryTree(key) : myLibrary.getRootTree(); } 
case 4: 
{0,0,0,1,1,2,2,2,2}
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty
!testBit(access,Opcodes.ACC_PROTECTED)
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
myLocalResolve && localProcessor.isEncounteredDynamicClasses()
buf.clear()
assertResultExchange(result.getExchanges().get(0),false)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_FONT_SIZE,false)
interceptorParamTypes.length - 1
IOConverter.toInputStream(s)
protected abstract SELF getThis(); 
DEFAULT_HEAP_LIMIT_CAP=500
locale.getLanguage().equals(casProperties.getLocale().getDefaultValue())
webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))
temporaryFolder.newFolder()
logger.debug("Authentication request failed: " + failed.toString())
countNewlines(fragment) + 2
myUi._select(newSelection,new Runnable(){   public void run(){     final Set<Object> hangByParent=new HashSet<Object>();     processUnsuccessfulSelections(newSelection,new Function<Object,Object>(){       public Object fun(      final Object o){         if (myUi.isInStructure(o) && !adjusted.get(o).value(o)) {           hangByParent.add(o);         }  else {           addAdjustedSelection(o,adjusted.get(o),null);         }         return null;       }     } ,originallySelected);     processHangByParent(hangByParent).notify(result);   } } ,true,true,true)
robot.getBattery().receiveEnergy(1000,false)
isExpanded()
new ServletHolder(getTransactionCountByBlockNum)
new RedisTimeoutException()
mergeButton != null
speed < 4
private static class ToolbarPanel extends JPanel implements Skinnable {   private Image logoBgImage;   public ToolbarPanel(  LayoutManager layoutManager){     super(layoutManager);     loadSkin();   }   public void paintComponent(  Graphics g){     super.paintComponent(g);     if (logoBgImage != null) {       g.drawImage(logoBgImage,(this.getWidth() - logoBgImage.getWidth(null)) / 2,0,null);     }   }   /**   * Reloads bg image.  */   public void loadSkin(){     Image logoBgImage=ImageLoader.getImage(ImageLoader.WINDOW_TITLE_BAR);     if (logoBgImage != null)     logoBgImage=ImageUtils.scaleImageWithinBounds(logoBgImage,80,35);     this.logoBgImage=logoBgImage;   } } 
parent.getChildCount() > 0
assertEquals(5,tool.check("I can give you more a detailed description.").size())
PostgreSQLConnector.class
expected=536870912
input.isSpecifyFormat()
timeout=30000
nowELAPSED < minTime
((-3 * t + 4) * t + 1) * t / 2f
WebSettings.setTextSize(WebSettings.TextSize.LARGER)
parser.nextInt()
res.getString(R.string.data_usage_warning_body,Formatter.formatFileSize(mContext,policy.warningBytes))
host == null
tm != null
media.getMediaType() == MediaType.AUDIO
setColor(color)
pMotionEvent.getX(1)
new JMSException("Cannot publish to a deleted Destination: " + destination)
controllerErrors != null
config.enabled() && config.showInfobox()
MicroblogsServiceUpgrade.class
id=15804
expandedItemsList.get(i)
+distFromStart
DateUtils.getStartOfToday()
zkController.getZkStateReader().getReplicaProps(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),props.getStr(ZkStateReader.CORE_NAME_PROP))
"maxHeaderSize must be a positive integer: " + maxChunkSize
"application/json".equals(contentType)
DLStoreUtil.addFile(portletDataContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,fileName,0,StringPool.BLANK,serviceContext.getCreateDate(null),serviceContext,bytes)
oldPresence.getPriority() != this.presence.getPriority()
@Test public void testNoPendingAfterTrim() throws OutOfCapacityError, BrokenBarrierException, InterruptedException {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   TestSchedulerGroup testGroupOne=groupFactory.groupMap.get(groupOne);   TestSchedulerGroup testGroupTwo=groupFactory.groupMap.get(groupTwo);   testGroupOne.peekFirst().getQueryRequest().getTimerContext().setQueryArrivalTimeNs(1000);   testGroupTwo.peekFirst().getQueryRequest().getTimerContext().setQueryArrivalTimeNs(1000);   QueueReader reader=new QueueReader(queue);   reader.startAndWaitForQueueWakeup();   assertTrue(reader.readQueries.isEmpty());   assertTrue(testGroupOne.isEmpty());   assertTrue(testGroupTwo.isEmpty());   queue.put(createQueryRequest(groupOne,metrics));   sleepForQueueWakeup(queue); } 
new NeuralNetConfiguration.Builder().layer(new RBM.Builder().dist(new NormalDistribution(1,1e-1)).build())
logError(lcurly,"lcurly",lcurlyPos)
LOGGER.debug("Could not attach file",ex)
matchingUri.equals(targetUri)
conversation.findMessageWithRemoteId(remoteMsgId,counterpart) != null
assertEquals(800,animator.getFrame())
Objects::isNull
methodsToImplement(methods)
tag_values.getIdAsync("web03")
new FormAttachment(20,0)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),false)
spendTime < 2005
client.getGameState() != GameState.LOGGED_IN
UUID sndNodeId
getTelecomService().silenceRinger()
!comboBox.isPopupVisible()
mEditText.getCompoundPaddingTop()
IndexReader.open(dir,true)
StorageUtils.getIndividualCacheDirectory(context)
destination.isTopic()
map.lock(key,4,TimeUnit.SECONDS)
return 64; 
mClearPaint.setColor(0xff00ff00)
localScale.addLocal(scale)
BitmapDrawable.class
AnimationAdapter<T>
public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
config.setTenantIsolationEnabled(true)
response.getStatus().getCode() / 200
DEFAULT_ROW_FLUSH_BOUNDARY=80000
Threads.sleep(2000)
logger.debug("Using override port of %d on client %s",clientName)
matchAxisFilter != 0
SimpleAttributeDefinitionBuilder.create("max-inclusive",ModelType.BOOLEAN)
log.info(sm.getString("contextConfig.role.link",link))
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SHOW_SPLASH_SCREEN,false)
Messages.showErrorDialog(getMainPanel(),IdeBundle.message("error.list.of.plugins.was.not.loaded"),IdeBundle.message("title.plugins"))
channel.getIdWithoutGroup()
new InternalTestCluster("network",randomLong(),createTempDir(),2,2,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX)
Set<String>
View.SYSTEM_UI_TRANSPARENT
map.get(beanName).getClass()
@Override public ZuulMessage getDefaultOutput(I input){   return input; } 
DEFAULT_PLAYER_EYE_HEIGHT=1.6f
Endpoint server
animation.setDuration(300l)
"content".equals(scheme)
super.doDestroyProcess()
typeTmp.get(0)
consumer.consume(new PlainTextFileType(),new ExactFileNameMatcher(".gitignore"))
new TypeConversionDescriptorFactory("$it$.toMap($f$)","$it$.collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), $f$))",false)
db.getQueryFields(sql,param,info)
@SuppressWarnings("unused") public Schema files(int version,TypeaheadV3 t){   ArrayList<String> matches=H2O.getPM().calcTypeaheadMatches(t.src,t.limit);   t.matches=matches.toArray(new String[matches.size()]);   return t; } 
{types}
superClass == Object.class
NotReadablePropertyException nre
IndexReader indexReader=tuple.v1(); 
stacktrace.indexOf(':')
adapter.item(R.string.layer_underlay).selected(underlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_down_dark,R.drawable.ic_action_down_light).listen(listener).position(11)
fileEncoding == null
parent.incrementPrioritizableForTree(amt,oldParent)
annotationHolder.createErrorAnnotation(expression,"Cannot resolve target pattern")
!reportInteraction.performInteraction(context,config,reportBuilder,reportFile)
!exifIFD0Directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)
makeMessage(pathname)
LOGGER.warn("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
tableHistory.getHistoryIdsExceptOfHistType(Model.getSingleton().getSession().getSessionId(),HistoryReference.TYPE_TEMPORARY)
hasProperty("key2").withValue(1234)
61L + 122L
mCurrentTheme != null
in1 >= 0x7e
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:10500}")
args.length == 1
currentTime > stage.getLastAttemptTime(hostName,role) + taskTimeout
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
assertEquals(1000,((CacheHashTable)db.engine).cacheMaxSize)
configTimeCacheProviderHolder.remove()
reg.useEnglishNames() != osmandSettings.USE_ENGLISH_NAMES.get()
MAX_PER_SIZE=5
LOG.info("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
Func1<Exception,Observable<R>>
Sets.difference(liveQueries,queryIdsSnapshot)
System.currentTimeMillis() - start + 200
TokenSet.create(mSL_COMMENT,mML_COMMENT,mREGEX_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,WHITE_SPACE)
textureView != null
Arrays.asList("internal:discovery/zen/fd*",TransportLivenessAction.NAME)
mPulseCallback.onPulseFinished()
"memberOf".equalsIgnoreCase(attribute.getId())
new WorldPoint(2972,3489,0)
List<String>
public static BuildParameters addBuildParameterCustomStrategy(BuildParametersBuilder builder,String image,List<EnvVar> envVars){   return builder.withNewStrategy().withType("Custom").withNewCustomStrategy().withImage(image).withEnv(envVars).endCustomStrategy().endStrategy().build(); } 
ImmutableMap.of("CHECK_THIS_VARIABLE","1")
StaticInterceptor.class
delay=2
isPut(request)
PRAYER_ENHANCE(ItemID.PRAYER_ENHANCE_4,GameTimerImageType.ITEM,"Prayer enhance",275,ChronoUnit.SECONDS)
callTimeoutMillis=3000
LOGGER.debug("Skipped over attribute [{}] since it's already contained by the principal",k,v)
mavenProject.getName()
VertexAttribute.Color()
id=8
DIODE(100)
Integer value=iterator.next(); 
SystemProperties.getInstance().getJavaIoTmpDir()
new byte[16]
findState != 0
MAX_EXCEPTION_EDGE_OP_DISTANCE_FROM_END=2
mTargetNames != null
service.getDataStore().getContainers()
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor1")
HttpTransport.class
MATCH_SYSTEM_ONLY | MATCH_DISABLED_COMPONENTS
WebSocketEventListener.class.cast(l).onMessage(event)
form.getMultipartRequestHandler()
LOG.debug("Connecting to port {}...")
static public final PowIn fastSlow=pow2In; 
new String(decoded,B2CConverter.ISO_8859_1)
LensPositionSelectors.lensPosition(LensPosition.BACK)
BucketsEntity.class
Timber.e(e,msg)
((BigDecimal)getConfig().get(INTERVAL)) != null
(MergedObject<T>)t
getServiceGuarded().importMultimediaMessage(callingPkg,pdu,messageId,timestampSecs,seen,read)
routeApplicationState(false)
SingleModel<V>
endPosition.getPosition() < logfileoffset
LOG.warn("Working dir: " + workDir.getAbsolutePath())
prefs.getLong(ACRA.PREF_LAST_VERSION_NR,0)
ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
maxThreads / 2
buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,Character.class)
nextPos != mBoundPos
workerCount=4
ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId",publicLayoutSet.getLayoutSetPrototypeId())
Log_OC.wtf(TAG,"Incorrect action sent " + intent.getAction())
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(2)
size > 0
CANCELED_WAIT_TIMEOUT=2000
currentWorldTransform=renderable.modelTransform
formatCommand(command,"SA200CMD;{%s};0{%s};Enable{%s}\r",Command.KEY_UNIQUE_ID,Command.KEY_DATA)
dataSourceContainer.getDriver().getName()
Assert.assertEquals("Unexpected number of Unusable hosts found count.",3,rule.clientMetrics.getFoundUnusableHosts().count())
info.getOldIndex() != -1
descriptorDecoder.strippedChannel()
testSame(js,js)
/**   * Specify an ending condition for this trigger. If the  {@code until} fires then the combinationfires. <p>The expression  {@code t1.orFinally(t2)} fires every time {@code t1} fires, and finishesas soon as either  {@code t1} finishes or {@code t2} fires, in which case it fires one last timefor  {@code t2}. Both  {@code t1} and {@code t2} are executed in parallel. This means that{@code t1} may have fired since {@code t2} started, so not all of the elements that {@code t2}has seen are necessarily in the current pane. <p>For example the final firing of the following trigger may only have 1 element: <pre>  {@code Repeatedly.forever(AfterPane.elementCountAtLeast(2)) .orFinally(AfterPane.elementCountAtLeast(5))} </pre><p>Note that if  {@code t1} is {@link OnceTrigger}, then  {@code t1.orFinally(t2)} is the sameas  {@code AfterFirst.of(t1, t2)}.  */ public Trigger orFinally(OnceTrigger until){   return new OrFinallyTrigger(this,until); } 
id=15851
context.addStep(prepareStep,NewOperationContext.Stage.MODEL)
new UnsupportedOperationException()
mState == STATE_UNINITIALIZED
new RuntimeException("Container " + containerName.asString() + " failed to execute "+ Arrays.toString(args))
q.setFetchSize(timeoutParam.intValue())
ImmutableSet.of(UNUSED_VARIABLE,UNUSED_PARAMETER,ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE,VARIABLE_WITH_REDUNDANT_INITIALIZER,UNUSED_FUNCTION_LITERAL,USELESS_CAST)
JSONFactoryUtil.looseDeserializeSafe(cmd)
CLEAN_DELAY=500
channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))
disableBluetoothContactSharing
Long.valueOf(timeout)
assertEquals(3,publisher.events.size())
void receiveEndOfStream(int streamId) throws ConnectionError ; 
log.debugf("Duplicate @At mapping ? path=" + path)
UIMODE_SERVICE.equals(name)
new File(themeCss)
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
Long.toHexString(v)
new HgMaterialConfig(new HgUrlArgument(hg.getUrl()),hg.isAutoUpdate(),toFilter(crScmMaterial),hg.getDirectory(),toMaterialName(materialName))
VIBRATE_LENGTH_MS=5
IDAUTHORITY_RETRY_COUNT_DEFAULT=3
status().isPermanentRedirect()
candidatePriority > highestPriority
InetAddress.getLocalHost()
DataType.list(datatype)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     Disposer.dispose(module);   } } )
person.getPersonType() == Person.PersonType.USER
/**   * Run transport tests over the Netty in-process channel.  */ @RunWith(JUnit4.class) public class Http2NettyLocalChannelTest extends AbstractTransportTest {   /**   * Start server.   */   @BeforeClass public static void startServer(){     startStaticServer(NettyServerBuilder.forAddress(new LocalAddress("in-process-1")).flowControlWindow(65 * 1024).channelType(LocalServerChannel.class));   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return NettyChannelBuilder.forAddress(new LocalAddress("in-process-1")).negotiationType(NegotiationType.PLAINTEXT).channelType(LocalChannel.class).build();   } } 
@Override public final DivideBy andNot(Condition c){   return and(c.not()); } 
url == null
generateRandomStringArray(20,10,false,true)
final ImageView buttonShare=(ImageView)view.findViewById(R.id.context_menu_share_button); 
final ContiguousIntervalUsageInArrear intervalCapacityInArrear=createContiguousIntervalCapacityInArrear(usage,ImmutableList.<RawUsage>of(),targetDate,false,createMockBillingEvent(targetDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList())); 
Object value=new MockMVCCModel(_VERSION_1); 
StringUtil.shortenTextWithEllipsis(modulesToRestoreText.toString(),100,0)
window.onBackwardSliceLoaded(bottomSortKey)
metadata.getKey()
LOGGER.error(msg.apply())
Executors.newScheduledThreadPool(0)
time < 10
new ObjectMapper().reader(BlockIteratorState.class)
isShortcutProxyActivity(targetIntent)
NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false)
db.assertColumnDefinition(TABLE,"b_qualifier",Types.VARCHAR,3,true)
tz.getRawOffset()
serverSocket.setReuseAddress(false)
masm.movl(AMD64.r13,object)
mQuery.appendSpace()
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,500,0)
ImmutableMap.of(columnFamily,mutations)
eventType != XmlPullParser.START_TAG
new Exception("This code called statusNotice(null)")
HashMap<String,ArrayList<String>>
publishProgress(progress,max)
mg.maxGap(input)
assertEquals(2,artifacts.size())
offset=1
secondCacheCfg.setMemoryPolicyName(POLICY_20MB_EVICTION)
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",true))
currentVersions.get(flowFile.getId()) != null
dynamicDefines.hashCode()
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public String getHostNameKey(){   return mHostNameKey; } 
comp.trayIconUtil()
ran.nextInt(500)
element instanceof AntProject || element instanceof AntCall
KtPsiUtil.getEnclosingElementForLocalDeclaration(this,false)
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)","NP|QP < ( DNP=target < (QP < OD !< CD) !< JJ|ADJP $++ NP|QP )")
BLOCK_INTENSITY_FACTOR=1.25f
newRemoteAddr != null
/**   * Gets the value of the val property.  * @return possible object is {@link String }  */ public Strin getVal(){   return val; } 
stringLiteralExpression(b,l + 1)
Mono<V>
doesAddToastWindowRequireToken(attrs.packageName,callingUid,attachedWindow)
part.getDataLocation()
@Override public Value emitBitScanReverse(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IBSR,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LBSR,result,asAllocatable(value)));   }   return result; } 
adapter != null
Ordered.LOWEST_PRECEDENCE - 1
!((OfflineProblemDescriptorNode)node).isQuickFixAppliedFromView()
Thread.sleep(5000)
file.getSubmittedFileName()
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false)
MathUtils.PI * (this.width * this.height) / 2
builder.getErrors().getErrors()[2]
Collection.class
resultMetaData.getColumnName(i)
setMargins(view.findViewById(R.id.studyoptions_mainframe),LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,4f,0,4f,4f)
Preconditions.checkNotNull(firstOperand,"Argument firstOperand can't be null")
Executors.newFixedThreadPool(12)
value.toString().getBytes()
Math.max(limit,1)
value[clu][col] * mults[col]
a.getInteger(attr,DEFAULT_MAX_WIDTH)
memoryReservation.getAndAdd(bytes)
topologyConfigs(topologyJarFile,topologyDefnFile,topology)
hasProperty("key3").withValue(5678)
TaskExecutor.class
field.tokenStreamValue()
groupField.createField(group.groupValue.utf8ToString(),0.0f)
Minecraft.getMinecraft().renderEngine.getMissingIcon(1)
Log_OC.e(TAG,"onPause() start")
private void feedOtherPlayers(final Server server,final CommandSender sender,final String name) throws NotEnoughArgumentsException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     try {       feedPlayer(sender,matchPlayer);     }  catch (    QuietAbortException e) {     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
FloatBuffer target
INITIAL_LAUNCH_IDLE_TIMEOUT=7500
T msgObj=messageClass.newInstance(); 
editedGroup.getClass() == ExplicitGroup.class
JavaModuleType.getModuleType().modifySettingsStep(settingsStep,moduleBuilder)
MonitoringPortletImpl.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
Arrays.asList("Prozent","Gramm","Kilogramm")
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static JWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
url.toServiceString()
logger.info(String.format("decoded %s as %s",str,p))
this.data=data
delegate.update(entity)
SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
highlightInfo != null
client.get(path)
mShadowDrawable != null
createOrcWriterOptions(sourceOi,conf,cacheWriter,allocSize)
registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false)
myNodeComparator.compare(node,node1) > 0
primTarget && !primTop && ClassHelper.getWrapper(targetType).equals(top)
new AsyncTask<Void,Void,Void>(){   @Override protected Void doInBackground(  Void... voids){     RecipientDatabase db=DatabaseFactory.getRecipientDatabase(getContext());     db.setMessageRingtone(recipient,NotificationChannels.getMessageRingtone(context,recipient));     db.setMessageVibrate(recipient,NotificationChannels.getMessageVibrate(context,recipient) ? VibrateState.ENABLED : VibrateState.DISABLED);     return null;   } } .execute()
Arrays.asList("http://schemas.xmlsoap.org/soap/","http://schemas.xmlsoap.org/wsdl/soap/","http://schemas.xmlsoap.org/wsdl/soap12/","http://schemas.xmlsoap.org/wsdl/soap/http","http://www.w3.org/2003/05/soap/bindings/HTTP/")
checkDirectory(config.getString("tsd.http.cachedir"),CREATE_IF_NEEDED,MUST_BE_WRITEABLE)
ANIMATE_TRANSITIONS=true
Date tillId
new CacheCreateConfigRequest(cacheConfig,true,partitionId)
flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter,ex)))
tabAlias.equals(tableAlias)
LOG.info("Staging files complete: {} files cached, {} files newly uploaded",numUploaded.get(),numCached.get())
List<ExpandableItem>
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
addDaysAndCheckForCompletion(20,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR)
gauge.getValue() instanceof Long
rteCl.writableBytes()
config.getServerNumThreads()
new IllegalAccessError("too big")
dkSign.getId()
mContext.enforceCallingPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
hc.testIterationStart(event)
!_parms._intercept
getConfig().getBoolean(SPIDER_PARSE_ROBOTS_TXT,false)
WorkflowDefinitionLinkLocalServiceUtil.getDefaultWorkflowDefinitionLink(company.getCompanyId(),assetClassName,0)
new InstrumentedHttpRequestExecutor(metricRegistry,metricNameStrategy)
next == null
references.get() == 0
client.loginWithFacebook(fbAccessToken,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
asList(DERBY,CUBRID,FIREBIRD,ORACLE,SQLSERVER,SQLITE)
textRange.getEndOffset() < ref.length()
forward.setContentDescription("Close Button")
assertFalse(cache.context().systemTx())
new MediaFormat(MimeTypes.APPLICATION_ID3,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,null)
child.resetResolvedLayoutDirection()
DEFAULT_MAX_METHODS=999
inputProcessor.touchDown(event.x,event.y,event.pointer,Buttons.LEFT)
languageContribution.isValid(credentials)
myStoredLength > 2048
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123L)
bulkInsertableMap.get(entityClass)
DBSSchema.class.isAssignableFrom(childType)
order=2
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
getOrCreateContainer().unlock(dataKey,caller,threadId)
h.addParameters("-v","--merge")
out.print(indent + "public void setup() {")
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED,"goog.require() statements are not sorted. The correct order is:\n\n" + "goog.require('a.b');\ngoog.require('a.c');\n\n")
_buildDataJSONFile.getParent()
ex.getMessage()
LOG.info("Removed connection {} for {} - open: {}",connection,this,open)
/**   * Gets the key of service port.  * @return key of service port  */ public String getPortKey(){   return mPortKey; } 
CacheData<Booleans>
1 << 20
id=35
group.getAvatar() != null
Mockito.verify(spyDriver,Mockito.timeout(1000).times(1))
super(true); 
TimeoutUtil.sleep(sleptAlready ? 10 : delay)
event.getTime() > currentPlayTime
appendValue(collection,sb)
myTypeChecker.checkExpressionIsAssignableToType(lOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null)
new AndFilter(fromRoomFilter,MessageWithSubjectFilter.INSTANCE)
0f
new String[0][]
!TextUtils.isEmpty(realPath)
copy.isPrivate()
filesizeMb * 1024 * 1024
jobFinishHandler.onComplete(results)
SyncToAsyncChannel.class
if (ignoreAirBlocks) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } 
new SemanticException(TYPE_MISMATCH,node,e.getMessage())
recordingDescriptorDecoder.endTimestamp()
serialVersionUID=943944089
String retval=""; 
tableHasColumn("Calendar","timeZoneId")
variableName.substring((scopeName + ".").length(),variableName.length())
public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={"8:9: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,"}",9)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"9:15: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,"}",15)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK" + "/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"5:72: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,"}",72)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.SAME.toString());     final String[] expectedViolation={"7:27: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,"}",27)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
layerFilter != null
Build.VERSION.SDK_INT > 21
i < depth[depthIndex]
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=1234567890
@SystemApi
LOGGER.info("Generated {} star-tree records from {} segment records",numSegmentRecords,numStarTreeRecords)
PsiTreeUtil.getParentOfType(element,PyRaiseStatement.class) != null
1 << 16
computeSemiJoin(inputStatistics,inputStatistics,unknown,u)
!element.getValid()
assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions("-Xlint:-processing")
new UnsupportedOperationException()
i.view_count >= 10000
new Neo4jGraph(database.graph)
editText.setText(task.getValue(property))
TunablyAggresiveChaosMonkey chaos=new TunablyAggresiveChaosMonkey(ctx); 
null != lvElement(buffer,calcWrappedOffset(index + 1,mask))
Validator.equals(type,"toggle-switch")
removeBlockInternal(sessionId,blockId,BlockStoreLocation.anyTier())
TrashWebUpgrade.class
GoExecutor.in(module).withParameters(task.getCommand())
s.charAt(i) != ' '
cb.onWifiSignalChanged(wifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
pm.runMigrationTasks(this,tasks,partitionId,replicaIndex,from)
getStageWithServerAction(1,977,payload,"test",300)
user.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
_parms._force_load_balance
mScrollView.setVisibility(View.VISIBLE)
myModule.getProject()
playerState == HTML5VideoView.STATE_PREPARED
WikiPageLocalServiceUtil.movePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)
AbstractItem<ImageItem,SimpleImageItem.ViewHolder>
2 << 27
decoder.readOutbound()
keyProvider.getAuthKey()
primaryGroupHasEventMessageTrackFlags[i]
new TrustException("DERIVED_KEY_ERROR",LOG,e)
id=11100
Nd4j.createUninitialized(new int[]{1,nParams},'c')
Response.created(localUriInfo.getAbsolutePathBuilder().path("state").build())
client.filter(basicAuthentication("rob","rob")).get().uri("/").exchange().expectStatus().isOk().expectHeader().valueMatches(HttpHeaders.CACHE_CONTROL,".+").expectBody()
PFLAG3_FITTING_SYSTEM_WINDOWS
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class)
final String userToken=r.getString("user_token"); 
reference.resolve() == null
myBook.addUid(uid)
verifyNull(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
getObjectMapper().reader(clazz)
in.readStringNull(8)
previewData == null
i > 1
wUpIns.indexOfString(v.getName(),2)
ImmutableSet.Builder<ImplemetationMethodDescriptor>
Build.VERSION.SDK_INT < 21
recompile(source,name,cls)
odbcUrl.indexOf(project)
factory.lookup(DefaultBroadcaster.class,id)
this.loggingSystem.initialize(null,null)
assertEquals(prop.getValues().size(),2)
assertEquals(0,binder.getDisallowedFields().length)
targetActor.addCaptureListener(listener)
cv.visitVarInsn(ALOAD,resultIdx)
i=1000
DLFileEntryTypeFinderUtil.countByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},StringPool.BLANK,true)
if (DBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
return 5010; 
Arrays.asList("Int","Float","Double","Bool","Void","String","Character")
json.writeStartObject()
? extends Reader
!target.equals(element)
portletAddDefaultResourceCheckWhiteList.contains(portletId)
DEBUG && okay && mAgent != null
weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX,1.0f)
functionFactory.lossMSLE(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistartion(PBHelper.convert(registration))
StringBuffer output=new StringBuffer(inName.length()); 
note == null
CoreMatchers.anyOf(is(NestedStaticTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"))
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,null,content,"general",structureId,templateId,StringPool.BLANK,1,1,2008,0,0,0,0,0,0,0,true,0,0,0,0,0,true,true,false,StringPool.BLANK,null,null,StringPool.BLANK,serviceContext)
X_MIN_VELOCITY
resultSet.getShort(index)
N > 0
new IllegalArgumentException()
new DeoptimizeNode(action,reason)
app.getSettings().AVOID_UNPAVED_ROADS.get()
fileContent.getFileName().indexOf('$') >= 0
params.copyWithExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
!mergedDDMFormFieldValues.contains(text2DDMFormFieldValue)
queue.removeLast()
id=19
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,false,false,searchTerms.isAndOperator())
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends AbstractGenericPermissionTest {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of("deploy").against("deploy").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of("deploy").against("all").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of("all").against("deploy").expect(false).run();   } } 
WordPress.wpDB.getAccounts()
configServerSpec.size() > 1
items[27]
turnImminent=1
(byte)202
0 - originY
Messages.showInfoMessage(myEntryTable,"Dependencies were successfully collected in \"" + ToolWindowId.DEPENDENCIES + "\" toolwindow",FindBundle.message("find.pointcut.applications.not.found.title"))
isStarted()
new SortField(fieldName,nullStringLastComparatorSource)
new ServletException()
path != null
MAX_OPEN_TRANSACTIONS=0x400
TypeEvalContext.fast(file)
pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)
position < firstPos
collector.awaitFinish(2000)
filterTypes.size()
info.getLine1NumberForSubscriber(subId)
is(5)
encounter.getObsAtTopLevel(false)
gc.createCompatibleImage(wide,high)
expression instanceof PsiJavaCodeReferenceElement && !aClass.equals(PsiTreeUtil.getParentOfType(expression,PsiClass.class))
appOpsManager.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,false); 
public static ArrayValue durationArray(DurationValue[] values){   return new DurationArray(values); } 
new CrypticClue("This crate is mine, all mine, even if it is in the middle of the desert.",new WorldPoint(3289,3022,0),"Center of desert Mining Camp. Search the crates. Requires the metal key from Tourist Trap to enter.")
m21 * m01
deserialze(parser,type,fieldName,null,0,null)
new RuntimeIOException(e)
new Dialog(ActivityApp.this,mThemeId)
Preconditions.checkNotNull(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
Character.isDigit(ch)
LOG.error("Unable to delete {} because listInternal returns null",path)
LOG.error(ex.getLocalizedMessage(),ex)
Name.guess(name)
new HashMap<>(keys.size())
new HttpSender(connectionParam,true)
cv.visitInsn(DUP)
displayList != null
/**   * Returns the next pseudorandom  {@link ArrayValue} of time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of time elements.  */ public ArrayValue nextTimeArray(){   OffsetTime[] array=nextTimeArrayRaw(minArray(),maxArray());   return Values.timeArray(array); } 
Boolean.valueOf(attrValue)
SCROLL_BAR_SIZE=4
_isPosInf(text)
maxZoom=17
delta + contextEnd
line.substring(0,p).trim().toLowerCase()
PortalUtil.getClassNameId(rendererFactory.getClassName())
Map<UserJid,Drawable>
meterRegistry.summaryBuilder(METRIC_NAME_USAGE).tags(poolName,METRIC_CATEGORY)
new UnsupportedOperationException("Storing a directory is not yet supported.")
new ProtoFile("nestedmaps.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
mControllers.get(i)
getName()
level.toUpperCase()
temporalType < TYPES.length
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
i--
mService.disableNetwork(netId)
child.reset()
new InputStreamReader(bais,StandardCharsets.UTF_8)
_log.error(e)
cluster.restartDataNode(dnp,true)
replicaId < nCores
@Override public Value emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new SPARCArrayEqualsOp(this,kind,result,load(array1),load(array2),asAllocatable(length)));   return result; } 
callButton.setPressedImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
config(" ",0)
assertOpenEventually(countDownLatch,30)
new ItemStack(Items.slime_ball,1,2)
uniqueConcreteType != null
line.startsWith("ProGuard, version") || line.startsWith("Reading ")
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
CodeStyleFacade.getInstance(project).isUnsuitableCodestyleConfigurable(configurable)
response.getBitmap() != null
type=500
@Deprecated protected static <T extends Contract>T deploy(Class<T> type,Web3j web3j,TransactionManager transactionManager,BigInteger gasPrice,BigInteger gasLimit,String binary,String encodedConstructor,BigInteger value) throws IOException, TransactionException {   return deploy(type,web3j,transactionManager,new StaticGasProvider(gasPrice,gasLimit),binary,encodedConstructor,value); } 
mContext.sendStickyBroadcast(mStorageLowIntent)
sm.getString("deltaManager.waitForSessionState",getName(),mbr)
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,"dict","dict")
!myApplicationActive || e.getArea() != EditorMouseEventArea.EDITING_AREA
externalEditCheckInterval_.hasElapsed()
t != null
model.getNodeTextColumns() == null
state.addNullness(true,y)
logger.debug("tried to fail engine but could not acquire lock - engine should be failed by now [{}]",reason,failure)
getFailedExecutionException()
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("ADH-DES-CBC3-SHA",KeyExchange.EDH,Authentication.aNULL,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA")
c < 'z'
orderedGroups.size() < n
previousDataInputs == null
Spoon.class
pubnub.unsubscribePresence(channel)
CHECKIN_VERSION=28
Arrays.asList(2,3)
FBReader.Instance != null
new ObjectMapper().reader(List.class)
maximumGridSize=768
CommandLineUtils.createDatabaseObject(artifactClassLoader,url,username,dbPassword,driver,defaultSchemaName,databaseClass)
private final StringBuffer tmpSb=new StringBuffer(); 
channel.getRTPPort()
logger.debug("Retreiveing door data")
122L * dbManager.getDynamicPropertiesStore().getTransactionFee()
isOptionalTagEnd
new ScheduledJob(job,jobName,period)
new SQLExecuteTemplate(executeEngine)
config.memory
parent instanceof PyListLiteralExpression || parent instanceof PyParenthesizedExpression || parent instanceof PySetLiteralExpression|| parent instanceof PyKeyValueExpression
invalidateDataSource(monitor,dataSource,true)
private File selectedFileTemp; 
log.warn("Double activation of navigator context")
head.equals("ntpath") || head.equals("posixpath")
PrivacyManager.getSettingBool(-mAppInfo.getUid(),PrivacyManager.cSettingOnDemand,true,false)
frustum(xmin,xmax,ymin,ymax,zNear,zFar)
AmazonRankingsWebUpgrade.class
Class<T>
public abstract Double execute(); 
name.equals(Context.CLIPBOARD_SERVICE)
new DefaultDependentsSet()
parameters.length == 2
read.getReadDate()
page.getPageId()
bridgeMethod.getActualModifiers(true)
public String getText(){   return text; } 
entry.getCompleteStore()
StringBuffer buf=new StringBuffer(name.length() + parameters.length * 10); 
id=14239
crashInfo.durationMillis != -1
new AssertionError("One thread threw an exception",exception.get())
!registrarTransport.equals(ListeningPoint.UDP) || !registrarTransport.equals(ListeningPoint.TCP) || !registrarTransport.equals(ListeningPoint.TLS)
rowKeyColumnIO.writeColumnWith(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
SAVE_TRACK_TO_GPX.setModeDefaultValue(ApplicationMode.DEFAULT,false)
value == null
new SolrException(1,"Schema Parsing Failed",e,false)
readLock.unlock()
is(3)
position < mSrcDragPos
BeforeAfterTester t=new BeforeAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); 
assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON)
targetType.getConstructor()
Integer value=list.get(i); 
dbStat.setLong(1,sessionType.getPid())
UniqueId.forEngine("engine",engineId)
fieldType.storeTermVectorOffsets()
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",true,false,false)
(contentType == null) || (contentType.startsWith("text")) || (contentType.endsWith("xml"))
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,9.298463401470183E-6,DeepLearningParameters.Activation.Rectifier)
public <A>S fullJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).fullJoin((Expr<?>)entity);   return self; } 
serversByLoad.lastKey()
listener.iterationDone(mln,iterationCount)
params.getInt("numPages")
allocSize=0
assertOpenEventually("responseLatch",responseLatch,5)
r.thread != null
r.remoteCommits != 0
DumpUtils.checkDumpPermission(mContext,TAG,pw)
BuildData buildData=getBuildData(); 
ref.getParentObject()
gatecoinOrder.getType()
new IntPreference("overlay_transparency",200,true)
deriveFontMethod.invoke(font,new Object[]{floatSize})
entry.getType() != MarketEntryType.Platform
FBUtilities.getLocalAddress()
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRole"))
8 * Constants.MB
MetricsLogger.count(getContext(),DEMO_SESSION_DURATION,sessionDuration)
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,50)
marketDataService.getBittrexOrderBook(pairString)
Validator.isNull(ppe.getCause().getMessage())
CodeSigning.hasValidSignature(context.getProcessExecutor(),bundleBinaryPath)
value.toLowerCase().contains(constraintLowerCase)
LeveledCompactionStrategy.class
Event.error(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
public Trigger withEarlyFirings(OnceTrigger earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
runtime.lookupType(parameters.get(index),(HotSpotResolvedObjectType)accessingClass,true)
Predicate<String>
TextContainer.class
stateMap.get("EnqueuedTransportURIMetaData") != null
lock.tryLock(1000,MILLISECONDS)
new BufferedImage(region.height,region.width,page.getType())
newDefaultSubIdObj.equals(mDefaultSubId)
lineCount == 4
Arrays.asList("-d",outputDir)
cache.remove(key,true)
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
classResolver.resolveClass(type)
GrMethod constructor
strongClassCache.put(beanClass,results)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     myLabelEditor.setText(myLabelEditor.getText());     myChildrenEditor.setText(myChildrenEditor.getText());     myChildrenExpandedEditor.setText(myChildrenExpandedEditor.getText());     myListChildrenEditor.setText(myListChildrenEditor.getText());   } } ,ModalityState.any())
region != null
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
id=15854
private static final KeyStokeMap ourMap=new KeyStokeMap(); 
taskName.startsWith(":buildSrc:")
size.height * 5 + 5
AuthFactory.supportsScram()
return mChangingDisappearingDuration; 
List<DescriptorDigest>
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final DefaultHttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
returnTypeCache == null
whiteSpaceAfterEnd >> 1
wifiConfig.isValid()
assertLeftRightCategory(4,category1b)
file.getName()
Map.Entry<Integer,Object>
rootNode instanceof DBNDatabaseNode
LOG.error("Fetch holidays failed. Aborting.")
nativeSetFlags(mNativeObject,sc.mNativeObject,0,OPAQUE)
id=14
volumes.toString()
BTreeRow.unsortedBuilder(0)
recycle(true)
a.getFloat(attr,0)
offset + len < buf.length
new IllegalArgumentException(String.format(ERROR_BRANCH_LIST_UNSUPPORTED_LIST_MODE,listMode))
queue.poll(2,TimeUnit.SECONDS)
getLocalization(xml,languageId)
myWindow.getManager().openFileImpl3(myWindow,composite.getFile(),true,null)
/**   * A decorator around a  {@link org.gradle.caching.BuildCacheService} that passes through the underlying implementationuntil a number  {@link BuildCacheException}s occur. The  {@link BuildCacheException}s are counted and then ignored. After that the decorator short-circuits cache requests as no-ops.  */ public class ShortCircuitingErrorHandlerBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private static final Logger LOGGER=LoggerFactory.getLogger(ShortCircuitingErrorHandlerBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final int maxErrorCount;   private final AtomicBoolean enabled=new AtomicBoolean(true);   private final AtomicInteger remainingErrorCount;   public ShortCircuitingErrorHandlerBuildCacheServiceDecorator(  int maxErrorCount,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.maxErrorCount=maxErrorCount;     this.remainingErrorCount=new AtomicInteger(maxErrorCount);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader){     if (enabled.get()) {       try {         return super.load(key,reader);       }  catch (      BuildCacheException e) {         recordFailure();       }     }     return false;   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer){     if (enabled.get()) {       try {         super.store(key,writer);       }  catch (      BuildCacheException e) {         recordFailure();       }     }   }   @Override public void close() throws IOException {     if (!enabled.get()) {       LOGGER.warn("The {} build cache was disabled during the build after encountering {} errors.",getRole(),maxErrorCount);     }     super.close();   }   private void recordFailure(){     if (remainingErrorCount.decrementAndGet() <= 0) {       if (enabled.compareAndSet(true,false)) {         LOGGER.warn("The {} build cache is now disabled because {} errors were encountered",getRole(),maxErrorCount);       }     }   } } 
_context == null
clientPortAddress != null
topCallFrameView.getCallFrame() != topCallFrame
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,right)
cnt=0
new QueryException("Error in preloading targets. %s",e.getMessage())
122 + (USE_OLD_HISTORY ? 1000 : 0)
Expression.eq("searchable",format)
NSNumber.numberWithLong(val)
bitstampAuthenticated.getBitcoinDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
jsonObject.getLong(KEY_DATE_ADDED)
organization.toEscapedModel()
id=17
private FilteringClassLoader getSystemFilteringClassLoader(DefaultClassLoaderFactory defaultClassLoaderFactory,boolean java9compatible){   FilteringClassLoader.Spec filterSpec=new FilteringClassLoader.Spec();   if (java9compatible) {     filterSpec.allowPackage("com.sun.tools");   }   return defaultClassLoaderFactory.createFilteringClassLoader(getSystemClassLoader(),filterSpec); } 
isCompressionSupported(httpRequest) && !(httpResponse instanceof CompressionServletResponseWrapper)
actual.getAll()
params.getSimulatePlatformVersion()
MavenHelpers.getOrCreateElementBuilder(image,"from")
String newKeys=""; 
busHandler.pushExpectedEvents(NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
old + 26
Log_OC.wtf(TAG,"Trying to send a NULL OCFile")
PsiTreeUtil.getParentOfType(location.getPsiElement(),PyElement.class)
_buildTemplateWithGradle("content-targeting-tracking-action","tracking-dependency-management","--dependency-management-enabled","true")
verify(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
handoffExecutor == null
loader.isLoading()
downloaderProvider.downloadPart(fileUrl,fileOffset,blockSize,new FileDownloadCallback(){   @Override public void onDownloaded(  final byte[] data){     self().send(new Runnable(){       @Override public void run(){         downloaded++;         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " completed");         }         if (!outputFile.write(fileOffset,data,0,data.length)) {           reportError();           return;         }         currentDownloads--;         reportProgress(downloaded / (float)blocksCount);         checkQueue();       }     } );   }   @Override public void onDownloadFailure(){     self().send(new Runnable(){       @Override public void run(){         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " failure");         }         reportError();       }     } );   } } )
hidePrivateMembers=true
Math.min(leftLen,rightLen)
log.debug("Can not check and authorize " + user.getName() + " due to "+ e.toString())
event.getX()
MARKER_FILE_VERSION=2
getObject()
(1L << n)
shouldPause.and(this::shouldPauseOnTargetNodeJobsCounter)
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getSettings(getModule())
new Duration(TimeUnit.MILLISECONDS,CRETAED_EXPIRY_TIME_IN_MSEC)
driver.evaluate(threadId,frameNumber,stringExpression)
FileTime.fromMillis(0)
pending.incrementAndGet()
prefs.getBoolean("manage_system",true)
Assertions.checkArgument(isTopLevelSource)
traceInfo.get(key)
new RuntimeException("Invalid Column Reference: " + grpbyExpr.dump())
PortletLocalServiceUtil.getPortletById(portletId)
ONE_MINUTE=180000
DRAGGING_ANIMATION_TIME=1900f
new Long(getByteValue(workingMemory,object))
new RelationshipLinkbackStage(topic,config,neoStore.getRelationshipStore(),nodeRelationshipCache,nextRelationshipId,true)
Math.abs(path.getDistance() - tmpDist) > 3
UnsupportedOperationException e
Number.class
Timber.e(e,errorMsg)
"no".equals(chWeightingsStr)
new RepositoryElementsManager(psiManager)
new PkgControl(pkg,regex)
id=19910
LOG.info("Heart rate: " + heartRate,Toast.LENGTH_LONG,GB.INFO)
activity.getMyApplication().getSettings().MAP_EMPTY_STATE_ENABLED
@Override public MavenModule dependsOnModules(String... dependencyArtifactIds){   backingModule.dependsOnModules(dependencyArtifactIds);   return t(); } 
new Point(6,5)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),102,50)
constraint.hasFilter()
mapServiceContext.hasRegisteredListener(mapName)
GitBekParentFixer.prepare(root,this)
file.getFileName()
checkFalsified(listsOf(doubles()),l -> isSorted(l.stream().sorted().collect(Collectors.toList())),58)
Simple.of(MutableList.class)
H2O.waitForCloudSize(x,10000)
isCancelled()
HashSet<PyType>
e.getMessage().contains("Error decoding XML-RPC response")
StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))
assertTrue(blockDirectory.isBlockCacheWriteEnabled())
getLogger().info("Building MavenProject instance: " + mavenProject)
getLogger().info("Scanning for extensions: " + mavenProject)
Map<String,Long>
include.hashCode()
position < 0
new WorldDataHolder(worldName)
fix.android.opengl.GLES20.glVertexAttribPointer(maVelocityHandle,4,GLES20.GL_FLOAT,false,0,0)
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger
v1
ListeningPoint.TCP.equalsIgnoreCase(transport)
Boolean.valueOf(getOptional("kylin.htrace.show-gui-trace-toggle","false"))
battery.addPower(Math.min(target,battery.getCapacity() - battery.getStored()))
context.getRuntime().newString(ERR_INSECURE_SET_INST_VAR)
JSParameterTableModel.createInitializerCellFragment("",createFakeClass())
prepareServer(new HttpServlet(){   @Override protected void doGet(  HttpServletRequest req,  HttpServletResponse resp) throws ServletException, IOException {     if (req.getHeader("Via") != null)     resp.addHeader(PROXIED_HEADER,"true");     if (target.equals(req.getRequestURI())) {       if (query.equals(req.getQueryString())) {         resp.setStatus(200);         return;       }     }     resp.setStatus(404);   } } )
screenX != 0 && screenY != 0
@Override public Value emitBitCount(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IPOPCNT,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LPOPCNT,result,asAllocatable(operand),this));   }   return result; } 
WeakReference<Object>
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,0)
var.setValue(guessType(value))
mAttributes.getFlags()
JDBCUtils.safeGetString(dbResult,"SOURCESCHEMA")
public Object mapLine(FieldSet fieldSet,int lineNum){   Order order=new Order();   order.setOrderId(fieldSet.readLong(ORDER_ID_COLUMN));   order.setOrderDate(fieldSet.readDate(ORDER_DATE_COLUMN));   return order; } 
executing != null
connectionManager.read(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENT_DETAILS))
editorFactory.createViewer(historyDocument,getProject())
NoteDrawerTagAdapterViewHolder holder; 
!process.willAutoInsert(AutoCompletionPolicy.SETTINGS_DEPENDENT,result.getPrefixMatcher())
new VectorDrawableAnimatorRT(this)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodType.ofLoaded(loadedMethodType)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
itemRenderer.renderItemIntoGUI(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
needsUpdate
public Integer getIndex(){   return index; } 
selectedPageLabel_.setAttribute("selected","selected")
getWrapper(leftRedirect)
mLockMode == InodeTree.LockMode.READ
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).putter()
assertCorrectionsByOrder(rule,"Rytmus","Remus","Rhythmus")
serialVersionUID=823130568
StringUtils.escapeForHtml(text,true)
expandableView.getActualHeight()
raw.getParameters()
/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ Object load(Object key); 
new ResultSetIterator(generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
threadSafe=false
synchronized (threadCount) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package has a different signature: " + pkgName)
poList[1]
KieSessionModelImpl kSessionModel
field.getType().getName()
JetTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt")
name.equals("getSimCountryIso")
assertDurationAround(startedAtDate - firstLogDate,45000)
private final Projections projections=new Projections(Module.HQL,getTarget()){   @Override public <A,Q extends SimpleExpression<A>>Collection<Expression<?>> list(  ListPath<A,Q> expr,  ListExpression<A,Q> other,  A knownElement){     return Collections.<Expression<?>>singleton(expr.size());   } } ; 
mService.mAppTransition.isReady()
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
assertEquals("Response header " + name,result.getResponse().getHeader(name),value)
myNamedElements == null
dgtest < 0
x509ExtendedTrustManager.checkServerTrusted(chain,authType,engine)
this.configuration.getMappedStatement(id)
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler))
_invokerFilterHelper.destroy()
_start > 0
mActionBar != null
log.error("Error invalidating SSH tunnel",e)
super.getClass()
i < size
new DefaultSerializer<ModuleSource>()
new ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)
this.getLimit()
"".equals(textArr[10])
Long.valueOf(time)
LOG.warn("Failed to get mount information: {}",e.getMessage())
Outcome.match("missing database driver " + driverClassName)
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,journalArticleId,false,JournalArticleConstants.VERSION_DEFAULT,getMap(articleDefaultLocale,title),descriptionMap,content,"general",ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
hj[]
maxConnectionsPerNode <= 0
AbstractBufferStreamT[]
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.CLAIMED,"AAAAA","BALO",cargo.isMisdirected())
myTemplatesMap.get(templateUrl)
startingWindow != null
FLIGHT(0f,4f,true,false,false,3f,true)
old + 17
this.keycloakSession.users().getUserByServiceAccountClient(clientModel)
c == Byte.class
blockUri.getIdentifier().toString()
CellNames.compositeDense(SuperColumns.scName(name))
names[i]
new FrameTask.DataInfo(train,1,false,true,!classification,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
endpoint.setDataSource(ds)
(Integer)array[this.index]
String channel
private final CircularClipper mClipper; 
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("timeToIdleSeconds")).longValue())
Assert.assertEquals(7,resources.size())
RedisOperationsSessionRepository.class
ISOChronology.getInstance()
mapJoinTables != null
ExternalSystemApiUtil.isOneToOneMapping(project,projectDataNode.getData())
Color.fromRGB(0xD88198)
OUTPUT_SLOT_INVENTORY_INDEX=1
monochrome=true
PRESSED_STATE_DURATION=125
new XValueChildrenList()
protected XmlBlock createSimpleChild(final ASTNode child,final Indent indent,final Wrap wrap,final Alignment alignment){   return new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent,null,isPreserveSpace()); } 
XContentType.SMILE.restContentType()
IccUtils.gsmBcdByteToInt((byte)0x8c)
getValidator().call()
this.restTemplate.postForObject(webhookUrl,message,Void.class)
ActorSDK.sharedActor().style.getTextPrimaryColor()
meta.getColumnName(i)
sceneCam.getDirection()
listener.iterationDone(policyNet,policyIterationCount)
log.warn("Can't set transaction isolation level",e)
declarationDescriptors != null
prefSize(new Fixed(width))
IndexReader.openIfChanged(reader)
lastPos != mTargetPos
new DefaultConfiguration(new DefaultConnectionProvider(connection),null,null,null,null,null,null,null,null,null,dialect,settings,null)
MavenLog.LOG.warn(e)
!isClosed.get()
FindByIndexNameSessionRepository<Session>
postfix.startsWith("id")
batch.getMutations(keyspace,clientState)
encodeMapKey(value)
moduleBuilder.addSourceRoot(SOURCE_PATH)
gran.next(timeStart)
super.execute(executor,patchers)
method.invoke(node,null)
classes.addAll(classes)
new URI(sb.toString(),true)
hasCdmaDataConnectionChanged
pyClass.findClassAttribute(PyNames.DUNDER_METACLASS,true)
@Input
checksums(targetSyncFile)
ObjectUtils.tryCast(myElementType,IFileElementType.class)
Watcher<Route>
configureReadBufferForRead()
sr0.getValue().f1
RemoteException ignored
getMergedOverrideConfiguration()
Thread.sleep(0,10)
endIndex == value.length()
KafkaEightDruidModule.class
max() <= 32
op == ASSIGN
nonce.timeStamp < now
uncompressedProto.length < 2100000
new NullSafeComparator<>(comparator,false)
CanalParseException e
MAX_STATUS_WIDTH=6
Set<Item>
QueryBuilder.quote(autoIncrementDefinition.columnName)
timeNanos > DateTimeUtils.NANOS_PER_DAY
assertMockEndpointsSatisfied()
myFile.getParent()
expectedCountsForADoc(weights,ind)
mRouter.selectRoute(mRouteTypes,route)
public <A>S leftJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).leftJoin((Expr<?>)entity);   return self; } 
configureMenu(mMenu)
tmpHopp.getGraph()
toolWindow.setDefaultContentUiType(ToolWindowContentUiType.COMBO)
mySchedulesQueue.setPassThrough(true)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=15
new StreamError(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame,stream.getIdentifier().intValue())
System.arraycopy(cur,i,ret,i + 1,N - i - 1)
cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,bd.scale(),unscaled.toString().length())
View customCroutonControls=findViewById(R.id.container_custom); 
new CaptureStrategy(true,"com.zhihu.matisse.sample.fileprovider")
expectedType.equals(schema.getField(field).getType())
JobQueueUtils.getExecutableQueueName(jobClientNodeGroup)
ModalityState.defaultModalityState()
Thread.sleep(100)
cam.getDirection().mult(2)
(CacheEntryEventSerializableFilter)in.readObject()
TypeRemapper.createFrom(typeRemapper,additionalTypeMappings)
/**   * called by handle  */ public static Object coerceToString(Object o){   return o.toString(); } 
(dispatcherMapping & ERROR) > 0
UADEntityAggregator::getUADEntitySetName
Integer.valueOf(p.getProperty("numberid.id"))
new InfoData(awayMsg,null,MY_CAPS,null)
new Documentation(__ -> Optional.empty(),__ -> Optional.empty(),null,null,null)
!exists
downloadInfo.getUrl()
LOGGER.debug("Could not parse URL",nfe)
ClassUtil.verifyMustOverride(BeanSerializerFactory.class,config,"withConfig")
lastPos != mBoundPos
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default")
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " failed to instantiate "+ cast.getName(),e)
new FileHyperlinkRawData("/home/karma-chai-sample/test/test.js",1,-1,3,s.length())
paused.get()
SingleResult<Tuple>
credentials.getUsername()
linkMode.getBuildMode()
speed=5.5f
resp.addHeader("Access-Control-Allow-Credentials",credentials)
input.getString(action)
PromotionMessage promotionMessage=(PromotionMessage)input; 
writerNotify.wait()
l.equals("</pre>")
schematicEntity.build(localWorld,FakeWorld.BLUEPRINT_OFFSET)
CalendarLocalServiceUtil.updateCalendar(existingCalendar.getCalendarId(),calendar.getNameMap(),calendar.getDescriptionMap(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
JsonNode::isLong
getInstance(project).ensureFilesWritable(files).hasReadonlyFiles()
Value emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue); 
connector.execute(context)
dist == 0
myModuleBuilder.modifySettingsStep(settingsStep)
session.sessions().createUserSession(adminRealm,admin,"user",null,"form",false)
getMyApplication().getSettings().isLastKnownMapLocation()
new Color(0x696969ff)
ColorResources.getColor("desktopBackgroundColor")
node.getOtherNode()
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)
Disposer.register(myDisposable,myProject)
nameResolver.generatedTypeNameOf(referenceElement).get()
typeDeclaration.isNovel()
assertThat(pod).hasId(expectedId)
flushStatements(false)
/**   * Saves the  {@link CacheWriteEntry}.  * @param cacheWriteEntry the {@link CacheWriteEntry}  * @return the {@link CacheReadEntry} for the written {@link CacheWriteEntry}  * @throws IOException if an I/O exception occurs  */ CacheReadEntry save(CacheWriteEntry cacheWriteEntry) throws IOException ; 
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_ENABLED,0,null,true)
colorModeClass.equals("ProportionalSizeMode")
time.put(delta)
myInjectedFile.getFileType()
filename.trim().equals("")
position.setEmpty()
globalScheme.getAttributes(DiffColors.DIFF_DELETED).getEffectColor()
((BufferControl)ctl).setBufferLength(130)
mBiometricUnlock.stopAndShowBackup()
storedOverlayInfos.get(i)
new LabelSet.ArrayBasedLabelSet(labelIds)
/**   * {@inheritDoc}  */ @Override public Object clone(){   StringProperty prop=(StringProperty)super.clone();   prop.value=value;   return prop; } 
new EntitlementUserApiException(ErrorCode.ENT_INVALID_REQUESTED_DATE,requestedDate.toString())
ArrayList<ASyncSample>
limitOrder.getTradableAmount()
methodRedefinitionResolver.hashCode()
BED(99)
i=4
u.isUnknownType()
JSONValue.parse(isr)
object1.getName(object1)
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL_ALL,pkg,mustHaveFlags)
T
mActionBarTop.getVisibility() == VISIBLE
Assert.assertEquals(45,classes.size())
vf != null
Foundation.NSLog("[debug] " + tag + ": "+ message)
args.length == 3
file == null
public Object mapLine(FieldSet fieldSet,int lineNum){   Customer customer=new Customer();   if (Customer.LINE_ID_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setCompanyName(fieldSet.readString(COMPANY_NAME_COLUMN));     customer.setRegistered(true);   }   if (Customer.LINE_ID_NON_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setLastName(fieldSet.readString(LAST_NAME_COLUMN));     customer.setFirstName(fieldSet.readString(FIRST_NAME_COLUMN));     customer.setMiddleName(fieldSet.readString(MIDDLE_NAME_COLUMN));     customer.setRegistered(TRUE_SYMBOL.equals(fieldSet.readString(REGISTERED_COLUMN)));   }   customer.setRegistrationId(fieldSet.readLong(REG_ID_COLUMN));   customer.setVip(TRUE_SYMBOL.equals(fieldSet.readString(VIP_COLUMN)));   return customer; } 
Collections.singletonList(EMPTY_PATH_SEGMENT)
_imageTrain.loadModel(networkParms)
verifyNothing(decoder,binary("02080000251848470afa010262daa690013aa4046da83745f8812560df010001126a"))
framework.getBroadcasterFactory().lookup(m.broadcaster(),true)
StringBuffer sb=new StringBuffer(100); 
new ScrolledComposite(wTabFolder,SWT.V_SCROLL | SWT.H_SCROLL)
additionalProperties.remove(DATE_FORMAT)
typeSettingsProperties.toSortedString()
telephony.isRinging()
!Boolean.TRUE.equals(getAttribute(CASE_INSENSITIVE))
fontBuffer.capacity() > 0
SYNC_OK=0x0
catalog.getStyleByName(info.getName())
beansXml.createAlternatives()
GridFailFastSelfTest.class
mode == Mode.COMPILED && mode == Mode.ROOTS
buildVersion=0
internalAddChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
buffer.buffer()
i > size
cs[c].setNA0(r)
target.getShortName()
setBuffer(Type.Index,3,new short[]{0,1})
c.getParent() == originalParent
mTfs.setPin(mTfs.open(path),false)
Integer.min(m,s.size())
location.asConstant().isNull()
poi_tag != null
expectedItemClass.isAssignableFrom(baseItem.getClass())
logger.info(String.format("emitting packet with ack id %d",ids))
new ConfigRepoConfig(new GitMaterialConfig("https://github.com/tomzo/gocd-indep-config-part.git"),"myplugin")
engine.execute(query).toString()
initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR
origin.realComponent().doubleValue() > other
JournalWebUpgrade.class
public Object read() throws Exception {   if (counter < limit) {     counter++;     return new Trade("isin" + counter,counter,new BigDecimal(counter),"customer" + counter);   }   return null; } 
reason != null
600 * 1000
listView.setSelection(checkedItem)
KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(type)
variableIdentifier instanceof PsiVariable
cik * (-puf)
-828565021
routes.IndicesResource().single(index)
@GUIMenuSortOrder(4)
Deque<String>
r.getRequest()
this.messageService.fluxPostAuthorizeFindById(1L).contextStart(withUser)
ArrayInjector.class
getSupportFragmentManager()
matrix.apply(transform)
arguments.setSourceMapSourceRoots(sourceMapSourceRoots.toString())
new WorkflowException("Unable to lock workflow task " + workflowTaskInstanceId,e)
lastClient.toString()
return size; 
offset <= range.getEndOffset()
getUserBadgedDrawableForDensity(dr,new UserHandle(mContext.getUserId()),null,0)
ImmutableList.of("jinput.jar","lwjgl.jar","lwjgl_util.jar")
fMethodDescriptions.put(method,description)
keyCode == KeyEvent.KEYCODE_SEARCH
addGroupedInterceptor(filter,interceptorClassName,group,executionPolicy)
String.format("Keyspace mismatch (found %s; expected %s)",cf_def.keyspace,tableName)
((IWorkbenchPropertyPage)prefPage).setElement(dataSource)
IOUtils.close(wrapper,w,dir,analyzer)
timeout=60000
ReactiveHelper.scheduleLast(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
a.cancel()
public void runMayThrow() throws IOException {   if (Schema.instance.getKSMetaData(mutation.getKeyspaceName()) == null)   return;   if (clr.pointInTimeExceeded(mutation))   return;   final Keyspace keyspace=Keyspace.open(mutation.getKeyspaceName());   Mutation newMutation=null;   for (  PartitionUpdate update : clr.replayFilter.filter(mutation)) {     if (Schema.instance.getCF(update.metadata().cfId) == null)     continue;     ReplayPosition rp=clr.cfPositions.get(update.metadata().cfId);     if (segmentId > rp.segment || (segmentId == rp.segment && entryLocation > rp.position)) {       if (newMutation == null)       newMutation=new Mutation(mutation.getKeyspaceName(),mutation.key());       newMutation.add(update);       clr.replayedCount.incrementAndGet();     }   }   if (newMutation != null) {     assert !newMutation.isEmpty();     Uninterruptibles.getUninterruptibly(Keyspace.open(newMutation.getKeyspaceName()).applyFromCommitLog(newMutation));     clr.keyspacesRecovered.add(keyspace);   } } 
TextView tv=(TextView)getChildAt(LAST_OBJECT_IN_STACK); 
Assert.assertEquals(configs.size(),1)
child2.setBytes(200)
skyDaylightBrightness=1.3f
bdtemp.floatValue()
ec2 != null
assertEquals(mock.getExchanges().get(0).getIn().getBody(String.class),"val-1")
public SELF setStandardOutput(OutputStream outputStream){   operationParamsBuilder.setStdout(outputStream);   return getThis(); } 
myEditor.getDocument()
event.getChild()
getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout)
String pipelineName
_matcher.group(2)
texCoordIdx >= 1
commandExecutor.evalReadAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
public Void execute(Context context){   KieSession ksession=((KnowledgeCommandContext)context).getKieSession();   if (this.outIdentifier != null) {     ((StatefulKnowledgeSessionImpl)ksession).getExecutionResult().getResults().put(this.outIdentifier,object);   }   ksession.setGlobal(this.identifier,this.object);   return null; } 
textMessage.getMessageType()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1400
mavenBundle().groupId("org.conscrypt").artifactId("conscrypt-openjdk-uber").version("1.1.4")
vb.getData() != null
mCanSeekForward=mCanSeekForward=true
beanDefinition.isAbstract()
case 2: 
cacheSkipStore.removeAll()
System.nanoTime()
watching.movie != null
StatBuckets.prettyUptime(secs)
this.messageService.monoPreAuthorizeBeanFindById(1L).contextStart(withUser)
/**   * Visits the specified list result.  * @param listResult the list result  * @return the result of the visit  */ TVisit visitListResult(ListResultData listResult); 
new CacheLoaderException("Failed to remove object: " + key,e)
user.id()
dlFileEntryFinder.findByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
new ArrayList<RowSorter.SortKey>()
supportSession=true
logger.error(cause)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
from("direct:c").delay(500)
Formatter.getInstance().getNoneIndent()
httpResponseCode == 204
"Unable to get queryfields for SQL: " + Const.CR + sql
assertPhoneNumberEqual("123123","0123123",false)
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.")
result.whenCompleteAsync((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
DEFAULT_PERIOD_MS=60000L
log.warn("Reset to factory defaults : onNextDropped")
ModuleIdentifier.create(moduleName)
/**   * Returns the error code.  * @return The error code.  */ public String getErrorCode(){   return _errorCode; } 
val
!usr.getUUID().equalsIgnoreCase(usr.getLastName())
new HiveTableTypeMapping()
toPatterns("gradle-core","slf4j-api","logback-classic","logback-core","jul-to-slf4j")
ImmutableSortedSet<String>
TestPropsValues.getGroupId()
LOG.error("Cannot close the writer for {}",recordPathTemp)
DateTieredCompactionStrategy.class
QueryProcessor.processInternal("SELECT * FROM cql_keyspace.table2;")
XMLRPCClient.parseXMLRPCResponse(is)
/**   * Helper method, has same effect as <pre>return enhance(cls, interfaces, ih, null, null);</pre>  * @see #enhance(Class,Class[],MethodInterceptor,ClassLoader,Method,MethodFilter)  */ public static Object enhance(Class cls,Class interfaces[],Callback callback){   return enhanceHelper(cls,interfaces,callback,null,null); } 
currentCountry.getCountryFullName()
logger.info("failed indexing {}",i,e)
create().select(t1,t2,t3,t4,t6,t7,t8,t9,tb)
typeLength == 0
ImmutableList.of("/bin/bash","-c",bash)
tableHasColumn("KBTemplate","cacheable")
jscx.initStandardObjects(null)
SystemTable.removeEndpoint(DatabaseDescriptor.getReplaceAddress())
swapEnabled
dest.writeLong(mSubId)
new SimpleDateFormat("dd-MMM-yyyy")
items[18]
Math.max(1 << (pulseCount - 1),64)
focused == null
NativeLibraryHelper.Handle.create(scanFile)
model.getModelName()
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapBaseTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
log.warn("Hooking new default : onOperator")
ArrayList<MessageListener<Object>>
sharedElements.remove(localName)
activity.findViewById(android.R.id.list)
private Artifact getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
getBackgroundNetworkFetchToEncodedMemorySequence()
body.getData()
sLon == null
String model
undoBarHideListener.onUndoBarHide(mUndoToken == null)
new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").layer("0",new DenseLayer.Builder().nOut(10).build(),"in1").layer("1",new DenseLayer.Builder().nOut(10).build(),"in2").layer("2",new DenseLayer.Builder().nOut(10).build(),"0").layer("3",new DenseLayer.Builder().nOut(10).build(),"1").layer("4",new DenseLayer.Builder().nOut(10).build(),"1").layer("5",new DenseLayer.Builder().nOut(10).build(),"1").layer("6",new DenseLayer.Builder().nOut(10).build(),"3","4","5")
id=15809
new StandardTypeConverter()
PsiTreeUtil.instanceOf(instruction.getElement(),PyReturnStatement.class,PyBreakStatement.class,PyContinueStatement.class,PyAssignmentStatement.class,PyRaiseStatement.class,PyStatementList.class,PyTryExceptStatement.class,PyTryPart.class,PyExceptPart.class,PyFinallyPart.class)
TAuthor_LAST_NAME()
privObj.getObjectName().equals("masking_test_druid")
IndexReader.open(spellindex,true)
/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEvemtFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX="Check";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName="WARN";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append("] ").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(" [").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } 
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post,mIsPage)
TextSecureCommunicationFactory.createManager(context)
@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } 
priority > 128
userContext.getContentResolver()
timeSinceFirst < DateUtilities.ONE_DAY * 3
new IndexWriter(dir2,new StandardAnalyzer())
Foundation.NSLog("[info] " + tag + ": "+ message)
cacheScaled5.setColor(red)
final MediaDriverReceiver receiver
new HazeNode(context,readOnlyGBufferConfig,hazeIntermediateConfig,aLabel)
id=15851
config().getInt(BASE_PATH + "tolerance")
new PyClassType(project,typeName,true)
buildChannelsUriForInput(inputId,true)
IndexReader reader2=IndexReader.openIfChanged(reader); 
invoiceDao.create(invoice,1,context)
AuthUI.getInstance().silentSignIn(this,getSelectedProviders()).addOnCompleteListener(new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     if (task.isSuccessful()) {       startSignedInActivity(null);     }  else {       showSnackbar(R.string.sign_in_failed);     }   } } )
application.getApplicationContext()
twitter1.getRetweeterIds(18594701629l,-1)
/**   * Represents an Eclipse-specific external artifact dependency.  * @since 2.14  */ @Incubating public interface EclipseExternalDependency extends ExternalDependency, EclipseDependency { } 
LOG.fatal(msg,e)
handleJAXBException(e,true)
myDetailsPane.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
ClassNotFoundException ex
creating || !mRtHandlingPositionUpdates
markerYear == currentYear
count=0
(T)capability
animData == null
TYPE_ATSC_M_H=0x00030200
assertEquals(5,response.getHits().size())
CharacterHelper.charType(chars.charAt(pos),skipPunc) != CharacterHelper.charType(chars.charAt(pos + 1),skipPunc)
((GroovyObject)receiver).getMetaClass() != metaClass
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
doneAdvance(mark(),KEY_CHARACTERS)
Log.e(TAG,status)
System.err.print(s)
editorFactory.create(getTerminal())
(data + increment) % 3
List<StagedModel>
createCachedInstanceOn(event)
this.getSocket()
new LongObject(3l,"foobar")
assertEquals(1,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
bitmap.getWidth()
layer.mDrawable == null
bundlesMap.get(module)
previousTypeSettingsProperties.toString()
assertEquals(148,map.getLocalMapStats().getHeapCost())
TreeMap<Menu.Item,ZLApplication.Menubar.PlainItem>
mFocusStack.remove(fse)
getMockEndpoint("mock:start").expectedMinimumMessageCount(4)
thingType != null
/**   * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.  * @param self          the proxy instance.  * @param thisMethod    the overridden method declared in the superclass or interface.  * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.  * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.  * @return              the resulting value of the method invocation.  * @throws Exception    if the method invocation fails.  */ Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Exception ; 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
a.length >= count()
graphModel.isDirected()
"value".equals(key)
mRecyclerView.scrollBy(hScroll,vScroll)
camelContext.getComponent(component)
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"meminfo",pw)
!UtilActivator.getSystrayService().checkInitialized()
SitesDirectoryWebUpgrade.class
legacyModel.isDefined()
new IndexWriter(dir1,new StandardAnalyzer(),true)
menu.findItem(R.id.menu_uncomplete_checklists).setVisible(true)
PortalUtil.getClassNameId(className)
found.getElementType() == ElementType.XML_COMMENT_START
className.indexOf(CONTROLLER_SUFFIX)
getLog().warn(e.getMessage())
return importsDestFile; 
getPhoneType(getJsonString(email,"type"))
result.getSqlType()
@NotNull T owner
majorVersion <= MSSQL_SERVER_VERSIONS.MSSQL2008
logger.trace("An error occurred while executing a command: ",e)
!cncFile.exists()
registerError(elseToken)
model.getConfig()
logger.info(name)
showFullResult ? 999999 : limit
fixedValues
userQueryService.getUserNames(markdownText)
new EnterSelectionDialog(shell,spoon.props,err_lines,Messages.getString("SpoonLog.Dialog.ErrorLines.Title"),Messages.getString("SpoonLog.Dialog.ErrorLines.Message"))
args[0].trim().length() < 3
current != null
new ShareType(shortExplanation,CLIPBOARD)
new RandomIndexWriter(random,dir)
type.restContentType()
waitUntilElement(feedbackText,"Feedback message should be present").is().present()
isNullOrEmpty(number)
parent.getChildAdapterPosition(v)
connectedHeaders.setAcceptVersion("1.1")
return 18; 
scheduler != null
logger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ mCurrentFocus+ "}}"
getCustomArgumentResolvers()
List<String>
user == null
(task=writeQueue().poll()) != null
GBActivitySample activitySample
!blog.getCapabilities().equals(capabilities)
urlString.indexOf("/monitoring")
super.onResolveLayoutDirection(layoutDirection)
InstanceCreationUtils.newInstance(view.getContext(),entry.getValue(),VIEW_DELEGATE_CONSTRUCTOR_SIGNATURE,null)
INVISIBILTY(14,PotionEffectType.INVISIBILITY,1)
colorModeClass.equals("ScaledSizeMode")
mSplashScreen.getVisibility() == View.VISIBLE
i=2
request.getLocalAddr()
BufferUtils.newByteBuffer(fileSize)
Collections.sort(backends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
ChannelStateHandler handler=(ChannelStateHandler)handler(); 
adapter.callback != null
getLog().info("Kotlin version " + KotlinCompilerVersion.VERSION + " (JRE "+ System.getProperty("java.runtime.version")+ ")")
/**   * @author Spencer Gibb  */ @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes=SpringDecoderTests.Application.class) @WebAppConfiguration @IntegrationTest({"server.port=0","spring.application.name=springdecodertest","spring.jmx.enabled=true"}) public class SpringDecoderTests extends FeignConfigurer {   @Value("${local.server.port}") private int port=0;   public TestClient testClient(){     return feign().target(TestClient.class,"http://localhost:" + port);   } protected static interface TestClient {     @RequestMapping(method=RequestMethod.GET,value="/hello") public Hello getHello();     @RequestMapping(method=RequestMethod.GET,value="/hellos") public List<Hello> getHellos();     @RequestMapping(method=RequestMethod.GET,value="/hellostrings") public List<String> getHelloStrings();   } @Configuration @EnableAutoConfiguration @RestController protected static class Application implements TestClient {     public Hello getHello(){       return new Hello("hello world 1");     }     public List<Hello> getHellos(){       ArrayList<Hello> hellos=new ArrayList<>();       hellos.add(new Hello("hello world 1"));       hellos.add(new Hello("oi terra 2"));       return hellos;     }     public List<String> getHelloStrings(){       ArrayList<String> hellos=new ArrayList<>();       hellos.add("hello world 1");       hellos.add("oi terra 2");       return hellos;     }     public static void main(    String[] args){       new SpringApplicationBuilder(Application.class).properties("spring.application.name=springdecodertest","management.contextPath=/admin").run(args);     }   }   @Test public void testSimpleType(){     Hello hello=testClient().getHello();     assertNotNull("hello was null",hello);     assertEquals("first hello didn't match",new Hello("hello world 1"),hello);   }   @Test public void testUserParameterizedTypeDecode(){     List<Hello> hellos=testClient().getHellos();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match",new Hello("hello world 1"),hellos.get(0));   }   @Test public void testSimpleParameterizedTypeDecode(){     List<String> hellos=testClient().getHelloStrings();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match","hello world 1",hellos.get(0));   } @Data @AllArgsConstructor @NoArgsConstructor public static class Hello {     private String message;   } } 
ast.createQueryTranslator(hql,hql,Collections.EMPTY_MAP,sessionFactory())
in.readObject()
SKELETONS_VERSION=3
aClass.findClassAttribute(name,false)
new ElasticsearchException("failed to walk tree",e)
getUseEquals()
DEBUG_ADD_REMOVE=false
buffer.nextOneRow(changeColumns)
verify(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
logger.error("failed to create index [{}]",indexMetaData.index(),t)
initOpenSSLConfCmdCipher("CipherString",ENABLED_CIPHER)
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT
mRotation != RotationUtils.getExactRotation(mContext)
factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)
buffer[extLenIndex] << 4
generatePomXML(kfs,gav)
EntityMapper.class
callNode.call(frame,getIndirectCallTarget(getContext(),function),arguments)
delegate.toJson(new Envelope<>(value))
holder.textView.setBackground(mSelectedBackground)
String modSource
_classPathReferences.contains(file)
myTabs.isEditorTabs() && UISettings.getShadowInstance().getShowCloseButton()
assertEquals(1,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
new IndexWriter(ramDir,new WhitespaceAnalyzer(),true)
two.setCoordinateIndex(1)
"No class type found for " + className
return START_STICKY; 
mapper.getTypeFactory().uncheckedSimpleType(AuthConfig.class)
addProperty(firstNode,"band","The Clash")
new TimeProfiler(LOG).start("Load previous line hashes of: " + fileKey)
mListener.onInputUpdated(inputId)
public static TitledBorder createTitledBorderSimpleWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),15,1,new Insets(3,0,6,0)); } 
modulePropertyManager.seExternalModuleType(moduleType)
property("script")
lastVersionNumber + 1
s3dir + ".dir"
sketchWidth0 < sketchWidth0
synchronized (classCache) {   return (Class[])classCache.values().toArray(new Class[0]); } 
assertLength(3,builder.getErrors())
predicate != null && !predicate.match(match,start,end,context)
new TileSourceManager.TileSourceTemplate(dir.getName(),url)
tags[1]
cursor.getPosition()
JsonObject.createObjectMapper().getJsonFactory()
logger.info("Aliasing common strings")
new ProtoFile("descriptor.proto",null,NO_STRINGS,Arrays.asList("src/test/resources/unittest_import.proto"),NO_TYPES,NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
TValue value=null; 
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
super.getLikeProvider(path)
chunk.split("%n")
savedInstanceState.containsKey(STATE_FILTERED_ITEMS)
AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()
hostsInPool.decrementAndGet()
30 * 60 * 1000
coverageDataManager.addCoverageSuite(myConfiguration.getName(),new DefaultCoverageFileProvider(coverageFileName),myConfiguration.getPatterns(),lastCoverageTime,myConfiguration.getSuiteToMergeWith(),myConfiguration.getCoverageRunner(),myConfiguration.isTrackPerTestCoverage() && !myConfiguration.isSampling())
from.getRegistryName()
this.mModel=mModel
new RanChangeSet("classpath:/db/file.log","1","author",null,null,null,null,null,null,null,null)
mySubstitutor.isValid()
type.createDataFormat(routeContext)
configureAST(classNode,code)
mpi < 135
containsInAnyOrder("VARIABLE=success","PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin")
LOG.debug("recovered from " + StringUtils.stringifyException(e))
this.homeString
assertEquals(2,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
Long value=iterator.next(); 
StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName())
@Override public Object create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
Value emitBitScanForward(Value operand); 
LOG.error(String.format("%d ms elapsed since build job marked as finished, but still missing finished status from some workers.",elapseMillisSinceFirstFinishedStatus))
public static LayoutFriendlyURLComposite getLayoutFriendlyURLSeparatorComposite(long groupId,boolean privateLayout,String friendlyURL,Map<String,String[]> params,Map<String,Object> requestContext) throws PortalException {   return getPortal().getLayoutFriendlyURLSeparatorComposite(groupId,privateLayout,friendlyURL,params,requestContext); } 
mapLayerConfiguration.setOpacity(((float)cachedOverlayTransparency) / 255.0f)
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
t.getCause()
logger.debug("NODE {}: Retry timout: Advancing")
activityNdx < topActivityNdx
clob.getAsciiStream()
command.runHelp(stdErr)
component.getSource()
Arrays.asList(new Dependency("org.grails","grails-docs",grailsVersion,true),new Dependency("com.lowagie","itext","2.0.8",true))
mContext.startActivity(intent)
BeginNode node
Boolean.getBoolean(value)
Gdx.input.getX()
DAO_RESCUE_BLOCK=1_787_300
LAYERS=10
clist.clearDisplayNameUserDefined(metaContact)
new DatabaseExplorerDialog(shell,props,SWT.NONE,inf,transMeta.getDatabases())
o instanceof Xid
@Nullable JLabel label
getFragmentManager()
stack.isVisible() && (imeOnBottom || isDockedOnBottom)
mNextWakeFromIdle != null
showBadnessTrace("It was not meant to be","A serious problem happened during startup. Please report:\n" + "http://github.com/processing/processing/issues/new",e,true)
new DefaultPlexusContainer(null,null,null,classWorld)
DEFAULT_NUMBER_OF_WRITE_BUFFERS=128
new SpannedString(first,false)
builder.timeValueField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
item.getMedia().getId() == id
commonRegisterProblem(message," not support this syntax. Raise with no arguments can only be used in an except block",len,node,null)
TextStyle.decodeEffect(encoded) | TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH
panel.attachTo(viewPort,guiViewPort,overlayView)
ClassFileVersion.forCurrentJavaVersion()
JetTypeChecker.INSTANCE.isSubtypeOf(type,expectedType)
((SQLDataSource)dataSource).getSQLDialect().storesQuotedCase()
update.metadata().table
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask)
(srcOffset % VECTOR_SIZE) == (destOffset % VECTOR_SIZE)
new IncrementalIndexSegment(rtIndex)
Integer.class
ExportEventsAction.class
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l)
blogVals.get(26)
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFilesWouldBeOverwrittenByMergeDetector.getFiles(),"merge")
getWidgetSettings()
getModel().getRowCount()
maxInactiveInterval * 1000
args.length > 3
TextUtils.isEmpty(JCUtils.getCurrentUrlFromMap(urlMap,currentUrlMapIndex))
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,fromX,y,0)
value instanceof Long
res.setBytes(100)
protected BytecodeParserError asParserError(Throwable e){   if (e instanceof BytecodeParserError) {     return (BytecodeParserError)e;   }   BytecodeParser bp=this;   BytecodeParserError res=new BytecodeParserError(e);   while (bp != null) {     res.addContext("parsing " + bp.code.asStackTraceElement(bp.bci()));     bp=bp.parent;   }   return res; } 
id=15856
minIdle < 0
private final LinkMode linkMode; 
rootDependency.toBundleUrl()
serialVersionUID=3256439218229424434L
assertEquals(id3,new Twitter(id3,pass3).verifyCredentials().getName())
public DerivedBuilder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } 
ModelVersion.create(3,0,0)
i <= 0
className.startsWith(Classes.COROUTINE_NAME)
Thread.sleep(100)
boardsFile.getAbsolutePath()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION)
IndexReader open=null; 
platformData.containsKey(variant)
public class XpathRegressionOuterTypeNumberTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOuterTypeNumber.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"1:1: " + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
WAIT_FOR_NETWORK_TIMEOUT_DEFAULT_MS=2000
value == Short.class
Optional.of(resourceManagement.getStats())
Boolean.parseBoolean(value)
ColorKey.createColorKey("MT_" + allFileStatus.getId(),null)
(sync != POSITION_SYNCHRONIZATION_NONE) || (sync != POSITION_SYNCHRONIZATION_CHECK)
getCurrentTab().handleDiscourseCopy()
entry.notification.clone()
Reflection.methodHandle(type,"sizeOf",null)
bareAddress != null
T deployTask=createDeployTask(publication.getPomFile(),mavenRepositoryLocator,artifactRepository); 
DataFormat.PAYLOAD == message.get(DataFormat.class)
Lists.newLinkedList()
notifyItemRangeChanged(positionStart,itemCount)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL)
new ObjectToMapTransformer()
DataManager.getInstance().getDataContext(getEditor().getComponent())
JMeterUtils.getPropDefault(ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_PREFIX + ReportGeneratorConfiguration.KEY_DELIMITER + "statistic_window",200000)
LOG.error("PriviledgedActionException as:" + this + " cause:"+ cause)
ticket.cancel(true)
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.web",Collections.<UpgradeProcess>singletonList(upgradePortletId),1,0,false)
@Override public void receiveEndOfStream(int streamId) throws ConnectionError {   Stream stream=getStream(streamId,true);   if (stream != null) {     stream.receivedEndOfStream();   } } 
new CrypticClue("Search for a crate in a building in Hemenster.",CRATE_356,new WorldPoint(2636,3454,0),"House north of the Fishing Contest quest area. West of Grandpa Jack.")
case 13: 
page.getMembersByIdx(0).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(0)
(float)getMax() / 5
log.info("Committed all active tasks {} and standby tasks {} in {}ms",taskManager.activeTaskIds(),taskManager.standbyTaskIds(),timerStartedMs - now)
new DataSpec(uri)
ContextNameAction.class
new IllegalArgumentException("Cannot force ephemeral users on systems without split system user.")
String.format("null label in rule %s, %s",getLabel().toString(),where)
note.addParagraph(AuthenticationInfo.ANONYMOUS)
U.compareAndSwapLong(o,longRawIdx(x),o,o + 1)
Assert.assertNotNull(semaphore.acquire(3,TimeUnit.SECONDS))
tex.getFieldValue("norfac")
!FileUtil.pathsEqual(configuration.getFilePath(),file.getVirtualFile().getPath())
String.format("Builder for coercable type %s had 2 setters named %s but they were not Optional " + "and non-Optional. Don't know how to coerce.")
Flavor flavor
assertEquals("Invalid content-length",13,outputMessage.getHeaders().getContentLength())
new UnsupportedOperationException("refresh token invalidation cannot be serialized with version [" + out.getVersion() + "]")
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_DEFAULT_TO_FINALIZED,false)
Collection<? extends IJsonNode>
Arrays.asList(TYPE,SUBSCRIBE_TYPE,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
1 + 2
new LFWDataFetcher(imageHeight,imageWidth)
LogFactory.getLogger().info("Could not find table or view " + tableName + " for column "+ columnName)
Math.abs(diff - maxAge) <= 1
subscriptionSender.setContextAttributes("[$CONTENT_URL$]",contentURL,false)
file.getName().startsWith("branched-")
if (addThem) {   for (int i=0; i < this.getCount(); i++)   if (!mListAppSelected.contains(this.getItem(i)))   mListAppSelected.add(this.getItem(i)); }  else mListAppSelected.clear(); 
/**   */ class SctpServerPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn("Failed to accept a connection.",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to initialize an accepted socket.",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a partially accepted socket.",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a selector.",e); } } } } } 
parameterTokens.add(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
validateFriendlyURL(groupId,user.getCompanyId(),classNameId,classPK,friendlyURL)
addContactButton.setRolloverImage(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
LOGGER.info("Register profile {} for organization {}",qualityProfile.getQProfileName(),organization.getKey())
300 * 1000L
request.getTaskDefinitionKey()
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).expectComplete()
TitanGraphTransaction g
i < 3
url.startsWith("http://") || url.startsWith("https://")
DEBUG=true
new ByteBuddy().subclass(Baz.class).method(named("foo")).intercept(MethodDelegation.to(new Qux())).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
shard.applyDeleteOperationOnReplica(1,1,2,"test","id",VersionType.EXTERNAL,mappingConsumer)
this.setSelectedGroup(metaContact.getParentMetaContactGroup())
event.getFile().getLength() < 0
assertViolations(result,0,0,1)
getSongProgressMillis() > 2000
new WSSecHeader(actor,mustUnderstand)
_buildTemplateWithGradle("template-context-contributor","context-contributor-dependency-management","--dependency-management-enabled","true")
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION)
nextNextInfo.distanceTo < TURN_IN_DISTANCE
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) == -1
ConfigUtils.absoluteHealthCheckDir(stormConf)
isBigDecCategory(typeRe)
resource.getPath()
result.isDigestQuery()
from("seda:a").delayer(500)
((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject())).prepareForTest(true)
createRecord(value,expiryTime)
asList(CUBRID,DERBY,FIREBIRD,ORACLE,SQLITE,SQLSERVER,SYBASE)
(GrTypeDefinition)element
final Channel channel; 
/**   * Get the <i>i</i>th oldest event currently in the buffer. If <em>i</em> is outside the range 0 to the number of elements currently in the buffer, then <code>null</code> is returned.  */ public Object get(int i){   if (i < 0 || i >= numElems)   return null;   return ea[(first + i) % maxSize]; } 
FileUtil.loadFile(new File(getTestDataPath() + getTestName(true) + ".txt"))
GuiPackage.getInstance().updateCurrentNode()
callButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
name.equals("getSimOperatorName")
logger.info("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
KotlinPluginUpdater.Companion.getInstance().kotlinFileEdited()
vpms.add(vpm)
max.getBlockY()
shareByLinkAllowEditing.isChecked()
assumeFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
new Exception("File " + file.getPath() + " should not exist")
h.addParameters("--pretty=format:%H","HEAD")
n.getNodeData().x()
new IOException(se)
props.getProperty(ASSERTION_RESULTS_FAILURE_MESSAGE_PROP,FALSE)
probe.getIrradianceMap() == null
webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
model.getCurrentResult() != null
JetTypeChecker.INSTANCE.isSubtypeOf(expectedReturnType,returnType)
reads=false
@SuppressWarnings("MethodDoesntCallSuperMethod") @Override public Text clone(){   CDATA text=new CDATA();   text.value=value;   return text; } 
p.getUnknownSearchWordLength() > 3
PreferenceManager.instantPictureUploadEnabled(context)
builder.types("Person")
new IllegalStateException()
meta.getEnclosure()
kernelWidth >= (inWidth + 2 * padWidth)
result=null
attribute.getMetaAttribute().isReadOnly()
ColorResources.getColor("scrollBarTrackHighlight")
FilterResult::isFiltered
new QuickAdapter(PullToRefreshUseActivity.this,PAGE_SIZE)
type.length() > 0
expression.getParent()
new FileHyperlinkRawData("spec/personSpec.js",22,-1,3,s.length())
HdmiCec.getTypeFromAddress(i)
new FilePathImpl(new File(path.substring(0,pos)),false)
FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6324_e,client.field_6313_p)
viewToModel == null
(mViewFlags & ENABLED_MASK) != ENABLED
Key<Integer>
new ObjectMapper().reader(DatanodeAdminProperties.class)
firstPos != mTargetPos
public PoshiRunner(String classCommandName) throws PoshiRunnerException {   LoggerUtil.startLogger();   SeleniumUtil.startSelenium();   System.out.println("\nRunning " + classCommandName);   _testClassCommandName=classCommandName;   _testClassName=PoshiRunnerGetterUtil.getClassNameFromClassCommandName(_testClassCommandName); } 
database instanceof DB2Database || database instanceof DerbyDatabase || database instanceof HsqlDatabase
new StringBundler(9)
quoteMatcher.group(0)
new ObjectMapper().reader(Map.class)
mActivity.get() != null
new StackState(1f,0)
assertNumUniqueNodeNameBuckets(0)
System.currentTimeMillis()
NodeTraversal.traverseEs6(compiler,originalRoot,this)
LeakHunter.checkLeak(usageView,PsiFileImpl.class)
frustum.update(combined)
new QueryException("Error in preloading targets. %s: %s",e.getClass(),e.getMessage())
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",value,mNames[index])
public SELF setStandardError(OutputStream outputStream){   operationParamsBuilder.setStderr(outputStream);   return getThis(); } 
mObsoleteAgents.remove(info)
new WeightedRandomChestContent(item,weight,max,max)
uid
"Unsupported filesystem scheme found in the backup target url. Error Message: " + newMsg
public Object getMethod(); 
new PathResourceManager(tmpDir,10485760)
conn.getResponseCode() != HttpURLConnection.HTTP_OK
getPreviousWindowIndex()
generator.emitMove(val,register.asValue(val.getKind()))
assertFalse(runtimeOptions.isMonochrome())
DirectCallTargetNode directCall=(DirectCallTargetNode)invoke.callTarget(); 
!myLastSuspendContext.equals(getSuspendContext())
Object key=keys.next(); 
UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),true,event.mediaModelList,event.successMessage)
compressedProto.length < 330000
infos[1]
public String getRequestCacheKey(){   return requestCacheKey; } 
new Setting<>("repositories.s3.access_key",CLOUD_S3.KEY_SETTING,Function.identity(),Property.NodeScope)
cf.setInMemory(true)
stall_till_cloudsize(1)
new WeekViewEvent(event.getId(),event.getName(),event.getStartTime(),endTime)
file.getVirtualFile() != null
mDrawerLayout.openDrawer(mDrawerGravity)
commandExecutor.evalReadAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
getFloatValue(key,0.0F)
TT
BACKGROUND_DEXOPT_JOB=808
new SolrException(1,"error parsing event listevers",e,false)
LARGER_DIMENSION=1000
8 + 4
cal.set(1900,1,1,hour,minute,second)
mEase4.setTextColor(mNextTimeTextRecomColor)
progressHandler.onProgress(downloaded,total)
getLabel()
ent.getValue().intValue()
numberOfPopulateTest=10000
staticCall("java.lang.System","exit").parameterCount(0)
assertTrue(storer().shouldProcess(curi1))
_subBlocks.size() > newChildIndex
id=23
FUNC_CODE_DEBUG_LOC
Publisher<T>
createHalf(buffer.length(),init)
serialVersionUID=1576899745
cause.getMessage().startsWith("Different HTTP Scheme or Host Redirect detected on")
1l
args.length != 6
releaseLock(LOCK_TRIGGER_ACCESS,transOwner)
s.contains("://") || s.startsWith(MAILTO_PREFIX)
/**   * Needed for statistics.   */ private final LongAdder finishedJobsCnt=new LongAdder(); 
Object key
new int[3456]
return matchedUris; 
adapter.item(R.string.layer_hillshade).selected(HILLSHADE.get() ? 1 : 0).icons(R.drawable.ic_action_hillshade_dark,R.drawable.ic_action_hillshade_light).listen(listener).position(9)
/**   * Enhances a public non-final class. Source class must have a public or protected no-args constructor. Code is generated for protected and public non-final methods, and package methods if the source class is not in a the java.* hierarchy.  * @param cls class to extend, uses Object.class if null  * @param interfaces interfaces to implement, can be null or empty  * @param ih interceptor used to handle implemented methods  * @param loader ClassLoader for enhanced class, uses "current" if null  * @param filter a filter to prevent certain methods from being intercepted, may be null to intercept all possible methods  * @return an instance of the enhanced class. Will extend the source class and implement the giveninterfaces, plus the CGLIB Factory interface.  * @see Factory  */ public static Object enhance(Class cls,Class[] interfaces,Callbacks callbacks,ClassLoader loader,CallbackFilter filter){   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
sp.vim_regsub_multi(regmatch,lnum,sub,1,true)
assertNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
GoPsiImplUtil.findBaseTypeFromRef(methodType.getTypeReferenceExpression())
e instanceof MaybePrimitiveExpr && e.hasJavaClass()
Navigation.checkNavigationCategory(undoCategoryList.get(note))
contact.GetWorldManifold()
ImmutableSet.of(modules)
zoneId.equals("+00:00") | zoneId.equals("-00:00")
Class.forName(line)
startActivityAsUser(mHomeIntent,UserHandle.CURRENT)
FileUtil.toFile(u)
selectedFileTemp != null
message.getExpiresInSeconds() * 1000
operation == RESTORE_OPERATION
new BadRequestException()
equalTo("cookieManagerShared")
supplement(this,aggregate)
((MainTimeLineActivity)getActivity()).setHomeListView(listView)
index >= size && index < 0
new UnsupportedTemporalUnitException("Should only attach offsets to local times, not zone ids.")
Assert.assertEquals(118L,ownerCapsuleNew.getNetUsage())
createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,true)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
assertFalse(removed)
LOGD=true
ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
TokenSet.create(PyTokenTypes.STRING_LITERAL)
final WebPageDetail wd=detailIterator.next(); 
LOGGER.debug("Could not execute paste",ex)
new RunnableAdapter<T>(task,result)
sdk != null
Settings.Global.getInt(cr,Settings.Global.DOCK_AUDIO_MEDIA_ENABLED,1)
_extensionsMap.put(mimeType,extensions)
updateRefreshToken(currentRefreshToken,at)
addIndies != null
GL20.glUniform4(location,v)
Thread.sleep(200)
assertLeftRightCategory(4,category2b)
sPos > 0
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,true)
FAILURE_PATTERN.matcher(error)
logger.error("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
Long.valueOf(args[1])
TestRepositoryUtil.assertEqualCollections(tags,myTags)
!isPassword
new BigInteger(difficulty)
Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
(FontMetrics)c.newInstance()
mPressFooterView != null
fuel >> 16
service.getFullName()
mFlexItem.setAlignSelf(AlignSelf.AUTO)
this.typeDescriptorCache.put(pd,td)
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx)
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY)
!list.append(pi)
private final ResponseBodyWriteResultPublisher resultPublisher=new ResponseBodyWriteResultPublisher(); 
get(PLUGIN_BUNDLE_PATH)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1,UserHandle.USER_CURRENT)
new ConnectionError(sm.getString("http2Parser.processFrameContinuation.notExpected",connectionId,Integer.toString(streamId)),Http2Error.PROTOCOL_ERROR)
"RebaseInstrumentationTarget{" + "typeDescription=" + typeDescription + ", defaultMethods="+ defaultMethods+ ", bridgeMethodResolver="+ bridgeMethodResolver+ ", methodRedefinitionResolver="+ methodRedefinitionResolver+ '}'
ProjectInspectionProfileManagerImpl.getInstance(project)
total=10000
hook.startPlay(program)
assertEquals(defsPath + " children",2,children.size())
new byte[9]
searchHit.getImageUrl()
!mediaControl.isLocalVideoAllowed()
IllegalArgumentException e=expectThrows(IllegalArgumentException.class,() -> {   try (XContentBuilder builder=XContentBuilder.builder(randomFrom(XContentType.values()).xContent())){     builder.startObject();     builder.field("status",randomFrom(RestStatus.values()));     builder.endObject();     try (XContentParser parser=createParser(builder.contentType().xContent(),builder.bytes())){       BytesRestResponse.errorFromXContent(parser);     }    }  } ); 
new SampleRoboApplication()
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
functionFactory.exp(iX)
getters.length >= 0
{FieldManifestation.TRANSIENT,Opcodes.ACC_TRANSIENT,false,false,true,true,false}
LanguageUtil.isAvailableLanguageCode(languageId)
!stopItem.isEnabled() ^ !running
bitmap == null
BLANK_LINES_AROUND_METHOD_IN_INTERFACE=0
size > Message.MAX_SIZE
_response.reset()
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
Assert.assertEquals(7,clients.size())
DEFAULT_DB_CACHE_COUNT=100
TURN_DEGREE_MIN=45
ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)
maxRecents > 0
parser.parse(GroovyElementTypes.CONSTRUCTOR_BLOCK,builder)
"Footnote".equals(type)
trade.getTotal()
app.getSettings().FAST_ROUTE_MODE.get()
supressLeadingZeroElements == false
t=b.getBroadcasterConfig().applyFilters(r,t)
minor >= TCN_RECOMMENDED_MIN
Slog.e(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.",ioe)
selenium.isVisible("link=Control Panel")
pos < 0
sublistsIndices.keySet().parallelStream()
mService.reconnect(mContext.getOpPackageName())
mWm.addAppToken(0,null,0,0,0,false,false)
new MaterializingOperator(operatorContext,sourceType)
mExpandedChild.getHeight() == mContractedChild.getHeight()
getProblems(domElement)
n.getNodeData().getLabel().toLowerCase().contains(str)
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false)
javamelodyVersion.compareTo(Parameters.JAVAMELODY_VERSION) < 0
value.isEmpty()
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-jndi-","jetty-xml-","websocket-servlet-")
mData != data
populateLibraryUi()
validationInterval=30000
logger.info("attaching ack callback to event")
assertEquals(0,result.x)
createTextAttributesKey("KOTLIN_EXTENSION_FUNCTION_CALL")
!result.asked && usage && PrivacyManager.isApplication(restriction.uid)
assertEquals(0.20462305452536414,mses[i],1e-4)
RequestContextImpl[]
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
Thread.sleep(1000)
mData.size() > 0
new IndexWriter(store,new SimpleAnalyzer(),true)
HEAT_PER_MJ=0.01F
underlying.next(num)
DurationType.getAverageYearMonthType()
log.warn("Problem in JSR223 script " + e,e)
field.getFieldInfo()
!someAsk
Thread.currentThread().interrupted()
config.getCredentialsProvider() == null
BookmarksWebUpgrade.class
myFixture.getAvailableIntentions("struts-action-method.xml")
method.getName()
type == null
"".equals(textArr[9])
GregorianGregorianCalendar.getInstance()
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
_TestUtil.randomUnicodeString(random,fixedBytesLength)
network.successors(producedNode)
Command command
waitForDecommission(CCMBridge.IP_PREFIX + '5',c.cluster)
((AstridActivity)activity).getFragmentLayout() != AstridActivity.LAYOUT_SINGLE
NonNullList.func_191196_a()
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment)
File.listRoots()[0].getParent()
mHandler.obtainMessage(MSG_FINISHED,status,0,currentPackage)
MacMessages.showYesNoDialog(message,title,YES_BUTTON,NO_BUTTON,WindowManager.getInstance().suggestParentWindow(project))
TestPackage.getFoo("")
identifier(node)
waitForJobExecutorToProcessAllJobs(3000,500)
lowestWeightAndIndex.getKey() < weight
1023 * 200
id=15863
getListView().getFirstVisiblePosition() > 0
buf.get()
mService.factoryReset(mContext.getOpPackageName())
index > -1
mContext.sendBroadcast(intent)
directContext.timers().deleteTimer(eow,TimeDomain.EVENT_TIME)
ServiceManager.addService(Context.INPUT_SERVICE,inputManager)
@Override public final DivideBy and(Condition c){   condition.addConditions(c);   return this; } 
log.error("Error creating class:'" + className + "' in JavaSampler "+ getName()+ ", check for a missing jar in your jmeter 'search_paths' and 'plugin_dependency_paths' properties")
Simple.of(value.getClass())
mService.getConnectionInfo()
p != null
IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0025F)
new RuntimeException(e)
assertFalse(user.isGeoEnabled())
m.getDeclaringClass().getName().startsWith("org.gridgain")
log.error("Cannot evaluate type() for {} due to {}",requestClass,e)
fragment.getEndOffset()
final LongAdder locAdder=new LongAdder(); 
Newer
@UriParam
return prefix2; 
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest")
conf.getInt("rabbitmq.port",15672)
pur.getFile(dirId.getId())
planDetailJson.getPlanName()
new AnnotationHolderImpl(new AnnotationSession(file))
Slog.wtf(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
statusCode > 500
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
this.clss=clss
n.isArrayPattern()
format(arg,true)
JedisConnectionException e
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getLibrariesScope()
expected == float.class
WebSettings.setTextSize(WebSettings.TextSize.NORMAL)
ParseException e
matcher.group()
getFluid().getFluid().getLocalizedName()
PyPackageUtil.hasManagement(packages)
fla != null
readSync.notify()
LocaleUtil.getDefault()
CommitId
new ContiguousIntervalUsageInArrear(usage,accountId,invoiceId,rawSubscriptionUsage,targetDate,rawUsageStartDate,internalTenantContext,invoiceConfig)
add2(ds[2],yact[0])
/**   * @param ctx Transaction context.  * @param key Key.  * @throws IgniteCheckedException If failed.  */ private void unlock(TxContext ctx,Object key) throws IgniteCheckedException {   if (ctx.unlocked(key)) {     txCtx.remove();     Transaction tx=cache.tx();     assert tx != null;     try {       tx.commit();     }   finally {       tx.close();     }     assert cache.tx() == null;   } } 
NamingException e
public String getId(){   return id; } 
note.isLocked()
private SACPEntryService _sacpEntryService; 
values.equals(values[i])
callback != null
new Font("SansSerif",Font.PLAIN,11)
buildConfigurables()
vb.getData().clear()
new TaskRunnerFactory("ActiveMQ Session Task",ThreadPriorities.INBOUND_CLIENT_SESSION,true,1000)
completion.otherwise(ex -> handler.handle(exchange,ex))
getIsTypeCheckCallable(type)
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,160}
SocialRequestsWebUpgrade.class
new AnalyzedToken(word,lowerTaggerTokens[i + 1],lowerTaggerTokens[i])
n < who3d.lastVertex
bicycleNotDefinedValues.put("footway",3d)
!isXop
MessagingService.instance().sendRR(message,target,handler)
initClient=60
h2o.onExceptionalCompletion(ex,h2o.getCompleter())
return 621; 
runGradle(1,"error","clean","flywayMigrate")
!Strings.isNotBlank(newPassword)
slot_name_value_pair(context,fchg)
this.cli.jar("secure.groovy")
getTypeDescription(exceptionType)
super(defaultAudited,persistentPropertiesSource,auditedPropertiesHolder,globalCfg,reflectionManager,propertyNamePrefix); 
DEFAULT_VERIFY_ENABLE=true
orderUsingCustomerPayment || !cartHasTemporaryCreditCard
mockRegionInfo.isMetaRegion()
req.getRequestURI()
LOG.error("Couldn't upload logs for " + containerId + ". Skipping this container.")
new WorldPoint(2636,3454,0)
o instanceof TravelArticle
chatTabbedPane.addTab(currentChatPanel.getDefaultContact().getDisplayName(),new ImageIcon(Constants.getStatusIcon(currentContactStatus)),currentChatPanel)
FileEntry fileEntry=new TestFileEntry(fileName,folderId,groupId,inputStream); 
CollectionUtils.filter(crossSaleProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((CrossSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
Pair.of(buffer,volumeBox)
new RuntimeException("Buffer already freed, free point: ",freePoint)
/**   * Indicates only the user is able to see posts made by the application.  */ OnlyMe(NativeProtocol.AUDIENCE_ME)
exp instanceof ConnectTransportException
JsonSyntaxException jse
false || DEBUG_WALLPAPER
Subqueries.gt(0L,subquery)
Middle middle2=new Middle(); 
ObjectConverter.toBoolean(scriptValue)
localTransportStopRoutes.size() > 0
public TriggerStateMachine withEarlyFirings(OnceTriggerStateMachine earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
getString(R.string.known_issue_wrong_base_directory)
new File(fileName)
result == node.isNegated()
new ReactorHttpServer()
opSetIm.addMessageListener(messageSourceService)
return areaHeight; 
logger.error("No such directory: " + dir.getAbsolutePath())
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
StringBuffer pattern=new StringBuffer(this.prefix); 
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_script_name"))
Lists.newArrayList(DEFAULT_FILE_PARSER)
cursor.getString(COLUMN_VALUE)
mock.expectedBodiesReceived("Hello World")
state.equals("available")
LOGGER.lifecycle(msg.apply())
new EnterSelectionDialog(shell,props,options,"Partioning method","Select the partitioning method")
log.debug(message,exception)
@Override public ResponseImpl headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
times(2)
TimeValue.timeValueMillis(delay)
logger.warn("condition not met, returning existing state")
new JettySolrRunner(solrHomeDirectory.getAbsolutePath(),"/solr",0)
four.setCoordinateIndex(LEAF)
CompileJSR223TestElements.class
mService.mAppOps.checkOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
id=15840
CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime)
messageId.getDataLocator()
ServiceApiUtil.validateAndResolveApplication(application,sfs)
obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
new JsonXContentParser(smileFactory.createParser(reader))
config.getInt("modulus")
entry.getName().startsWith(BOOT_INF_CLASSES)
QueryLogger.builder(cluster())
new IndexWriter(indexStore,new StandardAnalyzer(new String[]{}),true)
mFinishing && mSupportHardware
new AndroidMobileDriverImpl(projectDir,portalURL)
w1.getGradient(i,alpha)
TCN_REQUIRED_PATCH=24
/**   * Create Reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonReactiveClient createRx(){   Config config=new Config();   config.useSingleServer().setAddress("redis://127.0.0.1:6379");   return createReactive(config); } 
resources.nextElement().getPath()
new ApiEventBuilder().setSubscriptionId(subscription.getId()).setEventPlan(newPlan.getName()).setEventPlanPhase(currentTimedPhase.getPhase().getName()).setEventPriceList(newPriceList.getName()).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(now)
analyzer.analyze(parser.createStatement(sql),true)
Assert.assertEquals(permissionEntity.getOptionalFields().size(),2)
NoObjectType noResolvedType=new NoResolvedType(this); 
logger.error(e)
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
List<ConstantExpression>
greaterThan(0L)
_connector.getResponses("METHOD /f" + ooo + " HTTP/1.0\n\n")
Intent.ACTION_SEND.equals(action) || "android.intent.action.SEND_MULTIPLE".equals(action)
Log.d(TAG,"Incoming Result")
entityRef.removeComponent(ItemIsHeldComponent.class)
/**   * @author Sergey.Malenkov  */ public class GradientViewport extends JViewport {   private final Insets myInsets;   private final boolean myAlways;   public GradientViewport(  Component view,  Insets insets,  boolean forScrollBars){     myInsets=new Insets(insets.top,insets.left,insets.bottom,insets.right);     myAlways=forScrollBars;     setView(view);   }   protected Component getHeader(){     return null;   }   @Nullable protected Color getViewColor(){     Component view=getView();     return view == null ? null : view.getBackground();   }   @Override public void paint(  Graphics g){     super.paint(g);     paintGradient(g);   }   protected void paintGradient(  Graphics g){     g=g.create();     try {       Color background=getViewColor();       Component header=getHeader();       if (header != null) {         header.setBounds(0,0,getWidth(),header.getPreferredSize().height);         if (background != null) {           g.setColor(background);           g.fillRect(header.getX(),header.getY(),header.getWidth(),header.getHeight());         }       }       if (g instanceof Graphics2D && background != null && !Registry.is("ui.no.bangs.and.whistles")) {         paintGradient((Graphics2D)g,background,0,header == null ? 0 : header.getHeight());       }       if (header != null) {         header.paint(g);       }     }   finally {       g.dispose();     }   }   private void paintGradient(  Graphics2D g2d,  Color background,  int x1,  int y1){     Component view=getView();     if (background != null && view != null) {       int x2=x1, x3=getWidth() - x2, x4=x3;       int y2=y1, y3=getHeight() - y2, y4=y3;       if (myInsets.left > 0 && view.getX() < 0) {         x2+=myInsets.left;       }       if (myInsets.top > 0 && view.getY() < 0) {         y2+=myInsets.top;       }       if (myInsets.right > 0 && view.getX() > getWidth() - view.getWidth()) {         x3-=myInsets.right;       }       if (myInsets.bottom > 0 && view.getY() > getHeight() - view.getHeight()) {         y3-=myInsets.bottom;       }       Component parent=myAlways ? null : getParent();       if (parent instanceof JScrollPane) {         JScrollPane pane=(JScrollPane)parent;         JScrollBar vBar=pane.getVerticalScrollBar();         if (vBar != null && vBar.isVisible()) {           if (vBar.getX() < getX()) {             x2=x1;           }  else {             x3=x4;           }         }         JScrollBar hBar=pane.getHorizontalScrollBar();         if (hBar != null && hBar.isVisible()) {           if (hBar.getY() < getY()) {             y2=y1;           }  else {             y3=y4;           }         }       }       Color transparent=ColorUtil.toAlpha(background,0);       if (x1 != x2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x2,y1,transparent));         g2d.fillPolygon(new int[]{x1,x2,x2,x1},new int[]{y1,y2,y3,y4},4);       }       if (x3 != x4) {         g2d.setPaint(new GradientPaint(x3,y1,transparent,x4,y1,background));         g2d.fillPolygon(new int[]{x4,x3,x3,x4},new int[]{y1,y2,y3,y4},4);       }       if (y1 != y2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x1,y2,transparent));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y1,y2,y2,y1},4);       }       if (y3 != y4) {         g2d.setPaint(new GradientPaint(x1,y3,transparent,x1,y4,background));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y4,y3,y3,y4},4);       }     }   } } 
graph.getEdges()
/**   * Implements all the default JDBC operations that are used by the JDBCPersistenceAdapter. <p/> Subclassing is encouraged to override the default implementation of methods to account for differences in JDBC Driver implementations. <p/> The JDBCAdapter inserts and extracts BLOB data using the getBytes()/setBytes() operations. <p/> The databases/JDBC drivers that use this adapter are: <ul> <li></li> </ul>  * @org.apache.xbean.XBean element="oracleJDBCAdapter"  * @version $Revision: 1.2 $  */ public class OracleJDBCAdapter extends DefaultJDBCAdapter {   public void setStatements(  Statements statements){     statements.setLongDataType("NUMBER");     super.setStatements(statements);   }   protected byte[] getBinaryData(  ResultSet rs,  int index) throws SQLException {     Blob aBlob=rs.getBlob(index);     if (aBlob == null) {       return null;     }     return aBlob.getBytes(1,(int)aBlob.length());   } } 
KeyType
name.endsWith(".mxml") && !name.startsWith("TestApp.")
new RuntimeException("commandName invalid for classCommandName: " + classCommandName)
mapper.getJsonFactory()
isStarted()
copy.replace("@" + maybeUserName,"")
responsibleId=metadata.getValue(ProducteevTask.CREATOR_ID)
between(1,20)
PortalUtil.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
log.error("Unknown {} : {}",OAuthConstants.CLIENT_ID,clientId)
this.httpHandler.handle(req,resp).otherwise(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
append(myRepositoryRoot,myLastPath,true)
new GridBagConstraints(0,1,1,1,1.4,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,0),0,0)
theClass != MetadataGeneratingExpandoMetaClass.class
getParameterValues(request,param)
assertEquals(4,result.getBySeverity(Severity.NOTE).size())
!shouldUpdateDefaultPaymentMethod
seq.length() < width
/**   * Reads.   */ private final LongAdder reads=new LongAdder(); 
addFilter=false
factory.getDestination(getEndpointInfo("foo","bar","http://localhost:9001"))
index - 1 > 0
SKELETONS_VERSION=8
Type.getType(stubInternalName)
value > mean + statisticalDeviationFactor * std
JComponent invoker
attachmentNotSaved()
ldapConfig.getAttrCrlBinary()
Collections.unmodifiableCollection(customNonFilteredExtensions)
-region.getRegionHeight()
!effects.equals(hEffects.effects)
previousException.compareTo(currentException)
Ports.Binding("0.0.0.0",11023)
r.get(10)
SitesUtil.class
synchronized (this) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
InterruptedException e
List<Integer>
mGoogleApiConnectionTask.setResult(bundle)
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17")
verifyPosition(decoder,binary("232302004200000880316890202968001e02582d00000000000000050000320000018901920000001dc1e2001601081154255d0202005a0053875a00a57e5a00af80"))
rest.getEndpointUrlEmail()
!mService.mLockTaskController.checkLockedTask(tr)
increment != 1
mClocks.elapsedRealtime()
/**   * Returns last child <b>element</b> node or <code>null</code> if no such child node exist.  */ public Node getLastChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[childElementNodes.length - 1]; } 
super("NSIL",0,1); 
next.getField(0)
element.getStringValue()
4 * sum / common * (common - 1)
report(n,MISPLACED_ANNOTATION)
changeAffiliationByOwner(jids,"admin")
definition.contains(" abstract ")
new ByteArray(rowKeyBodyBuf)
Boolean.valueOf(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
delegate.getBooleanValue("java","skip_checking_missing_deps",false)
Preconditions.checkNotNull(path)
ISOChronology.getInstance()
lights.shadowMap != null
"Searching class for device type " + deviceAddress
BASE=9000
this(false,16,arrayType); 
LOG.warn("Gradle execution error",e)
Thread.sleep(100L)
writer.writeStartDocument(encoding)
for (MediaType mediaType : compatibleMediaTypes) {   if (mediaType.isConcrete()) {     return mediaType;   }  else   if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {     return MediaType.APPLICATION_OCTET_STREAM;   } } 
new PacketDecoder(jsonSupport,new NamespacesHub(new Configuration()),ackManager)
shortNameWithVariant.contains("-") && !shortNameWithVariant.endsWith("-ANY")
PApplet.split(pathDataBuffer,"|" + PConstants.WHITESPACE)
writeString(writer,String.valueOf(reader.getByte()),fieldName)
LocalFileSystem.getInstance().findFileByIoFile(projectFile)
factor > 1.0
route.setDelay(5)
/**   * Matches no characters.   */ public static final FastMatcher NONE=new FastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
glyphPositions[i] - x <= x - glyphPositions[i - 1]
GithubNotifications.showInfoDialog(myPane,"Connection successful","Success")
_logHandle.invoke(sb,request)
LOG.debug("Exception occurred during processing request: {}",e,e.getMessage())
newSelection >= 0
length < 0
paths.get(1)
Util.SDK_INT >= 24
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
mBuffer.remaining() > toRead
version == 2
new TraceBasedLocalRedeclarationChecker(trace)
address.getHostText()
id=15800
this(url,null,null,false); 
_log.error(StringBundler.concat("Column ",columnName," in Table ",tableName," already is ",newTypeDefinition))
new InternetExplorerWebDriverImpl(projectDir,portalURL)
private static final SimpleDateFormat DATE_FORMAT=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX"); 
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),ScaleType.CENTER_CROP)
Short value
isPrivateMessagingContact
coreLog.log(level,String.format(format,data),ex)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
new TaipProtocolDecoder(new TaipProtocol(),false)
!async
invalidate()
assertThat(controller.actions()).hasSize(5)
fileInfo.getPath()
singletonObject == null
address == null
ExceptionMapper.class
projectsEntryPersistence.update(projectsEntry)
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0
OrderEntry myOrderEntry; 
myVfsEventNesting == 0
DirectoryReader.open(iw,true)
FileInputStream input=new FileInputStream(file); 
"Stream " + importer
Pair<Class,Accessor>
/**   * {@inheritDoc}  */ @Override public Object clone(){   LongProperty prop=(LongProperty)super.clone();   prop.value=value;   return prop; } 
auditStrategy.addEntityAtRevisionRestriction(globalCfg,qb,rootParameters,INDEX_ENTITY_ALIAS + "." + revisionPropertyPath,INDEX_ENTITY_ALIAS + "." + verEntCfg.getRevisionEndFieldName(),false,referencedIdData,revisionPropertyPath,originalIdPropertyName,INDEX_ENTITY_ALIAS,INDEX_ENTITY_ALIAS_DEF_AUD_STR,true)
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(0)
BeanParamUtil.getInteger(user,actionRequest,"suffixId")
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
numDataPoints - 1
stop < start
Arrays.asList("/css/**","/js/**","/images/**","/**/favicon.ico")
bulkSize > NO_BULK_REQUESTS
normalizedUrl.toLowerCase(Locale.ROOT).startsWith(HTTP_PROTOCOL)
dbCollection.save(clusterEvent)
wikiPagePersistence.findByG_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
tsdb.uidTable()
new AtomicBoolean(true)
new Path(tblDesc.getLocation())
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,fromNode,direction)
public static final JPQLTemplates DEFAULT=new OpenJPATemplates(); 
d.split(" ",3)
new int[5243]
asList(4L)
new ConversationPrefsHelper(mContext,mThreadId)
new RegressionEvaluation(1)
DataBufferUtils.read(channel,this.bufferFactory,3)
Assert.assertTrue(timeOne > timeTwo)
new RAMDirectory()
parentOrActualGroup.isUser()
b == Bound.END
messenger.sendCode(res)
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
DatabaseDescriptor.getReadRpcTimeout()
System.currentTimeMillis() + 5000
title.substring(0,12)
new SimpleDateFormat(format)
new SyncedFolderItem(UNPERSISTED_ID,mediaFolder.absolutePath,getString(R.string.instant_upload_path) + "/" + mediaFolder.folderName,true,false,false,AccountUtils.getCurrentOwnCloudAccount(this).name,1,false,mediaFolder.filePaths,mediaFolder.folderName,mediaFolder.numberOfFiles)
StagedModel stagedModel
30 * 356
@Override public Object getMethod(){   return method; } 
RecentsActivity.EVENT_BUS_PRIORITY + 1
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(false)
exception.toString()
currentEditor.getScrollingModel()
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(calendarBooking,1,true,true)
CalendarBookingServiceUtil.addCalendarBooking(calendarId,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
allResources.isEmpty()
RCTCamera.getInstance().setTorchMode(_cameraType,flashMode)
completionContext.offset >= end
uuid != null
message.get("javax.xml.ws.addressing.context.inbound") != null
Thread.sleep(50)
new ConnectionError(sm.getString("http2Parser.processFrameHeaders.decodingFailed"),Http2Error.COMPRESSION_ERROR)
/**   * Choose a default message to use if the applyAsync() method throws an exception.  * @return ZuulMessage  */ ZuulMessage getDefaultOutput(I input); 
args[4]
SLEEP_TIME=500
nri.mUid != callingUid
Assert.assertNull(request.getContentType())
nativeDraw(canvas,color,extras,true)
InitialFactImpl.class
formatWebXML(fileName,content)
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn())
Integer minFractDigits=(Integer)properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
components.contains(sketchbookMenu)
minBukkitBuildVersion=697
(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey)
((FloatValue)input).getValue().floatValue()
descriptorParser.parseMetaData(parserSettings,moduleDescriptorFile)
new float[pageSize]
CACHE.findOrInsert(classLoader,new TypeCache.SimpleKey(type,additionalInterfaces),new Callable<Class<?>>(){   @Override public Class<?> call() throws Exception {     return new ByteBuddy().with(new NamingStrategy.SuffixingRandom("SpockMock")).ignore(none()).subclass(type).implement(additionalInterfaces).implement(ISpockMockObject.class).method(any()).intercept(MethodDelegation.withDefaultConfiguration().withBinders(Morph.Binder.install(ByteBuddyInvoker.class)).to(ByteBuddyInterceptorAdapter.class)).transform(Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)).implement(ByteBuddyInterceptorAdapter.InterceptorAccess.class).intercept(FieldAccessor.ofField("$spock_interceptor")).defineField("$spock_interceptor",IProxyBasedMockInterceptor.class,Visibility.PRIVATE).make().load(classLoader).getLoaded();   } } ,type)
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commit()
GuiUtils.invokeLaterIfNeeded(() -> new VcsPushDialog(myProject,preselectedRepositories,GitBranchUtil.getCurrentRepository(myProject)).show(),modality)
i.next()
daysBack=14
right < chartCalculator.mContentRect.left
addTypes.remove("subway_region")
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()))
new int[3600]
mode == MODE_PULL_DOWN_TO_REFRESH
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL
incomingMessage.getMessagePayloadByte(1)
resources[i].getFilename().endsWith(groovyFile)
player.isAuthorized("essentials.world." + user.getWorld().getName())
JBUI.scale(12)
DLFileEntryMetadataLocalServiceUtil.getFileEntryMetadataByFileVersionId(dlFileVersion.getFileVersionId())
value.longValue()
ColorResources.getColor("buttonGradientDark")
g.cachesx(null)
BuildConfig.ENABLE_DEBUG_TOOLS && !SettingsUtils.wasDebugWarningShown(this)
logger.warn("Cannot play track ({})",e.getMessage())
GridHadoopTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
this.tvShows.addAll(tvShows)
Messages.getString("TransMeta.Exception.ErrorOpeningOrValidatingTheXMLFile")
setFloatingLabel(mode)
Thread.sleep(2000)
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING)
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false)
mMountTable.resolve(getPath(next)).getPath()
assertEquals(6,data.size())
ignoreUnknownFields=false
message.indexOf(templateEnd,start)
DefaultClassDirectoryBinarySpec.class
size=1000
IndexSettingsModule.newIndexSettings(index,Settings.EMPTY,Collections.emptyList())
fieldType.equals(SupportedFieldType.BROADLEAF_ENUMERATION.toString())
RESOLUTION_PATTERN.matcher(error)
config.isAutoRead()
lastFailureException instanceof ConnectException
1 << QUOTIENT_BITS
callTimeoutMs=5000
DUMP_TIMEOUT_MS=20000
new Info("wchar_t","WCHAR").cast().valueTypes("char")
getBooleanValue(ASYNC_CLIENT + "acceptAnyCertificate",false)
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()
new IllegalArgumentException("Not implemented")
new CrypticClue("In a town where thieves steal from stalls, search for some drawers in the upstairs of a house near the bank.","Guard",new WorldPoint(2611,3324,1),"Kill any Guard located around East Ardougne for a medium key. Then search the drawers in the upstairs hallway of Jerico's house, which is the house with pigeon cages located south of the northern East Ardougne bank.")
ExoPlayerFactory.newSimpleInstance(host,trackSelector,new DefaultLoadControl(),drmSessionManager)
serverService.getIncomingInterceptors()
schedulerEventListenerWrapper.setGroupName(groupName)
SocketUtils.findAvailableTcpPort(40000)
refreshableViewWrapper.addView(newEmptyView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT)
/**   * Gets the value of the miterlimit property.  * @return possible object is {@link BigDecimal }  */ public BigDecimal getMiterlimit(){   return miterlimit; } 
1000 * 60 * 3
meta.getEncoding()
_resourceExistsMap.containsKey(key)
locator.getRegionLocation(regionName)
controller.getMedia() != null
fields[i] >= 0
Pattern.compile("^" + Pattern.quote(file.getAbsolutePath()) + "\\s*:\\s*\\d+\\s*:\\s*(?:warning:\\s*)?(.*)$")
Integer.valueOf(leftStr)
logger.warn("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
relationshipCursor.label()
types.length >= Tuple.MAX_ARITY
new IOException()
metaData.getColumnName(1)
SameValueContexualRule<ConfirmEmail,Email,String>
verificationResult.getCount() <= 1
indexFile.exists()
_vendorMySQL
(ArrayInitHandler)getParent()
i + 1
view.getCompoundDrawables()
restRequestData.params.getPostBodyOrNull()
sendCommand(CLIENT_LIST)
dataType.equalsIgnoreCase("NVARCHAR")
delegates.tabs.makeTabName(jobMeta,true)
LOG.error(msg,this)
new StringPreference("map_tile_sources",TileSourceManager.getMapnikSource().getName(),true)
_cats + _nums + cid
myLastPoint.isNull()
closeCode < 1001
shouldAutoCancel(sbn)
content.contains(_copyright)
/**   * Checkstyle frame model.   */ private final transient CheckstyleFrameModel model=new CheckstyleFrameModel(); 
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(1L)).contextStart(withUser)
instructions.setPeoplePropertyToValue("enabled_new_editor",true)
adapter.unregisterDataSetObserver(mObserver)
m_data.getFixString((int)m_length)
Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))
cfs.getSSTables().size() > 1
IOException ex
new RuleMatch(this,1,len,getMessage())
new ClearDatabaseChangeLogTableStatement()
sm.getString("contextConfig.fixDocBase")
dockedBounds.bottom + adjustment
props.get(PropsKeys.TRANSACTIONAL_CACHE_NAMES)
new LightweightThread(null,new SuspendableRunnable(){   @Override public final void run() throws SuspendExecution {     SomeInterface i=new C();     System.out.println("i = " + i);     i.doStuff();   } } )
Long.class
out.setAttributesToElements(value)
mContext.startActivity(intent)
logger.warn("Cannot handle command ({})",e.getMessage())
assertEquals(1,calendar.get(Calendar.MONTH))
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)
Assert.assertEquals(47,c.getInt(0))
context.registerSubsystem(SUBSYSTEM_NAME,1,0)
result == null ? 0l : result
setColor(backgroundColor)
new ArgPreparedStatementSetter(args)
MBTestUtil.addMessage(serviceContext.getScopeGroupId(),getSearchKeywords(),approved,serviceContext)
final View view
"found " + _className + " -- "+ _className
mock.message(0).arrives().between(7,9)
new int[95]
10 * countStillActiveThreads()
request.getServletPath()
zkWorker.getWorker()
j < size
JavaAssistUtils.getParameterType(parameterTypes)
new IndexWriter(indexStoreA,new StandardAnalyzer(),true)
app.getString(in)
case 3: 
minorVersion=17
MAKIBESF68(50)
new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR)
Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)
BTraceUtils.setInstrLevel(0)
8 + count
AttributeCache.instance().get(packageName,realTheme,styleable.Window)
_logger.get().log(Level.WARNING,"Server seen down: " + _addr)
parent == null
KaleoTaskInstanceTokenLocalServiceUtil.searchCount(RandomTestUtil.randomString(),RandomTestUtil.randomStrings(10),false,true,serviceContext)
/**   * {@inheritDoc}  */ @Override public Object clone(){   CollectionProperty prop=(CollectionProperty)super.clone();   prop.value=cloneCollection();   return prop; } 
d.getPage()
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_STRING,myLanguageLevel.isPy3K())
new EndlessRecyclerOnScrollListener(){   @Override public void onLoadMore(  final int currentPage){     footerAdapter.clear();     footerAdapter.add(new ProgressItem().withEnabled(false));     Handler handler=new Handler();     handler.postDelayed(new Runnable(){       @Override public void run(){         footerAdapter.clear();         for (int i=1; i < 16; i++) {           fastItemAdapter.add(fastItemAdapter.getAdapterItemCount(),new SampleItem().withName("Item " + i + " Page "+ currentPage));         }       }     } ,2000);   } } 
Preconditions.checkNotNull(worker)
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
lhs.getScore()
log.debug(e1.getMessage(),e1)
startGrids(NODES_CNT)
adapter.item(R.string.layer_overlay).selected(overlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_up_dark,R.drawable.ic_action_up_light).listen(listener).position(10)
new LocalComponentDependencyMetadata(componentId,selector,clientConfiguration,attributes,dependencyConstraint.getAttributes(),null,Collections.<IvyArtifactName>emptyList(),Collections.<ExcludeMetadata>emptyList(),false,false,true,true,dependencyConstraint.getReason())
List<Class<? extends ITestNGListener>>
SSTableScanner scanner
mViewAbove.setCurrentItem(2,animate)
assertEquals(2,possibleOutcomes.size())
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"))
new OneRun(50.0780,9.1570,49.5860,9.9750,91715,1299)
0xff << shift
_iterNumber=200
MinecraftServer.getServer().theWorldServer
HttpAuthenticationFactory.class
assertEquals(expected.ig,actual.ig)
FileTemplateManager.getDefaultInstance()
new DeleteResponse(shardId,delete.type(),delete.id(),randomIntBetween(0,Integer.MAX_VALUE),true)
Assert.notNull(this.key,"A Key is required so CasAuthenticationProvider can identify tokens it previously authenticated")
Log.wtf(TAG,"This will become an error",ex)
String.format("%-15s: %s",entry.getKey(),String.join(",",markedRoles))
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.SERVER_ERROR)
r != null
JetTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportSetOnNoOperatorWarning.test")
String.class
colDesc.getType()
scheduler.scheduleWithFixedDelay(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n")
connection.getContentLengthLong()
new NullPointerException("the annotation is null")
LOGGER.warn("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
protected abstract BlockBuilder getBlock(); 
KaleoServiceUpgrade.class
GridCacheDataStructuresImpl.class
DLFileEntryTypeFinderUtil.findByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
getString(R.string.agps_data_last_downloaded,"null","null")
ByteBuffer.allocateDirect(16)
layoutAlgorithm.getStackTransform(task,stackScroll,mTmpTransform,null)
thrown.equals(UserCodeException.class)
loaded.getConstructor()
this.deliveryDelay > 0
new IndexWriter(dir,new StandardAnalyzer())
FieldsWriter<V,?>
subscriptionMap.get(sub)
new ObjectMapper().reader(DiskBalancerWorkStatus.class)
EntityCacheUtil.putResult(DefinitionModelImpl.ENTITY_CACHE_ENABLED,DefinitionImpl.class,definition.getPrimaryKey(),definition,false)
PsiTreeUtil.getParentOfType(anchor,PyParameter.class)
log.info("Error registering JSP monitoring with jmx " + instance)
spellParser.isFinished()
new LightweightThread(null,new Merge3Test())
table.get(j,i)
states.length == 3
Loader.getResource(AUTOCONFIG_FILE,classLoader)
getVFile(name,true)
column.length > -1
BlockingQueue<BodyChunk>
new QueryException("Error in building dependency graph")
ArrayUtils.subarray(args,4,args.length)
simple.getFromSentDate()
SocialUserStatisticsWebUpgrade.class
projectMeasures.get(1)
new LogicalRelationship(LogicalModel,fromTable,toTable,fromColumn,toColumn)
graphWidth / 2
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title")
player.sendMessage(new TextComponentString("Invalid schematic: " + e.getMessage()))
mState != STATE_FINISHED
fireBridgeFailed(new Throwable("localBrokerInfo is null"))
transparencies != null
Arrays.asList("Die Katze ist schön.","Die eine Katze ist schön.","Eine Katze ist schön.","Beiden Filmen war kein Erfolg beschieden.","In einigen Fällen ist der vermeintliche Beschützer schwach.","Was Wasser für die Fische ist.","In den letzten Jahrzehnten ist die Zusammenarbeit der Astronomie verbessert worden.","Für Oberleitungen bei elektrischen Bahnen ist es dagegen anders.","... deren Thema die Liebe zwischen männlichen Charakteren ist.","Mehr als das in westlichen Produktionen der Fall ist.","Da das ein fast aussichtsloses Unterfangen ist.","Was sehr verbreitet bei der Synthese organischer Verbindungen ist.","In chemischen Komplexverbindungen ist das Kation wichtig.","In chemischen Komplexverbindungen ist das As5+-Kation wichtig.","Die selbstständige Behandlung psychischer Störungen ist jedoch ineffektiv.","Die selbstständige Behandlung eigener psychischer Störungen ist jedoch ineffektiv.","Im Gegensatz zu anderen akademischen Berufen ist es in der Medizin durchaus üblich ...","Im Unterschied zu anderen Branchen ist Ärzten anpreisende Werbung verboten.","Aus den verfügbaren Quellen ist es ersichtlich.","Das Mädchen mit den langen Haaren ist Judy.","Der Durchschnitt offener Mengen ist nicht notwendig offen.","Der Durchschnitt vieler offener Mengen ist nicht notwendig offen.","Der Durchschnitt unendlich vieler offener Mengen ist nicht notwendig offen.","Der Ausgangspunkt für die heute gebräuchlichen Alphabete ist ...","Nach sieben männlichen Amtsvorgängern ist Merkel ...","Für einen japanischen Hamburger ist er günstig.","Derzeitiger Bürgermeister ist seit 2008 der ehemalige Minister Müller.","Derzeitiger Bürgermeister der Stadt ist seit 2008 der ehemalige Minister Müller.","Die Eingabe mehrerer assoziativer Verknüpfungen ist beliebig.","Die inhalative Anwendung anderer Adrenalinpräparate zur Akutbehandlung asthmatischer Beschwerden ist somit außerhalb der arzneimittelrechtlichen Zulassung.","Die Kategorisierung anhand morphologischer Merkmale ist nicht objektivierbar.","Die Kategorisierung mit morphologischen Merkmalen ist nicht objektivierbar.","Ute, deren Hauptproblem ihr Mangel an Problemen ist, geht baden.","Ute, deren Hauptproblem ihr Mangel an realen Problemen ist, geht baden.","In zwei Wochen ist Weihnachten.","In nur zwei Wochen ist Weihnachten.","Mit chemischen Methoden ist es möglich, das zu erreichen.","Für die Stadtteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Für die Stadtteile und selbständigen Ortsteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Die Qualität der Straßen ist unterschiedlich.","In deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","Die Führung des Wortes in Unternehmensnamen ist nur mit Genehmigung zulässig.","Die Führung des Wortes in Unternehmensnamen und Institutionen ist nur mit Genehmigung zulässig.","Die Hintereinanderreihung mehrerer Einheitenvorsatznamen oder Einheitenvorsatzzeichen ist nicht zulässig.","Eines ihrer drei Autos ist blau und die anderen sind weiß.","Eines von ihren drei Autos ist blau und die anderen sind weiß.","Bei fünf Filmen war Robert F. Boyle für das Production Design verantwortlich.","Insbesondere das Wasserstoffatom als das einfachste aller Atome war dabei wichtig.","In den darauf folgenden Wochen war die Partei führungslos","Gegen die wegen ihrer Schönheit bewunderte Phryne ist ein Asebie-Prozess überliefert.","Dieses für Ärzte und Ärztinnen festgestellte Risikoprofil ist berufsunabhängig.","Das ist problematisch, da kDa eine Masseeinheit und keine Gewichtseinheit ist.","Nach sachlichen oder militärischen Kriterien war das nicht nötig.","Die Pyramide des Friedens und der Eintracht ist ein Bauwerk.","Ohne Architektur der Griechen ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur und Kunst der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","In denen jeweils für eine bestimmte Anzahl Elektronen Platz ist.","Mit über 1000 Handschriften ist Aristoteles ein Vielschreiber.","Mit über neun Handschriften ist Aristoteles ein Vielschreiber.","Die Klammerung assoziativer Verknüpfungen ist beliebig.","Die Klammerung mehrerer assoziativer Verknüpfungen ist beliebig.","Einen Sonderfall bildete jedoch Ägypten, dessen neue Hauptstadt Alexandria eine Gründung Alexanders und der Ort seines Grabes war.","Jeder Junge und jedes Mädchen war erfreut.","Jedes Mädchen und jeder Junge war erfreut.","Jede Frau und jeder Junge war erfreut.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und sozialen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und neurowissenschaftlichen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben und Verhalten des Menschen einschließlich der biologischen bzw. sozialen Grundlagen ist die Psychologie interdisziplinär.","Alle vier Jahre ist dem Volksfest das Landwirtschaftliche Hauptfest angeschlossen.","Aller Anfang ist schwer.","Alle Dichtung ist zudem Darstellung von Handlungen.","Allen drei Varianten ist gemeinsam, dass meistens nicht unter bürgerlichem...","Er sagte, dass es neun Uhr war.","Auch den Mädchen war es untersagt, eine Schule zu besuchen.","Das dazugehörende Modell der Zeichen-Wahrscheinlichkeiten ist unter Entropiekodierung beschrieben.","Ein über längere Zeit entladener Akku ist zerstört.","Der Fluss mit seinen Oberläufen Río Paraná und Río Uruguay ist der wichtigste Wasserweg.","In den alten Mythen und Sagen war die Eiche ein heiliger Baum.","In den alten Religionen, Mythen und Sagen war die Eiche ein heiliger Baum.","Zehn Jahre ist es her, seit ich mit achtzehn nach Tokio kam.","Bei den niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Bei den sehr niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Die älteste und bekannteste Maßnahme ist die Einrichtung von Schutzgebieten.","Die größte Dortmunder Grünanlage ist der Friedhof.","Die größte Berliner Grünanlage ist der Friedhof.","Die größte Bielefelder Grünanlage ist der Friedhof.","Die Pariser Linie ist hier mit 2,2558 mm gerechnet.","Die Frankfurter Innenstadt ist 7 km entfernt.","Die Dortmunder Konzernzentrale ist ein markantes Gebäude an der Bundesstraße 1.","Die Düsseldorfer Brückenfamilie war ursprünglich ein Sammelbegriff.","Die Düssel ist ein rund 40 Kilometer langer Fluss.","Die Berliner Mauer war während der Teilung Deutschlands die Grenze.","Für amtliche Dokumente und Formulare ist das anders.","Wie viele Kilometer ist ihre Stadt von unserer entfernt?","Über laufende Sanierungsmaßnahmen ist bislang nichts bekannt.","In den letzten zwei Monate war ich fleißig wie eine Biene.","Durch Einsatz größerer Maschinen und bessere Kapazitätsplanung ist die Zahl der Flüge gestiegen.","Die hohe Zahl dieser relativ kleinen Verwaltungseinheiten ist immer wieder Gegenstand von Diskussionen.","Teil der ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der umfangreichen dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Der zweite Teil dieses Buches ist in England angesiedelt.","Eine der am meisten verbreiteten Krankheiten ist die Diagnose","Eine der verbreitetsten Krankheiten ist hier.","Die Krankheit unserer heutigen Städte und Siedlungen ist folgendes.","Die darauffolgenden Jahre war er ...","Die letzten zwei Monate war ich fleißig wie eine Biene.","Bei sehr guten Beobachtungsbedingungen ist zu erkennen, dass ...","Die beste Rache für Undank und schlechte Manieren ist Höflichkeit.","Ein Gramm Pfeffer war früher wertvoll.","Die größte Stuttgarter Grünanlage ist der Friedhof.","Mancher will Meister sein und ist kein Lehrjunge gewesen.","Ellen war vom Schock ganz bleich.","Nun gut, die Nacht ist sehr lang, oder?","Der Morgen ist angebrochen, die lange Nacht ist vorüber.","Die stabilste und häufigste Oxidationsstufe ist dabei −1.","Man kann nicht eindeutig zuordnen, wer Täter und wer Opfer war.","Ich schätze, die Batterie ist leer.","Der größte und schönste Tempel eines Menschen ist in ihm selbst.","Begehe keine Dummheit zweimal, die Auswahl ist doch groß genug!","Seine größte und erfolgreichste Erfindung war die Säule.","Egal was du sagst, die Antwort ist Nein.","... in der Geschichte des Museums, die Sammlung ist seit 2011 zugänglich.","Deren Bestimmung und Funktion ist allerdings nicht so klar.","Sie hat eine Tochter, die Pianistin ist.","Ja, die Milch ist sehr gut.","Der als Befestigung gedachte östliche Teil der Burg ist weitgehend verfallen.","Das Kopieren und Einfügen ist sehr nützlich.","Der letzte der vier großen Flüsse ist die Kolyma.","In christlichen, islamischen und jüdischen Traditionen ist das höchste Ziel der meditativen Praxis.","Der Autor der beiden Spielbücher war Markus Heitz selbst.","Der Autor der ersten beiden Spielbücher war Markus Heitz selbst.","Das Ziel der elf neuen Vorstandmitglieder ist klar definiert.","Laut den meisten Quellen ist das Seitenverhältnis der Nationalflagge...","Seine Novelle, die eigentlich eine Glosse ist, war toll.","Für in Österreich lebende Afrikaner und Afrikanerinnen ist dies nicht üblich.","Von ursprünglich drei Almhütten ist noch eine erhalten.","Einer seiner bedeutendsten Kämpfe war gegen den späteren Weltmeister.","Aufgrund stark schwankender Absatzmärkte war die GEFA-Flug Mitte der 90er Jahre gezwungen, ...")
logMinimal(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
c.toArray()
data[1] > 3
new EnumValidator<Mode>(Mode.class,true,false)
public RelativeLayout rlName; 
Y
this.chatroom.getIdentifier().equals(chatRoomName)
value.length() > MAX_LENGTH
new AlertDialog(P.mContext)
Lists.<User>newArrayList(new DefaultUser().setLogin("john").setName("John"),new DefaultUser().setLogin("steven").setName("Steven"),new DefaultUser().setLogin("henry").setName("Henry"))
-Long.valueOf(count1).compareTo(Long.valueOf(count2))
id=15871
Log_OC.wtf(TAG,"Trying to open a NULL OCFile")
client.onChannelDisconnect()
context.getDialect() == POSTGRES
(getSource().z() + getTarget().z()) / 2f
superClasses.length == 1
getTelecomService().hasVoiceMailNumber(accountHandle)
cc.toPhoneString()
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
ContainerUtil.newHashSet(EDITOR_POPUP,EDITOR_TAB_POPUP,COMMANDER_POPUP,PROJECT_VIEW_POPUP,FAVORITES_VIEW_POPUP,SCOPE_VIEW_POPUP,TESTTREE_VIEW_POPUP,TESTSTATISTICS_VIEW_POPUP,TYPE_HIERARCHY_VIEW_POPUP,METHOD_HIERARCHY_VIEW_POPUP,CALL_HIERARCHY_VIEW_POPUP,J2EE_ATTRIBUTES_VIEW_POPUP,J2EE_VIEW_POPUP,USAGE_VIEW_POPUP,STRUCTURE_VIEW_POPUP,TODO_VIEW_POPUP,COMPILER_MESSAGES_POPUP,ANT_MESSAGES_POPUP,ANT_EXPLORER_POPUP,UPDATE_POPUP,FILEVIEW_POPUP,CHECKOUT_POPUP,LVCS_DIRECTORY_HISTORY_POPUP,GUI_DESIGNER_EDITOR_POPUP,GUI_DESIGNER_COMPONENT_TREE_POPUP,GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP,CREATE_EJB_POPUP,CHANGES_VIEW_POPUP,REMOTE_HOST_VIEW_POPUP,REMOTE_HOST_DIALOG_POPUP,TFS_TREE_POPUP,ACTION_PLACE_VCS_QUICK_LIST_POPUP_ACTION,PHING_EXPLORER_POPUP,NAVIGATION_BAR_POPUP,JS_BUILD_TOOL_POPUP,DIFF_TOOLBAR,V8_CPU_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP)
final String url
Thread.sleep(100)
MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS=1000
createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE)
Collect.getInstance().getString(R.string.file_fetch_failed,response.getStatusLine().getReasonPhrase(),statusCode)
configurable.reset()
servletPath.equals("/")
Results.unauthorized()
this.ctx.getApplicationContext()
testConsumerConfig()
argumentsLength == 2
@Override public final DivideBy or(String sql){   return or(condition(sql)); } 
Integer.valueOf(row.getValue(partitionCol).toString())
hitTest(child,localPoint.x,localPoint.y,viewSelector)
TestUtils.randomByte() + 127
ColorResources.getColor("selectionForeground")
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),12)
docker.createContainerCmd("busybox")
invocation.addAttachmentsIfAbsent(context)
AllGroupsCollector c1=new AllGroupsCollector(groupField); 
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults)
new StringBundler(5)
level <= RF_STATUS_FULL_SIGNAL
grid(i).events().localListen(new IgnitePredicate<Event>(){   @Override public boolean apply(  Event evt){     if (nodeId.equals(((DiscoveryEvent)evt).eventNode().id()))     latch.countDown();     return true;   } } ,EVT_NODE_LEFT)
attrs.size() <= 4096
final Command cmd
logger.error("Action Invalid Value Format Exception {}",ex.getMessage())
this.identityProvider.getId()
Objects.hash(expressions)
symbolUsageValidator.validateCall(iteratorFunction,context.trace,loopRangeExpression)
enabled=false
key.isInstance(key)
Blocks.dirt.func_149739_a()
assertCorrectionsByOrder(rule,"Rytmus","Rhythmus")
NUM_DOCS_PER_TYPE=400
currentPath.isEmpty()
assertEquals(496,this.servletResponse.getContentLength())
logger.warn("Cannot play radio ({})",e.getMessage())
retries=2
inUseByte != Record.IN_USE.byteValue()
Http11AprProtocol.class
two.setCoordinateIndex(0)
new UnsupportedOperationException()
AppLog.v(T.NOTIFS,"GCM Error: " + errorId)
new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)
new CacheException(e)
new GoogleCodeRemoval(compiler)
equalTo(24)
String key=(String)next.getKey(); 
declaringClass.isInterface() && directMethodCallCandidate.isStatic()
Iterables.find(getPlayers(),new Predicate<ProxiedPlayer>(){   @Override public boolean apply(  ProxiedPlayer input){     return (input == null) ? false : input.getName().toLowerCase().contains(partialName.toLowerCase());   } } )
error(log,e.getMessage())
logger.warn("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
PathUtils.getTestDir(getClass()).getAbsolutePath()
JavaConversions.asMap(logManager.logsByTopicPartition())
diffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT),filePath,revisions[0],revisions[1])
constructor.newInstance(conf,keyPrefix,options,writer,fs)
params.keySet()
@Specialization protected Object escapingString(String escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return escapingValue; } 
serviceContext.getModifiedDate()
folder.isInTrashImplicitly()
public Object valueOf(TreeNodeOnVcsRevision o){   return myBaseColumn.valueOf(o.getRevision()); } 
specification == null
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
argNr >= 0
editor.apply()
oconf.getJSONObject("lapse").getInt("mult")
public Output parseNotation(Object notation){   assert canParse(notation) : "This parser only parses instances of " + typeToken.getName();   return parseType(typeToken.cast(notation)); } 
newWidth + BORDER_THICKNESS
!remoteInterpreterProcess.isRunning()
Object event
currentDetails.getStorage().get(expectedKeys)
templatesToAddressList(engine,replyTo,model)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION)
assertEquals(4,visitor.getTables().size())
getExternalName(annotation.getOwner(),false)
getXmppConnection().getAttempt() >= 2
new String(responseData)
HDR_TYPE_ERR=0x03
getAsShortText(fieldValue)
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public void onContextMenuClick(  int itemId,  int pos,  boolean isChecked,  DialogInterface dialog){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }   } } ).position(8)
UserHandle.getUserHandleForUid(mDeviceProvisionedController.getCurrentUser())
serviceFacade.updateProcessGroupContents(rev,groupId,versionControlInfoDto,flowSnapshot,getIdGenerationSeed().orElse(null),false,true,entity.getUpdateDescendantVersionedFlows())
savedNetwork.setParameters(newParams)
group.setVariables(variables)
SCHEMA(35,true)
from("direct:tap").delay(100)
regularColumns.values()
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ name+ " />"
PsiClass sourceClass=PsiTreeUtil.getParentOfType(sourcePsi,PsiClass.class); 
signedResult.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
logger.warn("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
length > 18
mActionView.getHeight()
DEFAULT_PORT=8080
new SystemVibrator()
root != null
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message")
TreeMap<String,Object>
HttpClient.create().compress()
h.addParameters("--name-status",parser.getPretty(),"--encoding=UTF-8")
First=word.substring(0,3)
ByteBuffer.allocateDirect(4)
functionName == null
cache.remove(this)
delete.prepareRowMutations(keyspace,clientState)
ArrayList<Destination>
JiveGlobals.getBooleanProperty("xmpp.socket.directBuffer",false)
task == null
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest::test_passes")
requestTraceFile + ".txt"
ImmutableMap.<String,String>of()
new IllegalArgumentException()
bar.setResultWaitTime(3000)
!regex.equals(lastRegex)
methodNode != null
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
assertEquals(5,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())
new RuntimeException("builtin library initialization failed: " + e,e)
future1.get(1,TimeUnit.SECONDS)
contentHolder.getChildren().add(content)
serviceTester.systemReady()
scrollLoadingMoreToDefault()
name.equals(yamlKeyValue.getKeyText())
firstItemVisible && lastItemVisible
AbstractBlockWrapper parent
SegmentedFile.getBuilder()
create(config)
error.expectedMessageCount(1)
!inventory.getStackInSlot(i).isItemEqual(stack)
resultEndpoint.assertIsSatisfied(5000)
URLUtils.currentUrlEqual(uriBuilder.build().toASCIIString())
inLatch.endLatch.await(400,TimeUnit.MILLISECONDS)
Boolean.valueOf(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
private CSVFilter filter; 
mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000
c.deactivate()
args.argsLength() > 1 ? args.getDouble(1) : 2
@TruffleBoundary private static Boolean parseBooleanOrNull(String s){   if ("true".equals(s)) {     return Boolean.TRUE;   }  else   if ("false".equals(s)) {     return Boolean.FALSE;   }  else {     return null;   } } 
minorVersion=1
getBinaryTupledSet()
queueView.get().get(index.longValue())
chatButton.setRolloverImage(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
MAX_URL_LENGTH=4000
type.equals("document_library")
Integer cfId=Schema.instance.getId(ksName,cfName); 
case 8: 
UfsUtils.loadUfs(mFileSystem,new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
hashInd != -1
amp*=0.1
ColorResources.getColor("primaryControlDarkShadow")
toPreProcess.getFeatures().muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
((WithNode)node).getContext()
schedule(new CheckQueue(),500)
provider.setClient(c)
FileTemplateManager.getInstance()
mWPAndroidGlueCode.setContent(title.toString(),null)
PApplet.radians(angle)
fireMessageReceived(ctx,completeMessage)
myDispatcher.addListener(l)
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection)
params.height != LayoutParams.WRAP_CONTENT
methodRedefinitionResolver.resolve(methodDescription)
i + skip < length
sr.makeNextStartId()
isClassNameIdSpecified(classNameId,getRequiredClassNameIds())
assertEquals(1d / (totalTime / 1000d),calculator.getRate(),0d)
ServiceAuthorizationManager.refresh(conf,new HBasePolicyProvider())
values == null
SIDE_MARGIN_DIP=5
AnalyticsDataFactory.getAnalyticsData()
!shuttingDown
BUKKIT_VERSION=1818
new Attribute("implementationPackage",targetProject)
FileUtil.loadFile(new File(name + ".txt"))
desc.getMessagingVersion()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)
/**   * GridGain handshake.   */ GRIDGAIN_HANDSHAKE
assertEquals(new String(serialized[0],US_ASCII),"test-bin")
parameters.getPositions().get(0)
LOGGER.debug("Could not execute markEntries",ex)
assertTrue(result.indexOf("\u00f6\u00e4\u00fc\u00df") != -1)
new Dependency("org.grails","grails-project-api",grailsVersion,true)
SC_FILE_SIZE_EXCEPTION=1003
fromElement.getPropertyType(propertyName,propertyPath)
new ConcurrentHashMap<String,InjectionMetadata>(64)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
ZooKeeperServer.class
PoolResources.fixed("tcp-client-pool")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
logName()
GridCacheProjection<UUID,String>
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 90
backgroundColor=0xffC0C0C0
URI != null
CoerceFailedException.simple(pathRelativeToProjectRoot,object,getOutputClass())
new String(actualKeyBytes)
typeTreeStruct.embedded()
tableHasColumn("Akismet_AkismetData","mbMessageId")
XMLHandler.getTagValue(jobnode,"info","shared_objects_file")
min.x < max.x
ProtobufUtil.createSnapshotDesc(reqSnapshot)
result != null
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0
stub != null
FluentIterable.of(method.getAnnotations())
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public String getSubscriptionCarrierName(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
random().nextInt(10000)
new SolrException(2,"Operation requires schema to have a unique key field")
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
internalViewSchema instanceof ManagedImplStructSchema
Assert.assertEquals(2,clusterEventListeners.size())
insertImport(node,target,asName)
jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)
DefaultExtendedAnalysisWidget.class
getCategoryMethodGetter(sender,getterName,false)
Arrays.asList("SUM","MAX","MIN","AVG","TOPHITS","COUNT")
javaWriter.emitSingleLineCOmment("foo")
String.format("Could not convert URL %s to URI",resourceUrl,e)
new RuntimeException("namespace invalid for classCommandName: " + classCommandName)
lineageInfo.getParents()
directory.mkdir()
ChaosMonkey.class
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("js/js.translator/testData/box/crossModuleRef"),Pattern.compile("^([^_](.+))\\.kt$"),true)
this.cusolverDnDsyevd_bufferSize.invoke(solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
(rsv & RSV_BITMASK) > 0
getRandom()
toolWindow.getType() != ToolWindowType.SLIDING
!failureDesc.contains("14807") && !failureDesc.contains("14883")
hyphenationFile.toURL()
d.getClass()
Simple.of(String.class)
n + 1
params.getConsole()
Boolean.valueOf(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
new IllegalArgumentException(msg)
gl.marginWidth=0
id=15838
ACTIVATION_FAILED
labelProbsForToken.get(label) < entityLabelProbVals.get(label)
bar.getValue() > 0
E extends Model
vespaPortBase + 91
cell.localCopy(cfs,HeapAllocator.instance)
createTextAttributesKey(DART_DYNAMIC_LOCAL_VARIABLE_REFERENCE,PARAMETER_REFERENCE)
this.mPointerID != TouchEvent.INVALID_POINTER_ID
StringBuilder sb=new StringBuilder("Connection "); 
new LruCache<>(15)
fragment == null
1 / 5
COMPLETE
CollectionUtils.isEmpty(blocks)
doNothing().when(safeOutputStreamConsumer).stdOutput(anyString())
gatherDisableActionsLocked(userId)
FUNCTOR_PROCESS_DELAY=2
TypeUtils.isAnnotationMirrorOfType(mirror,Constants.ENTITY)
String.format("%s/view/instances;_since=%d;state.name=running;tags.key=owner;" + "_expand:(instanceId,tags:(key,value))",eddaClient.getBaseUrl(region),startTime)
OverridingMethodsSearch.search(method,method.getUseScope(),true)
stateHolder.reloadVariables()
ArrayList<UIDMeta>
WebSettings.setTextSize(WebSettings.TextSize.SMALLER)
usersResource == null
MigrationManager.instance.notifyUpdateUserType(ut)
new PropertyDescriptor.Builder().name("Return Type").description("Indicates the desired return type of the JSON Path expressions.  Selecting 'auto-detect' will set the return type to 'json' for a Destination of 'flowfile-content', and 'string' for a Destination of 'flowfile-attribute'.").required(true).allowableValues(RETURN_TYPE_AUTO,RETURN_TYPE_AUTO,RETURN_TYPE_STRING)
new TreeMap()
FLING_DIST_THRESHOLD=70
new TreeModelBuilder.GenericNodeData(filePath,fileStatus,myIndex)
preambleLength=10
longitude > MIN_LONGITUDE
SVID_SHIFT_WIDTH=7
dataSource.setInitExceptionThrow(true)
SingleServerInventoryProvider.class
win.isAnimatingLw() && appWindow && showWhenLocked
new Location(target2.getWorld(),x,y,z)
AstyanaxOrderedKeyColumnValueStore store=new AstyanaxOrderedKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy); 
assertEquals(17,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
FileSystems.getDefault().canResolveSymbolicLink()
Long.parseLong(jvmName.split("@")[0])
private CharSequence mViewIdResourceName; 
(String)config.get("location")
if (false) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,true)
mapper.seAttributePrefix("ROLE_")
configureSwipeToRefresh(savedInstanceState,view)
MSG_LOGIN_RESPONSE=0x5000
Math.round(value * 100) / 100
public UrlMapping getReverseMapping(final String controller,final String action,Map params){   if (params == null)   params=Collections.EMPTY_MAP;   UrlMapping mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,action,params.keySet()));   if (mapping == null) {     mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,null,DEFAULT_ACTION_PARAMS));     if (mapping == null) {       return (UrlMapping)mappingsLookup.get(new UrlMappingKey(null,null,DEFAULT_CONTROLLER_PARAMS));     }   }   return mapping; } 
mDropDownAlwaysVisible
new int[15048]
proxyClassName.equalsIgnoreCase(otherClassName)
docData.charAt(0) == 65279
verbosity.shouldPrintCommand()
groupIndex.size()
SubtleUtil.validateNotExist(inFile)
ConfigureUtil.configureSelf(configureClosure,delegate,delegate)
new WorldPoint(3498,3507,1)
optimizationLevelAsString.trim()
commit.getAuthorTime()
getResultHandler(result).handleResult(exchange,result).otherwise(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
info.gpx != null
this.findPreference(PREFERENCE_CATEGORY_ADVANCED).setIcon(appearance)
keys.isEmpty()
sessionChanged(session)
logger.error("connectionClosedOnError " + exception.getLocalizedMessage())
buffer.readableBytes() < 4
ThemeUtils.getDefaultDisplayNameForRootFolder()
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),completedTasks,false)
ConstantNode.forLong(config.logOfHRGrainBytes)
Futures.successfulAsList(resultList)
-3
Float.valueOf(encoding.substring(equalsPos + 1))
resourceCollector.addIntResourceIfNotPresent(RType.ATTR,attrName)
case 8: 
accountsList.get(i)
logger_.debug("Skipping delivery of hint for deleted columnfamily",e)
JspUtil.makeXmlJavaIdentifier(poolName)
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryEmpty.Label"))
{2,3,3,4,5}
error.isNetworkError()
List<MutableLongValue>
y < bb.maxY
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(36)
patientState.getState().getId()
heightIn != height
clazz.getMethod(methodName,args)
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope)
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS
changeInfo.getNewParametersSignature((JetCallableDefinitionUsage<PsiElement>)this)
new PseudoDescription().load(getClass().getClassLoader())
uri.getQuery()
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
fireCallPeerChangeEvent(CallPeerChangeEvent.CALL_PEER_STATE_CHANGE,oldState,newState)
HIVE_TABLE_OFFLINE(2,EXTERNAL)
WSSec.getInboundWSSec(secProps)
"LEVEL".equalsIgnoreCase(ident)
_constructor.newInstance(fileEntry.getFileEntryId(),fileEntry.getFileEntryId(),_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static FactoryOperations getNewFactory(SQLDialect dialect){   return getNewFactory(DEFAULT_INSTANCES[dialect.ordinal()]); } 
{8,9}
connection.setFollowRedirects(httpRequest.getFollowRedirects())
DirectoryWebUpgrade.class
LOG.warn("Error applying formatter '{}'. Skipping.",ex)
private final MediaDriverReceiver receiver; 
super.onResume()
tree != null
_cloneFormat(DATE_FORMAT_ISO8601_Z,formatStr,_timezone,_locale,_lenient)
customReportContent != null
assertEquals(1111L,n2.expireLinkNodeRecid)
mDeviceProvisionedController.isDeviceProvisioned()
test("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval
logger.debug("Received MyQ  JSON: {}",dataString)
this.policy.setMaxTextMessageSize(anno.maxBinaryMessageSize())
DecimalType.class
offset * 12
revision.isEmpty()
alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
JSInjectionController.getInjectionText(value)
arr[0]
serialVersionUID=1897822466
assertEquals(4,steps.size())
!mProcessesReady
logIndex <= lastToApply
Build.VERSION.SDK_INT < 19
depthErrorXYZ("modelZ")
@Override public ModelMetricsBinomialV3 fillFromImpl(ModelMetricsBinomial modelMetrics){   super.fillFromImpl(modelMetrics);   r2=modelMetrics.r2();   logloss=modelMetrics._logloss;   AUC2 auc=modelMetrics._auc;   if (null != auc) {     AUC=auc._auc;     Gini=auc._gini;     String[] thresholds=new String[auc._nBins];     for (int i=0; i < auc._nBins; i++)     thresholds[i]=Double.toString(auc._ths[i]);     AUC2.ThresholdCriterion crits[]=AUC2.ThresholdCriterion.VALUES;     String[] colHeaders=new String[crits.length + 2];     String[] colHeadersMax=new String[7];     String[] types=new String[crits.length + 2];     String[] formats=new String[crits.length + 2];     colHeaders[0]="Threshold";     types[0]="double";     formats[0]="%f";     int i;     for (i=0; i < crits.length; i++) {       if (colHeadersMax.length > i)       colHeadersMax[i]="max " + crits[i].toString();       colHeaders[i + 1]=crits[i].toString();       types[i + 1]=crits[i]._isInt ? "long" : "double";       formats[i + 1]=crits[i]._isInt ? "%d" : "%f";     }     colHeaders[i + 1]="idx";     types[i + 1]="int";     formats[i + 1]="%d";     TwoDimTable thresholdsByMetrics=new TwoDimTable("Metrics for Thresholds","Binomial metrics as a function of classification thresholds",new String[auc._nBins],colHeaders,types,formats,null);     for (i=0; i < auc._nBins; i++) {       int j=0;       thresholdsByMetrics.set(i,j,thresholds[i]);       for (j=0; j < crits.length; j++) {         double d=crits[j].exec(auc,i);         thresholdsByMetrics.set(i,1 + j,crits[j]._isInt ? (Object)((long)d) : d);       }       thresholdsByMetrics.set(i,1 + j,i);     }     this.thresholds_and_metric_scores=new TwoDimTableV3().fillFromImpl(thresholdsByMetrics);     TwoDimTable maxMetrics=new TwoDimTable("Maximum Metrics","Maximum metrics at their respective thresholds",colHeadersMax,new String[]{"Threshold","Value","idx"},new String[]{"double","double","long"},new String[]{"%f","%f","%d"},"Metric");     for (i=0; i < colHeadersMax.length; i++) {       int idx=crits[i].max_criterion_idx(auc);       maxMetrics.set(i,0,idx == -1 ? Double.NaN : auc._ths[idx]);       maxMetrics.set(i,1,idx == -1 ? Double.NaN : crits[i].exec(auc,idx));       maxMetrics.set(i,2,idx);     }     max_criteria_and_metric_scores=new TwoDimTableV3().fillFromImpl(maxMetrics);   }   return this; } 
invocation.logger.warning("Asking if operation execution has been started: " + invocation)
300 * KB
Predicates.and(Predicates.containsPattern(".*/src/.+\\.py[c]{0,1}$"),Predicates.not(Predicates.containsPattern("third_party/")))
Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))
mPreferences.getBoolean(CLASSIC_NOTIFICATION,true)
@Override public final DivideBy or(String sql,Object... bindings){   return or(condition(sql,bindings)); } 
size=500
Localization.menuTitle("Open SPIRES entry")
root.toURL()
loader.loadClass(name)
GL20.glUniform4(location,v)
4 * (float)Math.sqrt(radius)
LOG.error("Skipping invalid VCS root: " + root)
TestLoggerSink.class
history2.getWorkflowInstanceId()
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrPause pauseState(){   return pause; } 
equalTo("Could not load compiled classes for script-display-name from cache.")
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,port)
Looper.getMainLooper() != Looper.myLooper()
Fabric.with(this,crashlyticsKit,new Crashlytics())
titleListMergeable != null
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47))
ArrayList<IncomingServerSession>
dynamicType.getLoaded().getConstructor()
lastPosition != null
name + ".DEBUG"
new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR)
synchronized (this) {   mgr=managersCache.get(clz);   if (mgr != null)   return (T)mgr;   try {     Method method=clz.getDeclaredMethod("newInstance",KylinConfig.class);     method.setAccessible(true);     mgr=method.invoke(null,this);   }  catch (  Exception e) {     throw new RuntimeException(e);   }   managersCache.put(clz,mgr); } 
ServiceContextThreadLocal.popServiceContext()
new PackagesNotificationPanel(project)
from("direct:a").delay(500)
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
info.getGroupIdLevel1ForSubscriber(subId)
executableType.getType().getBoxedType()
GceInstancesServiceMock.class
Object strongReference
new IllegalArgumentException()
CompletionServiceImpl.isPhase(CompletionPhase.EmptyAutoPopup.class)
PsiTreeUtil.getParentOfType(element,PyClass.class)
GenericSendAndRecieveGateway.class
isEDT
hashList.get(0)
e.printStackTrace()
options.checkProvides.isOn()
-1544627568
1000 * 1000
ch == '&'
ActorSDK.sharedActor().style.getDefaultBackgrouds()[1]
new FileNotFoundException()
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.service",upgradeProcesses,1,0,false)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
logger.debug("Propose response {} from {}",msg.payload,msg.from)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_REPLACE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Bytes.toBytesBinary(tableNameOrRegionName)
(System.currentTimeMillis() - last.getTime()) <= maximumAge
private void _compareJarFiles(final Path expected,final Path actual) throws Exception {   Files.walkFileTree(expected,new SimpleFileVisitor<Path>(){     @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {       Path fileName=dir.getFileName();       if (_ignoredDirectories.contains(fileName.toString())) {         return FileVisitResult.SKIP_SUBTREE;       }       return FileVisitResult.CONTINUE;     }     @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {       Path relativize=expected.relativize(file);       Path fileInActual=actual.resolve(relativize);       Assert.assertTrue(Files.exists(fileInActual));       return FileVisitResult.CONTINUE;     }   } ); } 
rowsRet <= 0
LOG.fatal("Could not append. Requesting close of wal",e)
pool != null & pool.getDataSource().getClass().isAssignableFrom(iface)
Long.valueOf(param.getValue())
new DifDiffViewer(context,(ContentDiffRequest)request)
group == null
serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
SocialNetworkingServiceUpgrade.class
srcDir != sourceRoot
value > 0
moduleComponentSelector.getName()
old + 8
new SAXException(e.getMessage())
AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC,0)
new Duration(10,TimeUnit.SECONDS)
InheritableThreadLocal<HttpServletResponse>
timedOut.await(500,TimeUnit.MILLISECONDS)
layer.type() == Layer.Type.CONVOLUTIONAL
minBukkitBuildVersion=711
new UnsupportedOperationException()
x != -1
System.arraycopy(points,0,temp,0,lineCount)
isTouched(0.75f,1)
viewDefinition.getViewName()
enabledDisabled(useStatistics)
_buildTemplateWithGradle("spring-mvc-portlet","spring-mvc-dependency-management","--dependency-management-enabled","true")
assertEquals(7.2,((Object[])result[0][0])[1])
cache.localPeek(key,ONHEAP)
new IndexWriter(dirName,new WhitespaceAnalyzer(),true)
Ints.min(startedSplits.get(),completedSplits.get(),splits)
flushAfterDuration(entry.getKey(),entry.getValue())
sigmoid(ndArray,true)
Throwable t
comment.lastIndexOf(')')
p.getSize()
TypeUtils.getKoltinConstructor(constructors)
mImm.hideStatusIcon(mToken)
obj.getAcceptableTokens()
logger.debug("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
target.isVector()
casProperties.getMonitor().getEndpoints().getSingleSignOnReport()
onRotationLockChanged()
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17")
Call<L>
mResources.getDrawable(id)
println_native(logId,ASSERT,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
input.length() >= 2
UnsupportedSchemeException e
e.getTag(OSMTagKey.TUNNEL) != null
task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
catalog.entries()
mLayerType == LAYER_TYPE_SOFTWARE
new ShardId(index,0)
node.isRoot()
OnSubscribeGroupBy<Long,T>
MBCategory.class
queryProcessor.curJobRunning.get() == 0
new byte[13]
invoiceBalance.divide(BigDecimal.TEN)
this.addButton
public static final JPQLTemplates DEFAULT=new HQLTemplates(); 
builder().experimentalAnalysisTestingImprovements(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(false)
testMissingJarReferences(_netBeansJars,_NETBEANS_XML_FILE_NAME)
String classpath=getClasspath().toString(); 
32 * 1024 * 1024
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
exchange.getOut()
connection.isClosed()
templatesToAddressList(engine,replyTo,model)
NUM_DAYS_AGO=5
invoiceItem.getAmount().divide(BigDecimal.TEN)
message.length <= MAC_LENGTH
partOfStatement.getLibraryId().toString()
public SELF setStandardInput(InputStream inputStream){   operationParamsBuilder.setStdin(inputStream);   return getThis(); } 
log.info(sm.getString("contextConfig.role.runas",runAs))
n.intValue()
Assert.assertEquals(118L,ownerCapsuleNew.getFreeNetUsage())
? super U
new FileInputStream(engineSocket.getFileDescriptor())
Allocation.createFromBitmap(mRS,b,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
valueMono.otherwiseIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
Thread.sleep(200)
sampler.getFilename()
e.getKind().isClass()
Slog.wtf(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
it.remove()
independentReserveOrderBook.getBuyOrders()
newroot.length == 1
new IntRangeValidator(1)
final JarBinarySpec binary
rawType.getTypeName()
text.equals(((TextButton)button).getText())
(U)result
handler.doProcess()
result.set(0,new InetSocketAddress("idontexist",80))
JCublasBackend.class
group.isStagingGroup()
bb.get() == EQUALS_BYTE
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle)
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)
"None".equals(tree.getClientProperty("JTree.lineStyle"))
GridHadoopTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
comparePartitionOwnership(true,localMember,partition)
new GridServicesImpl(ctx,this,subjId)
MutableLongValue reduceResult
new RowMutation(KSNAME,ByteBufferUtil.bytes(key))
lsize > rsize
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
engine.getHeat()
attributes.setProperty(ATTRIBUTE_MAXIMUM_POOL_SIZE,Integer.toString(initialPoolSize))
LOG.error("Unable to parse HTTP response content",e)
DecorView.isNavBarToLeftEdge(bottomInset,rightInset)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
!task.isFreeformTask()
sliceSize * 20480
assertEquals(1,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
table != null
mJSONArrayRequestListener=null
foregroundBetweenScanPeriod=p
WeDeployDataPlugin.class
res.setError(INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,channel,channel,t)
pluginPanel.init()
delayer != null
text.indexOf('@') == -1
final ImageButton buttonNavigate=(ImageButton)view.findViewById(R.id.context_menu_route_button); 
logger.warn("Playlist '{}' not found",playlist)
new JButton()
backups.length > 5
(Integer)src
repository.loadForRequest(urlEh2,null)
i < 10
private final CuratorFramework client; 
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,0,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
activate()
delta=100
page.getLocaleCode()
settings.ROUTER_SERVICE.get()
cnt=1
Helpers.exec(j4p,"setProfileRepositories(java.lang.String, java.lang.String, java.util.List)",id,strings)
buf.openElement("conference")
previousAnnotation.compareTo(annotation)
!detector.isInProgress()
TopLevelBuildData topLevelBuildData=getBuildData(); 
assertEquals("Incorrect number of fields",4,f.length)
AbstractProjectViewPSIPane.class
cache.clear(0)
Duration.between((Temporal)left,(Temporal)right)
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)))
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElements),false);   } } )
parentGroupId == 0
new Button("cancel",new StringResourceModel("cancel",(Component)null,null)){   public void onSubmit(){     doReturn();   } } 
participantAddresses.get(1)
LOG.info("Failed to register State Store bean {}",e.getMessage())
Exception e
@NotNull RemoteSdkCredentialsHolder credentials
server_.copyFile(selectedFiles.get(0),targetFile,false,new VoidServerRequestCallback(progress){   @Override protected void onSuccess(){     view_.selectNone();   } } )
ArrayIndexOutOfBoundsException e
DELAY=6000000
StepVerifier.create(Flux.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).expectError(IllegalStateException.class)
Color.fromRGB(0x253192)
fullCalleeURI + ": jingle supported "
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
index >= widgets.length
Exception ignored
logger.info("Session created")
makeName(verb,dimensionPrefix,parentName,binaryType,target)
CORRELATION=10
inverterRealtimeResponse == null
_paginator.flatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
new ExportCSVTask(testContext,habitList,selected,archiveFilename -> {   assertThat(archiveFilename,is(not(nullValue())));   File f=new File(archiveFilename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
assertTrue(mDisabled.hasFocus())
private String requestCacheKey=UUID.randomUUID().toString(); 
info.getNaiForSubscriber(subId[0])
!root.isDownloads()
StringBuffer detailBuffer=new StringBuffer(); 
(PropertyName)this
GraphicsUtil.setupAAPainting(g)
fieldMeta2.getString(field)
a7 != a.a7
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
provider.findValueSerializer(delegateType)
(JobFound)response
Optional<CacheReadEntry>
List<WebPageDetail>
endTime - EVENT_TIME_TOLERANCE
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws IOException {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
logger.info("license [{}] - valid",license.uid())
MediaUploadReadyProcessor processor=new MediaUploadReadyProcessor(); 
!Version.isBlackberry(this)
new DhcpAckPacket(transactionId,(short)0,broadcast,serverIpAddr,relayIp,INADDR_ANY,yourIp,mac)
controller.system().equals(SystemName.cd) && deploymentId.zoneId().region().value().equals("aws-us-east-1a")
LOG.error("writeToDisk == true but configFilename == null")
private final StringBuffer sb=new StringBuffer(); 
myVMParameters.getComponent().setDialodCaption(myVMParameters.getRawText())
listJobInstances(cube,project,startTime,endTime)
new MockNode(settings.build(),false,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
getFirstPeriodIndexInSource(sourceIndex)
app.configuration().getString("timezone")
childLeftTuple.reAddRight()
jvmOptions.setAllJvmArgs(DEFAULT_JVM_ARGS)
(Long)24503500L
mSearchFab.setScaleX(0.0f)
file == null
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.set()
StorageEngineFactory.getStorageEngine(cube,true)
new NullPointerException("permission cannot be null or empty")
CHECK_PKGNAME=false
arr.size(oi) != 1
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).finallyDo(() -> _isFetching.onNext(false))
jarName.endsWith(".jar")
odi.release()
config.setProxyList(modelconf.get(CommonAttributes.PROXY_URL).asString())
Simple.of(SkylarkList.class)
SiteNavigationMenuWebUpgrade.class
cnt < 0
Character.isHighSurrogate(tmpBuffer[len - 1])
!mbMessage.isDiscussion()
FileContentUtilCore.reparseFiles(files)
i < myParametersNotNull.length
new Paint()
private final Integer id; 
test("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
context.var("double")
instructionForm.getId()
? super View
mWM.isKeyguardSecure()
restrictToField=p.get("termSourceField")
pY + pWidth
EnterpriseMapPublisherCreateCodec.decodeResponse(response).list
analyzedSentence.getTokens()
Boolean.getBoolean(viewContext.getProperties().get(PROPERTY_SLIDER_SECURITY_ENABLED))
!myCards.add(card)
logger.error("failed to create index [{}]",indexMetaData.index(),e)
@Priority(5)
(Integer)o * 1000l
new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider)
strategy.getJavaIdentifier(parameter)
adminClient.describeConsumerGroup(groupId)
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),false)
IconGenerator.generateCharacterIcon(context,engineName.charAt(0))
getClass().getResource("porterTestData.zip").getFile()
new DBException(ex,dataSource)
HttpStatus.FORBIDDEN.toString()
PsiTypesUtil.isDenotableType(substitutor.substitute(typeParameter),typeParameter)
mLastEvent.getStartTime()
SimpleTextAttributes.merge(SimpleTextAttributes.fromTextAttributes(forcedAttributes),simpleTextAttributes)
assertThat(this.repository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username)).isNotNull()
assertEquals(failures.size(),1)
@Override public ResponseImpl schema(Property property){   throw new RuntimeException("Not implemented"); } 
mService.getProfiles(UserHandle.myUserId(),true)
getSessionPool().returnObject(this)
!(listener instanceof ISuiteListener) && !(listener instanceof ITestListener) && !(listener instanceof IReporter)
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",true,false,false)
new LightweightThread(null,new Merge2Test())
startServer(getExportFolder())
JPQLQuery<?>
sharedOptsCount.contains(thread)
getDialect() instanceof PostgreSQLDialect
/**   * <p>A  {@code TaskOutputs} represents the outputs of a task.</p><p>You can obtain a  {@code TaskOutputs} instance using {@link org.gradle.api.Task#getOutputs()}.</p>  */ @HasInternalProtocol public interface TaskOutputs extends TaskOutputsVersion2 {   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given closure is executed at task execution time. The closure is passed the task as a parameter. If the closure returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateClosure The closure to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Closure upToDateClosure);   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given spec is evaluated at task execution time. If the spec returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateSpec The spec to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Spec<? super Task> upToDateSpec);   /**   * <p>Cache the results of the task only if the given closure returns true.  The closure will be evaluated at task execution time, not during configuration.  The closure will be passed a single parameter, this task. If the closure returns false, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param closure code to execute to determine if the results of the task should be cached.  */   @Incubating void cacheIf(  Closure closure);   /**   * <p>Cache the results of the task only if the given spec is satisfied. The spec will be evaluated at task execution time, not during configuration. If the Spec is not satisfied, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param spec specifies if the results of the task should be cached.  */   @Incubating void cacheIf(  Spec<? super Task> spec);   /**   * Returns true if this task has declared any outputs. Note that a task may be able to produce output files and still have an empty set of output files.  * @return true if this task has declared any outputs, otherwise false.  */   boolean getHasOutput();   /**   * Returns the output files of this task.  * @return The output files. Returns an empty collection if this task has no output files.  */   FileCollection getFiles();   /**   * Registers some output files for this task.  * @param paths The output files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder files(  Object... paths);   /**   * Registers some output file for this task.  * @param path The output file. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder file(  Object path);   /**   * Registers an output directory for this task.  * @param path The output directory. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder dir(  Object path); } 
fileExtension.equals("testcase")
iconsCache.getThemedIcon(R.drawable.ic_action_keyboard)
zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName(),req.getCore().getName())
UnavailableException e
exc.getXMPPError().getCode() == 409
mGBDevice.getFirmwareVersion()
right != startFromPixel + mWidthPerDay
NumberUtils.decodeLowUnsignedNibble(encodedInstruction[5])
Assert.assertEquals(transaction.getEffectiveDate().toLocalDate().compareTo(expected.getPaymentDate()),0)
this(i18nKey,i18nKey,icon,isEnableable,null); 
maxSize > (used / 1024 / 1024)
XMLHandler.closeTag(XML_META_TAG)
GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public Info create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
JSLinterUtil.validateInterpreterAndPackage(collectedInfo.getProject(),TsLintDescriptor.PACKAGE_NAME,collectedInfo.getState())
delegate.tokenize(token,regex)
LineNumberConvertor.Builder.createLeft(data.getLines())
new TimedTransRunner("test/org/pentaho/di/run/sortedmerge/SortedMergeSimple.ktr",LogWriter.LOG_LEVEL_ERROR,AllRunTests.getOldTargetDatabase(),AllRunTests.getNewTargetDatabase(),1000)
timeoutMs >= 0
Color.fromRGB(0xC354CD)
buf.writeByte(4)
WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)
jp.getFloatValue()
ensureGreen()
minorVersion=3
settingId != null
true || mSpew
containerLats.length - 2
mTrustListeners.get(i)
MonitoringPortletImpl.isMonitoringPortletResourceRequest()
page != Page.ARCHIVE
mAdapter.getItem(i) != null
previous != null
assertQ("test date statistics values",req,"//long[@name='count'][.='2']","//long[@name='missing'][.='1']","//date[@name='min'][.='1970-01-02T10:17:36Z']","//date[@name='max'][.='1970-01-12T10:20:54Z']","//date[@name='sum'][.='1970-01-13T20:38:30Z']","//date[@name='mean'][.='1970-01-07T10:19:15Z']")
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapBaseTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
Integer id
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).otherwise(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
context.getString(R.string.notification_new_messages_title,newMessages,accountDescr)
myProject.isDisposed()
Arrays.asList(Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),"h2-15")
edgeId > edgeCount
eventFunc.equals("conf_api_sub_transfer")
new HandlingEvent(cargo,new Date(10L),new Date(20L),HandlingEvent.Type.RECEIVE,b5)
name.equals(currentMethod.getName())
ViewFileSystemTestSetup.configWithViewfsScheme()
WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)
insets.left == 0
portletDataContext.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Nd4j.create(this.data,this.arrayShape,this.arrayOrdering)
functor != 0
new RouteCalculationResult(res,null,params,null)
_validatePropertyElement(propertyElement,filePath)
commState.putBoolean(sys)
AWAKE_INTERVAL_DEFAULT_MS=5000
Assert.assertEquals(result.getReceipt().getEnergyUsageTotal(),52457)
new ColorUIResource(0xFFCB6B)
mFlags.containsKey("debug")
connection.zrangeByLex(key,max,min)
new RMNodeImpl(nodeId,rmContext,null,0,0,null,null,null)
this.getCallerAddress()
snapshotTypes != null || snapshotTypes.length > 0
newReader == this.reader
private JLabel errorLabel; 
(RepositoryImpl)ethereum.getRepository()
!mHasCallback
!thingGroupItem.getLabel().equals(label)
stack.mStackId != DOCKED_STACK_ID
onPackageDisappeared(pkgList[i],PACKAGE_TEMPORARY_CHANGE)
comparator == null
1533529947843L + 3000
Encr.decryptPasswordOptionallyEncrypted(r.searchValue("PASSWORD").getString())
new InputStreamReader(urlConnection.getInputStream())
qs[0]
assertClusterSize(2,nodes[0])
StringUtil.toString(extensionArray)
log.logDetailed(toString(),"File [" + realFilename + "] doesn't exist!")
decompiler.addJScriptConditionalComment(ts.getString())
new ProgressDialog(getActivity())
log.error("{} is missing from the session and can not be retrieved.",OAuthConstants.OAUTH20_CALLBACKURL)
epi.initialise(ei,boi,engine,true,true)
graphModel.getUndirectedGraph()
JwsUtils.getSignatureVerifier(key)
newName.equals(code[i].getPrettyName())
assertEquals(6358482,received.get(0)[1])
awaitPartitionMapExchange()
NettyFactory.class
to.toPhoneString()
m != null
Simple.of(Integer.class)
logger.error(evt.getReason())
memoryMap.getInt("mappedWithJournal")
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
e1.getValue()
/**   * {@inheritDoc}  */ @Override public Object clone(){   ObjectProperty p=(ObjectProperty)super.clone();   p.value=value;   return p; } 
file.exists()
BucketsEntity.class
GL20.glGetVertexAttrib(index,pname,params)
(NoteDrawerTagAdapterViewHolder)convertView.getTag()
MockRamDirecorySerivce.class
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,fromX,y,0)
new InvoicePaymentModelDao(id,createdDate,type,paymentId,invoiceId,paymentDate,amount,currency,paymentCookieId,linkedInvoicePaymentId)
!usingDrawingCache
mHomeStackResizable && adjustedForIme
blackHoleGenerator.getConstructor()
startActivityAsUser(in,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
y < 32
log.severe("Error executing SQL " + statement)
fileEntry.getMimeType()
idleTime=60
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) == 1
RunnerMediator.injectRunnerCommand(super.postProcessCommandLine(commandLine))
AdviceWithTasks.afterByToString(route,toString,answer,selectLast,selectFirst,selectFrom,selectTo,maxDeep)
String.format("'%s'",targetPlatform.getName(),input.getDisplayName())
Iterator<Column>
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsExactly("java","pmd")
Map<String,Counter>
promise.setFailure(new ClosedChannelException())
referenceStepMeta != null
private final Fields fields; 
new IllegalStateException()
put(TYPES,new MapTypeCaster(),Map.class,Double.class)
new IllegalArgumentException()
Json.createArrayBuilder().add(DELETE_METHOD_SPEC)
getExecutionContext(event,true)
SecurityUtil.remove(instance)
mock.expectedMessageCount(0)
attributeModel != null
timeout=30000
Flux.create(camelSink::set)
cache()
126 + (USE_OLD_HISTORY ? 1000 : 0)
new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(SessionState state) -> {   if (state == SessionState.SESSION_VALID) {     s.release();   } } )
DEBUG_CAMERA_LIFT=true
new org.apache.ws.security.message.token.UsernameToken(tokenElement,false)
sbn.getId()
pgl.loadVertexShader(fragFilename)
Integer.valueOf(p.getProperty(screenName + ".id"))
get(0,0,0,0,255,0,0.4f)
private final DefaultChannelPipeline pipeline; 
invoke(compile("testL2I"),12)
new TelnetServerPipelineFactory()
symbolUsageValidator.validateCall(resultingCall.getResultingDescriptor(),trace,byKeyword)
new RuntimeException("Unexpected element value kind in annotation: " + type)
parent instanceof PsiReturnStatement
HttpUtil.removePathParamters(uri)
retval=(x == constValue)
@Override public ResolvedJavaType getDeclaringClass(){   return holder; } 
context.getSourcePathResolver().getRelativePath(resDir)
Arrays.asList("100b","100",(10000. / JvmInfo.jvmInfo().getMem().getHeapMax().bytes()) + "%")
resultSetView.getControl()
new ByteBuddy().subclass(Foo.class).method(isDeclaredBy(Foo.class)).intercept(FixedValue.value("Hello World!")).method(named("foo")).intercept(FixedValue.value("Hello Foo!")).method(named("foo").and(takesArguments(1))).intercept(FixedValue.value("...")).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
epochNum=5
new EmoteClue("Cheer at the top of the agility pyramid. Beware of double agents! Equip a blue mystic robe top, and any rune heraldic shield.",new WorldPoint(3043,4697,3),CHEER,any("Any rune heraldic shield",item(RUNE_SHIELD_H1),item(RUNE_SHIELD_H2),item(RUNE_SHIELD_H3),item(RUNE_SHIELD_H4),item(RUNE_SHIELD_H5)))
XMLInputFactory::newFactory
EmailFilter.filter().receivedDate(EmailFilter.Operator.EQ,1524575533757)
assertEquals(2,configsInJars.size())
Assert.assertEquals(expected,values)
deployments.get(uniqueName)
shell.setSize(653,678)
DeprecationLogger.nagUserWithDeprecatedBuildInvocationFeature(deprecation,String.format("This %s",suffix))
slow=true
Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))
ArrayNodeBaseTest<LazyTailArrayNode>
isProcessTerminated()
props.contains("log.adapter")
DateTimeFormat.getFormat("dd/MM/yy HH:mm")
assertEquals(iter.next().getMessage(),"Unable to open ''.")
animateType != 3
snap.getGravity() == Gravity.CENTER_HORIZONTAL
FileUtil.loadFile(new File(testFileName))
fields.contains(name)
deltaY > 0
activity.createTimeListPreference(settings.SAVE_TRACK_INTERVAL,SECONDS,MINUTES,1,R.string.save_track_interval,R.string.save_track_interval_descr)
Nd4j.createUninitialized(shape)
!"https".equals(uri.getScheme())
new BoBHash("sha1",SHA1.hex(bobData.getContent()))
(article == null) || !hasViewPermission() || (articleDisplay == null)|| isExpired()|| article.isScheduled()
List<DBCException>
countNewlines(headerFragment + lhsFragment + thenFragment) + 1
Strings.isNotBlank(javaAgent)
session.executePost(urlPath,_parameters,responseHandler)
formatter.format(toString(Verbosity.Id))
currentTransform.getOutputs()
JSONObject.writeValue(writer,this.myArrayList.get(0),thisFactor,indent)
equalTo(11)
KeycloakHttpServerAuthenticationMechanismFactory.class
yvel == 0.f
r.toRuleString(true)
timeOut=30_000
mDownloadXtraDataPending=true
a.willChangeTransformationMatrix()
LOG.error("Download " + fileURI + " in "+ toFile)
public Object getValue(){   return value; } 
typeUtil.getName(type)
new CommandFormatException("The result couldn't be retrieved (perhaps the task was cancelled",e)
new ActivityMvpNonConfigurationInstances<>(presenter,nonMosbyConfiguraionInstance)
@InSequence(5)
ProjectBundle.message("module.cannot.load.error",e.getMessage())
WrapUtil.<Object>toList("src/main/java","src/main/resources")
HashMap<CommandSender,String>
length / 2
mService.disableNetwork(netId,mContext.getOpPackageName())
new SemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: Column " + field + " is of type "+ lInfo.getType().getTypeName()+ " on first table and type "+ rInfo.getType().getTypeName()+ " on second table"))
_fragmentEntryLocalService.deleteFragmentEntry(entryId)
A args
Attribute attribute=(Attribute)o; 
endpoints.addAll(entry.getValue())
builder.breakToFill(" ")
Throwable t2
scorecard.isUseReasonCodes()
nextMapping == null
transmittableAudioEncodings.contains(sdp)
getAttributes(link)
new PaymentApiException(ErrorCode.PAYMENT_GET_PAYMENT_METHODS,paymentMethodModelDao.getAccountId(),paymentMethodModelDao.getId())
String.format("%s: language=%s description=%s",commentFrame.id,commentFrame.language,commentFrame.description,commentFrame.text)
parentFile.exists()
expected == int.class
new BuckUncheckedExecutionException("When starting activity.")
myConfigFiles.collectValues()
bundleContext.getBundle().getEntry(uri)
el instanceof GridSqlQuery
new JavaScriptServlet()
TestSuiteEnvironment.getServerAddress()
this.registrations.get(handler)
getTimeout()
Log_OC.wtf(TAG,"Access to unexisting list of files fragment!!")
grantAlias == null
DeploymentDescription.getDeployDeploymentOperation(locale)
wf.setVersion(1)
operands.length > 2
return expected; 
LOG.info(exc)
/**   * Callback that is invoked after each test method has been invoked.  * @param context the current test extension context  */ void afterEach(TestExtensionContext context) throws Throwable ; 
!service.mRequestFilterKeyEvents
synchronized (classCache) {   return (Class)classCache.get(name); } 
synchronized (this) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
logger.info("Recording function information")
LOG.warn("Transport ({}) failed {} attempting to automatically reconnect: {}",connectedTransport,(reconnectOk ? "," : ", not"),e)
LOGGER.info("Invoking authentication post processor [{}]")
assertValue(context,recordClass,Trait.INSTANTIABLE,Trait.MEMBERS)
employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100)
public static ArrayValue durationArray(TemporalAmount[] values){   DurationValue[] durations=new DurationValue[values.length];   for (int i=0; i < values.length; i++) {     durations[i]=durationValue(values[i]);   }   return new DurationArray(durations); } 
analysis.getTypeWithCoercions(windowFunction)
properties.containsKey(protocol + ".extended")
setTimeToLiveSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
toString(includePrivateKeys,includeTransactions,includeExtensions,chain)
(fl & FLAG_LAYOUT_NO_LIMITS) != 0
dest.writeParcelable(this.milestone,flags)
list(TYPES,newline(),CsmElement.none(),CsmElement.newline())
AsynchronousCloseException e
eventFunc.equals("conference_del_member")
getTotalSpaces() < spaceProperty.getMinSpaces()
new CuratorEventImpl(client,CuratorEventType.CHILDREN,rc,path,null,o,stat,null,strings,null,null)
new SeleniumBuilderFileUtil(".")
hook(new XMediaRecorder("setOutputFile",XRestriction.cMedia,new String[]{"RECORD_AUDIO","RECORD_VIDEO"}),"android.media.MediaRecorder",false)
this.nameMapping
new Selector(5000,failedAuthenticationDelayMs,metrics,time,"MetricGroup",channelBuilder,new LogContext())
parser.parse(GroovyElementTypes.GROOVY_FILE,builder)
new InetSocketAddress(0)
Exception e
new ServletHolder(accountServlet)
T extends Capability
l_Inflater.inflate(R.layout.adv_user_sms_listview,parent)
public DerivedBuilder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
uncompressedProto.length < 2550000
getEffectiveCleartextTrafficPermitted()
assertEquals(15,services.size())
Arrays.asList("Motorola IHF1000","i.TechBlueBAND","X5 Stereo v1.3")
PortletURLFactoryUtil.create(request,PortletKeys.EXPORT_IMPORT,PortletRequest.RENDER_PHASE)
tm.getProgress()
new Handler().postDelayed(new Runnable(){   @Override public void run(){     new AboutDialog().show(getSupportFragmentManager(),"ABOUT_DIALOG");   } } ,200)
TarTaskOutputPacker delegate
/**   * {@inheritDoc}  */ public Object next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
BigInteger.valueOf(0xffffl)
(ChatRoomMessageDeliveredEvent)obj
SetMultimap<ChunkCoordIntPair,Ticket>
interpreterSetting.getName()
builder.add(fileDir).xy(3,1)
System.arraycopy(bytes,0,this.bytes,0,SIZE)
HashMap<DeclarationDescriptor,EnclosedValueDescriptor>
assertEquals(strangeVocab.getIndex(),3)
testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
names[2]
valueFactory.normal(token)
SUBCMD_TRIGGER_CHANNEL + " <channelUID> [<event>]"
mTxtLog.append(llog)
logger.debug("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
defaultSchedulers(executor)
case 5: 
NeoStore.setRecord(fs,neoStore,NeoStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,LOG_HEADER_SIZE)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
conceptAnswer.getConcept()
new URLClassLoader(new URL[]{myStdlib})
MessagingService.instance().sendRR(BatchlogManager.getBatchlogMutationFor(mutations,uuid,targetVersion).createMessage(),target,handler)
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
mDatabaseHandler == null
xfrm.getExt().getCx()
dependentMeasureRef.equalsIgnoreCase(that.getDependentMeasureRef())
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).expectComplete()
(dispatcherMapping & REQUEST) > 0
Util.killAsync(ffmpegLoadLibraryAsyncTask) && Util.killAsync(ffmpegExecuteAsyncTask)
attribute instanceof PreInvocationAuthorizationAdvice
columnDefinition.getContentValuesStatement()
finish()
pCommandLineArg.indexOf(" ") != -1
baseRequest.getResponse().isWriting()
createAndTestKieContainer(gav,createKieBuilder(kfs),null)
FSIndexInput clone=(FSIndexInput)super.clone(); 
Math.max(desiredTileWidth,desiredTileHeight)
new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR)
_hint != null
"false".equals(showRelationships)
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,true,userId)
Assert.assertEquals(122L,ownerCapsuleNew.getFreeNetUsage())
id.getHash()
jRestriction.put("used",mUsed)
if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); 
mMenuView.setBackgroundDrawable(null)
GL20.glUniformMatrix3(location,transpose,value)
private Integer measureId; 
/**   * @throws Exception  * @see org.springframework.batch.item.ItemReader#read()  */ public Object read() throws Exception {   recordFinished=false;   while (!recordFinished) {     process((FieldSet)super.read());   }   log.info("Mapped: " + order);   Object result=order;   order=null;   return result; } 
(((float)bytes.get()) * 8) / 1024
cam.near=0.1f
java.lang.System.currentTimeMillis() + 2000
securityDomain != null
return 10; 
metadata.getModified().getTime() > project.getLastSave().getTime()
l.onSuspend(request,response)
lp.width != panelWidth
coreThreads.asString()
checkDirectory(config.getString("tsd.http.staticroot"),DONT_CREATE,!MUST_BE_WRITEABLE)
type != BlockType.TOP_UP
System.getProperty(Tokens.FAUNUS_HOME)
assertEquals(4,dict.getSize())
socialActivityFinder.countByRelation(userId)
new CopyableValueComparator(sortOrderAscending,type)
super.getLikeProvider(path)
logger.info(String.format("encoded %s as %s",obj,str))
found=false
!UIUtil.isUnderAquaBasedLookAndFeel() || !UIUtil.isUnderDarcula()
1 << quotientBits
System.arraycopy(points[0],0,startPoints,0,pointsNumber)
VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP_MR1
method.getGenericReturnType().getTypeName()
Assert.assertEquals(2,json.size())
main.getClasses()
new PrestoException(INVALID_CAST_ARGUMENT,e)
tagDataService.getTag(filter.title,TagData.ID,TagData.TAG_ORDERING)
return 0; 
CompilationAlarm.trackCompilationPeriod(initialOptions)
new KafkaComponent()
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"),felix())
BitmapUtils.isImage(mFile)
private Integer id; 
config.trustStoreLocation != null
super.setHeader(name,value)
localNodeAckEvent.addListener(new ActionListener<Void>(){   @Override public void onResponse(  Void ignore){     assert Thread.holdsLock(mutex) : "Coordinator mutex not held";     assert committed;     receivedJoins.forEach(CoordinatorPublication.this::handleAssociatedJoin);     assert receivedJoinsProcessed == false;     receivedJoinsProcessed=true;     clusterApplier.onNewClusterState(CoordinatorPublication.this.toString(),() -> applierState,new ClusterApplyListener(){       @Override public void onFailure(      String source,      Exception e){ synchronized (mutex) {           removePublicationAndPossiblyBecomeCandidate("clusterApplier#onNewClusterState");         }         ackListener.onNodeAck(getLocalNode(),e);         publishListener.onFailure(e);       }       @Override public void onSuccess(      String source){ synchronized (mutex) {           assert currentPublication.get() == CoordinatorPublication.this;           currentPublication=Optional.empty();           logger.debug("publication ended successfully: {}",CoordinatorPublication.this);           updateMaxTermSeen(getCurrentTerm());         }         ackListener.onNodeAck(getLocalNode(),null);         publishListener.onResponse(null);       }     } );   }   @Override public void onFailure(  Exception e){     assert Thread.holdsLock(mutex) : "Coordinator mutex not held";     removePublicationAndPossiblyBecomeCandidate("Publication.onCompletion(false)");     FailedToCommitClusterStateException exception=new FailedToCommitClusterStateException("publication failed",e);     ackListener.onNodeAck(getLocalNode(),exception);     publishListener.onFailure(exception);   } } ,EsExecutors.newDirectExecutorService())
15 * 60 * 1000
r != null
mComment.getLocalSiteId()
recycle(false)
date(2008,10,12)
rng.nextInt() % 100 + 100
MessagingService.instance().sendRR(message,destination,responseHandler)
mIconId >= 0
i < 32767
compile.minus(provided)
waitOnThreads(f1,f2,f3,f4,f5,f6,f7,f8,f10)
type.getSimpleName()
BufferUtil.clear(raw[i])
typeSer.writeTypePrefix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
endOfArguments()
ConstantNode.forConstant(resolvedMethod.getEncoding(),tool.getMetaAccess(),graph())
getProperty(parent + "." + propName)
settings.ANIMATE_MY_LOCATION.get() && !smallSpeedForAnimation && !movingToMyLocation
IR.name(TMP_ERROR)
new VelocityTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_velocityEngine,_templateContextHelper)
StringUtils.isEmpty(formKey)
Preconditions.checkNotNull(content,"Internal Error: Content can't be null")
new QueryBuilder.Options(getIdentifierQuoteString(),true,false,false)
mouse().clickAt(0,0)
assertFalse(indicesService.hasUncompletedPendingDeletes())
id=15855
highlightValue(highlight)
migrateXmlString(content,22)
public interface Constants extends Constants {   s String; } 
new File(llsApkDir)
Utils.stackTrace(exception,true)
columnController.createColumns()
stmt.newBoundStatement()
System.out.println("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
!mSpeakText
UPDATE=false
(SubscribeForm)form
obj instanceof IdeaLookAndFeelInfo
writer.close()
!current.hasAccuracy()
current > 0
GL15.glGetBufferParameter(target,pname,params)
idx > 0
rs.getString(1)
StampedCommonCache<String,Class>
ArrayList<TaggedWord>
FilenameUtils.getPath(destination)
event.getY()
string.length() >= 0
new RequestSignUp(modules.getPreferences().getString(KEY_TRANSACTION_HASH),name,sex)
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=false
this.authenticationDecisionStatementProviders
mImmersiveModeConfirmation.onPowerKeyDown(isScreenOn,event.getDownTime(),isImmersiveMode(mLastSystemUiFlags))
node.getStringValue()
request.paramAsStrings("tags")
SortedMap<Integer,Integer>
msbFragmentEntry.getFragmentEntryId()
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()))
rows.length != 0
new ShowcaseViewBuilder(activity,showcaseTemplateId)
new WriteResult(translateCommandResult(new RemoveOperation(getNamespace(),remove,getDocumentCodec(),getBufferPool(),getSession(),false).execute()),writeConcern)
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithNonCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
AMQ3529Test.class
type.getOpenWithApplication().isEmpty()
getSupportActionBar().setDisplayHomeAsUpEnabled(true)
objective != null
new String(data,0,read)
load(key,true)
put(null,params,responseHandler)
attributes != null
appendOrderByComparator(sb,"CalendarResource.",orderByComparator)
new ZipAggregationStrategy(true)
!handler.isProcessTerminating()
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())
myDiffContentFactory.create(content)
ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
HybridDecryptFactory.class
Location location
perc(.10,3)
item.getClass()
columnType.equalsIgnoreCase("string")
FILE_TYPE_STOREDIRECT=1
FlipDeleteAdapterActivity.class
return fileEntry; 
PageRatingsWebUpgrade.class
buf.writeShort(1)
new InputStreamBody(content.getStream(),content.getName())
new WorldPoint(2473,3420,0)
ResponseEntity<Void>
GridHadoopTestUtils.jsonToMap(primaryIpcEndpointConfiguration(gridName))
e instanceof IOException
sb.append(NC)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_GOOGLE_ACCOUNT,false)
logger.error(e)
MESSAGES.pathEntryNotFound(path)
new Color(mParams.getCustomBackgroundColor())
metadataDao.saveItem(metadata)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_NOOP,0,0,VolumeStreamState.this,0)
centroid.size()
Math.sqr(x[i] * y[i])
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the PrivateData provider.  */ public static PrivateData getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return (PrivateData)privateDataProviders.get(key); } 
ExprEval.of(null)
id == null
private TextVar wDirectory; 
Log.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
new ApiHelper.RefreshBlogContentTask(mTargetContext,dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(true);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(false);     countDownLatch.countDown();   } } )
new FilteringClassLikeInfo(classLikeInfo,ONLY_ENUM_ENTIRES){   @Override public JetClassOrObject getCorrespondingClassOrObject(){     return null;   }   @NotNull @Override public ClassKind getClassKind(){     return ClassKind.OBJECT;   }   @NotNull @Override public List<? extends JetParameter> getPrimaryConstructorParameters(){     return Collections.emptyList();   }   @NotNull @Override public List<JetTypeParameter> getTypeParameters(){     return Collections.emptyList();   } } 
b == null
READ_ITEM_DELAY=100
new ThreadPoolExecutor(0,5,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>())
TextView frame
@UriPath
j > size
sDefaults.putBoolean(KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL,true)
modulePath.split(File.pathSeparator)[1]
data.synonymForSchema.findTableOrView(data.session,data.synonymFor) != null
GroupServiceUtil.addGroup(name,description,type,StringPool.BLANK,true,true,serviceContext)
Pattern.compile("(<style>.*</style>)|<[^<>]*>")
customer.getUuidId()
wikiPagePersistence.findByN_H(nodeId)
ChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper); 
entity.saveComponent(delayedComponent)
expanded.toString().replace("\\$\\$","\\$")
docBase.toLowerCase(Locale.ENGLISH)
getMeasuredHeight()
getMockEndpoint("mock:" + i).expectedMessageCount(1000)
new Insets(6,0,0,6)
SHOW_ZOOM_LEVEL_BUTTON_DELAY=2500
Assert.assertEquals(3,providers.size())
previousPropertyName.compareTo(propertyName)
sentencePartToEndOfError.length() - lastLineBreakPos
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT)
(propertySource != this) && propertySource instanceof EnumerablePropertySource
Integer divisor
badgeText.length() == 1
deck.addFact(editFact,cardModels)
parameters == null
size >= Long.MAX_VALUE / unit.toBytes(1)
logger_.info("No column family to repair for keyspace " + tableName)
holder.getListener().onCaptureSequenceCompleted(CameraDeviceImpl.this,requestId,lastFrameNumber)
case 16: 
this.disconnect(account,false)
SSLParametersImpl.getDefaultTrustManager()
Assert.assertEquals(0,key)
floatBuffer.clear()
public TokenStream create(TokenStream input){   return new ArabicNormalizationFilter(input); } 
getZoomLevel()
frame.addWindowFocusListener(myIdeFrameFocusListener)
((HotSpotResolvedObjectType)type).getFingerprint() != 0
id=17
_buildTemplateWithGradle("npm-portlet","npm-portlet-dependency-management","--dependency-management-enabled","true")
new IndexWriter(ramDir1,new StandardAnalyzer(),create)
ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_OBJECT,parser::getTokenLocation)
onHold | ON_HOLD_LOCALLY
lock.close()
actionUrl.getActionType() == ActionUrl.DELETED
new FileSystemWebDabServer(nioFileSystem())
logger.error("Error while matching regex [" + matched + "] for string ["+ matcher+ "] "+ pse.getMessage())
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
newDict.initParams(baseDir.replaceFirst(srcConfig.getHdfsWorkingDirectory(),dstConfig.getHdfsWorkingDirectory()),baseId,maxId,maxValueLength,nValues,bytesConverter)
schemeSpecificParts != null
connectionProperties.contains("oracle.user")
IdIndexer indexer
msg.getType() == Message.Type.error
mNavigationBarView.inScreenPinning()
!url.startsWith("file") && !JCUtils.isWifiConnected(getContext()) && !WIFI_TIP_DIALOG_SHOWED
USER_OPERAND_TYPE(false,3)
ALIAS.addOperationParameterDescription(resources,"infinispan.container",op)
factory.get(sResultClass,NO_ANNOTATIONS,retrofit)
terminal.println(doc.get(docMapper.mappers().smartName("file").mapper().names().indexName()))
line.contains(StringPool.EQUAL)
serializedMapping != null
totalMessage++ % 10000 == 1
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_FLAC,Format.NO_VALUE,streamInfo.bitRate(),streamInfo.channels,streamInfo.sampleRate,initializationData,null)
warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))
paths.get(0)
Object executable
i <= 10
getCurrentTab().handleHTMLCopy()
outActivity.length > 0
logger.infof("OAuth clients imported: " + clients)
callVideoButton.setPressedImage(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_PRESSED))
KeyValueStoreTest.class
new IndexWriter(index,new WhitespaceAnalyzer(),true)
doNotUseAnimations ? 0 : ZOOM_MOVE_ANIMATION_TIME
field.getWrappedField() == wrappedField
((Scorecard)serializable).isUseReasonCodes()
header[3]
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
!from.getItem().shouldCauseReequipAnimation(from,to,changed)
spdy || spdyPlain || h2|| h2c
rewardView::setBackgroundColor
return 3; 
Assert.assertTrue("Was not expecting this output " + acc,System.currentTimeMillis() - now < 5000)
mPressedView.getBackground() != null
left != startFromPixel
Reflect.on(result).set(childElementName,Convert.convert(childElement.getTextContent().trim(),childType))
case 3: 
CachingConnectionFactory connectionFactory
new PullImageCmdImpl(NOP_EXEC,"")
FixedNode node
Pattern.compile(foundAuthor)
DefaultCacheKeysFactory.getCollectionId(cacheKey)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
final LongAdder cntr=new LongAdder(); 
Preferences.getBoolean(AstridPreferences.P_FIRST_LIST,false)
myIconOpaque=true
(ret == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
DEFAULT_LABEL_MIPMAP=true
incomingCounter.getAndSet(0) / 1024
new ModelNode().set(15000)
limitRows <= 0
settings.FAST_ROUTE_MODE.getModeValue(params.mode)
sublistsProperty.get().parallelStream()
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
mTFS.exists(turi)
new ValidatingDispatcher(threadPool.getThreadContext(),dispatcher)
this(file,NCSA_FORMAT); 
db.hashMapCreate("cache").expireAfterAccess(1,TimeUnit.HOURS)
myWidth - myDelegate.getIconHeight()
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.CLIENT_ERROR)
URLUtils.currentUrlStartWith(toString())
"System property " + LEGACY_SSTABLE_ROOT + " not set"
Context.getGeofenceManager() != null
RouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
EMERGENCY_ASSISTANCE_ENABLED=false
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null)
case RGB: 
(str.length() * 3) << 2
searchType.convertToIds(defs,myIndex.getByteSeqEum())
index <= _paramAnnotations.length
Assert.notNull(jarScanner,"Patterns must not be null")
className.getValue()
sum=0f
formatPoshiXML(content)
adaptTestForTrain(_output._names,null,_output._domains,frame,_parms.missingColumnsType(),true)
new IntentStarter(ctx,Intent.ACTION_VIEW,Uri.parse("market://search?q=text to speech engine"))
public class HorizontalBarChart extends ColumnChart {   public HorizontalBarChart(  Context context){     super(context);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);   }   @Override protected void init(){     super.init();     setDrawXLabels(false);     setDrawYLabels(true);     mTrans=new ColumnToBarTransformer();     mValuePaint.setTextAlign(Paint.Align.LEFT);   }   /**   * Prepares a bar for drawing on the specified x-index and y-position. Also prepares the shadow-bar if enabled.  * @param x the x-position  * @param y the y-position  * @param barspace the space between bars  */   @Override protected void prepareBar(  float x,  float y,  float barspace){     super.prepareBar(x,y,barspace);     float spaceHalf=barspace / 2f;     float top=x + spaceHalf;     float bottom=x + 1f - spaceHalf;     mBarRect.set(0,top,y,bottom);     mTrans.rectValueToPixel(mBarRect,mPhaseY);     if (mDrawBarShadow) {       mBarShadow.set(mBarRect.left,mOffsetTop,mBarRect.right,getHeight() - mOffsetBottom);     }   }   @Override protected void drawXLabels(  float yPos){     if (!mDrawXLabels)     return;     mXLabelPaint.setTextAlign(Paint.Align.RIGHT);     float[] position=new float[]{0f,0f};     int step=mData.getDataSetCount();     for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {       position[1]=i * step + i * mData.getGroupSpace() + mData.getGroupSpace() / 2f;       if (mXLabels.isCenterXLabelsEnabled())       position[1]+=(step / 2f);       mTrans.pointValuesToPixel(position);       if (position[1] >= mOffsetTop && position[1] <= getHeight() - mOffsetBottom) {         String label=mData.getXVals().get(i);         mDrawCanvas.drawText(label,mOffsetLeft - 10,position[1],mXLabelPaint);       }     }   }   private static String TALL_VALUE="100%";   @Override protected float getPositiveYOffset(  boolean drawAboveValueBar){     Rect bounds=new Rect();     mValuePaint.getTextBounds(TALL_VALUE,0,TALL_VALUE.length(),bounds);     return bounds.height() / 2;   }   @Override protected float getNegativeYOffset(  boolean drawAboveValueBar){     return getPositiveYOffset(drawAboveValueBar);   }   /**   * Sets up the y-axis labels. Computes the desired number of labels between the two given extremes. Unlike the papareXLabels() method, this method needs to be called upon every refresh of the view.  * @return  */   @Override protected void prepareYLabels(){     mYLabels=new XLabelsAsYLabels();   } private class XLabelsAsYLabels extends YLabels {     /**   * Returns the longest formatted label (in terms of characters) the y-labels contain.  * @return  */     @Override public String getLongestLabel(){       String longest="";       for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {         String text=mData.getXVals().get(i);         if (longest.length() < text.length())         longest=text;       }       return longest;     }     /**   * Returns the formatted y-label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).  * @param index  * @return  */     @Override public String getFormattedLabel(    int index){       super.getFormattedLabel(index);       if (index < 0)       return "";       return mData.getXVals().get(index);     }   } } 
serialVersionUID=1636640410
formNavigatorEntryKeysProperties.getProperty(context)
handshake.getProcolVersion()
sourceSet.getRuntimeClasspathConfigurationName()
heatpumpValues[65]
success >= 135
new SafeTextModel(Mode.none)
List<InternalTransactionPogo>
bc.getExecutorService()
Assert.assertTrue(System.currentTimeMillis() - now < 5000)
new Environment(settings)
_connector.getResponses("GET /foo?data=42 HTTP/1.0\n\n")
StringManager sm=StringManager.getManager(Constants.Package); 
EnumSet.of(PROPERTY,CLASSMETHOD,STATICMETHOD)
runAllTasks()
parts.length > 0
statusBar.layout()
completionLatch.await(1200,TimeUnit.MILLISECONDS)
!DocumentUtil.isInsideSurrogatePair(myEditor.getDocument(),startOffset)
Data<List<T>>
new WithAccountLock<ReturnType,ExceptionType>(paymentConfig).processAccountWithLock(locker,accountExternalKey,callback)
Error.class
U
!mUserVisibleHint && isVisibleToUser && mState < STARTED
historyRoot.exists()
log.error("Query failed to validate : '{}'",executionInput.getQuery())
RajLog.e("LoaderOBJ","File decode error",e)
aliases.get(i)
started.compareAndSet(false,true)
codeFormatter.processText(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true))
!finished
flexItem.getMarginStart()
new FirefoxWebDriverImpl(projectDir,portalURL)
containerLats.length - 1
this.func_180475_a(objective,res)
mEvdoEcio > 0
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).finallyDo(() -> isFormSubmitting.onNext(false))
listAdapter.notifyDataSetInvalidated()
!xAppInfo.getIsSystem()
ImmutableList.of("/bin/bash","-c","python convert_to_katana.py AndroidManifest.xml > $OUT")
i >> 48
checkForMisplacedBindingAnnotations(method,errors) | !isValidMethod(injectableMethod,errors)
keyClass(NullWritable.class)
BuildRule resourceRule2=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res2")).build()); 
myStates.containsKey(project)
generatorConfig.getModelPackage()
new NativeAllocationRegistry(nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
List<String>
origin >= other
PdeBase.calcFolderSize(dataFolder) > 768 * 1024
new NullPointerException("the name is null")
instruction.getHatLiteral()
logger.error("SSTables for user defined compaction are already being compacted.")
routeList == null
Iterable<AbstractConfiguredTarget>
new StepMeta(log,stepnode,transMeta.getDatabases(),transMeta.getCounters())
Middle middle
StringBuffer ret=new StringBuffer(100); 
_buildTemplateWithGradle("war-mvc-portlet","war-mvc-dependency-management","--dependency-management-enabled","true")
assertEquals(records.get(0).getSubject(),expectedSubject)
maxInvocationCountObservedDuringWarmup * 1.2
Collectors.groupingBy(OrderRoot::getFile)
value instanceof Integer
transportRoutingHelper.getRoutes()
/**   * Replace a tree node with a string, but adjust the start and end positions as well. For example, if the tree node begins at index 10 and ends at index 30, this call will replace the characters at index 15 through 25 with "replacement": <pre> {@code fix.replace(node, "replacement", 5, -5)}</pre>  * @param node The tree node to replace  * @param replaceWith The string to replace with  * @param startPosAdjustment The adjustment to add to the start position (negative is OK)  * @param endPosAdjustment The adjustment to add to the end position (negative is OK)  */ public static Fix replace(Tree node,String replaceWith,int startPosAdjustment,int endPosAdjustment){   return builder().replace(node,replaceWith,startPosAdjustment,endPosAdjustment).build(); } 
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,startNode,relDirection)
SimpleScheduleBuilder.simpleSchedule().withIntervalInMinutes(this.refreshInterval)
5 * 60_000
item.isOnlyShared() && item.getSubStatus() == RosterItem.SUB_FROM
assertEvaluate(buildFile).lookup("txts")
_connector.getResponses("GET /foo?status=206 HTTP/1.0\n\n")
new Float(((Integer)value).intValue())
Maps.newHashMap()
ConduitInitiatorManager.class
private final CompoundShelfFileProcesor myFileProcessor; 
props.getProperty("exporter")
@Override public Object clone(){   FunctionProperty prop=(FunctionProperty)super.clone();   prop.cacheValue=cacheValue;   prop.testIteration=testIteration;   prop.function=function;   return prop; } 
configMap.merge(map,true)
Iterable<SkyKey>
nextOption()
constraintSystem.hasOnlyExpectedTypeMismatch()
PropertyEvaluator evaluator=new PropertyEvaluator(new HashMap<String,String>()); 
LOG.info("Halting process: ShellBolt died.",exception)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && isScreenOn
itemCache.addKey(item.id,item)
Localization.lang("Edit")
sTextLayoutBuilder.textDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
session != null
createArtifact("b","1.0-SNAPSHOT")
file != null
id=15874
mService.setWifiApConfiguration(wifiConfig)
ignite.log().error("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
Math.min(mXAxis.mAxisMinimum,pos.x)
status == PlayerStatus.INITIALIZED
fireTypingNotificationsEvent(sourceContact,STATE_STOPPED)
getNumOfRenewsInLastMin() < numberOfRenewsPerMinThreshold
!trimmedText.equalsIgnoreCase(myModel.getElementName(e))
isGreaterOrEqual(platformVersion,MNC)
file.getAbsolutePath()
this.getDrawnBoundingBoxE6().getLatitudeSpanE6()
logger.info("File descriptor is: " + fd)
Map<Object,RealmObject>
oldVersion=7
-1
s.length() == 0
getPort()
expected == double.class
Long count=itr.next(); 
!baseDir.exists()
t == null
ImageUtil.getRealHeight(myImage)
new MediaController(token)
dis.read(serializedData,0,length)
streamCachingStrategy.setSpoolThreshold(1l)
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(builder)
finalizationLock.wait()
Utils.convertDpToPixel(4f)
new DeadCodeEliminationPhase(REQUIRED)
optional.isPresent()
totTermCount.get() < 10
_("")
ti.setText(3,jobEntry.wildcard[i])
VectorAllocator.getAllocator(vv,50)
depthErrorXYZ("modelX")
info == null
suppressed.add(t2)
setSelectedEditor(selectedComposite,true)
GitAPIException lastException=null; 
pTMXTiledMap.getTileWidth()
status <= retry
@Test public void testPutOutOfCapacity() throws OutOfCapacityError {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(MultiLevelPriorityQueue.MAX_PENDING_PER_GROUP_KEY,2);   ResourceManager rm=new UnboundedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   groupFactory.groupMap.get(groupOne).addReservedThreads(rm.getTableThreadsHardLimit());   queue.put(createQueryRequest(groupOne,metrics));   assertTrue(true);   try {     queue.put(createQueryRequest(groupOne,metrics));   }  catch (  OutOfCapacityError e) {     assertTrue(true);     return;   }   assertTrue(false); } 
useExpires.setSelected(false)
projectName.equals(executable.getProjectName())
ZLibrary.Instance()
Strings.isNotBlank(password)
MIN_SENTENCE_TOKEN_COUNT=3
stopGrid(0)
return transactions; 
ruleIndex <= runCount
dl.info("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
appliesTo_.length > 1
Pattern.compile(".*[ \t\n\r]+(.+?)[ \t\n\r]*\\(.*")
getServiceGuarded().sendMessage(subId,callingPkg,pdu,locationUrl,configOverrides,sentIntent)
"User with email address " + emailAddress + " does not exist for company "+ company
success=true
getBeanClass(factoryClassName).getMethods()
element.getText()
verifyAndPrint("After Canonicalization")
x > 11
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")))
AbstractBottomUpTraversal<TargetNode<?>,Void>
f.exists()
MonitoringPortletImpl.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
new StringBundler(17)
this.sizeY=sizeX
final HColumnDescriptor hcd=htd.getFamily(familyName); 
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase)
mAnimator.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
flags != 0
idx + 1
oldVersion < 1030002
latch.await(10,TimeUnit.MILLISECONDS)
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js")
initialCapacity < capacity
GL20.glGetActiveAttrib(program,index,256,typeTmp)
LOG.info("Ganglia server component is not live")
GuiUtils.compareDates(date,System.currentTimeMillis())
NativeDecoder.matches(in,inputFormats)
(filterMap.getDispatcherMapping() & FilterMap.FORWARD) > 0
killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,createdBy,reason,comment)
socket.getPoller().cometInterest(socket)
now - 888888
ByteUtil.longToBytesNoLeadZeroes(1)
cart != null
assertNotSame(-1,"Cannot find text '" + element + "' in file "+ path)
LOG.warn(e.getMessage())
customCroutonControls.setVisibility(View.VISIBLE)
InvokerHelper.getMetaClass(obj.getClass()) == mc
defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
XBeanBrokerService broker=null; 
this(null,null,null,false); 
split[6].length() > 0
mOneShot=true
var.isClosureSharedVariable()
c == Short.class
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()
sharedPreferences.getBoolean(key,true)
LOG.warn("touchbar-server isn't running, skip nst loading")
parameter.getTypeElement()
assertEquals(1,responseBody.get("bucket_count"))
public S orderBy(OrderSpecifier<?>... o){   query.orderBy(o);   return self; } 
XContentParserUtils.ensureExpectedToken(parser.nextToken(),XContentParser.Token.START_OBJECT,parser::getTokenLocation)
@NonNull
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) != PackageManager.PERMISSION_GRANTED
Strings.dup('C',52)
new ColorUIResource(0xFF5370)
mService.removePasspointConfiguration(fqdn)
isBuiltin
buffer.capacity()
columnsCount > limit
UnsupportedOperationException.class
GROUP_IDLE_TIME_S=5
TypeDefinition declaringType=methodDescription.getDeclaringType(); 
new MavenArtifactSearcher()
reader.skipCheckInt(CHUNK_STRINGPOOL_TYPE)
super.recylePoolItem(pPoolItem)
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU)
item == null
viewStateIndex|=VIEW_STATE_PRESSED
new GZIPInputStream(input)
ImageResource img; 
row - 2
setEnabledFunctions(mDefaultFunctions,false)
incomingConnector.accept(connectEvent,false)
new TwoColorsIcon(12,((MyInfo)infos.get(1)).myColor,((MyInfo)infos.get(0)).myColor)
level=(String)level
GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,PythonFileType.INSTANCE,DjangoTemplateFileType.INSTANCE,StdFileTypes.XML,StdFileTypes.XHTML,HtmlFileType.INSTANCE)
this(0,null); 
String url
-25
toLong(b,8)
Messages.MESSAGES.templateParameterNull(param)
node1.checkTreeTypeAwareEqualsSilent(node2)
mock.expectedBodiesReceived("Hello World 2")
replacement instanceof PsiExpressionStatement && !(replacement.getLastChild() instanceof PsiJavaToken)
type.getFixedValue()
WATCHDOG_TIMEOUT_MILLIS=5000
public class XpathRegressionExplicitInitializationTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new SctpMessage(streamIdentifier,protocolIdentifier,unordered,msg.retain())
new Descriptor("OSR_migration_end",true,null,void.class,long.class)
log.warn("Error loading known hosts",e)
RedisOperations<Object,Object>
presenceXML != null
renderingAsyncTask.execute()
PsiTreeUtil.isAncestor(exceptPart,e,true)
new Long(post.getId())
j++
LOGGER.debug("Could not open folder",e)
getRecentsButton()
constraints.weightx=1f
PROTOCOL_VERSION=1
myFindModel.isReplaceState()
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,46.26961741541022,DeepLearningParameters.Activation.Rectifier)
super(message); 
StreamEx.of(1,2,3,4)
new int[296]
mCameraUser.submitRequest(request,false)
CANCELLED(130)
log.error(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
heightSize == MeasureSpec.UNSPECIFIED
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
assertCompletionVariants(myProjectPom,"3.8.1","3.8.2","4.0")
Assert.assertEquals("Received string: " + baos.toShortString(),100000000,baos.size())
props.getProperty(CONNECT_TIME_PROP,FALSE)
NUM_PAGES=3
new DefaultConfiguration(connectionProvider,null,null,null,null,null,null,null,null,null,dialect,settings,null)
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement())
result == null
LineMarkerSettings.getSettings().isEnabled(new ColorLineMarkerProvider())
Assert.assertEquals(1,fastJsonConfig.getFeatures().length)
return EOF_BLOCK_ID; 
new ImageIcon()
_socialActivityInterpreterClasses.isEmpty()
myTypeChecker.checkExpressionIsAssignableToType(rOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null)
touchEventPool.free(touchEvents)
SemVerMatcher.parseFromText(text)
addValue(val,1)
/**   * Logical name of the property; will be used as the field name under which value for the property is written. <p> NOTE: do NOT change name of this field; it is accessed by Afterburner module.  */ protected final SerializableString _name; 
displayOption=0
OverrideImplementUtil.getMethodSignaturesToImplement(aClass)
conf.getInt("fuzz")
exportReturnCodes(exporter)
return faceBookProperties; 
DBFactoryUtil.setDB(DB.TYPE_HYPERSONIC)
itemLeft > headerRight
@Override public Content detach(){   throw ImmutableElement.immutableError(this); } 
classMapper.lookupType(classAttribute)
new WorldPoint(2799,3074,0)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,LiferayRepositoryDefiner.class,"_portalCapabilityLocator",false)
c == '\\'
testData.numExamples()
projectFilesystem.exists(buckFile)
Log_OC.e(TAG,"Initializing Fragments in onAccountChanged..")
StringBuffer txt=new StringBuffer(); 
new CifarDataSetIterator(batchSize,numSamples,new int[]{height,width,channels},true,preProcessCifar)
applicationContext != null
createConnector()
pageSize > pageCache.pageSize()
DateTimeFormat.getFormat("dd/MM/yy")
!isValid
annotationHelper.printError(element,"%s annotated element should not have a private constructor")
ScanResult.is24GHz(frequency)
paintInnerCircle.setColor(0xddFFFFFF)
FIRST_CUSTOM=8092
StringBuffer charNum=new StringBuffer(); 
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_READ,evtOld,evtOld != null,evtOld,evtOld != null,subjId,transformClo.getClass().getName(),taskName,keepBinary)
@SuppressWarnings("unused") private final Object strongReference; 
LOGGER.debug("Error during file import",e3)
List<ActivityManager.RecentTaskInfo>
AllGroupsCollector c3=new AllGroupsCollector(groupField); 
webSocket.isOpen()
new IntPreference("map_transparency",255,true)
assertFalse(strayChild.isSafelyReplaceableBy(newChild))
HttpServletResponse.class.cast(response).sendError(202,"Websocket protocol not supported")
labelIndex >= 0
i > BY_WOOL_DATA.length
bndLanguageProperties.containsKey(languageKey)
assertFalse(jmsTemplate.isPubSubDomain())
mAutoScroller.autoScroll(-mHeaderOffset,mSwipingToRefreshToDefaultScrollingDuration)
CodeStyleSettingsManager.getSettings(myProject).WRAP_WHEN_TYPING_REACHES_RIGHT_MAGIN
letters[0]
MetadataInstrument2.class.getName()
GL20.glUniform1(location,v)
Assert.assertNotNull("Test output points to null",input.size() > 1)
Setting.listSetting("searchguard.audit.config.http_endpoints",Lists.newArrayList("localhost:9200"),Function.identity(),Property.NodeScope)
private class Tester extends AbstractTransportTest {   @Override protected ManagedChannel createChannel(){     if (!useOkHttp) {       InetAddress address;       try {         address=InetAddress.getByName(serverHost);         if (serverHostOverride != null) {           address=InetAddress.getByAddress(serverHostOverride,address.getAddress());         }       }  catch (      UnknownHostException ex) {         throw new RuntimeException(ex);       }       SslContext sslContext=null;       if (useTestCa) {         try {           sslContext=GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).build();         }  catch (        Exception ex) {           throw new RuntimeException(ex);         }       }       return NettyChannelBuilder.forAddress(new InetSocketAddress(address,serverPort)).flowControlWindow(65 * 1024).negotiationType(useTls ? NegotiationType.TLS : NegotiationType.PLAINTEXT).sslContext(sslContext).build();     }  else {       OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress(serverHost,serverPort);       if (serverHostOverride != null) {         builder.overrideAuthority(GrpcUtil.authorityFromHostAndPort(serverHostOverride,serverPort));       }       if (useTls) {         try {           SSLSocketFactory factory=useTestCa ? TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")) : (SSLSocketFactory)SSLSocketFactory.getDefault();           builder.sslSocketFactory(factory);         }  catch (        Exception e) {           throw new RuntimeException(e);         }       }       return builder.build();     }   } } 
cfg.setMetricsUpdateFrequency(30_000)
System.getProperty("tests.coverage")
backgroundTaskPersistence.findByG_N_T(groupId,name,taskExecutorClassName)
mTfs.ls(Constants.PATH_SEPARATOR,true)
existingContents2.size() == 1
PsiTreeUtil.getParentOfType(position,PsiClass.class,false,PsiCodeBlock.class,PsiMethod.class)
devicesById.remove(cachedGroupId)
PixelFormat.formatHasAlpha(mRequestedFormat)
new HTTPArgument(getArgumentName(),value,false)
logger.info("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
lexerEngine.equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
new DatagramDnsQuery(addr,null,1)
authenticationBytes != null
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new SuccessDialogFragment()
DescriptorRenderer.TEXT.renderType(getActualParameterType(descriptor))
responseClass == Void.class
del("*:*")
myProject.isDisposed()
item(IRON_PLATELEGS)
mon.startsWith("okt")
(Boolean)p.getConfig().get("enabled")
this.maxSessionIdleTimeout=maxSessionIdleTimeout
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
AL_KARID(180.0,30,13105,new WorldPoint(3299,3194,0))
createHandlerResult(tokenCredential,this.principalFactory.createPrincipal(uid),null)
value != null
text.charAt(start - 1)
!isTooLarge(vFile,contentText.length()) && getInputFilter(requestedIndexId).acceptInput(vFile)
logger.error("Error creating pool to " + host,t)
document.addKeyword(name,valueString)
wErrorTab.setControl(wErrorComp)
typeMismatchError=true
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ssyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
myLookup.getTopLevelEditor().getInlayModel().addInlineElement(caretOffset,createGrayRenderer(suffix))
TextAttributesKey.createTextAttributesKey("DEFAULT_PARAMETER",IDENTIFIER)
Locale.getDefault().getISO3Language()
sep < 0
selConnection > 0
!Strings.isNotBlank(newAlgorithm)
lessThan(3600000L)
new TabbedPaneWrapper()
new StringBuilder(239)
ctx.alloc().heapBuffer()
newNode.makeNonIndexable()
configuration.getMemoryMode() == CacheMemoryMode.OFFHEAP_TIERED
new GroupPartitionId(cacheId,partId)
new NeuralNetConfiguration.Builder().momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1e-1,1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).layerFactory(layerFactory).list(2).hiddenLayerSizes(new int[]{3}).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.weightInit(WeightInit.ZERO);       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
UsersAdminWebUpgrade.class
new StringBundler(content.length())
DEFAULT_VIBRATION=1000L
HashCode.fromInt(hashCode())
new LazyTailArrayNode(record,schema)
public Integer getFileId(){   return fileId; } 
clusterService().localNode().name()
intermediatePoints != null
String result
configurator.setExcludedEntries("*")
Assert.assertEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
id=15848
X.hasCause(e,InterruptedException.class)
!interactive
executor.awaitTermination(1000,TimeUnit.MILLISECONDS)
IS_USED_QUALIFIED_OUTSIDE_PACKAGE_MASK=0x400
this.globFileFilter
status == SocketStatus.DISCONNECT
NTP_TIMEOUT=5000
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("DH-DSS-DES-CBC3-SHA",KeyExchange.DHd,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA")
uriElementText.substring(myRange.getEndOffset(),uriElementText.length())
be.hasField(BibtexFields.MARKED)
Boolean.getBoolean(getDefaultStr(key))
getMockEndpoint("mock:test.after.1").expectedMinimumMessageCount(10)
PluginServices.getTagDataService().getTag(tag.tag,TagData.ID,TagData.MEMBER_COUNT)
new FindResultUsageInfo(findManager,psiFile,offset,findModel,result)
new String(_byteStore.get(dictId))
this(patchContent,false); 
routes.UsersController.index()
expected == char.class
ColorResources.getColor("tableGrid")
checkArgument(fnSpec.getSpec().getUrn().equals(CUSTOM_JAVA_DO_FN_URN))
ds.getFeatureMatrix()
estimatedLength < 8
filter == null
FISHING_ROD(346,1,32)
peer.getSyncBlockToFetch().size() < NodeConstant.SYNC_FETCH_BATCH_NUM
changes.serializeToJSON()
this.beanFactory.containsBean(beanName)
value.length() <= 3
{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}
LOG.error("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
fmd.getTargetClass()
ExitCode exitCode=ExitCode.BUILD_ERROR; 
/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractACLCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrp";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return "chgrp <group> <path>";   } } 
Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage("helloForRoles"))
metadata.comparator.compare(tombstone.start.bound,first.stop.bound) > 0
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound()
SPConstants.WSS_X509_PKI_PATH_V1_TOKEN10.equals(requiredType)
payload.getBodySources().size() == 1
V
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getName()
IndexReader reader=writer.getReader(); 
new IllegalArgumentException("string cannot be null")
new LiferayRepository(repositoryId)
/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(130,"your grammars contain a circular dependency and cannot be sorted into a valid build order",ErrorSeverity.ERROR)
private final StringBuilder buffer=new StringBuilder(512); 
@Override public final DivideBy on(String sql,Object... bindings){   and(sql,bindings);   return this; } 
assertCompletionVariants(m,"1")
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
{12,13}
cursor.getString(COLUMN_NAME)
result.expectedBodiesReceived("A+C+E+G+I","B+D+F+H+J")
size=500
Log.e("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
FilteringClassLoader filteringClassLoader=getSystemFilteringClassLoader(defaultClassLoaderFactory,java9Compatible); 
AcidUtils.getTableSnapshot(hive.getConf(),tbl,true)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,140000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
DumpUtils.checkDumpPermission(mContext,TAG,pw_)
max() < 32
jmsConfig.getReconnectPercentOfMax()
listener.iterationDone(valueNet,valueIterationCount)
(offset >= start && offset <= start + len) || (end >= start && end <= start + len)
getConnection().setFollowRedirects(followRedirects)
match(rule,goodSentence.getSource(),goodSentence.getTarget(),languageTool,srcTool)
PARTIAL_ORDERBOOK_SIZE=200
logger.debug("NODE {}: Device discovery resolved to thingType {}",foundProduct.getThingTypeUID())
y > 11
return 1; 
checkPlanDoNotMatch(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
mRvc != null
new BasicAWSSessionCredentials(accessKey,secretKey,sessionToken)
!selectedContacts.contains(recipient) && (existingContacts == null || !existingContacts.contains(recipient))
issue.getRuleKey().rule()
new ContinueProcessOperation(this,execution,true)
TreeState.write(cursor,5,7,7,8)
new PopupWindow(mContext)
CalciteTests.createMockSystemSchema(druidSchema,walker)
currentToken.hasType("operator","comment","numeric","text")
new ImmutableShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
media.getDuration() == 0
Strings.isNullOrBlank(kubernetesName)
n.getNodeData().getId().toLowerCase().contains(str)
@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
file.toLowerCase()
TRANSPORT_TRACE=true
mode.contains("creat") || mode.equalsIgnoreCase("1")
mUserPaddingStart > 0
position.setLatitude(field.getJsonNumber("Long").doubleValue())
mBoltPaint.setColor(backgroundColor)
inner.innerSetException((Throwable)result)
new DefaultDataType<Byte>(SQLDialect.SQLSERVER,SQLDataType.TINYINT,"tinyint")
mode.contains("survi") || mode.equalsIgnoreCase("0")
List<Long>
new JsonUt8Writer(sink)
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,myLastSelectedArtifact,false)
SchedulerKey key=new SchedulerKey(Type.ACK_TIMEOUT,client.getSessionId()); 
DLFileEntryTypeFinderUtil.countByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
myPriorityRange.contains(element.getTextRange())
norms=false
CacheData<AllTypes>
FAB_PREFIX + overridesLocation.replace('/','_')
Mutation rm=new Mutation(KEYSPACE1,dk.getKey(),cf); 
Map<String,LocalInspectionToolWrapper>
Object value
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_SERVER,false)
EXPLICIT_NO_UNSAFE_CAUSE == null
getInitializer()
new ListenerInfo("http",server.getLocalAddress(),openListener,null,channel)
!locations.isDefined()
JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,parent.fullName())
region == null
workCache.get(key)
new SimpleDateFormat("yyyy/MM/dd")
selenium.waitForText("//li[@title='Asset Publisher']/p/a","Add")
BASE_DEPTH + 2
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValue()
scheduleRemoveStartingWindow(wtoken)
JournalStructureLocalServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
new IllegalArgumentException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
lastVisibleIndex >= 0
InitialTutorialPrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
DBCException e
redisson.getMap("123",StringCodec.INSTANCE)
cfstore.getSSTables()
fieldTree.setStandalone(false)
(short)4
Mono<Void>
impl.getServerFactory().setBlockInjection(true)
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ descriptor+ "]"
i=5
dimensions != null || !dimensions.isEmpty()
IllegalArgumentException.class
event instanceof BuckEvent
Session.getInstance(prop,null)
Key.create("_prefer_target_jdk_javac_")
ParseUtils.parseHumidity(S300TH_DATA_1)
ImmutableSortedSet<SourcePath>
group.isUser()
DUE_DILIGENCE_MILLIS=50
(status & 0x20000000) > 0
success
CameraAccessException e
sb.toString()
SuperColumns.startOf(del.predicate.getSlice_range().finish)
new UpdateDeParser(expressionDeParser,buffer)
providedScope=false
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",jobId,queryableStateName)
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,false)
status_ != null
NFIUnsatisfiedLinkError ex
ThemeEnforcement.obtainStyledAttributes(context,attrs,R.styleable.TabLayout,defStyleAttr,R.style.Widget_Design_TabLayout)
sourceSet.getClasses()
new HashSet<RecordReplicationInfo>()
OkHttpImagePipelineConfigFactory.newBuilder(this,okHttpClient).setRequestListeners(listeners).setProgressiveJpegConfig(new SimpleProgressiveJpegConfig()).setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this)).experiment().setMediaVariationsIndexEnabled(new Supplier<Boolean>(){   @Override public Boolean get(){     return true;   } } ).experiment().setBitmapPrepareToDraw(true,0,Integer.MAX_VALUE)
cache1.remove(1)
BufferUtil.zeroBuffer(16)
renderRequest.getAttribute(WebKeys.SOFTWARE_CATALOG_PRODUCT_ENTRY)
((String)toRender).toLowerCase()
len != 4
TypesUtil.isAssignable(ltype,component,expression)
!ResultSetUtils.isServerSideFiltering(controller) && !controller.isHasMoreData()
new AssetPortletAddURL(portlet.getPortletId(),mesage,resourceBundle,locale,addPortletURL)
askForPermissions(new String[]{Manifest.permission.CAMERA},4)
decodeLast(ctx,e.getChannel(),cumulation,state)
startActivityAsUser(mAdapter.intentForPosition(0),new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
Preconditions.checkState(Files.exists(dir))
minHandlingTime == 0 | minHandlingTime > handlingTime
DEFAULT_HOME_DB_CACHE_COUNT=200
UNDEFINEND
log.warn("Existing HeaderManager '" + mgr.getName() + "' merged with '"+ value.getName()+ "'")
this.role
this.timeoutNs * Time.NS_PER_MS
DiagnosticFactory0.create(ERROR)
endpoint.getBus().getInInterceptors().size() == 1
sizeNeeded >= items.length
QualifiedNamesUtil.isSubpackageOf(fqn,fqName)
tree.getVisibleRowCount()
log.error("Error while closing command context",exception)
user.canAfford(getMoney())
Event.PREFIX_TEMP + n
Matrix.multiplyMM(m,0,mTmp,0,matrix.getDoubleValues(),0)
formatter=new DefaultFillFormatter()
op.get("address").set("host",host)
BROKER_PORT=9092
center.getY()
public Object getBean() throws Exception {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
new HTTPArgument(getArgumentName(),value,true)
ApplicationManager.getApplication() != null
s.toString().toUpperCase()
targetMethod.recordCall(posBefore,target,debugInfo,true)
lastModified <= headerValue + 1000
fr.delete()
renderer.filledRect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
getActivity()
upnpService != null
new UnsupportedOperationException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies")
columnNames.size() + 1
EhcacheCacheListenerAdapter<Serializable,Serializable>
assertEquals(401,te.getStatusCode())
(ObjectDeserializer)value
? extends T
!mSingleFolderMode
mail.getClass().getName()
deltaY < 0
new ChromeWebDriverImpl(projectDir,portalURL)
ddmTemplateModel.setCacheable(false)
new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR)
MessageOutput.Factory<GelfOutput>
metastore.getHostText()
String.class
partitions != null
TStatement extends PsiStatement
speed < 50
assetUri.getAssetName().toString()
presentation.refreshData(false,false)
this.seq
errorCode != FacebookRequestError.INVALID_ERROR_CODE
ColorResources.getColor("controlDarkShadow")
PsiSwitchLabelStatement.class
new IOException(e.getMessage(),e)
new KettleException(BaseMessages.getString(PKG,"JsonReader.Error.ParsingFile",filename))
MAX_ACTION_BUTTONS=2
assertThat(metrics).hasSize(152)
ServiceProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
((AstridActivity)getActivity()).setupTasklistFragmentWithFilter(newFilter)
return localVertices; 
return lastPath; 
public String getFileSize(){   return fileSize; } 
GridHadoopTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
callerApp == null
Assert.assertEquals(1,hits.getLength())
visible=true
ArrayList<String>
isText(mimeType) || APPLICATION_CEA608.equals(mimeType) || APPLICATION_SUBRIP.equals(mimeType)|| APPLICATION_TTML.equals(mimeType)|| APPLICATION_TX3G.equals(mimeType)|| APPLICATION_MP4VTT.equals(mimeType)|| APPLICATION_RAWCC.equals(mimeType)|| APPLICATION_VOBSUB.equals(mimeType)|| APPLICATION_PGS.equals(mimeType)
start >= str.length()
assertInCompletionList("app.<caret>name",false,"status_bar_style=","codesign_certificate")
loadingResult.getPackageRoots()
peekNode()
doCast(returnType)
entityMetadata.getIdProperty()
SSLHandshakeException e
request.paramAsBoolean("v",false)
value.isNull()
nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
uri.append(ENTITY_AMPERSAND)
new ShowcaseViewBuilder(activity)
log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()))
assertEquals(countDownLatch.getCount(),3L)
list(ObservableProperty.ANNOTATIONS)
ReycleableBufferedInputStream bis=new ReycleableBufferedInputStream(is,tempBytes[0]); 
SpringApplication.class
assertEquals(12718,(long)stats.getCrawledBytes().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
XmlErrorMessages.message("cannot.resolve.symbol")
new StreamError(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR,streamId)
fromTypeID != null
popupWindow.setWidth(menuWidth)
matcher.matches()
mService.oneTouchPlay(getCallbackWrapper(callback))
filteredMessage.add(perRequestFilter(r,new Entry(o,r,f,o),false))
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
manager.age(Locale.ENGLISH,130000)
dbSqlSessionFactory.getDatabaseSchema() != null
myVcsManager.hasExplicitMapping(filePath)
run()
new Button(shell,SWT.CHECK)
Bytes.toString(qualifierName)
parsedResult.getSqlType()
GrailsWebRequest requestAttributes=new GrailsWebRequest(request,response,getServletContext()); 
total > 0
roundDist == 500
ANTIVENOM(ItemID.ANTIVENOM4,GameTimerImageType.ITEM,"Anti-venom",12,ChronoUnit.MINUTES,true)
new Random(System.currentTimeMillis())
logger.info(String.format("server disconnect (%s)",this.nsp))
connection.getRequestProperty("User-Agent") != null
LOG.error("Could not correlate acknowledgment with dispatched message: " + ack)
Long.valueOf(deadline)
Assert.assertEquals(0,map.size())
addViewInLayout(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
collectors.size() > 1
token.equals(";") && !prevToken.equals("\u00a0")
this.snappedTopInset()
inner.deletedNodes()
oldVersion == 3
ReplaceTranslationTaskTest.class
factory.createCatchSection(exceptionType,name,file)
this.compilations.remove(codeTask)
AbstractBottomUpTraversal<T,Object>
message.getMessage().getExpiresInSeconds() * 1000
maxDistance=20
token != null
dirs[i].isDirectory()
context.report(ISSUE,context.getLocation(node),"Don't call sleep. Use MockTimer instead.")
range.contains(offset)
mNavigationView != null
factory.getDestination(info)
UIUtil.invokeAndWaitIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
Matrix.multiplyMM(m,0,matrix.getDoubleValues(),0,mTmp,0)
immediate=false
id=15837
this.url=uri
sm.getString("serverContainer.duplicatePaths",path)
Integer.valueOf(rightStr)
JSONException e
-1772260513
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,true)
serverSocket == null
timeLeft >= 0
nativeEvent_.getKeyCode() != KeyCodes.KEY_TAB
getPolicy().getMaxBinaryMessageBufferSize()
LOG.error("Can not get java doc HTML text from autocomplete context menu in editor")
i < 50
assertOpenEventually(latch,3)
messageParts.remove(mpart)
handle.parent().exists()
applyCurrentState()
oldOverride.removeParameter("enabled")
DatabaseFactory.getInstance().openDatabase(config.getString("database.url"),config.getString("database.user"),config.getString("database.password"),null,resourceAccessor)
getName().equalsIgnoreCase("LONG") || getName().equalsIgnoreCase("NCLOB")
_buildTemplateWithGradle("npm-isomorphic-portlet","isomorphic-dependency-management","--dependency-management-enabled","true")
Math.min(mXAxis.mAxisMinimum,pos.y)
assertEquals(2,atl.size())
logger.info("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
String.format("%.4f",s.getValue())
TypeElement formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER); 
logger.error("Timeout occured when executing commandLine '" + commandLine + "'",e)
new EmoteClue("Cheer in the Shadow dungeon. Equip a rune crossbow, climbing boots and any mitre.",ENTRANCE_OF_THE_CAVE_OF_DAMIS,new WorldPoint(2629,5071,0),CHEER,any("Any mitre",item(GUTHIX_MITRE),item(SARADOMIN_MITRE),item(ZAMORAK_MITRE),item(ANCIENT_MITRE),item(BANDOS_MITRE),item(ARMADYL_MITRE)),item(RUNE_CROSSBOW),item(CLIMBING_BOOTS))
getter.getContainingClass().findMethodsByName(suggestedName,true).length == 0
new EvaporateTlext()
COOKIE_SYNC_MANAGER=true
size() == 0
new NamedList()
@Override public void headersEnd(int streamId) throws ConnectionError {   Stream stream=getStream(streamId,true);   StreamProcessor streamProcessor=new StreamProcessor(stream,adapter,socketWrapper);   streamProcessor.setSslSupport(sslSupport);   socketWrapper.getEndpoint().getExecutor().execute(streamProcessor); } 
RESOURCES_UNAVAILABLE_OR_UNSPECIFIED=44
(Byte)array[this.index]
selectionChildIndices[j] == i
loader.filePath != null
assertEquals(ex.getCause().getMessage(),"Unable to read 1 bytes, got 0")
private String modSource; 
verify(workspaceFilesCleaner)
stream1.getId()
assertNotNull(message + ": expected should not be null",value)
tableHasColumn(oldTableName,"commentId")
TestUtil.nextInt(random(),1,IndexWriter.MAX_TERM_LENGTH)
EntryStream.of(1,1,2,null,3,null).nonNullKeys()
jobState.clearExceptions()
queueAccess.get(queueAccess.size() - 1) != selectedItem.getId()
WebSocket conn
/**   * @author yole  */ public class CoverageProjectViewClassNodeDecorator extends AbstractCoverageProvejctViewNodeDecorator {   public CoverageProjectViewClassNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager dataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=dataManager.getCurrentSuitesBundle();     final Project project=element.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     if (element instanceof PsiClass) {       final String qName=((PsiClass)element).getQualifiedName();       if (qName != null) {         appendCoverageInfo(cellRenderer,javaCovAnnotator.getClassCoverageInformationString(qName,dataManager));       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager coverageDataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=coverageDataManager.getCurrentSuitesBundle();     final Project project=node.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }  else     if (value instanceof PackageElement) {       PackageElement packageElement=(PackageElement)value;       final String coverageString=javaCovAnnotator.getPackageCoverageInformationString(packageElement.getPackage(),packageElement.getModule(),coverageDataManager);       data.setLocationString(coverageString);     }     if (element instanceof PsiClass) {       final GlobalSearchScope searchScope=currentSuite.getSearchScope(project);       final VirtualFile vFile=PsiUtilCore.getVirtualFile(element);       if (vFile != null && searchScope.contains(vFile)) {         final String qName=((PsiClass)element).getQualifiedName();         if (qName != null) {           data.setLocationString(javaCovAnnotator.getClassCoverageInformationString(qName,coverageDataManager));         }       }     }   }   @Nullable private static JavaCoverageAnnotator getCovAnnotator(  final CoverageSuitesBundle currentSuite,  Project project){     if (currentSuite != null) {       final CoverageAnnotator coverageAnnotator=currentSuite.getAnnotator(project);       if (coverageAnnotator instanceof JavaCoverageAnnotator) {         return (JavaCoverageAnnotator)coverageAnnotator;       }     }     return null;   } } 
i=0
new AndroidDownloader().downloadAsString(fileListURL)
UPPER_BOUND_VIOLATED.on(argumentTypeReference,substitutedBound)
project.isInitialized()
NoopSegmentPublisher.class
GridComponentType.HADOOP.create(true)
log.isWarnEnabled()
Primitive.longObjectMap(32)
this.isDefaultAutoCommit()
Enumeration<String>
l_Inflater.inflate(R.layout.adv_user_strings_list,parent)
req.getRange()
application != null
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_LANGUAGE,false)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
dimension.height+=hGap
CONFIG_DEFAULT_VERSION.getPath()
_buildTemplateWithGradle("activator","activator-dependency-management","--dependency-management-enabled","true")
TypedQuery<Long>
return maxPreferredOffsetToUse; 
FunctionTypesKt.isExactFunctionOrExtensionFunctionType(((ClassDescriptor)containingDeclaration).getDefaultType())
percentComplete=50
new IllegalStateException()
GeneralRouterProfile p; 
metaContact.getDisplayName().startsWith(queryString)
mTfs.mkdirs(new TachyonURI(dirPath))
t.report(n,UNUSED_PRIVATE_PROPERTY)
case 2: 
mSupportsSpeed ? 1 : 0
targetHeight <= 0
sshd.stop()
deletionRetentionStrategy == null
minor < 5
keyspace()
end < textLength
outLatch.startLatch.await(200,TimeUnit.MILLISECONDS)
JsonProcessingExceptionMapper.class
ConfigserverUtil.createExampleConfigserverConfig()
language.is(knownLanguage)
sourceFile.length() > 10 * 1024 * 1024
app().repositories()
assertEquals(ex.getCause().getMessage(),"ClassInfo's name should be non-null")
Arrays.sort(timestamps,unused + 1,10)
Exception e1
USE_STEP_BY_STEP_RENDERING.setModeDefaultValue(ApplicationMode.CAR,true)
a.getBoolean(R.styleable.DragSortListView_use_default_controller,false)
Util.SDK_INT <= 25
assertEquals(2,tool.check("Een test test, die een fout moet geven.").size())
artifact.getRootRelativePath()
reformatRangeImpl(element,startOffset,endOffset,true)
new byte[19]
findCodecForFormat(false,format)
document.getRootTag() != null
computeSemiJoin(inputStatistics,inputStatistics,x,unknown)
log.warn("SQL Validation error",ex)
arguments[2]
x < maxX
addEdge(i3,i0,false,true)
new EmtpyScrollingLogger()
wpdb.savePost(post,59073674)
json.toString(1)
this.messageService.fluxPostAuthorizeBeanFindById(2L).contextStart(withUser)
constructors[TXN_REMOVE_ALL]
Validator.isNull(modified)
targetConfig.useDynamicConfigurations()
getWriter().println("FAILED")
(Long)version
new CompilerException(sourceName,e.line,e.getCause())
getActivity().findViewById(R.id.detail_title) != null
autoClear
TypeSpec.parse(builder,true)
contains="doIntrinsicCachedTruffleObject"
assertEquals(3,ti.nrOfInvocations)
contains="doCachedTypeCachedOffset"
super(expression," \t",startTime,zone,0,1); 
(device=1 << i) <= AudioSystem.DEVICE_OUT_DEFAULT
new OneRun(43.733802,7.413433,43.739662,7.424355,2225,105)
LogManager.getContext()
private static void hookResources() throws Exception {   if (Build.VERSION.SDK_INT <= 16) {     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=1;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,callbackGetTopLevelResources);     }   }  else   if (Build.VERSION.SDK_INT <= 18) {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       try {         findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;         GET_TOP_LEVEL_RES_PARAM_CONFIG=3;         GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       }  catch (      NoSuchMethodError ignored2) {         try {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,String.class,boolean.class,callbackGetTopLevelResources);         }  catch (        NoSuchMethodError ignored3) {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         }       }     }   }  else {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     GET_TOP_LEVEL_RES_PARAM_BINDER=4;     try {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);       GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;       GET_TOP_LEVEL_RES_PARAM_CONFIG=3;       GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       GET_TOP_LEVEL_RES_PARAM_BINDER=5;     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);     }   }   XC_MethodHook.Unhook paranoidWorkaround=null;   try {     paranoidWorkaround=findAndHookMethod(Resources.class,"paranoidHook",XC_MethodReplacement.DO_NOTHING);   }  catch (  NoSuchMethodError ignored) {   }   Resources systemResources=new XResources(Resources.getSystem(),null);   setStaticObjectField(Resources.class,"mSystem",systemResources);   if (paranoidWorkaround != null)   paranoidWorkaround.unhook();   XResources.init(); } 
Object item=provider.read(); 
Double.max(dgg / gg,0.0)
new Notification(StatusBarTest.this,R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
object.realm.id == this.id
assertParses("scan class path",CommandLineOptions::isScanClasspath,"--scan-class-path","-a","--all")
DifDiffViewer.canShowRequest(context,request)
mccStr.isEmpty()
new FallbackKeySettings(_settings,_fallbackPaths)
ENABLE_SQLITE_LOG=true
c * b
!wasRead
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR,NextEvent.INVOICE_PAYMENT_ERROR)
InternalHandlerSettings.class
public V get(@NotNull T owner){   return (V)unsafe.getObjectVolatile(owner,offset); } 
e.getMessage()
this.capNBT != null
responseBodyRegex == null
clock.setDeltaFromReality(AT_LEAST_ONE_MONTH_MS)
contentLength > 0
appWindowToken == null
new Insets(6,0,0,0)
_ginfo != null
assertEquals(obj,this.serializer.toObject(this.serializer.toBytes(obj)))
SimpleAttributeDefinitionBuilder.create("file",ModelType.OBJECT,true)
store.setZkSessionTmeout("15s")
tag1.getText()
RoleLocalServiceUtil.getRole(companyId,name)
route.getOutputs().isEmpty()
ServletUtil.prepareParameters(p,true,true,false,false)
_("")
sampler.getFileField()
Boolean useGrouping=(Boolean)properties.get(NumberFormatSample.PROP_USE_GROUPING); 
ar.cause()
selectionArgs[1]
DefaultManagementAgent.class
public static final JPQLTemplates DEFAULT=new BatooTemplates(); 
Constant.messages.getString("start.gui.cmdline.session.does.not.exist")
fileType.isRd() || fileType.isJS() || canPreviewFromR
entry.type != DownloadActivityType.SRTM_FILE
UIUtil.createImage(renderer,size.width,size.height,BufferedImage.TYPE_INT_RGB)
dimension.width - (dimension.width == 0 ? 0 : PADDING)
LOG.error("Shortcuts of global AnActions should not be changed outside of KeymapManager")
_portalResiliencyAction.execute(null,null,_mockHttpServletRequest,_response)
note.getContent()
JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING
public DerivedBuilder setProxyPassword(String password){   this.proxyPassword=password;   return this; } 
process.getInputStream()
new Label(shell,SWT.RIGHT)
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod1.run();   } } 
writeFile.sync()
LOGGER.error("runCommand error: " + ex.getMessage())
r.locals.ast=returns
new CommandFormatException(result.toString())
isShowOffline
findTypeFromRef(expression)
!isPartialUpdate
id=15808
logger.info("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
return ES5; 
tableItem.setText(5,Const.NVL(meta.getPassword(),""))
createHandlerResult(yubiKeyCredential,this.principalFactory.createPrincipal(uid),null)
totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()
@Override public final Object clone(){   return this; } 
GestureListener listener=myListeners.get(frame); 
assertEquals(329,error)
dataType.equals("int") || dataType.equals("long")
setNumber(String.valueOf(integerPart))
zipInspector.assertFileExists("assets/secondary-program-dex-jars/metadata.txt")
4 * data.length
14
Column::toString
getCurrCapacity()
parameter.getType()
pluginContainer.lookup(ComponentConfigurator.ROLE,configuratorId)
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-logging-juli-")
name="java:/ConnectionFactory"
ColorResources.getColor("tabbedPaneBorderHighlight")
log.warn("Hooking new default : onErrorDropped")
step()
Status.constructStatuses(get(getBaseURL() + "statuses/mentions.json",null,true))
optionsMenuHelper.item(R.string.settings_activity).icons(R.drawable.ic_action_settings_light,R.drawable.ic_action_settings_dark)
JspDocumentParser.class
private GenericSendAndRecieveGateway gateway; 
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new PruneUnreferencedOutputs())
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setNeutralButton(R.string.ok,null)
tilesRect.getRotate()
Utils.class
LOG.error("Could not find default spell checking inspection")
PaginationTestUtil.of(10,1)
return true; 
assertThat(props).hasSize(5)
!workspaceName.equals(infoName)
UastUtils.isChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
labels != null
new FlywayException("Unable to instantiate class: " + clazz)
uncollectedPointCreater.createUnCollectedPoint(timestamp)
@Internal
CamelCloudServiceCallConfiguration.class
numIndexDims == 1
new DatabaseFormatterOracle()
updateCntr0 == null ? 0 : updateCntr
!SystemPropertyUtil.getBoolean("io.netty.noJdkZlibDecoder",true)
myInflatorId != -1
annotation.names()
checkLocationAccess(uid,packageName,allowedResolutionLevel)
iconSize * DisplayMetrics.DENSITY_LOW > availableHeight
tessellator.tessellatePolygon(false,close,true)
private Integer buffer=null; 
logger.error("Could not locate PropertySource: " + (errorBody == null ? error == null ? "label not found" : error.getMessage() : errorBody))
assertThat(decorator.generatesIssuesMetrics()).hasSize(16)
StreamOut.transferSSTables(session,ssTableReaders,ranges)
mTfs.getFile(fileId)
((NodeDescriptor)node1.getUserObject()).getElement() == null
this.mChildren.remove(pEntityMatcher)
@Console
mSpinner != null
ObjectUtils.chooseNotNull(findLaf(lookAndFeelInfo.getClassName()),lookAndFeelInfo)
ParamUtil.getString(actionRequest,"publish")
super.onMeasure(widthMeasureSpec,heightMeasureSpec)
gatt.enableAdverisingSet(this.advertiserId,enable,timeout)
active && mCurrentUser != UserHandle.USER_NULL
final StringBuffer replacement=new StringBuffer(tag.getValue().getText()); 
((PresenceStatus)status).getStatus() > PresenceStatus.ONLINE_THRESHOLD
Boolean.valueOf(request.getParameter("notify"))
ps == null
this.jumpSpeed=fallSpeed
Assert.assertSame(_ehcachePortalCache.ehcache,ehcache2)
SCHEMA_VERSION=3
AnnouncementsWebUpgrade.class
new java.util.Date()
new HTreeMap<K,Object>(engine,true,defaultSerializer,serializer,null)
Entry<Url,Channel>
vis.fontAction(eastAsia)
getEditedSchemeSettings(myProjectScheme)
getTree().getVisibleRowCount()
ResponseImpl header(String name,Property property); 
public class ParseTest extends BaseParseTestCase {   public void test1() throws Throwable {     myFixture.testHighlighting("test1.regexp");   }   public void test2() throws Throwable {     myFixture.testHighlighting("test2.regexp");   }   public void test3() throws Throwable {     myFixture.testHighlighting("test3.regexp");   }   public void test4() throws Throwable {     myFixture.testHighlighting("test4.regexp");   } } 
assertEquals(1690,res.getWeight(1,2),10)
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource(EmptyAsset.INSTANCE,"beans.xml")
@XmlAttribute(name="miterlimit") protected BigDecimal miterlimit; 
startActivityAsUser(intent,new UserHandle(UserHandle.getUserId(mLaunchedFromUid)))
getString(R.string.known_issue_wrong_base_directory)
new FileAttribute("stubIndexStamp",2,false)
getSubstring(0,50)
new SSALinarScanResolveDataFlowPhase(this)
createConfig()
ret.setComplete(e,response)
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false)
BOLD
blockStore.init(new HashMap<Long,List<IndexedBlockStore.BlockInfo>>(),new HashMapDB(),null,null)
namespaceReverseRouter=false
mNextNonWakeupDeliveryTime > nowELAPSED
@Override public void setting(int identifier,long value) throws ConnectionError {   trace.append("0-Settings-[" + identifier + "]-["+ value+ "]\n");   remoteSettings.set(identifier,value); } 
container.lookup(BuildContextManager.ROLE)
publisher.publishWanReplicationUpdate(name,view)
prettyPrintFileName(file,true)
Math.min(clientCount,1)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,0,mUserId)
VERSION=12
log.info("Setting {} to: {}",configKey,soTimeout)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted)
Boolean.valueOf(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
column.getName()
TelephonyManager.getDefault().getPhoneType()
flyway.info().all()[2]
this.conf.addResource(coreSiteXMLInputStream)
new StepPluginMeta(AbortMeta.class,"Abort",Messages.getString("BaseStep.TypeLongDesc.Abort"),Messages.getString("BaseStep.TypeTooltipDesc.Abort"),"ABR.png",CATEGORY_EXPERIMENTAL)
logger.info(String.format("connect attempt timed out after %d",timeout))
new ArrayList<>()
assertEquals(3,StringUtil.getOccurrenceCount(text,"checkExpressionValueIsNotNull"))
Preconditions.checkNotNull(containerIdGenerator)
System.currentTimeMillis() + 15000
locationRequest.setInterval(fastestUpdateInterval)
container.getLogger().warn(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
client.getLocalPlayer() != null
exchange.get(BindingOperationInfo.class)
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()
myFixture.testCompletionVariants(getTestName(true) + ".go","bar","break","const","continue","defer","for","go","if","return","fallthrough","goto","select","switch","var","struct","map")
saveTask(taskDefinition)
tag.setLabelPosition("left")
assertEquals(300,counter.get())
y * height
new TreeMap<>()
chooser.showSaveDialog(null)
T
xml.attribute("name",name)
new DefaultSensorContext(mock(InputModule.class),settings.asConfig(),settings,fs,activeRules,analysisMode,sensorStorage,runtime,branchConfig)
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
fragmentCollectionPersistence.filterCountByGroupId(groupId)
windowIndex > playbackInfo.timeline.getWindowCount()
!name.startsWith(prefix)
cubeManager.mergeSegments(cube,0L,1386835200000L)
DomUtil.getRawType(type)
Files.exists(subAssetFile)
new IllegalArgumentException("Legacy advertisement can't be connectable and non-scannable")
PsiClass[]
m.getCurrentJobWaitTime()
liquid.canonical().getRenderingIcon() != null
(int)timeoutMs * 1000
myEditor.getScrollingModel().getVisibleArea()
operandStack.remove(2)
dim.containsKey(filterKey)
timeout=10_000L
alarm.getTime()
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) == null
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf")
new EnterSelectionDialog(shell,props,schemaNames,"Select a partition schema","Select the partition schema to use:")
assertTrue(exceptionMessage.contains("Invalid core"))
removeFlagFromCache(account,ids,flag)
private final BucketResultListener bucketResultListener; 
readIf("READ")
setDozeInFrontAlphaDelayed(mAodFrontScrimOpacity,30)
rootsIndex.findAllParentDescriptors(file,null,myContext)
new LowerCaseFilter(matchVersion,source)
public SELF setJavaHome(File javaHome){   operationParamsBuilder.setJavaHome(javaHome);   return getThis(); } 
licensee.collectionEnabled()
baseRevision.getChangeset().equals("")
new StringRepresentation(resourceGetRet.toString())
ChaosInstanceSelector.class
StringUtil.compareVersionNumbers(version,OS_VERSION)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class)
m.muli(beta1)
first + SEPARATOR.length()
(ErrorMessage)response
LinkedBlockingQueue<Runnable>
boundary.startsWith("\"")
sdk != 21 || sdk != 22
saveAll(tableCollection,modelSaver.getWritableDatabase())
a(1,2,15)
connect(monitor)
k < 100
mPackageManager.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS)
parser.getBoolean(KEY_ADJUST_BRIGHTNESS_DISABLED,false)
builder.timeValueField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mPluginsContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
JsAstUtils.fqnWithoutSideEffects(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
this.controller.saveService(new MockHttpServletRequest(),new MockHttpServletResponse(),data2,mock(BindingResult.class))
result == JOptionPane.CANCEL_OPTION
meta.getReferenceStepName()
EPS_THRESHOLD=1e-5f
mNotificationsUtilsWrapper.mapJsonToFormattablbeContent(bodyArray.getJSONObject(i))
new AuthenticationException("Error validating LDAP user")
Set<UUID>
new EnterSelectionDialog(shell,props,functionDesc,Messages.getString("SystemDataDialog.SelectInfoType.DialogTitle"),Messages.getString("SystemDataDialog.SelectInfoType.DialogMessage"))
errorMessage.endsWith(" is deprecated")
new GridLayout(0,1)
ref.virtualMachine().canGetInstanceInfo()
this.mTextureRegions[pTileIndex].setTextureY(pTextureX)
service.getDomain().getName()
fundingUnsuccessfulTextView.setText(bannerSuccessfulString)
ShrinkWrap.create(WebArchive.class).addClass(MyBatchlet.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsManifestResource("META-INF/batch-jobs/myJob.xml","batch-jobs/myJob.xml")
Outdoor(4)
selectedTabLine.getTranslateX() == newTransX
ConfigurationFromContext.COMPARATOR.compare(producer,first) >= 0
LAST_VERSION=486
start.expectedMessageCount(6)
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public String loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
BCFactoryBlocks.pump != null
logger.warn("Cannot set group volume ({})",e.getMessage())
lastRequestTime + publicKeyCacheTtl > currentTime
Object name
((TcpDiscoverySpi)cfg.getDiscoverySpi()).setJoinTimeout(8000)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
new ElementsChooser<ComponentElementProperties>()
scores.getAlgorithmName()
gatherServerResponses(realtimeCompositeFuture,scatterGatherStats,true,realtimeTableName,processingExceptions)
mDateView.setTypeface(Typeface.SANS_SERIF)
FLING_VEL_THRESHOLD=250
position.getLatitude()
!_javaSource && (_lineTabLevel == 1)
assertEquals("Range for response status value " + result.getResponse().getStatus(),getHttpStatusSeries(result),HttpStatus.Series.INFORMATIONAL)
TokenSet.create(OUT_KEYWORD)
waitForClose(50000)
namespaceDescriptor.getQualifiedName()
new AutoValue_RegistrationResponse(sidecarRegistrationConfiguration,configurationOverride,actions,assignments)
complete.expectedBodiesReceived("finish","stop","faulted","except")
BTraceUtils.setInstrLevel(1)
mQsContainer.getLayoutParams()
/**   */ class SctpClientPipelineSink extends AbstractScptChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
MockReset.before()
cxt != null
e.isShiftPressed()
Arrays.asList(new CommaWhitespaceRule(messages),new DoublePunctuationRule(messages),new GenericUnpairedBracketsRule(messages),new HunspellNoSuggestionRule(messages,this),new LongSentenceRule(messages),new UppercaseSentenceStartRule(messages,this),new MultipleWhitespaceRule(messages,this),new SentenceWhitespaceRule(messages),new WordRepeatBeginningRule(messages,this),new PostReformPortugueseCompoundRule(messages),new PortugueseReplaceRule(messages),new PortugueseWordRepeatRule(messages,this),new PortugueseWrongWordInContextRule(messages))
new ColorUIResource(0xFFFFFF)
assertContainsParams(CollectionAdminRequest.createCollectionWithImplicitRouter("foo",null,"bar",1).getParams(),ACTION,NAME,"shards","router.name","replicationFactor",ZkStateReader.NRT_REPLICAS)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_strsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
keyGen.initialize(1024)
setupFillPaint(paint,opacity)
RegisterRules2.class
pubnub.getConfiguration().getProxyAuthenticator()
assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,true,true)
context.getString(R.string.history_attach_added,item,attachmentName)
SiteTeamsWebUpgrade.class
dl.info("_offset_column","Offset is only supported for regression.")
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",true)
insertedElement instanceof PsiPlainText
synchronized (threadCount) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
actualParamType.asReferenceTypeUsage().isRawType()
new AssertionError("The dataflow failed.")
UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)
expect(cluster.getClusterName()).andReturn("clusterOld").times(2)
conversation.getContactJid().split("/")
++cursor == 0
offset != null
ExprEval.of(null)
gen.addLoadImmediate(Register.R0,1234567890)
Slog.e(TAG,"Failed to build intent for " + packageName)
CHECK_DB_AT_VERSION=40
JavaPlugin.class
view.getContext().getPackageName()
new Environment()
topPanel.addView(mCustomTitleView,lp)
!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
super.setV(u)
mIsAnimating.get() & mTargetZoomLevel.get() >= maxZoomLevel
redirectToErrorPage(authSession,message,null,parameters)
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17_1","JDK17_2")
/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends AbstractCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } 
Slog.wtf(TAG,message,th)
/**   * Integration tests for GRPC over HTTP2 using the Netty framework.  */ @RunWith(JUnit4.class) public class Http2NettyTest extends AbstractTransportTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer(){     try {       startStaticServer(NettyServerBuilder.forPort(serverPort).flowControlWindow(65 * 1024).sslContext(GrpcSslContexts.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     try {       return NettyChannelBuilder.forAddress(TestUtils.testServerAddress(serverPort)).sslContext(GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()).build();     }  catch (    Exception ex) {       throw new RuntimeException(ex);     }   } } 
thisJob._state == JobState.CANCELLED
controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
metric.getKey().toLowerCase()
AsyncIOWriterAdapter.class
id=15839
assertTrue(CompressionTest.testCompression("SNAPPY"))
value >= 0
Log.info(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
GridHadoopTestUtils.jsonToMap(restCfg)
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
REMOVALS_UPDATER.compareAndSet(this,nanos,nanos + duration)
mFileLength < mBlockSize
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[buildfile]","includes = //java/com/facebook/defaultIncludeFile","[project]","check_package_boundary = false","temp_files = ''")
((PyRemoteSdkAdditionalData)sdk.getSdkAdditionalData()).getRemoteSdkCredentials()
LOG.error("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
new FileAttribute("python_language_level_persistence",1)
ch.write(new LogEvent(null,-1,file.getAbsolutePath(),line))
new AssertionError("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
getAssertNoDeletesDirectory(newDirectory())
intermediateArtifacts.strippedSingleArchitectureBinary()
result.getContentType().equalsIgnoreCase(PresContentClient.CONTENT_TYPE)
socketFile.toString().length() >= 108
LanguageTest.class
new PreFlexRWSegmentInfosFormat()
new IndexWriter(dir,analyzer,true)
user.getHome()
FlowManager.getWritableDatabase(getTable())
String.format("Cannot complete a promise more than once! Present value: %s, attempted to set: %s",value)
@Path(PATH_NODE_INDEX_ID)
badLine.getMessage()
new ExpandableItem()
podStatus != null
SwingUtilities.invokeLater(() -> {   try {     if (!isDisposed()) {       myGutterComponent.updateSize();     }   }   finally {     updatingSize=false;   } } )
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target2.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
addProperty(prop,true)
outputBatchSize=25
StringBuilder className=new StringBuilder(); 
NetworkParameters.testNet()
userHasMagnificationServicesLocked(userState)
!(o instanceof BooleanClause)
RequestContextHolder.currentRequestAttributes()
new EmbeddedKafkaCluster(3)
new ConnectionError(sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),Http2Error.COMPRESSION_ERROR)
assertEquals(handlers.size(),2)
private BaseAdapter mListAdapter; 
FileUtilRt.loadFile(new File(getBasePath() + File.separator + getTestDir()+ File.separator+ getTestName(true)+ "."+ ext))
testClass.getMethod(SUITE_METHODNAME,new Class[0])
testSame("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
sctpChannelClass.getMethod("open",null)
String canonicalPath
proxyHTTPPort.setText(Integer.toString(Preferences.getInteger("proxy.https.port",8443)))
new AssertionError()
goalStartXp <= 0
authentication.hasDefined(USERS)
nodeManager.getAllNodes()
jobDataMap.get(JobDetailAwareTrigger.JOB_DETAIL_KEY)
Arrays.deepHashCode(valSrcQueries)
JMSDestination.class
name == null
GL20.glVertexAttribPointer(indx,size,normalized,stride,(FloatBuffer)buffer)
minutes >= 2
128 * 1024
assertNotEquals(BuildRuleSuccessType.BUILT_LOCALLY,logEntry.successType.get())
endIndex == 0
getSrcPath("checks/javadoc/Input_01.java")
fm.beginTransaction().hide(samples)
new CompositeException(e,t)
Color.fromRGB(0xABABAB)
getWebElement(webDriver,locator,timeout)
appName != null
UIUtil.isCloseClick(e,MouseEvent.MOUSE_RELEASED)
searchDisplay.initEmpty()
public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
LOGGER.debug("{} - Reset ({}) on connection {}",resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ Cell deepClone(); 
new StringBundler(7)
start >= length
cr.isUnderflow() & !last
fragFilename == null
Object changeList
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.50f)
merge(new byte[]{flags},signature,payload)
(JobResponse)response
new WitnessCapsule(ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),10L,URL)
file.getPath()
Throwable t
new BooleanPreference("use_step_by_step_rendering",true,false)
expiresOn == null
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     final ProgressWindow progressWindow=new ProgressWindow(false,null);     progressWindow.setTitle("Looking for TODOs...");     progressWindow.setText("Please wait...");     final Runnable process=new Runnable(){       public void run(){         if (myAllTodos == null)         return;         ApplicationManager.getApplication().runReadAction(new Runnable(){           public void run(){             myAllTodos.rebuildCache();             myCurrentFileTodos.rebuildCache();           }         } );         ApplicationManager.getApplication().invokeLater(new Runnable(){           public void run(){             myAllTodos.updateTree();             myCurrentFileTodos.updateTree();           }         } ,ModalityState.NON_MMODAL);       }     } ;     Thread thread=new Thread(new Runnable(){       public void run(){         ProgressManager.getInstance().runProcess(process,progressWindow);       }     } ,"Todo finder");     thread.start();   } } )
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout)
Thread.sleep(50)
cacheController.add(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
source=this
equalTo(6)
LOG.debug("Exception while creating remote block reader, datanode {}",source,e)
e instanceof InterruptedException
super.createToolbarActions()
KEY_LENGTH=20
myScopeSlider.setValue(2)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
propName.equals(Constants.FACTORY) || propName.equals("scope") || propName.equals("auth")
logger.error("Plugin class " + pluginClass)
hashInd == -1
SCAN_STATUS_PARTIAL=0
new Requirement(Skill.SLAYER,61)
!options.getJvmOpts().contains("-Xmx")
assertEquals("There should be no files",files.length,0)
eventJournalConfig.getMapName()
_sharingEntryLocalService.addSharingEntry(TestPropsValues.getUserId(),_groupUser.getUserId(),classNameId,_fileEntry.getFileEntryId(),_group.getGroupId(),Collections.singletonList(SharingEntryActionKey.VIEW),serviceContext)
CollectionItemInfo.obtain(column,1,row,1,isHeading,isSelected)
process.destroy()
layout.setRefreshingLabel(label)
private Stream getStream(int streamId,boolean unknownIsError) throws ConnectionError {   Integer key=Integer.valueOf(streamId);   Stream result=streams.get(key);   if (result == null && unknownIsError) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR);   }   return result; } 
proxy == null
report(n,MISPLACED_ANNOTATION)
tableCache.getTypedObjects(monitor,this,PostgreTableReal.class)
config().getSoLinger() > 0
HttpHeaderValues.IDENTITY.equals(targetContentEncoding)
feedForward()
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs())
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",500,"application/xml","resources/add_book.txt",null)
wrapRequest
new BuildCancelledException("Build interrupted")
e.getCause()
lastIme == null
/**   * An SQL dialect for Postgres 9.4 and later. Adds support for various date and time functions  */ public class PostgreSQL94Dialect extends PostgreSQL92Dialect {   /**   * Constructs a PostgreSQL94Dialect  */   public PostgreSQL94Dialect(){     super();     registerFunction("make_interval",new StandardSQLFunction("make_interval",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamp",new StandardSQLFunction("make_timestamp",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamptz",new StandardSQLFunction("make_timestamptz",StandardBasicTypes.TIMESTAMP));     registerFunction("make_date",new StandardSQLFunction("make_date",StandardBasicTypes.DATE));     registerFunction("make_time",new StandardSQLFunction("make_time",StandardBasicTypes.TIME));   } } 
old.isUnderlined()
((FillLayout)parentLayout).marginHeight=5
CreateGrid(1,1)
column.isMarkedForDelete()
BuildRule rule=createJavaLibraryBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(graphBuilder); 
_buildTemplateWithGradle("mvc-portlet","mvc-dependency-management","--dependency-management-enabled","true")
enabled=true
val.get(key)
day <= 23
!DNSUtil.isNameCoveredByPattern(dnsId,identity)
MessageNotifier.updateNotification(context,masterSecret,true,true,reminderCount + 1)
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK
mImageManager.load(holder.mImgFeatured,new ColorDrawable(ContextCompat.getColor(holder.mImgFeatured.getContext(),R.color.grey_lighten_30)),ScaleType.CENTER)
line.startsWith(StringPool.TAB + "protected class ") || line.startsWith(StringPool.TAB + "protected enum ")
Character.isUpperCase(methodName.charAt(position - 1))
getNotificationInterface().getHintsFromListener(mWrapper)
jmsDestination == null
(short)suggestions.size() > max_results
unlock()
solo.clickOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
enum_("enum")
id=15849
fileMeasures.get(0)
host.setHeaderView(this)
startupArgs.isTestingModeEnabled()
capacity > 1 << 30
noClasses.get() && !Utils.IS_TEST_MODE
extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)),false)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}")
postfix.equals("id")
Class.forName(proxiedDriver)
res - _bias
FinderCacheImpl.class
!isCorrectFile
FileEntry.class
super.remove(input)
Set<Long>
days >= 2
Preconditions.checkNotNull(fileSystemMaster)
expected=536870976
assertNull("rt",cfg.resultType)
DeprecationLogger.nagUserWith("Do not remove a task dependency from a Task instance.","This behaviour has been deprecated and is scheduled to become an error in Gradle 6.0.","","")
TrayIconUtil trayIconUtil(); 
new Version(1,0,0)
BAD_THRESHOLD=2
new IndexWriter(dir,new SimpleAnalyzer(),true)
createTestBlockCapsule(number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
randomFrom("_lang1","_lang2",null)
fulfillmentGroupItemWrapper.wrapDetails(fgi,request)
DTOMapper.class
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,numSubtasks,subtaskIndex)
i=0
in.readVInt()
o.toString().getBytes()
canPerformRequestOverConnection(mAccessibilityViewId)
JSRootConfiguration.getInstance(getProject()).unsetLanguageLevel()
number == null
block.getEnchantPower(world,x,y,z)
NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST=false
leftTuple.setStagePrevious(leftTuple)
new IllegalStateException(ex)
firstWakeup != null
logger.debug("testConcurrentServiceTicketGeneration produced an error",e)
clazz.getSimpleName()
GroovyPropertyUtils.isPropertyName(getName())
return flowControlOverRuns; 
new CvsOperationExecutor(project)
mNumOps.getOpsAdded() >= opsAllowed
new QuickAdapter(this,0)
(input & 0x80) > 0
queryString.getBytes()
SiteNavigationBreadcrumbWebUpgrade.class
randomFrom("allocate","forcemerge","delete","replicas","shrink")
Color.fromRGB(0xDECF2A)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_configuration,_templateContextHelper)
scopeOwner != null
dateOfBirth == null
Element.F64(mRS)
DBUtils.getQuotedIdentifier(this)
messageRecord.isEndSessin()
outputBatchSize=5000
slice.getAddress()
responseCode < OK && MULTIPLE_CHOICES <= responseCode
if (mIsEnabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
String.format("Failed to invoke TestWatcher %s for test %s",watcher.getClass().getName(),ReflectionUtils.getFullyQualifiedMethodName(extensionContext.getRequiredTestClass(),extensionContext.getRequiredTestMethod()))
new RuntimeException("namespace invalid for namespaceClassName: " + namespaceClassName)
mEmptyId == 0
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"")
assertEquals(serdeC.getCodec().toString(),CodecFactory.fromString(codec).toString())
OverrideResolver.generateOverridesInFunctionGroup(methodName,null,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
TimeLwjgl.class
GL20.glUniform1(location,toFloatBuffer(v,offset,count))
headerName.startsWith("proxy") || headerName.equals("keep-alive")
StringBuffer ret=new StringBuffer(internalName.length()); 
SamplingProfiler.newThreadGroupTheadSet(group)
assertEquals(9,set.size())
dirs[i].exists()
USE_MACOSX_CALAYERS=false
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false)
-1205803626
MAX_LENGTH=100
i < 50
is(2)
booleanPreference(preference,value,R.string.p_field_missed_calls,R.string.MCA_missed_calls_pref_desc_enabled,R.string.MCA_missed_calls_pref_desc_disabled)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).otherwiseIfEmpty(EMPTY_FORM_DATA)
defaultCamelContext.removeRouteDefinition(id)
new ThreadPoolExecutor(1,Integer.MAX_VALUE,10,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new ThreadFactory(){   public Thread newThread(  Runnable runnable){     Thread thread=new Thread(runnable,name);     thread.setDaemon(daemon);     thread.setPriority(priority);     return thread;   } } )
strings.length == 5
connectPanDeviceNative(objectPath,"nap","panu")
descriptions.size() > 0
acquiredChannelCount <= maxConnections
sentHeaders.get(sentHeaders.size() - 1).getNumber() <= bestKnownBlock.getNumber()
(UndeclaredThrowableException)wrapped
resolvedAlias.equals(resolvedName)
newGraph.add(new LocalNode(0,getObject().stamp()))
busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.NULL_INVOICE,NextEvent.NULL_INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(100)
c.content().readBytes(CONTENT_LENGTH)
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements","testGettingVerticesAndEdgesWithKeyValue")
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false)
BigInteger.valueOf(2)
EnhancedSwitchMigrationInspection::inspectVariableAssiginigSwitch
Preconditions.checkState(hasInstanceType())
TValue
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名")
Action<JarBinarySpec>
Arrays.asList(Visualizer.class,ConfigElement.class,Assertion.class,Timer.class,PreProcessor.class,PostProcessor.class)
IllegalArgumentException.class
mTfs.mkdirs(path)
mBottomLeftStrip=mContext.getResources().getDrawable(resId)
assertEquals("One propagated header is expected.",5,headers.toArray().length)
topMembersGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
attemptedPushes % 1000
actionText.equals("Replace with '(true|false|null)'")
publishedEndpointUrl != null
WidgetRemoteViewsServiceBinding(appWidgetId,fc)
Assert.assertEquals(122L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
IClientConfigKey<Boolean>
mPersistedFiles.removeAll(mPersistedFiles)
@RunWith(MockitoJUnit45Runner.class) public class JUnit45ExampleTest extends ExampleTest { } 
lastBatchId != null & lastBatchId.equals(msgId)
dataBuffer.rewind()
value.equals("strict")
maximumNumber < numberOfContainers
Arrays.asList("dn1","dn2","dn3","dn4","dn5")
id=15802
cmdbAppItem != null
entry.rxBytes == 0 || entry.txBytes == 0
getSelectTableQuery().query()
verify(collector)
rule.hasBuildSteps()
Object result=getJdbcTemplate().queryForObject("SELECT VALUE FROM BATCH_STAGING WHERE ID=?",new Object[]{id},new RowMapper(){   public Object mapRow(  ResultSet rs,  int rowNum) throws SQLException {     byte[] blob=lobHandler.getBlobAsBytes(rs,1);     return SerializationUtils.deserialize(blob);   } } ); 
session.getStreamID() != null
NetworkUtils.isNetworkAvailable(getActivity())
assertEquals(2350,res.getTime(1,2) / 1000,50)
Ln.d("An exception occured during service execution :" + e.getMessage(),e)
Utils.deserialize(_boltSer,IBatchBolt.class)
Maps.newHashMap(valueArguments)
StudyUtils.getPatternFile(taskFile,oldName)
pkg.findBinFile()
new ReformatCodeProcessor(context.getProject(),context.getFile(),xmlTag.getTextRange(),true)
outputRowMeta.mergeRowMeta(data.fileRowMeta[i])
public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
@Override public final DivideBy and(String sql){   return and(condition(sql)); } 
out.write(ANNOTATION_CONSTANT_TAG)
ENCODED_ZONE_ID=0x8000_0000
resultSet.getDate(1,UTC)
progress < 6000
Object item
CharSequence message
LOG.info("Cannot access storage directory " + rootPath,ex)
DBException e
DiagnosticFactory0<KtIfExpression>
WPUrlUtils.isWordPressCom(xmlrpcUri)
new CompositeException(innerError,t)
Class<V>
!domElement.isValid()
assertEquals(0.4934239,mm.mse(),1e-4)
applicationListeners.httpSessionAttributeReplaced(this,name,value)
OptionSpec<Integer>
fragmentManager.beginTransaction().add(containerId,tabsFragment)
jmsManager.destroyTopic(name)
BlogsEntryLocalServiceUtil.updateEntry(_entry.getUserId(),_entry.getEntryId(),_entry.getTitle(),_entry.getSubtitle(),_entry.getDescription(),_entry.getContent(),1,1,2012,12,00,true,true,new String[0],null,serviceContext)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST)
logger.debug("Invalid Account Credentials")
event.getResult() != Result.ALLOWED
-latDegrees
pieces.length <= wordColumn
index < 0 && index >= size
new Thread()
3 < buf.length - count
ps.setLong(1,structureId)
LOGGER.error("no property for " + type + ", "+ format)
world.getBlockMaterial(x,y,z).isLiquid()
@Override public Value emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new SPARCByteSwapOp(this,result,input));   return result; } 
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true)
163 + (USE_OLD_HISTORY ? 1000 : 0)
am.blockingGetAuthToken(account,AccountTypeUtils.getAuthTokenTypePass(account.type),false)
i=1
precision == null
destinationName == null
mCurrentBlockLeftByte > tLen
capContacts.contains(defaultContact)
GRADIENT_SCRIM_ALPHA=0.70f
new HumanReadableException(e,"Couldn't get dependency %s of target %s.",buildTargetForDep,buildTarget)
gl.glDeleteBuffer(depthStencilPackedBufferHandle)
headers.setValue("Vary")
user.getRoles()
System.arraycopy(value,0,value,length,value.length)
diffFromAffinityVer.compareTo(affVer) <= 0
Arrays.<Processor>asList(new BuildProcessor(new ArrayList<Processor>()),new ModuleProcessor(),new PropertiesProcessor(),new ParentProcessor(),new OrganizationProcessor(),new MailingListProcessor(),new IssueManagementProcessor(),new CiManagementProcessor(),new ReportingProcessor(),new RepositoriesProcessor(),new DistributionManagementProcessor(),new LicensesProcessor(),new ScmProcessor())
pctx.evaluateActionQueue(workingMemory)
new EntryCustomizationDialog2(JabRefFrame.this)
Application.SDK_INT >= 14
public class CourierNew extends FontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
myDefinition.getNestedClassName(definition.getTypeId()) == null
(_branch == switchTouchData._branch) && (_switchNumber == switchTouchData._switchNumber)
service.getKioskList().getAvailableKisoks()
constructorInvokationMarker.drop()
externalCacheDir == null
mMethod.invoke(MenuInflater.this,params)
return context; 
i >= MAX_ATTEMPTS
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
dateVector.getMutator().set(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
role.description().get()
obj.getJSONArray("types")
(File)sendApiMethod(sendLocation)
satellite.isCurrentWindowSatellite()
entity instanceof EntityPlayer
case GETHOMEDIR: 
ParamUtil.getString(uploadPortletRequest,"layoutTemplateId")
syncDLFileVersionDiffPersistence.fetchByS_S_D(fileEntryId,sourceFileVersionId,destinationFileVersionId)
input.read(b)
2.0 + (3 * random().nextDouble())
dlg.setNegativeButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
OnSubscribeGroupBy<K,T>
new CircularImportProblem(configClass,this.importStack)
handleSecurityPermissionActions(principalNode,permConfig)
multipleDescriptors
canHaveDisplayList() && canvas.isHardwareAccelerated()
Maths.logisticGradientValue(rating)
addDaysAndCheckForCompletion(1,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
mjCtx.getOldMapJoin() == null
params.setJpegQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new DefaultTaskClassValidatorExtractor(new ClasspathPropertyAnnotationHandler())
new OptionValue<>(true)
verify(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
synchronized (id) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
varX("name")
CodeStyleSettingsManager manager
GnomeEngineeringManager manager=new GnomeEngineeringManager(); 
scriptHost.toLowerCase().equals(host.toLowerCase())
(filterMap.getDispatcherMapping() & FilterMap.REQUEST) > 0
String tempClusterPathString=tempPath.toAbsolutePath().toString(); 
e.getSuppressed()[0]
t.sleep(5000)
System.out.println("")
env.getAdminContext() != null
Instrument.create(null,new AdvancedInstrumentRootFactory(){   @Override public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return new AdvancedInstrumentRoot(){       public String instrumentationInfo(){         return null;       }       @Override public Object executeRoot(      Node n,      VirtualFrame frame){         return null;       }     } ;   } } ,"test AdvancedInstrument")
HashMap<>
consumer.endpoint.isAutoAck()
savedInstanceState.getInt(KEY_ACTION,-1)
DBUtils.removeDownloadLabel(info.galleryBase.gid)
versionNum < maxRevision
Thread.sleep(20)
logger.debug("rapidRefreshFuture scheduleing for {} millis",millis)
new Builder().setDuration(3000).setTextColor(android.R.color.holo_blue_bright)
JettySolrRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders).jetty; 
assertEquals(0,cursorList.cacheSize())
localX2 * cos
localAddList.clear()
bLocations[0].getNames()
container.getVersion().toString()
serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold
"/index.jspx".equals(requestURI) || "/w/".equals(requestURI) || "/w/index.jspx".equals(requestURI)
client().admin().cluster().prepareHealth("t").setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(false)
obj instanceof HotSpotResolvedJavaMethod
hostName != null
LISTEN_RADIO_POWER_STATE_CHANGED=0x00400000
mService.reconnect()
data != null && (resultCode != RESULT_CANCELED || (requestCode == 1 || requestCode == 3))
(status & 0x02000000) > 0
create.fetch(meta().getSchemas())
new Fragment(id,"iconFragment",NewLayerPage.this)
expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser","JDK16","JDK17")
public static String getItemText(FormEntryPrompt formEntryPrompt,SelectChoice selectChoice){   String choiceName=formEntryPrompt.getSelectChoiceText(selectChoice);   return choiceName != null ? TextUtils.textToHtml(choiceName).toString() : ""; } 
Log_OC.wtf(TAG,"\t account is NULL")
@Input(InputType.Association)
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
item.isDownloaded()
CustomSQLUtil.get(COUNT_BY_G_F,queryDefinition)
new SeleniumBuilderContext(_BASE_DIR,_LIFERAY_SELENIUM_DIR)
dataType.getTypeName()
xtw.writeCharacters(customProperty.getSimpleValue())
logger.info("attempting reconnect")
msg.hasCacheMetrics()
_vecs[0]
stripFilter.skipWhiteSpace(charBuffer,stringWriter)
File.createTempFile("push-attachment","tmp")
JvmDeclarationOriginKt.OtherOrigin(myClass,valuesFunction)
JBUI.Borders.emptyBottom(EMPTY_BORDER_THICKNESS)
LOG.error("Cache flusher failed for entry " + fqe)
!(value.getParent() instanceof XmlAttribute)
(MemberNode)children.nextElement()
logger.debug("Trying to map {} to {}",t,path)
new MultiValuesMap<PsiVariable,PsiExpression>()
showMessage(context.getString(R.string.empty_route_calculated))
new LeftTuple(f0)
/**   * set the tag of this item  * @param object  * @return  */ public T withTag(Object object){   this.mTag=object;   return (T)this; } 
Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)
curComp.equals(cur)
request.charset != null
_typeSettingsProperties.toSortedString()
session.executeAsynchronousPost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler,false)
comparator.compare(value,answer) > 0
doTestNegative(301,false)
"Missing " + gradlePropertiesExists
matcher.isMatching(firstCandidate.right.attributes,secondCandidate.right.attributes)
substitutor.substitute(parameter.getType())
contains="cached"
line.split(" *= *")
starting != null
FileUtil.shortenFileName(foundFile,dirs)
debugRunner.createCommandLinePatchers(state,configuration,PORT)
stream.transportReportStatus(status,false,new Metadata())
new MockQueryExecution(1)
DEFAULT_NUMBER_OF_READ_BUFFERS=128
log.error("Not obtaining HBase Auth Token for MapReduce job " + job.getJobName())
new GetExecutionVariableInstancesCmd(executionId,variableNames,false,locale,withLocalizationFallback)
getAddedCount()
mNoDreamEnterAnim=true
methodName.equals("scan")
Timeout.seconds(60)
type == VolumeInfo.TYPE_PUBLIC
@Override public Cell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureWidth,this.mTextureHeight,this.mRotated)
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName(clusterName)).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
builder.append("#")
/**   * Controls tesselation transform (e.g similar to the vertex shader, but required to mix inputs manual)  */ TesselationEvaluation
ASYNC_CONSUMER_THREAD.getStackTrace()
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper)
file != null
callbacks.onHardwarePostDraw(canvas)
name.length() > 2
Boolean.valueOf(getOptional("kylin.query.enable-dynamic-column","false"))
ALPHA
PreferenceManager.instantPictureUploadEnabled(context)
result.getReceipt().getEnergyTotal()
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Throwable exceptionThrown=null; 
layoutManager.addView(view,0)
majorVersion != null
result.getCanonicalPath()
mPositions[i] >= 0
new IndexWriter(dir,anlzr,false)
split[0]
new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown"))
new Intent(ACITON_FEED_LIST_UPDATE)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression5.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,5,41.849938471234594,DeepLearningParameters.Activation.Rectifier)
name == null
m.isTablePerHierarchy()
formsFound=false
logger.debug(e.getMessage(),e)
this.mrwork.getHadoopSupportsSplittable()
appendValue(value,sb)
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
ticks / ticksInGap
logger.info("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
Timber.e(e,"Argument %s is incorrect",playBackgroundColorString,e.getMessage())
assertFalse(oldChild.isSafelyReplaceableBy(newChild))
LOG.error("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
mock.expectedBodiesReceived("c","b","a")
accessible && member instanceof PsiClass
TestSuite testSuite=new TestSuite(testClass); 
SocialGroupStatisticsWebUpgrade.class
changeEntitlementAndCheckForCompletion(bpEntitlement,productName,BillingPeriod.ANNUAL,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.INVOICE_ADJUSTMENT)
Object target
result.addEnchantment(enchantment,(Integer)entry.getValue())
cifar.test()
new RunAutomaton(automaton)
new StatusText(){   @Override protected boolean isStatusVisible(){     return UIUtil.uiChildren(JBPanelWithEmptyText.this).filter(Component::isVisible).isEmpty();   } } 
Base.copyFile(file,properPdeFile)
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression50.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,50,37.930232892825686,DeepLearningParameters.Activation.Rectifier)
assumeFalse("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
numKeys > 1
new ObjectRecordWithStats(key,v)
ArraysUtil.merge(nodes1,nodes2)
queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
RebalanceUtils.getCurrentPartitionMapping(cluster)
mShowcaseRect.left == cx - dw / 2
result.expectedMessageCount(2)
i != 0 || j != 0
String configHtmlCacheDisabled=configProps.get("disableHtmlCache").toString(); 
getKeyDesc(keyRowMeta,keyNrs,two)
hasNextChange()
Reflection.methodHandle(bigArrayField.getType(),"sizeOf",null)
U.warn(log,"Message is ignored due to an error [msg=" + msg + ']',e)
AppLog.e(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
FRAME_STATS_COUNT=14
mQsContainer.getX()
Exception exc
XContentHelper.toXContent(response,XContentType.JSON)
dht.context()
compactionStarted.getAndSet(true)
log.debugf("Getting cached data from region [`%s` (%s)] by key [%s]",getRegion().getName(),key)
public SELF setColorOutput(boolean colorOutput){   operationParamsBuilder.setColorOutput(colorOutput);   return getThis(); } 
new int[8571]
memberRequestPersistence.update(memberRequest)
clusterNodeInfo.containsFlag(Flag.NOADDR)
protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask,File inputFile,Task compileTask,final Task generateTask){   Project project=buildWSDLTask.getProject();   String taskName=GradleUtil.getTaskName(buildWSDLTask.getName(),inputFile);   Jar jar=GradleUtil.addTask(project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (buildWSDLTask.isIncludeSource()) {     jar.into("OSGI-OPT/src",new Closure<Void>(project){       @SuppressWarnings("unused") public void doCall(      CopySpec copySpec){         copySpec.from(generateTask.getOutputs());       }     } );   }   jar.setDestinationDir(buildWSDLTask.getDestinationDir());   String wsdlName=FileUtil.stripExtension(inputFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
mock.expectedBodiesReceived("B+END","A+END")
configureAtmosphereInterceptor(sc)
_layoutRevisionLocalService.getLayoutRevisions(WorkflowConstants.STATUS_PENDING)
is(1)
not(isStatic())
returnValue == null
stompConnection.receive(1000)
VolumeInfo vol
input.setSourceFileNameFieldName(wSourceFileNameField.getText())
VALIDATE_AFTER_INACTIVITY_DEFAULT=2000
Assert.assertEquals(8,v2)
protocolProvider.getAccountID().getAccountAddress()
new EclipseSettingsWriter(getLog()).write(projectBaseDir,outputDir,executedProject)
method.hasModifierProperty(PsiModifier.STATIC)
osName.contains("solaris")
buildData.getJenkinsGitHubURL()
iterator.getStart() != offset
CommonBundle.getErrorTitle()
cursor.getCount() == 0
StringUtils.abbreviate(analyzedSentence.toTextString(),200)
GridSslBasicContextFactory.getDisabledTrustManager()
@Mock HttpServletResponse servletResponse; 
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)
new Edge(module,orderEntry,shouldRecurse)
DateTimeUtils.createGregorianCalendar()
added.isEmpty()
_mockSettingsFactory.getServerSettings("com.liferay.portal")
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).beforeValidityChanged(arr)
ClassPropertyFetcher.getStaticPropertyValue(getClazz(),name,type)
log.tracef("%s finished request %d",ManagementChannel.this)
store.setConfigPath(usersFile)
versionMatch.group(4)
waitYieldLatch.await(25,TimeUnit.MILLISECONDS)
shardSearchStats.onFailedQueryPhase(context)
imageView.setImageBitmap(null)
ResourceBundle.getBundle(MESSAGES,defaultLocale)
result > TimeUnit.DAYS.toNanos(1)
coloring.length() > 0
message.addHeader("Message-ID",cursor.getString(12))
PackagingElement<?>
out.getVersion().after(Version.V_5_4_0_UNRELEASED)
new KotlinStructureViewModel(file)
Const.isEmpty(port)
/**   * Get a copy of geometry object. Geometry object is mutable. The returned object is therefore copied before returning.  * @return a copy of the geometry object  */ public Object getGeometry(){   if (geometry == null) {     try {       geometry=JTSUtils.ewkb2geometry(bytes,getDimensionSystem());     }  catch (    RuntimeException ex) {       throw DbException.convert(ex);     }   }   return ((Geometry)geometry).copy(); } 
millis > 28 * DateUtils.MILLIS_PER_DAY
hasPermission(permission)
centerButton(mButtonNeutral)
Slog.wtfStack(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
withoutMvnPrefix.startsWith("http:")
new FetchResponse(new LinkedHashMap<>(partitions),throttleTime)
performDexOpt(packageName,instructionSet,true)
public QueryRunner printPlan(){   printPlan=true;   return this; } 
DLFileShortcutLocalServiceUtil.deleteFileShortcut(classPK)
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive())
-1L
winAnimator.mSurfaceController == null
cursor.getChildAt(i)
SPACE_BEFORE_EXTEND_COLON=false
file.delete()
channelBundles.contains(channelBundles)
mVectorState == null && mVectorState.mVPathRenderer == null
linkableToModuleMap.get(constituent)
ValueNode[]
timeout(1000)
portletImporter.validateFile(userId,groupId,plid,portletId,parameterMap,file)
space.getText().replace(' ','\n')
postJob.getClass()
internalCallContextFactory.createInternalCallContext(context)
column.getLocalDeletionTime() > gcBefore
@InputIntMethodAnnotation(value=43)
currencyPair.counter.getCurrencyCode().toString()
id=11
assertEquals(service.state(),Service.State.FAILED)
if (sIsSELinuxEnforced) {   if (packageName == null) {     sServiceAppDataFile=new ZygoteService();   }  else   if (packageName.equals("android")) {     sServiceAppDataFile=BinderService.getService(BinderService.TARGET_APP);   }  else {     sServiceAppDataFile=new DirectAccessService();   } }  else {   sServiceAppDataFile=new DirectAccessService(); } 
batch.isEmpty()
ConfigurableFactory.Companion.getInstance().getTodoConfigurable()
resTarget.withFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
addDaysAndCheckForCompletion(6,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE,NextEvent.INVOICE)
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).otherwiseIfEmpty(createSession(exchange))
mRenderer.getDefaultViewportHeight()
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,false)
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue)
s.array.length == 3
spoon.addChefGraph(jobMeta)
a.getDimensionPixelOffset(attr,0)
type instanceof PsiClassReferenceType
Double.isNaN(rate)
Math.max(timestamp,dp_to_keep.kv.timestamp())
String value
mUfs.create(testFile)
myProjectView.isSortByType(myPaneId)
private final VersionDetails versionDetails; 
HttpRequest.put("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
nameOfClass.equals("com.android.internal.policy.impl.PhoneWindow$DecorView") || nameOfClass.equals("com.android.internal.policy.impl.MultiPhoneWindow$MultiPhoneDecorView")
new IfNode(currentGraph.unique(new IsNullNode(object)),successor,deopt,0,graphId)
ParamUtil.getString(portletRequest,DISCOUNT_TYPE)
expectedValue.equals(oldValue)
logger.warn("Using folder " + checkPointFolderFile + " for storing checkpoints")
@NotNull T value
getString(R.string.day_night_info_description,"null")
"0".equals(text) || "0L".equals(text)
token.equals("!") && !prevToken.equals("?") && !prevToken.equals("\u00a0")
!showOnKeyguard
!uri.getScheme().equals(scheme)
terminal.receivedInput(event.getInputText())
message + END
s.contains(a.getName())
statusBar.setRedraw(false)
testReliable=true
new LocalCheckpointTracker(indexShard.indexSettings(),maxSeqNo,minSeqNo)
saHooks != null
robotstxtServer.allows(webURL)
new MetaTableLocator().waitMetaRegionLocation(watcher,100)
logger.info("Optimized Selector: " + selector.getClass().getName())
mappingsDir.exists()
Fields fields
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200))
logger.info(String.format("destroying socket (%s)",this.nsp))
logger.warn("IOException should not have been thrown.",exc)
config.getMaxElementsInMemory()
public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
webSocketConnection.getRemote().sendString(s)
DynamicCounter.increment(filterName,"fail",filter.filterType())
public IMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression); 
dpToPx(4f)
sleep(60_000)
ACRA.log.e(LOG_TAG,"Could not delete report : " + files[i])
pmmlScorecard.isUseReasonCodes()
2 * 8192
assertCorrection(rule,"Eisnbahn","Einbahn","Eisbahn","Eisenbahn")
redeliveryDelay > maximumRedeliveryDelay
expiresOn.getTime()
cacheElement != null
deadline < now
from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(2000)
Key[]
message.getEncryption() == Message.ENCRYPTION_OTR
new ArrayList<>()
LOG.error("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
compressedProto.length < 390000
ObjectHeaderImpl.readHeaderBitsFromObjectCarefully(obj)
/**   * Telnet port.  */ private String port="5000"; 
super.mySetupMutualAuthServerIsValidException(cause)
hasFlag(FLAG_UP)
TestPipelineOptions.class
dest.getBearing() + destGf.getDeclination()
ColorResources.getColor("sliderGradientLight")
criteria.andEquals("category",null)
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,true)
price.getAmount().equals(BigDecimal.ZERO)
sessionTrackingModes.contains(SessionTrackingMode.COOKIE) || sessionTrackingModes.contains(SessionTrackingMode.URL)
sm.getString("upgradeHandler.rst.debug",connectionId,Integer.toString(se.getStreamId()),se.getError())
advised.getConstructor()
packageMatch[0]
new CustomDataColletor(customParameters)
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,true)
Beans.newDuration(casProperties.getAuthn().getOauth().getRefreshToken().getTimeToKillInSeconds()).toMillis()
partProps.size()
InputMethodManager.getInstance(instance)
Bytes.toBytesBinary(tableOrRegionName)
StringUtil.endsWithChar(testDataPath,File.separatorChar)
fragmentCollectionPersistence.filterCountByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
ssl.has(CommonAttributes.CA_REVOCATION_URL)
c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))
docker.copyArchiveToContainerCmd(container.getId())
new ShieldVersion(V_1_0_0_ID,false,Version.V_1_4_0)
!isOpened
entry.isInTrashImplicitly()
Byte.valueOf(param.getValue())
removeGzipFromETag(etag)
Ordered.HIGHEST_PRECEDENCE + 11
new ConnectionError(sm.getString("http2Parser.payloadTooBig",Integer.toString(payloadSize),Integer.toString(maxPayloadSize)),Http2Error.FRAME_SIZE_ERROR)
new IndexWriter(dir,true,new WhitespaceAnalyzer())
next_write_buffers.get(0)
len > bits.length
StringBuffer ret
((ViewGroup)viewHolder.view).addView(mView,1)
isDirect=false
LOG.info("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))))
e.getOldLeadSelectionPath() != null
assertThat(emptyScannable.scan(Scannable.Attr.LARGE_BUFFERED)).isEqualTo(0L)
calendarBooking.getTitle()
getCurrentProjectViewPane()
loaded.getLoaded().getConstructor()
tableHasColumn(tableName,columnName)
m.getCurrentJobWaitTime()
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN)
parser.getText()
Boolean.valueOf(getBoolean(value))
new PercentType(precent)
case 11: 
case version: 
id=15841
InvalidPathException.class
AndroidResourceUtil.findResourceFieldsForFileResource((PsiFile)element,false)
mesh.getNumVertices() / 2
out.getVersion().onOrBefore(Version.V_1_4_0)
from("direct:start").aggregator().header("id").batchTimeout(2000L)
prefs.getBoolean(ACRA.PREF_DISABLE_ACRA,true)
person.getVoidReason()
this.date=date
rootDir.file("build.gradle").writelns("apply plugin: 'java'","dependencies { compile gradleApi() }",String.format("jar.destinationDir = file('%s')",FilenameUtils.separatorsToUnix(jarFile.getParent())),String.format("jar.archiveName = '%s'",jarFile.getName()))
resolve(type,false,false,true)
serialVersionUID=287843616
connections.contains(manager)
private Integer version; 
ConcurrentHashMap<String,Object>
logger.info("Expanding Jquery Aliases")
map.get(i)
graphics=new QDGraphics(QDConstants.k32BGRAPixelFormat,qdrect)
LaterInvocator.invokeLater(new Runnable(){   public void run(){     if (checkForRejectOrByPass(command,forced,result))     return;     if (myRequestFocusCmd == command) {       myRequestFocusCmd=null;       command.run().doWhenDone(new Runnable(){         public void run(){           LaterInvocator.invokeLater(new Runnable(){             public void run(){               result.setDone();             }           } );         }       } ).doWhenRejected(new Runnable(){         public void run(){           result.setRejected();         }       } );       restartIdleAlarm();       if (forced) {         myForcedFocusRequestsAlarm.addRequest(new Runnable(){           public void run(){             setLastEffectiveForcedRequest(null);           }         } ,250);       }     }  else {       rejectCommand(command,result);     }   } } )
findNodeByElement(element)
new Media(getApplicationContext(),uri)
new Paint(Paint.ANTI_ALIAS_FLAG)
mPostKeyguardExitAnimation.hasEnded()
!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)
HttpStatus.SC_OK != statusCode
kompiler.getDeclaredMethod("exec",PrintStream.class,String[].class)
assertEquals(43.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper)
schemaName == null
groupIds[1]
AppPrefs.getImageOptimizeWidth() > 0
project.members()
getBeginNode() != ((InvokeWithExceptionNode)predecessor).exceptionEdge()
d1.setRemoveAbandonedTimeout(10)
acos(arr,Nd4j.copyOnOps)
StringBuffer tmpLocation=new StringBuffer(actionMapper.getUriFromActionMapping(new ActionMapping(actionName,namespace,method,null))); 
GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))
mGsmPhone.mSST.isConcurrentVoiceAndData()
packet.getFrom().split("/")
assertEquals(1,files.length)
UIHelper.getContactPicture(contact.getName(),89,this.getApplicationContext())
allowedWithoutQuotes.clear()
serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable()
startElement != endElement
Comparing.equal(myContextModule,namedLibraryElement.myContextModule)
groupLocalService.addGroup(user.getUserId(),null,0,0,name,null,type,null,true,true,null)
assertEquals(2,StringUtil.countMatches(drl,"import "))
super.getLikeProvider(path)
xStreamConfigurators.equals(xStreamConfigurators)
filePath.toFile()
assertEquals(JavadocTagInfo.VERSION.getType(),JavadocTagInfo.Type.BLOCK)
logTable.getDatabaseMeta().getSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
mFormLoaderTask.getStatus()
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
timeToLive >= 0
Matchers.empty()
assertEquals(130,panel.getPreferredSize().width)
"wrong partition, expected: " + getPartitionId() + " but found:"+ op
mCollapsingTextHelper.setExpandedTextGravity(gravity)
configuredScriptEngineNames == null
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
CoreProxy.sendToPlayers(createItemPacket(item,orientation),xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance)
VcsBundle.message("message.text.cannot.show.differences")
new NullPointerException(checkedValue + " should not be null")
channels.toArray()
out.write(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
contextBuilder.allowNativeAccess(allow_create_thread)
LOG.info("Getting synchronous method stub from channel")
resolveNamedStopWords(stopWords,version,ignore_case)
HashSet<>
VectorizationContext.isStringFamily(outputType)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
DDMStructureLocalServiceUtil.getStructure(GetterUtil.getLong(ddmStructureFieldNameParts[2]))
return repository; 
logger.warn(x.getClass() + ": " + x.getMessage())
growLock.lock()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) == 0
new IndexWriter(ram,analyzer,true)
/**   * Returns an  {@code AfterEach} {@code Trigger} with the given subtriggers.  */ @SafeVarargs public static Trigger inOrder(Trigger... triggers){   return new AfterEach(Arrays.<Trigger>asList(triggers)); } 
annotatorImplementation.custom(inputProps,customName)
RulesWidget2.class
commState.putBoolean(syncCommit)
500 * 1000000L
getIntent() != null
end > range.getStartOffset()
b & 0xFF
new RelativeCoordinatesProvider(hRef,vRef,hDelta,vDelta)
assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
timeStampVector.getMutator().set(index,value)
((Number)s.first()).intValue()
supressTrailingZeroElements == false
AssetTagFinderUtil.filterFindByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
Attachment attachment=getAttachment(attachmentId); 
myExpectedArguments == (expressions.length + additionalExpressions.size())
cassandraProperties.getUsername()
that.getDomain() == null
Theme.fromJSON(object)
!mHost.onShouldSaveFragmentState(f)
i % 1
CAMERASERVER_UID=1046
buf.writableBytes()
wrapper.shutdownNow()
new SelectMetadataChange()
numSameBitCells > 5
Realm.getColumnIndices()
getTitle()
Class.forName(injectorSourceClassName)
PropertiesComponent.getInstance().setValue(BOLD_TABS,true,false)
types.contains(metadata.getInheritedFromType())
((JavaLibrary)exported).getTransitiveClasspaths()
Exception ex
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden")
StringBuilder b=new StringBuilder("ProcessInstance "); 
indexer.getSummary(result,themeDisplay.getLocale(),snippet,portletURL)
textSize.y + 4
commandExecutor.evalReadAsync(getName(),codec,EVAL_GET_TTL,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "if value == false then " + "return nil; "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return nil; "+ "end; "+ "return val; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
assertEquals(avDegree,1.0)
Assert.assertEquals(serviceContext.getAssetCategoryIds(),assetCategoryIds)
DEBUG_STARTING_WINDOW=false
recipient.getNode() != null
ph.setTimeStamps()
candidate.getArgumentMaping()
private String _errorCode=null; 
THashMap<String,StandardFileType>
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_SUBMODULE))
!"POST".equals(connection.getRequestMethod()) || !"PUT".equals(connection.getRequestMethod())
bos.toString()
org.apache.kylin.common.util.DateFormat.formatToTimeStr(1433250418000L)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0
id=37
config.getPatterns() != null || config.getPatterns().length() != 0
id=15831
message.append(getDialogMessage())
ranges == null
/**   */ public class S3SnapshotRestoreOverHttpsTest extends S3SnapshotRestoreAbstractTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","https");     return settings.build();   } } 
actionButton.setPressedImage(new ImageIcon(ca.getPressedIcon()).getImage())
NoSuchThingException.class
state != BluetoothA2dp.STATE_PLAYING
OsmandPreference<Boolean>
String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n",CATALOG_NAME,TABLE_NAME,"col0","value0","pk1","keyvalue1")
assertEquals(2,config.getMapConfigs().size())
Integer typeId=fields != null ? fields.get(fieldName).typeId() : null; 
conf.getInt(THRIFT_FRAMED_TRANSPORT_SIZE_IN_MB,16)
UpdateFrequancy=updateFrequency
new RuntimeException("Unable to format " + fileName,e)
http2.setInitialStreamSendWindow(initialStreamSendWindow)
/**   * Returns a wrapper around  {@code ciphertextSource}, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using  {@code additionalData} asadditional authenticated data. The additional data is not included in the ciphertext and has to be passed in as parameter for decryption.  */ InputStream newDecryptingStream(InputStream ciphertextSource,byte[] associatedData) throws GeneralSecurityException, IOException ; 
Thread.sleep(10000)
myBaseVersion=20
size=500
titleTextField.getText()
!project.isDisposed()
count < 12
DB_VERSION=22
connection.getInputStream()
protected abstract ReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,List<ResolvedType> typeParameters); 
countCQL3Rows()
props.value(DefaultSettings.JDBC_URL)
HashMap<String,String>
Float value=list.get(i); 
log.info("BouncyCastle not registered, using the default JCE provider")
commentSuffix.length()
svcs.deployAsync(name,new DummyService())
merc.getDescription()
event.getColumns()
protected Object findItemToAdd(){   String word=Messages.showInputDialog(SpellCheckerBundle.message("enter.simple.word"),SpellCheckerBundle.message("add.new.word"),null);   if (word == null) {     return null;   }  else {     word=word.trim();   }   if (Strings.isMixedCase(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.mixed.cased.you.must.enter.simple.word",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   if (!manager.hasProblem(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.correct.you.no.need.to.add.this.in.list",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   return word; } 
!className.equals("DeepNamedValueScanner") && !className.equals("ProxyUtil") && newContent.contains("import java.lang.reflect.Proxy;")
bloomHighPassThreshold=0.75f
possibleCenters.remove(i)
writeString(writer,String.valueOf(reader.getLong()),fieldName)
this.getDependencies()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy)
options.addOption("i",IGNORE_NODES_OPTION,"don't stream to this (comma separated) list of nodes")
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_NEW,UNSUPPORTED_GAUGE)
Thread.sleep(2000)
Logger.getLogger(loggerName).getLevel()
mHomeStack == null
lock.lock()
getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) & getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) & getChatopsAuthToken().equals(ChatOpsRepo.getChatopsAuthToken())
mLastBatteryLevel != mHealthInfo.batteryLevel
position > lastPos
Sets.newHashSet("int","int8","int16","int32","int64","uint","uint8","uint16","uint32","uint64","uintptr")
args.length == 2
@NotNull CommitId getCommit(); 
myCustomRootProvider != null
prefixq(dst)
AlluxioWorkerService.class
/**   * Our event dispatcher.  */ private MediaDispatcher mediaDispatcher=new MediaDispatcher(); 
mock.setMinimumResultWaitTime(1900)
factory.getDestination(endpoint)
mf.getColumnName()
iconId <= 0
reportType % 10
jvmOptions.setAllJvmArgs(DEFAULT_JVM_9_ARGS)
Cli.buildCli("presto",Runnable.class)
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47))
public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
random.nextBoolean()
new TwoDimTable("Coefficients","glm coefficients",names,new String[]{"Coefficients"},colTypes,colFormats,"names")
Utils.parseBoolean(name,defaultValue,true)
new InternalTestCluster(randomLong(),1,1,tribeClusterName,tribeSettingsSource,0,false,false,CHILD_JVM_ID,TRIBE_CLUSTER_NODE_PREFIX)
isPersistent
qtype instanceof PyNoneType
new PlaybackServiceStarter(context,media).startWhenPrepared(false)
routeInd + 2
PlatformTestCase.initPlatformPrefix(ULTIMATE_MARKER_CLASS,"PlatformLangXml")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
recorder.record(frame2)
public Resource getResource(){   return resource; } 
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
mappedCatalog != null
drawer.mAdapter.addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
new FilterConfiguration(filterParams,filterClass)
log.warn(msg,t)
connector.setPort(8080)
/**   * Represents black  */ BLACK('0',0x01)
textProto.charAt(0) == UTF8_BOM_CODE
!serverContextTakeover
public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
final CharSequence message
!enabled
endpoint.keepAliveTimeoutSeconds()
rows[bottomIndex]
new Analyzer(new FunctionRegistry(),IndexResolution.valid(test),TimeZone.getTimeZone("UTC"))
new KeywordMap(true)
new SQLiteBooksDatabase("LIBRARY_NG")
new IllegalStateException("unable to find any shards to explain [" + request + "] in the routing table")
new NTCredentials(user,getProxyPass(),localHost,PROXY_DOMAIN)
getType()
testComplete()
word=START_WORD
ev.mStateSamples.length < NS
mService.disconnect()
selectedFile != null
FunctionTypesKt.isFunctionOrExtensionFunctionType(((ClassDescriptor)container).getDefaultType())
@GUIMenuSortOrder(2)
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP)
code.addLoad(0,field.getType())
TimeUnit.SECONDS.toMillis(3)
c.getName()
index <= mInUseLocks.length()
indexService.getQueryShardContext()
log.warn("\"FocusKiller\" library not found or there were problems loading it.",t)
zkDb.snapLog.getSnapDir()
player.playSound(soundLocation,soundArg,(float)minimumVolume,(float)pitch)
Thread.sleep(500)
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_ENABLED,0,null,true)
new int[143]
FileUtil.compactPath(path)
H2O.unimpl()
defineClass("org.apache.catalina.loader.JdbcLeakPrevention",classBytes,0,offset)
GL11.glTexParameter(target,pname,params)
activity.createTimeListPreference(settings.LIVE_MONITORING_INTERVAL,SECONDS,MINUTES,1,R.string.live_monitoring_interval,R.string.live_monitoring_interval_descr)
VDBG=true
maxLiveColumns >= count
return name; 
pd == activePresentationDescriptor
SystemProperties.getBoolean("persist.quickstep.scrub.enabled",false)
hours >= 2
new AMRuntimeException.IOException(e)
model.size() == 1
modelNode.has(LOCAL)
LOG.warn("Could not find missing deps",e)
mp.getCount() == 1
forceRegister=false
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.title"),portletModel.getPortletId())
ImportAutoConfigurationWithItemsOne.class
HeaderBuilder.this
DumpUtils.checkDumpPermission(getContext(),TAG,pw)
itemActionLayout >= 0
LocalVideo localVideo=(LocalVideo)contentContainer.getContent(); 
chunkLength != C.LENGTH_UNBOUNDED
XML_READER != null
ListDataSource.bounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
creationDateField != null
Object result
eval instanceof Float
module != null
isAValuesDirectory(parentFile.getName())
UI_TIMEOUT=2500
modObjectTable == null
assertEquals(redVocab.getIndex(),0)
range.getFrom()
createTextAttributesKey("KOTLIN_LABEL")
Exceptions.argumentIsNullException()
SmackConfiguration.getVersionNumber()
user.sendMessage(_("inventoryClearedAll"))
contains="doIntrinsicCachedLLVMTruffleObject"
new HttpOpenListener(new ByteBufferSlicePool(BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,8192,8192 * 8192))
(flags & FLAG_VIEW_ENTERED) != 0
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",realSubStepName)
new Handler(){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
bukkit.getNote()
error == null
LOGGING=true
!chunk.isOpCode() && chunk.data.length >= MINIMUM_BLOOM_DATA_LENGTH
scrollWebElementIntoView(webDriver,webElement)
Math.min(o.outWidth / targetWidth,o.outHeight / targetHeight)
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions),JSONParseSpec.JSON)
JBUI.insetsLeft(4)
!Objects.equals(e.getNewRange(),e.getOldRange())
this.errorDetection=true
font != null
new GenerationException(e)
conf.getSearchBaseURL()
mActiveAgents.valueAt(i)
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteArray,true,indexSession,indexBoolean)
sm.getString("serverContainer.duplicatePaths",path)
Criterion.or(MetadataCriteria.withKey(ProducteevTask.METADATA_KEY),MetadataCriteria.withKey(TagService.KEY))
setInputMethodEnabled(info.getId(),true)
cache.flush()
SQLiteDoneException e
Localization.lang("Quality")
Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
provider == null
new ConfigurationMethod(getConstructorOrMethod(),getAnnotationFinder(),isBeforeSuiteConfiguration(),isAfterSuiteConfiguration(),isBeforeTestConfiguration(),isAfterTestConfiguration(),isBeforeClassConfiguration(),isAfterClassConfiguration(),isBeforeMethodConfiguration(),isAfterMethodConfiguration(),getBeforeGroups(),getAfterGroups(),false)
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
ALIGN_GROUP_FIELD_DECLARATIONS=true
JDBCUtils.safeGetLong(dbResult,"pid")
Character.isSpaceChar(origText.charAt(i))
Log.error(e)
new IndexWriter(ram,new StandardAnalyzer(),true)
localFileSystem.findFileByPath(keyMapsPath)
length > Integer.MAX_VALUE
mScreenBright=false
myCache1.get("myKey1").getValue()
greaterThan(0l)
index > 5
treePathTraverser(tree).expand(tree::isExpanded)
file.getNameWithoutExtension()
createExpandMacroMap(moduleSettings).substitute(path,true,null)
@Override public final Object createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
loadExternalSettingLinks(preferenceCategory)
CasEvent::getId
super.dispatchTouchEvent(ev)
JetTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
!file.getMimetype().equals("DIR")
new DownSamplerForExposureNode(context,readOnlyGBufferConfig,displayResolutionDependentFBOs,FBO_16X16_CONFIG,immutableFBOs,aLabel)
WaypointDialogHelper.showWaypointsDialog(getMyApplication(),mapActivity)
isCancelled()
new UnsupportedOperationException("This should never happen.")
path.startsWith(FileSystemItem.HOME_PREFIX) || path.startsWith("/")
fields != null
new GroovyScriptDescriptor(this,scriptClass)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantCreate(brokerTag)
parent != null ? parent.startNumber : 0
ortho(-width / 2,+width / 2,-height / 2,+height / 2,-1,+1)
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",entityID)
ReplicationMessage event
updateState(CHANNEL_TEMPERATURE,message.convertToState(valueSelector))
return readRepairChance; 
0.1 + (3 * random().nextDouble())
component.length >= 2
args != null & args.length > 0
new String(byteArrayOutputStream.toByteArray())
equalTo(0L)
ServletUtil.prepareParameters(p,true,false,false,false)
public Object mapLine(FieldSet fieldSet,int lineNum){   Address address=new Address();   address.setAddressee(fieldSet.readString(ADDRESSEE_COLUMN));   address.setAddrLine1(fieldSet.readString(ADDRESS_LINE1_COLUMN));   address.setAddrLine2(fieldSet.readString(ADDRESS_LINE2_COLUMN));   address.setCity(fieldSet.readString(CITY_COLUMN));   address.setZipCode(fieldSet.readString(ZIP_CODE_COLUMN));   address.setState(fieldSet.readString(STATE_COLUMN));   address.setCountry(fieldSet.readString(COUNTRY_COLUMN));   return address; } 
uadDisplay.searchCount(selectedUserId,null,displayTerms.getKeywords(),searchContainer.getOrderByCol(),searchContainer.getOrderByType())
ClassFileVersion.JAVA_V5.getJavaVersion()
stamp.isExactType()
dateHeader % 100
getStubOrPsiParent()
new RandomIndexWriter(random(),dir)
new Intent(ACTION_FAST_TRACK)
constraints.weightx=0f
e.printStackTrace()
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).contextStart(context -> context.put("foo","bar"))
bytes > 8192
Slog.e(TAG,"Invalid wallpaper data")
constraints.weightx=1
assertEquals(true,StringUtils.isAlpha(""))
configureWriteBufferForRead()
user.getTeleport()
NUM_OUTPUT_BUFFERS=16
UriBuilder.fromResource(StreamAlertConditionResource.class).path("{conditionId}").build(alertCondition.getId())
ourGuard.doPreventingRecursion(element,false,computable)
new LogicalPosition(vline,repeatColumn)
myIcon.getIconHeight() - 10
shard.applyIndexOperationOnReplica(0,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
sn != null
getName()
delimiterText != null
mMethod == Methods.getByIndex && mMethod == Methods.getByInetAddress
new StringBuilder()
id=47
arrayExpression == null
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.5)
System.out.printf("graph.edge(%d, %d, %f, %s);\n",from,to,edge.getDistance(),fwd && bwd ? "true" : "false")
mapCopy.getName()
!p.isNoSelectedType()
t.getVolume()
this == OtiOnly
getLog().error("register druid-driver mbean error",ex)
@JsonProperty(STICKER_FIELD)
clients.entrySet()
private ErrorWrapperEmbeddedServletContainerFactory filter=new ErrorWrapperEmbeddedServletContainerFactory(); 
memoryCachePercent / 100
JvmDeclarationOriginKt.OtherOrigin(element)
case 6: 
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
HtmlUtil.escapeURL(_href)
new ChangesBrowser(project,null,Collections.<Change>emptyList(),null,false,true,null,ChangesBrowser.MyUseCase.LOCAL_CHANGES,null)
DialogUtils.resolveColor(builder.context,R.attr.md_background_color)
public class ArialBlack extends FontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
{false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
NotifyUtil.show("Warning",formatter.formatMessage(record),MessageType.WARNING,listener,5000)
Double.isNaN(longitude)
List<Expression>
builder120.build()
setting.attach(this)
getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
ufsDeleter.delete(alluxioUriToDel,delInode)
AtmosphereRequest.class.isAssignableFrom(request.getClass())
soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)
22 * ClassSize.REFERENCE
delegatedResourceAccountIndexCapsule.getToAccountsList()
UserGroupsAdminWebUpgrade.class
buffer.indexOf(partToMatch)
this.messageService.monoPreAuthorizeBeanFindById(2L).contextStart(withAdmin)
errVisitor.getJspSourceNode() instanceof Node.Scriptlet
this.mChildScene == null && !this.mChildSceneModalUpdate
3 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
userDNPattern.matcher(username)
!isObjectMethod(method)
bufferSize != minAllocSize
new GeoLocation(array.getDouble(0),array.getDouble(1))
serialVersionUID=1492663498
minSize < curSize
port=47505
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getClasses()
mock.expectedMessageCount(4)
pluginContainer.lookup(ComponentConfigurator.ROLE,pluginRealm)
stepsNumber=0
public Object getAsset(); 
insertRowData=null
_fileEntryDisplayContextHelper.isCheckedOutByMe()
new PyDebugValue(slice,value.getType(),null,value.getValue(),value.isContainer(),value.isErrorOnEval(),parent,value.getFrameAccessor())
LOG.error("Couldn't run process with PTY",t)
DaemonListeners.isUnderIgnoredAction(null)
INTERRUPTION_THRESHOLD=11
case 6: 
(SupportingToken)suppTokens
assertEquals("Two samples should have been collected",2,samples.size())
getMethod(restrictionName,methodName).isDangerous()
new BigInteger(parseData(headerTck.getNumber()))
probeParentLoaderLast=true
this.numberOfMessages=3000
deferUpdateBounds(RECENTS_STACK_ID)
/**   * Public size counter.   */ private final LongAdder mapPubSize=new LongAdder(); 
isHoverable()
handler.quit()
assertEquals(3,builder.getErrors().getErrors().length)
pipeline.addLast(new PassportStateHttpClientHandler())
updatePaints(g.getColor(),g.isShowCurrentTrack(),routePoints,settings,tileBox)
FileCopyPasteUtil.createDataFlavor(DataFlavor.javaJVMLocalObjectMimeType)
nodeEngine.getPartitionService()
Nd4j.getDistributions().createNormal(1,0)
HashSet<Long>
RowInfo<CommitId>
Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
new ConnectionError(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR)
timezoneFlags == TZ_FLAG_INCLUDE_DST_IN_TZ
availableVersions == null
fileAnnotation.setRevisions(revisions)
sequence.first <= first
new CartesianPolyFilterBuilder("")
Integer.valueOf(3)
LOG.debug("Received ping --> {}",payload)
noClasses.get() && !ApplicationManager.getApplication().isUnitTestMode()
MAX_PERCENT_DIFFERENCE=0.1
log.warn("Not found for {}: {}",uriInfo.getRequestUri(),error)
String text=status.getMessage(); 
new GeocodeFarmGeocoder(null,0)
getData() ^ 0x8
StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))
new RuntimeException(e)
assertComputationDurationAround(340000L)
bytes.length > 100000
final DomAnchorImpl parent
JournalFolder.class
latch.countDown()
isSmartLockAvailable()
firstCacheCfg.setMemoryPolicyName(POLICY_20MB_EVICTION)
new KBArticlePriorityException()
"adjustedPath=" + path
LOG.error("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
assertEquals(8,config.getMapConfigs().size())
Assume.assumeTrue(JavaDetector.isJDK7())
origin <= other
this.actual=expected
day.equals("pt") || day.equals("piątek")
socket.isOutputShutdown()
!isEnabled()
vocabularySettingsHelper.getClassTypePKs()
"years".equalsIgnoreCase(currentToken)
Thread.sleep(5000)
Values.stringValue(stringValue(offset))
i & 0x100
sess.init()
new DDMFormAssetRenderer(formInstanceRecord,formInstanceRecordVersion,_ddlRecordLocalService,_ddmFormRenderer,_ddmFormValuesFactory,_ddmFormValuesMerger)
this(name,type,length,null,false); 
id=15
public TokenStream create(TokenStream input){   return new StandardFilter(input); } 
Site.me().setRetryTimes(3).setSleepTime(100)
public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
Validator.isNull(userUUID)
c.getMethod("load")
new FileHyperlinkRawData("C:/Users/User/AppData/Roaming/npm/node_modules/karma-commonjs/client/commonjs_bridge.js",21,-1,3,s.length())
dialog.hide()
stepIdleStateLocked("s:shell")
masters.containsKey(nodeId)
ch.unsafe().flushNow()
BeanPropertiesUtil.getObject(model,_rowIdProperty)
potentialResponse == null
module != null
(halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth
public DerivedBuilder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
MapActivity.launchMapActivityMoveToTop(act)
serialVersionUID=1982914918
LayoutHelper.getGBC(2,10,1,1.0D,0,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2))
MessageFormat.format(TEMPLATE,metricsUri,pingUri,threadsUri,healthcheckUri)
FileUtils.write(fileWithBom,"\uFEFF")
new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,new FileEncryptionInfo(suite,version,new byte[suite.getAlgorithmBlockSize()],new byte[suite.getAlgorithmBlockSize()],"fakeKey","fakeVersion"),(byte)0)
EnumSet.of(BarcodeFormat.CODE_39,BarcodeFormat.CODE_93,BarcodeFormat.CODE_128,BarcodeFormat.ITF)
private final Resource resource; 
Matchers.anyInt()
myTreeBuilder.buildNodeForElement(element)
userInfo.getWebpage()
assertEquals(0.0,(0.4 - est.getProb()) / 0.4,0.05)
CACHE_LAYOUT_VERSION=9
PsiTreeUtil.getParentOfType(context,PsiStatement.class)
artifactFilter == null
case REPLACE_IS_SAME: 
body.addBefore(target,afterAnchor)
assertEquals(table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size(),inserted.size())
coverageDataManager.addCoverageSuite(config.getGeneratedName() + " Coverage Results",fileProvider,config.getPatterns(),new Date().getTime(),null,config.getCoverageRunner(),config.isTrackPerTestCoverage() && !config.isSampling())
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).learningRate(2e-3)
2 * 26 * 3600* 1000l
mNoteTypeSpinner.setSelection(position)
1234567890 * 2
return START_NOT_STICKY; 
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS
scriptField.setText("")
item.setTailText(notice)
LoginInteractorImpl loginInteractor
IBackupManagerService svc=mService; 
Table.isMetaTable(tableName)
caretColumn > value.getIndent()
POOL_SIZE > 1
sendCommand(CLIENT_SETNAME)
Rect r=(Rect)o; 
XmlPullParserFactory.newInstance()
showPoint != null
assertEquals(9776l,(long)sourceStats.get("novel"))
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.","Ursache waren die hohe Arbeitslosigkeit und die Wohnungsnot.","Ursache waren unter anderem die hohe Arbeitslosigkeit und die Wohnungsnot.","Er ahnt nicht, dass sie und sein Sohn ein Paar sind.","Die Ursachen der vorliegenden Durchblutungsstörung sind noch unbekannt.","Der See und das Marschland sind ein Naturschutzgebiet","Details, Dialoge, wie auch die Typologie der Charaktere sind frei erfunden.")
Dependency.embeddedPackage("rsconnect")
rec.isValidLineInSource(pastViolation.getLine())
edgeData.getAttributes() == null
curr.end > intervals[i].start
target.getName()
LOG.error("Too many MultiFetch errors, falling back to Fetch only.")
JetTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
Math.abs(oldDist - dist) > 10
searchContext.sort().getSort().length > 0
getContext()
mRefreshView.getTop() < 0
child.getAttributeValue(ATTRIBUTE_REFORMAT)
new ExternalPaymentProviderPlugin(clock)
content.readable()
nl.size() > minMatch
expectedGas=438
store.forceFlush()
new LFWLoader(imgDim,imageTransform,useSubset)
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).expectError(IllegalStateException.class)
/**   * Get DR pause state.  * @return DR pause state.  */ @Nullable public GridDrPause drPauseState(); 
Size.kilobytes(3)
token.getLifetime()
d < 0.02f
new String[nrKeys2]
currentType != globalType
actionId.equals(ActionKeys.IMPERSONATE) && PortalUtil.isOmniadmin(userId)
LOGGER.warning(e.toString())
isControl && (scriptMode || cursorInsideToken)
StringBuffer sb=new StringBuffer(); 
13 * Bytes.SIZEOF_LONG
container.getAttributeModel().getNodeTable()
new DisappearAnimationUtils(context,125,0.6f,0.6f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
native_get_videoeditor_export_profile(vidCodec)
mRemote.transact(GRANT_URI_PERMISSION_TRANSACTION,data,reply,0)
!timeout
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false)
Ints.checkedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
mRedrawClip.isEmpty()
bucketerContext.update(context.timestamp(),currentProcessingTime,context.currentWatermark())
nextProcessId=0
new IllegalArgumentException(String.format("Cannot get the time zone of: %s",this))
mEnabledPrintServices.size() > 0
shuffleWithInexistingUuids(project2.uuid(),project1.uuid())
rootView == null
LOGGER.debug("Could not parse entry",ex)
_logger != null
Middle middle1=new Middle(); 
stack == null
assertEquals(model.getProperties().get(NAME).getType(),"string")
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ COVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState)
new IllegalArgumentException()
ServiceLoader.load(ConfigurationBuilderFactory.class)
lType == null && rType == null
type == TYPE_PUBLIC
Float.valueOf(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
(100 - nodesContractedPercentage) / 100
ArtifactCompileScope.createScopeWithArtifacts(moduleScope,Collections.singletonList(myArtifact))
blog.getRemoteBlogId()
mAppTokens.get(i)
exchange.getProtocol().equals("https")
structuralLock.isLocked()
ApplicationManager.getApplication().getMessageBus().connect()
button.buttonGroup()
DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
msg.payload().copy()
cls.getMethods()
origin < other
BrowserApp.getAppContext()
new NagiosNscaStub(25667,"secret")
JMenuItem langs=new JMenuItem("Language"); 
configurator.setExcludedEntries("jodd.petite.data.*","jodd.petite.tst3.*","jodd.petite.tst.Ses","*Public*","*Secret*","*$*")
POSITVE_X(0)
insertIndex > 0
c.set(IDAUTHORITY_WAIT_MS,10)
counter + 2
return topicName; 
AnnotatedElementUtils.getAnnotationAttributes(type,annotationType)
ColorResources.getColor("textColor")
args.length < 1
child.getElementType() != TokenType.ERROR_ELEMENT
lastDot >= 0
returnCode != 0
returnType.isPrimitive()
new IndexWriter(indexDir,analyzer,create)
addr.isAnyLocalAddress()
assertResultsPresentInDataResponse(url,timerJob.getId())
currentDateTime.minusSeconds(this.skewAllowance)
configInstance.getIntProperty(namespace + "eurekaServer.readTimeout",8000)
iterations=100
merge4dCnnData(featuresToMerge)
totalLength / 100
new WorldPoint(3013,3181,0)
new WorldPoint(2912,3433,0)
argumentsAreTabular(arguments) == 2
mTfs.delete(mTfs.open(new TachyonURI(dirPath)))
AllGlsJavaTestsSuite.suite()
resources.lookup(path)
new IndexWriter(directory,ANALYZER,true)
group.isLayout() || group.isLayoutSetPrototype() || group.isSite()
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)")
Assert.notNull("MapSession cannot be null")
assertEquals(1419,lastLink)
assertEquals(49,(long)stats.getServerCache().getHostFor("dns:").getSubstats().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
ClusterLeaveReelectionListener.class
(long)y & 0xFFFFFFFL
AssetTagFinderUtil.filterCountByG_N(_scopeGroup.getGroupId(),assetTagName)
Long.valueOf(name)
info.toString()
localMessage == null
ActionsEnum.valueOf(action)
oldBuffer.size() > 0
PolyglotBindings.class
PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,expression)
entry.getName().startsWith(resourcePath)
!token.hasVisible && !mClosingApps.contains(token)
clusterService.operationRouting().indexShards(clusterService.state(),request.index(),request.type(),request.id(),request.routing())
myRegisteredPasses == null
backUpDirs.length <= 1
g.events().stopLocalListen(lsnr,EventType.EVT_NODE_LEFT)
final WebPageDetail webd=(WebPageDetail)d; 
Preconditions.checkArgument(root.isAbsolute())
invoke(args)
registrar.registerReferenceProvider(new PsiElementPattern.Capture<PsiElement>(PsiElement.class){   @Override public boolean accepts(  @Nullable Object o,  ProcessingContext context){     return o instanceof PsiLiteralValue && ((PsiLiteralValue)o).getValue() instanceof String;   } } ,new ArbitraryPlaceUrlReferenceProvider())
position - 1 > 0
/**   * This version of getRow() only takes data from certain rowsets We select these rowsets that have name = step Otherwise it's the same as the other one.  */ public synchronized Row getRowFrom(String from) throws KettleException {   output_rowset_nr=findInputRowSetNumber(from,0,stepname,0);   if (output_rowset_nr < 0) {     throw new KettleException("Couldn't find hop '" + from + "' for reading from");   }   return getRowFrom(output_rowset_nr); } 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFiles,getOperationName())
new IndexingStats.Stats(3L,71L,0L,0L,0L,0L,0L,true,302L)
msbuild.exists()
new Property()
chain.getEarliestKeyCreationTime() >= vKeyRotationTimestamp
ColorResources.getColor("tabTitleHighlight")
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"retval"),connection,transformer(connectionSource,connection))
Matchers.<Map.Entry<String,String>>contains(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
Serde<V1>
new SlopStorageEngine(new InMemoryStorageEngine<ByteArray,byte[],byte[]>("slop"),2)
private TvShowFragment listener; 
!dynamicState.changingBlobs.isEmpty()
new ScoreIterationListener(1)
!(orderParams instanceof CancelOrderByIdParams) && !(orderParams instanceof CancelOrderByCurrencyPair)
node.toAppliedPTransform()
matcher.groupCount() > 0
TreeUtil.expand(getTree(),3)
from + 11
@Parameters(name="{0}") public static List<String> getList() throws PoshiRunnerException {   List<String> classCommandNames=new ArrayList<>();   String testName=PropsValues.TEST_NAME;   if (testName.contains("#")) {     classCommandNames.add(testName);   }  else {     String className=testName;     Element rootElement=PoshiRunnerContext.getTestcaseRootElement(className);     List<Element> commandElements=rootElement.elements("command");     for (    Element commandElement : commandElements) {       classCommandNames.add(className + "#" + commandElement.attributeValue("name"));     }   }   return classCommandNames; } 
queue.notify()
final ImageView buttonFavorite=(ImageView)view.findViewById(R.id.context_menu_fav_button); 
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,true)
new IndexWriter(merged,new StandardAnalyzer(),true)
selectBoxList.setScrollingDisabled(false,y)
private void checkGroupHasCapacity(SchedulerGroup groupContext) throws OutOfCapacityError {   if (groupContext.numPending() >= maxPendingPerGroup && groupContext.totalReservedThreads() >= resourceManager.getTableThreadsHardLimit()) {     throw new OutOfCapacityError(String.format("SchedulerGroup %s is out of capacity. numPending: %d, maxPending: %d, reservedThreads: %d threadsHardLimit: %d",groupContext.name(),groupContext.numPending(),maxPendingPerGroup,groupContext.totalReservedThreads(),resourceManager.getTableThreadsHardLimit()));   } } 
r.getResponse().sendError(503)
features.isKeyOrdered=false
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1)
@Specialization protected Object escapingGlobal(LLVMGlobal escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMSharedGlobalVariable(escapingValue); } 
getTimeout(ticket)
telephony.getCdmaEriIconIndexForSubscriber(subId)
type instanceof GraphQLTypeReference
identifierHelper().toIdentifier(resultSet.getString("TABLE_NAME"))
getName()
/**   * Returns a child element node at given index.  */ public Node getChildElement(int index){   initChildElementNodes();   if ((index < 0) || (index >= childElementNodes.length)) {     return null;   }   return childElementNodes[index]; } 
!portletDataContext.getBooleanParameter(NAMESPACE,"record-sets")
PsiUtil.resultOfExpressionUsed(grAssignmentExpression)
SecurityUtils.isSecurityEnabled(configuration)
sto * 1000
Sets.<Integer>newHashSet()
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex())
ExoPlayerFactory.newSimpleInstance(renderersFactory,trackSelector)
out.writeDouble((Float)obj)
videoStream != null
handleIncomingUserLocked(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,about)
tessellator.tessellatePolygon(false,true,true)
timeout < 0
new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
Options.DumpOnError.getValue(GLOBAL)
objFactory.buildBean(name,null,false)
entry.getKey().get(12,String.class)
"0.0.0.0:" + DEFAULT_NM_LOCALIZER_PORT
BIG_ENDIAN=0x78562312
LAST_VERSION=708
component.setSelectedItem(selected)
assertThat(captor.getValue()).containsOnly("joe@mydomain.eu")
mState == STATE_STARTED | mState == STATE_STARTING
res.time >= 210
reverseSpeedEncoder.getBits()
list.get(3).dist=2274
/**   * 是否搜索模块类同包以及子包的其他类  */ boolean scanPackage() default false; 
((OverriderUsageInfo)usage).getElement()
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key,pnoSettings)
powerFlowResponse == null
restEnableGzip=false
assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName)
kryo.readObjectOrNull(input,JobID.class)
colNameToSkip != null
!mResources.getConfiguration().isScreenRound()
(UnsubscribeForm)form
Realm.getInstance(this)
orderUsingCustomerPayment && !cartHasTemporaryCreditCard
(a & 0xe0) == 0xb0
targetY - diffY
new MockNode(builder.build(),false,Version.CURRENT,Arrays.asList(ShieldPlugin.class,LicensePlugin.class))
Matchers.equalTo(1)
this.getInputStream()
checkRegister(objectRegisterType,ReferenceCategories)
redirectUri == null
new Message(MSG_TXT)
createArtifact("a","1.0")
status != BackupConstants.TRANSPORT_OK
assertLeftRightCategory(2,category2a)
Component component
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")
return myEvaluateActionHandler; 
result.expectedMessageCount(1)
dlFileEntryType.getName()
{filePath}
LayoutAdminWebUpgrade.class
new TrustException("ENCRYPTED_KEY_ERROR",LOG,e)
new IllegalArgumentException("Remote " + remoteName + " not found. ")
logger.warn("Cannot play queue ({})",e.getMessage())
new InMemorySessionManager("",1)
"top: new NRT point (version=" + version + ") is older than current (version="+ version+ "); skipping"
IntrospectionSupport.getProperties(configuration,params,null)
new RuntimeException("Mocked failed close!")
Log.info(this + " JVM BUG(s) - injecting delay" + _jvmFix2+ " times")
pubnub.disablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
new AccountCapsule(toAddress,null,AccountType.Normal)
new MediaDriverReceiver(toClientReceiver)
engine.refresh("test",true)
IoUtil.delete(dataDir,false)
mRvc == null
nestedBuilder.nestedTypes("FormSuccessPageSettings")
log.logError(BaseMessages.getString(PKG,"JobUnZip.Error.Label"),BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
fpId <= 0
margin > visEndLinePosition.column
mDeviceOwner != null
NORMAL(1)
ourXWindowIDEA94683FocusBug && isFocused() && !myRequestFocus&& prevOwner != null
!thread.isOutgoing()
100 * 1024 * 1024
enableOptimization.isEnabled()
product.fetch("skuMedia",JoinType.LEFT)
ModelReference.of(ServiceRegistry.class)
DictionaryGenerator.buildDictionaryFromValueList(Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ),tblColRef.getType())
timeout=10000
PushImageCmdImplTest.class
parent instanceof PsiParameterList
newStart.equals(ByteBufferUtil.EMPTY_BYTE_BUFFER)
plugin.getWorldEdit().handleArmSwing(localPlayer)
overrideAllAssetCategoryIds != null
ClusterNode node=rmtNodes.get(nodeId); 
r != null
event.getEntity() instanceof WitherSkull
Assert.assertEquals(masterAddress,new InetSocketAddress("RemoteMaster1",10000))
layerInput.slices()
m_tagFactory.createTag(testClass,a,annotationClass,m_transformer)
supportProvider.getPullUpHandler()
addView(root,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
a[left]
LOGICAL_TYPE_TIMESTAMP_MILLIS.equals(logicalName)
new StringBundler(6)
generatePack
lValue.getType()
WeDeployMessageQueuePlugin.class
return alternatives; 
randomSize=false
peers.stop()
Integer.valueOf(patchVersionString)
checkResources(app)
uuid.getMostSignificantBits()
GridTestUtils.waitForCondition(new GridAbsPredicate(){   @Override public boolean apply(){     return backupQueue(ignite(0)).isEmpty();   } } ,2000)
RESULT_TIMEOUT=1500
System.currentTimeMillis() / 1000
new IllegalStateException("unable to find any unassigned shards to explain [" + request + "]")
new PartialEscapeAnalysisPhase(null,runtime(),null,assumptions,false)
public @Nullable Attachment getAttachment(AttachmentId attachmentId){   SQLiteDatabase database=databaseHelper.getReadableDatabase();   Cursor cursor=null;   try {     cursor=database.query(TABLE_NAME,PROJECTION,PART_ID_WHERE,attachmentId.toStrings(),null,null,null);     if (cursor != null && cursor.moveToFirst())     return getAttachment(cursor);  else     return null;   }   finally {     if (cursor != null)     cursor.close();   } } 
revisionVersion=1
JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time",false)
menuItem.getComponentCount()
new StackManager(stackRoot,commonServices,osFamily,true,metaInfoDao,actionMetadata,stackDao)
callbacks.onImageLoadingFailed()
basicInvocation.potentialResponse == null
super.notifyListenersAboutAddedElement(element)
historicState(item,timestamp)
lock.tryLock()
cfg.getMarshaller() != null || !(cfg.getMarshaller() instanceof BinaryMarshaller)
StackHelper.isCraftingEquivalent(reqStk,invStk,true)
version.equals(VERSION_1_4)
NETWORK_ACCESS_TIMEOUT_DEFAULT_MS=0
registerForEvent(false,true)
mVibratorService.vibrate(2000,new Binder())
Color.fromRGB(0x51301A)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
mDarkIntensity == DARK_INTENSITY_NOT_SET
filteredMsgCount++ % 10000 == 1
logger.info(String.format("writing packet %s",packet))
(strLine=br.readLine()) != null
JBUI.insets(2)
Math.max(maxReturned * 2,maxRows)
public TestDummy readFrom(Class<TestDummy> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {   throw new WebApplicationException(999); } 
HDR_TYPE_DATA=0x00
entity.get(Keys.DISPLAY_NAME).orElse(Text.EMPTY).isEmpty()
!isEventIgnored(event) && !myChangeListManager.isIgnoredFile(event.getFile())
tok[2]
myTools != null
new SendReq(message.getPduHeaders(),body)
AppNewMsgAlarm.startAlarm(getActivity(),true)
jp.getIntValue()
"Flow " + flowName + " cannot be found in project "+ project
assertLeftRightCategory(6,category2c)
!(jdk.getSdkType() instanceof IdeaJdk)
HighlightInfo.newHighlightInfo(type).range(refElement).description(message)
assertLeftRightCategory(2,category1a)
hiddenElements.contains(graphElement)
mProgressDialog != null
connection.pexpire(key,millisecondsTimestamp)
RELEASE_DELAY_MS=120
LayoutSetPrototypeWebUpgrade.class
StringBuffer stringBuffer=new StringBuffer(); 
AUTH_TYPE_DIGEST.equals(this.authType)
Intent.ACTION_LOCALE_CHANGED.equals(action)
current.compareTo(position) <= 0
n < count(coll)
logger.trace("Receive queue TAKE: Length={}",recvQueue.size())
ShoppingWebUpgrade.class
6 * Bytes.SIZEOF_LONG
addButton.setActionCommand(ADD_INCLUDE)
log.info("mlocking " + file + " with length "+ length)
manyToOne.setLazy(false)
addInactiveSubscription(key,info)
Mono<CsrfToken>
context.add("exceptionalMethod",123f)
new UDFArgumentTypeException(2,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
mock2.expectedMinimumMessageCount(3)
maxPendingPersists > 0
actualHeight > reqWidth
packer.packStructHeader(1,INIT.signature())
new int[101]
ConfigPropertyVetoExceoption e1
new HumanReadableException("%s: %s",target,e.getMessage())
caretPos.line == 1
!b.getAtmosphereResources().contains(r)
selectedPos < lastPos
this.interrupted()
oldStatus == status
LocalEjbReceiver.clone(invocation.getInvokedMethod().getReturnType(),resultCloner,exception,allowPassByReference)
requestData.setText(element.getPropertyAsString(TCPSampler.REQUEST))
mService.getProfiles(UserHandle.myUserId(),false)
CollectionUtils.compareAsList(getParameters(),o.getParameters())
getHeight()
new GameObjectQuery().idEquals()
java.util.concurrent.Executors.newSingleThreadExecutor()
new SimpleCanalConnector(address,username,password,destination,null)
file.getLocalFile()
LOG.trace("Unsupported minification resource: " + filename)
Files.copy(zipFile.getInputStream(zipEntry),file.toPath())
ZonedDateTime.now(ZoneOffset.UTC).isAfter(expDate)
new GitMaterialConfig(new UrlArgument(git.getUrl()),gitBranch,null,git.isAutoUpdate(),filter,crScmMaterial.getDirectory(),toMaterialName(materialName),git.shallowClone())
sDefaults.putBoolean(KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL,true)
"".equals(lib)
nodeInfo.getPlugins().getInfos()
Log_OC.e(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
configuration.addClientInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
items[i]
final IOException e
logger.error("Field sorting failed, couldn't find table spec: " + model.getSimpleName())
queue.size() < 100000
text.setCompoundDrawablesWithIntrinsicBounds(item.icon,null,null,null)
location.sourcePath()
tableHasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
typeSettingsProperties.toString()
data[0].charAt(0)
JwsSignatureVerifier signer
addFileType("WEBP",FILE_TYPE_WBMP,"image/webp")
aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
paras.put(17L,10000L)
preloadQueue.size == 0
Messages.MESSAGES.pathParameterNotProvided(param)
logger.warn("Cannot remove group member ({})",e.getMessage())
/**   * Takes the blob of Kubernetes JSON (pod, replication controller, service, config, template etc) and applies it to the runtime environment so that any changes or new items take effect  */ String apply(String json) throws IOException ; 
showRecentApps(true)
amenity.getId() % 2 == 1
format == BarcodeFormat.UPC_E
dao.merge((WidgetLayoutEntity)anyObject())
LOG.error("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
DISABLE=true
provider instanceof IpnbFileEditor
glyph.get().setSizeRatio(sizeSlider.getValue())
SIZE_V1=25
!result.getResult()
fileIds == null
@Override public Value emitBitCount(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IPOPCNT,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LPOPCNT,result,asAllocatable(value)));   }   return result; } 
fluidStack != null
addTo(instant.getMillis(),scalar)
logger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
!mTextServicesManager.isSpellCheckerEnabled()
factory.createType(clazz,factory.createRawSubstitutor(clazz))
context.connectTimeout * 1000
context.getBeanNamesForType(type,false,true)
UIUtil.getTreeSelectionBackground()
primaryIndexes.size() > indexes.size()
LOG.error("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
Nd4j.zeros(mb,1,inputLength)
logger.debug("{}: Blocks waiting to be proceed: lastBlock.number: [{}]",blocks.get(blocks.size() - 1).getNumber(),name)
liveDocs.get(i)
ppcY / 2.54f
answer != null
offset(100000.0)
mSrc.getParent()
Arrays.asList("amzn.to","bit.ly","bitly.com","fb.me","goo.gl","is.gd","j.mp","lnkd.in","ow.ly","SCN.BY","su.pr","t.co","tinyurl.com","tr.im")
mWidth=200
boolean store() default true; 
result.startsWith(connectionFactory.getProtocol() + ":/")
ItemDumper dumper=new ItemDumper(cache,out,java); 
!StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"flush") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"grant")
perfRule.assertDurationAround(duration,4200L)
new ModelNode().set(60000)
backgroundTask != null
Slog.wtf(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
id=19903
revalidate()
new GridDataLoaderProcessor(ctx)
assertEquals(6,databindings.size())
return Long_TYPE; 
createHandlerResult(c,principalFactory.createPrincipal(principal.getId()),null)
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
case CHILD: 
channel == null
PathUtils.concatPath(src,child)
mWPAndroidGlueCode.setContent(null,postContent)
parameters.getFlashMode() == null
FileMetadataSnapshot.missing()
components.symbolUsageValidator.validateCall(descriptor,trace,expression)
sonarQubeIsUpWatcher.waitForLog(10,TimeUnit.SECONDS)
MAX_PRETTY_PRINTED_PROPERTIES=4
Integer.valueOf(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,prevDeviceState,newDeviceState)
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDw,unrotDh)
queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)
fullJid.split("/")
EmptyResponse.class
noStructuresDLFileEntryMetadatas.size()
p3.isTerminated() == false
new ParameterSpec(valueName,array,nodeData.getTypeSystem().getGenericType(),false,Cardinality.ONE)
GitFileUtils.delete(myProject,root,files,"--ignore-unmatch")
new InvalidValuesArgumentException("Wrong header information type: " + fieldsFromHeader)
telephony.getCdmaEriIconModeForSubscriber(subId)
setEnabledFunctions(null,false,false)
IndexSettingsModule.newIndexSettings(shardId.index(),Settings.EMPTY,Collections.EMPTY_LIST)
command <= 0x0F
CythonLanguageDialect._isDisabledFor(node)
getCutoffText(LAST_PLAYED_CUTOFF,context)
!file.isInLocalFileSystem()
UserException.resourceError().message("Unable to acquire queue resources for query within timeout.  Timeout for %s queue was set at %d seconds.",queueTimeout / 1000,queueName)
new IllegalStateException("cannot set max pool size to a value less than the current max value(=" + i + ")")
child.getMeasuredHeight()
log.error("Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!")
COLORDRAWABLE_DIMENSION=1
getCompletePredicate()
oldValue != null
myDiscardedLengths[0]
currentPropertyJoinColumnOverride != null
subMesh.firstByte.intValue() / 3
assertEquals("incorrect number of elements",19,nodeInfo.length())
LOG.error("Failed to shut down ActorSystem")
capturedWildcardType.getUpperBound()
new RequestCounter(resetDurationMs,mockTime)
!withChildren
isStatementNeededForInitializationOfVariable(statement,nextStatement)
id=15843
LOG.error("Failed to transit standby cluster to " + SyncReplicationState.DOWNGRADE_ACTIVE)
IBluetoothMap.class
test("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)
action.new ReroutePhase(request,listener)
Log_OC.wtf(TAG,"Unexpected intent " + intent.toString())
mDir.getDirId()
(dispatcherMapping & FORWARD) > 0
new LinkedFileViewModel(linkedFile,entry,databaseContext,taskExecutor,dialogService)
jniGetLocalAnchorA(addr,tmp)
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.keywords"),portletModel.getPortletId())
Integer chatId
return self; 
dropdownItem.setHref(getPortletURL())
waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)
GrailsFactoriesLoader.loadFactories(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
module.getExcludes()
convert31YToMeters(xB,xA)
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.TERADATA)
objectFile.createDefinedSymbol(heapSection.getName(),heapSection,0,0,false,true)
stmts == null
addTrailingCells(false)
overlay.getTimestampFrom() >= sample.getTimestamp()
lineNumber=0
ConfigHelper.getClientTransportFactory(conf).openTransport(location,port,conf)
toolchainType != null
oldestInflightEntry != null
new TestItem()
clocks.uptime+=1111
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commit()
ExecutionParameters parameters
TypeScriptNodeClientCodegen.class
sendKeyUp()
myKeepSimpleBlocksInOneLine.isSelected()
relations.replace(oldName,newTable) != null
mAztecImageLoader != null
isSuccess
value == null
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true)
new AlertDialog.Builder(getActivity())
connection.getParser().addListener(websocket)
value={StringFilterAggregator.class}
bbbGW.userConnectedToGlobalAudio(emm.voiceConf,emm.userid,emm.name)
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws Exception {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getConstructor()
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),11)
1 << 19
UnderFileSystem.get(tmpFolder)
!getDatabaseTypeEnvironment().isEnabled() && !isExecuted()
StringSchemaKey key
NONCONFORMING_LR_RULE(165,"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle",ErrorSeverity.ERROR)
webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class,params)
localPlayer.getWorldLocation().distanceTo(trapLocation) <= 1
Simple.of(type)
BufferUtil.zeroBuffer(128)
JSParameterTableModel.createParameterTypeCellFragment("",myProject)
listener.onTestFailed(test)
(!client.isFailed()) && (!client.isGone())
world.setBlockState(other,state,3)
ourSupportDifferentFileTypes=false
new HashCollisionNode(edit,count,hash,array)
dropdownItem.setHref(getPortletURL())
Simple.of(skylarkType)
case MACOS: 
verify(instrumentation,times(2)).isRetransformClassesSupported()
document.addKeyword("size",dlFileEntry.getSize())
assertEquals(actual().toString(),typeString)
previousTypeSettingsProperties.toSortedString()
editor.commit()
adapter.item(R.string.layer_recordings).selected(SHOW_RECORDINGS.get() ? 1 : 0).icons(R.drawable.ic_action_audio_dark,R.drawable.ic_action_audio_light).listen(listener).position(6)
id=29
mSharedElementNames.size()
Tuple2.of(timeoutPattern4,13L)
Long.valueOf(id)
myDisposed
replayPosition - stopPosition > 0
AssetCategoriesAdminWebUpgrade.class
uncompressedProto.length < 2500000
id=15858
sortByDate(false)
sendMessage(1000)
GitBlit.self().processCommitMessage(repositoryName,text)
super.equals(obj)
PortalSettingWebUpgrade.class
new GeoPoint(bottom,posRight)
BitmapUtils.isVideo(mFile)
new BaseAnalysisActionDialog(dialogTitle,"Analyze scope",myProject,analysisScope,name,true,analysisUIOptions)
id=32
SettingsActivity.class
logger.warn("Line-in of {} is not connected",getUDN())
((t - 1) * t * t) / 2f
Messages.getString("Spoon.Dialog.SaveChangedFile.Message")
equalTo(22)
(bytes[bytes.length - 1] & outputValueMask) == STATUS_SWITCHING_ON
new SummariserRunningSample("DELTA",0)
wlZipFilename.setText(dir)
PATH.getAbsolutePath()
input.mark(firstReadBufferSize)
i <= conCount
cfg.setBindIp(identity)
regSocial * trusterWeightValue * trusterWeightValue
OverridingMethodsSearch.search(method,method.getUseScope(),false)
item.setState(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
setAttributeInternal(tempInodePath,true,opTimeMs,options)
props.getProperty(PRINT_FIELD_NAMES_PROP,FALSE)
av != null
UserHandle.getCallingUserId()
L.log(Level.WARNING,"Audio clip {0} uses an external .resS file that doesn't exist!")
synchronized (mVolumes) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
return _requestBuffers; 
getSSLContext().getSocketFactory().createSocket()
ItemAdapter<ExpandableItem>
a.getInteger(attr,DEFAULT_MIN_WIDTH)
pointF.y=0.9f
lastUid >= 0
ZKMetadataProvider.getRealtimeTableConfig(propertyStore,tableName)
mode.contains("advent") || mode.equalsIgnoreCase("2")
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.vr@1.0::IVr","android.hardware.media.omx@1.0::IOmx")
ctx.getOuterContext()
connectGatt(context,autoConnect,callback,TRANSPORT_AUTO,PHY_LE_1M_MASK)
cn.length() == 0
dest.writeParcelableArray(remoteInputs,flags)
new RagManager(tm)
table.leftJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
t.equals(type)
new IndexWriter(rd2,new SimpleAnalyzer(),true)
showSelectionToggleButton.setSelected(false)
methodExists(altName,fieldNode)
(dispatcherMapping & ASYNC) > 0
dataSource.setMaxConnLifetimeMillis(Long.parseLong(getConnectionAge()))
LOG.info("Cannot get the live nodes: {}",e.getMessage())
map.put(entry.getKey(),valueToString(joiner,entry.getValue()))
tearDownOnShutdown.setSelected(false)
Matrix.setIdentityM(mMatrixNight,0)
new Handler(){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
varX("listener")
doTest()
n >= 0
new RaftMessages.HeartbeatResponse(state.myself(),RaftMessages.Type.HEARTBEAT_RESPONSE)
client.get(path)
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE)
LOGGER.debug("Could not execute exportToClipboard",ex)
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false)
result != START_SUCCESS
mOpenStreetMapView.onDraw(canvas)
count > 2
Int4 v
BuildRule mavenCoord=new JavaLibraryBuilder(BuildTargetFactory.newInstance("//has:output"),filesystem,HashCode.fromString("aaaa")).setMavenCoords("com.example:buck:1.0").addDep(z.getBuildTarget()).build(graphBuilder); 
this.parseAsArray(instanceUrl,"events")
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title2,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,serviceContext)
Log_OC.wtf(TAG,"Unhandled conflict decision " + decision)
id=15807
(status & 0x04000000) > 0
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())
ShirtPocket.this.startDrag(clip,thumb,false)
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNodes)
DEFAULT_EXPIRE_AT=0
getPositionForView(switchView) < getHeaderViewsCount()
ix >= ixz
new StringPreference("map_overlay",null,true)
new PreDecorationFilter(routeLocator(),this.server.getServletPrefix(),new ZuulProperties())
public DerivedBuilder setProxyPort(int port){   this.proxyPort=port;   return this; } 
assertOpenEventually(countDownLatch,50)
new AnnotationTransactionAttributeSource()
myTempDir.getCanonicalPath()
mDisplayContent.getSplitScreenPrimaryStack()
readPermission.intern()
generateRandomStringArray(20,20,false,true)
Integer.valueOf(bottomStr)
mapActions.openOptionsMenuAsList()
getPropertyAsString(PROXYSCHEME)
new PackratActionDialogContents(actions)
logger.info("license [{}] - grace",license.uid())
height - 48
SyncToAsyncChannel.class
public File sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
mConnector.execute("cryptfs","createnewuserdir",userHandle,path)
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,false)
list.add(v)
mEnterTransformation.printShortString(pw)
pluginManager.isExecuted()
Optional.of(realmName)
mState.mPivotXRel == relative
context.getContextPath()
mapReader.isBasemap()
view != null
Rank.getInstance()
getInstantiator().newInstance(DefaultDistribution.class,fileResolver)
id=15848
report(n,MISPLACED_ANNOTATION)
displayNameComparator.compare(itemStack1,itemStack2)
new WeekViewEvent(event.getId(),event.getName(),startTime,event.getEndTime())
WikiWebUpgrade.class
ScriptingCompilerConfigurationExtensionKt.configureScriptDefinitions(scriptTemplates,configuration,messageCollector,new HashMap<>())
AndroidExcludedRefs.createAndroidDefaults()
mInputConsumer == null
ResponseImpl headers(Map<String,Property> headers); 
m.getMethod()
rendererMap.put(info.target,info.renderer)
restrictions.length > 0
doTest(false)
band.getResultAmount().compareTo(fulfillmentAmount) <= 0
transactionalMap.put(key,value)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000)
position == -1
logger.error("Starting Jetty Azkaban Executor...")
PlatformUtils.isIntelliJ()
inputRowMeta != null
new StringInputRowParser(new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null)),null,null,null)
new DecoderInfo("OMX.google.raw.decoder",null)
tableName.toString()
queueIndex < 0
(Node)container
(javaClass.getAccessFlags() & org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) > 0
public TokenStream create(TokenStream input){   return new CapitalizationFilter(input,this); } 
pair.getSecond() > best.getSecond()
new File(extraLibDirNames,extraLibDirName)
transformation.getMoreData(opCode,fin,rsv,messageBufferBinary)
"Center loss is " + intraClassLoss
_addTestVariant("small.hd","uuid1",101,200)
PyElement parentScope=PsiTreeUtil.getParentOfType(lambdaExpression,PyClass.class,PyFile.class); 
Assert.assertEquals("Recall outside target range",0.6924,r,0.001)
result.expectedMessageCount(3)
String log="The event isn't consumed, id:" + snapshot.getId() + " status:"+ snapshot.getStatus()+ " task-count:"+ taskList.size(); 
new IllegalArgumentException()
path.substring(6)
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
resource.getPath().endsWith("LanguageTool.uno.jar")
DefaultJarFile.class
e instanceof AuthException
!trans.isFinished() && !parentJob.isStopped()
getGravity(gravity)
getPath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
_buildTemplateWithGradle("content-targeting-rule","rule-dependency-management","--dependency-management-enabled","true")
Assertions.assertNotNull(mModules.get(moduleInterface))
mWriteOwners != null
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",GOOG_BASE_CLASS_ERROR)
assertEquals(helper.getRelationshipIndexes().length,1)
new RFXComException(e)
chatCommandManager.registerCommand(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
new BooleanPreference("map_vector_data",false,true)
types != null & !types.isEmpty()
JBUI.Borders.empty()
capOpSet != null
NB_CACHED_PARAMS=20
getTokenNames()
usage instanceof IfNode || usage instanceof FixedGuardNode || usage instanceof ShortCircuitOrNode|| usage instanceof GuardingPiNode
Iterator<Long>
Build.VERSION.SDK_INT >= 14
p.speedAlarm()
provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials)
typeConverter.convertTo(XMLStreamReader.class,createNonXmlFilterReader(exchange,stream))
myEditor.offsetToVisualPosition(endOffset,false,true)
left.getFieldName().equals(right.getFieldName())
LOGGER.error("[{}] Caused by: [{}]",e.getMessage(),authnExceptions,e)
new SinglePeriodTimeline(durationUs,!isLive)
cctx.events().addEvent(partition(),key,evtNodeId,null,newVer,EVT_CACHE_OBJECT_REMOVED,null,false,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
transport != null
c.isEncoded()
toRemove[0]
op != CALLCODE
assertEquals(10,definitions.size())
public void setInitialWindowSize(long initialWindowSize) throws ConnectionError {   if (initialWindowSize > MAX_WINDOW_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.initialWindowSize=(int)initialWindowSize; } 
/**   * @param currentItem     the current item we check  * @param nextItem        the item comming after the current item  * @param currentPosition the current position of the currentItem  * @return the HeaderItem we want to add after the currentItem  */ Item group(Item currentItem,Item nextItem,int currentPosition); 
isDeprecated(constructor)
DDMWebUpgrade.class
position < 0 && position >= list.size()
Assert.assertEquals(5,users.size())
new TreeScanner<Void,Void>(){   @Override public Void visitMethod(  MethodTree tree,  Void unused){     if (tree.getModifiers().getFlags().contains(Modifier.NATIVE)) {       hasAnyNativeMethods.set(true);     }     return null;   } } .scan(path,null)
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid())
parameter.toString()
decoderMatch != null || decoderMatch.hasMatches()
new Dialog(this,mThemeId)
um.isUserUnlocked()
DefaultChannelFuture.setUseDeadLockChecker(false)
libraryDescriptionDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
IgniteFuture<Object>
new ServiceActivatorContextImpl(batchBuilder)
assertEquals(5,dict.getSize())
mFixedExecutionService.shutdown()
usersStats.getMin()
conceptToValidate.getConceptId()
builder.getNotification()
myComp.getSize()
linesInput > meta.getRowLimit()
/**   * The resource.   */ private T mResource; 
this(host,port,threadName,queueSize,timeout,SEND_BUFFER_SIZE,DEFAULT_BUFFER_SIZE); 
typeSerializer.getClass()
returnSecurityError
new RowIcon(2)
assertNotNull(message.getPayload() instanceof Collection<?>)
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalArgumentException cannotCloseTransactionContainerEntityManger(); 
outputFile.lastModified() < grammarFile.lastModified()
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ T parseLiteral(Object input); 
applyTemplates(template)
random.nextInt(64)
note.getAlarm() != null
aai != null
Thread.sleep(100)
blendColor(srcPixels[x],alphaFiller | dstPixels[x],mode)
Numeric.encodeQuantity(filterId)
d.slices()
_replaceTranslationCommand.replaceTranslation(file.toPath())
super.updateCachedItem(group)
matchIfMissing=true
setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
a.getColor(R.styleable.WeekView_dayNameLength,mDayNameLength)
new QuickAdapter(HeaderAndFooterUseActivity.this,PAGE_SIZE)
this.getScanId()
proto.getExecPath()
GL20.glGetUniform(program,location,params)
theClass.getConstructor(new Class[0])
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(36)
mBouncer.show(true,false)
ModuleReflectionUtils::isCheckstyleCheck
pixmap.getHeight() - yHotspot - 4
super.onUpdate(pSecondsElapsed)
new SqlQuery("salary >= ? and salary <= ?")
_buildProjects(gradleProjectDir,mavenProjectDir,gradleOutputDir,mavenOutputDir)
HDR_TYPE_SM=0x02
RunTests.class
currenType != Type.INT
condition != null
Parser.xmlParser()
((SimpleHttpConnectionManager)manager).shutdown()
Class.forName(DEFAULT_IMPL)
new IngestInfo()
_connector.getResponses("GET /foo HTTP/1.1\n\n")
getDelegate().getSupportedCipherSuites()
p2.getStatus()
serialVersionUID=1199895056
wlZipFilename.getText()
throwable.isPresent()
whitelist.addAttributes("img","alt","height","src","title","width")
mTestStream.getBytesFlushed()
StringBuffer resultPath=new StringBuffer(DefaultGroovyMethods.join(config.getClasspath(),File.pathSeparator)); 
Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
ARM_LINUX_ADNROIDEABI("arm-linux-androideabi")
config.getId()
module != null
getLastChildElement(tabBarParent)
NonPersistentSiteTheadLocalCache cache=NonPersistentSiteTheadLocalCache.getSitesCache(); 
mGestureDetector != null
param.setResult(new FileNotFoundException("XPrivacy"))
lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION) || lastPathSegment.endsWith(VTT_FILE_EXTENSION)
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
mAdapter.getCount() == 0
zkDb.snapLog.getDataDir()
isExpired(timestamp)
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)
@Nullable
new int[433092]
key.startsWith("jar:")
"/html/portlet/" + jspPath + "/"+ categoryKey+ ".jsp"
assertEquals(3,repos.length)
witnessCapsule.getAddress()
!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled()
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message))
List<String>
/**   * This is  {@link SurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.2.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class SurrogateRegisteredServiceAccessStrategy extends BaseSurrogateextendsRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-1688944419711632962L;   private boolean surrogateEnabled;   private Map<String,Set<String>> surrogateRequiredAttributes=new HashMap<>();   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> attributes){     if (isSurrogateAuthenticationSession(attributes)) {       if (!isSurrogateEnabled()) {         return false;       }       return doPrincipalAttributesAllowSurrogateServiceAccess(attributes);     }     return super.doPrincipalAttributesAllowServiceAccess(principal,attributes);   }   /**   * Do principal attributes allow surrogate service access?.  * @param principalAttributes the principal attributes  * @return the boolean  */   protected boolean doPrincipalAttributesAllowSurrogateServiceAccess(  final Map<String,Object> principalAttributes){     if (!enoughRequiredAttributesAvailableToProcess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. There are not enough attributes available to satisfy requirements");       return false;     }     if (!doRequiredAttributesAllowPrincipalAccess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. The principal does not have the required attributes specified by this strategy");       return false;     }     return true;   } } 
ActivityOptions.makeScaleUpAnimation(view,0,0,view.getMeasuredWidth(),view.getMeasuredHeight())
/**   * The location of the child within the map view.  */ public GeoPoint geoPoint; 
new int[37518]
SmartList<DocumentRange>
setProgress((int)progress,true)
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
mFixedExecutionService.shutdown()
UnsafeUtils.get4(_mem,8)
writeRepeatedBool(id,val)
public DerivedBuilder setRealmPassword(String password){   realm().setPassword(password);   return this; } 
specWidthMode == MeasureSpec.EXACTLY
localAnchorA.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
new IllegalArgumentException(msg)
queryDefinition.getOrderByComparator()
traceTag != 0
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"gfxinfo",pw)
o == null
data.get(0).toUpperCase()
sname.getParent().getSimpleName().substring(9)
new SwiftRange(mPos,endPos)
new IllegalStateException("No SHA implementation available!",e)
10 * 1000
Iterables.getLast(cluster.getNodes()).getStatus().setUnavailable()
assertEquals(12,beanCount)
Foundation.NSLog("[error] " + tag + ": "+ message)
JavaSdkImpl.getMockJdk15("java 1.5")
prevLen > 0
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator())
DiagnosticFactory2<PsiElement,CallableMemberDescriptor,DeclarationDescriptor>
!entry.cacheContentViews(mContext,notification.getNotification())
myErrors.put(xmlName,customTagName)
columnTypes[column] == INT
logger.info("Strip code")
credentials.split(":")
sp.edit().putBoolean(PREF_USER_REFUSED_SIGN_IN,refused).commit()
oldStarred=Boolean.parseBoolean(value)
String url
WebAppResource.class
mySynchronousRefreshCount == 0
public Object mapLine(FieldSet fieldSet,int lineNum){   ShippingInfo info=new ShippingInfo();   info.setShipperId(fieldSet.readString(SHIPPER_ID_COLUMN));   info.setShippingTypeId(fieldSet.readString(SHIPPING_TYPE_ID_COLUMN));   info.setShippingInfo(fieldSet.readString(ADDITIONAL_SHIPPING_INFO_COLUMN));   return info; } 
ReferencesSearch.search(element,element.getUseScope(),true)
file.contains("http://")
Algorithms.isEmpty(ref)
databaseFile.getPath()
key.equals(OAuthConstants.SCOPE)
mTitleTextView != null
originalLayout.getIconImageId()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).description(message)
fluentSetters()
pushExecutor.submit(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
mainSourceSet.getClasses()
user.getCompanyId()
HB_TRAIL_31372(5450)
flags.length == 0
program.charAt(program.length() - 1) != '\n'
REASSIGNMENT_IN_PROGRESS(59,"A partition reassignment is in progress",new ApiExceptionBuilder(){   @Override public ApiException build(  String message){     return new ReassignmentInProgressException(message);   } } )
new DrmInitData(DATA_1,DATA_1)
primitiveType != GL10.GL_POINTS
level <= RF_STATUS_LOW_SIGNAL
conditionCache.get(conditionExpression)
Long.valueOf(delay)
IndexReader reader=IndexReader.open(directory); 
resultTabs.getItemCount() - 2
LOG.info("Cannot access storage directory " + rootPath)
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
new ImmutableShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
new ModelNode().set(600000)
new ConnectionError(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR)
upd != null
vindex >= Short.MAX_VALUE
classMapper.lookupName(wrap.testPlan.getClass())
store.getImage()
@Nullable private final Params params; 
new CatchupServer(platformModule.logging.getInternalLogProvider(),platformModule.logging.getUserLogProvider(),localDatabase::storeId,platformModule.dependencies.provideDependency(TransactionIdStore.class),platformModule.dependencies.provideDependency(LogicalTransactionStore.class),localDatabase::dataSource,localDatabase::isAvailable,null,config,platformModule.monitors,new CheckpointerSupplier(platformModule.dependencies),fileSystem)
close.assertSubscribers()
assertion.parseHOKSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
Context.getVisitService().getAllVisitTypes(true)
logger.debug("MyQ binding received command '{}' for item '{}'",command,itemName)
items[30]
logger.warn("Niko Home Control: error sending message, trying to restart communication",Thread.currentThread().getId())
dependencyNode.getId().getAsked()
projectMeasures.get(0)
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges),0)
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=500
Optional<ZkWorker>
new NTCredentials(username,auth.getPass(),localHost,domain)
new LinkedList<ReleaseStep>()
row.setBackground(getResources().getDrawable(R.drawable.list_highlight_bg))
listener.iterationDone(cg,iterationCount)
labels != null
new ShardStats(shardRouting,new ShardPath(false,shardPath,shardPath,new ShardId(index,0)),shardCommonStats,null)
assertEquals(itemsNumber.intValue(),myItems.length)
workDir == null
getFinalRunnable() == null
infoAndPosition.substring(colIndex + COL_MARKER.length(),infoAndPosition.length())
dir.listFiles(globFileFilter)
assertEquals(-2147483648,TileSystem.MapSize(23))
new DoubleInetAddressDns()
attributes == null
BannagePeriodFailureDetector.class
super.visitDomElement(element)
ModalityState.current()
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
ApplicationConfiguration.build(ElasticsearchStubConfiguration.class).run("--server.port=" + PORT)
new EnterSelectionDialog(shell,props,files,Messages.getString("XMLInputDialog.FilesReadSelection.DialogTitle"),Messages.getString("XMLInputDialog.FilesReadSelection.DialogMessage"))
processor.open(w,request)
width - 6
width < 0
attrNameElement.getInternedText() == charTableIndex
logger.info("Return Object {} now at size {}",b,count.getAndDecrement())
asList(8L)
collection.add(3l)
iobj.getType() == null
IServiceManager.getService("manager")
new OutputStreamWriter(clientStream)
new WorldPoint(3033,3311,0)
new ActFmServiceException(object.getString("message"))
Integer.valueOf(attrValue)
Preferences.getBoolean(key,true)
new BufferedInputStream(fi,5000000)
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
SingleFunction other=(SingleFunction)o; 
JSplitPane pane=(JSplitPane)getComponent(0); 
context.getFlowScope().put(key,authorizatonUrl)
servletContext.getContextPath()
public TokenStream create(TokenStream input){   return new EnglishPorterFilter(input,protectedWords); } 
artifact.replace("(?<!solr-)analysis-","analyzers-")
new Ansi(true)
i <= endValue
users.toArray()
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null)
assertArrayEquals(arr2,view.getBinaryByteArray(0,0))
ASTNode context
Assert.assertFalse(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
new CompoundShelfFileProcesor(new StreamProvider[]{},PathManager.getConfigPath() + File.separator + "shelf")
log.warn("Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].")
@Override @NotNull public ClassifierDescriptor getDeclarationDescriptor(){   return LazyClassDescriptor.this; } 
score > 1
@SuppressWarning("unused")
mCoveredFadeColor > 0
Long.valueOf(stats.get("size").toString())
maxContentTextLength=15
id=15862
json.getTextValue().getBytes()
new KBArticleTitleException()
id=19905
twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
addTexture(diffuse,"NormalMap",keyName)
totalHits.relation != TotalHits.Relation.EQUAL_TO
avb.getData().clear()
new StepMeta(log,selstepid,selstepname,(StepMetaInterface)svi)
subCursor.getInt(COLUMN_ATTENDEE_IDENTITY)
a.indexOf(':')
targetPointsHelper.getIntermediatePoints()
new IOException(msg,ex)
stage.compareTo(currentStage) > 0
i < n
assertEquals(7,resultList.size())
Double.class
!uniqueExpiryCallbackPresent
OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT=100
setAudioSystem(AUDIO_SYSTEM_JAVASOUND,null,false)
lbHttpSolrServer.setAliveCheckInterval(1)
IndexOutOfBoundsException.class
context.var("long")
logger.warn(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
!eachWnd.isAvailable()
this.rep.getAttributes().put(name,null)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("jps-plugin/testData/incremental/lookupTracker"),Pattern.compile("^([^\\.]+)$"),true)
assertEquals(2,map.size())
/**   * TitanTransaction defines a transactional context for a  {@link TitanGraph}. Since TitanGraph is a transactional graph database, all interactions with the graph are mitigated by a TitanTransaction. <p/> All vertex and edge retrievals are channeled by a graph transaction which bundles all such retrievals, creations and deletions into one transaction. A graph transaction is analogous to a <a href="http://en.wikipedia.org/wiki/Database_transaction">database transaction</a>. The isolation level and <a href="http://en.wikipedia.org/wiki/ACID">ACID support</a> are configured through the storage backend, meaning whatever level of isolation is supported by the storage backend is mirrored by a graph transaction. <p/> A graph transaction supports: <ul> <li>Creating vertices, properties and edges</li> <li>Creating types</li> <li>Index-based retrieval of vertices</li> <li>Querying edges and vertices</li> <li>Aborting and committing transaction</li> </ul>  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  */ public interface TitanTransaction extends TitanGraphTransaction {   /**   * Creates a new vertex in the graph with the given vertex id and the given vertex label. Note, that an exception is thrown if the vertex id is not a valid Titan vertex id or if a vertex with the given id already exists. <p/> Custom id setting must be enabled via the configuration option  {@link org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration#ALLOW_SETTING_VERTEX_ID}. <p/> Use  {@link org.janusgraph.core.util.TitanId#toVertexId(long)} to construct a valid Titan vertex id from a user id.  * @param id vertex id of the vertex to be created  * @param vertexLabel vertex label for this vertex - can be null if no vertex label should be set.  * @return New vertex  */   public TitanVertex addVertex(  Long id,  VertexLabel vertexLabel);   /**   * Retrieves the vertex for the specified id. This method is intended for internal use only. Use  {@link org.apache.tinkerpop.gremlin.structure.Graph#vertices(Object)} instead.  * @param id id of the vertex to retrieve  * @return vertex with the given id if it exists, else null  */   public TitanVertex getVertex(  long id);   public Iterable<TitanVertex> getVertices(  long... ids);   public Iterable<TitanEdge> getEdges(  RelationIdentifier... ids);   /**   * Commits and closes the transaction. <p/> Will attempt to persist all modifications which may result in exceptions in case of persistence failures or lock contention. <br /> The call releases data structures if possible. All element references (e.g. vertex objects) retrieved through this transaction are stale after the transaction closes and should no longer be used.  * @throws org.janusgraph.diskstorage.BackendException if an error arises during persistence  */   public void commit();   /**   * Aborts and closes the transaction. Will discard all modifications. <p/> The call releases data structures if possible. All element references (e.g. vertex objects) retrieved through this transaction are stale after the transaction closes and should no longer be used.  * @throws org.janusgraph.diskstorage.BackendException if an error arises when releasing the transaction handle  */   public void rollback();   /**   * Checks whether the transaction is still open.  * @return true, when the transaction is open, else false  */   public boolean isOpen();   /**   * Checks whether the transaction has been closed.  * @return true, if the transaction has been closed, else false  */   public boolean isClosed();   /**   * Checks whether any changes to the graph database have been made in this transaction. <p/> A modification may be an edge or vertex update, addition, or deletion.  * @return true, if the transaction contains updates, else false.  */   public boolean hasModifications(); } 
IndexReader.open(dir,true)
selenium.clickAt("//li[4]/span/a/span",RuntimeVariables.replace("Delete"))
new AtSet(COMMA,RPAR,COLON,ARROW)
Math.abs(a.d - b.d) < 1e-3
ColumnFamilyInputFormat.class
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,false)
base - zoom
String.format("DEF_SYSTEM_FONT_SIZE: %.2f",DEF_SYSTEM_FONT_SIZE,dpi)
createNextExchange(processor,exchange)
-90
assertSame(Locale.GERMANY,format1.getLocale())
assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),"val-2")
Optional<T>
file(path).isDirectory()
mCard.getVisibility() != View.VISIBLE
filteredPods.isEmpty()
new IllegalStateException(sm.getString("upgradeHandler.sendPrefaceFail"),ioe)
asyncContext.continueAsyncTraceObject()
StripedFileTestUtil.randomArray(dataBlocks,dataBlocks + parityBlocks,dataDNFailureNum)
new SolrException(1,"error parsing event listeners",e,false)
new ServerSparseIntRow(rowId,startCol,endCol)
getHttpConnectionManager()
AssetTagFinderUtil.filterCountByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
origKey + 10
public AttributeBinding getValueBinding(){   return attributeBinding; } 
new RemoteViews(mContext.getPackageName(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
widthRatio > 0.8
Thread.sleep(100)
callback.onSuccess(paragraphText,context)
content.length() > 0
localLOGV || false
defaultShift > Block.blocksList.length
this::handle
payload.put(0,getClientVersion())
ArrayList<EntryListener<?,?>>
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).contextStart(withUser)
free(path,false)
NOTIFICATION_SERVICE_ID=1
addTest(17,18,0.0f)
found=true
new StringBundler(7)
_viewFinder.setFlashMode(this._torchMode)
Assert.assertEquals(transitions.size(),3)
ab.get1()
event.consume()
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionMaxout.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,100,32.80397240113137,DeepLearningParameters.Activation.Maxout)
state == STATE_IDLE
new GridCacheQueryReadEvent<>(cctx.localNode(),"SQL query entry read.",EVT_CACHE_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SQL,cctx.namex(),qry.queryClassName(),qry.clause(),null,null,qryInfo.arguments(),qry.subjectId(),taskName,key,val,null,null)
new IndexWriter(this.__test_dir,new org.apache.lucene.analysis.standard.StandardAnalyzer(),false)
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title1,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,serviceContext)
new ModelNode().set(240000)
private final PsiClass myClass; 
3 + _maxDDLCustomFieldCount * 4
FileUtil.findFirstThatExist(home + "/build.txt",home + "/Resources/build.txt",home + "/community/build.txt")
(GridDrPause)in.readObject()
!field.getValueClass().isInstance(value)
Map<Long,HostedConnection>
(((Map<String,Object>)argsEl)).get("hit") instanceof String
myParameterNameField.getComponent()
getSupportActionBar() != null
logger.debug("myq securityToken: {}",securityToken)
new FtrlDelta(false,alpha)
GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))
final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); 
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope,Property.Filtered)
Log.e(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
JMeterUtils.getPropDefault("proxy.number.requests",false)
FULLFILLMENT_GROUP
GL20.glGetProgram(program,pname,params)
invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Exception e
mService.setEnableAutoJoinWhenAssociated(enabled)
useQuartz=true
ctxLogger.error("Unsupported field type: {} for field: {}",dataType,fieldName)
LLVMMetadataNode m2
producer.send(expiredMessage,Message.DEFAULT_DELIVERY_MODE,Message.DEFAULT_PRIORITY,50)
range.to < getFirstLirInstructionId(block)
!mySpaceBeforeParentheses
WeakReference<Class<?>>
saveAttachmentTo(directory)
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
isClosed()
lib.getName()
MAX_PORT_DEFAULT_VALUE=6000
Assert.assertEquals(container1,info.getContainerName())
@IntMethodAnnotation(value=43)
getLineCount(myDocument1)
availableAllocations[lowIndex]
LOG.info("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
GroovyJavaNonSecurityTestsSuite.suite()
PROPS.load(is)
isIgnoreUriScheme()
new IndexWriter(dirs[i],new WhitespaceAnalyzer(),true)
RandomStringUtils.randomAscii(20)
outputArtifact != null
getTelecomService().endCall()
doubleValue == 0
LogUtils.initializeDefaultConsoleLogger()
new Config()
author.getIsChatOwner()
WeighingService.weigh(WEIGHER_KEY,element,new ProximityLocation(context,contextModule,processingContext))
new ArrayList<>()
page=TESTING_AUTHENTICATION_SETUP
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amount / flow.capacity,1,min,max,vb,sides)
textPromise.getState() != Promise.State.PENDING
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
/**   * Sent bytes count.  */ private final LongAdder sentBytesCnt=new LongAdder(); 
loadScriptByName(scriptName)
checkResultByText("dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}")
Preconditions.checkArgument(values.length == 2)
IllegalAccessError.class
processInstanceArray.size() == 0
prefs.getBoolean(PERSIST_SERVICE,true)
new LocationVariableResolver(_mockResourceManager,_mockSettingsFactory)
this.e != null
conf.getInt("mult")
font.getFamily()
items[20]
connection.getFields(transMeta.environmentSubstitute(wBaseDN.getText()),null)
Exception ignored
authHeader.size() > 0
@JsonProperty("Index") private Integer index=null; 
aClass != null
src.getLocation()
GL20.glUniformMatrix2(location,transpose,value)
DefaultManagementAgent.class
addRegionStateToPut(putA,RegionState.State.CLOSED)
isArrayClass() && isInterface()
LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,false,progress)
Timber.e("Failed to initialize local key store",e)
level < 0
CacheService.instance.keyCache.get(key)
String.format(" [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
new CountDownLatch(5)
public static XQueryBuilder xquery(File file) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
Gdx.files.internal(fileName).nameWithoutExtension()
sentiment.getPolarity()
Schema.class
System.currentTimeMillis() - start > 500
new LinearSectionConfig(SectionConfig.DEFAULT_GUTTER,SectionConfig.DEFAULT_GUTTER,SectionConfig.HEADER_INLINE,SectionConfig.FOOTER_STICKY,0,0,0,0)
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
model.addAttribute("cookie",cookie)
commandExecutor.writeAsync(getName(),RedisCommands.GEOADD,getName(),convert(longitude),convert(latitude),member)
ViewWebContentAssignedToMyRolesUpdateDueDateTest.class
row.setBackground(getResources().getDrawable(R.drawable.comment_pending_bg_selector))
KeyValueBinding attributeBinding
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavaDoc()
bounds.getEndOffset() < textRange.getStartOffset()
@Override public final DivideBy orNot(Condition c){   return or(c.not()); } 
startMediaTimeUs == START_NOT_SET
assertEquals(12,commits.size())
DISMISS_MIN_DRAG_WIDTH_RATIO=.4f
mRCStack.remove(rcse)
!isUpdateAvailable()
new LayerVisitor(this,region,minimumBlockY(region),maximumBlockY(region),ground)
final CoverageSuiteImpl coverageSuite=(CoverageSuiteImpl)CoverageDataManager.getInstance(myProject).getCurrentSuite(); 
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.clearNotifications(); } ,ModalityState.NON_MODAL)
Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
Boolean.valueOf(params.get(name))
contains="doIntrinsicReceiverCachedLLVMTruffleObjectCached"
new SslConnection(bufferPool,getExecutor(),endPoint,engine)
written.incrementAndGet()
151 + (USE_OLD_HISTORY ? 1000 : 0)
taskNames.contains(taskName)
Arrays.asList("ErrorResponse","Response","Int","Int32","Int64","Int64","Float","Double","Bool","Void","String","Character","AnyObject","Any","Error","URL","class","Class","break","as","associativity","deinit","case","dynamicType","convenience","enum","continue","false","dynamic","extension","default","is","didSet","func","do","nil","final","import","else","self","get","init","fallthrough","Self","infix","internal","for","super","inout","let","if","true","lazy","operator","in","COLUMN","left","private","return","FILE","mutating","protocol","switch","FUNCTION","none","public","where","LINE","nonmutating","static","while","optional","struct","override","subscript","postfix","typealias","precedence","var","prefix","Protocol","required","right","set","Type","unowned","weak")
logPageUrl != null || logPageUrl.length() > 0
getSongProgressMillis() > 2000
TokenSet.create(INTEGER_LITERAL,LONG_LITERAL,FLOAT_LITERAL,CHARACTER_LITERAL,STRING_LITERAL,RAW_STRING_LITERAL,NAMESPACE_KEYWORD,AS_KEYWORD,TYPE_KEYWORD,CLASS_KEYWORD,THIS_KEYWORD,VAL_KEYWORD,VAR_KEYWORD,FUN_KEYWORD,EXTENSION_KEYWORD,FOR_KEYWORD,NULL_KEYWORD,TYPEOF_KEYWORD,NEW_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,IS_KEYWORD,THROW_KEYWORD,RETURN_KEYWORD,BREAK_KEYWORD,CONTINUE_KEYWORD,OBJECT_KEYWORD,IF_KEYWORD,TRY_KEYWORD,ELSE_KEYWORD,WHILE_KEYWORD,DO_KEYWORD,MATCH_KEYWORD,RBRACKET,RBRACE,RPAR,PLUSPLUS,MINUSMINUS,MUL,PLUS,MINUS,EXCL,DIV,PERC,LTEQ,EQEQEQ,ARROW,DOUBLE_ARROW,EXCLEQEQEQ,EQEQ,EXCLEQ,ANDAND,OROR,SAFE_ACCESS,ELVIS,QUEST,SEMICOLON,RANGE,EQ,MULTEQ,DIVEQ,PERCEQ,PLUSEQ,MINUSEQ,NOT_IN,NOT_IS,HASH,EOL_OR_SEMICOLON)
logger.trace("{} recovery [phase2] to {}: start took [{}]",request.shardId(),request.targetNode(),request.targetNode(),stopWatch.totalTime())
getContext()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),UNSET)
invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")))
allOf(withId(R.id.fab_expand_menu_button),withParent(withId(R.id.fab)),isDisplayed())
new IllegalStateException()
new NotificationCompat.Builder(context,Manager.CHANNEL_ID).setDefaults(options.getDefaults()).setExtras(extras).setOnlyAlertOnce(true)
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT)
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
new EntryContentException()
mBarChart.addTiming(section,4,parseResult.runDuration / 1000f)
lookup.getProcessorByType(requestControllerService.getType())
INACCESSIBLEMEMONLY_OR_ARGMEMONLY
callNode.call(frame,getCallTarget(function),packArguments(frame,function,arguments,cachedLength))
maxLength > 0
destination.length + offset
navigationListCodes[index]
myAfterFile.getName()
sampleQueues[i]
log.error("Error parsing command line: " + e.getMessage())
evaluate("pkg = package_name()").lookup("pkg")
ImmutableList.of(listeners)
stateAfter() == null
new Integer(5)
diff.remove('-' + item)
policy != null
LOGGER.debug("Registering handler [{}] with no principal resolver into the execution plan",handler.getName(),principalResolver)
attachment.getDataUri() == null
getStorage().getCode(codeAddress)
server0.getStoreRepository().getLocalStore(storeName)
new JavaRecursiveElementVisitor(){   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     super.visitReferenceElement(reference);     final PsiElement resolved=reference.resolve();     if (resolved != null && !reported.contains(resolved) && !CommonRefactoringUtil.isAncestor(resolved,scopes) && !(resolved instanceof LightElement) && !haveElementInScope(resolved)) {       if (resolved instanceof PsiMethod) {         for (        PsiMethod superMethod : ((PsiMethod)resolved).findDeepestSuperMethods()) {           if (haveElementInScope(superMethod))           return;         }       }       final String scopeDescription=RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(reference),true);       final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.in.module.2",RefactoringUIUtil.getDescription(resolved,true),scopeDescription,CommonRefactoringUtil.htmlEmphasize(targetModule.getName()));       conflicts.putValue(reference,CommonRefactoringUtil.capitalize(message));       reported.add(resolved);     }   }   private boolean haveElementInScope(  PsiElement resolved){     if (PsiSearchScopeUtil.isInScope(resolveScope,resolved)) {       return true;     }     if (!resolved.getManager().isInProject(resolved)) {       if (resolved instanceof PsiMember) {         final PsiClass containingClass=((PsiMember)resolved).getContainingClass();         if (containingClass != null) {           final String fqn=containingClass.getQualifiedName();           if (fqn != null) {             final PsiClass classFromTarget=JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope);             if (classFromTarget != null) {               if (resolved instanceof PsiMethod) {                 return classFromTarget.findMethodsBySignature((PsiMethod)resolved,true).length > 0;               }               if (resolved instanceof PsiField) {                 return classFromTarget.findFieldByName(((PsiField)resolved).getName(),false) != null;               }               if (resolved instanceof PsiClass) {                 return classFromTarget.findInnerClassByName(((PsiClass)resolved).getName(),false) != null;               }             }           }         }       }       if (resolved instanceof PsiClass) {         final String fqn=((PsiClass)resolved).getQualifiedName();         return fqn != null && JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope) != null;       }     }     return false;   } } 
isListViewFling()
"A task is in the ABORTED state but stage is " + stageState
encoder.writeString(event.getMessage())
Assert.assertThat(expected,Matchers.equalTo(candidate))
mFlexItem.setAlignSelf(AlignItems.STRETCH)
Set<CommitId>
series.Index.toString()
assertThat(getField(graphite,"port")).isEqualTo(8080)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)
assertEquals(attrs.size(),3)
new V(27,new BooleanSetting(true))
@SqlUpdate
JournalContentWebUpgrade.class
newTypeInfo.keySet()
TX_TIMEOUT=100
CompilerDirectives.inCompiledCode()
final LongAdder execCnt=new LongAdder(); 
mSecondSpaceView.setVisibility(View.GONE)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,TemporaryFileEntryRepositoryDefiner.class,"_portalCapabilityLocator",false)
log.info("Error registering servlet with jmx " + this)
!isInsert
TEST_UTIL.waitTableEnabled(tableName)
type.equalsIgnoreCase("integer")
"Cannot find hibernate configuration file in CLASSPATH: " + HIBERNATE_DFLT_CFG
Exporter::getDisplayName
new IllegalArgumentException("Missing required attribute: " + attributeName)
LOGGER.debug("Could not open external file",ex)
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapBaseTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue("map should be empty",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse("map should not be empty",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,"bar");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           assertEquals("bar2",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format("We do not expect an entry which's key equals to %d in entry set",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     assertFalse(map1.removeEntryListener("2"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } 
ks.getKieClasspathContainer()
data.isEmpty()
s.setAutoCommitDelay(2)
t != globalType
startActionMode(callback) == null
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
new Interval(2,6,5)
ON_TOP
GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))
MonitoringPortletImpl.setMonitoringPortletEventRequest(monitoringPortletEventRequest)
countNewlines(fragment) + 1
logger.info("[v] Secure sync completed")
messenger.signUp(name,null,false)
c.name()
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],user,new BindException(user,"user"))
urlStr.startsWith("file:") || urlStr.startsWith("jndi:")
assertRuntimeProductionSearchScope("m1",getProjectPath() + "/m1/src/main/java")
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615c00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
Log.e(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
SQLException e
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),DANCE)
mAms.mWaitForNetworkTimeoutMs=100
ArrayUtil.mergeArrays(javaClassReferences,additionalReferences)
TYPEAHEAD_LOG.warn(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
super.getDither()
parser.parse(GroovyElementTypes.OPEN_BLOCK,builder)
insertByIndex(root,severityGroupNode)
Position.PREFIX_IN + 5
mImm.showStatusIcon(mToken,getPackageName(),iconResId)
layer.setInput(input)
filePath.toFile()
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots))
/**   * Returns an  {@code AfterFirst} {@code Trigger} with the given subtriggers.  */ public static OnceTrigger of(OnceTrigger... triggers){   return new AfterFirst(Arrays.<Trigger>asList(triggers)); } 
channel.getName().equals(actualChatRoom.getIdentifier())
methods[index] == null
@Child protected Node repeatingNode; 
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
toString()
words.length >= 1
Math.min(implicitOffset - 1,0)
getSwaggerType(swaggerModel.getAdditionalProperties())
sorted_files.get(i).createReader()
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")")
vector.iterator()
(T)this
i < 5
parent.getOverriddenJoinTable(propertyName)
new DefaultGoApiResponse(400)
scanAllNodes(stage.getScene().getRoot(),PSEUDO_CLASS_LARGE)
fill
nextValue >= 0x9F
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class)
(pnrows-=(espc[_pcidx + 1] - espc[_pcidx])) > 0
batteryVp >= high
TransactionUtil.validTokenAbbrName(assetIssueContract.getAbbr().toByteArray())
new String(bs3.toByteArray())
clone != null
new SearchUICore.SearchResultMatcher(null,0,null,100)
policyFlags & SCAN_REQUIRE_KNOWN
Log.e(TAG,"Prepare done")
tokenEnd >= buffer.length()
position >= 0 || position < dayPickerView.getCount()
jsonSupport.addEventMapping("edwald",HashMap.class)
assertEquals(129,blockHashesMessage.getBlockHashes().size())
contains={"doCachedTypeCachedOffset","doCachedType"}
indexStats.getPrimaries().getMerge().getCurrent()
inQuotes.substring(spaceIndex,inQuotes.length())
private Color color; 
dlFileEntry.getLatestFileVersion(true)
keyRowMeta.getString(two)
timeDifferenceMilliseconds > maxTolerateTimeDifferenceMilliseconds
public MTThemeFacade selectedTheme=MTThemes.OCEANIC; 
cfs.clearUnsafe()
new TreeItem(stepsItem,SWT.NONE)
oldModel.getVendorExtensions().get("x-className") == null
(short)655
preResourcesElementDesc.getStoreFactory()
suffix.add(tmp.substring(0,tmp.length() - 1))
entry.rxPackets == 0 || entry.txPackets == 0
Preconditions.checkNotNull(blockWorker)
this.sessionAuthenticationStrategy
laf.getName()
DEFAULT_TETHER_OFFLOAD_DISABLED=1
Preconditions.checkNotNull(mBlockIdsOnTiers)
Arrays.asList("bool","qint32","qint64")
LegacyLifecycle lifecycle=(LegacyLifecycle)it.next(); 
Lists.newArrayList(eol(),header(message,failed),status(status,failed),eol())
new GitCommandResult(false,exitCode,result.getErrorOutput(),result.getOutput()){   @Override public boolean cancelled(){     return true;   } } 
str.startsWith("/")
getProperty(HTTPSampler.METHOD)
qs.isEmpty()
getterVisibility=Visibility.ANY
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false)
logger.trace("new cluster state [{}] after waiting for master election to fail shard [{}]",shardRoutingEntry.getShardRouting().shardId(),state.prettyPrint(),shardRoutingEntry)
message.isIssueAsynchronousCallbacks()
DumpUtils.checkDumpPermission(mActivityManagerService.mContext,"dbinfo",pw)
assertThat(list.isInternal()).isFalse()
stack.hashCode()
new InvalidFragmentEntryFileException("fragment-collection-cannot-be-imported-into-" + "existing-fragment-collection")
Arrays.asList(1,2,3,128)
model.startsWith(manufacturer)
offsetOrZero.add(numberOfRows)
pyClass.getQualifiedName()
msg.setJMSExpiration(asInt(priority))
Family.hashCode()
enabled.getProtocols()
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(555,TimeUnit.SECONDS)
b.length() - 1
user.getName()
address.indexOf('?') != -1
GridHadoopTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
keyRowMeta.getString(one)
it.next().hasFinished()
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.MICRO)
logger.debug("AtmosphereResource {} is resuming",uuid())
!MessageView.this.mMessage.isSet(Flag.X_DOWNLOADED_PARTIAL)
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true).incompatibleDisallowFileType(true).incompatibleDisallowLegacyJavaProvider(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false)
T parent
Log.info(this + " Busy selector - injecting delay " + _paused+ " times")
new PacketDecoder(new JacksonJsonSupport(),new NamespacesHub(new Configuration()),ackManager)
VersionNumber.parse(playVersion).getMicro() < 6
new ConstructingObjectParser<>("client_security_authenticate_response",a -> new AuthenticateResponse(new User((String)a[0],((List<String>)a[1]),(Map<String,Object>)a[2],(String)a[3],(String)a[4]),(Boolean)a[5],(RealmInfo)a[6],(RealmInfo)a[7]))
mergeRefUpdate.forceUpdate()
mySide1.select(titles)
lastUpdate.after(updated)
ProjectRootManager.getInstance(project).getFileIndex().isInSourceContent(virtualFile)
StringBuffer buffer=new StringBuffer(pattern.length() * repeats); 
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
/**   * Returns a duplicate of this resource record.  */ @Override public ByteBufHolder duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } 
response.setStopThread(true)
null != m_parallel
getValue(activity.getExtraData(),"title",kbTemplate.getTitle())
vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager())
serializer.serializeForInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
mock.expectedBodiesReceived("Hello World 3")
sleep(150)
support.isFlexUnit1SuiteSubclass(aClass)
JDBCUtils.safeGetLong(dbResult,"PROCESS")
!serviceContext.isSignedIn()
i <= 'Z'
/**   * @return a String for the summary of the preference.  */ public String getSummary(){   return null; } 
assetTagLocalService.checkTagsWithProperties(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
schedule(pingServerRunnable,pingInterval,TimeUnit.SECONDS)
jmsManager.destroyQueue(queueName)
UnsupportedOperationException ex
container.getDataSource()
new IllegalStateException()
f.cancel(true)
ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
Collectors.joining()
TreeSet<Date>
assertEmpty(errors)
ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); 
getClusterMap().put(buildAttributeName(name),value)
@ConditionalOnEnablednHealthIndicator("diskspace")
mUserPaddingEnd >= 0
new WriteCommandAction(project,null){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod.run();   } } 
Map<String,String>
STUB_VERSION=37
dictionary.get("type")
child.tagName.equals("base") || child.tagName.equals("script") || child.tagName.equals("link")|| child.tagName.equals("meta")|| child.tagName.equals("title")
Helpers.exec(j4p,"setProfileBundles(java.lang.String, java.lang.String, java.util.List)",id,strings)
User.createCursorSupportUserList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
connection.hdel(key)
optional=1
ShutdownOperations.addOperation(new Runnable(){   public void run(){     deferredBindingActions.remove();   } } )
n <= k
logger.error("cs-change-async-action-callback. current-step:" + currentStep.getKey())
createCustomStudySession(new JSONArray(),new Object[]{sb.toString(),Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},false)
ImmutableList.of(modules)
addr.intValue()
new IndexWriter(directory,autoCommit,ANALYZER,false)
anomalyFailureCount == 0 || anomalyWarningCount == 0
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available))
get(context,R.string.pref_auto_viewed,true)
new RecordReaderDataSetIterator(rr,batchSize,labelIndex,numPossibleLabels,regression)
Multiset<String>
setBlock(min,pattern.next(minV))
Globals.class
biomeList[biome.biomeID].typeList.toArray()
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"results"),connection,transformer(source,connection))
getPath("InputPackageDeclarationDiffDirectory.java")
pageBucketReceiver.setBucket(bucketIdx,bucket,true,bucketResultListener)
between(0,10)
id=15864
new CheckPermission().of("all").against("deploy").expect(false)
result != null
concurrency < (shift<<=1)
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope)
out.dialect.supportsWindowFunctions() && !RexOver.containsOver(project.getProjects(),null)
maxSize > (used / total)
IoUtils.safeClose(delegate)
LookupManager.getInstance(project).getActiveLookup() != null
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5Filename(weightsHdf5Filename)
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY)
builder.setView(setupView()).setMessage(R.string.title_sync)
failedIncomingConnection || failedOutgoingConnection
c == wordDelimiter[0]
a.getTypeByte()
RuntimeGlue optionalGlue
str.toLowerCase()
TransformItem.create(R.id.ivFirstImage,Direction.LEFT_TO_RIGHT,0.50f)
Assert.assertEquals(editor.getMarkersQuantity(WARNING_OVERVIEW),13)
IntegrationNamespaceUtils.setReferenceIfAttributeDefined(builder,element,COMPARATOR_REF_ATTRIBUTE)
new NodeInfo(Version.CURRENT,org.elasticsearch.Build.CURRENT,new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT),emptyMap(),Settings.EMPTY,DummyOsInfo.INSTANCE,new ProcessInfo(randomInt(),randomBoolean()),JvmInfo.jvmInfo(),new ThreadPoolInfo(Collections.singletonList(new ThreadPool.Info("test_threadpool",ThreadPool.ThreadPoolType.FIXED,5))),new TransportInfo(transportAddress,Collections.emptyMap()),new HttpInfo(transportAddress,randomLong()),new PluginsAndModules(),new IngestInfo(Collections.emptyList()),new ByteSizeValue(randomIntBetween(1,1024)))
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly))
number=1
keyPressedCount == 0
PyQualifiedExpression.class
format(conf,false)
public Object mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Player player=new Player();   player.setID(fs.readString("ID"));   player.setLastName(fs.readString("lastName"));   player.setFirstName(fs.readString("firstName"));   player.setPosition(fs.readString("position"));   player.setDebutYear(fs.readInt("debutYear"));   player.setBirthYear(fs.readInt("birthYear"));   return player; } 
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
new MatParamTexture(texParam.getVarType(),texParam.getName(),texture,texParam.getUnit())
new MessageGroupHashBucket(1024)
assertEquals(1695,res.getWeight(1,2),10)
case 4: 
!ufsSyncChecker.isDirectoryInSync(parentUri)
public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } 
attachmentsDir.getCanonicalPath()
public Component getFocusableComponent(){   if (myComponent instanceof JComboBox) {     return ((JComboBox)myComponent).getEditor().getEditorComponent();   }  else {     return myComponent;   } } 
new JUnitMetadataGenerator(spec)
arg.indexOf('.') >= 0
checkEmpty(className,EMPTY_STRING_MSG)
ColorRGBA.White.mult(0.8f)
complexColumnCache.values()
NumberOfPortsUsedByReadReplica=3
taskletElement.getAttribute(ID_ATTR)
/**   * Returns an  {@code AfterAll} {@code Trigger} with the given subtriggers.  */ public static OnceTrigger of(OnceTrigger... triggers){   return new AfterAll(Arrays.<Trigger>asList(triggers)); } 
new HashSet<Class<?>>()
propertiesComponent.isDefaultCreated()
HashMap<String,Object>
!recipient.isMmsGroupRecipient()
type.getCanonicalText()
new IncorrectOperationException()
size(i) == 1
cache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
con.commit()
Thing.class
/**   * Visits the specified map result.  * @param mapResult the map result  * @return the result of the visit  */ TVisit visitMapResult(MapResultData mapResult); 
caches.get(i)
_notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ)
Integer.valueOf(quantifier)
properties.contains(STRING_RECENT_SEARCHES)
new DDMFormViewFormInstanceRecordDisplayContext(request,response,_ddlRecordLocalService,_ddmFormRenderer,_ddmFormValuesFactory,_ddmFormValuesMerger)
--remainingReleaseCount == 0
alluxioUri.getPath()
promise.isDone()
new HotSpotDebugConfig(GraalOptions.Log,GraalOptions.Meter,GraalOptions.Time,GraalOptions.Dump,GraalOptions.MethodFilter,GraalOptions.LogFile)
Boolean.valueOf(getOptional("kylin.htrace.trace-every-query","false"))
worker.setnoData(nod != null ? RangeFactory.create(nod,nod) : null)
for (String s : blocks) {   if (ver.length() > 0) {     ver.append(',');   }   ver.append(s); } 
fragment.dismiss()
processSelectedKeys()
MonitoringPortletImpl.isMonitoringPortletEventRequest()
realm.assertThread()
!TextSecurePreferences.isWebrtcCallingEnabled(this)
keyRestriction != null || keyRestriction.isEquality()
convert(BigInteger.class,defaultValue,defaultValue)
for (CommittedChangeList list : myLists) {   final SvnMergeInfoCache.MergeCheckResult result=myMergeChecker.checkList((SvnChangeList)list);   if (SvnMergeInfoCache.MergeCheckResult.MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.MERGED);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.ALIEN);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS_PARTLY_MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.NOT_MERGED);   }  else {     myStatusMap.put(list.getNumber(),ListMergeStatus.REFRESHING);   }   --cnt;   if (cnt <= 0) {     ApplicationManager.getApplication().invokeLater(new Runnable(){       @Override public void run(){         myRevisionsList.revalidate();         myRevisionsList.repaint();       }     } );     cnt=10;   } } 
new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,false)
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out2p)
new UdpConnector(localUdpPort,remoteAddress,hostPort)
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ T serialize(Object input); 
runtimeDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
DBG_CAMERA_LIFT=true
new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource())
config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
new IllegalStateException()
inputItems.length >= index
iconicsDrawable.icon(mPlainIcon)
mDeviceOwner.getProfileOwnerName(i)
request.getPath().split("\\?")
return 32.0f; 
state.value == rotationLocked
Arrays.asList("Image","ProgressBar","ScrollView","Horizontal ScrollView","Dropdown Picker","Dialog Picker","Switch","Text","TouchableBounce","TouchableHighlight","TouchableOpacity","TouchableWithoutFeedback","Toolbar","TextInput","View","WebView","ScrollView Item (same id used for all items)")
@ConditionalOnEnablednHealthIndicator("elasticsearch")
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp)
mToolbar.setTitle(title)
new ServerPartition(partitionKeyNew,RowType.T_DOUBLE_DENSE)
clean.setGroup(VERIFICATION_GROUP)
Math.log(docCount)
public Object getUri(){   return uri; } 
resolve()
s.tryAcquire(4,1,TimeUnit.SECONDS)
Promise<Void>
(byte)9
PsiTreeUtil.getParentOfType(e,PyTryPart.class,true)
/**   * Returns the next pseudorandom  {@link ArrayValue} of date elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of date elements.  */ public ArrayValue nextDateArray(){   return Values.dateArray(nextDateArrayRaw(minArray(),maxArray())); } 
clampScreenBrightness(mLastUserSetScreenBrightness)
new IOException("JSON forbids NaN and infinities: " + value + " at path "+ reader.getPath())
layoutSetPersistence.update(publicLayoutSet,false)
super.dialog.setMinimumSize(545,356)
newVarcharColumnDefBuilder().setColumnName("b_qualifier").setLimit(3)
sec.getEndpointClass()
@SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement); 
file instanceof PsiJavaFile
cupboard().withDatabase(getWritableDatabase()).delete(PhilmMovie.class,null,null)
new RuntimeConfigurationException(PyBundle.message("runcfg.unittest.no_method_name"))
getSshUrl(name,httpPort)
THashSet<RangeHighlighter>
journalArticle.getId()
DEBUG_ALL || false
(breakpoint != null) && (breakpoint.getSuspendPolicy() == SuspendPolicy.ALL)
obj != null
(exception ? throwable instanceof RuntimeException : throwable == null)
FunctionTypesKt.isFunctionType(calleeType)
Setting.intSetting("indices.queries.cache.count",10000,1,Property.NodeScope)
mGoogleApiConnectionTask.setException(new ConnectException(result.toString()))
"Invalid version for inner update [isNew=" + entry.isStartVersion() + ", entry="+ this+ ", newVer="+ newVer+ ']'
mCurrentVrService == null
needRefresh=false
samlServletDeployment(SalesPostAutodetectServlet.DEPLOYMENT_NAME,SendUsernameServlet.class)
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required")
logger.equals(msg)
!isFinishing()
BaseMessages.getString("Spoon.Dialog.PromptSave.Message")
IndexReader.open(store,true)
StagedModel existingStagedModel=stagedModelRepository.fetchStagedModelByUuidAndGroupId(uuid,groupId); 
DEFAULT_ALLOW_REPEAT_CALLERS=false
buildData.getMasterHostname()
_log.error(ioe,ioe)
DEFAULT_GROUP_OWNER_INTENT=7
error.toString()
DBG=true
soLingerTime.toSeconds()
durableSubscriptions.get(key)
sortedModules.stream()
mockResultSet.getDouble(1)
getPath(renderRequest)
client.getDefaultRequestOptions().setTimeoutIntervalInMs(timeout)
routes.SessionsController.index()
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport()
protected MvcCommandLineState createCommandLineState(@NotNull ExecutionEnvironment environment,Module module){   return new MvcCommandLineState(environment,cmdLine,module,false); } 
userState.mIsAccessibilityEnabled
type <= 255
_connector.getResponses("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
benchmark.expectAround("Throughput to index issues",throughputPerSecond,5116,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
73.99408
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
!OpeningHoursParser.parseOpenedHoursHandleErrors(openingHours.getOriginal()).toString().equals(openingHoursString)
filterParameterName.indexOf('.')
getLogger().error("Unknown classloader [NSME]: " + e.getMessage())
instance.managementService.unregister()
app.getSettings().SHOW_TRAFFIC_WARNINGS.get()
private FloatingActionButton btnScrollDown; 
dstPath.getPath()
/**   * Visits the specified value result.  * @param valueResult the value result  * @return the result of the visit  */ TVisit visitValueResult(ValueResultData valueResult); 
new MappingValueRename(outputField,outputMapping)
logger.error("Couldn't write to file: " + filename)
assertEquals(2,classLoaderAwares.size())
addProperty(prop,false)
items[31]
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod()
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map")
@Override public Appendable append(char c){   grow(ref.length + 1);   setCharAt(ref.length++,c);   return this; } 
case MESSAGES: 
IntegerMulNode.class
logger.info("Installing Filter {}",servletClassName)
dataBuilder.addLinesBuilder().setLine(i).setScmRevision("REVISION_" + i).setScmAuthor("a_guy").setSource("this is not java code " + i).setUtLineHits(i).setUtConditions(i + 1).setUtCoveredConditions(i).setItLineHits(i).setItConditions(i + 1).setItCoveredConditions(i).setOverallLineHits(i).setOverallConditions(i + 1).setOverallCoveredConditions(i).setScmDate(150000000L).setHighlighting("2,9,k;9,18,k").addAllDuplications(Arrays.asList(19,33,141))
IQ.Type.error == packet.getType()
getSonicCacheDirPath()
entry.getValue().acccessibleNodeLabels
minutes * 60 * 1000
requestModels.entrySet()
orgReplica.applyIndexOperationOnReplica(0,1,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id",new BytesArray("{}"),XContentType.JSON),u -> { } )
doc == NO_MORE_DOCS
settings.isAutoCommitOnCherryPick() == myAutoCommitOnCherryPick.isSelected()
accumulator.addClass(fileDetails.getFile(),analysis)
new SslContextBuilder(true)
getLogger().error("Row {} not found in {}, transferring to not found",new Object[]{rowId,tableName})
PortletFileRepositoryUtil.addPortletFileEntry(portletDataContext.getScopeGroupId(),portletDataContext.getUserId(kbArticle.getUserUuid()),KBArticle.class.getName(),kbArticle.getClassPK(),PortletKeys.KNOWLEDGE_BASE_ADMIN,kbArticle.getAttachmentsFolderId(),inputStream,fileName,mimeType)
FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)
new BooleanPreference("show_view_angle",false,true,true)
resolver.acquireContentProviderClient(uri)
new RepositoryException(container,e.getMessage())
checkValidNanoOfDayWithOffset(nanoOfDay,secondOffset)
verifyResourcedModel(role,verifiableResourcedModel.getTableName(),verifiableResourcedModel.getModelName(),verifiableResourcedModel.getPrimaryKeyColumnName())
AstUtils.hasLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
new CheckboxTreeViewer(columnsGroup,style)
jobLoader.findJobEntriesWithDescription(JobMeta.STRING_SPECIAL)
submitToExecutor()
String.format("%-15s: -",username)
logger.info(String.format("performing disconnect (%s)",this.nsp))
getTypeName(decl.getMethodBinding().getReturnType())
RulesProfileWrapper qProfile
val._resDev <= 379
StringBuffer paramTypesList=new StringBuffer("("); 
structure.getDocument()
i < 1250
(filterMap.getDispatcherMapping() & FilterMap.ERROR) > 0
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted)
cc.isEnabled()
removeCallbacks(null)
props.remove(PoolingConnectionProvider.POOLING_PROVIDER)
new IssueIndexer(esTester.client(),new IssueIteratorFactory(null))
Assert.assertEquals(4,latch.getCount())
assertEquals(actualTables,expectedTables)
singleModelJSONObjectBuilder.field(OPERATION)
sStatsd.writeDataToDisk()
new CrypticClue("Search the boxes in the goblin house near Lumbridge.",NULL_10627,new WorldPoint(3245,3245,0),"Goblin house on the eastern side of the river.")
return original; 
profileManager.loadSettingsProfile(settings)
p.getPassMaterial() != null
/**   * Support the range subscript operator for String  */ public static Object get(CharSequence text,Range range){   int from=normaliseIndex(InvokerHelper.asInt(range.getFrom()),text.length());   int to=normaliseIndex(InvokerHelper.asInt(range.getTo()),text.length());   int length=text.length();   if (from > to) {     int tmp=from;     from=to;     to=tmp;   }   return text.subSequence(from,to + 1); } 
this(icon,title,intent,new Bundle(),null,false); 
result.toSecondOfDay()
Math.abs(endAngle - startAngle) >= 360
ALL_ARGUMENTS.OVERLOAD.equal(getOverload())
/**   * Creates an empty struct with the given location.   */ public Info createEmpty(Location loc){   return SkylarkInfo.createSchemaless(this,ImmutableMap.of(),loc); } 
ActionController<CommitId>
/**   * The package controller for the current file. Used for performance optimisation.  */ private PkgControl currentLeaf; 
Map<String,SortedMap<String,Object>>
instance.getPublicDnsName()
Collection<Element>
logger_.error("Repair session " + future.session.getName() + " failed.",e)
2000 * (1 - start)
new EmbeddedKafkaCluster(1)
Maps.newHashMap()
assertEquals("Size of " + r,1,r.size())
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
client.srandmember(key)
String.format("%-15s: %s",username,Arrays.stream(markedRoles).map(s -> s == null ? "-" : s).collect(Collectors.joining(",")))
gasPrice.length > HASH_LENGTH
(mOomMinFreeHigh[5] * 7) / 8
r.getRequest()
StringBuffer sb=new StringBuffer(32); 
@ConditionalOnEnablednHealthIndicator("mail")
laneOptions[j].equals("slight_left")
gauge == null
new ConnectionError(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame)
mPolicy != null
doTest()
drReplicate(drType,null,newVer,topVer)
lookup.isSelectionTouched()
LOG.error(ex.getLocalizedMessage(),ex)
tokenStart >= buffer.length()
menu.getMapActivity().getContextMenu().hide(false)
ItemSkipPolicyItemHandler itemHandler=new ItemSkipPolicyItemHandler(itemReader,itemWriter); 
mInitialMotionX == null
new DefaultImageRaster(image,0)
tableHasData(oldTableName)
sTestCaseCounter == 1
Log.warn("Caught exception: " + error.toString())
request.getIncludeMessage()
wp.getRunAdvance(mChars,start,contextEnd,contextStart,contextEnd,runIsRtl,end)
/**   * Callback that is invoked <em>before</em> each test method has been invoked.  * @param context the current test extension context  */ void beforeEach(TestExtensionContext context) throws Throwable ; 
new MockProjectEx()
new IOException("UnknownHostException exception: " + e.getMessage())
!commandSent.get() && useKeepAlive
ignoreInjectedPsi
targetBox.setEnabled(true)
runUTRunner(testDir.getPath(),testFile.getPath())
String value
LOG.warn("clear parameter error",ex)
anyInt()
Flux.from(this).publish()
SyncEngine.cancelSyncAccountTasks(syncAccount.getSyncAccountId())
logger.error(e)
Assert.assertEquals("Wrong messages count: " + messages.size(),messages.size(),1)
Integer.valueOf(listenPort)
Assert.assertEquals(1,mergedDDMFormFieldValues.size())
ValueNode anchor
SimpleLimitExceptionHandler exceptionHandler
throwable.printStackTrace()
internalPath != null
GuiActivator.getUIService().getConferenceChatManager().createChatRoom(chatRoomName.trim(),getSelectedProvider().getProtocolProvider(),new ArrayList<String>(),"",false,false,true)
map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)
new KBArticleContentException()
return SOFT_CONCURRENT; 
mExpandedChild.getHeight() == mHeadsUpChild.getHeight()
new ExecutorCompletionService<ProjectSegment>(executoru)
i < 10000
type == null
new RedissonSession(id)
exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
_ddmStructureLocalService.getStructure(structureId)
uri.getPort() == -1
new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR)
CodeStyleManager.getInstance(myProject).reformatText(file,ranges)
END + " End Message Interceptor"
W data=function.apply(entry.getValue()); 
animator.setMaxFrame(-9000)
mySshHandler > 0
c != 0
retval=(x != constValue)
params.getBuildTarget()
j == BinaryMapAddressReaderAdapter.POSTCODES_TYPE
logger.error("Not a directory: " + dir.getAbsolutePath())
/**   * Decodes a BSON byte array into a DBObject instance.  * @param bytes a document encoded as BSON  * @return the document as a DBObject  */ public static DBObject decode(final byte[] bytes){   final InputBuffer buffer=new BasicInputBuffer(ByteBuffer.wrap(bytes));   return new DBObjectCodec(PrimitiveCodecs.createDefault()).decode(new BSONBinaryReader(buffer)); } 
minSize(new Fixed(width))
assertNotNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
@Override public ZuulMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
!calledSetTotal
isRunsOutsidePortal(absolutePath)
new IndexWriter(dir,sa)
res.getFilename()
content.matches(expected)
items.size() == 1
Log.info(this + " JVM BUG(s) - recreating selector " + _jvmFix1+ " times, cancelled keys "+ _jvmFix0+ " times")
invocation.logger.warning("'is-executing': " + executing + " -> "+ invocation)
new MonoWhen(true,a -> Tuples.fromArray((Object[])a),p2,p3)
builder.length() == 0
new RuntimeException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
@Autowired HandlingEventRepository handlingEventRepository; 
Double rate
image.pixelWidth != width
@Override public ConfigValue getValue(String path){   return find(path,null,path); } 
mode != null
appInfo.uid == XRestriction.cUidAndroid ? expert : false
@Override public ResponseImpl description(String description){   this.setDescription(description);   return this; } 
!BitUtil.check(status,10)
CANCEL_TIMEOUT_LIMIT=3000
type2 == PyElementTypes.ANNOTATION
doNotAskDialogOption != null
BASIC_CONSTRAINS(org.bouncycastle.asn1.x509.Extension.basicConstraints)
msbFragmentCollection.getFragmentCollectionId()
conn.prepareStatement(sql)
getDatabaseSchema() != null
saveActions.equals(new SaveActions(enabled.isSelected(),formatterString))
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
order=3
vcs == null
!DescriptorUtils.isTopLevelDeclaration(descriptor) || !(descriptor instanceof FunctionDescriptor)
barrier1.await(2,TimeUnit.SECONDS)
fT.add(R.id.feeditemlistFragment,filf)
debugRootView.addView(button,debugRootView.getChildCount() - 1)
i < text.length() - 1
UIUtil.getParentOfType(JComboBox.class,c) != null
seenVertices.contains(startAncestor)
loadObj(file,false)
promise.setSuccess(null)
SystraceMessage.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE)
checkStoreUsage(4,0,1,1)
trainSamplesPerIteration(-2,1)
new Float(this.value)
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.",ioe)
cs[c].set0(r,(long)((_createFrame.integer_range + 1) * (1 - 2 * rng.nextDouble())))
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1)
session != null
new Location(resource)
v.getContext().startActivity(intent)
mAdapter.swapDirectory(mFile,storageManager)
getApplicationInfo().targetSdkVersion >= O
strat.getLevelSize(0) > 0
ViewBuilderTask.class
randomAlphanumeric(255)
new TextPaint(Paint.ANTI_ALIAS_FLAG)
getMockEndpoint("mock:line").expectedMinimumMessageCount(1)
callerPrincipalCallback.getSubject()
new IllegalArgumentException(ERROR_ADD_REMOTE_URL_MISSING)
Log_OC.e(TAG,"onSaveInstanceState()")
preserve.toString()
assertEquals(9,definitions.size())
temporaryFolder.getRoot()
!tmpDataDirs.containsKey(id)
UserNotificationEventLocalServiceUtil.getDeliveredUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
args.length > 1
expect(IDENTIFIER,"Expecting qualified name",TokenSet.create(DOT,AS_KEYWORD))
ServerAdminWebUpgrade.class
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeStage().getLabel(),targetStage.getLabel())
mGesturesPopup != null
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,21,getLayoutLog())
doTest()
Math.round(ratio * 1000) / 1000
getStub()
mediaChunks.get(1).getFirstSampleIndex() == sampleQueue.getReadIndex()
Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
id=15850
mAttachInfo == null
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)
new CallbackStub()
LIRInstructionClass<SPARCHotSpotDeoptimizeCallerOp>
SdpParseException e
new LightweightThread(null,this,stackSize)
option == JOptionPane.CANCEL_OPTION
certificate(certURL,password,certType,port)
LOG.error("Failed to look for classes in " + jarFileName + ": "+ ioEx)
httpRequest.getSession().setAttribute(HttpSessionIntegrationFilter.ACEGI_SECURITY_AUTHENTICATION_KEY,null)
appendQuoted(FlowManager.getTableName(table))
new NetscapeValidator()
val > 0
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
getJSDocTypeWithBraces(cp)
cs.getString(columnIndex)
logger.warnf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
p._eta != 0
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).contains(offset)
OCCLUSION_INTENS=0.1f
/**   * {@inheritDoc}  */ @Override public Object clone(){   FloatProperty prop=(FloatProperty)super.clone();   prop.value=value;   return prop; } 
(short)600
/**   * @author yole  */ public class CoverageProjectViewDirectoryNodeDecorator extends AbstractCoverageProvejctViewNodeDecorator {   public CoverageProjectViewDirectoryNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(element.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     if (element instanceof PsiDirectory) {       final String informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);       if (informationString != null) {         appendCoverageInfo(cellRenderer,informationString);       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(node.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }     String informationString=null;     if (element instanceof PsiDirectory) {       informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);     }  else     if (element instanceof PsiFile) {       informationString=coverageAnnotator.getFileCoverageInformationString((PsiFile)element,currentSuite,manager);     }     if (informationString != null) {       data.setLocationString(informationString);     }   } } 
if (myLocalResolve) {   final PsiElement topParent=JSResolveUtil.getTopReferenceParent(myParent);   localProcessor=new SinkResolveProcessor<ResolveResultSink>(myReferencedName,myRef,new ResolveResultSink(myRef,myReferencedName)){     @Override public boolean needPackages(){       if (myParent instanceof JSReferenceExpression && topParent instanceof JSImportStatement) {         return true;       }       return super.needPackages();     }   } ;   localProcessor.setToProcessHierarchy(true);   JSReferenceExpressionImpl.doProcessLocalDeclarations(myRef,myQualifier,localProcessor,true,false,null);   PsiElement jsElement=localProcessor.getResult();   if (myQualifier instanceof JSThisExpression && localProcessor.processingEncounteredAnyTypeAccess() && jsElement != null) {     localProcessor.getResults().clear();     jsElement=null;   }   if (myQualifier == null) {     final JSReferenceExpression namespaceReference=JSReferenceExpressionImpl.getNamespaceReference(myRef);     ResolveResult[] resolveResultsAsConditionalCompilationVariable=null;     if (namespaceReference != null && (namespaceReference == myRef || namespaceReference.resolve() == namespaceReference)) {       if (jsElement == null && ModuleUtilCore.findModuleForPsiElement(myRef) == null) {         return new ResolveResult[]{new JSResolveResult(myRef)};       }       resolveResultsAsConditionalCompilationVariable=resolveConditionalCompilationVariable(myRef);     }     if (resolveResultsAsConditionalCompilationVariable != null && resolveResultsAsConditionalCompilationVariable.length > 0 && (jsElement == null || resolveResultsAsConditionalCompilationVariable[0].isValidResult())) {       return resolveResultsAsConditionalCompilationVariable;     }   }   if (jsElement != null || localProcessor.isEncounteredDynamicClasses() && myQualifier == null || !localProcessor.processingEncounteredAnyTypeAccess() && !localProcessor.isEncounteredDynamicClasses()) {     return localProcessor.getResultsAsResolveResults();   } }  else {   final QualifiedItemProcessor<ResolveResultSink> processor=new QualifiedItemProcessor<>(new ResolveResultSink(myRef,myReferencedName),myContainingFile);   processor.setTypeContext(JSResolveUtil.isExprInTypeContext(myRef));   JSTypeEvaluator.evaluateTypes(myQualifier,myContainingFile,processor);   if (processor.resolved == QualifiedItemProcessor.TypeResolveState.PrefixUnknown) {     return dummyResult(myRef);   }   if (processor.resolved == QualifiedItemProcessor.TypeResolveState.Resolved || processor.resolved == QualifiedItemProcessor.TypeResolveState.Undefined || processor.getResult() != null) {     return processor.getResultsAsResolveResults();   }  else {     localProcessor=processor;   } } 
existing.getProgramParameters()
item == 271
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).description(message)
selected != null || selected != current
new ActionModeImpl(callback)
h >>> 31
node.getEndColumn()
new Rectangle(width,height)
!saveState
loadTaskListContent(true)
StringBuffer buffer=new StringBuffer(); 
new IndexWriter(mDirectory,new StandardAnalyzer(),true)
message.getType() == Message.TYPE_FILE
resolver.start()
titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))
new Error("expected ], got " + currentToken + " syntax:"+ syntax)
spec.getFields()
btceDepth.getAsks()
this.propertyDescriptorCache.put(pd.getName(),pd)
Module module=new SimpleModule().addAbstractTypeMapping(IContainer.class,MyContainer.class); 
Resources.getResource(NATIVE_STARTER_CXX_SOURCE)
public static final JPQLTemplates DEFAULT=new EclipseLinkTemplates(); 
_maxTransactionActive=0
TOWN(5000)
new JSONWebServiceServiceAction(servletContext,null)
PsiLiteralUtil.parseFloat(text)
isExcludedClass(theClass)
os.unsafeByteArray()
labelCursor != null
TArrays()
System.currentTimeMillis() + 1_100
subsidyDecreaseBlockCount=10000
relatedProduct.getProduct()
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
RequestListener<String,GlideDrawable>
field.getClass()
assertEquals("List size",2,retList.size())
BookmarksEntry.class
new ModelRenderer(model,0,0)
logger_.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
value == null
Collection<Integer>
mEncoder.swithToHardEncoder()
results.expectedMessageCount(2)
element.getNodeName()
op.getResultAsObject()
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,false,false)
new DropTableEvent(tbl,deleteData,true,this)
callNode.call(frame,arguments)
options.get("wireFormat")
externalViewRecordVersion <= lastKnownZkVersion
assertUpgraded(client(),null)
assertFalse(model.getUniqueItems())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").append("#")
9 * width
StorageService.class
eq(PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS)
methodAnnotations++
ref2something.getOrDefault(ref,null)
String.format("%-15s: -",user)
info.getOldIndex() < 0
is(4)
new IntPreference("max_level_download_tile",18)
generateIndex(f,null,alreadyGeneratedFiles,alreadyUploadedFiles)
EDGEVILLE_HOME_TELEPORT=97
mViewPager.setOffscreenPageLimit(2)
c.write("[you] " + msg + '\n')
REQUIRED_FREE_SPACE=10_0000_0000L
public class XpathRegressionMultipleVariableDeclarationsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
gl.glCopyTexSubImage2D(target,level,x,y,xOffset,xOffset,width,height)
paren_argument_list_inner(b,l + 1)
CONTENT_SCOPE_KEY.get(project)
logger.error("Invalid state {}",r)
i < pmd.getParameterCount()
new LwjglPreferences(name)
TimeBeforeConstraint.class
"Using bind address: " + publicAddress
FilterRegistrationBean.class
Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
getView() == null
!mConfig.bindPermission.equals(info.permission)
syncMessage.length() == 0
new StringBundler(4)
private final String accountExternalKey; 
public TokenStream create(Reader input){   return new CharStreamAwareCJKTokenizer((CharStream)input); } 
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)
super.close()
sm.getString("standardContext.stoppingContext")
timeout > 0
dropdownItem.setHref(_renderResponse.createRenderURL(),"mvcPath","/edit_ddm_template.jsp","groupId",String.valueOf(themeDisplay.getScopeGroupId()),"classNameId",String.valueOf(PortalUtil.getClassNameId(DDMStructure.class)),"classPK",String.valueOf(_getClassPK()),"resourceClassNameId",String.valueOf(PortalUtil.getClassNameId(JournalArticle.class)),"type",DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY)
assertEquals("throughput",65.680144,model.getThroughput(),0.0000001)
id=24
new Long(item.getSeq())
@Nullable public Params getParams(){   return params; } 
SLOPE_PROXIMITY=150
item.getType() == DownloadActivityType.NORMAL_FILE
suiteClass.getName()
private void _runTearDown() throws PoshiRunnerException {   try {     _runClassCommandName(_testClassName + "#tear-down");   }  catch (  Exception e) {     throw e;   }  finally {     LoggerUtil.stopLogger();     SeleniumUtil.stopSelenium();   } } 
type.getDescriptor()
LOGGER.lifecycle(exception.apply().toString())
cacheFb.setMaxElementsInMemory(5)
tokensToUpdateInSystemKeyspace.add(token)
flexItem.getMarginEnd()
sep == null
getXml(map,key,defaultLanguageId)
logger.warn(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,true)
myRootHandler == null
locationServicesStatus.isLocationProviderEnabled()
asyncProcessor.execute()
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/testData/navigation/gotoSuper"),Pattern.compile("^(.+)\\.test$"),TargetBackend.ANY,true)
mServiceMap.valueAt(userId)
this(type,0); 
return PRESENCE_HB_INTERVAL; 
printMultiCatch(cc,hasResources)
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(1)
lastException != null
RtlUtils.isPunctuations(punctuation1)
ignoreUnknown=false
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L)
mainFile.getRunfilesPathString()
new GZIPOutputStream(output)
findAnnotationOnBean(beanName,annotationType) != null
JMeterUtils.getPropDefault("undo.history.size",25)
PrivacyManager.getSettingBool(0,PrivacyManager.cSettingOnDemand,false,false)
allocator.getFlowController().prepareAction(input,activations)
ENABLE_APK_ASSETS_CACHE=true
id=14
localizedTextUtil.clearDefaultResourceBundles()
this.recipients.getPrimaryRecipient().getName() != null
new ProcessRuntimeImpl(repositoryService,processDefinitionConverter,runtimeService,securityPoliciesManager,processInstanceConverter,variableInstanceConverter,configuration,eventPublisher,null)
ClusterGroupEmptyException ignore
setParams().nx()
/**   * The tested prototype instance  */ private final Prototype testedPrototype; 
lastModifiedNow < (System.currentTimeMillis() - this.minimumTimeoutForEmptyGroups)
new ShardPath(false,path,path,null,shardId)
!allowTrailingSlash && value.endsWith("/")
mLabelView != null
fdoProvider.getFdoMode() != FdoMode.OFF
coverageDataManager.addCoverageSuite(name,new DefaultCoverageFileProvider(coverageFileName),getPatterns(),lastCoverageTime,getSuiteToMergeWith(),getCoverageRunner(),isTrackPerTestCoverage() && !isSampling())
concLvl < 2
registry.createDataBindingSource(mimeType,bindingTarget,bindingSource)
ColorResources.getColor("menuDisabledForeground")
isRowVector()
!SwingUtilities.isEventDispatchThread() && !Thread.currentThread().getName().startsWith("ZAP")
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF
serverEnvironment.getLaunchType() == ServerEnvironment.LaunchType.DOMAIN
incomingDir.exists()
assertThat(context.getExtensions()).hasSize(46)
notificationManager.notify(NOTIFICATION_ID,id,notification)
FRAGMENTED_OPCODES.contains(mOpcode)
cellIndex <= lastCell
artifactResolver.resolve(artifact,unresolved,localRepository)
routingTable.getRoute(packet.getFrom()).process(packet)
PortalPermissionUtil.contains(getPermissionChecker(),ActionKeys.ADD_COMMUNITY)
List<Float>
log.error(notJava6.getMessage() + " .. trying RI.")
nodeString()
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null)
public TriggerStateMachine withLateFirings(OnceTriggerStateMachine lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
jGitConnection.executeRemoteCommand("ssh://host.xz/repo.git",transportCommand)
r.getInteger(FIELD_STEP_ATTRIBUTE_ID_STEP_ATTRIBUTE,-1L)
tree == null
new AutoBuffer().put(this).bufClose()
firstSlash == 0
c.getDeclaredMethods()
KING_BLACK_DRAGON(NpcID.KING_BLACK_DRAGON,10,ChronoUnit.SECONDS,ItemID.PRINCE_BLACK_DRAGON)
Boolean.getBoolean("java.awt.headless")
DiagnosticFactory2.create(ERROR,DECLARATION_SIGNATURE)
new ArrayList<Wallet>(4)
(Inlining)other
args.length > 7
new ProjectConfigurablesGroup(project)
new IllegalStateException("Failed to create working path: " + workingPath)
new TBinaryProtocol.Factory(false,true,DatabaseDescriptor.getThriftMaxMessageLength())
killBillClient.createExternalCharges(externalCharges,clock.getUTCToday(),false,true,null,null,createdBy,reason,comment)
part.getContentType().toLowerCase()
@ConditionalOnEnablednHealthIndicator("mongo")
!provider.shouldNotBeCached()
processLine(text,true)
TextUtils.isEmpty(info.getUploaderAvatarUrl())
log.warn("Reset to factory defaults : onOperatorError")
toJSON(entry.getValue())
audio_st.metadata() != null
http2c.setInitialStreamSendWindow(initialStreamSendWindow)
Double value=list.get(i); 
code.startLine("/* JADX WARNING: ").add(warn.getWarn())
this.referenceId == referenceId
2 * memsize.value() * 1024* 1024
Uri uri
cursor.getLong(1)
text.contains(nick + " ") || text.contains(" " + nick) || text.endsWith(nick)|| text.equals(nick)
config().useCompressedKlassPointers
relationship(18,c,"KNOWS",d)
mirror.getTypeId()
Boolean.parseBoolean(ac)
localeKeyFluidFlow="buildcraft.mj.flow." + timeGap + longName
Assert.state(!initialized)
cellIndex < row.contextRowSlots.length
cs[c].set0(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
assertEquals(2,data.size())
addSourcesBuildPhase(target,targetGroup,buildable.getSrcs(),buildable.getPerFileFlags())
idx[j] >= 0
killBillClient.completePayment(completeTransactionByPaymentId,pluginProperties,createdBy,reason,comment)
this.constraints.updateFromFactHandle(handle)
context.restartRequired()
runelite.getEventBus().unregister(logger)
args != null & args.length == 2
conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_HEARTBEAT_INTERVAL,hbInterval.get(),TimeUnit.MILLISECONDS)
isDevBuild()
BlogsWebUpgrade.class
producerFlowControl=true
myCurrentScope.getActiveInspectionProfiles()
IntrospectionSupport.setProperties(jpa,options)
serverQueue.add(holder)
this.markBaseChanged()
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
this.indexBlockSize=4096
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //thrift:fake","cpp_reflection_library = //thrift:fake")
public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
collectAndCheckHighlighting(checkWarnings,checkInfos,checkWeakWarnings)
FileTemplateUtil.mergeTemplate(attributes,VfsUtil.loadText(file))
Thread.sleep(50)
layout.getGroup()
id=19908
new ClassExpression(ClassHelper.make(text))
timedOut=true
anyOf(success(),serverError())
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategy()
textView.setTextSize(out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
vals.length != _len
previousStepPartitioningMeta.isPartitioned()
new ReformatCodeProcessor(psiFile.getProject(),psiFile,e.getTextRange(),true)
JBUI.Borders.empty(10,10,0,10)
proportional
/**   * Unit tests for  {@link InProcess}.   */ @RunWith(JUnit4.class) public class InProcessTest extends AbstractTransportTest {   private static String serverName="test";   /**   * Starts the in-process server.   */   @BeforeClass public static void startServer(){     startStaticServer(InProcessServerBuilder.forName(serverName));   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return InProcessChannelBuilder.forName(serverName).build();   } } 
FlinkKafkaProducerBase.class
elementAt.isValid()
InsertionSort.sort(reverse.clone())
logger.warn("Cannot play TuneIn station {} ({})",stationId,e.getMessage())
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_UNICODE,myLanguageLevel.isPy3K())
200 * 1000
get() != null
new UnsupportedOperationException("a refresh request cannot be sent to an older version")
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING)
IOException e
ess.getUser(matchPlayer).isAuthorized("essentials.kill.exempt") && !ess.getUser(sender).isAuthorized("essentials.kill.force")
error("Failed to change current working directory ownership. Error code: " + Integer.toString(result))
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPython3Target {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
new EntryEvent(packet.getName(),(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
clusterSet.getClusterCount() < initialClusterCount
new ImmutableShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
getRequiresCode()
previousState.getPrevCall()
timestamp - base_time > Const.MAX_TIMESPAN
new HashMap<>(layouts.size())
state.isKeyguardShowingAndNotOccluded()
mState.mPivotYRel == relative
metadata.getFaceRectangles()
TestUtil.nextInt(random(),0,3)
_width=version
this.session.users().getUserByServiceAccountClient(client)
new ConfigurationException(String.format("Incompatible SSTable found.  Current version %s is unable to read file: %s.  Please run upgradesstables.",Descriptor.Version.CURRENT,desc))
getServiceGuarded().addMultimediaMessageDraft(callingPkg,pdu)
((HotSpotResolvedObjectType)type).getFingerprint() == 0
recipientIds[i].equals("-1")
line > 0L
ifcg.addr == null
LOG.assertTrue(file != null)
table.getParameters()
new SimpleAssert<Boolean>(condition,Boolean.TRUE){   @Override public void doAssert(){     org.testng.Assert.assertTrue(condition,message);   } } 
serialVersionUID=6784839055053605375L
new BasicDBObject("version",1)
RunnerApi.Trigger.newBuilder().setAfterEndOfWidow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
new ArrayList<String>(64)
metadata.getColumnName(columnNumber)
@SuppressWarnings("unused") public Schema fetch(int version,JobsV3 s){   Key key=s.job_id.key();   Value val=DKV.get(key);   if (null == val)   throw new IllegalArgumentException("Job is missing");   Iced ice=val.get();   if (!(ice instanceof Job))   throw new IllegalArgumentException("Must be a Job not a " + ice.getClass());   Job j=(Job)ice;   Jobs jobs=new Jobs();   jobs._jobs=new Job[1];   jobs._jobs[0]=(Job)ice;   s.jobs=new JobV3[1];   if (j instanceof ModelBuilder) {     s.jobs[0]=new ModelBuilderJobV3().fillFromImpl(j);   }  else {     try {       s.jobs[0]=(JobV3)Schema.schema(version,j).fillFromImpl(j);     }  catch (    H2ONotFoundArgumentException e) {       s.jobs[0]=new JobV3().fillFromImpl(j);     }   }   return s; } 
_lifecycle.equals(PortletRequest.RESOURCE_PHASE)
Map<String,EnvironmentIdExtractor>
builder.timeValueField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
recordSetVersion2.getVersion()
verify(safeOutputStreamConsumer,times(7)).stdOutput(anyString())
TABLE_COMMIT
parser.parse(INFO_OPTIONS,args,false)
is(true)
LOGGER.debug("Could not execute cut",ex)
RTPConnectorOutputStream.logPacket(numberOfPackets) && NeomediaActivator.getPacketLogging().isLoggingEnabled(PacketLoggingService.ProtocolName.RTP)
indexStats.getPrimaries().getMerge().getCurrentSize()
endShape()
offView.setClearEnabled(true)
Duration.between(created,Instant.now()).toMillis() * 1000
@Override protected String doInBackground(Void... params){   helper.delete(groupsToDelete,getSelectedFavorites());   favoritesSelected.clear();   groupsToDelete.clear();   return getString(R.string.favourites_delete_multiple_succesful); } 
Preconditions.checkState(previous == null || previous.equals(value))
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("DH-RSA-DES-CBC3-SHA",KeyExchange.DHr,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,168,168,"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA")
new StringBuilder()
listAdapter.changeCursor(cursor)
this.setParticipantState(state)
mHelper.onActivtyCreate()
logger.error("Failed to enumerate network interfaces",e)
new Argument().setIndex(0)
readRecord(id,record,CHECK,cursor)
addTest(AB_NEW_LOGIN_NO_GOOGLE,new int[]{1,1},new int[]{1,0},new String[]{"old-welcome","new-welcome"})
endpointA.expectedBodiesReceived("A blue car!","A blue car, again!")
input().slices()
toBeRemovedKeys.clear()
createFileFromText(name,language,text,true,false)
session.getMachineIdentifier().equals(config.getMachineIdentifier())
(res == VmRuntimeOS.OSReturn.OS_ERR()) || (Errno.errno() == Errno.EINTR())
String.format("<html>Commits that exist in <code><b>%s</b></code> but don't exist in <code><b>%s</b></code> (<code>git log %s..%s</code>):</html>",firstBranch,secondBranch,firstBranch,secondBranch)
!bundledResourcesDir.isDirectory()
myImplementation.clearAndRecreate()
attr("heuristic_label_expansion",BOOLEAN).value(true)
randomIntBetween(0,10)
!ElementsParser.isAlphaNumeric(ch2)
Latkes.getStaticPath()
Observable<T>
producer.requested > 0
mInstalld.snapshotProfile(appId,packageName,codePath)
Delete_dialogLayout.findViewById(R.id.ll_location)
NetworkLibraryItem libraryItem(); 
Class.forName(className,true,tccl)
i < 0
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out3p)
getWebElement(webDriver,locator,"1")
configuration.getPluginArtifactRepositories()
logger.debug("NODE {}: App version requested but version is unknown",this.getNodeId())
assertThat(dto.get("snapshotId")).isNotNull()
!isStopped
60 * 1000
List<IItem>
String pattern=this.prefix; 
client.login(email,password,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).finallyDo(() -> formSubmitting.onNext(false))
id=15853
applicationContext.destroy()
!singleParameterInfo
0.3f * METERS_IN_ONE_MILE
replacement instanceof PsiStatement && !(replacement.getLastChild() instanceof PsiJavaToken)
assertThat(set.contains("123")).isFalse()
readSuspendablesFile(suspendablesFileName,suspendables,suspendables)
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")|| (lowerCaseLine.contains("fatal: repository") && lowerCaseLine.contains("not found"))
diff <= leeway + 1
mkdirs()
nextValue >= 0x40
getGenericParameterType(genericType,0)
logger.error("P2p handling failed",cause)
OrderUtils.getOrder(((DecoratingProxy)obj).getDecoratedClass())
!_informAdministrator
in.readInt()
32 * density
logoutConfigurer != null
inflater.inflate(R.layout.mdtp_time_picker_dialog,container)
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 90
accountCapsule.putLatestAssetOperationTimeMap(tokenID,latestAssetOperationTime)
new ProtoFile("waffles.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONs)
view.getClusteredLayerInDegree(absNode)
new LinkedHashMap<>()
binary.getName()
getStreamNode(iterationHead)
buttonevent != null
commandContext.isDirty()
Math.min(aggregateData.getAvgColLen(),newData.getAvgColLen())
invoke(agentInfoList,payload,DEFUALT_FUTURE_TIMEOUT)
obtainMessage(MSG_TIMEOUT,state)
archive.getNameHash() > 0
node.getBeginColumn()
i < 200000
gen.get().document()
resp.addHeader("Access-Control-Allow-Methods",methods)
ccCompilationContextInfo == null
position < size()
XmppStringUtils.parseBareAddress(key)
flipZ=1
AbstractBootstrap<ServerBootstrap,ServerChannel>
found != r
final LabelProvider mainLabelProvider=(LabelProvider)viewer.getLabelProvider(); 
indexOutURI.getPath()
containsInAnyOrder(proc("dbms.listConfig","(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, value :: STRING?, dynamic :: BOOLEAN?)","List the currently active config of Neo4j.","DBMS"),proc("db.constraints","() :: (description :: STRING?)","List all constraints in the database.","READ"),proc("db.indexes","() :: (description :: STRING?, indexName :: STRING?, tokenNames :: LIST? OF STRING?, properties :: " + "LIST? OF STRING?, state :: STRING?, type :: STRING?, progress :: FLOAT?, provider :: MAP?, id :: INTEGER?, " + "failureMessage :: STRING?)","List all indexes in the database.","READ"),proc("db.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\")).","READ"),proc("db.awaitIndexes","(timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\")).","READ"),proc("db.resampleIndex","(index :: STRING?) :: VOID","Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\")).","READ"),proc("db.resampleOutdatedIndexes","() :: VOID","Schedule resampling of all outdated indexes.","READ"),proc("db.propertyKeys","() :: (propertyKey :: STRING?)","List all property keys in the database.","READ"),proc("db.labels","() :: (label :: STRING?)","List all labels in the database.","READ"),proc("db.schema","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? " + "OF " + "RELATIONSHIP?)","Show the schema of the data.","READ"),proc("db.schema.visualization","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)","Visualize the schema of the data. Replaces db.schema.","READ"),proc("db.schema.nodeTypeProperties","() :: (nodeType :: STRING?, nodeLabels :: LIST? OF STRING?, propertyName :: STRING?, " + "propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the nodes in tabular form.","READ"),proc("db.schema.relTypeProperties","() :: (relType :: STRING?, " + "propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the relationships in tabular form.","READ"),proc("db.relationshipTypes","() :: (relationshipType :: " + "STRING?)","List all relationship types in the database.","READ"),proc("dbms.procedures","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?, mode :: STRING?)","List all procedures in the DBMS.","DBMS"),proc("dbms.functions","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?)","List all user functions in the DBMS.","DBMS"),proc("dbms.components","() :: (name :: STRING?, versions :: LIST? OF" + " STRING?, edition :: STRING?)","List DBMS components and their versions.","DBMS"),proc("dbms.queryJmx","(query :: STRING?) :: (name :: STRING?, " + "description :: STRING?, attributes :: MAP?)","Query JMX management data by domain and name." + " For instance, \"org.neo4j:*\"","DBMS"),proc("db.createLabel","(newLabel :: STRING?) :: VOID","Create a label","WRITE"),proc("db.createProperty","(newProperty :: STRING?) :: VOID","Create a Property","WRITE"),proc("db.createRelationshipType","(newRelationshipType :: STRING?) :: VOID","Create a RelationshipType","WRITE"),proc("db.index.explicit.searchNodes","(indexName :: STRING?, query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit index. Replaces `START n=node:nodes('key:foo*')`","READ"),proc("db.index.explicit.seekNodes","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit index. Replaces `START n=node:nodes(key = 'A')`","READ"),proc("db.index.explicit.searchRelationships","(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index. Replaces `START r=relationship:relIndex('key:foo*')`","READ"),proc("db.index.explicit.auto.searchNodes","(query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit automatic index. Replaces `START n=node:node_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekNodes","(key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit automatic index. Replaces `START n=node:node_auto_index(key = 'A')`","READ"),proc("db.index.explicit.auto.searchRelationships","(query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit automatic index. Replaces `START r=relationship:relationship_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekRelationships","(key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)","Get relationship from explicit automatic index. Replaces `START r=relationship:relationship_auto_index(key = 'A')`","READ"),proc("db.index.explicit.addNode","(indexName :: STRING?, node :: NODE?, key :: STRING?, value :: ANY?) :: (success :: BOOLEAN?)","Add a node to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.addRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, key :: STRING?, value :: ANY?) :: " + "(success :: BOOLEAN?)","Add a relationship to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.removeNode","(indexName :: STRING?, node :: NODE?, key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) " + ":: (success :: BOOLEAN?)","Remove a node from an explicit index with an optional key","WRITE"),proc("db.index.explicit.removeRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, " + "key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) :: (success :: BOOLEAN?)","Remove a relationship from an explicit index with an optional key","WRITE"),proc("db.index.explicit.drop","(indexName :: STRING?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Remove an explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forNodes","(indexName :: STRING?, config = {} :: MAP?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a node explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forRelationships","(indexName :: STRING?, config = {} :: MAP?) :: " + "(type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a relationship explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.existsForNodes","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a node explicit index exists","READ"),proc("db.index.explicit.existsForRelationships","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a relationship explicit index exists","READ"),proc("db.index.explicit.list","() :: (type :: STRING?, name :: STRING?, config :: MAP?)","List all explicit indexes - YIELD type,name,config","READ"),proc("db.index.explicit.seekRelationships","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (relationship :: RELATIONSHIP?)","Get relationship from explicit index. Replaces `START r=relationship:relIndex(key = 'A')`","READ"),proc("db.index.explicit.searchRelationshipsBetween","(indexName :: STRING?, in :: NODE?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in' and ending at 'out'.","READ"),proc("db.index.explicit.searchRelationshipsIn","(indexName :: STRING?, in :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in'.","READ"),proc("db.index.explicit.searchRelationshipsOut","(indexName :: STRING?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, ending at the node 'out'.","READ"),proc("dbms.clearQueryCaches","() :: (value :: STRING?)","Clears all query caches.","DBMS"),proc("db.createIndex","(index :: STRING?, providerName :: STRING?) :: (index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a schema index with specified index provider (for example: CALL db.createIndex(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.createUniquePropertyConstraint","(index :: STRING?, providerName :: STRING?) :: " + "(index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a unique property constraint with index backed by specified index provider " + "(for example: CALL db.createUniquePropertyConstraint(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.index.fulltext.awaitEventuallyConsistentIndexRefresh","() :: VOID","Wait for the updates from recently committed transactions to be applied to any eventually-consistent fulltext indexes.","READ"),proc("db.index.fulltext.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Similar to db.awaitIndex(index, timeout), except instead of an index pattern, the index is specified by name. " + "The name can be quoted by backticks, if necessary.","READ"),proc("db.index.fulltext.createNodeIndex","(indexName :: STRING?, labels :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, " + "config = {} :: MAP?) :: VOID",startsWith("Create a node fulltext index for the given labels and properties."),"SCHEMA"),proc("db.index.fulltext.createRelationshipIndex","(indexName :: STRING?, relationshipTypes :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, config = {} :: MAP?) :: VOID",startsWith("Create a relationship fulltext index for the given relationship types and properties."),"SCHEMA"),proc("db.index.fulltext.drop","(indexName :: STRING?) :: VOID","Drop the specified index.","SCHEMA"),proc("db.index.fulltext.listAvailableAnalyzers","() :: (analyzer :: STRING?, description :: STRING?)","List the available analyzers that the fulltext indexes can be configured with.","READ"),proc("db.index.fulltext.queryNodes","(indexName :: STRING?, queryString :: STRING?) :: (node :: NODE?, score :: FLOAT?)","Query the given fulltext index. Returns the matching nodes and their lucene query score, ordered by score.","READ"),proc("db.index.fulltext.queryRelationships","(indexName :: STRING?, queryString :: STRING?) :: (relationship :: RELATIONSHIP?, " + "score :: FLOAT?)","Query the given fulltext index. Returns the matching relationships and their lucene query score, ordered by " + "score.","READ"),proc("db.stats.retrieve","(section :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve statistical data about the current database.","READ"),proc("db.stats.retrieveAllAnonymized","(graphToken :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve all available statistical data about the current database, in an anonymized form.","READ"))
WriteReplyToCommentActivity.ACTION_NOTIFICATION_REPLY.equals(getIntent().getAction())
new StringBundler(8)
!myDetachIsDefault
file == null
event.getTime() <= currentPlayTime
/**   * Indicates that all Facebook users are able to see posts made by the application.  */ Everyone(NativeProtocol.AUDIENCE_EVERYONE)
componentSettings.getAsDouble("segments_per_tier",9.2d)
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath)
Integer[]
activityInfos.get(position).label
LOG.warn("No SessionScavenger set, using defaults")
imageViewShadow.setImageResource(R.drawable.shadow)
uri.getPath()
marketDataService.getOrderBook(CurrencyPair.BTC_USD,3)
nextRenderId=30
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getConstructor()
public DerivedBuilder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
GoExecutor.in(module).withExePath(executable.getAbsolutePath()).withParameters(filePath)
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",500,"application/xml","resources/add_book.txt",null)
id=15867
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
sigma[i] == 0.0
assertEquals(3,versions.size())
configurations.create(Dependency.DEFAULT_CONFIGURATION)
new FoldersOnBottomComparator(){   @Override public int doItemCompare(  FileSystemItem arg0,  FileSystemItem arg1){     if (arg0 == parentPath_)     return 1;  else     if (arg1 == parentPath_)     return -1;  else     return arg0.getExtension().compareTo(arg1.getExtension());   } } 
line.startsWith("fatal") || line.startsWith("error: ")
mContext.startActivity(intent)
ModalityState.any()
assertEquals(0,auth.getFailures().size())
SCHEDULED_EXECUTOR_POOL_SIZE=2
!methodMatches(method,null,PsiType.INT,HardcodedMethodConstants.COMPARE_TO,PsiType.NULL)
request.getClientAttributeNames()
headers.keySet().itrator()
mOuterRadius * 1.0f
private Label text; 
msg.obj == mSmHandlerObj
ItemSelectorWebUpgrade.class
GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null,caps,null,width,width,null)
moduleFileIndex.isInTestSourceContent(fileOrDir)
super.getThickness() + 4
attributes.getFlags()
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).finallyDo(() -> commentIsPosting.onNext(false))
delayMs < 0
json.optJSONArray("roles")
this.seperator
privObj.getObjectName().equals("masking_test_view")
ownedRanges.size()
bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
_("")
uid == Process.SHELL_UID
res.getRoutingTime() != 0f
needApply=2
PORT=6335
@Override public ClassExpression visitBuiltInType(BuiltInTypeContext ctx){   String text;   if (asBoolean(ctx.VOID())) {     text=ctx.VOID().getText();   }  else   if (asBoolean(ctx.BuiltInPrimitiveType())) {     text=ctx.BuiltInPrimitiveType().getText();   }  else {     throw createParsingFailedException("Unsupported built-in type: " + ctx,ctx);   }   return configureAST(new ClassExpression(ClassHelper.make(text)),ctx); } 
mFlexItem.setAlignSelf(AlignItems.CENTER)
new DeserializationException(e)
serialVersionUID=1983327111
testAllocation("test1snippet",1,0,0)
invokeKind != InvokeKind.Special
!wasMultiTouchZoomMode
expert != null
new OutputStreamWriter(output)
Optional<V>
ffmpegExecuteAsyncTask.isProcessCompleted()
plotNode(g2,loc,c,size)
Assert.assertEquals(32400,trace.getReceipt().getEnergyUsage())
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
if (segmentation) throw new IgniteException("Failed to send custom message: client is disconnected"); 
getChatWritePanel().getEditorPane().requestFocus()
logger.warning(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
400L * FileUtils.ONE_MB
payload.get(MEETING_ID)
LOG_SERVICE_START_STOP=true
inner.innerSetException(new TimeoutException())
new UserDao(dbTester.myBatis(),system2)
logger.info(String.format("will wait %dms before reconnect attempt",delay))
map.set(key,"value",1,TimeUnit.SECONDS)
-1
writeString(writer,String.valueOf(reader.getShort()),fieldName)
new GroovyParser().parse(GroovyElementTypes.EXPRESSION,builder)
splashImageView != null
new Date(0)
randomIntBetween(1,12)
testStatus.equals("PASSED") || testStatus.equals("SKIPPED")
logger.info("Computing Control Flow Graph")
NotifyUtil.show("Info",formatter.formatMessage(record),MessageType.INFO,listener,3000)
buildExplodedWebapp(getWebappDirectory(),getWebappDirectory())
Arrays.asList("Java","CSharp","Python2","Python3","Node")
XMLOutputFactory.newFactory()
Assert.assertEquals(2,visitor.getConditions().size())
mTmpRect.height() > 0
!mIsAttached
checkArgument(child.parent == null)
CONCURRENT_THREAD_COUNT=300
Math.cos(Math.toRadians(degrees))
maxSize(new Fixed(width))
_endp.isOpen() && (more_in_buffer || progress)
REJECT_OUTSIZED_RESTORE=false
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE,VAR)
case 5: 
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",nc,newNetwork.networkCapabilities)
this.importsDestFile
StringUtil.valueOf(key.hashCode())
mFragmentManager.findFragmentById(R.id.navigation_drawer) != null
discoLatch.await()
appearance.getString(attr)
DDMServiceUpgrade.class
dir=2
planPhase != null
realm.createObject(AllTypes.class)
this.posColumn=posColumn
sm.getString("introspection.classLoadFailed")
lab.equals("N2")
dropNonSystemTables()
dlFileShortcutLocalService.deleteDLFileShortcut(fileShortcutId)
@Nonnull Integer versionId
TESTS=39
AsyncResult<Boolean>
new Dimension(500,200)
override.toString()
return handshakeTimeoutMillis; 
new VerifyBookmarks()
new EnterSelectionDialog(shell,props,files,Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogMessage"))
argCount > paramCount
port <= 0
String.format("User [%s] doesn't exist",username)
(Object)x
new int[100]
displayContent.getDockedStackLocked()
new ReadonlyMapELResolver(beans)
clazz.isPrimitive() || clazz.isArray()
reportNotAnnotatedInterfaces=false
!isDefault() && !ApplicationManager.getApplication().isUnitTestMode()
wtfilter.setWidth(60)
/**   * Return the native Typeface object associated with this PFont (if any).  */ public Typeface getNative(){   if (subsetting) {     return null;   }   return typeface; } 
users.get(i)
participantAddresses.get(3)
getListeners()
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=2
-2
SessionErrors.isEmpty(resourceRequest)
getNewValue()
DefaultDeclaredTaskInputFileFilePropertySpec spec=new DefaultDeclaredTaskInputFileFilePropertySpec(task.getName(),resolver,paths,validationAction); 
modItems == null
new GenericStringToObjectConverter()
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).verifyErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
29 * 8
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this),fcmKey)
gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack)
/**   * Link to wiki, autogenerated using the name identifier.  */ WIKI
PyTokenTypes.ADDITIVE_OPERATIONS.contains(op) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(op) || PyTokenTypes.SHIFT_OPERATIONS.contains(op)
tableHasData("SyncDLObject")
win.isDrawnLw()
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null)
addListenerMethod1.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)
@Self Statement currentStatement
allocator.getFlowController().prepareAction(x,activations,gamma,beta,mean,var)
endLine - startLine > 0
parent.getRegionName()
getNodeAddresses(node)
timeout * 2
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,53.98)
ModuleFactory.stopModule(mod)
BeanPropertiesUtil.getObject(model,_keyProperty)
new QueuedThreadPool(3)
new ArrayList<>()
JBUI.Borders.empty(0,12,0,7)
Float value=iterator.next(); 
app.info.targetSdkVersion < targetSdkVersion
mAimsicdService.getCellTracker().updateNeighbouringCells()
setVerticalAlignment(BOTTOM)
ApplicationMode.toHumanString(osmandSettings.APPLICATION_MODE.get())
FILES[i]
StringBuffer builder
sourceMapping != null
ArrayList<Language>
r.nextFloat() < 0.1f
token.trim().isEmpty()
createUrl(Url.append(myRepositoryRoot,originUrl))
RemovePortletTest.class
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_CHROME_DRIVER_EXECUTABLE
data.contains("black")
userPreferences.getBoolean(context.getString(R.string.pref_share_contacts_key),false)
LOG.error("Exception occurred during processing request: {}",e,e.getMessage())
!myIsDisposed && editor.getComponent().isShowing()
String.format("%s is not a parsable int (base10) for %s",optionValue,DEFAULT_COMPACTION_WINDOW_SIZE)
baseKey.plus(addedBucketsLeft * interval)
client.getLocalPlayer().getInteracting().getName().equals(FISHING_SPOT)
FileSwapSpaceSpiMBean fileSwap=(FileSwapSpaceSpiMBean)swap; 
parent.getChildAdapterPosition(child)
mService.removeNetwork(netId,mContext.getOpPackageName())
batteryService.isBatteryLow()
Locale.getDefault().toString()
ExceptionInInitializerError|Exception
internalCluster().startNodesAsync(2)
GroovyJavaSecurityTestsSuite.suite()
cache.put(new Element(key,element),true)
node.put("persons",persons)
_request == null
new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null)
new XStream()
buf.putInt(utf.length)
versionTargetGraphMode.toString()
T value2
((JetPostfixExpression)element).getOperationSign()
packet.getAttribute("from").split("/")
ModuleType.get(module).getNodeIcon(expanded)
FileUtil.toFile(searchPath)
mContext.startActivity(cantAddAccount)
randomFrom(() -> new ComposeProcessor(instance.first(),randomValueOtherThan(instance.second(),() -> randomColumnProcessor(0))),() -> new ComposeProcessor(randomValueOtherThan(instance.first(),() -> randomColumnProcessor(0)),instance.second()),() -> new ComposeProcessor(instance.second(),instance.first()))
new AnAction("Left | Right"){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=true;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourDot : VcsUtil.ourNotDot);   } } 
holder == null
args[1]
query(new JSONPointer(jsonPointer))
console.printToHistory(string,attributes)
StringBuffer targetUrl=new StringBuffer(); 
setStudyOptionsView(true)
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark
TfsShell.convertMsToDate(files[1].getCreationTimeMs())
cursor.retry()
FormatPlugin[]
interval < 0
assertEquals("throughput",47.9126598178,model.getThroughput(),0.000000001)
collectionsTypeName == null
methodExists(setterName,fieldNode)
handles[i]
new Counter(mOnBatteryTimeBase)
return 0l; 
count > 0
disableForUser(what,token,pkg,mCurrentUserId)
mPanelClosedOnDown && !mHeadsUpManager.hasPinnedHeadsUp() && !mTracking&& !mStatusBar.isBouncerShowing()
new IndexWriter(dir3,anlzr,false)
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .run()
-1089652346
rows.get(lastIndex).key.key.equals(finishKey)
Stream.of("CYPHER 3.1","CYPHER 3.2","CYPHER 3.3","CYPHER 3.4")
isResumed()
limit > 0
Object interceptor
@Override public ResponseImpl header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
FileUtil.loadFileText(new File(patchPath))
DBFactoryUtil.setDB(getDBType())
element == null
runAndVerifyStatusSorted("! root" + File.separator + "target"+ File.separator+ "source","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s1.txt","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s2.txt","D root" + File.separator + "source","D root" + File.separator + "source"+ File.separator+ "s1.txt","D root" + File.separator + "source"+ File.separator+ "s2.txt")
restRequest.param("metric")
state.getTypes().isCastable(argType,jUnit4ClassRunnerType)
toolWrapper.addProblemElement(refEntity,commonProblemDescriptors)
VMDebug.attachAgent(library)
public Object mapLine(FieldSet fieldSet,int lineNum){   LineItem item=new LineItem();   item.setItemId(fieldSet.readLong(ITEM_ID_COLUMN));   item.setPrice(fieldSet.readBigDecimal(PRICE_COLUMN));   item.setDiscountPerc(fieldSet.readBigDecimal(DISCOUNT_PERC_COLUMN));   item.setDiscountAmount(fieldSet.readBigDecimal(DISCOUNT_AMOUNT_COLUMN));   item.setShippingPrice(fieldSet.readBigDecimal(SHIPPING_PRICE_COLUMN));   item.setHandlingPrice(fieldSet.readBigDecimal(HANDLING_PRICE_COLUMN));   item.setQuantity(fieldSet.readInt(QUANTITY_COLUMN));   item.setTotalPrice(fieldSet.readBigDecimal(TOTAL_PRICE_COLUMN));   return item; } 
assertEquals(0,beanInfo.getOperations().length)
JournalArticleFinderUtil.findByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,type,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
UserLocalServiceUtil.fetchUserById(userId)
IndexReader reader=getOnlySegmentReader(IndexReader.open(dir)); 
Log.e(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
@Override public Cell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
atLeast(1)
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L)
LOG.info(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
Generics.newHashMap()
LayoutLocalServiceUtil.validateImportPortletInfo(userId,targetGroupId,targetPlid,portletId,parameterMap,larFile)
/**   * set if this item is enabled  * @param enabled true if this item is enabled  * @return  */ public T withEnabled(boolean enabled){   this.mEnabled=enabled;   return (T)this; } 
initScripts[i]
IndexOutOfBoundsException e
@NonNull String bluetoothAddress
ref_val.startsWith("HTTP error 403")
mTempDate.get(Calendar.DAY_OF_YEAR) != mMinDate.get(Calendar.DAY_OF_YEAR)
length <= Bytes.SIZEOF_LONG
loadModuleProble(iFace,features.mockedType,true,false,false)
sExecutorService.shutdown()
sysPs != null
lastSyncTimestamp=currentOffset
Status.constructStatuses(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
mCurrentPage != newPageIndex
new Font(edgeFontName,edgeFontSize,edgeFontStyle)
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE,KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
@Override public ClassExpression visitBuiltInTypePrmrAlt(BuiltInTypePrmrAltContext ctx){   return configureAST(this.visitBuiltInType(ctx.builtInType()),ctx); } 
configuration.getEntityStateListener().isEmpty()
maxMergedSegmentBytes / 1024 / 1024.
@Override public DBSObjectContainer getContainer(){   return container; } 
s != null
Preconditions.checkNotNull(uri)
OrderEntry orderEntry
new NTCredentials(proxyUser,proxyPass,localHost,PROXY_DOMAIN)
DESCRIPTION_PATTERN.matcher(error)
KeyEvent.isMetaKey(keyCode)
isDismissed
profileCluster.clear()
VERSION=26
new ArrayList<>()
stat.st_ctim.tv_nsec.get()
client.execute_cql3_query(query,key,Compression.NONE,state.settings.command.consistencyLevel)
signature != null
Arrays.asList("4.0","3.8.2","3.8.1")
tblObj.getDataLocation()
tree.getClientArea()
REVISION=10803
goHome()
CollectionUtils.isNotEmpty(elements)
NamedList<Object>
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name,map.size())
info.getVoiceMailAlphaTagForSubscriber(subId)
tableRow.getString("type").toLowerCase()
super.getSecondString()
/**   * Replace the characters from startPos, inclusive, until endPos, exclusive, with the given string.  * @param startPos The position from which to start replacing, inclusive  * @param endPos The position at which to end replacing, exclusive  * @param replaceWith The string to replace with  */ public static Fix replace(int startPos,int endPos,String replaceWith){   return builder().replace(startPos,endPos,replaceWith).build(); } 
ctClass.toClass()
i < 20
parsed.isJsonNull()
Assert.assertFalse(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
path.toString()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(1)
isPathClassLoaderName(classloaderName)
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()
@Override public final DivideBy on(String sql){   and(sql);   return this; } 
Mockito.verify(mFileSystemMasterClient).rename(src,dst)
globalTimeStamp=-1
field.hasNameIndex()
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg)
(TitanGraphTransaction)result.graph()
readySegment.getDateRangeEnd() < segment.getDateRangeStart()
original.getKeyProperty("path") != null
new IllegalArgumentException("Legacy advertising can't include TX power level in header")
tfoi.setSpecifyFormat(wSpecifyFormat.getSelection())
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,selectedArtifact,true)
controller.getState() != ServiceController.State.UP
node instanceof InspectionRootNode || node instanceof InspectionGroupNode
mVibrator.vibrate(1000L)
useHash=true
_channel.abort()
s String; 
new BooleanValidator("store.json.extended_types",true)
newId > max
receiverType.getSetterMethod(setter)
response != null
o1 instanceof Comparable && o2 instanceof Comparable
Arrays.<Object>asList(ipFinder)
logger.info("Execution of UDF '{}' failed",name,e)
WebServicesTestUtils.checkStringMatch("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
CodeInsightUtilBase.preparePsiElementForWrite(problem_elt)
settings.setWorkersEnabled(true)
/**   * Reason of replication pause.   */ private volatile GridDrPause pause; 
"xml".equals(prefix)
oldFreeSpace > 0
portlet.getPortletId()
VOLUME_CHUNK_SHIFT=24
sp.getBoolean(PREF_AUTODELETE_MEDIA_ID,false)
a.getInteracting().equals(a)
_hasAnnotation(a,JsonSerialize.class) || _hasAnnotation(a,JsonView.class)
setPreference(prefs,editor,r,R.string.p_show_menu_sort,false,ifUnset)
ModalityKt.isFinal(this)
clusterGlobalLock.readLock()
new Parameter(new IdentifierImpl(parameter.getName()),typeToType(parameter.getType(),ConverterUtil.isAnnotatedAsNotNull(parameter.getModifierList())),false)
Wait.waitFor(new Wait.Condition(){   @Override public boolean isSatisified() throws Exception {     return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;   } } ,60000)
new StringBundler(5)
this.doInitrospect(interfaces,matchedInterfaces)
assertEquals(0,deserialized.getOwnedEntryMemoryCost())
new OptionKey<>(true)
beforeMethodInvocation(suspendContext,method,internalEvaluate)
!match && compareCompat
assertEquals(result,"that/has/two/bangs")
mBondState.setBondState(address.toUpperCase(),state)
log.error(error,cause)
xAmount > 0
element instanceof PsiField
_cm_json == null
log.info("In OSGi: using programmatically wired maven parser")
vertx.createHttpServer().requestHandler(req -> {   req.response().putHeader("content-type","text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>"); } ).listen(8081)
mMatchMode=numOfMatchesPerFilter
FunctionTypesKt.isExactFunctionOrExtensionFunctionType(valueParameterOrReceiver.getOriginal().getType())
lineBuf.length() - 2
ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").format(clazz.getName(),IGlobalExtension.class.getName())
data.getSenderId() != myUid()
fileSystem.move(outputFile,archivedOutputFile(1))
a6.getId() << 1
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName())
new RuntimeException(e)
ClusterNode node=ring.node(nodeId); 
mRemote.transact(START_ACTIVITY_TRANSACTION,data,reply,0)
HashSet<String>
query.componentRoots().toArray(new String[0])
isEmptyOrSpaces(s)
matcher.groupCount() == 2
assertEquals(5,pluginList.size())
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.INVOICE)
requestData.setText("")
? extends CharStream
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,158}
targetMethod.recordCall(posBefore,target,debugInfo,false)
tableInfo.getType()
Object message
new GotoFileAction().gotoActionPerformed(e)
map != null
getRawDefinition().contains(" ")
((EventFactHandle)((ObjectVariableContextEntry)context).left).getStartTimestamp()
new AnAction("Top | Bottom"){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=false;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourNotDot : VcsUtil.ourDot);   } } 
new MccEntry(204,"nl",2,"Europe/Amsterdam")
c.getInt(29)
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while")
new MMUnlockHandler(this)
compensationRange.inRange(compensation)
mService.disableEphemeralNetwork(SSID)
Observable.fromCallable(() -> sync.update(mangaSync))
assertProtonResourceLimits(0.88,0.9,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
@Override public ResponseImpl example(String type,Object example){   throw new RuntimeException("Not implemented"); } 
integerSwitchNode.keySuccessor(i) == predecessor
ConcurrentHashMap<PropertyDescriptor,TypeDescriptor>
result.ocFile.getMimetype()
public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
public static XQueryBuilder xquery(File file,String characterSet) throws FileNotFoundException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
assertEquals(6,set.size())
myMaxRowCount=20
clickListener_OnClickListener == null
DIARY_QUEST_GROUP_ID=275
new DatabaseExplorerDialog(shell,props,SWT.NONE,dbinfo,jobMeta.databases,true)
canonicalURLParts.length > 0
instance2.getLifecycleService().terminate()
HashMap<String,Session>
new UnlockHandler(this)
new IndexWriter(dir,new WhitespaceAnalyzer(),false)
new IllegalArgumentException()
expectedMapSize * HASHMAP_DEFAULT_LOAD_FACTOR
@Override GelfOutput create(Stream stream,Configuration configuration); 
words.length >= 2
out.writeObject(entry.getValue())
data < 0 && data > Short.MAX_VALUE
CaseInsensitiveStringHashingStrategy.INSTANCE.hashCode()
Assert.assertEquals(modelAdditionCounters.toString(),4,modelAdditionCounters.size())
shutdown(app)
new Group(provider.getGroupName(),provider.getIcon(),provider.getOpenIcon())
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
ReportRequestMessageListener.class
mapConfig.getTotalBackupCount()
new GHRequest(start,end).setVehicle(algoVehicle.toString()).setType(vehicleStr)
SortedMap<String,SortedMap<String,Object>>
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false)
_("")
Long.valueOf(args[2])
Map.Entry<String,Object>
new IllegalStateException("'targetCacheManager' is required")
myAlignmentProvider.addPair(myNode,childNode,true)
dashboard.addWidget("issues_action_plans",2)
b2c.convert(bc,cc)
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
JetTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
(line=reader.readLine()) != null
childLeftTuple.reAddLeft()
Object aValue
display.getMetrics(dm)
new StringBuilder()
LongStream.range(min,max)
propertiesFile.equals(myResourceBundle.getDefaultPropertiesFile().getVirtualFile())
status.getCreationTimeMs()
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
@Nonnull
logger.error("Could not commit session",t1)
id=31
blocks.size() >= newChildIndex - 1
context.getString(R.string.history_attach_removed,item,attachmentName)
absolutePath.contains("/modules/apps/") || absolutePath.contains("/modules/private/apps/")
"application/xson".equals(contentType)
assertEquals(200,((SoftValueHashMap)catalog.getResourcePool().getFeatureTypeCache()).getHardReferencesCount())
Platform.isAix()
mvStore != null
Slog.wtf(TAG,"showSaveLocked(): no mStructure")
KeyHelper.generateRegistrationId()
cSet.setConcept(this)
DownloaderIndexFromGoogleCode.getIndexFiles(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
!tableLayoutHandle.getPartitions().isPresent()
WEB_SYNC_MANAGER=true
NUM_TOUCHES=40
ActivityManagerNative.getDefault().updateConfiguration(config)
this.errorLogger.error(message)
checkResources(apps[i])
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static PkgControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
IgniteCheckedException e
stringToSearch != null
IndexReader oldReader; 
view.showScrollbar()
getSslStoreProvider().getKeyStore()
output.contains("BUILD FAILED") || output.contains("FAILURE: Build failed with an exception.")
new ClusterTopologyException("Failed to send message because node left grid [nodeId=" + nodeId + ", msg="+ msg+ ']')
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
Integer.class
randomAlphaOfLengthBetween(1,20)
maxFileDescriptorCount != -1 || maxFileDescriptorCount < (1 << 16)
fireMessageReceived(ctx,message)
viewFlow.getWidth()
mBluetoothLock.readLock().lock()
method.getAnnotation(TruffleBoundary.class) != null
mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false)
!src.isEnabled()
return authenticationDecisionStatementProviders; 
mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
unpaidInvoiceTriggerDate == null
"*********** Traced requests text saved to " + requestTraceFile + ".txt"
server1.getStoreRepository().getLocalStore(storeName)
commitMessage.substring(subjectIndex)
id=15801
resolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
Set<String>
wrapper == null
nodeEngine.getService(LockService.SERVICE_NAME)
printf(StatementGenerator.generateStringLiteral(node))
return property; 
assertEquals("Should have exact number of build phases",3,target.getBuildPhases().size())
event.getTimestamp() - lastPauseTimeStamp > 0
log.error(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
block.getZ() + 1.5
AvailablePortFinder.getNextAvailable()
SERIAL_VERSION_UID=500L
isMailSenderDefined()
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,true)
NettyAsyncHttpProvider.class
Instrument.create(null,new AdvancedInstrumentRootFactory(){   public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return null;   } } ,"test AdvancedInstrument")
config.setProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title")
new ClusterConfiguration("clusterName",StringLogger.DEV_NULL,initialHosts)
getConnectionAddOperation(name,outboundSocketBindingRef,address)
LOGGER.debug("Could not execute unmarkEntries",ex)
child.getProperties().isNodePartitionedOn(partitioningRequirement)
endpoint.getConnectionFactory()
synchronized (classCache) {   classCache.clear(); } 
showSnackbar(mainTextResource,shortLength,actionTextResource,listener,root)
totalNbSuggestions > MAX_NUMBER_SUGGESTIONS
suggestion.getTooltip() != null
!isDocumentUnsaved(document)
getPointer().getInt(0)
modelName + "." + expressionEntry.getKey()
tagName.equals("uses-permission-sdk-m")
public static final Object WS_EXTENSIONS_HEADER_NAME_LOWER=WS_EXTENSIONS_HEADER_NAME.toLowerCase(Locale.ENGLISH); 
iconSize * DisplayMetrics.DENSITY_MEDIUM > availableHeight
checkValidHandle(muMMatrixHandle,null)
platformData.get(key)
this(client,path,true,false,Integer.MAX_VALUE,Executors.newSingleThreadExecutor(defaultThreadFactory),false,true,new DefaultTreeCacheSelector()); 
__("(")
Disposer.dispose(timed)
Log.e(TAG,"read property failed, e:" + e)
(flags & 0x20) > 0
ContainerUtil.newHashSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
numAttributes != expectedItemCount
encoderLayerSizes == null
STMT_CACHE_CLEANUP_TIMEOUT * 2
HttpParameter.CACHE_ID.getParameterFrom(req) == null
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavaDocComment("Super extra cool this annotation!!!")
return 7; 
id=1
getActiveFgCall().getPhone().sendDtmf(c)
new ProgressDialog(this)
new StreamError(sm.getString("http2Parser.processFrame.unexpectedType",expected,frameType),Http2Error.PROTOCOL_ERROR,streamId)
XSLContentWebUpgrade.class
LOG.error("did not find superclass names when mapping inheritance....")
co.fadeInDuration=500
ChronicleEngineEnpoint.class
Localization.lang("View")
Collection<Fragment>
monitor.isCanceled()
buildLockFactory()
!executableFlag
map.putSingle(OAuthConstants.CLIENT_AUDIENCE,scope)
GL20.glUniform1(location,toIntBuffer(v,offset,count))
connection == null
myFindDialog.setModal(false)
height
Object item
list.getAdapter().getCount() - 2
@Test public void testResolveMultiplePaths() throws IOException {   String expected=tmpFolder.getRoot().toPath().resolve("aa").resolve("bb").resolve("cc").toString();   assertEquals(expected,IOChannelUtils.resolve(tmpFolder.getRoot().getPath(),"aa","bb","cc")); } 
ContainerUtil.newHashSet("AddToFavoritesPopup","RemoveFromFavorites","DatabaseView.ImportDataSources","CompileDirty","Compile","AddNewFavoritesList","EditFavorites","RemoveFromFavorites","RenameFavoritesList","RemoveFavoritesList")
attrib.isPosition()
convert31XToMeters(xB,xA)
httpMethod.getResponseHeader(TRANSFER_ENCODING)
typeSupported(type)
rsMeta.getColumnName(i + 1)
sourceIterator.numExamples()
NoClassDefFoundError ex
_imageStorage.getFileVersionPath(fileVersion,configurationUuid)
new StepMeta(log,tostepid,tostepname,(StepMetaInterface)toi)
RuleChain.outerRule(timeout)
!refType.equals(StructuredDocString.PARAMETER_TYPE)
assertProtonResourceLimits(0.8,0.77,new ContentClusterBuilder().protonMemoryLimit(0.77).getXml())
streamTokenizer.ttype == StreamTokenizer.TT_WORD
new IllegalStateException()
type == OrderRootType.CLASSES
Schedulers.newThread()
mFacetCategoryMap.get(packageName)
copy.getGenericsTypes()
Assert.assertEquals(500,counter)
GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))
sr.isForeground
new CSVFilter("")
resolveSession.getStorageManager().createWeaklyRetainedMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
public String getKey(){   return this.key; } 
assertEquals(2,intentions.size())
construct(ignoredList,mapType,staticValueType,vts,keySerializer,valueSerializer)
exifThumbWidth >= fullThumbWidth
new InternalOutputBuffer(res)
dlFolderLocalService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
new WorldPoint(1500,3703,1)
t.run()
!isRuleBasedFormat || stripped instanceof PsiThrowStatement
Timber.w(e,error)
new RetryDriver(maxRetryAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
Integer.valueOf(matcher.group(1))
Float.parseFloat(value)
error instanceof RebuildRequestedException
new IOException(e)
FileHash.hash(outputFile,algo).equals(checksum)
Float.valueOf(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
uploadArchivesTask.finalizedBy(updateBundleVersionTask)
dbCol.findOne()
new URLClassLoader(new URL[]{aDir.toURI().toURL(),bDir.toURI().toURL()})
new IOException(e.getLocalizedMessage())
getService().animateCollapse()
FREQUENT_RESTARTS_THRESHOLD=16
mbw.writeTo(o,cls,type,anns,contentType,headers,os)
MAX_BATCH_SIZE=1000
Arrays.asList("ls","pwd")
rPos > 0
wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())
StringBuffer error=new StringBuffer("GroovyServlet Error: "); 
mapper.getTypeFactory().uncheckedSimpleType(Statistics.class)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false)
tJvmGcDetailed.getJvmGcNewCount()
{0,7}
mProgressListener != null
cause instanceof KBTemplateContentException || cause instanceof KBTemplateTitleException || cause instanceof NoSuchTemplateException|| super.isSessionErrorException(cause)
@Override public final Object createNullToken(final String token,final int startPos){   return new AnalyzedGermanTokenReadings(new AnalyzedGermanToken(token,null,startPos)); } 
ReferenceCountUtil.safeRelease(holder)
MAX_PARAGRAPH_TIMEOUT_SEC=60
log.error("Unable to initialize AuthorizationBackend {} due to {}",ad,e.toString())
!site && (liveGroupId == 0)
new ThreadPoolExecutor(5,Integer.MAX_VALUE,6L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
Collections.addAll(lastFilterPoiAdditionalsCategories,parser.getAttributeValue("","poi_additional_category").split(","))
!type.isAnonymousClass() && !type.isInterface()
-1083561650
@Override public ResponseImpl description(String description){   throw new RuntimeException("Not implemented"); } 
Math.max(values().length - 1,value)
new PlainMenuItem(iconId,text,null,needLinks,isUrl,false,null,onClickListener)
@Override public void setting(int identifier,long value) throws ConnectionError {   remoteSettings.set(identifier,value); } 
new L2Vertex(null,"",-1)
ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file)); 
post.addParameter(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
new EnterSelectionDialog(shell,props,conn,"Target database:","Select the target database:")
e != null
cf.getLocalDeletionTime() <= gcBefore
new GormAwareDataBindindingListener(tmpBindingResult)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,true)
!ObjectUtils.isEmpty(getLocations()) && !ObjectUtils.isEmpty(getClasses())
helper(ans,comb,k,i + 1,n - i)
groupsFile.getPath()
assertTrue(true)
id=21
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",false,featuresConfig.isLegacyOrderBy())
file.getAbsoluteFile()
stats.getLastUpdateTime() > lastUpdateTime
writer.value(null)
buffer.toString()
it.setJavaDocComment("Super extra cool this annotation!!!")
SystemProperties.getBoolean("debug.choreographer.animdraw",true)
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","case","default")
file.toString()
camera.setMatrices(app.getGraphics())
case 12: 
mShouldLogContentAppeared=true
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,FALSE)
StringBuffer builder=new StringBuffer(); 
ServiceLoader.load(Collector.class)
SiteBrowserWebUpgrade.class
assertEquals(2,props.getConfigPathPatterns().length,2)
width - 1
new long[1]
PyNames.COMPARISON_OPERATORS.contains(qexpr.getReferencedName())
handler instanceof ChannelInboundHandler
Map self
agg.setBatchTimeout(1000L)
EnumSet.noneOf(AlarmInfoType.class)
paramTypes[i]
ContainerResources.from(2.3,4,16)
realStartActivityLocked(hr,app,true,true)
new Button("submit",new StringResourceModel("submit",this,null)){   @Override public void onSubmit(){     GeoServer gs=getGeoServer();     gs.save((GeoServerInfo)globalInfoModel.getObject());     gs.save((LoggingInfo)loggingInfoModel.getObject());     doReturn();   } } 
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitide()
name="java:/queue/myAwesomeQueue"
TypeConversionUtil.areTypesConvertible(targetType,actualType)
Futures.transform(Futures.allAsList(delegate.store(ArtifactInfo.builder().setRuleKeys(info.getRuleKeys()).setMetadata(metadataWithCacheKey).build(),BorrowablePath.notBorrowablePath(emptyFilePath)),delegate.store(ArtifactInfo.builder().addRuleKeys(new RuleKey(hashCode)).build(),output)),Functions.constant(true))
headers.getContentLength() < 0
Object o=latest[index]; 
STMT_CACHE_CLEANUP_TIMEOUT=1000
assertNumUniqueNodeNameBuckets(2)
"com.google.android.gms".equals(mPackageName)
private final String parentKey; 
Map<String,AstyanaxOrderedKeyColumnValueStore>
Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",preOut),0)
this(maxFrameLength,lengthFieldOffset,lengthFieldOffset,lengthAdjustment,initialBytesToStrip,false); 
new IOException(badLine)
pushNotificationsSender.resetPushNotificationSenders()
searchCompleter.addBibtexEntry(entry)
marketDataService.getBittrexTrades(pairString,100)
loopField.getRangeDurationField().getType() != lastType
DEFAULT_MAX_QUERIES=3
converterTemplate(returnConverter)
!mDownloadXtraDataPending
logger.debug("rapidRefreshFutureEnd stopping")
window != null
FunctionTypesKt.isExactExtensionFunctionType(upperBoundType)
proxyServer != null
expirationTime == Long.MAX_VALUE && expirationTime < 0
tx.unsafeBitcoinSerialize()
container.isReadyToRun() && !model.isUpdateInProgress()
new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
DbConnectionManager.close(pstmt,con)
(XBeanBrokerService)context.getBean(name)
assertTrue(exitStatuses.contains(status.getExitStatus()))
/**   * {@inheritDoc}  */ @Override public Object clone(){   DoubleProperty prop=(DoubleProperty)super.clone();   prop.value=value;   return prop; } 
POOL_LIMIT=12
config.getProperty(jailName.toLowerCase()) == null
DiagnosticFactory3.create(WARNING,CALL_ELEMENT)
parts.get(1)
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
/**   * Logs <code>load()</code>, <code>store()</code> and <code>close()</code> methods and exceptions.  */ public class LoggingBuildCacheServiceDecorator extends ForwardingRoleAwareBuildCacheService {   private static final Logger LOGGER=LoggerFactory.getLogger(LoggingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   public LoggingBuildCacheServiceDecorator(  RoleAwareBuildCacheService delegate){     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     try {       LOGGER.debug("Loading entry {} from {} build cache",key,getRole());       return super.load(key,reader);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not load entry {} from {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     try {       LOGGER.debug("Storing entry {} in {} build cache",key,getRole());       super.store(key,writer);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not store entry {} in {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void close() throws IOException {     LOGGER.debug("Closing {} build cache",getRole());     super.close();   } } 
thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_THING_TYPE)
url.substring(pathStartIndexInUrl,url.length())
current.getSuperClass()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY)
(o instanceof Record)
tagName.equals(TAG_FORWARDING_INTENT_FILTERS)
TimeValue.timeValueMillis(randomIntBetween(1,5) * aggHistogramInterval)
UDeclarationKt.getContainingDeclaration(uClass)
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",true,"Stop DBeaver running instance")
_connector.getResponses("GET /foo?status=206&data=42 HTTP/1.0\n\n")
grid(1).cache(null).localSize()
connectedHeaders.setAcceptVersion("1.2")
info.getLine1AlphaTagForSubscriber(subId)
apnContext.getWaitngApns()
classNode.getMethod("validate",new Parameter[0])
me.getComponent() == myCurrentComponent
ZeppelinhubRestApiHandler.class
objectCache.put(parent,objects)
/**   * Sender node ID.   */ private final UUID sndNodeId; 
isZeroLatencyTypingEnabled() && IMMEDIATE_EDITING_ACTIONS.contains(action.getClass())
readOwners.size()
renderManager.render(tpf,false)
interceptor.intercept(invocation)
place == null
new Rect(left,top,bottom,right)
RuntimeException.class
new SonarException(String.format("You don't have access rights to project [%s]",projectKey))
SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules())
public TokenStream create(Reader input){   return new StandardTokenizer(input); } 
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
MessageExtractor.getTextFromPart(this)
newHttpConnection(this)
public void setHeaderTableSize(long headerTableSize) throws ConnectionError {   if (headerTableSize > (16 * 1024)) {     throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR);   }   this.headerTableSize=(int)headerTableSize; } 
zoom2d=200000
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Statistics statistics
testBadSentence(origBadSrcSentence,suggestedCorrection,expectedSrcMatchStart,expectedSrcMatchEnd,rule.getSrcRule(),lang,languageTool)
apex.installPackage(mResolvedBaseFile.toString())
args.size() > error.first
dests.size() == 1
file != null
TCN_RECOMMENDED_PV=27
filesQueue.get(0)
state != null
AndroidInstrumentationInfoProvider instrumentationProvider=instrumentation.get(AndroidInstrumentationInfoProvider.ANDROID_INSTRUMENTATION_INFO); 
portletDataContext.getExportDataElement(entityStagedModel)
preDestroys != null
(status & 0x00040000) > 0
offsetHandler.enter()
jarURL.toURI().getPath()
testSame("yz();","function yz() {}",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,true)
planRouteContext.isMarkersListOpened() && hideMarkersListFirst
LOG.error("Failed to get file text from file " + fileName,e)
errors.addAllErrors(errors)
graphModel.getGraph().getEdgeCount()
worldsData.containsKey(worldName.toLowerCase()) || mirrorsGroup.containsKey(worldName.toLowerCase())
ApplicationManager.getApplication().isUnitTestMode()
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ AtmosphereResource removeAtmosphereResource(AtmosphereResource resource); 
Status.constructStatuses(get(getBaseURL() + "statuses/public_timeline.json",false))
120 * 1000L
id=15861
propValue == null
executorService.awaitTermination(5,TimeUnit.SECONDS)
setSort(3)
location != null
maxEntityId > maxSequenceId
options.putOpt("updated",true)
builder.parseXContent(parser,true)
startPoint != null
AbstractConfiguredTarget.class
EndpointReferenceUtils.getAddress(ref)
createHandlerResult(swivelCredential,this.principalFactory.createPrincipal(uid),null)
Publication addPublication(final String channel,final int streamId){   ensureOpen();   stashedChannel=channel;   final long registrationId=driverProxy.addPublication(channel,streamId);   awaitResponse(registrationId);   return (Publication)resourceByRegIdMap.get(registrationId); } 
final ScheduledJobIdentifier jobRuntimeInformation=(ScheduledJobIdentifier)jobIdentifier; 
enchantments.putAll(stack.enchantments)
order.getSide().equals("buy")
ClassFileExtraction.of(Foo.class,Bar.class)
blockIntervalAgo.getDifficultyTarget()
!verbDoesMatchPersonAndNumber(tokens[posEr - 1],tokens[posEr + plus1],"3","SIN") && !nextButOneIsModal(tokens,posEr) && !"äußerst".equals(finiteVerb.getToken())
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setTitle(POINT_ADD_GPX_WAYPOINT)
mSimpleCard.getVisibility() != View.VISIBLE
getExecutorServiceManager().shutdown(errorHandlerExecutorService)
LinkedHashMap<String,Object>
Object key
memoryCacheSize <= 0
if (isVisible) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
modelName + "." + signatureEntry.getKey()+ "."+ outputEntry.getKey()
terminal.receivedInput(postCreateText)
i >= graphs.size()
new SystemException("Unable to communicate with OpenId provider",e)
Table<String,String,byte[]>
new StringBuilder(URL)
elements == null
editor != null
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public String getBindHostKey(){   return mBindHostKey; } 
ProxyOutputStream.amountTransfered.getAndSet(0) / 1000
stats.getLastAccessTime() > lastAccessTime
isPrettyLogging() && (contentType != null && contentType.indexOf("xml") >= 0)
new RepresentorImpl.BuilderImpl<>(typeClass,nameFunction,biConsumer,relatedCollectionSupplier)
attr.lookupNamespaceURI(nodeName)
id=50
mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
(_branch == jumpTouchData._branch) && (_branchNumber == jumpTouchData._branchNumber)
callTimeoutMillis=1000
Math.abs(f) > 65520
new Tag(text,line)
new IndexWriter(ramDir,new WhitespaceAnalyzer(),false)
1000 * 1
total=total / partCount
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory()
new OwnerInfo(profileOwnerPackageName,profileOwnerName,profileEnabled)
mUserManager.isUserRunning(userHandle)
tester.nodeRepository().getNodes(Node.State.ready)
!isClosureRBrace(element)
currentChatPanel.getDefaultContact()
